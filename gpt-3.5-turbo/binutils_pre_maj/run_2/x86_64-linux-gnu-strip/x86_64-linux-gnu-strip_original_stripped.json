{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "set_debug_type_constant_00113dfe",
                "param_1": "type",
                "param_2": "value",
                "lVar1": "debugType"
            },
            "code": "\nvoid setDebugTypeConstant_00113dfe(undefined4 type,undefined value)\n\n{\n  long debugType;\n  \n  debugType = debug_make_type_constprop_0(3,type);\n  if (debugType != 0) {\n    *(undefined *)(debugType + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "set_debug_type_constant_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "stab_demangle_v3_arg",
                "bfd_nonfatal.cold",
                "debug_record_line",
                "list_matching_formats",
                "list_supported_targets",
                "FUN_0010554f",
                "debug_record_variable",
                "finish_stab",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "copy_usage",
                "stab_demangle_v3_arglist",
                "main",
                "stab_bad_demangle",
                "debug_name_type",
                "debug_write_type.constprop.0",
                "bfd_nonfatal_message",
                "display_info.isra.0",
                "debug_end_block",
                "stab_find_slot",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "stab_find_type",
                "report",
                "debug_end_function",
                "debug_start_block",
                "parse_stab",
                "stab_context",
                "parse_stab_type",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_to_string_0010ab4d",
                "param_1": "buffer_ptr",
                "param_2": "input_string",
                "param_3": "ptr_1",
                "param_4": "ptr_2",
                "uVar1": "buffer_address",
                "lVar2": "buffer_length",
                "auVar3": "result",
                "sVar4": "input_length",
                "pcVar5": "buffer",
                "sVar6": "buffer_size",
                "auVar7": "output"
            },
            "code": "\nundefined  [16] append_to_string_0010ab4d(long buffer_ptr,char *input_string,undefined8 ptr_1,undefined8 ptr_2)\n\n{\n  ulong buffer_address;\n  long buffer_length;\n  undefined result [16];\n  size_t input_length;\n  char *buffer;\n  size_t buffer_size;\n  undefined output [16];\n  \n  buffer_address = *(ulong *)(buffer_ptr + 0x60);\n  if ((buffer_address != 0) && (*(long *)(buffer_address + 0x20) != 0)) {\n    buffer = *(char **)(buffer_address + 0x30);\n    input_length = strlen(input_string);\n    if (buffer == (char *)0x0) {\n      buffer = (char *)xmalloc(input_length + 3);\n      *buffer = '\\0';\n    }\n    else {\n      buffer_size = strlen(buffer);\n      buffer = (char *)xrealloc(buffer,input_length + 4 + buffer_size);\n    }\n    input_length = strlen(buffer);\n    sprintf(buffer + input_length,\"%s::\",input_string);\n    buffer_length = *(long *)(buffer_ptr + 0x60);\n    *(char **)(buffer_length + 0x30) = buffer;\n    output._1_7_ = (undefined7)((ulong)buffer_length >> 8);\n    output[0] = 1;\n    output._8_8_ = ptr_2;\n    return output;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = buffer_address;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xrealloc",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_to_string_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "filePtr",
                "param_2": "nameType",
                "param_3": "debugName",
                "uVar1": "errMsg",
                "lVar2": "type",
                "pauVar3": "typePtr",
                "lVar4": "namespace"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long filePtr,long nameType,long debugName)\n\n{\n  undefined8 errMsg;\n  long type;\n  undefined (*typePtr) [16];\n  long namespace;\n  \n  if ((nameType != 0) && (debugName != 0)) {\n    if ((*(long *)(filePtr + 8) == 0) || (*(long *)(filePtr + 0x10) == 0)) {\n      errMsg = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errMsg);\n    }\n    else {\n      type = debug_make_type_constprop_0(0x16,0);\n      if (type != 0) {\n        typePtr = (undefined (*) [16])xmalloc(0x10);\n        namespace = *(long *)(filePtr + 0x10);\n        *typePtr = ZEXT816(0);\n        *(long *)(*typePtr + 8) = debugName;\n        *(undefined (**) [16])(type + 0x10) = typePtr;\n        namespace = debug_add_to_namespace_constprop_0(namespace + 0x10,nameType,0,3);\n        if (namespace != 0) {\n          *(long *)(namespace + 0x20) = type;\n          *(long *)*typePtr = namespace;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "add_redefine_and_check",
                "strchr",
                "bfd_set_error_program_name",
                "memmove",
                "find_section_list",
                "filename_cmp",
                "xstrndup",
                "strtoul",
                "fatal",
                "copy_usage",
                "dup",
                "strlen",
                "strncpy",
                "bfd_init",
                "dcgettext",
                "htab_create_alloc",
                "xrealloc",
                "ftell",
                "bfd_nonfatal_message",
                "convert_efi_target",
                "display_info.isra.0",
                "strtol",
                "add_specific_symbols",
                "strcmp",
                "mkstemp",
                "non_fatal",
                "template_in_dir",
                "free",
                "getc",
                "bindtextdomain",
                "bfd_set_default_target",
                "eq_string_redefnode",
                "fprintf",
                "strcpy",
                "handle_remove_section_option",
                "delete_symbol_htabs",
                "print_version",
                "fseek",
                "getopt_long",
                "copy_file",
                "setlocale",
                "fopen",
                "__errno_location",
                "htab_hash_redefnode",
                "stat",
                "free",
                "strerror",
                "section_add_load_file",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "parse_flags",
                "close",
                "startswith.lto_priv.0.lto_priv.0",
                "strip_usage",
                "init_section_add",
                "xcalloc",
                "htab_elements",
                "strncasecmp",
                "malloc",
                "get_file_size",
                "bfd_scan_arch",
                "unlink_if_ordinary",
                "memcpy",
                "strcasecmp",
                "xexit",
                "htab_find_slot",
                "ferror",
                "fread",
                "create_symbol_htab",
                "xatexit_cleanup.lto_priv.0",
                "bfd_get_error",
                "xstrdup",
                "fclose",
                "parse_vma",
                "smart_rename",
                "xmalloc",
                "textdomain"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "initialize_debug_block_0010be88",
                "param_1": "blockInfo",
                "param_2": "debugInfo",
                "param_3": "undefined1",
                "param_4": "undefined2",
                "puVar1": "endOfBlock",
                "uVar2": "result",
                "puVar3": "newBlock",
                "puVar4": "currentBlock",
                "lVar5": "tempVar",
                "puVar6": "lastBlock",
                "puVar7": "blockPointer",
                "bVar8": "flag",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] initializeDebugBlock_0010be88(long blockInfo,undefined8 debugInfo,undefined8 undefined1,undefined8 undefined2)\n\n{\n  undefined8 *endOfBlock;\n  undefined8 result;\n  undefined4 *newBlock;\n  undefined8 *currentBlock;\n  long tempVar;\n  undefined8 *lastBlock;\n  undefined4 *blockPointer;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  if ((*(long *)(blockInfo + 8) == 0) || (*(long *)(blockInfo + 0x20) == 0)) {\n    result = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    blockPointer = newBlock;\n    for (tempVar = 0xc; tempVar != 0; tempVar = tempVar + -1) {\n      *blockPointer = 0;\n      blockPointer = blockPointer + (ulong)flag * -2 + 1;\n    }\n    tempVar = *(long *)(blockInfo + 0x20);\n    *(undefined8 *)(newBlock + 6) = debugInfo;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = tempVar;\n    endOfBlock = *(undefined8 **)(tempVar + 0x10);\n    lastBlock = (undefined8 *)(tempVar + 0x10);\n    while (currentBlock = endOfBlock, currentBlock != (undefined8 *)0x0) {\n      lastBlock = currentBlock;\n      endOfBlock = (undefined8 *)*currentBlock;\n    }\n    *lastBlock = newBlock;\n    result = 1;\n    *(undefined4 **)(blockInfo + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = undefined2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_block_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "functionParams",
                "param_2": "fieldName",
                "param_3": "param3Value",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "flag",
                "iVar2": "data",
                "lVar3": "currentParam",
                "__s": "type",
                "sVar4": "lenParam1",
                "sVar5": "lenFieldName",
                "sVar6": "lenType",
                "__s_00": "newMessage",
                "uVar7": "format",
                "uVar8": "returnValue",
                "pcVar9": "flagValue"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *functionParams,char *fieldName,undefined8 param3Value,ulong fieldSize,int fieldType)\n\n{\n  char flag;\n  int data;\n  long currentParam;\n  char *type;\n  size_t lenParam1;\n  size_t lenFieldName;\n  size_t lenType;\n  char *newMessage;\n  undefined8 format;\n  undefined8 returnValue;\n  char *flagValue;\n  \n  flag = *(char *)(functionParams[0xc] + 0x1c);\n  data = *(int *)(functionParams[0xc] + 0x18);\n  type = (char *)stab_pop_type();\n  if (*(char **)(functionParams[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    lenParam1 = strlen(*(char **)(functionParams[0xc] + 0x20));\n    lenFieldName = strlen(fieldName);\n    lenType = strlen(type);\n    newMessage = (char *)xmalloc(lenParam1 + 0x32 + lenFieldName + lenType);\n    if (fieldType == 1) {\n      flagValue = \"/1\";\n    }\n    else {\n      flagValue = \"/0\";\n      if ((fieldType != 2) && (flagValue = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(data * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*functionParams;\n      format = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(format,returnValue,fieldName);\n    }\n    sprintf(newMessage,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(functionParams[0xc] + 0x20),fieldName,flagValue,type,\n            param3Value,fieldSize);\n    free(*(void **)(functionParams[0xc] + 0x20));\n    currentParam = functionParams[0xc];\n    *(char **)(currentParam + 0x20) = newMessage;\n    if (flag != '\\0') {\n      *(undefined *)(currentParam + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)currentParam >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "input",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "option",
                "cVar1": "flagValue",
                "__s": "previousData",
                "sVar5": "dataSize",
                "pcVar6": "formattedData",
                "lVar2": "structure",
                "cVar3": "flagCharacter",
                "uVar4": "counter",
                "lVar7": "reallocAddr",
                "uVar8": "success",
                "uVar9": "currentIdx",
                "uVar10": "lastIdx"
            },
            "code": "\nundefined8 processData_0010aa53(long input,undefined8 value,char flag,int option)\n\n{\n  char flagValue;\n  long structure;\n  char flagCharacter;\n  uint counter;\n  char *previousData;\n  size_t dataSize;\n  char *formattedData;\n  long reallocAddr;\n  undefined8 success;\n  ulong currentIdx;\n  ulong lastIdx;\n  \n  flagValue = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  previousData = (char *)stab_pop_type();\n  dataSize = strlen(previousData);\n  formattedData = (char *)xmalloc(dataSize + 0x19);\n  *formattedData = flag + '0';\n  if (option == 1) {\n    flagCharacter = '1';\n  }\n  else {\n    flagCharacter = '0';\n    if ((option != 2) && (flagCharacter = '2', option != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedData[1] = flagCharacter;\n  sprintf(formattedData + 2,\"%ld,%s;\",value);\n  free(previousData);\n  structure = *(long *)(input + 0x60);\n  success = 0;\n  if ((structure != 0) && (*(long *)(structure + 0x20) != 0)) {\n    structure = *(long *)(structure + 0x28);\n    lastIdx = 0;\n    if (structure != 0) {\n      counter = 0;\n      do {\n        currentIdx = (ulong)counter;\n        lastIdx = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(structure + currentIdx * 8) != 0);\n    }\n    reallocAddr = xrealloc(structure,(ulong)((int)lastIdx + 2) << 3);\n    *(char **)(reallocAddr + lastIdx * 8) = formattedData;\n    *(undefined8 *)(reallocAddr + (ulong)((int)lastIdx + 1) * 8) = 0;\n    structure = *(long *)(input + 0x60);\n    *(long *)(structure + 0x28) = reallocAddr;\n    if (flagValue != '\\0') {\n      *(undefined *)(structure + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "parse_stab_data_0011173a",
                "param_1": "filename",
                "param_2": "stab_data",
                "param_3": "opcode",
                "param_4": "line_number",
                "param_5": "address",
                "param_6": "string_data",
                "cVar1": "char1",
                "bVar2": "byte1",
                "__ptr": "ptr1",
                "cVar3": "char2",
                "uVar4": "undefined1",
                "iVar5": "int1",
                "puVar6": "ptr2",
                "plVar7": "long_ptr1",
                "pcVar8": "char_ptr1",
                "uVar9": "undefined8_1",
                "lVar10": "long1",
                "lVar11": "long2",
                "lVar12": "long3",
                "lVar13": "long_ptr2",
                "uVar14": "ulong1",
                "uVar15": "ulong2",
                "pcVar16": "char_ptr2",
                "uVar17": "uint1",
                "pplVar18": "long_ptr_ptr1",
                "dVar19": "double1",
                "local_48": "char_ptr3",
                "local_40": "long_ptr_ptr2",
                "debug_set_filename": "set_debug_filename",
                "xmalloc": "allocate_memory",
                "strlen": "get_string_length",
                "strcmp": "compare_strings",
                "debug_start_source": "start_debug_source",
                "xstrdup": "duplicate_string",
                "concat": "concatenate_strings",
                "free": "free_memory",
                "debug_end_function": "end_debug_function",
                "stab_emit_pending_vars": "emit_pending_vars",
                "debug_end_block": "end_debug_block",
                "debug_record_line": "record_line",
                "debug_record_function": "record_function",
                "debug_record_parameter": "record_parameter",
                "debug_record_variable": "record_variable",
                "bad_stab": "handle_bad_stab",
                "debug_make_function_type_isra_0": "make_function_type",
                "debug_make_pointer_type_isra_0": "make_pointer_type",
                "debug_tag_type": "tag_type",
                "debug_name_type": "name_type",
                "_sch_istable": "sch_istable",
                "dcgettext": "translate_text",
                "fprintf": "print_formatted",
                "_stderr": "standart_error_output"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined parse_stab_data_0011173a(undefined8 filename,long *stab_data,int opcode,int line_number,ulong address,\n                      char *string_data)\n\n{\n  char char1;\n  byte byte1;\n  void *ptr1;\n  char char2;\n  undefined undefined1;\n  int int1;\n  undefined8 *ptr2;\n  long *long_ptr1;\n  char *char_ptr1;\n  undefined8 undefined8_1;\n  long long1;\n  long long2;\n  long long3;\n  long **pplong_ptr2;\n  ulong ulong1;\n  ulong ulong2;\n  char *char_ptr2;\n  uint uint1;\n  long **long_ptr_ptr1;\n  double double1;\n  char *char_ptr3;\n  long **long_ptr_ptr2 [2];\n  \n  if (stab_data[4] != 0) {\n    if (((opcode == 100) && (*string_data != '\\0')) && (stab_data[5] == address)) goto LAB_00111a06;\n    char2 = set_debug_filename(filename);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)stab_data + 0x44) = 0;\n    *(undefined4 *)(stab_data + 8) = 0;\n    stab_data[9] = stab_data[4];\n    if (*(char *)(stab_data + 1) == '\\0') {\n      stab_data[6] = stab_data[5];\n    }\n    *(undefined4 *)(stab_data + 0x10) = 1;\n    ptr2 = (undefined8 *)allocate_memory(8);\n    stab_data[0x11] = (long)ptr2;\n    *ptr2 = 0;\n    stab_data[4] = 0;\n  }\n  get_string_length(string_data);\n  if (opcode == 0x84) {\nLAB_00111ab7:\n    undefined1 = start_debug_source(filename,string_data);\n    return undefined1;\n  }\n  if (opcode < 0x85) {\n    if (opcode == 0x3c) {\n      int1 = compare_strings(string_data,\"gcc2_compiled.\");\n      if (int1 == 0) {\n        *(undefined4 *)(stab_data + 8) = 2;\n        return 1;\n      }\n      int1 = compare_strings(string_data,\"gcc_compiled.\");\n      if (int1 == 0) {\n        *(undefined4 *)(stab_data + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)stab_data + 0x44) = 1;\n      return 1;\n    }\n    if (opcode < 0x3d) {\n      if (opcode == 0x24) {\n        if (*string_data == '\\0') {\n          if (*(char *)(stab_data + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(stab_data + 1) != '\\0') {\n            address = address + stab_data[7];\n          }\n          char2 = emit_pending_vars(filename,stab_data);\n          if (char2 != '\\0') {\n            char2 = end_debug_function(filename,address);\n            if (char2 != '\\0') {\n              *(undefined *)(stab_data + 0xc) = 0;\n              stab_data[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(stab_data + 0xc) != '\\0') &&\n           ((address < (ulong)stab_data[0xd] || (stab_data[0xd] == 0xffffffffffffffff)))) {\n          stab_data[0xd] = address;\n        }\n      }\n      else if (opcode < 0x25) {\n        if (opcode == 0xc) {\n          return 1;\n        }\n        if (opcode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (opcode == 0x2a) {\n          return 1;\n        }\n        if (opcode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (opcode == 100) {\nLAB_00111a06:\n        if (*(char *)(stab_data + 0xc) != '\\0') {\n          ulong1 = address;\n          if (((*string_data != '\\0') && (ulong2 = stab_data[0xd], ulong2 != 0xffffffffffffffff)) &&\n             (ulong1 = ulong2, address < ulong2)) {\n            ulong1 = address;\n          }\n          char2 = emit_pending_vars(filename,stab_data);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          char2 = end_debug_function(filename,ulong1);\n          if (char2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(stab_data + 0xc) = 0;\n          stab_data[0xd] = -1;\n        }\n        if (*string_data == '\\0') {\n          return 1;\n        }\n        ptr1 = (void *)stab_data[4];\n        if (ptr1 == (void *)0x0) {\n          long3 = duplicate_string(string_data);\n          stab_data[4] = long3;\n        }\n        else {\n          if (*string_data == '/') {\n            long3 = duplicate_string(string_data);\n          }\n          else {\n            long3 = concatenate_strings(ptr1,string_data,0);\n          }\n          stab_data[4] = long3;\n          free_memory(ptr1);\n        }\n        stab_data[5] = address;\n        return 1;\n      }\n      if (opcode < 0x65) {\n        if (opcode == 0x44) {\n          long3 = 0;\n          if (*(char *)(stab_data + 0xc) != '\\0') {\n            long3 = stab_data[7];\n          }\n          undefined1 = record_line(filename,(long)line_number,long3 + address);\n          return undefined1;\n        }\n        if (opcode == 0x62) {\n          return 1;\n        }\n      }\n      else if (opcode == 0x82) {\n        long_ptr1 = (long *)allocate_memory();\n        int1 = *(int *)(stab_data + 0x10);\n        long1 = stab_data[10];\n        long2 = stab_data[0xb];\n        long_ptr1[5] = 0;\n        long3 = stab_data[0x11];\n        *(int *)(long_ptr1 + 4) = int1;\n        uint1 = int1 + 1;\n        *(uint *)(stab_data + 0x10) = uint1;\n        *long_ptr1 = long2;\n        long_ptr1[1] = long1;\n        long_ptr1[2] = (long)string_data;\n        long_ptr1[3] = address;\n        stab_data[10] = (long)long_ptr1;\n        stab_data[0xb] = (long)long_ptr1;\n        long3 = xrealloc(long3,(ulong)uint1 << 3);\n        uint1 = *(uint *)(long_ptr1 + 4);\n        stab_data[0x11] = long3;\n        *(undefined8 *)(long3 + (ulong)uint1 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    char_ptr1 = strchr(string_data,0x3a);\n    if ((char_ptr1 != (char *)0x0) && ((char_ptr1[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(stab_data + 0xc) != '\\0') {\n        ulong1 = stab_data[0xd];\n        ulong2 = address;\n        if ((ulong1 != 0xffffffffffffffff) && (ulong2 = ulong1, address < ulong1)) {\n          ulong2 = address;\n        }\n        char2 = emit_pending_vars(filename,stab_data);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        char2 = end_debug_function(filename,ulong2);\n        if (char2 == '\\0') {\n          return 0;\n        }\n        stab_data[0xd] = -1;\n      }\n      if (*(char *)(stab_data + 1) != '\\0') {\n        stab_data[7] = address;\n      }\n      *(undefined *)(stab_data + 0xc) = 1;\n    }\n    char_ptr3 = strchr(string_data,0x3a);\n    if (char_ptr3 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (char_ptr3[1] == ':') goto code_r0x00111cc7;\n    if (*string_data == '$') {\n      char2 = string_data[1];\n      char_ptr2 = \"eh_throw\";\n      if (char2 != 'e') {\n        if (char2 < 'f') {\n          if ((char2 != 'X') && (char2 != '_')) {\nLAB_00111d1a:\n            undefined8_1 = translate_text(0,\"unknown C++ encoded name\",5);\n            warn_stab(string_data,undefined8_1);\n          }\n        }\n        else {\n          char_ptr2 = \"this\";\n          if (char2 == 't') goto LAB_00111d62;\n          if (char2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      char_ptr2 = (char *)0x0;\n      if ((string_data != char_ptr3) && ((*string_data != ' ' || (char_ptr3 != string_data + 1)))) {\n        char_ptr2 = (char *)savestring(string_data,(int)char_ptr3 - (int)string_data);\n      }\n    }\nLAB_00111d62:\n    byte1 = char_ptr3[1];\n    char_ptr1 = char_ptr3 + 1;\n    if (((byte)(*(ushort *)(&sch_istable + (ulong)byte1 * 2) >> 2) & 1 |\n        (byte1 == 0x2d || byte1 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 4;\n      goto LAB_001123e8;\n    }\n    if (byte1 == 0) goto switchD_00111de5_caseD_44;\n    char_ptr1 = char_ptr3 + 2;\n    char2 = char_ptr3[1];\n    switch(char2) {\n    case 'C':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      char_ptr1 = \"debug_record_label: not implemented\";\n      if (long3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      char2 = record_function(filename,char_ptr2,long3,char2 == 'F',address);\n      if (char2 != '\\0') {\n        do {\n          if (*char_ptr3 != ';') {\n            return 1;\n          }\n          char_ptr3 = char_ptr3 + 1;\n          long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n        } while (long3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) goto LAB_0011208f;\n      long1 = stab_data[3];\n      long_ptr1 = (long *)stab_data[2];\n      char2 = *(char *)(*(long *)(*stab_data + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (opcode == 0x24) {\n        char_ptr3 = char_ptr1;\n        do {\n          if (*char_ptr3 != ';') {\n            return 1;\n          }\n          char_ptr3 = char_ptr3 + 1;\n          long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n        } while (long3 != 0);\n        return 0;\n      }\n    case 'R':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 2;\n      break;\n    case 'S':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      char2 = char_ptr3[2];\n      if (char2 == 't') {\n        char_ptr1 = char_ptr3 + 3;\n      }\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,char_ptr2,&char_ptr3,long_ptr_ptr2);\n      if (long3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      char1 = *(char *)(stab_data + 0x35);\n      long_ptr1 = (long *)tag_type(filename,char_ptr2,long3);\n      if (long_ptr1 == (long *)0x0) {\n        return 0;\n      }\n      if (long_ptr_ptr2[0] != (long **)0x0) {\n        *long_ptr_ptr2[0] = long_ptr1;\n      }\n      if (char1 != '\\0') goto LAB_001122f0;\n      pplong_ptr2 = (long **)(stab_data + 0x34);\n      long_ptr_ptr1 = (long **)stab_data[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      char_ptr1 = char_ptr3 + 3;\n      if (((char_ptr3[2] != '\\0') && (char_ptr1 = char_ptr3 + 4, char_ptr3[3] == 'n')) &&\n         (char_ptr1 = char_ptr3 + 5, char_ptr2 = char_ptr3 + 4, char_ptr3 = char_ptr1, *char_ptr2 == '0')) {\n        for (; char_ptr1 = char_ptr3, *char_ptr3 != '\\0'; char_ptr3 = char_ptr3 + 1) {\n          if (*char_ptr3 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 4;\n      break;\n    case 'c':\n      if (char_ptr3[2] == '=') {\n        char_ptr1 = char_ptr3 + 4;\n        char2 = char_ptr3[3];\n        char_ptr3 = char_ptr1;\n        if (char2 == 'i') {\n          long3 = strtol(char_ptr1,(char **)0x0,10);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long1 = debug_add_to_current_namespace_constprop_0(filename,char_ptr2,4);\n          if (long1 != 0) {\n            *(long *)(long1 + 0x20) = (long)(int)long3;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'r') {\n          double1 = strtod(char_ptr1,(char **)0x0);\n          if (char_ptr2 == (char *)0x0) {\n            return 0;\n          }\n          long3 = debug_add_to_current_namespace_constprop_0(filename,char_ptr2,5);\n          if (long3 != 0) {\n            *(double *)(long3 + 0x20) = double1;\n            return 1;\n          }\n          return 0;\n        }\n        if (char2 == 'e') {\n          long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n          if (long3 == 0) {\n            return 0;\n          }\n          char_ptr1 = char_ptr3;\n          if (*char_ptr3 == ',') {\n            long1 = strtol(char_ptr3,(char **)0x0,10);\n            if (char_ptr2 == (char *)0x0) {\n              return 0;\n            }\n            long2 = debug_add_to_current_namespace_constprop_0(filename,char_ptr2,6);\n            if (long2 != 0) {\n              long_ptr1 = (long *)allocate_memory(0x10);\n              *long_ptr1 = long3;\n              long_ptr1[1] = (long)(int)long1;\n              *(long **)(long2 + 0x20) = long_ptr1;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (char_ptr3[2] == 'F') {\n        char_ptr3 = char_ptr3 + 3;\n        long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n        if (long3 == 0) {\n          return 0;\n        }\n        undefined8_1 = make_function_type(long3,0,0);\n        long3 = make_pointer_type(undefined8_1);\n      }\n      else {\n        char_ptr3 = char_ptr1;\n        long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      }\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 1;\n      break;\n    case 'r':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 5;\nLAB_001123e8:\n      char2 = stab_record_variable(filename,stab_data,char_ptr2,long3,undefined8_1,address);\n      goto joined_r0x001123f8;\n    case 't':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,char_ptr2,&char_ptr3,long_ptr_ptr2);\n      if (long3 == 0) {\n        return 0;\n      }\n      if (char_ptr2 == (char *)0x0) {\n        return 1;\n      }\n      long_ptr1 = (long *)name_type(filename,char_ptr2,long3);\n      if (long_ptr1 == (long *)0x0) {\n        return 0;\n      }\n      if (long_ptr_ptr2[0] == (long **)0x0) {\n        return 1;\n      }\n      *long_ptr_ptr2[0] = long_ptr1;\n      return 1;\n    case 'v':\n      char_ptr3 = char_ptr1;\n      long3 = parse_stab_type(filename,stab_data,0,&char_ptr3,0);\n      if (long3 == 0) {\n        return 0;\n      }\n      undefined8_1 = 3;\n    }\n    char2 = record_parameter(filename,char_ptr2,long3,undefined8_1,address);\n    goto joined_r0x001123f8;\n  }\n  if (opcode == 0xe0) {\n    if ((*(char *)((long)stab_data + 0x44) != '\\0') && (line_number == 1)) {\n      return 1;\n    }\n    char2 = emit_pending_vars(filename,stab_data);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    char2 = end_debug_block(filename,stab_data[7] + stab_data[6] + address);\n    if (char2 == '\\0') {\n      return 0;\n    }\n    stab_data = stab_data + 0xe;\n    *(int *)stab_data = *(int *)stab_data + -1;\n    char_ptr1 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)stab_data) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < opcode) {\n      if (opcode == 0xe2) {\n        char_ptr1 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        char_ptr1 = \"debug_end_common_block: not implemented\";\n        if (opcode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefined8_1 = translate_text(0,char_ptr1,5);\n      print_formatted(standart_error_output,\"%s\\n\",undefined8_1);\n      return 0;\n    }\n    if (opcode != 0xc0) {\n      if (opcode == 0xc2) {\n        int1 = *(int *)(stab_data + 0x10);\n        *(uint *)(stab_data + 0x10) = int1 + 1U;\n        long3 = xrealloc(stab_data[0x11],(ulong)(int1 + 1U) << 3);\n        ptr2 = (undefined8 *)stab_data[0xb];\n        stab_data[0x11] = long3;\n        while( true ) {\n          if (ptr2 == (undefined8 *)0x0) {\n            undefined8_1 = translate_text(0,\"Undefined N_EXCL\",5);\n            warn_stab(string_data,undefined8_1);\n            *(undefined8 *)(stab_data[0x11] + (ulong)(*(int *)(stab_data + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((address == ptr2[3]) && (int1 = compare_strings((char *)ptr2[2],string_data), int1 == 0))\n          break;\n          ptr2 = (undefined8 *)*ptr2;\n        }\n        *(undefined8 *)(long3 + (ulong)(*(int *)(stab_data + 0x10) - 1) * 8) = ptr2[5];\n        return 1;\n      }\n      if (opcode == 0xa2) {\n        long3 = stab_data[10];\n        if (long3 != 0) {\n          long1 = *(long *)(long3 + 8);\n          uint1 = *(uint *)(long3 + 0x20);\n          stab_data[10] = long1;\n          if ((uint1 < *(uint *)(stab_data + 0x10)) &&\n             (*(undefined8 *)(long3 + 0x28) = *(undefined8 *)(stab_data[0x11] + (ulong)uint1 * 8),\n             long1 != 0)) {\n            string_data = *(char **)(long1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        string_data = (char *)stab_data[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)stab_data + 0x44) != '\\0') && (line_number == 1)) {\n      return 1;\n    }\n    if (*(char *)(stab_data + 0xc) != '\\0') {\n      char2 = debug_start_block(filename,stab_data[7] + stab_data[6] + address);\n      if (char2 == '\\0') {\n        return 0;\n      }\n      char2 = emit_pending_vars(filename,stab_data);\n      if (char2 != '\\0') {\n        *(int *)(stab_data + 0xe) = *(int *)(stab_data + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    char_ptr1 = \"N_LBRAC not within function\\n\";\n  }\n  char_ptr1 = (char *)translate_text(0,char_ptr1,5);\n  print_formatted(standart_error_output,char_ptr1);\n  return 0;\ncode_r0x00111cc7:\n  char_ptr3 = char_ptr3 + 2;\n  char_ptr3 = strchr(char_ptr3,0x3a);\n  if (char_ptr3 == (char *)0x0) {\n    char_ptr1 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    char_ptr3 = char_ptr1;\n    handle_bad_stab(string_data);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (long_ptr_ptr1 == (long **)0x0) {\nLAB_001122f0:\n    if (char2 != 't') {\n      return 1;\n    }\n    long_ptr1 = (long *)name_type(filename,char_ptr2,long_ptr1);\n    if (long_ptr1 != (long *)0x0) {\n      if (long_ptr_ptr2[0] == (long **)0x0) {\n        return 1;\n      }\n      *long_ptr_ptr2[0] = long_ptr1;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)long_ptr_ptr1[1] == *char_ptr2) &&\n     (int1 = compare_strings((char *)long_ptr_ptr1[1],char_ptr2), int1 == 0)) {\n    long_ptr_ptr1[3] = long_ptr1;\n    *pplong_ptr2 = *long_ptr_ptr1;\n    goto LAB_001122f0;\n  }\n  pplong_ptr2 = long_ptr_ptr1;\n  long_ptr_ptr1 = (long **)*long_ptr_ptr1;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (long1 < 1) {\nLAB_0011208f:\n    undefined8_1 = 1;\nLAB_001121c4:\n    char2 = record_variable(filename,char_ptr2,long3,undefined8_1,address);\njoined_r0x001123f8:\n    if (char2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  char_ptr1 = *(char **)(*long_ptr1 + 8);\n  if ((char2 != '\\0') && (char2 == *char_ptr1)) {\n    char_ptr1 = char_ptr1 + 1;\n  }\n  if ((*char_ptr1 == *char_ptr2) && (int1 = compare_strings(char_ptr1,char_ptr2), int1 == 0)) {\n    address = *(long *)(*long_ptr1 + 0x10) + *(long *)(*(long *)(*long_ptr1 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  long1 = long1 + -1;\n  long_ptr1 = long_ptr1 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strchr",
                "debug_record_line",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "savestring",
                "debug_name_type",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_emit_pending_vars",
                "debug_end_block",
                "strtol",
                "strcmp",
                "debug_record_function",
                "free",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "xstrdup",
                "stab_record_variable",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "debug_tag_type",
                "debug_start_source",
                "xmalloc",
                "warn_stab",
                "strtod",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_stab_data_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "cVar1": "sectionSkipped",
                "iVar2": "errorCode",
                "uVar3": "relocationCount",
                "lVar4": "sectionListSize",
                "puVar5": "relocationArray",
                "uVar6": "relocationArraySize",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "filteredRelocations",
                "puVar8": "filteredRelocationsIter",
                "uVar9": "filteredRelocationsCount"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 param_1,undefined8 *param_2,long param_3)\n\n{\n  char sectionSkipped;\n  int errorCode;\n  undefined8 relocationCount;\n  long sectionListSize;\n  undefined8 *relocationArray;\n  ulong relocationArraySize;\n  code *jumpTable;\n  undefined8 *filteredRelocations;\n  undefined8 *filteredRelocationsIter;\n  ulong filteredRelocationsCount;\n  undefined8 uStack_38;\n  \n  sectionSkipped = skip_section(param_1,param_2,0);\n  if (sectionSkipped != '\\0') {\n    return;\n  }\n  relocationCount = param_2[0xc];\n  if ((((*(byte *)(param_3 + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (sectionListSize = find_section_list(*param_2,0,0x100), sectionListSize == 0)) {\n    sectionListSize = bfd_get_reloc_upper_bound(param_1,param_2);\n    if (sectionListSize < 0) {\n      if ((sectionListSize != -1) || (errorCode = bfd_get_error(), errorCode != 5)) {\n        status = 1;\n        relocationCount = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,param_1,param_2,relocationCount,uStack_38);\n        return;\n      }\n    }\n    else if (sectionListSize != 0) {\n      relocationArray = (undefined8 *)param_2[0xe];\n      if (relocationArray == (undefined8 *)0x0) {\n        relocationArray = (undefined8 *)bfd_alloc(param_3);\n        if (relocationArray == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocationArraySize = bfd_canonicalize_reloc(param_1,param_2,relocationArray,isympp);\n        if ((long)relocationArraySize < 0) {\n          status = 1;\n          relocationCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocationArraySize = (ulong)*(uint *)(param_2 + 0xf);\n      }\n      if (strip_symbols == 7) {\n        filteredRelocations = relocationArray;\n        for (filteredRelocationsCount = 0; filteredRelocationsCount != relocationArraySize; filteredRelocationsCount = filteredRelocationsCount + 1) {\n          filteredRelocationsIter = filteredRelocations;\n          if (((*(long **)relocationArray[filteredRelocationsCount] != (long *)0x0) &&\n              (sectionListSize = **(long **)relocationArray[filteredRelocationsCount], sectionListSize != 0)) &&\n             (sectionSkipped = is_specified_symbol(*(undefined8 *)(sectionListSize + 8),keep_specific_htab),\n             sectionSkipped != '\\0')) {\n            filteredRelocationsIter = filteredRelocations + 1;\n            *filteredRelocations = relocationArray[filteredRelocationsCount];\n          }\n          filteredRelocations = filteredRelocationsIter;\n        }\n        *filteredRelocations = 0;\n        relocationArraySize = (long)filteredRelocations - (long)relocationArray >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param_3 + 8) + 0x288);\n      if (relocationArraySize == 0) {\n        relocationArraySize = 0;\n        relocationArray = (undefined8 *)0x0;\n      }\n      else {\n        relocationArraySize = relocationArraySize & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocationArraySize = 0;\n  relocationArray = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param_3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param_3,relocationCount,relocationArray,relocationArraySize);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "xexit",
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_reloc_upper_bound",
                "copy_relocations_in_section.cold",
                "skip_section",
                "bfd_nonfatal",
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "reverse_and_improve_0010d559",
                "param_1": "args",
                "param_2": "byte_array",
                "param_3": "result",
                "bVar1": "second_byte",
                "pbVar2": "current_byte",
                "cVar3": "temp_char",
                "uVar4": "temp_uint",
                "iVar5": "temp_int",
                "ppcVar6": "temp_ptr",
                "sVar7": "temp_size",
                "lVar8": "temp_long",
                "plVar9": "temp_long_ptr",
                "pcVar10": "temp_char_ptr",
                "__s1": "str_ptr",
                "__ptr": "void_ptr",
                "pbVar11": "temp_byte_ptr",
                "uVar12": "temp_uint8",
                "__nptr": "num_ptr",
                "local_64": "count",
                "local_40": "str_array"
            },
            "code": "\nundefined8 reverse_and_improve_0010d559(undefined8 *args,byte **byte_array,long *result)\n\n{\n  byte second_byte;\n  byte *current_byte;\n  char temp_char;\n  uint temp_uint;\n  int temp_int;\n  char **temp_ptr;\n  size_t temp_size;\n  long temp_long;\n  long *temp_long_ptr;\n  char *temp_char_ptr;\n  char *str_ptr;\n  void *void_ptr;\n  byte *temp_byte_ptr;\n  undefined8 temp_uint8;\n  byte *num_ptr;\n  int count;\n  char *str_array [2];\n  \n  current_byte = *byte_array;\n  second_byte = current_byte[1];\n  if ((char)second_byte < ':') {\n    if ((char)second_byte < '1') goto LAB_0010d5d8;\n    count = (char)second_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *byte_array = current_byte + 1;\n    }\n    temp_byte_ptr = *byte_array + 2;\n  }\n  else {\n    if (((second_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    num_ptr = current_byte + 2;\n    temp_long = strtol((char *)num_ptr,(char **)0x0,10);\n    count = (int)temp_long;\n    while (((&_sch_istable)[(ulong)*num_ptr * 2] & 4) != 0) {\n      num_ptr = num_ptr + 1;\n    }\n    temp_byte_ptr = num_ptr + 1;\n    if (*num_ptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *byte_array = temp_byte_ptr;\n  temp_ptr = (char **)0x0;\n  if (result != (long *)0x0) {\n    temp_ptr = str_array;\n  }\n  temp_long = 0;\n  while( true ) {\n    while( true ) {\n      count = count + -1;\n      if (count == -1) {\n        if (result != (long *)0x0) {\n          *result = temp_long;\n        }\n        return 1;\n      }\n      if (**byte_array == 0x5f) {\n        *byte_array = *byte_array + 1;\n      }\n      if (**byte_array != 0x74) break;\n      temp_char = stab_demangle_template(args,byte_array,temp_ptr);\n      temp_char_ptr = str_array[0];\n      if (temp_char == '\\0') {\n        return 0;\n      }\n      if (result != (long *)0x0) {\n        temp_size = strlen(str_array[0]);\n        temp_long = stab_find_tagged_type(*args,args[1],temp_char_ptr,temp_size & 0xffffffff,9);\n        free(temp_char_ptr);\n        if (temp_long == 0) {\n          return 0;\n        }\n      }\n    }\n    temp_uint = stab_demangle_count(byte_array);\n    temp_size = strlen((char *)*byte_array);\n    if (temp_size < temp_uint) break;\n    if (result != (long *)0x0) {\n      if ((temp_long != 0) && (temp_long_ptr = (long *)debug_get_fields_isra_0(temp_long), temp_long_ptr != (long *)0x0))\n      {\n        temp_char_ptr = (char *)savestring(*byte_array,temp_uint);\n        for (; temp_long = *temp_long_ptr, temp_long != 0; temp_long_ptr = temp_long_ptr + 1) {\n          temp_long = *(long *)(temp_long + 8);\n          if (temp_long == 0) {\n            free(temp_char_ptr);\n            return 0;\n          }\n          str_ptr = (char *)debug_get_type_name_constprop_0(temp_long);\n          if ((str_ptr != (char *)0x0) && (temp_int = strcmp(str_ptr,temp_char_ptr), temp_int == 0)) break;\n        }\n        free(temp_char_ptr);\n        if (temp_long != 0) goto LAB_0010d7ad;\n      }\n      temp_uint8 = 9;\n      if (count == 0) {\n        void_ptr = (void *)savestring(*byte_array,temp_uint);\n        temp_long = debug_find_named_type(*args,void_ptr);\n        free(void_ptr);\n        if (temp_long != 0) goto LAB_0010d7ad;\n        temp_uint8 = 0;\n      }\n      temp_long = stab_find_tagged_type(*args,args[1],*byte_array,temp_uint,temp_uint8);\n      if (temp_long == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *byte_array = *byte_array + temp_uint;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "debug_get_fields.isra.0",
                "debug_find_named_type",
                "free",
                "stab_demangle_template",
                "savestring",
                "debug_get_type_name.constprop.0",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_formatted_message_00119e70",
                "param_1": "messageFormat",
                "param_2": "arguments",
                "fflush": "flushStandardOutput",
                "_stdout": "standardOutput",
                "fprintf": "printErrorMessage",
                "_stderr": "errorOutput",
                "program_name": "programName",
                "vfprintf": "printFormattedMessageWithArguments",
                "putc": "putCharacter"
            },
            "code": "\n\n\nvoid printFormattedMessage_00119e70(char *messageFormat,__gnuc_va_list arguments)\n\n{\n  flushStandardOutput(standardOutput);\n  printErrorMessage(errorOutput,\"%s: \",programName);\n  printFormattedMessage_00119e70WithArguments(errorOutput,messageFormat,arguments);\n  putCharacter(10,errorOutput);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "vfprintf",
                "putc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_formatted_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "free_memory_00108466",
                "param_7": "memoryToFree",
                "status": "resultCode"
            },
            "code": "\nvoid freeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  resultCode = 1;\n  bfd_nonfatal_message(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_byte_00108e76",
                "param_1": "byte_array",
                "bVar1": "current_byte",
                "iVar2": "result"
            },
            "code": "\nint extract_number_from_byte_00108e76(byte **byte_array)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **byte_array;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *byte_array = *byte_array + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_number_from_byte_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input",
                "lVar1": "new_hash",
                "bfd_hash_allocate": "allocate_hash",
                "bfd_hash_newfunc": "initialize_hash"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input,undefined8 param_2,undefined8 param_3)\n\n{\n  long new_hash;\n  \n  if (((input != 0) || (input = allocate_hash(param_2,0x30), input != 0)) &&\n     (new_hash = initialize_hash(input,param_2,param_3), new_hash != 0)) {\n    *(undefined8 *)(new_hash + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(new_hash + 0x18) = 0;\n    *(undefined4 *)(new_hash + 0x28) = 0;\n    return new_hash;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "validate_and_return_directory_0011283f",
                "param_1": "path_to_validate",
                "param_2": "directory_to_validate",
                "iVar1": "access_result",
                "sStack_a8": "file_stats"
            },
            "code": "\nchar * validate_and_return_directory_0011283f(char *path_to_validate,char *directory_to_validate)\n\n{\n  int access_result;\n  stat file_stats;\n  \n  if ((directory_to_validate == (char *)0x0) && (path_to_validate != (char *)0x0)) {\n    access_result = access(path_to_validate,7);\n    if (access_result == 0) {\n      access_result = stat(path_to_validate,&file_stats);\n      if ((access_result == 0) && ((file_stats.st_mode & 0xf000) == 0x4000)) {\n        directory_to_validate = path_to_validate;\n      }\n    }\n  }\n  return directory_to_validate;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "validate_and_return_directory_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_and_return_error_00108237",
                "piVar2": "errorPointer",
                "unaff_R12D": "descriptor"
            },
            "code": "\nundefined8 closeAndReturnError_00108237(void)\n\n{\n  int iVar1;\n  int *errorPointer;\n  int descriptor;\n  \n  errorPointer = __errno_location();\n  iVar1 = *errorPointer;\n  close(descriptor);\n  *errorPointer = iVar1;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_and_return_error_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "debug_handle",
                "param_2": "filename",
                "param_3": "record_id",
                "param_4": "flags",
                "uVar1": "err_msg",
                "plVar2": "record_ptr",
                "puVar3": "debug_ptr",
                "lVar4": "temp_value",
                "puVar5": "ptr",
                "pcVar6": "default_filename",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long debug_handle,char *filename,long record_id,uint flags,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 err_msg;\n  long *record_ptr;\n  undefined4 *debug_ptr;\n  long temp_value;\n  undefined4 *ptr;\n  char *default_filename;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  default_filename = \"\";\n  if (filename != (char *)0x0) {\n    default_filename = filename;\n  }\n  if (record_id != 0) {\n    if (*(long *)(debug_handle + 8) == 0) {\n      err_msg = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",err_msg);\n    }\n    else {\n      record_ptr = (long *)xmalloc(0x18);\n      *record_ptr = record_id;\n      *(undefined (*) [16])(record_ptr + 1) = ZEXT816(0);\n      debug_ptr = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_handle + 0x18) = record_ptr;\n      record_ptr[2] = (long)debug_ptr;\n      ptr = debug_ptr;\n      for (temp_value = 0xc; temp_value != 0; temp_value = temp_value + -1) {\n        *ptr = 0;\n        ptr = ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 **)(debug_handle + 0x20) = debug_ptr;\n      temp_value = *(long *)(debug_handle + 0x10);\n      *(undefined8 *)(debug_ptr + 6) = param_5;\n      *(undefined8 *)(debug_ptr + 8) = 0xffffffffffffffff;\n      temp_value = debug_add_to_namespace_constprop_0(temp_value + 0x10,default_filename,3,(flags & 0xff) + 1);\n      if (temp_value != 0) {\n        *(long **)(temp_value + 0x20) = record_ptr;\n        err_msg = CONCAT71((int7)((ulong)temp_value >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  err_msg = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = err_msg;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal",
                "FUN_00107880",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "FUN_00104ea2",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "main",
                "simple_copy.cold",
                "copy_file",
                "display_info.isra.0",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_directory_name_00114cf0",
                "param_1": "inputPath",
                "pcVar1": "lastSlashChar",
                "lVar2": "remainingChars",
                "lVar3": "directoryNameLength",
                "lVar4": "slashIndex",
                "pcVar5": "dirNameIterator",
                "bVar6": "hasSlash",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid allocateDirectoryName_00114cf0(char *inputPath)\n\n{\n  char *lastSlashChar;\n  long remainingChars;\n  long directoryNameLength;\n  long slashIndex;\n  char *dirNameIterator;\n  byte hasSlash;\n  \n  hasSlash = 0;\n  lastSlashChar = strrchr(inputPath,0x2f);\n  if (lastSlashChar == (char *)0x0) {\n    lastSlashChar = (char *)allocateMemory(9);\n    directoryNameLength = 0;\n  }\n  else {\n    slashIndex = (long)lastSlashChar - (long)inputPath;\n    lastSlashChar = (char *)allocateMemory(slashIndex + 0xb);\n    directoryNameLength = slashIndex + 1;\n    dirNameIterator = lastSlashChar;\n    for (remainingChars = slashIndex; remainingChars != 0; remainingChars = remainingChars + -1) {\n      *dirNameIterator = *inputPath;\n      inputPath = inputPath + (ulong)hasSlash * -2 + 1;\n      dirNameIterator = dirNameIterator + (ulong)hasSlash * -2 + 1;\n    }\n    lastSlashChar[slashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlashChar + directoryNameLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlashChar + directoryNameLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_directory_name_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "extract_and_combine_strings_0010a181",
                "param_1": "base_address",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "is_null",
                "__s": "input_string",
                "__s_00": "other_string",
                "sVar5": "input_string_length",
                "sVar6": "other_string_length",
                "__s_01": "combined_string",
                "lVar7": "identifier",
                "local_41": "local_flag",
                "iVar2": "value",
                "iVar3": "result",
                "uVar4": "return_value"
            },
            "code": "\nundefined4 extract_and_combine_strings_0010a181(long base_address,long start_index,long end_index,byte flag)\n\n{\n  char is_null;\n  int value;\n  int result;\n  undefined4 return_value;\n  char *input_string;\n  char *other_string;\n  size_t input_string_length;\n  size_t other_string_length;\n  char *combined_string;\n  long identifier;\n  byte local_flag;\n  \n  is_null = *(char *)(*(long *)(base_address + 0x60) + 0x1c);\n  input_string = (char *)stab_pop_type();\n  local_flag = 1;\n  if (is_null == '\\0') {\n    local_flag = *(byte *)(*(long *)(base_address + 0x60) + 0x1c);\n  }\n  value = *(int *)(*(long *)(base_address + 0x60) + 0x18);\n  other_string = (char *)stab_pop_type(base_address);\n  input_string_length = strlen(input_string);\n  other_string_length = strlen(other_string);\n  combined_string = (char *)xmalloc(input_string_length + 100 + other_string_length);\n  if (flag == 0) {\n    *combined_string = '\\0';\n    identifier = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    identifier = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = identifier + 1;\n    sprintf(combined_string,\"%ld=@S;\",identifier);\n    local_flag = flag;\n  }\n  input_string_length = strlen(combined_string);\n  sprintf(combined_string + input_string_length,\"ar%s;%ld;%ld;%s\",input_string,start_index,end_index,other_string);\n  free(input_string);\n  free(other_string);\n  result = 0;\n  if (start_index <= end_index) {\n    result = value * (((int)end_index - (int)start_index) + 1);\n  }\n  return_value = stab_push_string(base_address,combined_string,identifier,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(combined_string);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_and_combine_strings_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "display_target_architectures_001199d0",
                "pcVar4": "headerFileVersionStr",
                "sVar5": "headerFileVersionLen",
                "pcVar6": "tempDir",
                "uVar7": "tempDirResult",
                "piVar8": "errorCode",
                "iVar1": "columns",
                "iVar2": "archIndex",
                "iVar3": "archCompareResult",
                "iVar9": "targetIndex",
                "lVar10": "tempDirLen",
                "lVar11": "archPrintIndex",
                "ppcVar12": "archMachArray",
                "uVar13": "maxArchMachLen",
                "uVar14": "archMachLen",
                "local_70": "tempFileResult"
            },
            "code": "\n\n\nvoid displayTargetArchitectures_001199d0(void)\n\n{\n  int columns;\n  int archIndex;\n  int archCompareResult;\n  char *headerFileVersionStr;\n  size_t headerFileVersionLen;\n  char *tempDir;\n  undefined8 tempDirResult;\n  int *errorCode;\n  int targetIndex;\n  long tempDirLen;\n  long archPrintIndex;\n  char **archMachArray;\n  uint maxArchMachLen;\n  ulong archMachLen;\n  int tempFileResult;\n  \n  headerFileVersionStr = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerFileVersionStr,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    headerFileVersionStr = getenv(\"TMPDIR\");\n    tempDirResult = try_dir_lto_priv_0(headerFileVersionStr,0);\n    headerFileVersionStr = getenv(\"TMP\");\n    tempDirResult = try_dir_lto_priv_0(headerFileVersionStr,tempDirResult);\n    headerFileVersionStr = getenv(\"TEMP\");\n    tempDirResult = try_dir_lto_priv_0(headerFileVersionStr,tempDirResult);\n    tempDirResult = try_dir_lto_priv_0(&DAT_0011b39a,tempDirResult);\n    tempDirResult = try_dir_lto_priv_0(vartmp,tempDirResult);\n    headerFileVersionStr = (char *)try_dir_lto_priv_0(&tmp,tempDirResult);\n    if (headerFileVersionStr == (char *)0x0) {\n      headerFileVersionStr = \".\";\n    }\n    headerFileVersionLen = strlen(headerFileVersionStr);\n    tempDir = (char *)xmalloc((int)headerFileVersionLen + 2);\n    memoized_tmpdir = strcpy(tempDir,headerFileVersionStr);\n    memoized_tmpdir[headerFileVersionLen & 0xffffffff] = '/';\n    memoized_tmpdir[(int)headerFileVersionLen + 1] = '\\0';\n  }\n  headerFileVersionStr = memoized_tmpdir;\n  headerFileVersionLen = strlen(memoized_tmpdir);\n  tempDirLen = (long)(int)headerFileVersionLen;\n  tempDir = (char *)xmalloc(tempDirLen + 9);\n  strcpy(tempDir,headerFileVersionStr);\n  *(undefined2 *)(tempDir + tempDirLen) = 0x6363;\n  *(undefined4 *)(tempDir + tempDirLen + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempDir + tempDirLen + 2) + 3) = 0x585858;\n  tempDir[tempDirLen + 8] = '\\0';\n  archIndex = mkstemps(tempDir,0);\n  if (archIndex == -1) {\n    errorCode = __errno_location();\n    tempDir = strerror(*errorCode);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerFileVersionStr,tempDir);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxArchMachLen = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempDir);\n  free(tempDir);\n  tempFileResult = 0;\n  do {\n    headerFileVersionStr = (char *)bfd_printable_arch_mach(archIndex);\n    headerFileVersionLen = strlen(headerFileVersionStr);\n    if ((int)maxArchMachLen < (int)(uint)headerFileVersionLen) {\n      maxArchMachLen = (uint)headerFileVersionLen;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerFileVersionStr = getenv(\"COLUMNS\");\n  archIndex = tempFileResult;\n  if (headerFileVersionStr != (char *)0x0) {\n    tempDirLen = strtol(headerFileVersionStr,(char **)0x0,10);\n    columns = (int)tempDirLen;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    tempFileResult = archIndex;\n    if (-1 < tempFileResult) {\n      return;\n    }\n    archPrintIndex = (long)tempFileResult;\n    targetIndex = (columns - maxArchMachLen) + -1;\n    tempDirLen = archPrintIndex;\n    do {\n      archIndex = (int)tempDirLen;\n      if (-1 < archIndex) break;\n      headerFileVersionLen = strlen(*(char **)(tempDirLen * 0x60));\n      tempDirLen = tempDirLen + 1;\n      targetIndex = (targetIndex - (int)headerFileVersionLen) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLen + 1),&DAT_0011b4a1);\n    for (archMachArray = (char **)(archPrintIndex * 0x60);\n        ((ulong)(uint)(archIndex - tempFileResult) + archPrintIndex) * 0x60 - (long)archMachArray != 0;\n        archMachArray = archMachArray + 0xc) {\n      printf(\"%s \",*archMachArray);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerFileVersionStr = (char *)bfd_printable_arch_mach(targetIndex,0);\n      archCompareResult = strcmp(headerFileVersionStr,\"UNKNOWN!\");\n      if (archCompareResult != 0) {\n        tempDirResult = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxArchMachLen,tempDirResult);\n        archMachArray = (char **)(archPrintIndex * 0x60);\n        archCompareResult = tempFileResult;\n        while (archIndex != archCompareResult) {\n          if (*(char *)((long)archMachArray + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            headerFileVersionLen = strlen(*archMachArray);\n            for (archMachLen = headerFileVersionLen & 0xffffffff; (int)archMachLen != 0; archMachLen = (ulong)((int)archMachLen - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachArray,_stdout);\n          }\n          archCompareResult = archCompareResult + 1;\n          if (archIndex != archCompareResult) {\n            putc(0x20,_stdout);\n          }\n          archMachArray = archMachArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "display_info.isra.0.cold",
                "strerror",
                "bfd_printable_arch_mach",
                "close",
                "abort",
                "mkstemps",
                "free",
                "bfd_iterate_over_targets",
                "getenv",
                "fprintf",
                "strcpy",
                "strlen",
                "dcgettext",
                "printf",
                "try_dir.lto_priv.0",
                "xmalloc",
                "do_display_target",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_target_architectures_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "process_gnu_build_notes_0010847a",
                "extract_and_process_gnu_build_notes_00116490": "extract_and_process_gnu_build_notes"
            },
            "code": "\nvoid process_gnu_build_notes_0010847a(void)\n\n{\n  extract_and_process_gnu_build_notes_0010847a();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "process_gnu_build_notes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "decode_string_0010d21c",
                "param_1": "param_ptr",
                "param_2": "byte_ptr_ptr",
                "param_3": "param3_ptr",
                "bVar1": "byte1",
                "pbVar2": "byte_ptr1",
                "bVar3": "byte3",
                "cVar4": "char1",
                "bVar5": "byte5",
                "uVar6": "result",
                "iVar7": "intVar",
                "uVar8": "uintVar",
                "sVar9": "sizeVar",
                "pbVar10": "byte_ptr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "haystack",
                "pcVar11": "pointerVar1",
                "uVar12": "result2",
                "pcVar13": "pointerVar2",
                "bVar14": "byte4",
                "pcVar15": "pointerVar3",
                "bVar16": "byte6",
                "bVar17": "byte7",
                "bVar18": "byte8",
                "bVar19": "byte9",
                "uVar20": "uintVar2",
                "uVar21": "ulongVar",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 decodeString_0010d21c(undefined8 param_ptr,byte **byte_ptr_ptr,undefined8 *param3_ptr)\n\n{\n  byte byte1;\n  byte *byte_ptr1;\n  byte byte3;\n  char char1;\n  byte byte5;\n  undefined4 result;\n  int intVar;\n  uint uintVar;\n  size_t sizeVar;\n  byte *byte_ptr2;\n  void *ptr1;\n  void *ptr2;\n  char *haystack;\n  char *pointerVar1;\n  undefined8 result2;\n  char *pointerVar2;\n  byte byte4;\n  char *pointerVar3;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  byte byte9;\n  uint uintVar2;\n  ulong ulongVar;\n  uint localArray [3];\n  \n  byte_ptr1 = *byte_ptr_ptr;\n  *byte_ptr_ptr = byte_ptr1 + 1;\n  localArray[0] = stab_demangle_count(byte_ptr_ptr);\n  ulongVar = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    byte_ptr2 = *byte_ptr_ptr;\n    sizeVar = strlen((char *)byte_ptr2);\n    if (ulongVar <= sizeVar) {\n      *byte_ptr_ptr = byte_ptr2 + ulongVar;\n      uintVar2 = 0;\n      result = stab_demangle_get_count(byte_ptr_ptr,localArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= uintVar2) {\n          if (param3_ptr == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)savestring(byte_ptr1,(int)*byte_ptr_ptr - (int)byte_ptr1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          haystack = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((haystack != (char *)0x0) &&\n             (pointerVar1 = strstr(haystack,\"::NoSuchStrinG\"), pointerVar2 = haystack,\n             pointerVar3 = haystack, pointerVar1 != (char *)0x0)) {\n            for (; pointerVar2 != pointerVar1; pointerVar2 = pointerVar2 + 1) {\n              if ((*pointerVar2 != ' ') ||\n                 (((pointerVar2[1] == '>' && (haystack < pointerVar2)) && (pointerVar2[-1] == '>')))) {\n                *pointerVar3 = *pointerVar2;\n                pointerVar3 = pointerVar3 + 1;\n              }\n            }\n            result2 = savestring(haystack,(int)pointerVar3 - (int)haystack);\n            *param3_ptr = result2;\n            free(haystack);\n            return result;\n          }\n          stab_bad_demangle(byte_ptr1);\n          free(haystack);\n          return 0;\n        }\n        byte_ptr2 = *byte_ptr_ptr;\n        if (*byte_ptr2 != 0x5a) {\n          byte5 = stab_demangle_type_lto_priv_0(param_ptr,byte_ptr_ptr,0);\n          if (byte5 == 0) {\n            return 0;\n          }\n          byte3 = 0;\n          byte4 = 0;\n          byte8 = 0;\n          byte7 = 0;\n          byte9 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte6 = byte3;\n              byte1 = *byte_ptr2;\n              if ((byte4 | byte1 == 0) != 0) {\n                byte5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte3 = byte5;\n              byte4 = byte5;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongVar = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongVar & 0x11409) == 0) {\n                  if ((ulongVar & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte3 = byte6;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte3 = byte6;\n              byte8 = byte5;\n              break;\n            case 99:\n              byte3 = byte6;\n              byte9 = byte5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte3 = byte6;\n              byte7 = byte5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *byte_ptr_ptr = byte_ptr2 + 1;\n        char1 = stab_demangle_type_lto_priv_0(param_ptr,byte_ptr_ptr,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(byte_ptr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte6 == 0) {\n    if (byte9 == 0) {\n      if (byte8 == 0) {\n        if (byte7 == 0) {\n          if (byte5 != 0) {\n            uintVar = stab_demangle_count(byte_ptr_ptr);\n            if (uintVar == 0) goto LAB_0010d280;\n            *byte_ptr_ptr = *byte_ptr_ptr + uintVar;\n          }\n        }\n        else {\n          if (**byte_ptr_ptr == 0x6d) {\n            *byte_ptr_ptr = *byte_ptr_ptr + 1;\n          }\n          while( true ) {\n            byte_ptr2 = *byte_ptr_ptr;\n            if (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) == 0) break;\n            *byte_ptr_ptr = byte_ptr2 + 1;\n          }\n          if (*byte_ptr2 == 0x2e) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *byte_ptr_ptr = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n          byte_ptr2 = *byte_ptr_ptr;\n          if (*byte_ptr2 == 0x65) {\n            do {\n              byte_ptr2 = byte_ptr2 + 1;\n              *byte_ptr_ptr = byte_ptr2;\n            } while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar = stab_demangle_count(byte_ptr_ptr);\n        if (1 < uintVar) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**byte_ptr_ptr == 0x6d) {\n        *byte_ptr_ptr = *byte_ptr_ptr + 1;\n      }\n      intVar = stab_demangle_count(byte_ptr_ptr);\n      if (intVar == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**byte_ptr_ptr == 0x6d) {\n      *byte_ptr_ptr = *byte_ptr_ptr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**byte_ptr_ptr * 2] & 4) != 0) {\n      *byte_ptr_ptr = *byte_ptr_ptr + 1;\n    }\n  }\nLAB_0010d2b1:\n  uintVar2 = uintVar2 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "cplus_demangle",
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_get_count",
                "concat",
                "stab_demangle_count",
                "abort",
                "strstr",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "decode_string_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_strict_mode_001054af",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "in_RAX": "temp_1",
                "strip_specific_htab": "specific_strip_table",
                "strip_unneeded_htab": "unneeded_strip_table",
                "keep_specific_htab": "specific_keep_table",
                "localize_specific_htab": "specific_localize_table",
                "globalize_specific_htab": "specific_globalize_table",
                "keepglobal_specific_htab": "specific_keepglobal_table",
                "weaken_specific_htab": "specific_weaken_table",
                "redefine_specific_htab": "specific_redefine_table",
                "redefine_specific_reverse_htab": "specific_reverse_redefine_table"
            },
            "code": "\nvoid cleanup_strict_mode_001054af(undefined8 input_param_1,undefined8 input_param_2)\n\n{\n  undefined8 temp_1;\n  \n  htab_delete(specific_strip_table);\n  htab_delete(unneeded_strip_table);\n  htab_delete(specific_keep_table);\n  htab_delete(specific_localize_table);\n  htab_delete(specific_globalize_table);\n  htab_delete(specific_keepglobal_table);\n  htab_delete(specific_weaken_table);\n  htab_delete(specific_redefine_table);\n  htab_delete(specific_reverse_redefine_table,input_param_2,temp_1);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_strict_mode_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_variable_or_debug_0010c139",
                "param_1": "argument_1",
                "param_2": "structure_ptr",
                "param_3": "argument_3",
                "param_4": "argument_4",
                "param_5": "argument_5",
                "param_6": "argument_6",
                "uVar1": "temp_var1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "new_structure_ptr",
                "in_R10": "register_R10",
                "unaff_R15": "register_R15"
            },
            "code": "\nulong record_variable_or_debug_0010c139(undefined8 argument_1,long structure_ptr,undefined8 argument_3,undefined8 argument_4,\n                  undefined4 argument_5,undefined8 argument_6)\n\n{\n  undefined8 temp_var1;\n  char flag;\n  ulong result;\n  undefined8 *new_structure_ptr;\n  undefined8 register_R10;\n  undefined8 register_R15;\n  \n  flag = *(char *)(structure_ptr + 0x60);\n  if ((flag != '\\0') && ((*(int *)(structure_ptr + 0x40) != 0 || (*(char *)(structure_ptr + 0x44) == '\\0')))) {\n    new_structure_ptr = (undefined8 *)xmalloc(0x28);\n    temp_var1 = *(undefined8 *)(structure_ptr + 0x78);\n    *(undefined8 *)((long)new_structure_ptr + 0x1c) = 0;\n    new_structure_ptr[2] = argument_4;\n    *(undefined4 *)(new_structure_ptr + 3) = argument_5;\n    new_structure_ptr[4] = argument_6;\n    *(undefined8 **)(structure_ptr + 0x78) = new_structure_ptr;\n    *new_structure_ptr = temp_var1;\n    new_structure_ptr[1] = argument_3;\n    return CONCAT71((int7)((ulong)register_R15 >> 8),flag) & 0xffffffff;\n  }\n  result = debug_record_variable(argument_1,argument_3,argument_4,argument_5,argument_6,register_R10);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "record_variable_or_debug_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_symbol_address_0010e439",
                "param_1": "baseAddress",
                "param_2": "symbolAddress",
                "stab_write_symbol_lto_priv_0": "writeLtoPrivateSymbol"
            },
            "code": "\nvoid setSymbolAddress_0010e439(long baseAddress,undefined8 symbolAddress)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = symbolAddress;\n  writeLtoPrivateSymbol(baseAddress,0x84,0,0,symbolAddress);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "stab_start_compilation_unit.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "set_symbol_address_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main",
                "parse_stab",
                "stab_push_string",
                "save_stab",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "parse_coff_struct_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_arg",
                "stab_class_method_var",
                "main",
                "parse_stab",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_remember_type",
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "FUN_00114dc7",
                "stab_get_struct_index",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "main",
                "get_file_size",
                "try_dir.lto_priv.0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "targetAddress",
                "param_2": "count",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 targetAddress,int count)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (count - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(count - 1U) * 8);\n  }\n  stab_push_defined_type(targetAddress,defaultValue,count);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_and_increment_00112502",
                "param_1": "base_address",
                "param_2": "arg2",
                "param_3": "target_value",
                "uVar1": "index",
                "puVar2": "pointer_array",
                "uVar3": "next_pointer",
                "cVar4": "line_number_check"
            },
            "code": "\nundefined check_and_increment_00112502(long base_address,undefined8 arg2,ulong target_value)\n\n{\n  uint index;\n  undefined8 *pointer_array;\n  undefined8 next_pointer;\n  char line_number_check;\n  \n  do {\n    pointer_array = *(undefined8 **)(base_address + 0x40);\n    if (pointer_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(base_address + 0x48), index < 10 && (pointer_array[(ulong)index + 2] != -1))) {\n      if (target_value <= (ulong)pointer_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      line_number_check = stab_lineno_lto_priv_0(arg2,*(undefined8 *)(pointer_array[1] + 8));\n      if (line_number_check == '\\0') {\n        return 0;\n      }\n      *(int *)(base_address + 0x48) = *(int *)(base_address + 0x48) + 1;\n    }\n    next_pointer = *pointer_array;\n    *(undefined4 *)(base_address + 0x48) = 0;\n    *(undefined8 *)(base_address + 0x40) = next_pointer;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_name.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_increment_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "param_7": "lineErrorMessage",
                "param_8": "output",
                "param_9": "input",
                "uVar1": "errorStringId",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "lineStart",
                "pbVar5": "linePtr",
                "unaff_EBP": "lineNumber",
                "in_R10": "line",
                "unaff_R13": "returnValue",
                "unaff_R14": "lineEnd",
                "unaff_R15": "lastLineEnd"
            },
            "code": "\nvoid processInputLines_00104cc1(void)\n\n{\n  undefined8 errorStringId;\n  byte **slot;\n  byte *currentChar;\n  byte nextChar;\n  byte *lineStart;\n  byte *linePtr;\n  int lineNumber;\n  byte *line;\n  undefined8 returnValue;\n  byte *lineEnd;\n  byte *lastLineEnd;\n  undefined8 lineErrorMessage;\n  undefined8 *output;\n  byte *input;\n  \ncode_r0x00104cc1:\n  input = line;\n  errorStringId = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(errorStringId,lineErrorMessage,lineNumber);\n  linePtr = lineStart;\n  line = input;\nLAB_00114599:\n  do {\n    *line = 0;\n    if (lastLineEnd < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = lastLineEnd;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = linePtr;\n    if (lineEnd[1] == 0) {\n      *output = returnValue;\n      return;\n    }\n    for (; nextChar = *currentChar, lineEnd = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          lineStart = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          lineStart = currentChar + 1;\n          if (currentChar[1] == 10) {\n            lineStart = currentChar + 2;\n            lineEnd = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          parse_input_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      lineEnd = currentChar + 1;\n      lineStart = currentChar + 2;\n    }\n    else {\n      lineStart = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *linePtr;\n    lastLineEnd = linePtr;\n    while ((nextChar == 0x20 || (line = lastLineEnd, nextChar == 9))) {\n      linePtr = lastLineEnd + 1;\n      lastLineEnd = lastLineEnd + 1;\n      nextChar = *linePtr;\n    }\n    do {\n      linePtr = lineStart;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = line[1];\n      line = line + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = line[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = line[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = line[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = line[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = line[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = line[6];\n      currentChar = line + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "dcgettext",
                "non_fatal",
                "htab_find_slot",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_and_store_object_00113bfa",
                "param_1": "object_param1",
                "param_2": "object_param2",
                "lVar1": "object_type",
                "plVar2": "object_ptr"
            },
            "code": "\nlong create_and_store_object_00113bfa(long object_param1,long object_param2)\n\n{\n  long object_type;\n  long *object_ptr;\n  \n  if (((object_param1 != 0) && (object_param2 != 0)) &&\n     (object_type = debug_make_type_constprop_0(0x12,0), object_type != 0)) {\n    object_ptr = (long *)xmalloc(0x10);\n    *object_ptr = object_param1;\n    object_ptr[1] = object_param2;\n    *(long **)(object_type + 0x10) = object_ptr;\n    return object_type;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_and_store_object_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "validate_and_drop_share_flag_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "var1",
                "uVar2": "var2",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint validateAndDropShareFlag_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  uint ebx;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    var1 = *param2;\n    ebx = ebx & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(var2,var1,param3);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "validate_and_drop_share_flag_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "param_1": "baseAddress",
                "param_2": "value",
                "lVar1": "previousValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid formatAndPushString_00109e76(long baseAddress,uint value)\n\n{\n  long previousValue;\n  char formattedString [58];\n  \n  previousValue = *(long *)(baseAddress + 0x68);\n  *(long *)(baseAddress + 0x68) = previousValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",previousValue,previousValue,(ulong)value);\n  stab_push_string(baseAddress,formattedString,previousValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_stabs_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "updatedIndex",
                "lVar2": "offset",
                "uVar3": "newString",
                "saved_stabs": "stabsArray",
                "saved_stabs_index": "currentIndex"
            },
            "code": "\nulong updateStabsEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int updatedIndex;\n  long offset;\n  undefined8 newString;\n  \n  offset = (long)currentIndex * 0x18;\n  free(*(void **)(stabsArray + offset + 0x10));\n  *(undefined4 *)(stabsArray + offset) = newValue1;\n  *(undefined4 *)(stabsArray + offset + 4) = newValue2;\n  *(undefined8 *)(stabsArray + offset + 8) = newValue3;\n  newString = xstrdup(newValue4);\n  *(undefined8 *)(stabsArray + offset + 0x10) = newString;\n  updatedIndex = currentIndex + 1;\n  currentIndex = updatedIndex % 0x10;\n  return (long)updatedIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_stabs_entry_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "debug_start_source",
                "stab_lineno.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_struct_0010afd5",
                "param_1": "stringsList",
                "param_2": "mainStruct",
                "param_3": "searchString",
                "param_4": "searchStringLength",
                "param_5": "newParam",
                "param_6": "debugParam",
                "__s2": "searchStringCopy",
                "puVar2": "currentStruct",
                "uVar3": "tempVar",
                "lVar4": "tempLong",
                "puVar5": "innerStruct",
                "puVar6": "tempPtr",
                "bVar7": "tempByte",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nfindStringInStruct_0010afd5(undefined8 *stringsList,long mainStruct,undefined8 searchString,undefined4 searchStringLength,\n            undefined4 newParam,undefined8 debugParam)\n\n{\n  int iVar1;\n  char *searchStringCopy;\n  undefined8 *currentStruct;\n  undefined8 tempVar;\n  long tempLong;\n  undefined8 *innerStruct;\n  undefined4 *tempPtr;\n  byte tempByte;\n  undefined returnValue [16];\n  \n  tempByte = 0;\n  searchStringCopy = (char *)savestring(searchString,searchStringLength);\n  for (stringsList = (undefined8 *)*stringsList; stringsList != (undefined8 *)0x0;\n      stringsList = (undefined8 *)*stringsList) {\n    for (currentStruct = (undefined8 *)stringsList[1]; currentStruct != (undefined8 *)0x0;\n        currentStruct = (undefined8 *)*currentStruct) {\n      if ((undefined8 *)currentStruct[2] != (undefined8 *)0x0) {\n        for (innerStruct = *(undefined8 **)(undefined8 *)currentStruct[2]; innerStruct != (undefined8 *)0x0;\n            innerStruct = (undefined8 *)*innerStruct) {\n          if ((*(int *)((long)innerStruct + 0x14) == 1) && (*(char *)innerStruct[1] == *searchStringCopy)) {\n            iVar1 = strcmp((char *)innerStruct[1],searchStringCopy);\n            if (iVar1 == 0) {\n              tempLong = innerStruct[4];\n              if (tempLong == 0) goto LAB_0010b05b;\n              free(searchStringCopy);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentStruct = *(undefined8 **)(mainStruct + 0x1a0);\n  do {\n    if (currentStruct == (undefined8 *)0x0) {\n      currentStruct = (undefined8 *)xmalloc(0x28);\n      tempVar = *(undefined8 *)(mainStruct + 0x1a0);\n      tempPtr = (undefined4 *)((long)currentStruct + 0x14);\n      for (tempLong = 5; tempLong != 0; tempLong = tempLong + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)tempByte * -2 + 1;\n      }\n      *(undefined4 *)(currentStruct + 2) = newParam;\n      *currentStruct = tempVar;\n      currentStruct[1] = searchStringCopy;\n      tempVar = debug_make_indirect_type_isra_0(currentStruct + 3,searchStringCopy);\n      *(undefined8 **)(mainStruct + 0x1a0) = currentStruct;\n      currentStruct[4] = tempVar;\nLAB_0010b0e7:\n      tempLong = currentStruct[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = debugParam;\n      returnValue._0_8_ = tempLong;\n      return returnValue;\n    }\n    if (*(char *)currentStruct[1] == *searchStringCopy) {\n      iVar1 = strcmp((char *)currentStruct[1],searchStringCopy);\n      if (iVar1 == 0) {\n        if (*(int *)(currentStruct + 2) == 0) {\n          *(undefined4 *)(currentStruct + 2) = newParam;\n        }\n        free(searchStringCopy);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentStruct = (undefined8 *)*currentStruct;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "debug_make_indirect_type.isra.0",
                "savestring",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_string_in_struct_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "strchr",
                "bad_stab",
                "savestring",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_array_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_demangle_args",
                "strtol",
                "debug_make_enum_type.isra.0",
                "strcmp",
                "debug_get_real_type.isra.0",
                "stab_demangle_count",
                "free",
                "fprintf",
                "strcpy",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "parse_number",
                "strstr",
                "cplus_demangle_init_info",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "cplus_demangle_mangled_name",
                "sprintf",
                "startswith.lto_priv.0.lto_priv.0",
                "strncmp",
                "debug_get_type_name.constprop.0",
                "stab_demangle_v3_arglist",
                "debug_make_void_type.isra.0",
                "strcat",
                "stab_bad_demangle",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_method_type.isra.0",
                "malloc",
                "stab_demangle_remember_type",
                "debug_make_struct_type.isra.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "parse_stab_type_number",
                "stab_find_slot",
                "debug_make_const_type.isra.0",
                "stab_demangle_function_name.constprop.0",
                "stab_find_type",
                "stab_find_tagged_type",
                "strspn",
                "debug_make_type.constprop.0",
                "debug_make_int_type.isra.0",
                "debug_find_named_type",
                "warn_stab",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stabs_entries_00108b3e",
                "__format": "messageFormat",
                "lVar1": "stabName",
                "lVar2": "stabIndex",
                "piVar3": "stabData",
                "iVar4": "currentIndex"
            },
            "code": "\n\n\nundefined8 printLastStabsEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *messageFormat;\n  long stabName;\n  long stabIndex;\n  int *stabData;\n  int currentIndex;\n  \n  messageFormat = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,messageFormat);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  currentIndex = saved_stabs_index;\n  do {\n    stabIndex = (long)currentIndex * 0x18;\n    stabData = (int *)(saved_stabs + stabIndex);\n    if (*(long *)(saved_stabs + stabIndex + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabData);\n      if (stabName == 0) {\n        if (*stabData == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(saved_stabs + stabIndex + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(saved_stabs + stabIndex + 8));\n      if (*stabData != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(saved_stabs + stabIndex + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    currentIndex = (currentIndex + 1) % 0x10;\n  } while (saved_stabs_index != currentIndex);\n  return param_3;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "address"
            },
            "code": "\nvoid modifyStabType_0010a083(long address)\n\n{\n  stab_modify_type(address,0x2a,4,address + 0x178,address + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_array_00109c2e",
                "param_1": "arrayPtr",
                "param_2": "value",
                "param_3": "arraySize",
                "param_4": "flag",
                "param_5": "resultPtr",
                "param_6": "additionalData",
                "lVar1": "newArrayPtr",
                "plVar2": "currentElemPtr",
                "lVar3": "remainingSize",
                "puVar4": "currentBytePtr",
                "uVar5": "currentSize",
                "bVar6": "loopFlag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandArray_00109c2e(long arrayPtr,long value,ulong arraySize,int flag,undefined4 *resultPtr,\n            undefined8 additionalData)\n\n{\n  long newArrayPtr;\n  long *currentElemPtr;\n  long remainingSize;\n  undefined *currentBytePtr;\n  ulong currentSize;\n  byte loopFlag;\n  undefined returnValue [16];\n  \n  loopFlag = 0;\n  arraySize = arraySize & 0xffffffff;\n  currentSize = *(ulong *)(arrayPtr + 0x1b0);\n  if (currentSize <= arraySize) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= arraySize; currentSize = currentSize * 2) {\n    }\n    newArrayPtr = xrealloc(*(undefined8 *)(arrayPtr + 0x1a8),currentSize * 0x18);\n    *(long *)(arrayPtr + 0x1a8) = newArrayPtr;\n    currentBytePtr = (undefined *)(*(long *)(arrayPtr + 0x1b0) * 0x18 + newArrayPtr);\n    for (remainingSize = (currentSize - *(long *)(arrayPtr + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *currentBytePtr = 0;\n      currentBytePtr = currentBytePtr + (ulong)loopFlag * -2 + 1;\n    }\n    *(ulong *)(arrayPtr + 0x1b0) = currentSize;\n  }\n  currentElemPtr = (long *)(arraySize * 0x18 + *(long *)(arrayPtr + 0x1a8));\n  if (*currentElemPtr == 0) {\n    newArrayPtr = *(long *)(arrayPtr + 0x68);\n    *currentElemPtr = newArrayPtr;\n    *(long *)(arrayPtr + 0x68) = newArrayPtr + 1;\n    currentElemPtr[1] = value;\n    *(int *)(currentElemPtr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(currentElemPtr + 2) = 0;\n    *(undefined4 *)((long)currentElemPtr + 0x14) = *resultPtr;\n  }\n  else {\n    *resultPtr = *(undefined4 *)((long)currentElemPtr + 0x14);\n  }\n  returnValue._8_8_ = additionalData;\n  returnValue._0_8_ = *currentElemPtr;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_tag_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "handle_bad_format_001053b5",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid handleBadFormat_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "handle_bad_format_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "file_ptr",
                "uVar1": "result",
                "lVar2": "data_ptr"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long file_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long data_ptr;\n  \n  if ((*(long *)(file_ptr + 8) != 0) && (*(long *)(file_ptr + 0x10) != 0)) {\n    data_ptr = *(long *)(file_ptr + 0x10) + 0x10;\n    if (*(long *)(file_ptr + 0x20) != 0) {\n      data_ptr = *(long *)(file_ptr + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(data_ptr,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "find_or_create_debug_type_0010c7a0",
                "param_1": "debugContext",
                "param_2": "typeName",
                "param_3": "typeId",
                "uVar1": "result",
                "uVar2": "newTypeId",
                "lVar3": "typeInfo",
                "piVar4": "typePtr",
                "__s1": "typeInfoName",
                "cVar5": "isSameType",
                "iVar6": "counter",
                "puVar7": "currentType",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] findOrCreateDebugType_0010c7a0(long debugContext,char *typeName,int *typeId,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint newTypeId;\n  long typeInfo;\n  int *typePtr;\n  char *typeInfoName;\n  char isSameType;\n  int counter;\n  undefined8 *currentType;\n  undefined returnValue [16];\n  \n  if (3 < *typeId - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeInfo = *(long *)(typeId + 4);\n  currentType = (undefined8 *)(ulong)*(uint *)(typeInfo + 0xc);\n  if (*(uint *)(typeInfo + 0xc) <= *(uint *)(debugContext + 0x38)) {\n    for (currentType = *(undefined8 **)(debugContext + 0x50); currentType != (undefined8 *)0x0;\n        currentType = (undefined8 *)*currentType) {\n      typePtr = (int *)currentType[1];\n      if (*typePtr == *typeId) {\n        typeInfoName = (char *)currentType[2];\n        if (typeName == (char *)0x0) {\n          if (typeInfoName == (char *)0x0) {\nLAB_0010c82c:\n            isSameType = debug_type_samep(debugContext,typePtr,typeId);\n            if (isSameType != '\\0') {\n              newTypeId = *(uint *)(*(long *)(currentType[1] + 0x10) + 0xc);\n              currentType = (undefined8 *)(ulong)newTypeId;\n              *(uint *)(typeInfo + 0xc) = newTypeId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((typeInfoName != (char *)0x0) && (*typeInfoName == *typeName)) &&\n                (counter = strcmp(typeInfoName,typeName), counter == 0)) goto LAB_0010c82c;\n      }\n    }\n    counter = *(int *)(debugContext + 0x34) + 1;\n    *(int *)(debugContext + 0x34) = counter;\n    *(int *)(typeInfo + 0xc) = counter;\n    currentType = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(debugContext + 0x50);\n    currentType[2] = typeName;\n    *(undefined8 **)(debugContext + 0x50) = currentType;\n    *currentType = result;\n    currentType[1] = typeId;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)currentType >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param_4;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_type_samep",
                "__assert_fail",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "find_or_create_debug_type_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "ptrList1",
                "param_3": "ptrList2",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "ptrPtrList1",
                "ppcVar4": "ptrPtrChars1",
                "ppcVar5": "ptrPtrChars2",
                "lVar6": "longVar1",
                "lVar7": "longVar2",
                "lVar8": "longVar3",
                "pcVar9": "ptrChar1",
                "pcVar10": "ptrChar2",
                "cVar11": "comparison",
                "bVar12": "result",
                "iVar13": "intVar",
                "uVar14": "debugType1",
                "uVar15": "debugType2",
                "puVar16": "ptrVar1",
                "puVar17": "ptrVar2",
                "plVar18": "ptrLong1",
                "lVar19": "longVar4",
                "plVar20": "ptrLong2",
                "plVar21": "ptrLong3",
                "lVar22": "longVar5",
                "local_70": "localList",
                "local_58": "localPtr1",
                "plStack_50": "ptrLong4",
                "local_48": "localPtr2"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *ptrList1,long *ptrList2)\n\n{\n  uint value1;\n  uint value2;\n  long **ptrPtrList1;\n  char **ptrPtrChars1;\n  char **ptrPtrChars2;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  char *ptrChar1;\n  char *ptrChar2;\n  char comparison;\n  byte result;\n  int intVar;\n  undefined8 debugType1;\n  undefined8 debugType2;\n  undefined8 *ptrVar1;\n  undefined8 *ptrVar2;\n  long *ptrLong1;\n  long longVar4;\n  long *ptrLong2;\n  long *ptrLong3;\n  long longVar5;\n  long *localList;\n  undefined8 *localPtr1;\n  long *ptrLong4;\n  long *localPtr2;\n  \n  ptrLong1 = ptrList2;\n  if (ptrList1 == (long *)0x0) {\nLAB_00109241:\n    return ptrList2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptrLong1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)ptrList1;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)ptrList2, value2 == 1) {\n      ptrList2 = **(long ***)ptrList2[2];\n      if (ptrList2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (ptrList1 == ptrList2) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto LAB_001092cb;\n    ptrList1 = *(long **)(ptrList1[2] + 8);\n    if (ptrList1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    ptrList2 = *(long **)(ptrList2[2] + 8);\n    ptrLong1 = ptrList2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*ptrList1 != *ptrList2) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(ptrList1 + 2) == *(char *)(ptrList2 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  localPtr1 = *(undefined8 **)(param1 + 0x58);\n  for (ptrVar2 = localPtr1; ptrVar2 != (undefined8 *)0x0; ptrVar2 = (undefined8 *)*ptrVar2) {\n    if (((long *)ptrVar2[1] == ptrList1) && ((long *)ptrVar2[2] == ptrList2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &localPtr1;\n  ptrLong4 = ptrList1;\n  localPtr2 = ptrList2;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptrLong1 = (long *)ptrList1[2];\n    ptrPtrList1 = (long **)ptrList2[2];\n    if (ptrLong1 == (long *)0x0) {\n      result = ptrPtrList1 == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrPtrList1 == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)ptrLong1 + 0xc)) &&\n       (*(uint *)((long)ptrLong1 + 0xc) == *(uint *)((long)ptrPtrList1 + 0xc))) goto LAB_001097af;\n    ptrVar2 = (undefined8 *)*ptrLong1;\n    localList = *ptrPtrList1;\n    if (((ptrVar2 == (undefined8 *)0x0) == (localList == (long *)0x0)) &&\n       ((((ptrLong1[2] == 0) == (ptrPtrList1[2] == (long *)0x0) &&\n         ((ptrLong1[3] == 0) == (ptrPtrList1[3] == (long *)0x0))) &&\n        ((ptrLong1[4] == 0) == (ptrPtrList1[4] == (long *)0x0))))) {\n      if (ptrVar2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptrLong1[4] != 0) &&\n           (comparison = checkEquality_0010922b(param1,ptrLong1[4],ptrPtrList1[4]), comparison == '\\0'))\n        goto LAB_00109382;\n        ptrLong3 = (long *)ptrLong1[2];\n        if (ptrLong3 == (long *)0x0) {\nLAB_00109540:\n          ptrVar2 = (undefined8 *)ptrLong1[3];\n          if (ptrVar2 == (undefined8 *)0x0) goto LAB_001097af;\n          ptrLong1 = ptrPtrList1[3];\n          while( true ) {\n            ptrPtrChars2 = (char **)*ptrVar2;\n            if (ptrPtrChars2 == (char **)0x0) {\n              result = *ptrLong1 == 0;\n              goto LAB_001099c4;\n            }\n            ptrPtrChars1 = (char **)*ptrLong1;\n            if (ptrPtrChars1 == (char **)0x0) break;\n            if ((**ptrPtrChars2 != **ptrPtrChars1) || (intVar = strcmp(*ptrPtrChars2,*ptrPtrChars1), intVar != 0))\n            break;\n            ptrChar1 = ptrPtrChars2[1];\n            ptrChar2 = ptrPtrChars1[1];\n            if ((ptrChar1 == (char *)0x0) != (ptrChar2 == (char *)0x0)) break;\n            if (ptrChar1 != (char *)0x0) {\n              longVar5 = 0;\n              while( true ) {\n                ptrPtrChars2 = *(char ***)(ptrChar1 + longVar5);\n                ptrPtrChars1 = *(char ***)(ptrChar2 + longVar5);\n                if (ptrPtrChars2 == (char **)0x0) break;\n                if (ptrPtrChars1 == (char **)0x0) goto LAB_00109382;\n                if ((((**ptrPtrChars2 != **ptrPtrChars1) ||\n                     ((((ulong)ptrPtrChars2[2] ^ (ulong)ptrPtrChars1[2]) & 0xffffffffffff) != 0)) ||\n                    ((ptrPtrChars2[3] != ptrPtrChars1[3] ||\n                     ((((ptrPtrChars2[4] == (char *)0x0) != (ptrPtrChars1[4] == (char *)0x0) ||\n                       (intVar = strcmp(*ptrPtrChars2,*ptrPtrChars1), intVar != 0)) ||\n                      (comparison = checkEquality_0010922b(param1,ptrPtrChars2[1],ptrPtrChars1[1]), comparison == '\\0')))))) ||\n                   ((ptrPtrChars2[4] != (char *)0x0 &&\n                    (comparison = checkEquality_0010922b(param1,ptrPtrChars2[4],ptrPtrChars1[4]), comparison == '\\0'))))\n                goto LAB_00109382;\n                longVar5 = longVar5 + 8;\n              }\n              if (ptrPtrChars1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptrVar2 = ptrVar2 + 1;\n            ptrLong1 = ptrLong1 + 1;\n          }\n        }\n        else {\n          ptrLong2 = ptrPtrList1[2];\n          for (; ptrVar2 = (undefined8 *)*ptrLong3, ptrVar2 != (undefined8 *)0x0;\n              ptrLong3 = ptrLong3 + 1) {\n            ptrVar1 = (undefined8 *)*ptrLong2;\n            if ((((ptrVar1 == (undefined8 *)0x0) ||\n                 (((ptrVar2[1] ^ ptrVar1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptrVar2 + 2) != *(int *)(ptrVar1 + 2))) ||\n               (comparison = checkEquality_0010922b(param1,*ptrVar2,*ptrVar1), comparison == '\\0'))\n            goto LAB_00109382;\n            ptrLong2 = ptrLong2 + 1;\n          }\n          if (*ptrLong2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; ptrPtrChars2 = (char **)*ptrVar2, ptrPtrChars2 != (char **)0x0; ptrVar2 = ptrVar2 + 1) {\n          ptrPtrChars1 = (char **)*localList;\n          if (ptrPtrChars1 == (char **)0x0) goto LAB_00109382;\n          ptrChar1 = *ptrPtrChars1;\n          ptrChar2 = *ptrPtrChars2;\n          if ((*ptrChar2 != *ptrChar1) ||\n             ((((ulong)ptrPtrChars2[2] ^ (ulong)ptrPtrChars1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)ptrPtrChars2 + 0x14) == '\\0') {\n            if (ptrPtrChars2[3] == ptrPtrChars1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          intVar = strcmp(ptrPtrChars2[3],ptrPtrChars1[3]);\n          if (intVar != 0) goto LAB_00109382;\nLAB_00109480:\n          intVar = strcmp(ptrChar2,ptrChar1);\n          if (((intVar != 0) || (ptrPtrChars2[1] == (char *)0x0)) || (ptrPtrChars1[1] == (char *)0x0))\n          goto LAB_00109382;\n          debugType1 = debug_get_real_type_isra_0(ptrPtrChars1[1],0);\n          debugType2 = debug_get_real_type_isra_0(ptrPtrChars2[1],0);\n          comparison = checkEquality_0010922b(param1,debugType2,debugType1);\n          if (comparison == '\\0') goto LAB_00109382;\n          localList = localList + 1;\n        }\n        if (*localList == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptrLong1 = (long *)ptrList1[2];\n    ptrLong3 = (long *)ptrList2[2];\n    if (ptrLong1 == (long *)0x0) {\n      result = ptrLong3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptrLong3 == (long *)0x0) goto LAB_00109382;\n    longVar5 = *ptrLong1;\n    longVar1 = *ptrLong3;\n    longVar4 = 0;\n    longVar2 = ptrLong1[1];\n    longVar3 = ptrLong3[1];\n    do {\n      ptrChar1 = *(char **)(longVar5 + longVar4);\n      if (ptrChar1 == (char *)0x0) {\n        result = *(long *)(longVar1 + longVar4) == 0;\n        goto LAB_001099c1;\n      }\n      ptrChar2 = *(char **)(longVar1 + longVar4);\n      if (((ptrChar2 == (char *)0x0) || (*ptrChar1 != *ptrChar2)) ||\n         (*(long *)(longVar2 + longVar4) != *(long *)(longVar3 + longVar4))) break;\n      intVar = strcmp(ptrChar1,ptrChar2);\n      longVar4 = longVar4 + 8;\n    } while (intVar == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(param1,ptrList1[2],ptrList2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)ptrList1[2] + 2) == *(char *)((undefined8 *)ptrList2[2] + 2)) &&\n       (comparison = checkEquality_0010922b(param1,*(undefined8 *)ptrList1[2],*(undefined8 *)ptrList2[2]),\n       comparison != '\\0')) {\n      ptrLong1 = *(long **)(ptrList1[2] + 8);\n      ptrLong3 = *(long **)(ptrList2[2] + 8);\n      if ((ptrLong1 == (long *)0x0) == (ptrLong3 == (long *)0x0)) {\n        if (ptrLong1 == (long *)0x0) goto LAB_001097af;\n        while (((*ptrLong1 != 0 && (*ptrLong3 != 0)) &&\n               (comparison = checkEquality_0010922b(param1), comparison != '\\0'))) {\n          ptrLong1 = ptrLong1 + 1;\n          ptrLong3 = ptrLong3 + 1;\n        }\nLAB_0010995d:\n        if (*ptrLong1 != 0) goto LAB_00109964;\n        result = *ptrLong3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptrVar2 = (undefined8 *)ptrList2[2];\n    ptrVar1 = (undefined8 *)ptrList1[2];\n    result = 0;\n    if ((ptrVar1[1] == ptrVar2[1]) && (ptrVar1[2] == ptrVar2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(param1,*ptrVar1,*ptrVar2);\n    }\n    break;\n  case 0x10:\n    ptrVar2 = (undefined8 *)ptrList2[2];\n    ptrVar1 = (undefined8 *)ptrList1[2];\n    result = 0;\n    if (((ptrVar1[2] == ptrVar2[2]) && (ptrVar1[3] == ptrVar2[3])) &&\n       (*(char *)(ptrVar1 + 4) == *(char *)(ptrVar2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptrVar2 = (undefined8 *)ptrList2[2];\n    ptrVar1 = (undefined8 *)ptrList1[2];\n    result = 0;\n    if (*(char *)(ptrVar1 + 1) == *(char *)(ptrVar2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    comparison = checkEquality_0010922b(param1,*(undefined8 *)ptrList1[2],*(undefined8 *)ptrList2[2]);\n    result = 0;\n    if (comparison != '\\0') {\n      result = checkEquality_0010922b(param1,*(undefined8 *)(ptrList1[2] + 8),*(undefined8 *)(ptrList2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)ptrList1[2] + 3) == *(char *)((undefined8 *)ptrList2[2] + 3)) &&\n        (comparison = checkEquality_0010922b(param1,*(undefined8 *)ptrList1[2],*(undefined8 *)ptrList2[2]),\n        comparison != '\\0')) &&\n       (comparison = checkEquality_0010922b(param1,*(undefined8 *)(ptrList1[2] + 8),\n                              *(undefined8 *)(ptrList2[2] + 8)), comparison != '\\0')) {\n      ptrLong1 = *(long **)(ptrList1[2] + 0x10);\n      ptrLong3 = *(long **)(ptrList2[2] + 0x10);\n      if ((ptrLong1 == (long *)0x0) == (ptrLong3 == (long *)0x0)) {\n        if (ptrLong1 != (long *)0x0) {\n          while (((*ptrLong1 != 0 && (*ptrLong3 != 0)) &&\n                 (comparison = checkEquality_0010922b(param1), comparison != '\\0'))) {\n            ptrLong1 = ptrLong1 + 1;\n            ptrLong3 = ptrLong3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptrLong1 = (long *)ptrList2[2];\n    ptrLong3 = (long *)ptrList1[2];\n    intVar = strcmp(*(char **)(*ptrLong3 + 8),*(char **)(*ptrLong1 + 8));\n    result = 0;\n    if (intVar == 0) {\n      result = checkEquality_0010922b(param1,ptrLong3[1],ptrLong1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = localPtr1;\n  return result;\ncode_r0x00109263:\n  ptrList1 = **(long ***)ptrList1[2];\n  ptrLong1 = ptrList1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "abort",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_type_samep",
                "debug_set_class_id.lto_priv.0"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "copy_file",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_and_extract_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "path",
                "cVar1": "formatValid",
                "iVar2": "arch",
                "iVar3": "statResult",
                "ppcVar4": "archiveFile",
                "lVar5": "breadResult",
                "uVar6": "errorMsg",
                "__format": "formatString",
                "puVar7": "tempDir",
                "piVar8": "errnoPtr",
                "uVar9": "errorMsg",
                "in_RAX": "filePtr",
                "pcVar10": "currChar",
                "ppcVar11": "nextArchFile",
                "lVar12": "remainingSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunc",
                "lVar15": "bytesLeft",
                "pcVar16": "nextChar",
                "psVar17": "fileStat",
                "unaff_R14": "currDir",
                "unaff_R15": "archivePtr",
                "bVar18": "tempVar",
                "unaff_retaddr": "returnAddr",
                "in_stack_00000008": "archiveFileName",
                "in_stack_00000010": "filePtrPtr",
                "in_stack_00000018": "tempDirName",
                "in_stack_00000020": "nextArchiveFilePtr",
                "in_stack_00000028": "accessMode",
                "in_stack_00000030": "setMode",
                "in_stack_000000f8": "permissionBits",
                "in_stack_00000110": "fileSize"
            },
            "code": "\nvoid copyAndExtractArchive_001052a2(undefined8 param1,undefined8 param2,char *path)\n\n{\n  char formatValid;\n  int arch;\n  int statResult;\n  char **archiveFile;\n  long breadResult;\n  undefined8 errorMsg;\n  char *formatString;\n  undefined8 *tempDir;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  long filePtr;\n  char *currChar;\n  char **nextArchFile;\n  long remainingSize;\n  void *buffer;\n  code *closeFunc;\n  long bytesLeft;\n  char *nextChar;\n  stat *fileStat;\n  undefined8 *currDir;\n  char **archivePtr;\n  byte tempVar;\n  undefined8 returnAddr;\n  undefined8 *archiveFileName;\n  long *filePtrPtr;\n  char *tempDirName;\n  undefined8 *nextArchiveFilePtr;\n  undefined8 accessMode;\n  undefined8 setMode;\n  uint permissionBits;\n  long fileSize;\n  \n  tempVar = 0;\n  currChar = (char *)(filePtr + 1);\n  do {\n    if (*currChar == '/') {\n      copyAndExtractArchive_001052a2();\n      return;\n    }\n    while (*currChar == '\\0') {\n      currChar = (char *)concat(tempDirName,&DAT_0011b47d);\n      statResult = stat(currChar,(stat *)&stack0x00000050);\n      tempDir = currDir;\n      if (-1 < statResult) {\n        remainingSize = make_tempdir(currChar);\n        free(currChar);\n        if (remainingSize == 0) {\n          errnoPtr = __errno_location();\n          currChar = strerror(*errnoPtr);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMsg,currChar);\n          goto LAB_00104e93;\n        }\n        tempDir = (undefined8 *)xmalloc(0x18);\n        currChar = *archivePtr;\n        *tempDir = currDir;\n        tempDir[2] = 0;\n        tempDir[1] = remainingSize;\n        currChar = (char *)concat(remainingSize,&DAT_0011b47d,currChar);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        fileStat = (stat *)&stack0x00000050;\n        for (remainingSize = 0x24; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *(undefined4 *)&fileStat->st_dev = 0;\n          fileStat = (stat *)((long)fileStat + (ulong)tempVar * -8 + 4);\n        }\n        nextArchFile = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          nextArchFile = archivePtr;\n        }\n        statResult = (**(code **)(nextArchFile[1] + 0x1e8))(archivePtr,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          nextChar = *archivePtr;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMsg,nextChar);\n        }\n      }\n      currDir = (undefined8 *)xmalloc(0x18);\n      currDir[1] = currChar;\n      *currDir = tempDir;\n      currDir[2] = 0;\n      formatValid = bfd_check_format(archivePtr,1);\n      if (formatValid == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archivePtr,0,errorMsg);\n        nextArchFile = (char **)bfd_openw(currChar,accessMode);\n        if (nextArchFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        archiveFile = (char **)archivePtr[0x1d];\n        if ((char **)archivePtr[0x1d] == (char **)0x0) {\n          archiveFile = archivePtr;\n        }\n        arch = (**(code **)(archiveFile[1] + 0x1e8))(archivePtr,&stack0x000000e0);\n        remainingSize = fileSize;\n        if (arch == 0) {\n          if (fileSize < 0) {\n            errorMsg = bfd_get_archive_filename(archivePtr);\n            errorMsg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(errorMsg,errorMsg);\n          }\n          else {\n            arch = bfd_seek(archivePtr,0,0);\n            if (arch == 0) {\n              if (verbose != '\\0') {\n                nextChar = *nextArchFile;\n                errorMsg = bfd_get_archive_filename(archivePtr);\n                formatString = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatString,errorMsg,nextChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; remainingSize != 0; remainingSize = remainingSize - bytesLeft) {\n                bytesLeft = 0x2000;\n                if (remainingSize < 0x2001) {\n                  bytesLeft = remainingSize;\n                }\n                breadResult = bfd_bread(buffer,bytesLeft,archivePtr);\n                archiveFile = archivePtr;\n                if ((bytesLeft != breadResult) ||\n                   (breadResult = bfd_bwrite(buffer,bytesLeft,nextArchFile), archiveFile = nextArchFile, bytesLeft != breadResult\n                   )) {\n                  bfd_nonfatal_message(0,archiveFile,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*nextArchFile,permissionBits | 0x100);\n              free(buffer);\n              formatValid = bfd_close_all_done(nextArchFile);\n              if (formatValid == '\\0') {\n                bfd_nonfatal_message(currChar,0,0,0);\n                status = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = bfd_get_archive_filename(archivePtr);\n            bfd_nonfatal(errorMsg);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archivePtr,0,0);\n        }\nLAB_00104f00:\n        formatValid = bfd_close_all_done(nextArchFile);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currChar);\n        status = 1;\n      }\n      else {\n        if (setMode._7_1_ == '\\0') {\n          nextArchFile = (char **)bfd_openw(currChar,*(undefined8 *)archivePtr[1]);\n        }\n        else {\n          nextArchFile = (char **)bfd_openw(currChar,accessMode);\n        }\n        if (nextArchFile == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        formatValid = copy_object(archivePtr,nextArchFile,returnAddr);\n        if (formatValid == '\\0') {\n          arch = bfd_get_arch(archivePtr);\n          if (arch == 0) goto LAB_00104d75;\n          formatValid = bfd_close_all_done(nextArchFile);\n          if (formatValid == '\\0') {\n            bfd_nonfatal_message(currChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        formatValid = bfd_close(nextArchFile);\n        if (formatValid == '\\0') {\n          bfd_nonfatal_message(currChar,0,0,0);\n          status = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currChar,(stat *)&stack0x00000050);\n        }\n        remainingSize = bfd_openr(currChar,accessMode);\n        currDir[2] = remainingSize;\n        *filePtrPtr = remainingSize;\n        filePtrPtr = (long *)(remainingSize + 0xf0);\n        nextArchFile = (char **)bfd_openr_next_archived_file(nextArchiveFilePtr,archivePtr);\n        bfd_close(archivePtr);\n        archivePtr = nextArchFile;\n      }\n      if ((status != 0) || (archivePtr == (char **)0x0)) {\n        *filePtrPtr = 0;\n        buffer = (void *)xstrdup(*archiveFileName);\n        if (status == 0) {\n          closeFunc = bfd_close;\n        }\n        else {\n          closeFunc = bfd_close_all_done;\n        }\n        formatValid = (*closeFunc)(archiveFileName);\n        if (formatValid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*nextArchiveFilePtr);\n        formatValid = bfd_close(nextArchiveFilePtr);\n        if (formatValid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currChar = *archivePtr;\n      path = currChar;\n      if (*currChar == '/') goto LAB_0010527d;\n    }\n    nextChar = currChar;\n    if ((*currChar == '.') && (nextChar = currChar + 1, currChar[1] == '.')) {\n      nextChar = currChar + 2;\n      if ((currChar[2] == '\\0') || (currChar[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMsg,path);\nLAB_00104e93:\n        status = 1;\nLAB_00114b4b:\n        while (currDir != (undefined8 *)0x0) {\n          if (currDir[2] == 0) {\n            rmdir((char *)currDir[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)currDir[1]);\n          }\n          free((void *)currDir[1]);\n          tempDir = (undefined8 *)*currDir;\n          free(currDir);\n          currDir = tempDir;\n        }\n        rmdir(tempDirName);\n        free(tempDirName);\n        return;\n      }\n    }\n    for (; (currChar = nextChar, *nextChar != '\\0' && (*nextChar != '/')); nextChar = nextChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_and_extract_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "stab_context",
                "list_matching_formats",
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "process_and_write_symbols_0010e453",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "additionalSymbols",
                "lVar1": "symbolIndex",
                "cVar2": "status",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "result",
                "lVar5": "count",
                "ppcVar6": "currentSymbol",
                "lVar7": "offset"
            },
            "code": "\nundefined8 processAndWriteSymbols_0010e453(long symbolTable,char *name,char **additionalSymbols)\n\n{\n  long symbolIndex;\n  char status;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 result;\n  long count;\n  char **currentSymbol;\n  long offset;\n  \n  if (additionalSymbols == (char **)0x0) {\n    if (name != (char *)0x0) {\n      length = strlen(name);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",name);\nLAB_0010e578:\n      status = stab_push_string(symbolTable,formattedString,0,0,4);\n      if (status != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    count = 10;\n    currentSymbol = additionalSymbols;\n    if (name != (char *)0x0) {\n      length = strlen(name);\n      count = length + 10;\n    }\n    for (; *currentSymbol != (char *)0x0; currentSymbol = currentSymbol + 1) {\n      length = strlen(*currentSymbol);\n      count = count + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(count);\n    if (name == (char *)0x0) {\n      *formattedString = 0x65;\n      count = 0;\n    }\n    else {\n      count = *(long *)(symbolTable + 0x68);\n      *(long *)(symbolTable + 0x68) = count + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",name,count);\n    }\n    offset = 0;\n    while( true ) {\n      symbolIndex = *(long *)((long)additionalSymbols + offset);\n      length = strlen((char *)formattedString);\n      if (symbolIndex == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (name == (char *)0x0) goto LAB_0010e578;\n    status = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n    if ((status == '\\0') || (status = stab_push_defined_type(symbolTable,count,4), status == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_and_write_symbols_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_param_0010ed2c",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "input_param",
                "extraout_RDX": "temp_variable",
                "in_R10": "additional_data",
                "cVar1": "symbol_written",
                "iVar2": "count",
                "auVar4": "result",
                "uVar3": "updated_count"
            },
            "code": "\nundefined  [16] update_param_0010ed2c(long base_address,ulong new_value,undefined8 input_param)\n\n{\n  char symbol_written;\n  int count;\n  undefined8 temp_variable;\n  ulong updated_count;\n  undefined8 additional_data;\n  undefined result [16];\n  \n  if (*(ulong *)(base_address + 0x1f0) < new_value) {\n    *(ulong *)(base_address + 0x1f0) = new_value;\n  }\n  if (*(long *)(base_address + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(base_address + 0x1f8) != 0) {\n      count = *(int *)(base_address + 0x1f8) + -1;\n      updated_count = CONCAT71((int7)((ulong)input_param >> 8),1);\n      *(int *)(base_address + 0x1f8) = count;\n      if (count != 0) {\n        result = stab_write_symbol_lto_priv_0\n                           (base_address,0xe0,0,new_value - *(long *)(base_address + 0x200),0,additional_data);\n        return result;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    symbol_written = stab_write_symbol_lto_priv_0(base_address,0xc0,0,*(long *)(base_address + 0x208),0);\n    if (symbol_written != '\\0') {\n      *(undefined8 *)(base_address + 0x208) = 0xffffffffffffffff;\n      input_param = temp_variable;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_count = 0;\nLAB_0010edae:\n  result._0_8_ = updated_count & 0xffffffff;\n  result._8_8_ = additional_data;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_param_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_choose_0011a1b0",
                "param_1": "array1",
                "param_2": "array2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "maxArray1Size",
                "uVar2": "maxArray2Size",
                "iVar3": "comparisonResult",
                "extraout_var": "extraOutVar",
                "uVar4": "returnValue",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] compareAndChoose_0011a1b0(ulong *array1,ulong *array2,undefined8 param3,undefined8 param4)\n\n{\n  ulong maxArray1Size;\n  ulong maxArray2Size;\n  int comparisonResult;\n  undefined4 extraOutVar;\n  ulong returnValue;\n  undefined result [16];\n  \n  returnValue = *array1;\n  if (*array2 <= *array1) {\n    returnValue = *array2;\n  }\n  comparisonResult = memcmp((void *)(array1[3] + 3),(void *)(array2[3] + 3),returnValue - 3);\n  returnValue = CONCAT44(extraOutVar,comparisonResult);\n  if (comparisonResult == 0) {\n    maxArray1Size = array1[8];\n    if (maxArray1Size < array2[7]) {\n      returnValue = 0xffffffff;\n    }\n    else {\n      maxArray2Size = array2[8];\n      if (maxArray2Size < array1[7]) {\n        returnValue = 1;\n      }\n      else {\n        returnValue = 0xffffffff;\n        if (array2[7] <= array1[7]) {\n          if (maxArray2Size < maxArray1Size) {\n            returnValue = 1;\n          }\n          else {\n            returnValue = 0xffffffff;\n            if (maxArray2Size <= maxArray1Size) {\n              if (array1[2] == 0x100) {\n                returnValue = (ulong)-(uint)(array2[2] != 0x100);\n              }\n              else {\n                returnValue = (ulong)(array2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  result._8_8_ = param4;\n  result._0_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "memcmp",
                "compare_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_choose_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "process_gnu_build_attribute_notes_001163d0",
                "param_1": "param_elf_header",
                "param_2": "param_program_header",
                "param_3": "param_note_size",
                "param_4": "param_note_data",
                "uVar1": "result",
                "uVar2": "elf_header_value",
                "uVar3": "program_header_value",
                "puVar5": "ptr_reloc_upper_bound",
                "iVar6": "reloc_canonicalization_result",
                "uVar7": "error_message",
                "lVar8": "length",
                "__ptr": "reloc_buffer",
                "uVar9": "current_reloc_value1",
                "uVar10": "current_reloc_value2",
                "uVar11": "current_reloc_value3",
                "uVar12": "current_reloc_value4",
                "__ptr_00": "note_buffer",
                "uVar13": "note_type",
                "uVar14": "note_name_size",
                "uVar15": "note_description_size",
                "uVar16": "remaining_size",
                "puVar17": "current_note",
                "puVar18": "note_name",
                "iVar21": "iteration_counter",
                "puVar22": "temp_ptr",
                "puVar23": "gnu_build_notes",
                "puVar25": "ptr2",
                "__nmemb": "number_of_notes",
                "status": "process_status"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong process_gnu_build_attribute_notes_001163d0(undefined8 *param_elf_header,undefined8 *param_program_header,ulong param_note_size,undefined *param_note_data)\n\n{\n  ulong result;\n  undefined8 elf_header_value;\n  undefined8 program_header_value;\n  bool bVar4;\n  ulong *ptr_reloc_upper_bound;\n  int reloc_canonicalization_result;\n  undefined8 error_message;\n  long length;\n  void *reloc_buffer;\n  ulong current_reloc_value1;\n  ulong current_reloc_value2;\n  ulong current_reloc_value3;\n  ulong current_reloc_value4;\n  undefined *note_buffer;\n  ulong note_type;\n  ulong note_name_size;\n  ulong note_description_size;\n  ulong remaining_size;\n  ulong *current_note;\n  undefined *note_name;\n  char cVar19;\n  undefined *pelf_header_value0;\n  int iteration_counter;\n  undefined *temp_ptr;\n  ulong *gnu_build_notes;\n  ulong elf_header_value4;\n  size_t number_of_notes;\n  ulong *ptr2;\n  byte bVar26;\n  ulong local_88;\n  ulong uStack_80;\n  ulong local_70;\n  ulong local_68;\n  ulong *local_60;\n  \n  bVar26 = 0;\n  length = bfd_get_reloc_upper_bound();\n  local_68 = param_note_size;\n  if (0 < length) {\n    reloc_buffer = (void *)xmalloc(length);\n    length = bfd_canonicalize_reloc(param_elf_header,param_program_header,reloc_buffer,isympp);\n    free(reloc_buffer);\n    if (length != 0) {\n      if (is_strip == 0) {\n        elf_header_value = *param_elf_header;\n        program_header_value = *param_program_header;\n        error_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(error_message,elf_header_value,program_header_value);\n      }\n      local_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_60 = (ulong *)xcalloc(param_note_size / 0xc,0x48,param_note_size % 0xc);\n  local_88 = 0;\n  local_70 = 0;\n  remaining_size = param_note_size;\n  note_description_size = 0;\n  gnu_build_notes = local_60;\n  note_name_size = 0;\n  temp_ptr = param_note_data;\n  while (0xb < remaining_size) {\n    current_reloc_value2 = (**(code **)(param_elf_header[1] + 0x40))(temp_ptr);\n    *gnu_build_notes = current_reloc_value2;\n    current_reloc_value2 = (**(code **)(param_elf_header[1] + 0x40))(temp_ptr + 4);\n    gnu_build_notes[1] = current_reloc_value2;\n    current_reloc_value3 = (**(code **)(param_elf_header[1] + 0x40))(temp_ptr + 8);\n    current_reloc_value2 = *gnu_build_notes;\n    gnu_build_notes[2] = current_reloc_value3;\n    current_reloc_value4 = gnu_build_notes[1];\n    note_type = current_reloc_value2 + 3 & 0xfffffffffffffffc;\n    gnu_build_notes[6] = note_type;\n    if (current_reloc_value4 != (current_reloc_value4 + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < current_reloc_value3 - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = note_type + current_reloc_value4 + 0xc;\n    if (remaining_size < result) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (current_reloc_value2 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    gnu_build_notes[3] = (ulong)(temp_ptr + 0xc);\n    gnu_build_notes[4] = (ulong)(temp_ptr + note_type + 0xc);\n    remaining_size = remaining_size + (-0xc - (note_type + current_reloc_value4));\n    if (current_reloc_value2 != 2) {\n      if (temp_ptr[0xc] == '$') {\n        if ((temp_ptr[0xd] == '\\x01') && (temp_ptr[0xe] == '1')) {\n          remaining_size = extract_and_process_gnu_build_notes_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < current_reloc_value2) && (temp_ptr[0xc] == 'G')) && (temp_ptr[0xd] == 'A')) &&\n              ((temp_ptr[0xe] == '$' && (temp_ptr[0xf] == '\\x01')))) {\n        if (temp_ptr[0x10] == '2') {\n          remaining_size = extract_and_process_gnu_build_notes_00116490();\n          return remaining_size;\n        }\n        if (temp_ptr[0x10] == '3') {\n          remaining_size = extract_and_process_gnu_build_notes_00116490();\n          return remaining_size;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    current_reloc_value1 = note_description_size;\n    elf_header_value4 = note_name_size;\n    if (current_reloc_value4 == 0) {\n      if (current_reloc_value3 == 0x100) {\n        gnu_build_notes[7] = local_88;\nLAB_001164af:\n        current_reloc_value4 = note_name_size;\n        elf_header_value4 = note_name_size;\n      }\n      else {\n        gnu_build_notes[7] = local_70;\nLAB_0011669e:\n        current_reloc_value1 = note_description_size;\n        current_reloc_value4 = note_description_size;\n      }\n    }\n    else {\n      if (current_reloc_value4 != 0x10) {\n        if (current_reloc_value4 < 0x11) {\n          if (current_reloc_value4 == 4) {\n            current_reloc_value3 = (**(code **)(param_elf_header[1] + 0x40))();\n            current_reloc_value4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (current_reloc_value4 == 8) {\n            remaining_size = FUNC_001086af();\n            return remaining_size;\n          }\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      current_reloc_value3 = (**(code **)(param_elf_header[1] + 0x28))(temp_ptr + note_type + 0xc);\n      current_reloc_value4 = (**(code **)(param_elf_header[1] + 0x28))();\n      if (current_reloc_value4 < current_reloc_value3) {\n        current_reloc_value3 = current_reloc_value4;\n      }\nLAB_00116631:\n      if (gnu_build_notes[2] == 0x100) {\n        if (current_reloc_value3 == 0) {\n          current_reloc_value3 = local_88;\n        }\n        current_reloc_value2 = *gnu_build_notes;\n        gnu_build_notes[7] = current_reloc_value3;\n        elf_header_value4 = current_reloc_value4;\n        local_88 = current_reloc_value3;\n        if (current_reloc_value4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (current_reloc_value3 == 0) {\n          current_reloc_value3 = local_70;\n        }\n        current_reloc_value2 = *gnu_build_notes;\n        gnu_build_notes[7] = current_reloc_value3;\n        current_reloc_value1 = current_reloc_value4;\n        local_70 = current_reloc_value3;\n        if (current_reloc_value4 == 0) goto LAB_0011669e;\n      }\n    }\n    gnu_build_notes[8] = current_reloc_value4;\n    if (*(char *)((gnu_build_notes[3] - 1) + current_reloc_value2) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    gnu_build_notes = gnu_build_notes + 9;\n    note_description_size = current_reloc_value1;\n    note_name_size = elf_header_value4;\n    temp_ptr = temp_ptr + result;\n  }\n  if (remaining_size == 0) {\n    elf_header_value = *param_elf_header;\n    program_header_value = *param_program_header;\n    error_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(error_message,elf_header_value,program_header_value);\n    number_of_notes = ((long)gnu_build_notes - (long)local_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_60,number_of_notes,0x48,compare_gnu_build_notes);\n    for (current_note = local_60; current_note < gnu_build_notes; current_note = current_note + 9) {\n      remaining_size = current_note[2];\n      if (remaining_size != 0) {\n        note_description_size = current_note[7];\n        note_name_size = current_note[8];\n        ptr2 = current_note;\n        iteration_counter = 0;\n        if (note_description_size == note_name_size) {\n          current_note[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr_reloc_upper_bound = ptr2;\n              ptr2 = ptr_reloc_upper_bound + -9;\n              if (ptr2 < local_60) goto LAB_001167f5;\n              current_reloc_value2 = ptr_reloc_upper_bound[-7];\n            } while (current_reloc_value2 == 0);\n            if ((*ptr2 != *current_note) ||\n               (reloc_canonicalization_result = memcmp((void *)ptr_reloc_upper_bound[-6],(void *)current_note[3],*current_note), reloc_canonicalization_result != 0)) break;\n            current_reloc_value4 = ptr_reloc_upper_bound[-2];\n            current_reloc_value3 = ptr_reloc_upper_bound[-1];\n            if (note_description_size == current_reloc_value4) {\n              if (note_name_size == current_reloc_value3) {\n                current_note[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (note_name_size <= current_reloc_value3) {\n                current_note[2] = 0;\n                break;\n              }\n              if (current_reloc_value3 < note_description_size) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < current_reloc_value3) || (note_description_size <= (current_reloc_value3 + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_and_process_gnu_build_notes_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (current_reloc_value2 == 0x101)) {\n                if (current_reloc_value3 <= note_name_size) {\n                  current_reloc_value3 = note_name_size;\n                }\n                if (current_reloc_value4 < note_description_size) {\n                  note_description_size = current_reloc_value4;\n                }\n                ptr_reloc_upper_bound[-1] = current_reloc_value3;\n                ptr_reloc_upper_bound[-2] = note_description_size;\n                current_note[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (current_reloc_value4 <= note_description_size) goto LAB_001167a6;\n              if (current_reloc_value3 < note_description_size) goto LAB_0010852c;\n              if (note_name_size < note_description_size) {\n                if ((0xfffffffffffffff0 < note_name_size) || (current_reloc_value4 <= (note_name_size + 0xf & 0xfffffffffffffff0))\n                   ) goto extract_and_process_gnu_build_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (note_name_size != current_reloc_value3) goto LAB_001167b8;\n            }\nextract_and_process_gnu_build_notes_00116852:\n            bVar4 = iteration_counter < 0x11;\n            iteration_counter = iteration_counter + 1;\n          } while (bVar4);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_60,number_of_notes,0x48,sort_gnu_build_notes);\n    note_buffer = (undefined *)xmalloc(param_note_size * 2);\n    uStack_80 = 0;\n    local_70 = 0;\n    temp_ptr = note_buffer;\n    for (current_note = local_60; current_note < gnu_build_notes; current_note = current_note + 9) {\n      if (current_note[2] != 0) {\n        note_name = temp_ptr + 0xc;\n        if ((current_note[7] == local_70) && (current_note[8] == uStack_80)) {\n          (**(code **)(param_elf_header[1] + 0x50))(*current_note,temp_ptr);\n          (**(code **)(param_elf_header[1] + 0x50))(0,temp_ptr + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(current_note[2],temp_ptr + 8);\n          note_description_size = current_note[6];\n          remaining_size = *current_note;\n          temp_ptr = (undefined *)current_note[3];\n          pelf_header_value0 = note_name;\n          for (note_name_size = remaining_size; note_name_size != 0; note_name_size = note_name_size - 1) {\n            *pelf_header_value0 = *temp_ptr;\n            temp_ptr = temp_ptr + (ulong)bVar26 * -2 + 1;\n            pelf_header_value0 = pelf_header_value0 + (ulong)bVar26 * -2 + 1;\n          }\n          if (remaining_size < note_description_size) {\n            for (length = note_description_size - remaining_size; length != 0; length = length + -1) {\n              *pelf_header_value0 = 0;\n              pelf_header_value0 = pelf_header_value0 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          temp_ptr = note_name + note_description_size;\n        }\n        else {\n          (**(code **)(param_elf_header[1] + 0x50))();\n          if (*(int *)(param_elf_header[1] + 8) == 5) {\n            cVar19 = (*(char *)(param_elf_header[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar19 = '\\b';\n          }\n          (**(code **)(param_elf_header[1] + 0x50))(cVar19,temp_ptr + 4);\n          (**(code **)(param_elf_header[1] + 0x50))(current_note[2],temp_ptr + 8);\n          remaining_size = *current_note;\n          temp_ptr = (undefined *)current_note[3];\n          pelf_header_value0 = note_name;\n          for (note_description_size = remaining_size; note_description_size != 0; note_description_size = note_description_size - 1) {\n            *pelf_header_value0 = *temp_ptr;\n            temp_ptr = temp_ptr + (ulong)bVar26 * -2 + 1;\n            pelf_header_value0 = pelf_header_value0 + (ulong)bVar26 * -2 + 1;\n          }\n          note_description_size = current_note[6];\n          if (remaining_size < note_description_size) {\n            for (length = note_description_size - remaining_size; length != 0; length = length + -1) {\n              *pelf_header_value0 = 0;\n              pelf_header_value0 = pelf_header_value0 + (ulong)bVar26 * -2 + 1;\n            }\n          }\n          length = param_elf_header[1];\n          note_name = note_name + note_description_size;\n          temp_ptr = note_name + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(param_elf_header[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(current_note[7],note_name);\n            (**(code **)(param_elf_header[1] + 0x38))(current_note[8],temp_ptr);\n            temp_ptr = note_name + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(current_note[7],note_name);\n            (**(code **)(param_elf_header[1] + 0x50))(current_note[8],note_name + 4);\n          }\n          local_70 = current_note[7];\n          uStack_80 = current_note[8];\n        }\n      }\n    }\n    note_description_size = (long)temp_ptr - (long)note_buffer;\n    remaining_size = note_description_size;\n    temp_ptr = note_buffer;\n    local_68 = param_note_size;\n    if (note_description_size < param_note_size) {\n      for (; local_68 = note_description_size, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *param_note_data = *temp_ptr;\n        temp_ptr = temp_ptr + (ulong)bVar26 * -2 + 1;\n        param_note_data = param_note_data + (ulong)bVar26 * -2 + 1;\n      }\n    }\n    free(note_buffer);\n  }\n  else {\n    length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (length != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param_elf_header,param_program_header,length);\n      process_status = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_60);\n  return local_68;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_gnu_build_attribute_notes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "output_file",
                "param_2": "exit_code",
                "uVar1": "program_name",
                "pcVar2": "translation"
            },
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 program_name;\n  char *translation;\n  \n  program_name = program_name;\n  translation = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,translation,program_name);\n  translation = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,translation);\n  list_supported_targets(program_name,output_file);\n  if (exit_code == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exit_code);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_and_compare_strings_00108c86",
                "param_1": "input_ptr",
                "cVar1": "is_lto_prefix",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "new_string",
                "lVar5": "input_offset",
                "__s": "input_string",
                "__s1": "architecture_string",
                "puVar6": "new_string_ptr",
                "uVar7": "return_value",
                "bVar8": "use_byte_offset"
            },
            "code": "\nundefined8 extract_and_compare_strings_00108c86(long *input_ptr)\n\n{\n  char is_lto_prefix;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *new_string;\n  long input_offset;\n  char *input_string;\n  char *architecture_string;\n  undefined2 *new_string_ptr;\n  undefined8 return_value;\n  byte use_byte_offset;\n  \n  use_byte_offset = 0;\n  input_offset = *input_ptr;\n  input_string = (char *)(input_offset + 4);\n  is_lto_prefix = startswith_lto_priv_0_lto_priv_0(input_string,&DAT_0011b73b);\n  if (is_lto_prefix == '\\0') {\n    is_lto_prefix = startswith_lto_priv_0_lto_priv_0(input_string,\"bsdrv-\");\n    if (is_lto_prefix == '\\0') {\n      is_lto_prefix = startswith_lto_priv_0_lto_priv_0(input_string,\"rtdrv-\");\n      if (is_lto_prefix == '\\0') {\n        return 0xffffffff;\n      }\n      input_string = (char *)(input_offset + 6);\n      return_value = 0xc;\n    }\n    else {\n      input_string = (char *)(input_offset + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(input_string);\n  new_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture_string = input_string + 4;\n  new_string_ptr = new_string;\n  for (input_offset = string_length + 1; input_offset != 0; input_offset = input_offset + -1) {\n    *(char *)new_string_ptr = *input_string;\n    input_string = input_string + (ulong)use_byte_offset * -2 + 1;\n    new_string_ptr = (undefined2 *)((long)new_string_ptr + (ulong)use_byte_offset * -2 + 1);\n  }\n  *(undefined *)(new_string + 1) = 0x69;\n  *new_string = 0x6570;\n  comparison_result = strcmp(architecture_string,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_string + 7) = 0x36;\n    *(undefined2 *)((long)new_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(architecture_string,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(architecture_string,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *input_ptr = (long)new_string;\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_and_compare_strings_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "messageFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *messageFormat;\n  \n  messageFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,messageFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_args",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_and_return_value_001053d5",
                "unaff_R12": "fileDescriptor",
                "unaff_R14": "bfdPointer"
            },
            "code": "\nundefined4 closeAndReturnValue_001053d5(void)\n\n{\n  long fileDescriptor;\n  undefined8 *bfdPointer;\n  \n  bfd_nonfatal(*bfdPointer);\n  *(undefined4 *)(fileDescriptor + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(fileDescriptor + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_and_return_value_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_flags_and_set_values_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "additionalFlags",
                "unaff_R14": "memoryAddress"
            },
            "code": "\nvoid checkFlagsAndSetValues_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint additionalFlags;\n  long memoryAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((additionalFlags & 0x10) == 0)) && ((additionalFlags & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((additionalFlags & 0x40) == 0)) && ((additionalFlags & 0x60) != 0x60)) {\n      *(uint *)(memoryAddress + 0x14) = flags | additionalFlags;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "check_flags_and_set_values_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "stab_class_method_var",
                "stab_variable.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "stab_struct_field.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "inputData",
                "param_2": "inputLength",
                "puVar1": "outputData",
                "lVar2": "lengthCounter",
                "puVar3": "outputIterator",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *inputData,int inputLength)\n\n{\n  undefined *outputData;\n  long lengthCounter;\n  undefined *outputIterator;\n  byte offset;\n  \n  offset = 0;\n  outputData = (undefined *)xmalloc((long)(inputLength + 1));\n  outputIterator = outputData;\n  for (lengthCounter = (long)inputLength; lengthCounter != 0; lengthCounter = lengthCounter + -1) {\n    *outputIterator = *inputData;\n    inputData = inputData + (ulong)offset * -2 + 1;\n    outputIterator = outputIterator + (ulong)offset * -2 + 1;\n  }\n  outputData[inputLength] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "translated_error_message",
                "plVar2": "slot_ptr",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining_slots",
                "bVar6": "flag",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 translated_error_message;\n  long *slot_ptr;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining_slots;\n  byte flag;\n  undefined return_value [16];\n  \n  flag = 0;\n  remaining_slots = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining_slots; remaining_slots = remaining_slots - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        slot_ptr = (long *)xmalloc(0x88);\n        *slot_ptr = slot_ptr;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)slot_ptr = 0;\n          slot_ptr = (long *)((long)slot_ptr + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      slot_ptr = (long *)xmalloc(0x88);\n      *slot_ptr = slot_ptr;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)slot_ptr = 0;\n        slot_ptr = (long *)((long)slot_ptr + (ulong)flag * -8 + 4);\n      }\n    }\n    return_value._8_8_ = param4;\n    return_value._0_8_ = *slot_ptr + slot_index + slot_offset + 1;\n    return return_value;\n  }\n  translated_error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(translated_error_message,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "create_memory_block_00112894",
                "param_1": "blockAddress",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "puVar2": "currentBlock",
                "lVar3": "loopCounter",
                "bVar4": "byteCounter"
            },
            "code": "\nundefined8 *\ncreateMemoryBlock_00112894(undefined8 blockAddress,undefined param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *currentBlock;\n  long loopCounter;\n  byte byteCounter;\n  \n  byteCounter = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  currentBlock = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)currentBlock = 0;\n    currentBlock = (undefined8 *)((long)currentBlock + (ulong)byteCounter * -8 + 4);\n  }\n  *memoryBlock = blockAddress;\n  *(undefined *)(memoryBlock + 1) = param2;\n  memoryBlock[2] = param3;\n  memoryBlock[3] = param4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  currentBlock = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = currentBlock;\n  *currentBlock = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "create_memory_block_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_pointer_00109b2f",
                "param_1": "input",
                "__ptr": "pointer",
                "puVar1": "extractedPointer"
            },
            "code": "\nundefined8 * extractAndFreePointer_00109b2f(long input)\n\n{\n  undefined8 *pointer;\n  undefined8 *extractedPointer;\n  \n  pointer = *(undefined8 **)(input + 0x60);\n  if (pointer != (undefined8 *)0x0) {\n    extractedPointer = (undefined8 *)pointer[1];\n    *(undefined8 *)(input + 0x60) = *pointer;\n    free(pointer);\n    return extractedPointer;\n  }\n  return pointer;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "stab_class_baseclass.lto_priv.0",
                "stab_modify_type",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_free_pointer_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinition_00108d9a",
                "param_1": "errorMessage",
                "param_2": "symbolName",
                "param_3": "targetSymbol",
                "param_4": "returnValue",
                "ppcVar1": "symbolTableEntry",
                "pcVar2": "symbolNameCopy",
                "lVar3": "symbolFound",
                "uVar4": "translationTable",
                "plVar5": "slot",
                "redefine_specific_htab": "symbolTable",
                "redefine_specific_reverse_htab": "reverseSymbolTable"
            },
            "code": "\nundefined8 checkRedefinition_00108d9a(undefined8 errorMessage,char *symbolName,char *targetSymbol,undefined8 returnValue)\n\n{\n  char **symbolTableEntry;\n  char *symbolNameCopy;\n  long symbolFound;\n  undefined8 translationTable;\n  long *slot;\n  \n  symbolTableEntry = (char **)xmalloc(0x10);\n  symbolNameCopy = strdup(symbolName);\n  *symbolTableEntry = symbolNameCopy;\n  symbolNameCopy = strdup(targetSymbol);\n  translationTable = symbolTable;\n  symbolTableEntry[1] = symbolNameCopy;\n  symbolFound = htab_find(translationTable,symbolTableEntry);\n  if (symbolFound != 0) {\n    translationTable = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(translationTable,errorMessage,symbolName);\n  }\n  symbolFound = htab_find(reverseSymbolTable,targetSymbol);\n  if (symbolFound != 0) {\n    translationTable = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(translationTable,errorMessage,targetSymbol);\n  }\n  slot = (long *)htab_find_slot(symbolTable,symbolTableEntry,1);\n  translationTable = reverseSymbolTable;\n  *slot = (long)symbolTableEntry;\n  symbolNameCopy = symbolTableEntry[1];\n  symbolTableEntry = (char **)htab_find_slot(translationTable,symbolNameCopy,1);\n  *symbolTableEntry = symbolNameCopy;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "htab_find_slot",
                "htab_find",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "symbol",
                "__s_00": "newSymbol",
                "__s_01": "formattedSymbol",
                "lVar1": "symbolCount",
                "uVar2": "result",
                "sVar3": "param2Length",
                "sVar4": "symbolLength",
                "pcVar5": "symbolType",
                "uVar6": "symbolFlag"
            },
            "code": "\nundefined4 writeSymbol_0010e9a0(long param1,char *param2,undefined4 param3,undefined8 param4)\n\n{\n  long symbolCount;\n  undefined4 result;\n  byte *symbol;\n  byte *newSymbol;\n  size_t param2Length;\n  size_t symbolLength;\n  char *formattedSymbol;\n  char *symbolType;\n  undefined8 symbolFlag;\n  \n  symbol = (byte *)stab_pop_type();\n  switch(param3) {\n  case 1:\n    symbolType = \"G\";\n    symbolFlag = 0x20;\n    break;\n  case 2:\n    symbolType = \"S\";\n    symbolFlag = 0x26;\n    break;\n  case 3:\n    symbolType = \"V\";\n    symbolFlag = 0x26;\n    break;\n  case 4:\n    symbolType = \"\";\n    symbolFlag = 0x80;\n    if (((&_sch_istable)[(ulong)*symbol * 2] & 4) == 0) {\n      symbolCount = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = symbolCount + 1;\n      param2Length = strlen((char *)symbol);\n      newSymbol = (byte *)xmalloc(param2Length + 0x14);\n      sprintf((char *)newSymbol,\"%ld=%s\",symbolCount,symbol);\n      free(symbol);\n      symbol = newSymbol;\n    }\n    break;\n  case 5:\n    symbolType = \"r\";\n    symbolFlag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  param2Length = strlen(param2);\n  symbolLength = strlen((char *)symbol);\n  formattedSymbol = (char *)xmalloc(param2Length + 3 + symbolLength);\n  sprintf(formattedSymbol,\"%s:%s%s\",param2,symbolType,symbol);\n  free(symbol);\n  result = stab_write_symbol_lto_priv_0(param1,symbolFlag,0,param4,formattedSymbol);\n  if ((char)result != '\\0') {\n    free(formattedSymbol);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_error_0010827b",
                "unaff_RBX": "errorSectionPtr",
                "uVar1": "errorSection",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleError_0010827b(void)\n\n{\n  undefined8 errorSection;\n  undefined8 errorMessage;\n  undefined8 *errorSectionPtr;\n  \n  errorSection = *errorSectionPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,errorSection);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "show_bad_number_error_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedMessage",
                "fatal": "terminateProgram"
            },
            "code": "\nvoid showBadNumberError_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getLocalizedMessage(0,\"%s: bad number: %s\",5);\n                    \n  terminateProgram(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "show_bad_number_error_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "stab_context",
                "bfd_nonfatal_message",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "compareString",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTable(0x10,hashString,compareString,0,allocateMemory,releaseMemory);\n  return;\n}\n\n",
            "called": [
                "free",
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "set_times.cold",
                "simple_copy.cold",
                "smart_rename.cold",
                "main",
                "parse_number",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "simple_copy",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "entry_processor_00116aa0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackArray"
            },
            "code": "\nvoid processEntry entryProcessor_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackArray [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackArray);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry_processor_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "arg1",
                "unaff_RBP": "arg2",
                "unaff_R12": "arg3",
                "unaff_R14B": "arg4",
                "unaff_R15": "arg5",
                "lVar4": "errorMsg",
                "lVar1": "groupSig",
                "lVar2": "var1",
                "lVar5": "var2",
                "cVar3": "result"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long groupSig;\n  long var1;\n  char result;\n  long errorMsg;\n  long var2;\n  long arg1;\n  long arg2;\n  long arg3;\n  char arg4;\n  long arg5;\n  \n  errorMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(arg5 + 0xb4) = *(undefined4 *)(arg1 + 0xb4);\n  *(byte *)(arg5 + 0x28) =\n       *(byte *)(arg5 + 0x28) & 0xcf | *(byte *)(arg1 + 0x28) & 0x30;\n  *(long *)(arg1 + 0x60) = arg5;\n  *(undefined8 *)(arg1 + 0x58) = 0;\n  if ((*(byte *)(arg1 + 0x27) & 2) != 0) {\n    groupSig = *(long *)(arg1 + 0xd0);\n    var2 = group_signature_isra_0(groupSig,*(undefined8 *)(arg1 + 0xe0));\n    if ((var2 != 0) &&\n       (var1 = *(long *)(arg3 + 8), *(uint *)(var2 + 0x18) = *(uint *)(var2 + 0x18) | 0x20,\n       *(int *)(var1 + 8) == 5)) {\n      *(long *)(groupSig + 0xb0) = var2;\n      result = (**(code **)(*(long *)(arg2 + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(arg2 + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (arg4 != '\\0') {\n    *(undefined4 *)(*(long *)(arg5 + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "dcgettext",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "validate_and_get_file_00109022",
                "param_1": "file_list_ptr",
                "param_2": "file_index_ptr",
                "param_3": "param_ptr",
                "param_4": "output_ptr",
                "uVar1": "file_index",
                "pcVar2": "error_message",
                "plVar3": "file_ptr",
                "lVar4": "loop_counter",
                "uVar5": "num_files",
                "pplVar6": "file_list",
                "bVar7": "byte_value",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16] validate_and_get_file_00109022(long file_list_ptr,uint *file_index_ptr,undefined8 param_ptr,undefined8 output_ptr)\n\n{\n  uint file_index;\n  char *error_message;\n  long *file_ptr;\n  long loop_counter;\n  uint num_files;\n  long **file_list;\n  byte byte_value;\n  undefined return_value [16];\n  \n  byte_value = 0;\n  num_files = *file_index_ptr;\n  file_index = file_index_ptr[1];\n  if (((int)num_files < 0) || (*(uint *)(file_list_ptr + 0x80) <= num_files)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)num_files);\n  }\n  else {\n    if (-1 < (int)file_index) {\n      file_list = (long **)(*(long *)(file_list_ptr + 0x88) + (long)(int)num_files * 8);\n      for (num_files = file_index; 0xf < (int)num_files; num_files = num_files - 0x10) {\n        if (*file_list == (long *)0x0) {\n          file_ptr = (long *)xmalloc(0x88);\n          *file_list = file_ptr;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)file_ptr = 0;\n            file_ptr = (long *)((long)file_ptr + (ulong)byte_value * -8 + 4);\n          }\n        }\n        file_list = (long **)*file_list;\n      }\n      if (*file_list == (long *)0x0) {\n        file_ptr = (long *)xmalloc(0x88);\n        *file_list = file_ptr;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)file_ptr = 0;\n          file_ptr = (long *)((long)file_ptr + (ulong)byte_value * -8 + 4);\n        }\n      }\n      file_ptr = *file_list + (long)(int)((file_index >> 4) * -0x10 + file_index) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)file_index);\n  }\n  file_ptr = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = output_ptr;\n  return_value._0_8_ = file_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "parse_stab_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "validate_and_get_file_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "filePointer",
                "param_2": "variablePointer",
                "param_3": "namespaceOffset",
                "param_4": "variableType",
                "param_5": "param5",
                "param_6": "param6",
                "auVar1": "returnValue",
                "auVar9": "result",
                "piVar3": "dynamicArray",
                "piVar7": "dynamicArrayIterator",
                "cVar4": "shouldAddToNamespace",
                "lVar5": "loopCounter",
                "lVar6": "fileOffset",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariable_0010c05d(long filePointer,long variablePointer,ulong namespaceOffset,int variableType,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined returnValue [16];\n  undefined8 uVar2;\n  int *dynamicArray;\n  char shouldAddToNamespace;\n  long loopCounter;\n  long fileOffset;\n  int *dynamicArrayIterator;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  if (variablePointer == 0) {\n    returnValue._8_8_ = 0;\n    returnValue._0_8_ = namespaceOffset;\n    return returnValue << 0x40;\n  }\n  if (namespaceOffset != 0) {\n    if ((*(long *)(filePointer + 8) == 0) || (fileOffset = *(long *)(filePointer + 0x10), fileOffset == 0)) {\n      uVar2 = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",uVar2);\n    }\n    else {\n      if (variableType - 1U < 2) {\n        fileOffset = fileOffset + 0x10;\n        shouldAddToNamespace = (variableType == 1) + '\\x01';\n      }\n      else if (*(long *)(filePointer + 0x20) == 0) {\n        fileOffset = fileOffset + 0x10;\n        shouldAddToNamespace = '\\0';\n      }\n      else {\n        fileOffset = *(long *)(filePointer + 0x20) + 0x28;\n        shouldAddToNamespace = '\\0';\n      }\n      fileOffset = debug_add_to_namespace_constprop_0(fileOffset,variablePointer,2,shouldAddToNamespace);\n      if (fileOffset != 0) {\n        dynamicArray = (int *)xmalloc(0x18);\n        dynamicArrayIterator = dynamicArray + 1;\n        for (loopCounter = 5; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *dynamicArrayIterator = 0;\n          dynamicArrayIterator = dynamicArrayIterator + (ulong)flag * -2 + 1;\n        }\n        *dynamicArray = variableType;\n        uVar2 = 1;\n        *(ulong *)(dynamicArray + 2) = namespaceOffset;\n        *(undefined8 *)(dynamicArray + 4) = param5;\n        *(int **)(fileOffset + 0x20) = dynamicArray;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  uVar2 = 0;\nLAB_0010c12e:\n  result._8_8_ = param6;\n  result._0_8_ = uVar2;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "stab_emit_pending_vars"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "push_defined_type_or_string_00109d97",
                "param_1": "functionParameter",
                "lVar1": "localVariable1",
                "local_40": "localArray"
            },
            "code": "\nvoid pushDefinedTypeOrString_00109d97(long functionParameter)\n\n{\n  long localVariable1;\n  char localArray [40];\n  \n  if (*(long *)(functionParameter + 0x70) != 0) {\n    stab_push_defined_type(functionParameter,*(long *)(functionParameter + 0x70),0);\n    return;\n  }\n  localVariable1 = *(long *)(functionParameter + 0x68);\n  *(long *)(functionParameter + 0x68) = localVariable1 + 1;\n  sprintf(localArray,\"%ld=%ld\",localVariable1,localVariable1);\n  stab_push_string(functionParameter,localArray,localVariable1,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_or_string_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "main",
                "create_symbol_htab",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = extract_and_process_gnu_build_notes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = extract_and_process_gnu_build_notes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = extract_and_process_gnu_build_notes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto extract_and_process_gnu_build_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto extract_and_process_gnu_build_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nextract_and_process_gnu_build_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_set_error",
                "dcgettext",
                "non_fatal",
                "qsort",
                "compare_gnu_build_notes",
                "bfd_nonfatal_message",
                "merge_gnu_build_notes.cold",
                "FUN_00116490"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_stab_class_method_variable_0010add5",
                "stab_class_method_var": "initialize_variables"
            },
            "code": "\nvoid initialize_stab_class_method_variable_0010add5(void)\n\n{\n  initialize_variables();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_variable_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_00113e17",
                "debug_make_type_constprop_0": "setDebugTypeConstpropZero"
            },
            "code": "\nvoid initializeDebug_00113e17(void)\n\n{\n  setDebugTypeConstpropZero(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "binaryBaseAddress",
                "param_2": "inputString",
                "param_3": "parameter3",
                "param_4": "parameter4",
                "param_5": "parameter5",
                "uVar1": "tempVariable1",
                "puVar2": "allocatedMemory",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long binaryBaseAddress,undefined8 inputString,undefined8 parameter3,undefined parameter4,\n                      undefined4 parameter5)\n\n{\n  undefined8 tempVariable1;\n  undefined8 *allocatedMemory;\n  undefined8 duplicatedString;\n  \n  allocatedMemory = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(inputString);\n  allocatedMemory[2] = parameter3;\n  *(undefined (*) [16])(allocatedMemory + 4) = ZEXT816(0);\n  *(undefined (*) [16])(allocatedMemory + 6) = ZEXT816(0);\n  tempVariable1 = *(undefined8 *)(binaryBaseAddress + 0x60);\n  *(undefined *)((long)allocatedMemory + 0x1c) = parameter4;\n  *(undefined4 *)(allocatedMemory + 3) = parameter5;\n  *(undefined8 **)(binaryBaseAddress + 0x60) = allocatedMemory;\n  *allocatedMemory = tempVariable1;\n  allocatedMemory[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_and_convert_string_00109a32",
                "param_1": "string_ptr",
                "param_2": "error_flag_ptr",
                "param_3": "string_end",
                "param_4": "reserved_1",
                "param_5": "reserved_2",
                "__nptr": "string",
                "piVar1": "errno_ptr",
                "uVar2": "converted_value",
                "uVar3": "error_msg",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nparse_and_convert_string_00109a32(char **string_ptr,undefined *error_flag_ptr,char *string_end,undefined8 reserved_1,undefined8 reserved_2)\n\n{\n  char *string;\n  int *errno_ptr;\n  ulong converted_value;\n  undefined8 error_msg;\n  undefined result [16];\n  \n  if (error_flag_ptr != (undefined *)0x0) {\n    *error_flag_ptr = 0;\n  }\n  string = *string_ptr;\n  if ((string < string_end) && (*string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    converted_value = strtoul(string,string_ptr,0);\n    if ((converted_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag_ptr == (undefined *)0x0) {\n      error_msg = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(string,error_msg);\n    }\n    else {\n      *error_flag_ptr = 1;\n    }\n  }\n  converted_value = 0;\nLAB_00109aa9:\n  result._8_8_ = reserved_2;\n  result._0_8_ = converted_value;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strtoul",
                "warn_stab",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "parse_and_convert_string_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "debug_tag_type_0010c6be",
                "param_1": "file_ptr",
                "param_2": "tag_name",
                "param_3": "tag_ptr",
                "iVar1": "comparison_result",
                "uVar2": "translated_string",
                "piVar3": "new_tag_ptr",
                "pauVar4": "new_tag_info",
                "lVar5": "file_offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * debug_tag_type_0010c6be(long file_ptr,char *tag_name,int *tag_ptr)\n\n{\n  int comparison_result;\n  undefined8 translated_string;\n  int *new_tag_ptr;\n  undefined (*new_tag_info) [16];\n  long file_offset;\n  char *error_message;\n  \n  if ((tag_name != (char *)0x0) && (tag_ptr != (int *)0x0)) {\n    if (*(long *)(file_ptr + 0x10) == 0) {\n      error_message = \"debug_tag_type_0010c6be: no current file\";\n    }\n    else {\n      if (*tag_ptr != 0x17) {\n        new_tag_ptr = (int *)debug_make_type_constprop_0(0x17,0);\n        if (new_tag_ptr == (int *)0x0) {\n          return (int *)0x0;\n        }\n        new_tag_info = (undefined (*) [16])xmalloc(0x10);\n        file_offset = *(long *)(file_ptr + 0x10);\n        *new_tag_info = ZEXT816(0);\n        *(int **)(*new_tag_info + 8) = tag_ptr;\n        *(undefined (**) [16])(new_tag_ptr + 4) = new_tag_info;\n        file_offset = debug_add_to_namespace_constprop_0(file_offset + 0x10,tag_name,1,3);\n        if (file_offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(file_offset + 0x20) = new_tag_ptr;\n        *(long *)*new_tag_info = file_offset;\n        return new_tag_ptr;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(tag_ptr + 4) + 8),tag_name);\n      error_message = \"debug_tag_type_0010c6be: extra tag attempted\";\n      if (comparison_result == 0) {\n        return tag_ptr;\n      }\n    }\n    translated_string = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",translated_string);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "debug_tag_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "result",
                "__ptr": "allocated_memory",
                "__format": "error_message",
                "lVar1": "demangle_result",
                "uVar2": "num_elements",
                "uVar3": "current_capacity",
                "uVar4": "new_capacity",
                "local_39": "demangle_buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *result)\n\n{\n  void *allocated_memory;\n  char *error_message;\n  long demangle_result;\n  ulong num_elements;\n  ulong current_capacity;\n  uint new_capacity;\n  char demangle_buffer [9];\n  \n  current_capacity = 10;\n  num_elements = 0;\n  allocated_memory = (void *)xmalloc(0x50);\n  *result = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(allocated_memory);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangle_result = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,demangle_buffer);\n    if (demangle_result == 0) {\n      if (demangle_buffer[0] == '\\0') {\n        free(allocated_memory);\n        return (void *)0x0;\n      }\n      *result = 1;\n    }\n    else {\n      new_capacity = (int)num_elements + 1;\n      if ((uint)current_capacity <= new_capacity) {\n        current_capacity = (ulong)((uint)current_capacity + 10);\n        allocated_memory = (void *)xrealloc(allocated_memory,current_capacity << 3);\n      }\n      *(long *)((long)allocated_memory + num_elements * 8) = demangle_result;\n      num_elements = (ulong)new_capacity;\n    }\n  }\n  *(undefined8 *)((long)allocated_memory + num_elements * 8) = 0;\n  return allocated_memory;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_0011a2e0",
                "param_1": "binary_header",
                "uVar1": "section_data",
                "uVar2": "error_message",
                "lVar3": "section_header",
                "lVar4": "section_address"
            },
            "code": "\nlong extract_section_0011a2e0(long binary_header,long param_2)\n\n{\n  undefined8 section_data;\n  undefined8 error_message;\n  long section_header;\n  long section_address;\n  \n  section_header = (**(code **)(*(long *)(param_2 + 8) + 0x208))(param_2);\n  section_address = *(long *)(binary_header + 0x20);\n  *(undefined8 *)(section_header + 8) = *(undefined8 *)(binary_header + 8);\n  *(undefined8 *)(section_header + 0x10) = *(undefined8 *)(binary_header + 0x10);\n  *(undefined4 *)(section_header + 0x18) = *(undefined4 *)(binary_header + 0x18);\n  if (section_address == 0) {\n    section_address = 0x128598;\n  }\n  else {\n    section_address = bfd_get_section_by_name(param_2);\n    if (section_address == 0) {\n      section_data = *(undefined8 *)(binary_header + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(error_message,section_data);\n    }\n  }\n  *(long *)(section_header + 0x20) = section_address;\n  return section_header;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_lto_private_symbol_0010e8a9",
                "param_1": "symbolName",
                "param_2": "symbolAddress",
                "param_3": "data",
                "uVar1": "result",
                "sVar2": "dataLength",
                "__s": "formattedData"
            },
            "code": "\nundefined4 writeLtoPrivateSymbol_0010e8a9(undefined8 symbolName,undefined8 symbolAddress,char *data)\n\n{\n  undefined4 result;\n  size_t dataLength;\n  char *formattedData;\n  \n  dataLength = strlen(data);\n  formattedData = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",symbolName,data);\n  result = stab_write_symbol_lto_priv_0(symbolAddress,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_lto_private_symbol_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flags_00104ad6",
                "unaff_RBP": "sectionFlag",
                "__s": "sectionString",
                "sVar4": "length",
                "iVar5": "strLength",
                "unaff_R14D": "flags",
                "unaff_R15": "searchString",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress",
                "iVar1": "comparisonResult",
                "pcVar3": "commaPosition",
                "uVar2": "localizedMessage"
            },
            "code": "\nundefined  [16] findSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 localizedMessage;\n  char *commaPosition;\n  char *sectionFlag;\n  char *sectionString;\n  size_t length;\n  int strLength;\n  uint flags;\n  char *searchString;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    flags = flags | 0x2000;\n    sectionString = sectionFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionString == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = flags;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionString,0x2c);\n              if (commaPosition == (char *)0x0) {\n                length = strlen(sectionString);\n                strLength = (int)length;\n                sectionFlag = (char *)0x0;\n              }\n              else {\n                sectionFlag = commaPosition + 1;\n                strLength = (int)commaPosition - (int)sectionString;\n              }\n              length = (size_t)strLength;\n              comparisonResult = strncasecmp(searchString,sectionString,length);\n              if (comparisonResult != 0) break;\n              flags = flags | 1;\n              sectionString = sectionFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionString,length);\n            if (comparisonResult != 0) break;\n            flags = flags | 2;\n            sectionString = sectionFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionString,length);\n          if (comparisonResult != 0) break;\n          flags = flags | 0x200;\n          sectionString = sectionFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionString,length);\n        if (comparisonResult != 0) break;\n        flags = flags | 8;\n        sectionString = sectionFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionString,length);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionString,length);\n      if (comparisonResult == 0) {\n        flags = flags | 0x10;\n        sectionString = sectionFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionString,length);\n        if (comparisonResult == 0) {\n          flags = flags | 0x20;\n          sectionString = sectionFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionString,length);\n          if (comparisonResult == 0) {\n            flags = flags | 0x40;\n            sectionString = sectionFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionString,length);\n            if (comparisonResult == 0) {\n              flags = flags | 0x8000;\n              sectionString = sectionFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionString,length);\n              if (comparisonResult == 0) {\n                flags = flags | 0x8000000;\n                sectionString = sectionFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionString,length);\n                if (comparisonResult == 0) {\n                  flags = flags | 0x100;\n                  sectionString = sectionFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionString,length);\n                  if (comparisonResult == 0) {\n                    flags = flags | 0x800000;\n                    sectionString = sectionFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionString,length);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(strLength + 1));\n                      strncpy(commaPosition,sectionString,length);\n                      commaPosition[length] = '\\0';\n                      localizedMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(localizedMessage,commaPosition);\n                      localizedMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(localizedMessage,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    flags = flags | 0x1000000;\n                    sectionString = sectionFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "parse_flags.cold",
                "strlen",
                "strchr",
                "strncpy",
                "dcgettext",
                "non_fatal",
                "strncasecmp",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "find_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "resultArray",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined resultArray [16];\n  undefined8 returnAddress;\n  \n  resultArray._1_7_ = 0;\n  resultArray[0] = inputValue == 0x100;\n  resultArray._8_8_ = returnAddress;\n  return resultArray;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "arg_3",
                "param_4": "arg_4",
                "lVar1": "current_unit",
                "iVar2": "result",
                "uVar3": "error_message",
                "puVar4": "ptr_1",
                "lVar5": "ptr_2",
                "puVar6": "ptr_3"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 arg_3,undefined8 arg_4)\n\n{\n  long current_unit;\n  int result;\n  undefined8 error_message;\n  undefined8 *ptr_1;\n  long ptr_2;\n  undefined8 *ptr_3;\n  undefined auVar7 [16];\n  \n  current_unit = *(long *)(compilation_unit + 8);\n  if (current_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (ptr_2 = *(long *)(compilation_unit + 0x20); ptr_2 != 0; ptr_2 = *(long *)(ptr_2 + 8)) {\n      if (*(undefined8 **)(ptr_2 + 0x28) != (undefined8 *)0x0) {\n        for (ptr_1 = (undefined8 *)**(undefined8 **)(ptr_2 + 0x28); ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              result = strcmp((char *)ptr_1[1],type_name);\n              if (result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (ptr_3 = *(undefined8 **)(current_unit + 8); ptr_3 != (undefined8 *)0x0;\n        ptr_3 = (undefined8 *)*ptr_3) {\n      if ((undefined8 *)ptr_3[2] != (undefined8 *)0x0) {\n        for (ptr_1 = *(undefined8 **)(undefined8 *)ptr_3[2]; ptr_1 != (undefined8 *)0x0;\n            ptr_1 = (undefined8 *)*ptr_1) {\n          if (*(int *)((long)ptr_1 + 0x14) == 0) {\n            if (*(char *)ptr_1[1] == *type_name) {\n              result = strcmp((char *)ptr_1[1],type_name);\n              if (result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  auVar7._8_8_ = arg_4;\n  auVar7._0_8_ = error_message;\n  return auVar7;\nLAB_00109216:\n  error_message = ptr_1[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_dwo_section_0010829e",
                "unaff_EBP": "section_code",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_dwo_section_0010829e(void)\n\n{\n  undefined8 result;\n  int section_code;\n  \n  if (section_code == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((section_code != 4) && (section_code == 6)) {\n    result = invert_and_check_dwo_section_0010829e_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_dwo_section_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_file_info_00104943",
                "in_RAX": "inputString",
                "lVar3": "parsedInt",
                "sVar4": "stringLength",
                "pcVar5": "arch",
                "uVar6": "printableArch",
                "param_7": "numParams",
                "uStack000000000000000c": "indentation",
                "param_11": "fileInfoArray",
                "param_13": "fileDataArray",
                "iVar1": "defaultParamValue",
                "iVar2": "archComparisonResult",
                "iVar7": "currentArch",
                "iVar9": "currentParam",
                "unaff_R15D": "stackValue",
                "uVar10": "loopCounter",
                "uVar11": "archOffset"
            },
            "code": "\n\n\nvoid printFileInfo_00104943(void)\n\n{\n  int defaultParamValue;\n  int archComparisonResult;\n  char *inputString;\n  long parsedInt;\n  size_t stringLength;\n  char *arch;\n  undefined8 printableArch;\n  int currentArch;\n  long lVar8;\n  int currentParam;\n  uint stackValue;\n  ulong loopCounter;\n  uint archOffset;\n  int numParams;\n  uint indentation;\n  undefined8 fileInfoArray;\n  long fileDataArray;\n  \n  parsedInt = strtol(inputString,(char **)0x0,10);\n  defaultParamValue = (int)parsedInt;\n  currentParam = numParams;\n  indentation = stackValue;\n  if (defaultParamValue == 0) {\n    defaultParamValue = 0x50;\n  }\n  do {\n    numParams = currentParam;\n    if (fileInfoArray._4_4_ <= numParams) {\n      return;\n    }\n    lVar8 = (long)numParams;\n    currentArch = (defaultParamValue - indentation) + -1;\n    parsedInt = lVar8;\n    do {\n      currentParam = (int)parsedInt;\n      if (fileInfoArray._4_4_ <= currentParam) break;\n      stringLength = strlen(*(char **)(fileDataArray + parsedInt * 0x60));\n      parsedInt = parsedInt + 1;\n      currentArch = (currentArch - (int)stringLength) + -1;\n    } while (-1 < currentArch);\n    printf(\"\\n%*s\",(ulong)(indentation + 1),&DAT_0011b4a1);\n    for (parsedInt = lVar8 * 0x60; ((ulong)(uint)(currentParam - numParams) + lVar8) * 0x60 - parsedInt != 0;\n        parsedInt = parsedInt + 0x60) {\n      printf(\"%s \",*(undefined8 *)(fileDataArray + parsedInt));\n    }\n    currentArch = 2;\n    putc(10,_stdout);\n    do {\n      arch = (char *)bfd_printable_arch_mach(currentArch,0);\n      archComparisonResult = strcmp(arch,\"UNKNOWN!\");\n      if (archComparisonResult != 0) {\n        printableArch = bfd_printable_arch_mach(currentArch,0);\n        printf(\"%*s \",(ulong)indentation,printableArch);\n        archOffset = currentArch - 2;\n        parsedInt = lVar8 * 0x60;\n        archComparisonResult = numParams;\n        while (currentParam != archComparisonResult) {\n          arch = *(char **)(fileDataArray + parsedInt);\n          if (*(char *)((long)(char **)(fileDataArray + parsedInt) + (ulong)archOffset + 8) == '\\0') {\n            stringLength = strlen(arch);\n            for (loopCounter = stringLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(arch,_stdout);\n          }\n          archComparisonResult = archComparisonResult + 1;\n          if (currentParam != archComparisonResult) {\n            putc(0x20,_stdout);\n          }\n          parsedInt = parsedInt + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      currentArch = currentArch + 1;\n    } while (currentArch != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "fputs",
                "printf",
                "putc",
                "bfd_printable_arch_mach",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_file_info_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_with_parameters_00113e23",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "lVar1": "typeId",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createTypeWithParameters_00113e23(undefined8 inputParameter1,undefined8 inputParameter2)\n\n{\n  long typeId;\n  undefined8 *allocatedMemory;\n  \n  typeId = debug_make_type_constprop_0(1,0);\n  if (typeId != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = inputParameter1;\n    allocatedMemory[1] = inputParameter2;\n    *(undefined8 **)(typeId + 0x10) = allocatedMemory;\n  }\n  return typeId;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_find_tagged_type"
            ],
            "imported": false,
            "current_name": "create_type_with_parameters_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "stabError",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 stabError)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_from_byte_array_00108ea1",
                "param_1": "byte_array",
                "param_2": "result",
                "iVar1": "current_digit",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "parsed_number"
            },
            "code": "\nulong parse_number_from_byte_array_00108ea1(byte **byte_array,int *result)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong parsed_number;\n  \n  current_byte = *byte_array;\n  parsed_number = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *result = current_digit;\n    *byte_array = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *byte_array = next_byte;\n        *result = current_digit;\n      }\n    }\n    parsed_number = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return parsed_number & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_number_from_byte_array_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_size_00108072",
                "lVar5": "failed_to_set_size_msg",
                "lVar8": "section_address",
                "lVar6": "section_list",
                "lVar7": "section_offset",
                "unaff_RBX": "function_args",
                "unaff_RBP": "base_pointer",
                "unaff_R12": "register_12",
                "uVar2": "temp1",
                "uVar4": "temp2",
                "unaff_R14B": "check_flag",
                "unaff_R15": "result",
                "change_section_address": "section_address_change",
                "dcgettext": "get_error_message",
                "find_section_list": "search_section_list",
                "set_alignment_00108179": "set_alignment",
                "group_signature_isra_0": "validate_group_signature",
                "copy_private_data_0010808f": "copy_private_data",
                "status": "function_status",
                "bfd_nonfatal_message": "display_error_message",
                "cVar3": "character_value"
            },
            "code": "\nvoid set_section_size_00108072(void)\n\n{\n  byte bVar1;\n  undefined8 temp1;\n  char character_value;\n  uint temp2;\n  long failed_to_set_size_msg;\n  long section_list;\n  long section_offset;\n  undefined8 *function_args;\n  long base_pointer;\n  long register_12;\n  long section_address;\n  char check_flag;\n  long result;\n  \n  failed_to_set_size_msg = get_error_message(0,\"failed to set size\",5);\n  section_address = function_args[6];\n  section_list = search_section_list(*function_args,0,0x18);\n  if (section_list == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    temp1 = *function_args;\n    section_address = section_address + section_address_change;\n    *(long *)(result + 0x30) = section_address;\n    *(long *)(result + 0x38) = section_address;\n    section_address = function_args[7];\n    section_list = search_section_list(temp1,0,0x60);\n    if (section_list == 0) goto LAB_00115695;\nLAB_00115860:\n    section_offset = *(long *)(section_list + 0x20);\n    if ((*(byte *)(section_list + 0x14) & 0x40) != 0) {\n      section_offset = section_offset + section_address;\n    }\n    *(long *)(result + 0x38) = section_offset;\n    section_address = search_section_list(*function_args,0,0x200);\n    if (section_address != 0) goto LAB_00115889;\nLAB_001156b8:\n    temp2 = *(uint *)((long)function_args + 0x7c);\n    if (temp2 < 0x3f) goto LAB_001156c4;\n    failed_to_set_size_msg = get_error_message(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)function_args + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(function_args + 5) & 0x30;\n    function_args[0xc] = result;\n    function_args[0xb] = 0;\n    bVar1 = *(byte *)((long)function_args + 0x27);\n  }\n  else {\n    section_offset = *(long *)(section_list + 0x18);\n    if ((*(byte *)(section_list + 0x14) & 8) == 0) {\n      section_offset = section_offset + section_address;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    temp1 = *function_args;\n    *(long *)(result + 0x30) = section_offset;\n    *(long *)(result + 0x38) = section_offset;\n    section_address = function_args[7];\n    section_list = search_section_list(temp1,0,0x60);\n    if (section_list != 0) goto LAB_00115860;\nLAB_00115695:\n    temp1 = *function_args;\n    *(long *)(result + 0x38) = section_address + section_address_change;\n    section_address = search_section_list(temp1,0,0x200);\n    if (section_address == 0) goto LAB_001156b8;\nLAB_00115889:\n    temp2 = *(uint *)(section_address + 0x2c);\n    if (0x3e < temp2) {\n      set_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = temp2;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)function_args + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(function_args + 5) & 0x30;\n    function_args[0xc] = result;\n    function_args[0xb] = 0;\n    bVar1 = *(byte *)((long)function_args + 0x27);\n  }\n  if ((bVar1 & 2) != 0) {\n    section_address = function_args[0x1a];\n    section_list = validate_group_signature(section_address,function_args[0x1c]);\n    if ((section_list != 0) &&\n       (section_offset = *(long *)(register_12 + 8), *(uint *)(section_list + 0x18) = *(uint *)(section_list + 0x18) | 0x20,\n       *(int *)(section_offset + 8) == 5)) {\n      *(long *)(section_address + 0xb0) = section_list;\n      character_value = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (character_value == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  character_value = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (character_value == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (check_flag != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (failed_to_set_size_msg != 0) {\n    function_status = 1;\n    display_error_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "find_section_list",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_size_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "format_and_push_string_0010a2b9",
                "param_1": "binaryAddress",
                "param_2": "isZero",
                "param_3": "unknown1",
                "param_4": "unknown2",
                "cVar1": "char1",
                "__s": "string1",
                "sVar2": "stringLength",
                "__s_00": "allocatedString",
                "lVar3": "stringIndex",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] formatAndPushString_0010a2b9(long binaryAddress,char isZero,undefined8 unknown1,undefined8 unknown2)\n\n{\n  char char1;\n  char *string1;\n  size_t stringLength;\n  char *allocatedString;\n  long stringIndex;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(binaryAddress + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  stringLength = strlen(string1);\n  allocatedString = (char *)xmalloc(stringLength + 0x1e);\n  if (isZero == '\\0') {\n    *allocatedString = '\\0';\n    stringIndex = 0;\n    isZero = char1;\n  }\n  else {\n    stringIndex = *(long *)(binaryAddress + 0x68);\n    *(long *)(binaryAddress + 0x68) = stringIndex + 1;\n    sprintf(allocatedString,\"%ld=@S;\",stringIndex);\n  }\n  stringLength = strlen(allocatedString);\n  sprintf(allocatedString + stringLength,\"S%s\",string1);\n  free(string1);\n  result._0_4_ = stab_push_string(binaryAddress,allocatedString,stringIndex,isZero,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(allocatedString);\n  }\n  result._8_8_ = unknown2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "dataPointer",
                "param_2": "inputValue",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "counter",
                "cVar2": "symbolResult"
            },
            "code": "\nundefined processData_0010ec73(long *dataPointer,long inputValue,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int counter;\n  char symbolResult;\n  \n  if (dataPointer[0x3c] != -1) {\n    (**(code **)(*(long *)(*dataPointer + 8) + 0x50))(inputValue,dataPointer[1] + 8 + dataPointer[0x3c]);\n    dataPointer[0x3c] = -1;\n  }\n  if (dataPointer[0x3d] != -1) {\n    (**(code **)(*(long *)(*dataPointer + 8) + 0x50))(inputValue,dataPointer[1] + 8 + dataPointer[0x3d]);\n    dataPointer[0x3d] = -1;\n  }\n  counter = *(int *)(dataPointer + 0x3f);\n  *(int *)(dataPointer + 0x3f) = counter + 1;\n  if (counter == 0) {\n    dataPointer[0x40] = inputValue;\n  }\n  else {\n    if ((dataPointer[0x41] != -1) &&\n       (symbolResult = stab_write_symbol_lto_priv_0(dataPointer,0xc0,0,dataPointer[0x41],0,param6,param4),\n       symbolResult == '\\0')) {\n      return 0;\n    }\n    dataPointer[0x41] = inputValue - dataPointer[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_delete_file_00115970",
                "param_1": "sourceFile",
                "param_2": "destinationFile",
                "param_3": "bufferSize",
                "param_4": "fileSize",
                "param_5": "shouldSetTimes",
                "param_6": "previousResult",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copySize",
                "auVar6": "returnVal"
            },
            "code": "\nundefined  [16]\ncopyAndDeleteFile_00115970(char *sourceFile,char *destinationFile,undefined4 bufferSize,undefined8 fileSize,char shouldSetTimes,\n            undefined8 previousResult)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copySize;\n  undefined returnVal [16];\n  \n  if (destinationFile == sourceFile) {\n    copySize = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFile,fileSize);\n    copySize = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = __errno_location();\n      errorString = strerror(*errnoPtr);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationFile,errorString);\n    }\n    unlink(sourceFile);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationFile,fileSize);\n  }\n  returnVal._8_8_ = previousResult;\n  returnVal._0_8_ = copySize;\n  return returnVal;\n}\n\n",
            "called": [
                "simple_copy",
                "smart_rename.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_stab_class_method_var_0010adf2"
            },
            "code": "\nvoid initialize_stab_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_type_info_0010d7d4",
                "param_1": "type_info",
                "param_2": "start_ptr",
                "param_3": "output_array",
                "param_4": "num_processed",
                "param_5": "array_size",
                "uVar1": "end_ptr",
                "cVar2": "result",
                "uVar3": "return_value",
                "lVar4": "array_ptr",
                "plVar5": "temp_array",
                "local_40": "temp_buffer",
                "stab_demangle_type_lto_priv_0": "process_type",
                "stab_demangle_remember_type": "remember_type",
                "xrealloc": "custom_realloc"
            },
            "code": "\nundefined4\nprocess_type_info_0010d7d4(undefined8 type_info,undefined8 *start_ptr,long *output_array,uint *num_processed,uint *array_size)\n\n{\n  undefined8 end_ptr;\n  char result;\n  undefined4 return_value;\n  long array_ptr;\n  long *temp_array;\n  uint uVar6;\n  long temp_buffer [2];\n  \n  end_ptr = *start_ptr;\n  temp_array = temp_buffer;\n  if (output_array == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  result = process_type(type_info,start_ptr,temp_array);\n  if ((result != '\\0') &&\n     (return_value = remember_type(type_info,end_ptr,(int)*start_ptr - (int)end_ptr),\n     (char)return_value != '\\0')) {\n    if (output_array == (long *)0x0) {\n      return return_value;\n    }\n    if (temp_buffer[0] != 0) {\n      if (*array_size <= *num_processed + 1) {\n        uVar6 = *array_size + 10;\n        array_ptr = *output_array;\n        *array_size = uVar6;\n        array_ptr = custom_realloc(array_ptr,(ulong)uVar6 << 3);\n        *output_array = array_ptr;\n      }\n      uVar6 = *num_processed;\n      *(long *)(*output_array + (ulong)uVar6 * 8) = temp_buffer[0];\n      *num_processed = uVar6 + 1;\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "xrealloc",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "process_type_info_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_stats_00113f50",
                "param_1": "filename",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "result",
                "pcVar4": "errorString",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFileStats_00113f50(char *filename)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 result;\n  char *errorString;\n  stat fileStats;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&fileStats);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        result = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(result,filename);\n      }\n      else {\n        errorString = strerror(*errnoPtr);\n        result = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(result,filename,errorString);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      result = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(result,filename);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      result = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(result,filename);\n    }\n    else {\n      result = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(result,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "non_fatal",
                "get_file_size.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "main",
                "copy_file",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "check_file_stats_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatStrings",
                "uVar1": "programName",
                "__format": "formatMessage",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatStrings)\n\n{\n  undefined8 programName;\n  char *formatMessage;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,programName);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "decompile_and_improve_binary_0011378f",
                "param_1": "output_files",
                "param_2": "stats",
                "param_3": "output_size",
                "param_4": "output_data",
                "param_5": "symbol_table",
                "param_6": "compilation_units",
                "auVar1": "temp_array",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_message",
                "puVar5": "temp_pointer",
                "sVar6": "string_length",
                "lVar7": "counter",
                "puVar8": "temp_pointer_2",
                "puVar9": "array_iterator",
                "__dest": "dest",
                "puVar10": "pointer_iterator",
                "plVar11": "long_pointer",
                "bVar12": "flag",
                "local_258": "input_files",
                "local_250": "allocated_memory",
                "local_248": "var_1",
                "uStack_244": "var_2",
                "uStack_240": "var_3",
                "uStack_23c": "var_4",
                "local_238": "temp_array_2",
                "local_228": "flag_2",
                "local_220": "local_array",
                "local_1f8": "var_5",
                "local_1f0": "flag_3",
                "local_1e8": "array_2",
                "local_a0": "local_array_2",
                "local_78": "temp_array_3",
                "uStack_70": "var_6",
                "local_68": "flag_4",
                "local_60": "var_7",
                "local_58": "var_8",
                "uStack_54": "var_9",
                "uStack_50": "var_10",
                "uStack_4c": "var_11"
            },
            "code": "\nundefined4\ndecompile_and_improve_binary_0011378f(undefined8 *output_files,undefined8 *stats,long *output_size,undefined8 *output_data,\n            undefined8 *symbol_table,undefined8 *compilation_units)\n\n{\n  undefined temp_array [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_message;\n  undefined *temp_pointer;\n  size_t string_length;\n  long counter;\n  undefined8 *temp_pointer_2;\n  undefined4 *array_iterator;\n  char *dest;\n  undefined8 *pointer_iterator;\n  long *long_pointer;\n  byte flag;\n  undefined8 *input_files;\n  long allocated_memory;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined temp_array_2 [16];\n  undefined8 flag_2;\n  undefined local_array [40];\n  undefined8 var_5;\n  undefined8 flag_3;\n  undefined4 array_2 [82];\n  undefined local_array_2 [40];\n  undefined temp_array_3 [8];\n  undefined8 var_6;\n  undefined8 flag_4;\n  undefined4 var_7;\n  undefined4 var_8;\n  undefined4 var_9;\n  undefined4 var_10;\n  undefined4 var_11;\n  \n  flag = 0;\n  var_1 = 0;\n  var_2 = 0;\n  var_3 = 500;\n  var_4 = 0;\n  input_files = output_files;\n  allocated_memory = xmalloc(500);\n  flag_2 = 1;\n  temp_array_2 = ZEXT816(0);\n  result = bfd_hash_table_init(local_array,string_hash_newfunc_lto_priv_0,0x30);\n  if ((result == '\\0') ||\n     (result = bfd_hash_table_init(local_array_2,string_hash_newfunc_lto_priv_0,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_message = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_message);\n  }\n  else {\n    var_5 = 0;\n    unique0x100000e9 = 0xffffffff;\n    temp_array_3 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    array_iterator = array_2;\n    for (counter = 0x52; counter != 0; counter = counter + -1) {\n      *array_iterator = 0;\n      array_iterator = array_iterator + (ulong)flag * -2 + 1;\n    }\n    flag_4 = 0;\n    var_7 = 0;\n    flag_3 = 1;\n    var_8 = 0;\n    var_9 = 0;\n    var_10 = 0xffffffff;\n    var_11 = 0xffffffff;\n    result = stab_write_symbol_lto_priv_0(&input_files,0,0,0,0);\n    temp_array = _temp_array_3;\n    if (result != '\\0') {\n      temp_array_3._4_4_ = var_2;\n      temp_array_3._0_4_ = var_1;\n      var_6 = temp_array._8_8_;\n      result = stab_write_symbol_lto_priv_0(&input_files,100,0,0,*output_files);\n      if (result != '\\0') {\n        *(int *)(stats + 6) = *(int *)(stats + 6) + 1;\n        stats[10] = 0;\n        pointer_iterator = (undefined8 *)*stats;\n        *(undefined4 *)(stats + 7) = *(undefined4 *)((long)stats + 0x34);\n        for (; pointer_iterator != (undefined8 *)0x0; pointer_iterator = (undefined8 *)*pointer_iterator) {\n          stats[8] = pointer_iterator[2];\n          *(undefined4 *)(stats + 9) = 0;\n          result = stab_start_compilation_unit_lto_priv_0(&input_files,*(undefined8 *)(pointer_iterator[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          long_pointer = (long *)pointer_iterator[1];\n          if (long_pointer != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)long_pointer[2] != (undefined8 *)0x0) {\n                for (temp_pointer_2 = *(undefined8 **)(undefined8 *)long_pointer[2]; temp_pointer_2 != (undefined8 *)0x0;\n                    temp_pointer_2 = (undefined8 *)*temp_pointer_2) {\n                  result = debug_write_name_constprop_0(stats,&input_files);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              long_pointer = (long *)*long_pointer;\n              if (long_pointer == (long *)0x0) break;\n              result = stab_start_source_lto_priv_0(&input_files,long_pointer[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = debug_write_linenos_constprop_0(stats,&input_files,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_11,var_10) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&input_files,100,0,flag_4,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(output_files[1] + 0x50))(flag_2,allocated_memory + 8);\n          *output_size = allocated_memory;\n          *output_data = CONCAT44(var_2,var_1);\n          *compilation_units = flag_2;\n          temp_pointer = (undefined *)xmalloc();\n          *temp_pointer = 0;\n          dest = temp_pointer + 1;\n          *symbol_table = temp_pointer;\n          for (counter = temp_array_2._0_8_; counter != 0; counter = *(long *)(counter + 0x18)) {\n            strcpy(dest,*(char **)(counter + 8));\n            string_length = strlen(dest);\n            dest = dest + string_length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_linenos.constprop.0",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0",
                "debug_write_name.constprop.0",
                "bfd_get_error",
                "strcpy",
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "string_hash_newfunc.lto_priv.0",
                "bfd_hash_table_init",
                "stab_start_source.lto_priv.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_binary_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage",
                "__errno_location": "getErrnoLocation",
                "dcgettext": "translateMessage",
                "non_fatal": "reportError"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = getErrnoLocation();\n  if (*errnoPtr == 2) {\n    errorMessage = translateMessage(0,\"\\'%s\\': No such file\",5);\n    reportError(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = translateMessage(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    reportError(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_type_0010a0a0",
                "param_1": "input_param",
                "stab_modify_type": "update_parameter_type"
            },
            "code": "\nvoid modify_type_0010a0a0(long input_param)\n\n{\n  update_parameter_type(input_param,0x26,4,input_param + 0x198,input_param + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_type_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "data1",
                "param_11": "data2",
                "param_12": "data3",
                "param_13": "data4",
                "param_14": "data5",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "pointer",
                "local_c8": "buffer",
                "local_b8": "array",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "var1",
                "local_78": "var2",
                "local_68": "var3",
                "local_58": "var4",
                "local_48": "var5",
                "local_38": "var6",
                "local_28": "var7",
                "local_18": "var8"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param9,undefined8 data1,undefined8 data2,undefined8 data3,\n                 undefined8 data4,undefined8 data5)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *pointer;\n  undefined *buffer;\n  undefined array [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  \n  if (condition != '\\0') {\n    var1 = input1;\n    var2 = input2;\n    var3 = input3;\n    var4 = input4;\n    var5 = input5;\n    var6 = input6;\n    var7 = input7;\n    var8 = input8;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  buffer = array;\n  length = 0x30;\n  value1 = data1;\n  value2 = data2;\n  value3 = data3;\n  value4 = data4;\n  value5 = data5;\n  report(param9,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00105828",
                "merge_gnu_build_notes",
                "set_times.cold",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "FUN_001152b6",
                "stab_struct_field.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00104cc1",
                "copy_object",
                "main",
                "parse_flags.cold",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_001086af",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "get_file_size",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "generate_type_00112c1f",
                "param_1": "input",
                "param_2": "output",
                "param_3": "typeInfo",
                "param_4": "parent",
                "plVar1": "currentType",
                "lVar2": "tempVar",
                "puVar3": "ptrVar1",
                "puVar4": "ptrVar2",
                "cVar5": "charVar",
                "piVar6": "intVar",
                "uVar7": "result",
                "uVar8": "enumValue",
                "iVar9": "typeKind",
                "uVar10": "intVar2",
                "uVar11": "enumType",
                "uVar12": "index",
                "uVar13": "uintVar",
                "bVar14": "boolVar",
                "local_3c": "localVar"
            },
            "code": "\n\n\nundefined8 generateType_00112c1f(ulong input,undefined8 output,int *typeInfo,long parent)\n\n{\n  long *currentType;\n  long tempVar;\n  undefined8 *ptrVar1;\n  undefined8 *ptrVar2;\n  char charVar;\n  int *intVar;\n  undefined8 result;\n  undefined8 enumValue;\n  int typeKind;\n  undefined4 intVar2;\n  undefined8 enumType;\n  ulong index;\n  uint uintVar;\n  bool boolVar;\n  uint localVar;\n  \n  index = input;\nLAB_00112c39:\n  if (typeInfo != (int *)0x0) {\n    typeKind = *typeInfo;\n    if (typeKind - 0x16U < 2) {\n      do {\n        currentType = *(long **)(typeInfo + 4);\n        uintVar = *(uint *)(input + 0x30);\n        index = (ulong)uintVar;\n        tempVar = *currentType;\n        if (*(uint *)(tempVar + 0x10) == uintVar) {\n          if (typeKind == 0x16) {\n            result = stab_typedef_type_lto_priv_0(output,*(undefined8 *)(tempVar + 8));\n            return result;\n          }\nLAB_00112c94:\n          intVar = (int *)debug_get_real_type_isra_0(typeInfo,0);\n          if (intVar == (int *)0x0) goto LAB_00112dd6;\n          if ((*intVar - 7U < 4) && (*(long *)(intVar + 4) != 0)) {\n            if ((*(uint *)(*(long *)(intVar + 4) + 0xc) <= *(uint *)(input + 0x38)) &&\n               (charVar = debug_set_class_id_lto_priv_0\n                                  (input,*(undefined8 *)(**(long **)(typeInfo + 4) + 8),intVar),\n               charVar == '\\0')) {\n              return 0;\n            }\n            uintVar = *(uint *)(*(long *)(intVar + 4) + 0xc);\n          }\n          else {\n            uintVar = 0;\n          }\n          typeKind = *intVar;\n          result = *(undefined8 *)(**(long **)(typeInfo + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (typeKind == 0x17) {\n          if (tempVar != parent) goto LAB_00112c94;\n          *(uint *)(parent + 0x10) = uintVar;\n          parent = *currentType;\n          typeInfo = (int *)currentType[1];\n          goto LAB_00112c39;\n        }\n        if (parent != 0) {\n          *(uint *)(parent + 0x10) = uintVar;\n        }\n        typeInfo = (int *)currentType[1];\n        if (typeInfo == (int *)0x0) goto LAB_00112dd6;\n        typeKind = *typeInfo;\n        parent = 0;\n      } while (typeKind - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (parent == 0) goto LAB_00112d74;\n      *(undefined4 *)(parent + 0x10) = *(undefined4 *)(input + 0x30);\n      if (*(int *)(parent + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(parent + 8);\n    }\n    switch(typeKind) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = stab_void_type_lto_priv_0(output);\n      return result;\n    case 3:\n      result = stab_int_type_lto_priv_0(output,typeInfo[1],*(undefined *)(typeInfo + 4));\n      return result;\n    case 4:\n      result = stab_float_type_lto_priv_0(output,typeInfo[1]);\n      return result;\n    case 5:\n      result = stab_complex_type_lto_priv_0(output,typeInfo[1]);\n      return result;\n    case 6:\n      result = stab_bool_type_lto_priv_0(output,typeInfo[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(typeInfo + 4) != 0) {\n        if ((*(uint *)(*(long *)(typeInfo + 4) + 0xc) <= *(uint *)(input + 0x38)) &&\n           (charVar = debug_set_class_id_lto_priv_0(input,result,typeInfo), charVar == '\\0')) {\n          return 0;\n        }\n        tempVar = *(long *)(typeInfo + 4);\n        if (*(int *)(input + 0x30) == *(int *)(tempVar + 8)) {\n          uintVar = *(uint *)(tempVar + 0xc);\n          if (uintVar <= *(uint *)(input + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          typeKind = *typeInfo;\nLAB_00112ed2:\n          result = stab_tag_type_lto_priv_0(output,result,uintVar,typeKind);\n          return result;\n        }\n        *(int *)(tempVar + 8) = *(int *)(input + 0x30);\n      }\n      intVar2 = 0;\n      if (*(long *)(typeInfo + 4) != 0) {\n        intVar2 = *(undefined4 *)(*(long *)(typeInfo + 4) + 0xc);\n      }\n      charVar = stab_start_struct_type_lto_priv_0(output,result,intVar2,*typeInfo == 7,typeInfo[1]);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(typeInfo + 4) != (long *)0x0) && (index = 0, **(long **)(typeInfo + 4) != 0)) {\n        while( true ) {\n          ptrVar2 = *(undefined8 **)(**(long **)(typeInfo + 4) + index * 8);\n          if (ptrVar2 == (undefined8 *)0x0) break;\n          charVar = generateType_00112c1f(input,output,ptrVar2[1],0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          charVar = stab_struct_field_lto_priv_0\n                            (output,*ptrVar2,*(undefined4 *)(ptrVar2 + 3),\n                             *(undefined4 *)((long)ptrVar2 + 0x1c),*(undefined4 *)(ptrVar2 + 2));\n          if (charVar == '\\0') {\n            return 0;\n          }\n          index = (ulong)((int)index + 1);\n        }\n      }\n      result = stab_end_struct_type_lto_priv_0(output);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(typeInfo + 4) == 0) {\n        uintVar = 0;\n        intVar = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(typeInfo + 4) + 0xc) <= *(uint *)(input + 0x38)) &&\n           (index = input, charVar = debug_set_class_id_lto_priv_0(input,result,typeInfo),\n           charVar == '\\0')) {\n          return 0;\n        }\n        tempVar = *(long *)(typeInfo + 4);\n        uintVar = *(uint *)(tempVar + 0xc);\n        if (*(int *)(input + 0x30) == *(int *)(tempVar + 8)) {\n          if (uintVar <= *(uint *)(input + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          typeKind = *typeInfo;\n          goto LAB_00112ed2;\n        }\n        intVar = *(int **)(tempVar + 0x20);\n        *(int *)(tempVar + 8) = *(int *)(input + 0x30);\n        if (((intVar != (int *)0x0) && (typeInfo != intVar)) &&\n           (index = input, charVar = generateType_00112c1f(input,output,intVar,0), charVar == '\\0')) {\n          return 0;\n        }\n      }\n      charVar = stab_start_class_type_lto_priv_0\n                        (output,result,uintVar,*typeInfo == 9,typeInfo[1],intVar != (int *)0x0,\n                         typeInfo == intVar,index);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(typeInfo + 4) != (long *)0x0) {\n        uintVar = 0;\n        if (**(long **)(typeInfo + 4) != 0) {\n          while (ptrVar2 = *(undefined8 **)(**(long **)(typeInfo + 4) + (ulong)uintVar * 8),\n                ptrVar2 != (undefined8 *)0x0) {\n            charVar = generateType_00112c1f(input,output,ptrVar2[1],0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrVar2 + 0x14) == '\\0') {\n              charVar = stab_struct_field_lto_priv_0(output,*ptrVar2,*(undefined4 *)(ptrVar2 + 3));\n            }\n            else {\n              charVar = stab_class_static_member_lto_priv_0(output,*ptrVar2,ptrVar2[3]);\n            }\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        uintVar = 0;\n        if (*(long *)(*(long *)(typeInfo + 4) + 0x10) != 0) {\n          while (ptrVar2 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeInfo + 4) + 0x10) + (ulong)uintVar * 8),\n                ptrVar2 != (undefined8 *)0x0) {\n            charVar = generateType_00112c1f(input,output,*ptrVar2,0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            charVar = stab_class_baseclass_lto_priv_0\n                              (output,*(undefined4 *)(ptrVar2 + 1),\n                               *(undefined *)((long)ptrVar2 + 0xc));\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        localVar = 0;\n        if (*(long *)(*(long *)(typeInfo + 4) + 0x18) != 0) {\n          while (ptrVar2 = *(undefined8 **)\n                           (*(long *)(*(long *)(typeInfo + 4) + 0x18) + (ulong)localVar * 8),\n                ptrVar2 != (undefined8 *)0x0) {\n            charVar = stab_class_start_method_lto_priv_0(output,*ptrVar2);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = 0;\n            while (ptrVar1 = *(undefined8 **)(ptrVar2[1] + (ulong)uintVar * 8),\n                  ptrVar1 != (undefined8 *)0x0) {\n              if ((ptrVar1[4] != 0) &&\n                 (charVar = generateType_00112c1f(input,output,ptrVar1[4],0), charVar == '\\0')) {\n                return 0;\n              }\n              charVar = generateType_00112c1f(input,output,ptrVar1[1],0);\n              if (charVar == '\\0') {\n                return 0;\n              }\n              if (ptrVar1[3] == -1) {\n                charVar = stab_class_static_method_variant_lto_priv_0\n                                  (output,*ptrVar1,*(undefined4 *)(ptrVar1 + 2),\n                                   *(undefined *)((long)ptrVar1 + 0x14),\n                                   *(undefined *)((long)ptrVar1 + 0x15));\n              }\n              else {\n                charVar = stab_class_method_variant_lto_priv_0(output);\n              }\n              if (charVar == '\\0') {\n                return 0;\n              }\n              uintVar = uintVar + 1;\n            }\n            charVar = stab_class_end_method_lto_priv_0(output);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            localVar = localVar + 1;\n          }\n        }\n      }\n      result = stab_end_class_type_lto_priv_0(output);\n      return result;\n    case 0xb:\n      ptrVar2 = *(undefined8 **)(typeInfo + 4);\n      if (ptrVar2 == (undefined8 *)0x0) {\n        enumValue = 0;\n        enumType = 0;\n      }\n      else {\n        enumValue = ptrVar2[1];\n        enumType = *ptrVar2;\n      }\n      result = stab_enum_type_lto_priv_0(output,result,enumType,enumValue);\n      return result;\n    case 0xc:\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_pointer_type_lto_priv_0(output);\n      return result;\n    case 0xd:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      index = 0;\n      if (*(long *)(*(long *)(typeInfo + 4) + 8) == 0) {\n        index = 0xffffffff;\n      }\n      else {\n        while (tempVar = *(long *)(*(long *)(*(long *)(typeInfo + 4) + 8) + index * 8), tempVar != 0) {\n          index = index + 1;\n          charVar = generateType_00112c1f(input,output,tempVar,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n        index = index & 0xffffffff;\n      }\n      result = stab_function_type_lto_priv_0\n                        (output,index,*(undefined *)(*(long *)(typeInfo + 4) + 0x10));\n      return result;\n    case 0xe:\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_reference_type_lto_priv_0(output);\n      return result;\n    case 0xf:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_range_type_lto_priv_0\n                        (output,*(undefined8 *)(*(long *)(typeInfo + 4) + 8),\n                         *(undefined8 *)(*(long *)(typeInfo + 4) + 0x10));\n      return result;\n    case 0x10:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(*(long *)(typeInfo + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      tempVar = *(long *)(typeInfo + 4);\n      result = stab_array_type_lto_priv_0\n                        (output,*(undefined8 *)(tempVar + 0x10),*(undefined8 *)(tempVar + 0x18),\n                         *(undefined *)(tempVar + 0x20));\n      return result;\n    case 0x11:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_set_type_lto_priv_0(output,*(undefined *)(*(long *)(typeInfo + 4) + 8));\n      return result;\n    case 0x12:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(*(long *)(typeInfo + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_offset_type_lto_priv_0(output);\n      return result;\n    case 0x13:\n      charVar = generateType_00112c1f(input,output,**(undefined8 **)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      index = 0;\n      if (*(long *)(*(long *)(typeInfo + 4) + 0x10) == 0) {\n        index = 0xffffffff;\n      }\n      else {\n        while (tempVar = *(long *)(*(long *)(*(long *)(typeInfo + 4) + 0x10) + index * 8), tempVar != 0)\n        {\n          index = index + 1;\n          charVar = generateType_00112c1f(input,output,tempVar,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(typeInfo + 4) + 8) != 0) &&\n         (charVar = generateType_00112c1f(input,output,*(long *)(*(long *)(typeInfo + 4) + 8),0),\n         charVar == '\\0')) {\n        return 0;\n      }\n      result = stab_method_type_lto_priv_0\n                        (output,*(long *)(*(long *)(typeInfo + 4) + 8) != 0,index & 0xffffffff,\n                         *(undefined *)(*(long *)(typeInfo + 4) + 0x18));\n      return result;\n    case 0x14:\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_const_type_lto_priv_0(output);\n      return result;\n    case 0x15:\n      charVar = generateType_00112c1f(input,output,*(undefined8 *)(typeInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      result = stab_volatile_type_lto_priv_0(output);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(typeInfo + 4) == typeInfo;\n  typeInfo = *(int **)**(undefined8 **)(typeInfo + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    result = stab_empty_type_lto_priv_0(output);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_typedef_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_class_baseclass.lto_priv.0",
                "dcgettext",
                "stab_bool_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "__assert_fail",
                "stab_class_method_variant.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "abort",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "fprintf",
                "stab_class_static_method_variant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_type_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "shouldCopyPrivateData",
                "unaff_R15": "dataPointer",
                "lVar1": "errorMsg",
                "status": "statusCode"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMsg;\n  char shouldCopyPrivateData;\n  long dataPointer;\n  \n  errorMsg = dcgettext(0,\"failed to copy private data\",5);\n  if (shouldCopyPrivateData != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (errorMsg != 0) {\n    statusCode = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_message_00108fe8",
                "param_1": "errorMessage",
                "param_2": "fileName",
                "in_RAX": "returnValue",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarningMessage_00108fe8(undefined8 errorMessage,undefined8 fileName)\n\n{\n  undefined8 returnValue;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,fileName,errorMessage,returnValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_number"
            ],
            "imported": false,
            "current_name": "print_warning_message_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "recognize_input_file_format_00105828",
                "iVar1": "archValue",
                "uVar2": "printableArch",
                "uVar3": "archiveFilename",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 recognizeInputFileFormat_00105828(void)\n\n{\n  int archValue;\n  undefined4 printableArch;\n  undefined8 archiveFilename;\n  undefined8 errorMessage;\n  \n  archValue = bfd_get_arch();\n  if (archValue == 0) {\n    archiveFilename = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,archiveFilename);\n  }\n  else {\n    archiveFilename = bfd_get_mach();\n    printableArch = bfd_get_arch();\n    archiveFilename = bfd_printable_arch_mach(printableArch,archiveFilename);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,archiveFilename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "recognize_input_file_format_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "temp_dir",
                "template_in_dir": "get_template_directory",
                "mkdtemp": "make_temp_directory"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *temp_dir;\n  \n  template = (char *)get_template_directory();\n  temp_dir = make_temp_directory(template);\n  if (temp_dir == (char *)0x0) {\n    free(template);\n  }\n  return temp_dir;\n}\n\n",
            "called": [
                "template_in_dir",
                "mkdtemp",
                "make_tempdir.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_defined_type_0010bba1",
                "param_1": "input_hash",
                "param_2": "input_value",
                "lVar1": "hash_lookup_result",
                "uVar2": "push_result"
            },
            "code": "\nundefined8 lookup_and_push_defined_type_0010bba1(long input_hash,undefined8 input_value)\n\n{\n  long hash_lookup_result;\n  undefined8 push_result;\n  \n  hash_lookup_result = bfd_hash_lookup(input_hash + 0x1b8,input_value,0,0);\n  if ((hash_lookup_result != 0) && (0 < *(long *)(hash_lookup_result + 0x20))) {\n    push_result = stab_push_defined_type(input_hash,*(long *)(hash_lookup_result + 0x20),*(undefined4 *)(hash_lookup_result + 0x28));\n    return push_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "write_symbol_entry_0010e6a8",
                "param_1": "symbol_table",
                "param_2": "symbol_name",
                "param_4": "result",
                "__s": "type",
                "sVar3": "symbol_name_length",
                "sVar4": "type_length",
                "__s_00": "new_symbol_entry",
                "lVar5": "lookup_result",
                "lVar8": "symbol_count",
                "uVar1": "write_result",
                "uVar2": "symbol_type",
                "uVar6": "error_message",
                "uVar7": "error_format"
            },
            "code": "\nundefined  [16] write_symbol_entry_0010e6a8(long symbol_table,char *symbol_name,undefined8 param_3,undefined8 result)\n\n{\n  uint write_result;\n  undefined4 symbol_type;\n  char *type;\n  size_t symbol_name_length;\n  size_t type_length;\n  char *new_symbol_entry;\n  long lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long symbol_count;\n  ulong uVar9;\n  undefined awrite_result0 [16];\n  \n  symbol_count = *(long *)(*(long *)(symbol_table + 0x60) + 0x10);\n  symbol_type = *(undefined4 *)(*(long *)(symbol_table + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbol_name_length = strlen(symbol_name);\n  type_length = strlen(type);\n  new_symbol_entry = (char *)xmalloc(symbol_name_length + 0x14 + type_length);\n  if (symbol_count < 1) {\n    symbol_count = *(long *)(symbol_table + 0x68);\n    *(long *)(symbol_table + 0x68) = symbol_count + 1;\n    sprintf(new_symbol_entry,\"%s:t%ld=%s\",symbol_name,symbol_count,type);\n  }\n  else {\n    sprintf(new_symbol_entry,\"%s:t%s\",symbol_name,type);\n  }\n  free(type);\n  write_result = stab_write_symbol_lto_priv_0(symbol_table,0x80,0,0,new_symbol_entry);\n  uVar9 = (ulong)write_result;\n  if ((char)write_result != '\\0') {\n    free(new_symbol_entry);\n    lookup_result = bfd_hash_lookup(symbol_table + 0x1b8,symbol_name,1,0);\n    if (lookup_result != 0) {\n      *(long *)(lookup_result + 0x20) = symbol_count;\n      *(undefined4 *)(lookup_result + 0x28) = symbol_type;\n      goto LAB_0010e7b3;\n    }\n    symbol_type = bfd_get_error();\n    error_message = bfd_errmsg(symbol_type);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(error_format,error_message);\n  }\n  uVar9 = 0;\nLAB_0010e7b3:\n  awrite_result0._8_8_ = result;\n  awrite_result0._0_8_ = uVar9;\n  return awrite_result0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "stab_write_symbol.lto_priv.0",
                "non_fatal",
                "dcgettext",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_entry_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "format_and_write_to_symbol_0010e7c2",
                "param_1": "symbol",
                "param_2": "string1",
                "param_3": "unused",
                "param_4": "unused2",
                "__s": "poppedSymbol",
                "sVar1": "lengthOfString1",
                "sVar2": "lengthOfPoppedSymbol",
                "__s_00": "formattedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] formatAndWriteToSymbol_0010e7c2(undefined8 symbol,char *string1,undefined8 unused,undefined8 unused2)\n\n{\n  char *poppedSymbol;\n  size_t lengthOfString1;\n  size_t lengthOfPoppedSymbol;\n  char *formattedString;\n  undefined result [16];\n  \n  poppedSymbol = (char *)stab_pop_type();\n  lengthOfString1 = strlen(string1);\n  lengthOfPoppedSymbol = strlen(poppedSymbol);\n  formattedString = (char *)xmalloc(lengthOfString1 + 3 + lengthOfPoppedSymbol);\n  sprintf(formattedString,\"%s:T%s\",string1,poppedSymbol);\n  free(poppedSymbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol,0x80,0,0,formattedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedString);\n  }\n  result._8_8_ = unused2;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_write_to_symbol_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "src1",
                "param_2": "src2",
                "param_3": "src3",
                "param_4": "src4",
                "param_5": "src5",
                "param_6": "src6",
                "param_7": "src7",
                "param_8": "src8",
                "param_9": "data",
                "param_10": "val1",
                "param_11": "val2",
                "param_12": "val3",
                "param_13": "val4",
                "param_14": "val5",
                "in_AL": "condition",
                "local_d8": "stackSize",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "value1",
                "local_a8": "value2",
                "local_a0": "value3",
                "local_98": "value4",
                "local_90": "value5",
                "local_88": "var1",
                "local_78": "var2",
                "local_68": "var3",
                "local_58": "var4",
                "local_48": "var5",
                "local_38": "var6",
                "local_28": "var7",
                "local_18": "var8"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 src1,undefined4 src2,undefined4 src3,undefined4 src4,\n                 undefined4 src5,undefined4 src6,undefined4 src7,undefined4 src8,\n                 undefined8 data,undefined8 val1,undefined8 val2,undefined8 val3,\n                 undefined8 val4,undefined8 val5)\n\n{\n  char condition;\n  undefined4 stackSize;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 value1;\n  undefined8 value2;\n  undefined8 value3;\n  undefined8 value4;\n  undefined8 value5;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  \n  if (condition != '\\0') {\n    var1 = src1;\n    var2 = src2;\n    var3 = src3;\n    var4 = src4;\n    var5 = src5;\n    var6 = src6;\n    var7 = src7;\n    var8 = src8;\n  }\n  stackPointer = &stack0x00000008;\n  stackSize = 8;\n  buffer = localBuffer;\n  bufferSize = 0x30;\n  value1 = val1;\n  value2 = val2;\n  value3 = val3;\n  value4 = val4;\n  value5 = val5;\n  report(data,&stackSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "init_section_add.cold",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "copy_section.cold",
                "main",
                "parse_vma.cold",
                "parse_flags.cold",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "create_new_symbol.cold",
                "copy_file",
                "FUN_00114dc7",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_object",
                "copy_file",
                "FUN_00107880",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_non_fatal_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "unaffectedRBP",
                "unaff_retaddr": "unaffectedReturnAddress"
            },
            "code": "\nundefined8 handleBFDNonFatalError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *unaffectedRBP;\n  undefined8 unaffectedReturnAddress;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return unaffectedReturnAddress;\n    }\n  }\n  bfd_nonfatal(*unaffectedRBP);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_non_fatal_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "extract_and_process_gnu_build_notes_00116852",
                "in_RCX": "build_notes_end",
                "unaff_RBP": "current_build_note",
                "unaff_R13": "build_notes",
                "unaff_R14": "current_build_note",
                "unaff_R15": "build_notes_count",
                "param_7": "target_value_1",
                "param_9": "target_value_2",
                "param_10": "output_size",
                "param_11": "build_notes",
                "param_12": "output",
                "param_13": "context",
                "param_14": "build_notes_count"
            },
            "code": "\nulong extract_and_process_gnu_build_notes_00116852(void)\n\n{\n  size_t sVar1;\n  code *pcVar2;\n  int iVar3;\n  uint uVar4;\n  undefined *__ptr;\n  size_t *build_notes_end;\n  ulong uVar5;\n  ulong uVar6;\n  long lVar7;\n  ulong uVar8;\n  size_t unaff_RBX;\n  size_t *current_build_note;\n  undefined *puVar9;\n  char cVar10;\n  undefined *puVar11;\n  ulong in_R10;\n  undefined *puVar12;\n  size_t in_R11;\n  size_t *build_notes;\n  size_t *current_build_note;\n  size_t build_notes_count;\n  size_t *psVar13;\n  byte bVar14;\n  size_t target_value_1;\n  size_t target_value_2;\n  ulong output_size;\n  size_t *build_notes;\n  undefined *output;\n  long context;\n  size_t build_notes_count;\n  \n  bVar14 = 0;\ncode_r0x00116852:\n  uVar4 = (int)in_R10 + 1;\n  if (0x10 < (int)in_R10) goto LAB_001167f5;\nLAB_00116863:\n  current_build_note = current_build_note + -9;\n  do {\n    if (build_notes <= current_build_note) {\n      sVar1 = current_build_note[2];\n      if (sVar1 == 0) goto LAB_00116863;\n      uVar8 = (ulong)uVar4;\n      if ((*current_build_note == *current_build_note) &&\n         (iVar3 = memcmp((void *)current_build_note[3],(void *)current_build_note[3],*current_build_note), iVar3 == 0)) {\n        uVar6 = current_build_note[7];\n        uVar5 = current_build_note[8];\n        in_R10 = uVar8 & 0xffffffff;\n        if (build_notes_count == uVar6) {\n          if (unaff_RBX != uVar5) goto LAB_001167a6;\n          current_build_note[2] = 0;\n        }\n        else {\n          if (build_notes_count < uVar6) {\n            if (uVar5 < build_notes_count) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < uVar5) || (build_notes_count <= (uVar5 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_RBX < build_notes_count) {\n              if ((0xfffffffffffffff0 < unaff_RBX) ||\n                 (uVar6 <= (unaff_RBX + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_RBX == uVar5) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_RBX <= uVar5) {\n              current_build_note[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (uVar5 < build_notes_count) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sVar1 == 0x101)) goto code_r0x00116852;\n          if (uVar5 <= unaff_RBX) {\n            uVar5 = unaff_RBX;\n          }\n          if (uVar6 < build_notes_count) {\n            build_notes_count = uVar6;\n          }\n          current_build_note[8] = uVar5;\n          current_build_note[7] = build_notes_count;\n          current_build_note[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_build_note = current_build_note;\n        current_build_note = current_build_note + 9;\n        if (build_notes_end <= current_build_note) {\n          qsort(build_notes,build_notes_count,0x48,sort_gnu_build_notes);\n          __ptr = (undefined *)xmalloc(output_size * 2);\n          target_value_1 = 0;\n          puVar12 = __ptr;\n          for (psVar13 = build_notes; psVar13 < build_notes_end; psVar13 = psVar13 + 9) {\n            if (psVar13[2] != 0) {\n              puVar11 = puVar12 + 4;\n              puVar9 = puVar12 + 0xc;\n              pcVar2 = *(code **)(*(long *)(context + 8) + 0x50);\n              if ((psVar13[7] == target_value_2) && (psVar13[8] == target_value_1)) {\n                (*pcVar2)(*psVar13,puVar12);\n                (**(code **)(*(long *)(context + 8) + 0x50))(0,puVar11);\n                (**(code **)(*(long *)(context + 8) + 0x50))(psVar13[2],puVar12 + 8);\n                uVar6 = psVar13[6];\n                uVar8 = *psVar13;\n                puVar12 = (undefined *)psVar13[3];\n                puVar11 = puVar9;\n                for (uVar5 = uVar8; uVar5 != 0; uVar5 = uVar5 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                puVar12 = puVar9 + uVar6;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n                  cVar10 = (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  cVar10 = '\\b';\n                }\n                (**(code **)(*(long *)(context + 8) + 0x50))(cVar10,puVar11);\n                (**(code **)(*(long *)(context + 8) + 0x50))(psVar13[2],puVar12 + 8);\n                uVar8 = *psVar13;\n                puVar12 = (undefined *)psVar13[3];\n                puVar11 = puVar9;\n                for (uVar6 = uVar8; uVar6 != 0; uVar6 = uVar6 - 1) {\n                  *puVar11 = *puVar12;\n                  puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n                  puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                }\n                uVar6 = psVar13[6];\n                if (uVar8 < uVar6) {\n                  for (lVar7 = uVar6 - uVar8; lVar7 != 0; lVar7 = lVar7 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + (ulong)bVar14 * -2 + 1;\n                  }\n                }\n                lVar7 = *(long *)(context + 8);\n                puVar9 = puVar9 + uVar6;\n                puVar12 = puVar9 + 8;\n                if ((*(int *)(lVar7 + 8) == 5) &&\n                   (*(char *)(*(long *)(context + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(lVar7 + 0x38))(psVar13[7],puVar9);\n                  (**(code **)(*(long *)(context + 8) + 0x38))(psVar13[8],puVar12);\n                  puVar12 = puVar9 + 0x10;\n                }\n                else {\n                  (**(code **)(lVar7 + 0x50))(psVar13[7],puVar9);\n                  (**(code **)(*(long *)(context + 8) + 0x50))(psVar13[8],puVar9 + 4);\n                }\n                target_value_2 = psVar13[7];\n                target_value_1 = psVar13[8];\n              }\n            }\n          }\n          uVar6 = (long)puVar12 - (long)__ptr;\n          uVar8 = uVar6;\n          puVar12 = __ptr;\n          if (uVar6 < output_size) {\n            for (; output_size = uVar6, uVar8 != 0; uVar8 = uVar8 - 1) {\n              *output = *puVar12;\n              puVar12 = puVar12 + (ulong)bVar14 * -2 + 1;\n              output = output + (ulong)bVar14 * -2 + 1;\n            }\n          }\n          free(__ptr);\n          free(build_notes);\n          return output_size;\n        }\n        in_R11 = current_build_note[0xb];\n      } while (in_R11 == 0);\n      build_notes_count = current_build_note[0x10];\n      unaff_RBX = current_build_note[0x11];\n      uVar4 = 0;\n      if (build_notes_count != unaff_RBX) break;\n      current_build_note[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "memcmp",
                "FUN_00116852",
                "qsort",
                "free",
                "sort_gnu_build_notes",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "extract_and_process_gnu_build_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "find_first_child_node_00113d3a",
                "param_1": "node",
                "lVar1": "childNode"
            },
            "code": "\nlong findFirstChildNode_00113d3a(long node)\n\n{\n  long childNode;\n  \n  if (node != 0) {\n    childNode = *(long *)(node + 8);\n    if (childNode == 0) {\n      childNode = debug_make_type_constprop_0(0xc,0);\n      if (childNode == 0) {\n        childNode = 0;\n      }\n      else {\n        *(long *)(childNode + 0x10) = node;\n        *(long *)(node + 8) = childNode;\n      }\n    }\n    return childNode;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_first_child_node_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "display_info.isra.0.cold",
                "main",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "main",
                "section_add_load_file",
                "FUN_00107880",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "param",
                "stab_modify_type": "modifyStab"
            },
            "code": "\nvoid modifyStabType_0010a0d3(long param)\n\n{\n  modifyStab(param,0x42,*(undefined4 *)(*(long *)(param + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_sections_00115530",
                "param_1": "binaryFile",
                "param_2": "sections",
                "param_3": "outputFile",
                "lVar1": "sectionIndex",
                "pcVar2": "currentSection",
                "ppcVar3": "sectionRenameList",
                "cVar4": "result",
                "iVar5": "comparisonResult",
                "uVar6": "newFlags",
                "sVar7": "prefixLength",
                "sVar8": "sectionNameLength",
                "lVar9": "sectionEntry",
                "pcVar10": "prefixString",
                "pcVar11": "sectionAddress",
                "pcVar12": "sectionListEntry",
                "uVar13": "sectionFlags",
                "bVar14": "shouldBeReversed",
                "local_50": "errorMessage",
                "local_48": "modifiedSectionName",
                "local_40": "sectionSizes"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid processSections_00115530(long binaryFile,char **sections,long outputFile)\n\n{\n  long sectionIndex;\n  char *currentSection;\n  char **sectionRenameList;\n  char result;\n  int comparisonResult;\n  uint newFlags;\n  size_t prefixLength;\n  size_t sectionNameLength;\n  long sectionEntry;\n  char *prefixString;\n  char *sectionAddress;\n  char *sectionListEntry;\n  uint sectionFlags;\n  bool shouldBeReversed;\n  long errorMessage;\n  char *modifiedSectionName;\n  long sectionSizes [2];\n  \n  result = is_strip_section_isra_0(sections);\n  if (result != '\\0') {\n    return;\n  }\n  prefixString = *sections;\n  sectionFlags = *(uint *)((long)sections + 0x24);\n  modifiedSectionName = prefixString;\n  sectionRenameList = section_rename_list;\n  if (*(int *)(*(long *)(binaryFile + 8) + 8) != *(int *)(*(long *)(outputFile + 8) + 8)) {\n    sectionFlags = sectionFlags & *(uint *)(*(long *)(binaryFile + 8) + 0x18) &\n             *(uint *)(*(long *)(outputFile + 8) + 0x18);\n  }\n  for (; sectionRenameList != (char **)0x0; sectionRenameList = (char **)sectionRenameList[3]) {\n    comparisonResult = strcmp(*sectionRenameList,prefixString);\n    if (comparisonResult == 0) {\n      if (*(uint *)(sectionRenameList + 2) != 0xffffffff) {\n        sectionFlags = *(uint *)(sectionRenameList + 2);\n      }\n      if (prefixString != sectionRenameList[1]) {\n        modifiedSectionName = sectionRenameList[1];\n        sectionFlags = check_new_section_flags(sectionFlags,outputFile);\n      }\n      break;\n    }\n  }\n  if (((prefix_alloc_sections_string != (char *)0x0) &&\n      (prefixString = prefix_alloc_sections_string, (*(byte *)((long)sections + 0x24) & 1) != 0)) ||\n     (prefixString = prefix_sections_string, prefix_sections_string != (char *)0x0)) {\n    prefixLength = strlen(prefixString);\n    sectionNameLength = strlen(modifiedSectionName);\n    sectionListEntry = (char *)xmalloc(prefixLength + 1 + sectionNameLength);\n    prefixString = strcpy(sectionListEntry,prefixString);\n    modifiedSectionName = strcat(prefixString,modifiedSectionName);\n  }\n  sectionEntry = find_section_list(*sections,0,0x80);\n  shouldBeReversed = false;\n  if (sectionEntry == 0) {\n    if ((strip_symbols == 4) && ((sectionFlags & 0x2000001) != 0)) {\n      comparisonResult = *(int *)(*(long *)(binaryFile + 8) + 8);\n      if (comparisonResult == 5) {\n        if (*(int *)(sections[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(outputFile + 8) + 8) == 5) {\n            shouldBeReversed = (sectionFlags & 0x2000000) == 0;\n            newFlags = ~((-(uint)((sectionFlags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)sections + 0x24) = *(uint *)((long)sections + 0x24) & newFlags;\n          }\n          else {\n            newFlags = 0xfdfffefd;\n          }\n          sectionFlags = sectionFlags & newFlags;\n        }\n      }\n      else if ((comparisonResult != 2) || (comparisonResult = strcmp(*sections,\".buildid\"), comparisonResult != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    sectionFlags = check_new_section_flags(sectionFlags & 0x104 | *(uint *)(sectionEntry + 0x28),outputFile,*sections);\n  }\n  result = bfd_convert_section_setup(binaryFile,sections,outputFile,&modifiedSectionName,sectionSizes);\n  if (result == '\\0') {\n    prefixString = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  prefixString = (char *)bfd_make_section_anyway_with_flags(outputFile,modifiedSectionName,sectionFlags);\n  if (prefixString == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_byte < 0) {\n    if (extract_symbol != '\\0') {\n      sectionSizes[0] = 0;\n      goto LAB_001158e7;\n    }\n    result = bfd_set_section_size(prefixString,sectionSizes[0]);\n    if (result == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    sectionSizes[0] = ((((long)interleave - 1U) + sectionSizes[0]) / (ulong)(long)interleave) *\n                  (long)copy_width;\nLAB_001158e7:\n    result = bfd_set_section_size(prefixString);\n    if (result == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  errorMessage = 0;\n  sectionListEntry = sections[6];\n  sectionEntry = find_section_list(*sections,0,0x18);\n  if (sectionEntry == 0) {\n    prefixString[0x28] = prefixString[0x28] | 1;\n    sectionAddress = *sections;\n    sectionListEntry = sectionListEntry + change_section_address;\n    *(char **)(prefixString + 0x30) = sectionListEntry;\n    *(char **)(prefixString + 0x38) = sectionListEntry;\n    sectionListEntry = sections[7];\n    sectionEntry = find_section_list(sectionAddress,0,0x60);\n    if (sectionEntry == 0) goto LAB_00115695;\nLAB_00115860:\n    sectionAddress = *(char **)(sectionEntry + 0x20);\n    if ((*(byte *)(sectionEntry + 0x14) & 0x40) != 0) {\n      sectionAddress = sectionAddress + (long)sectionListEntry;\n    }\n    *(char **)(prefixString + 0x38) = sectionAddress;\n    sectionEntry = find_section_list(*sections,0,0x200);\n    if (sectionEntry != 0) goto LAB_00115889;\nLAB_001156b8:\n    sectionFlags = *(uint *)((long)sections + 0x7c);\n    if (sectionFlags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(prefixString + 0xb4) = *(undefined4 *)((long)sections + 0xb4);\n    prefixString[0x28] = prefixString[0x28] & 0xcfU | *(byte *)(sections + 5) & 0x30;\n    sections[0xc] = prefixString;\n    sections[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sections + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    result = (**(code **)(*(long *)(outputFile + 8) + 0x158))(binaryFile,sections,outputFile,prefixString);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    sectionAddress = *(char **)(sectionEntry + 0x18);\n    if ((*(byte *)(sectionEntry + 0x14) & 8) == 0) {\n      sectionAddress = sectionAddress + (long)sectionListEntry;\n    }\n    prefixString[0x28] = prefixString[0x28] | 1;\n    currentSection = *sections;\n    *(char **)(prefixString + 0x30) = sectionAddress;\n    *(char **)(prefixString + 0x38) = sectionAddress;\n    sectionListEntry = sections[7];\n    sectionEntry = find_section_list(currentSection,0,0x60);\n    if (sectionEntry != 0) goto LAB_00115860;\nLAB_00115695:\n    sectionAddress = *sections;\n    *(char **)(prefixString + 0x38) = sectionListEntry + change_section_address;\n    sectionEntry = find_section_list(sectionAddress,0,0x200);\n    if (sectionEntry == 0) goto LAB_001156b8;\nLAB_00115889:\n    sectionFlags = *(uint *)(sectionEntry + 0x2c);\n    if (0x3e < sectionFlags) {\n      set_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(prefixString + 0x7c) = sectionFlags;\n    *(undefined4 *)(prefixString + 0xb4) = *(undefined4 *)((long)sections + 0xb4);\n    prefixString[0x28] = prefixString[0x28] & 0xcfU | *(byte *)(sections + 5) & 0x30;\n    sections[0xc] = prefixString;\n    sections[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sections + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    sectionListEntry = sections[0x1a];\n    sectionEntry = group_signature_isra_0(sectionListEntry,sections[0x1c]);\n    if ((sectionEntry == 0) ||\n       (sectionIndex = *(long *)(binaryFile + 8), *(uint *)(sectionEntry + 0x18) = *(uint *)(sectionEntry + 0x18) | 0x20,\n       *(int *)(sectionIndex + 8) != 5)) goto LAB_00115700;\n    *(long *)(sectionListEntry + 0xb0) = sectionEntry;\n    result = (**(code **)(*(long *)(outputFile + 8) + 0x158))(binaryFile,sections,outputFile,prefixString);\n    if (result == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (shouldBeReversed) {\n    *(undefined4 *)(*(long *)(prefixString + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,outputFile,prefixString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "check_new_section_flags",
                "is_strip_section.isra.0",
                "find_section_list",
                "setup_section.cold",
                "strcpy",
                "strcat",
                "strlen",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_convert_section_setup",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_sections_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_stab_type_0010a0bd",
                "param_1": "input_parameter",
                "stab_modify_type": "update_stab_type"
            },
            "code": "\nvoid modify_stab_type_0010a0bd(long input_parameter)\n\n{\n  update_stab_type(input_parameter,0x6b,*(undefined4 *)(*(long *)(input_parameter + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_and_extract_type_00113e5e",
                "param_1": "input_string",
                "param_2": "string_pointer",
                "param_3": "offset",
                "cVar1": "result",
                "local_20": "temp_string"
            },
            "code": "\nundefined8 validate_and_extract_type_00113e5e(undefined8 input_string,char **string_pointer,long offset)\n\n{\n  char result;\n  char *temp_string [2];\n  \n  temp_string[0] = *string_pointer;\n  *string_pointer = (char *)(offset + 2);\n  if ((((long)(char *)(offset + 2) - (long)temp_string[0] < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(temp_string[0],\"type\"), result == '\\0')) ||\n     ((temp_string[0][4] != '$' && (temp_string[0][4] != '.')))) {\n    if (*temp_string[0] != '_') {\n      return 1;\n    }\n    if (temp_string[0][1] != '_') {\n      return 1;\n    }\n    if (temp_string[0][2] != 'o') {\n      return 1;\n    }\n    if (temp_string[0][3] != 'p') {\n      return 1;\n    }\n    temp_string[0] = temp_string[0] + 4;\n  }\n  else {\n    temp_string[0] = temp_string[0] + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(input_string,temp_string,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "validate_and_extract_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "create_new_symbol",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "build_string_0010abdd",
                "param_1": "arg1",
                "param_2": "input1",
                "param_3": "count",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "arg2",
                "param_8": "flag4",
                "lVar1": "data",
                "pcVar2": "str1",
                "bVar3": "byteVal",
                "pcVar4": "str2",
                "__s": "str3",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "charVal1",
                "cVar11": "charVal2",
                "local_52": "localByteVal"
            },
            "code": "\nundefined8\nbuildString_0010abdd(long arg1,char *input1,uint count,char flag1,char flag2,char flag3,\n            undefined8 arg2,char flag4)\n\n{\n  long data;\n  char *str1;\n  byte byteVal;\n  char *str2;\n  char *str3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char charVal1;\n  char charVal2;\n  byte localByteVal;\n  \n  str3 = (char *)0x0;\n  localByteVal = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n  str2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byteVal = 1;\n    if (localByteVal == 0) {\n      byteVal = *(byte *)(*(long *)(arg1 + 0x60) + 0x1c);\n    }\n    localByteVal = byteVal & 1;\n    str3 = (char *)stab_pop_type(arg1);\n  }\n  data = *(long *)(arg1 + 0x60);\n  if ((data == 0) || (str1 = *(char **)(data + 0x30), str1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < count) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      charVal2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      charVal2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    charVal1 = '?';\n    if (flag1 == '\\0') {\n      charVal1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str1);\n    len2 = strlen(str2);\n    len3 = strlen(input1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str3);\n    }\n    result = xrealloc(str1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(data + 0x30) = result;\n    str1 = *(char **)(*(long *)(arg1 + 0x60) + 0x30);\n    len1 = strlen(str1);\n    sprintf(str1 + len1,\"%s:%s;%c%c%c\",str2,input1,(ulong)(byte)(0x32 - (char)count),\n            (ulong)(uint)(int)charVal2,(ulong)(uint)(int)charVal1,len1);\n    free(str2);\n    if (flag4 != '\\0') {\n      str2 = *(char **)(*(long *)(arg1 + 0x60) + 0x30);\n      len1 = strlen(str2);\n      sprintf(str2 + len1,\"%ld;%s;\",arg2,str3);\n      free(str3);\n    }\n    if (localByteVal != 0) {\n      *(undefined *)(*(long *)(arg1 + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "build_string_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_not_coff_00115f30",
                "param_1": "input_flags",
                "param_2": "parameters",
                "param_3": "output_format",
                "uVar1": "first_param",
                "uVar2": "error_message"
            },
            "code": "\nuint dropShareFlagIfNotCOFF_00115f30(uint input_flags,undefined8 *parameters,undefined8 output_format)\n\n{\n  undefined8 first_param;\n  undefined8 error_message;\n  \n  if (((input_flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    first_param = *parameters;\n    input_flags = input_flags & 0xf7ffffff;\n    error_message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(error_message,first_param,output_format);\n  }\n  return input_flags;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "setup_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "tempPointer",
                "piVar2": "currentPointer"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *tempPointer;\n  int *currentPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    tempPointer = (undefined8 *)(inputArray + 4);\n    currentPointer = **(int ***)(undefined8 *)*tempPointer;\n  } while ((inputArray != currentPointer) && (inputArray = currentPointer, currentPointer != (int *)0x0));\n  return ((undefined8 *)*tempPointer)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "debug_get_real_type.isra.0",
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_check_dwo_section_001082b3",
                "uVar1": "result",
                "is_dwo_section_constprop_0": "isDwoSectionConstProp"
            },
            "code": "\nuint invertAndCheckDwoSection_001082b3(void)\n\n{\n  uint result;\n  \n  result = isDwoSectionConstProp();\n  return result ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_check_dwo_section_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_and_extract_archive_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileMode",
                "param_4": "targetStat",
                "param_5": "archFile",
                "param_6": "targetFileMode",
                "param_7": "preserveDates",
                "bVar1": "tempByte",
                "cVar2": "formatCheck",
                "cVar3": "formatCheck2",
                "iVar4": "statusCheck",
                "iVar5": "statCheck",
                "ppcVar6": "archivedFile",
                "pvVar7": "tempBuffer",
                "lVar8": "seekOffset",
                "puVar9": "ptr",
                "piVar10": "errnoLocation",
                "uVar11": "errMsg1",
                "uVar12": "errMsg2",
                "lVar13": "fileSize",
                "puVar14": "bfdPointer",
                "ppcVar16": "sourceArchive",
                "pcVar15": "tempDir",
                "pcVar17": "subPath",
                "pcVar18": "fullName",
                "pcVar20": "closeFunc",
                "local_1a0": "localOutput",
                "local_198": "localPtr",
                "local_158": "objectStat",
                "local_c8": "tempDirArray",
                "uStack_b0": "newFileMode",
                "lStack_98": "fileSizeStat"
            },
            "code": "\nvoid copyAndExtractArchive_00114690(undefined8 inputFile,undefined8 outputFile,int fileMode,undefined8 targetStat,\n                 undefined8 archFile,long targetFileMode,undefined8 preserveDates)\n\n{\n  byte tempByte;\n  char formatCheck;\n  char formatCheck2;\n  int statusCheck;\n  int statCheck;\n  char **archivedFile;\n  void *tempBuffer;\n  long seekOffset;\n  undefined8 *ptr;\n  int *errnoLocation;\n  undefined8 errMsg1;\n  undefined8 errMsg2;\n  long fileSize;\n  undefined8 *bfdPointer;\n  char *tempDir;\n  char **sourceArchive;\n  char *subPath;\n  char *fullName;\n  undefined8 *__ptr;\n  char **ppcVar19;\n  code *closeFunc;\n  long lVar21;\n  uint uVar22;\n  char *pformatCheck3;\n  stat *psVar24;\n  bool bVar25;\n  byte bVar26;\n  undefined8 *localOutput;\n  long *localPtr;\n  stat objectStat;\n  void *tempDirArray [3];\n  uint newFileMode;\n  long fileSizeStat;\n  \n  bVar26 = 0;\n  fileSize = get_file_size();\n  if (fileSize < 1) {\n    if (fileSize == 0) {\n      errMsg2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(errMsg2,inputFile);\n    }\n    status = 1;\n    return;\n  }\n  bfdPointer = (undefined8 *)bfd_openr(inputFile,archFile);\n  if ((bfdPointer == (undefined8 *)0x0) || (statCheck = bfd_stat(bfdPointer,targetStat), statCheck != 0)) {\n    bfd_nonfatal_message(inputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)bfdPointer + 0x44) = *(uint *)((long)bfdPointer + 0x44) | 0x40000;\n  }\n  formatCheck = bfd_check_format(bfdPointer,2);\n  if (formatCheck != '\\0') {\n    if (targetFileMode == 0) {\n      formatCheck = '\\0';\n      targetFileMode = *(long *)bfdPointer[1];\n    }\n    if (fileMode < 0) {\n      localOutput = (undefined8 *)bfd_openw(outputFile,targetFileMode);\n    }\n    else {\n      localOutput = (undefined8 *)bfd_fdopenw(outputFile,targetFileMode,fileMode);\n    }\n    if (localOutput != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        errMsg2 = *bfdPointer;\n        errMsg1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(errMsg1,errMsg2);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(localOutput,bfdPointer,long_section_names);\n      localPtr = localOutput + 0x1f;\n      if ((*(byte *)((long)bfdPointer + 0x49) & 0x10) != 0) {\n        status = 1;\n        bfd_set_error(5);\n        errMsg2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,bfdPointer,0,errMsg2);\n        return;\n      }\n      tempDir = (char *)make_tempdir(*localOutput);\n      if (tempDir == (char *)0x0) {\n        errnoLocation = __errno_location();\n        tempDir = strerror(*errnoLocation);\n        errMsg2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(errMsg2,tempDir);\n      }\n      if (strip_symbols == 7) {\n        tempByte = *(byte *)((long)bfdPointer + 0x49);\n        uVar22 = 0;\n      }\n      else {\n        tempByte = *(byte *)((long)bfdPointer + 0x49);\n        uVar22 = tempByte >> 3 & 1;\n      }\n      bVar25 = deterministic != 0;\n      *(byte *)((long)localOutput + 0x49) =\n           tempByte & 0x10 | (byte)(uVar22 << 3) | *(byte *)((long)localOutput + 0x49) & 0xe7;\n      if (bVar25) {\n        *(uint *)((long)localOutput + 0x44) = *(uint *)((long)localOutput + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      sourceArchive = (char **)bfd_openr_next_archived_file(bfdPointer,0);\n      formatCheck2 = bfd_set_format(localOutput,*(byte *)(bfdPointer + 9) & 7);\n      if (formatCheck2 == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(0,localOutput,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((status == 0 && (sourceArchive != (char **)0x0))) {\n        fullName = *sourceArchive;\n        subPath = fullName;\n        if (*fullName == '/') {\nLAB_0010527d:\n          errMsg2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(errMsg2,fullName);\nLAB_00104e93:\n          status = 1;\n          goto LAB_00114b4b;\n        }\n        while (*subPath != '\\0') {\n          pformatCheck3 = subPath;\n          if ((*subPath == '.') && (pformatCheck3 = subPath + 1, subPath[1] == '.')) {\n            pformatCheck3 = subPath + 2;\n            if ((subPath[2] == '\\0') || (subPath[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pformatCheck3 != '\\0' && (*pformatCheck3 != '/')); pformatCheck3 = pformatCheck3 + 1) {\n          }\n          subPath = pformatCheck3;\n          if (*pformatCheck3 == '/') {\n            copy_and_extract_archive_001052a2();\n            return;\n          }\n        }\n        fullName = (char *)concat(tempDir,&DAT_0011b47d);\n        statCheck = stat(fullName,&objectStat);\n        ptr = __ptr;\n        if (-1 < statCheck) {\n          fileSize = make_tempdir(fullName);\n          free(fullName);\n          if (fileSize == 0) {\n            errnoLocation = __errno_location();\n            fullName = strerror(*errnoLocation);\n            errMsg2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(errMsg2,fullName);\n            goto LAB_00104e93;\n          }\n          ptr = (undefined8 *)xmalloc(0x18);\n          fullName = *sourceArchive;\n          *ptr = __ptr;\n          ptr[2] = 0;\n          ptr[1] = fileSize;\n          fullName = (char *)concat(fileSize,&DAT_0011b47d,fullName);\n        }\n        statCheck = 0;\n        if (preserve_dates != '\\0') {\n          psVar24 = &objectStat;\n          for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n            *(undefined4 *)&psVar24->st_dev = 0;\n            psVar24 = (stat *)((long)psVar24 + (ulong)bVar26 * -8 + 4);\n          }\n          ppcVar19 = (char **)sourceArchive[0x1d];\n          if ((char **)sourceArchive[0x1d] == (char **)0x0) {\n            ppcVar19 = sourceArchive;\n          }\n          statCheck = (**(code **)(ppcVar19[1] + 0x1e8))(sourceArchive,&objectStat);\n          if (statCheck != 0) {\n            subPath = *sourceArchive;\n            errMsg2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(errMsg2,subPath);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = fullName;\n        *__ptr = ptr;\n        __ptr[2] = 0;\n        formatCheck2 = bfd_check_format(sourceArchive,1);\n        if (formatCheck2 == '\\0') {\n          errMsg2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,sourceArchive,0,errMsg2);\n          ppcVar19 = (char **)bfd_openw(fullName,targetFileMode);\n          if (ppcVar19 == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(fullName,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          archivedFile = (char **)sourceArchive[0x1d];\n          if ((char **)sourceArchive[0x1d] == (char **)0x0) {\n            archivedFile = sourceArchive;\n          }\n          statusCheck = (**(code **)(archivedFile[1] + 0x1e8))(sourceArchive);\n          fileSize = fileSizeStat;\n          if (statusCheck == 0) {\n            if (fileSizeStat < 0) {\n              bfd_get_archive_filename(sourceArchive);\n              errMsg2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(errMsg2);\n            }\n            else {\n              statusCheck = bfd_seek(sourceArchive,0,0);\n              if (statusCheck == 0) {\n                if (verbose != '\\0') {\n                  subPath = *ppcVar19;\n                  errMsg2 = bfd_get_archive_filename(sourceArchive);\n                  pformatCheck3 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pformatCheck3,errMsg2,subPath);\n                }\n                tempBuffer = (void *)xmalloc(0x2000);\n                for (; fileSize != 0; fileSize = fileSize - lVar21) {\n                  lVar21 = 0x2000;\n                  if (fileSize < 0x2001) {\n                    lVar21 = fileSize;\n                  }\n                  seekOffset = bfd_bread(tempBuffer,lVar21,sourceArchive);\n                  archivedFile = sourceArchive;\n                  if ((lVar21 != seekOffset) ||\n                     (seekOffset = bfd_bwrite(tempBuffer,lVar21,ppcVar19), archivedFile = ppcVar19,\n                     lVar21 != seekOffset)) {\n                    bfd_nonfatal_message(0,archivedFile,0,0);\n                    free(tempBuffer);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*ppcVar19,newFileMode | 0x100);\n                free(tempBuffer);\n                formatCheck2 = bfd_close_all_done(ppcVar19);\n                if (formatCheck2 == '\\0') {\n                  bfd_nonfatal_message(fullName,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              errMsg2 = bfd_get_archive_filename(sourceArchive);\n              bfd_nonfatal(errMsg2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,sourceArchive,0,0);\n          }\nLAB_00104f00:\n          formatCheck2 = bfd_close_all_done(ppcVar19);\n          if (formatCheck2 == '\\0') {\n            bfd_nonfatal_message(fullName,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(fullName);\n          status = 1;\n        }\n        else {\n          if (formatCheck == '\\0') {\n            ppcVar19 = (char **)bfd_openw(fullName,*(undefined8 *)sourceArchive[1]);\n          }\n          else {\n            ppcVar19 = (char **)bfd_openw(fullName,targetFileMode);\n          }\n          if (ppcVar19 == (char **)0x0) goto LAB_00104e80;\n          formatCheck2 = copy_object(sourceArchive,ppcVar19,preserveDates);\n          if (formatCheck2 == '\\0') {\n            statusCheck = bfd_get_arch(sourceArchive);\n            if (statusCheck == 0) goto LAB_00104d75;\n            formatCheck2 = bfd_close_all_done(ppcVar19);\n            if (formatCheck2 == '\\0') {\n              bfd_nonfatal_message(fullName,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          formatCheck2 = bfd_close(ppcVar19);\n          if (formatCheck2 == '\\0') {\n            bfd_nonfatal_message(fullName,0,0,0);\n            status = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (statCheck == 0)) {\n            set_times(fullName,&objectStat);\n          }\n          fileSize = bfd_openr(fullName,targetFileMode);\n          __ptr[2] = fileSize;\n          *localPtr = fileSize;\n          localPtr = (long *)(fileSize + 0xf0);\n          ppcVar19 = (char **)bfd_openr_next_archived_file(bfdPointer);\n          bfd_close(sourceArchive);\n          sourceArchive = ppcVar19;\n        }\n      }\n      *localPtr = 0;\n      tempBuffer = (void *)xstrdup(*localOutput);\n      if (status == 0) {\n        closeFunc = bfd_close;\n      }\n      else {\n        closeFunc = bfd_close_all_done;\n      }\n      formatCheck = (*closeFunc)(localOutput);\n      if (formatCheck == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(tempBuffer,0,0,0);\n      }\n      free(tempBuffer);\n      tempBuffer = (void *)xstrdup(*bfdPointer);\n      formatCheck = bfd_close(bfdPointer);\n      if (formatCheck == '\\0') {\n        status = 1;\n        bfd_nonfatal_message(tempBuffer,0,0,0);\n      }\n      free(tempBuffer);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdPointer = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdPointer;\n      }\n      rmdir(tempDir);\n      free(tempDir);\n      return;\n    }\nLAB_00105231:\n    close(fileMode);\n    bfd_nonfatal_message(outputFile,0,0,0);\n    status = 1;\n    return;\n  }\n  formatCheck = bfd_check_format_matches(bfdPointer,1,tempDirArray);\n  if (formatCheck == '\\0') {\n    statCheck = bfd_get_error();\n    formatCheck = bfd_check_format_matches(bfdPointer,3,&objectStat);\n    if (formatCheck == '\\0') {\n      statusCheck = bfd_get_error();\n      if (statCheck != statusCheck) {\n        bfd_set_error(statCheck);\n      }\n      bfd_nonfatal_message(inputFile,0,0,0);\n      if (statCheck == 0xd) {\n        list_matching_formats(tempDirArray[0]);\n      }\n      if (statusCheck != 0xd) {\n        status = 1;\n        return;\n      }\n      list_matching_formats(objectStat.st_dev);\n      status = 1;\n      return;\n    }\n    if (statCheck == 0xd) {\n      free(tempDirArray[0]);\n    }\n  }\n  if (targetFileMode == 0) {\n    targetFileMode = *(long *)bfdPointer[1];\n  }\n  if (fileMode < 0) {\n    fileSize = bfd_openw(outputFile,targetFileMode);\n  }\n  else {\n    fileSize = bfd_fdopenw(outputFile,targetFileMode,fileMode);\n  }\n  if (fileSize == 0) goto LAB_00105231;\n  set_long_section_mode(fileSize,bfdPointer,long_section_names);\n  formatCheck = copy_object(bfdPointer,fileSize,preserveDates);\n  if (formatCheck == '\\0') {\n    status = 1;\n  }\n  else if (status == 0) {\n    formatCheck = bfd_close(fileSize);\n    goto LAB_001147d5;\n  }\n  formatCheck = bfd_close_all_done(fileSize);\nLAB_001147d5:\n  if (formatCheck != '\\x01') {\n    status = 1;\n    bfd_nonfatal_message(outputFile,0,0,0);\n    return;\n  }\n  formatCheck = bfd_close(bfdPointer);\n  if (formatCheck == '\\0') {\n    status = 1;\n    bfd_nonfatal_message(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_set_error",
                "bfd_check_format_matches",
                "strerror",
                "list_matching_formats",
                "bfd_openr",
                "close",
                "bfd_stat",
                "fatal",
                "dcgettext",
                "get_file_size",
                "bfd_nonfatal_message",
                "bfd_close_all_done",
                "copy_file.cold",
                "non_fatal",
                "bfd_set_format",
                "free",
                "bfd_get_error",
                "copy_object",
                "bfd_fdopenw",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "__errno_location",
                "set_long_section_mode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_extract_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "push_defined_type_0010b800",
                "param_1": "base_address",
                "param_2": "index",
                "param_3": "is_conditional",
                "plVar1": "type_ptr",
                "uVar2": "result",
                "sVar3": "string_length",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "local_8c": "formatted_string",
                "auStack_8a": "stack_array"
            },
            "code": "\nundefined8 push_defined_type_0010b800(long base_address,int index,char is_conditional)\n\n{\n  long *type_ptr;\n  undefined8 result;\n  size_t string_length;\n  long temp1;\n  long temp2;\n  undefined2 formatted_string;\n  undefined4 stack_array [24];\n  \n  if (index - 1U < 8) {\n    temp1 = base_address + 0xb8;\n    if (is_conditional != '\\0') {\n      temp1 = base_address + 0x78;\n    }\n    type_ptr = (long *)(temp1 + (ulong)(index - 1U) * 8);\n    temp1 = *type_ptr;\n    if (temp1 != 0) {\n      result = stab_push_defined_type_0010b800(base_address,temp1,index);\n      return result;\n    }\n    temp1 = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = temp1 + 1;\n    *type_ptr = temp1;\n    sprintf((char *)&formatted_string,\"%ld=r%ld;\",temp1,temp1);\n    if (is_conditional == '\\0') {\n      temp2 = 1L << ((char)index * '\\b' - 1U & 0x3f);\n      string_length = strlen((char *)&formatted_string);\n      sprintf((char *)((long)&formatted_string + string_length),\"%ld;%ld;\",-temp2,temp2 + -1);\n    }\n    else {\n      string_length = strlen((char *)&formatted_string);\n      *(undefined2 *)((long)&formatted_string + string_length) = 0x3b30;\n      *(undefined *)((long)&formatted_string + string_length + 2) = 0;\n      if (index == 8) {\n        *(undefined4 *)((long)&formatted_string + string_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formatted_string + string_length + 2),\"%ld;\",\n                (1L << ((char)index * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(base_address,&formatted_string,temp1,1,index);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,index);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_float_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "inputSize",
                "param_2": "inputChar",
                "param_3": "inputType",
                "param_4": "outputArr",
                "param_5": "outputSize",
                "uVar1": "maxSize",
                "uVar2": "newSize",
                "cVar3": "isSuccess",
                "pcVar4": "inputString",
                "sVar5": "inputLength",
                "__s": "formattedString",
                "lVar6": "count",
                "__ptr": "poppedType",
                "uVar7": "result",
                "uVar8": "isNew",
                "lVar9": "bytesRemaining",
                "uVar10": "curSize",
                "puVar11": "paddedPtr",
                "bVar12": "paddingByte"
            },
            "code": "\nundefined8 processData_00109ed3(long inputSize,uint inputChar,undefined4 inputType,long *outputArr,ulong *outputSize)\n\n{\n  ulong maxSize;\n  ulong newSize;\n  char isSuccess;\n  char *inputString;\n  size_t inputLength;\n  char *formattedString;\n  long count;\n  void *poppedType;\n  undefined8 result;\n  undefined isNew;\n  long bytesRemaining;\n  ulong curSize;\n  undefined *paddedPtr;\n  byte paddingByte;\n  \n  paddingByte = 0;\n  count = *(long *)(inputSize + 0x60);\n  if (count != 0) {\n    maxSize = *(ulong *)(count + 0x10);\n    if (((long)maxSize < 1) || (outputArr == (long *)0x0)) {\n      isNew = *(undefined *)(count + 0x1c);\n      inputString = (char *)stab_pop_type(inputSize);\n      inputLength = strlen(inputString);\n      formattedString = (char *)xmalloc(inputLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)inputChar,inputString);\n      free(inputString);\n      count = 0;\n    }\n    else {\n      curSize = *outputSize;\n      if (curSize <= maxSize) {\n        if (curSize == 0) {\n          curSize = 10;\n        }\n        for (; curSize <= maxSize; curSize = curSize * 2) {\n        }\n        count = xrealloc(*outputArr,curSize * 8);\n        newSize = *outputSize;\n        *outputArr = count;\n        paddedPtr = (undefined *)(count + newSize * 8);\n        for (bytesRemaining = (curSize - newSize) * 8; bytesRemaining != 0; bytesRemaining = bytesRemaining + -1) {\n          *paddedPtr = 0;\n          paddedPtr = paddedPtr + (ulong)paddingByte * -2 + 1;\n        }\n        *outputSize = curSize;\n      }\n      count = *(long *)(*outputArr + maxSize * 8);\n      if ((count != 0) && (*(char *)(*(long *)(inputSize + 0x60) + 0x1c) == '\\0')) {\n        poppedType = (void *)stab_pop_type(inputSize);\n        free(poppedType);\n        result = stab_push_defined_type(inputSize,count,inputType);\n        return result;\n      }\n      count = *(long *)(inputSize + 0x68);\n      *(long *)(inputSize + 0x68) = count + 1;\n      inputString = (char *)stab_pop_type(inputSize);\n      inputLength = strlen(inputString);\n      formattedString = (char *)xmalloc(inputLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",count,(ulong)inputChar,inputString);\n      free(inputString);\n      isNew = 1;\n      *(long *)(*outputArr + maxSize * 8) = count;\n    }\n    isSuccess = stab_push_string(inputSize,formattedString,count,isNew,inputType);\n    if (isSuccess != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "xrealloc",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "inputString",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "pointer1",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "lVar4": "count",
                "puVar5": "ptr3",
                "pcVar6": "defaultString",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *inputString,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *pointer1;\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  long count;\n  undefined4 *ptr3;\n  char *defaultString;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  defaultString = \"\";\n  if (inputString != (char *)0x0) {\n    defaultString = inputString;\n  }\n  ptr1 = (undefined4 *)xmalloc(0x18);\n  ptr3 = ptr1;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr3 = 0;\n    ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr1 + 2) = defaultString;\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr1;\n  ptr3 = ptr2;\n  for (count = 6; count != 0; count = count + -1) {\n    *ptr3 = 0;\n    ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n  }\n  pointer1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr2 + 2) = ptr1;\n  if (pointer1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr2;\n  }\n  else {\n    *pointer1 = ptr2;\n  }\n  debugInfo[1] = (long)ptr2;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = recognize_input_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "FUN_00107976",
                "bfd_set_format",
                "bfd_nonfatal_message",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_last_symbol_00115d00",
                "param_1": "symbolList",
                "param_2": "context",
                "uVar1": "count",
                "lVar2": "lastSymbol"
            },
            "code": "\nlong findLastSymbol_00115d00(long symbolList,long context)\n\n{\n  uint count;\n  long lastSymbol;\n  \n  lastSymbol = isympp;\n  if (isympp != 0) {\n    if (*(int *)(*(long *)(context + 8) + 8) == 5) {\n      if (*(int *)(symbolList + 0x28) == *(int *)(*(long *)(context + 0x110) + 0xd40)) {\n        count = *(uint *)(symbolList + 0x2c);\n        if (count == 0) {\n          lastSymbol = 0;\n        }\n        else if ((ulong)count <\n                 *(ulong *)(*(long *)(context + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(context + 8) + 0x380) + 0x340) + 5))\n        {\n          lastSymbol = *(long *)(isympp + (ulong)(count - 1) * 8);\n        }\n        else {\n          lastSymbol = 0;\n        }\n      }\n      else {\n        lastSymbol = 0;\n      }\n    }\n    else {\n      lastSymbol = 0;\n    }\n  }\n  return lastSymbol;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_last_symbol_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "create_data_structure_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "type_constant",
                "plVar2": "allocated_data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreate_data_structure_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long type_constant;\n  long *allocated_data;\n  undefined result [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    type_constant = debug_make_type_constprop_0(0x10,0);\n    if (type_constant != 0) {\n      allocated_data = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_data + 0x21) = 0;\n      *allocated_data = input_1;\n      *(undefined4 *)((long)allocated_data + 0x24) = 0;\n      allocated_data[1] = input_2;\n      allocated_data[2] = input_3;\n      allocated_data[3] = input_4;\n      *(undefined *)(allocated_data + 4) = input_5;\n      *(long **)(type_constant + 0x10) = allocated_data;\n      goto LAB_00113caa;\n    }\n  }\n  type_constant = 0;\nLAB_00113caa:\n  result._8_8_ = input_6;\n  result._0_8_ = type_constant;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_data_structure_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "main",
                "set_times.cold",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "section_add_load_file.cold",
                "smart_rename.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "typeValue",
                "plVar3": "slotPtr"
            },
            "code": "\nbool recordDebug_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long typeValue;\n  long *slotPtr;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,4,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,5,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,1,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        typeValue = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (typeValue == 0) {\n          return false;\n        }\n        slotPtr = (long *)coff_get_slot_lto_priv_0(param1,param3);\n        *slotPtr = typeValue;\n        break;\n      case 0xd:\n        typeValue = debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return typeValue != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (param5,*(undefined8 *)(param2 + 8),param6,1,\n                       *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_name_type",
                "debug_tag_type",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_from_xcoff_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "typeCode",
                "pcVar2": "typeName",
                "uVar3": "type",
                "lVar4": "typeAddress",
                "plVar5": "typePointer",
                "uVar6": "negativeTypeCode"
            },
            "code": "\n\n\nlong getTypeFromXCOFF_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint typeCode;\n  char *typeName;\n  undefined8 type;\n  long typeAddress;\n  long *typePointer;\n  uint negativeTypeCode;\n  \n  if ((*param3 == 0) && (typeCode = param3[1], (int)typeCode < 0)) {\n    negativeTypeCode = ~typeCode;\n    if (negativeTypeCode < 0x22) {\n      typeAddress = *(long *)(param2 + 0x90 + (ulong)negativeTypeCode * 8);\n      if (typeAddress == 0) {\n        switch(negativeTypeCode) {\n        case 1:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"char\";\n          break;\n        case 2:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"short\";\n          break;\n        case 3:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"long\";\n          break;\n        case 4:\n          type = debug_make_int_type_isra_0(1,1);\n          typeName = \"unsigned char\";\n          break;\n        case 5:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"signed char\";\n          break;\n        case 6:\n          type = debug_make_int_type_isra_0(2,1);\n          typeName = \"unsigned short\";\n          break;\n        case 7:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned int\";\n          break;\n        case 8:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned\";\n          break;\n        case 9:\n          type = debug_make_int_type_isra_0(4,1);\n          typeName = \"unsigned long\";\n          break;\n        case 10:\n          type = debug_make_void_type_isra_0();\n          typeName = \"void\";\n          break;\n        case 0xb:\n          type = debug_make_float_type_isra_0(4);\n          typeName = \"float\";\n          break;\n        case 0xc:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"double\";\n          break;\n        case 0xd:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"long double\";\n          break;\n        case 0xe:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer\";\n          break;\n        case 0xf:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"boolean\";\n          break;\n        case 0x10:\n          type = debug_make_float_type_isra_0(4);\n          typeName = \"short real\";\n          break;\n        case 0x11:\n          type = debug_make_float_type_isra_0(8);\n          typeName = \"real\";\n          break;\n        case 0x12:\n          typeName = \"stringptr\";\n          type = 0;\n          break;\n        case 0x13:\n          type = debug_make_int_type_isra_0(1,1);\n          typeName = \"character\";\n          break;\n        case 0x14:\n          type = debug_make_type_constprop_0(6,1);\n          typeName = \"logical*1\";\n          break;\n        case 0x15:\n          type = debug_make_type_constprop_0(6,2);\n          typeName = \"logical*2\";\n          break;\n        case 0x16:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"logical*4\";\n          break;\n        case 0x17:\n          type = debug_make_type_constprop_0(6,4);\n          typeName = \"logical\";\n          break;\n        case 0x18:\n          type = debug_make_type_constprop_0(5,8);\n          typeName = \"complex\";\n          break;\n        case 0x19:\n          type = debug_make_type_constprop_0(5,0x10);\n          typeName = \"double complex\";\n          break;\n        case 0x1a:\n          type = debug_make_int_type_isra_0(1,0);\n          typeName = \"integer*1\";\n          break;\n        case 0x1b:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"integer*2\";\n          break;\n        case 0x1c:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"integer*4\";\n          break;\n        case 0x1d:\n          type = debug_make_int_type_isra_0(2,0);\n          typeName = \"wchar\";\n          break;\n        case 0x1e:\n          type = debug_make_int_type_isra_0(8,0);\n          typeName = \"long long\";\n          break;\n        case 0x1f:\n          type = debug_make_int_type_isra_0(8,1);\n          typeName = \"unsigned long long\";\n          break;\n        case 0x20:\n          type = debug_make_type_constprop_0(6,8);\n          typeName = \"logical*8\";\n          break;\n        case 0x21:\n          type = debug_make_int_type_isra_0(8,0);\n          typeName = \"integer*8\";\n          break;\n        default:\n          type = debug_make_int_type_isra_0(4,0);\n          typeName = \"int\";\n        }\n        typeAddress = debug_name_type(param1,typeName,type);\n        *(long *)(param2 + 0x90 + (ulong)negativeTypeCode * 8) = typeAddress;\n        return typeAddress;\n      }\n      return typeAddress;\n    }\n    typeName = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeName,(ulong)typeCode);\n  }\n  else {\n    typePointer = (long *)stab_find_slot(param2);\n    if (typePointer != (long *)0x0) {\n      if (*typePointer == 0) {\n        typeAddress = debug_make_indirect_type_isra_0(typePointer,0);\n        return typeAddress;\n      }\n      return *typePointer;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "dcgettext",
                "debug_make_indirect_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_type.constprop.0",
                "stab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_type_from_xcoff_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_types_0010e07c",
                "param_2": "symbolTable",
                "param_5": "coffHeader",
                "lVar1": "symbolTableEntry",
                "lVar2": "symbolEntryAddress",
                "lVar3": "symbolCount",
                "cVar4": "result",
                "uVar5": "error",
                "__ptr": "parsedTypesList",
                "uVar6": "type",
                "uVar7": "errorMsg",
                "puVar8": "parsedType",
                "pcVar9": "errorMessage",
                "puVar10": "auxiliaryEntry",
                "uVar11": "value",
                "lVar12": "index",
                "iVar13": "var_44",
                "iVar14": "initialSize",
                "local_a8": "local_4",
                "uStack_a4": "uStack_24",
                "uStack_a0": "uStack_20",
                "uStack_9c": "uStack_28",
                "local_88": "symbolName",
                "local_6a": "symbolType",
                "local_68": "symbolClass",
                "local_67": "hasAuxiliary",
                "local_60": "auxiliaryData",
                "local_56": "alignment"
            },
            "code": "\nundefined8\nparseCOFFTypes_0010e07c(undefined8 param_1,long *symbolTable,undefined8 param_3,int param_4,long coffHeader,\n            undefined8 param_6)\n\n{\n  long symbolTableEntry;\n  long symbolEntryAddress;\n  long symbolCount;\n  char result;\n  undefined4 error;\n  void *parsedTypesList;\n  undefined8 type;\n  undefined8 errorMsg;\n  undefined4 *parsedType;\n  char *errorMessage;\n  undefined *auxiliaryEntry;\n  uint value;\n  long index;\n  int var_44;\n  int initialSize;\n  undefined4 local_4;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_28;\n  undefined symbolName [30];\n  undefined2 symbolType;\n  byte symbolClass;\n  byte hasAuxiliary;\n  undefined auxiliaryData [10];\n  ushort alignment;\n  \n  initialSize = 10;\n  index = 0;\n  symbolTableEntry = *(long *)(coffHeader + 0x18);\n  parsedTypesList = (void *)xmalloc(0x50);\n  while ((symbolTable[3] < symbolTableEntry && (symbolTable[2] < symbolTable[1]))) {\n    symbolEntryAddress = *(long *)(*symbolTable + symbolTable[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbolEntryAddress,symbolName);\n    if (result == '\\0') {\n      error = bfd_get_error();\n      type = bfd_errmsg(error);\n      errorMessage = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errorMsg = dcgettext(0,errorMessage,5);\n      non_fatal(errorMsg,type);\n      free(parsedTypesList);\n      return 0;\n    }\n    symbolCount = symbolTable[3];\n    auxiliaryEntry = (undefined *)0x0;\n    symbolTable[2] = symbolTable[2] + 1;\n    symbolTable[3] = symbolCount + 1 + (ulong)hasAuxiliary;\n    if (hasAuxiliary != 0) {\n      auxiliaryEntry = auxiliaryData;\n      result = bfd_coff_get_auxent(param_1,symbolEntryAddress,0,auxiliaryEntry);\n      if (result == '\\0') {\n        error = bfd_get_error();\n        type = bfd_errmsg(error);\n        errorMessage = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbolClass == 0x12) {\n      value = (uint)alignment;\n      var_44 = (int)*(undefined8 *)(symbolEntryAddress + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbolEntryAddress + 0x20) + 0x30);\n    }\n    else {\n      if (symbolClass < 0x13) {\n        if ((symbolClass == 8) || (symbolClass == 0xb)) {\n          value = 0;\n          var_44 = ((int)*(undefined8 *)(symbolEntryAddress + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbolEntryAddress + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbolClass == 0x66) break;\n      value = 0;\n      var_44 = 0;\n    }\nLAB_0010e214:\n    errorMsg = parse_coff_type_lto_priv_0(param_1,symbolTable,param_3,symbolCount,symbolType,auxiliaryEntry,1);\n    type = *(undefined8 *)(symbolEntryAddress + 8);\n    parsedType = (undefined4 *)xmalloc(0x20);\n    local_4 = (undefined4)type;\n    uStack_24 = (undefined4)((ulong)type >> 0x20);\n    uStack_20 = (undefined4)errorMsg;\n    uStack_28 = (undefined4)((ulong)errorMsg >> 0x20);\n    *(undefined8 *)(parsedType + 5) = 0;\n    parsedType[6] = var_44;\n    parsedType[7] = value;\n    parsedType[4] = 0;\n    *parsedType = local_4;\n    parsedType[1] = uStack_24;\n    parsedType[2] = uStack_20;\n    parsedType[3] = uStack_28;\n    if (initialSize <= (int)index + 1) {\n      initialSize = initialSize + 10;\n      parsedTypesList = (void *)xrealloc(parsedTypesList,(long)initialSize << 3,parsedType,0,param_6);\n    }\n    *(undefined4 **)((long)parsedTypesList + index * 8) = parsedType;\n    index = index + 1;\n  }\n  *(undefined8 *)((long)parsedTypesList + (long)(int)index * 8) = 0;\n  type = debug_make_struct_type_isra_0(param_4 == 8,*(undefined2 *)(coffHeader + 10),parsedTypesList);\n  return type;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "parse_coff_type.lto_priv.0",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc",
                "free",
                "debug_make_struct_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_types_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_program_001082c3",
                "undefined8": "void"
            },
            "code": "\nvoid initializeProgram_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_program_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_parse_file_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileContents",
                "iVar1": "lineCount",
                "piVar2": "errorCode",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "fileStream",
                "sVar5": "readSize",
                "ppbVar6": "hashTableSlot",
                "pbVar7": "charPtr",
                "bVar8": "currentChar",
                "pbVar9": "nextChar",
                "pbVar10": "currentLine",
                "pbVar11": "nextLine",
                "pbVar12": "lineStart"
            },
            "code": "\nvoid readAndParseFile_00114460(char *filename,undefined8 hashTable,byte **fileContents)\n\n{\n  int lineCount;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  size_t fileSize;\n  byte *buffer;\n  FILE *fileStream;\n  size_t readSize;\n  byte **hashTableSlot;\n  byte *charPtr;\n  byte currentChar;\n  byte *nextChar;\n  byte *currentLine;\n  byte *nextLine;\n  byte *lineStart;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorCode = __errno_location();\n      errorMessage = strerror(*errorCode);\n      translatedMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedMessage,filename,errorMessage);\n    }\n    readSize = fread(buffer,1,fileSize,fileStream);\n    if ((readSize == 0) || (lineCount = ferror(fileStream), lineCount != 0)) {\n      translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedMessage,filename);\n    }\n    lineCount = 1;\n    fclose(fileStream);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentChar = *buffer;\n    lineStart = buffer;\n    while (currentLine = lineStart, currentChar != 0) {\n      for (; currentChar = *currentLine, nextLine = currentLine, currentChar != 10; currentLine = currentLine + 1) {\n        if ((char)currentChar < '\\v') {\n          if (currentChar == 0) {\n            nextChar = currentLine + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentChar == 0xd) {\n            *currentLine = 0;\n            nextChar = currentLine + 1;\n            if (currentLine[1] == 10) {\n              nextChar = currentLine + 2;\n              nextLine = currentLine + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentChar == 0x23) {\n            parse_input_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        nextLine = currentLine + 1;\n        nextChar = currentLine + 2;\n      }\n      else {\n        nextChar = currentLine + 1;\n      }\nLAB_00114553:\n      currentChar = *lineStart;\n      while ((currentChar == 0x20 || (currentLine = lineStart, currentChar == 9))) {\n        currentLine = lineStart + 1;\n        lineStart = lineStart + 1;\n        currentChar = *currentLine;\n      }\n      do {\n        if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n        if (currentChar == 0) goto LAB_00114599;\n        currentChar = currentLine[1];\n        currentLine = currentLine + 1;\n      } while ((currentChar != 0x20) && (currentChar != 9));\n      if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentChar = currentLine[1];\n        if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n              ((currentChar = currentLine[2], currentChar == 9 || (currentChar == 0x20)))) &&\n             ((currentChar = currentLine[3], currentChar == 9 || (currentChar == 0x20)))) &&\n            ((currentChar = currentLine[4], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentLine[5], currentChar == 9 || (currentChar == 0x20)))) {\n          currentChar = currentLine[6];\n          charPtr = currentLine + 6;\n          if ((currentChar == 9) || (currentChar == 0x20)) {\n            do {\n              do {\n                currentChar = charPtr[1];\n                charPtr = charPtr + 1;\n              } while (currentChar == 0x20);\n            } while (currentChar == 9);\n          }\n        }\n        if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n          translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedMessage,filename,lineCount);\n        }\n      }\nLAB_00114599:\n      *currentLine = 0;\n      if (lineStart < currentLine) {\n        hashTableSlot = (byte **)htab_find_slot(hashTable,lineStart,1);\n        *hashTableSlot = lineStart;\n      }\n      lineCount = lineCount + 1;\n      lineStart = nextChar;\n      currentChar = nextLine[1];\n    }\n    *fileContents = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "strerror",
                "fclose",
                "dcgettext",
                "ferror",
                "get_file_size",
                "fread",
                "xmalloc",
                "fopen",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_parse_file_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "ptr_context",
                "param_2": "data1",
                "param_3": "data2",
                "param_4": "option",
                "__s": "type",
                "pcVar7": "formattedString",
                "uVar8": "result",
                "pcVar9": "flag",
                "cVar1": "value",
                "lVar2": "ctx_ptr",
                "sVar3": "size1",
                "sVar4": "size2",
                "sVar5": "size3",
                "sVar6": "size4"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long ptr_context,char *data1,char *data2,int option)\n\n{\n  char value;\n  long ctx_ptr;\n  char *type;\n  size_t size1;\n  size_t size2;\n  size_t size3;\n  size_t size4;\n  char *formattedString;\n  undefined8 result;\n  char *flag;\n  \n  value = *(char *)(*(long *)(ptr_context + 0x60) + 0x1c);\n  type = (char *)stab_pop_type();\n  formattedString = *(char **)(*(long *)(ptr_context + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    size1 = strlen(formattedString);\n    size2 = strlen(data1);\n    size3 = strlen(type);\n    size4 = strlen(data2);\n    formattedString = (char *)xmalloc(size1 + 10 + size2 + size3 + size4);\n    if (option == 1) {\n      flag = \"/1\";\n    }\n    else {\n      flag = \"/0\";\n      if ((option != 2) && (flag = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(ptr_context + 0x60) + 0x20),data1,flag,\n            type,data2,*(long *)(ptr_context + 0x60));\n    free(*(void **)(*(long *)(ptr_context + 0x60) + 0x20));\n    ctx_ptr = *(long *)(ptr_context + 0x60);\n    *(char **)(ctx_ptr + 0x20) = formattedString;\n    if (value != '\\0') {\n      *(undefined *)(ctx_ptr + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)ctx_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "get_real_type_value_00113b1e",
                "param_1": "input_address",
                "param_2": "unused_parameter",
                "param_3": "input_value",
                "param_4": "return_value",
                "auVar1": "output_value",
                "piVar2": "real_type_info",
                "uVar3": "real_type",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] get_real_type_value_00113b1e(long input_address,undefined8 unused_parameter,ulong input_value,undefined8 return_value)\n\n{\n  undefined output_value [16];\n  int *real_type_info;\n  undefined8 real_type;\n  undefined result [16];\n  \n  if (input_address != 0) {\n    real_type_info = (int *)debug_get_real_type_isra_0(input_address,0);\n    if ((real_type_info == (int *)0x0) || (3 < *real_type_info - 7U)) {\n      real_type = 0;\n    }\n    else {\n      real_type = **(undefined8 **)(real_type_info + 4);\n    }\n    result._8_8_ = return_value;\n    result._0_8_ = real_type;\n    return result;\n  }\n  output_value._8_8_ = 0;\n  output_value._0_8_ = input_value;\n  return output_value << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "get_real_type_value_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "bfd_get_archive_filename"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "generate_stab_string_0010a0e9",
                "param_1": "binaryData",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "flag",
                "uVar2": "returnValue",
                "__s": "typeString",
                "sVar3": "typeStringLength",
                "__s_00": "newString"
            },
            "code": "\nundefined4 generateStabString_0010a0e9(long binaryData,undefined8 value1,undefined8 value2)\n\n{\n  undefined flag;\n  undefined4 returnValue;\n  char *typeString;\n  size_t typeStringLength;\n  char *newString;\n  \n  flag = *(undefined *)(*(long *)(binaryData + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(binaryData + 0x60) + 0x18);\n  typeString = (char *)stab_pop_type();\n  typeStringLength = strlen(typeString);\n  newString = (char *)xmalloc(typeStringLength + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",typeString,value1,value2);\n  free(typeString);\n  returnValue = stab_push_string(binaryData,newString,0,flag,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(newString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_sections_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithLTO",
                "pcVar2": "sectionAddress",
                "sections_removed": "countOfRemovedSections"
            },
            "code": "\nvoid removeSections_00114c20(long binaryAddress)\n\n{\n  char startsWithLTO;\n  char *sectionAddress;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithLTO = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithLTO != '\\0') {\n    sectionAddress = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionAddress = (char *)(binaryAddress + 4);\n    }\n    if (*sectionAddress != '\\0') {\n      find_section_list(sectionAddress,1,0x100);\n    }\n  }\n  countOfRemovedSections = 1;\n  return;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "find_section_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_sections_00115f50",
                "param_1": "symbolTableSize",
                "param_2": "symbolTable",
                "param_3": "isMerging",
                "__s1": "symbolName",
                "uVar1": "comparisonResult",
                "uVar2": "extraValue",
                "extraout_EDX": "edx",
                "plVar3": "updateSectionsList",
                "auVar4": "result",
                "is_strip_section_isra_0": "isStripSection",
                "update_sections": "sectionsToUpdate",
                "extract_symbol": "extractSymbol",
                "strcmp": "compareStrings",
                "merge_notes": "isMergingNotes",
                "param_2[0x1a]": "ltoAttribute"
            },
            "code": "\nuint checkAndUpdateSections_00115f50(long symbolTableSize,char **symbolTable,char isMerging)\n\n{\n  char *symbolName;\n  uint comparisonResult;\n  undefined4 extraValue;\n  undefined4 edx;\n  long *updateSectionsList;\n  undefined result [12];\n  \n  if ((status != 0) || (extractSymbol != '\\0')) {\n    return 1;\n  }\n  result = isStripSection(symbolTable);\n  if (result[0] == '\\0') {\n    if (sectionsToUpdate != (long *)0x0) {\n      symbolName = *symbolTable;\n      updateSectionsList = sectionsToUpdate;\n      do {\n        comparisonResult = compareStrings(symbolName,(char *)updateSectionsList[1]);\n        result._4_4_ = 0;\n        result._0_4_ = comparisonResult;\n        result._8_4_ = edx;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        updateSectionsList = (long *)*updateSectionsList;\n      } while (updateSectionsList != (long *)0x0);\n    }\n    extraValue = result._8_4_;\n    if (((((isMerging == '\\0') || (isMergingNotes == '\\0')) ||\n         (result._8_4_ = extraValue, result._0_8_ = *(long *)(symbolTableSize + 8),\n         *(int *)(*(long *)(symbolTableSize + 8) + 8) != 5)) ||\n        ((result._0_8_ = (ulong)ltoAttribute, *(int *)(ltoAttribute + 4) != 7 ||\n         (result = startswith_lto_priv_0_lto_priv_0(*symbolTable,\".gnu.build.attributes\"),\n         result[0] == '\\0')))) && ((*(byte *)((long)symbolTable + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(result._1_7_,symbolTable[8] == (char *)0x0) |\n             CONCAT31(result._9_3_,symbolTable[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section.isra.0",
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_relocations_in_section",
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_and_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "validate_section_length_001083de",
                "unaff_RBX": "section_length_ptr",
                "unaff_EBP": "section_length",
                "uVar1": "section_length_value",
                "uVar2": "error_message",
                "dcgettext": "get_error_message",
                "fatal": "trigger_fatal_error"
            },
            "code": "\nvoid validate_section_length_001083de(void)\n\n{\n  undefined8 section_length_value;\n  undefined8 error_message;\n  undefined8 *section_length_ptr;\n  undefined4 section_length;\n  \n  section_length_value = *section_length_ptr;\n  error_message = get_error_message(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  trigger_fatal_error(error_message,section_length_value,section_length);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "validate_section_length_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPointer",
                "param_2": "dataSize",
                "lVar1": "tempVar",
                "cVar2": "isIntegerType",
                "__ptr": "ptr",
                "uVar3": "ulongSize",
                "uVar4": "index",
                "local_5a": "outputString"
            },
            "code": "\nvoid processData_0010b948(long dataPointer,uint dataSize)\n\n{\n  long tempVar;\n  char isIntegerType;\n  void *ptr;\n  ulong ulongSize;\n  uint index;\n  char outputString [50];\n  \n  index = dataSize - 1;\n  ulongSize = (ulong)dataSize;\n  if ((index < 0x10) && (tempVar = *(long *)(dataPointer + 0xf8 + (ulong)index * 8), tempVar != 0)) {\n    stab_push_defined_type(dataPointer,tempVar,ulongSize);\n    return;\n  }\n  isIntegerType = stab_int_type_lto_priv_0(dataPointer,4,0);\n  if (isIntegerType != '\\0') {\n    ptr = (void *)stab_pop_type(dataPointer);\n    tempVar = *(long *)(dataPointer + 0x68);\n    *(long *)(dataPointer + 0x68) = tempVar + 1;\n    if (index < 0x10) {\n      *(long *)(dataPointer + 0xf8 + (ulong)index * 8) = tempVar;\n    }\n    sprintf(outputString,\"%ld=r%s;%u;0;\",tempVar,ptr,ulongSize);\n    free(ptr);\n    stab_push_string(dataPointer,outputString,tempVar,1,ulongSize);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_circular_debug_information_00112b6e",
                "param_1": "initial_value",
                "param_2": "debug_information",
                "iVar1": "value",
                "__format": "error_message_format",
                "piVar3": "result",
                "plVar4": "debug_ptr",
                "bVar5": "is_circular",
                "local_18": "current_debug_ptr",
                "local_10": "current_value"
            },
            "code": "\n\n\nint * find_circular_debug_information_00112b6e(int *initial_value,long *debug_information)\n\n{\n  int value;\n  undefined8 uVar2;\n  char *error_message_format;\n  int *result;\n  long *debug_ptr;\n  bool is_circular;\n  long *current_debug_ptr;\n  int *current_value;\n  \n  value = *initial_value;\n  if ((value != 1) && (1 < value - 0x16U)) {\n    return initial_value;\n  }\n  debug_ptr = debug_information;\n  while (debug_ptr != (long *)0x0) {\n    if ((initial_value == (int *)debug_ptr[1]) ||\n       (is_circular = debug_ptr == (long *)*debug_ptr, debug_ptr = (long *)*debug_ptr, is_circular)) {\n      uVar2 = debug_get_type_name_constprop_0\n                        (initial_value,\"debug_get_real_type: circular debug information for %s\\n\");\n      error_message_format = (char *)dcgettext(0);\n      fprintf(_stderr,error_message_format,uVar2);\n      return (int *)0x0;\n    }\n  }\n  current_debug_ptr = debug_information;\n  current_value = initial_value;\n  if (value - 0x16U < 2) {\n    result = (int *)find_circular_debug_information_00112b6e((*(undefined8 **)(initial_value + 4))[1],&current_debug_ptr);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(initial_value + 4);\n  if (initial_value == result) {\n    return initial_value;\n  }\n  if (result == (int *)0x0) {\n    return initial_value;\n  }\n  result = (int *)find_circular_debug_information_00112b6e(result,&current_debug_ptr);\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "debug_get_real_type.isra.0",
                "dcgettext",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_real_type.isra.0",
                "debug_type_samep",
                "debug_write_type.constprop.0",
                "parse_stab_type",
                "debug_get_fields.isra.0"
            ],
            "imported": false,
            "current_name": "find_circular_debug_information_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "config_ptr",
                "param_3": "size",
                "param_4": "option",
                "param_5": "mask",
                "param_6": "flag1",
                "param_7": "flag2",
                "__s": "str_ptr",
                "__s_00": "new_str_ptr",
                "sVar2": "str_length",
                "cVar3": "char_value",
                "uVar1": "result"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 config_ptr,ulong size,undefined option,ulong mask,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *str_ptr;\n  char *new_str_ptr;\n  size_t str_length;\n  char char_value;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    str_ptr = (char *)0x0;\n    char_value = '\\0';\n  }\n  else {\n    char_value = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str_ptr = (char *)stab_pop_type();\n    mask = mask & 0xffffffff;\n    size = size & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(data_ptr,config_ptr,size,option,mask);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (str_ptr == (char *)0x0) {\n        return 0;\n      }\n      str_length = strlen(str_ptr);\n      new_str_ptr = (char *)xmalloc(str_length + 3);\n      sprintf(new_str_ptr,\"~%%%s\",str_ptr);\n      free(str_ptr);\n      if (char_value != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      new_str_ptr = (char *)xmalloc(0x14);\n      sprintf(new_str_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = new_str_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "xmalloc",
                "stab_start_struct_type.lto_priv.0",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_constprop_00113d6e",
                "param_1": "value1",
                "param_2": "value2",
                "lVar1": "result",
                "puVar2": "allocatedMemory"
            },
            "code": "\nlong createConstprop_00113d6e(undefined8 value1,undefined8 value2)\n\n{\n  long result;\n  undefined8 *allocatedMemory;\n  \n  result = debug_make_type_constprop_0(0xb,0);\n  if (result != 0) {\n    allocatedMemory = (undefined8 *)xmalloc(0x10);\n    *allocatedMemory = value1;\n    allocatedMemory[1] = value2;\n    *(undefined8 **)(result + 0x10) = allocatedMemory;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_constprop_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "display_info.isra.0.cold",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "functionPointer1",
                "param_2": "functionPointer2",
                "param_3": "flag"
            },
            "code": "\nvoid executeFunction_00114d50(long functionPointer1,long functionPointer2,uint flag)\n\n{\n  if (*(int *)(*(long *)(functionPointer1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flag == 2) && (*(int *)(*(long *)(functionPointer2 + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(functionPointer2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(functionPointer1 + 8) + 0x380) + 0x78))(functionPointer1,flag != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "display_usage_00108916",
                "param_1": "filePointer",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid displayUsage_00108916(FILE *filePointer,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(filePointer,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(filePointer,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(filePointer,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(filePointer,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(filePointer,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(filePointer,message);\n  list_supported_targets(program_name,filePointer);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(filePointer,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode",
                "param_9": "archiveFilename",
                "param_10": "archive",
                "param_11": "archiveErrorMsg",
                "param_12": "format",
                "in_AL": "boolFlag",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "local_100": "localErrorCode",
                "local_fc": "localErrorFlag",
                "local_f8": "localStackPointer",
                "local_f0": "localBuffer",
                "local_e8": "localErrorMessage",
                "local_c8": "param_13_copy",
                "local_c0": "param_14_copy",
                "local_b8": "param_1_copy",
                "local_a8": "param_2_copy",
                "local_98": "param_3_copy",
                "local_88": "param_4_copy",
                "local_78": "param_5_copy",
                "local_68": "param_6_copy",
                "local_58": "param_7_copy",
                "local_48": "param_8_copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 long archiveFilename,long archive,long *archiveErrorMsg,char *format,undefined8 errorCode3,\n                 undefined8 errorCode4)\n\n{\n  char boolFlag;\n  int bfdError;\n  undefined8 errorMessage;\n  undefined4 localErrorCode;\n  undefined4 localErrorFlag;\n  undefined *localStackPointer;\n  undefined *localBuffer;\n  undefined localErrorMessage [32];\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (boolFlag != '\\0') {\n    param_1_copy = errorCode;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  param_13_copy = errorCode3;\n  param_14_copy = errorCode4;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (archive != 0) {\n    if (archiveFilename == 0) {\n      archiveFilename = bfd_get_archive_filename(archive);\n    }\n    if ((archiveErrorMsg != (long *)0x0) && (*archiveErrorMsg != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFilename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFilename);\nLAB_001127c1:\n  if (format != (char *)0x0) {\n    localStackPointer = &stack0x00000008;\n    localBuffer = localErrorMessage;\n    localErrorCode = 0x20;\n    localErrorFlag = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,format,&localErrorCode);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "bfd_get_error",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "dcgettext",
                "fwrite",
                "fflush",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "copy_object.cold",
                "FUN_0010808f",
                "copy_file.cold",
                "FUN_0010554f",
                "copy_object",
                "main",
                "FUN_001086af",
                "FUN_00108466",
                "copy_relocations_in_section",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "copy_section"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "param_1": "inputValue",
                "lVar1": "debugTypePtr"
            },
            "code": "\nlong initializeDebugType_00113b4a(long inputValue)\n\n{\n  long debugTypePtr;\n  \n  if (inputValue != 0) {\n    debugTypePtr = debug_make_type_constprop_0(0x15,0);\n    if (debugTypePtr == 0) {\n      debugTypePtr = 0;\n    }\n    else {\n      *(long *)(debugTypePtr + 0x10) = inputValue;\n    }\n    return debugTypePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_info_0010edb4",
                "param_1": "fileInfo",
                "param_2": "fileName",
                "param_3": "fileType",
                "param_4": "fileSize",
                "cVar1": "writeSuccess",
                "iVar2": "cmpResult",
                "uVar3": "symbolWriteResult",
                "in_R10": "additionalArg"
            },
            "code": "\nundefined8 updateFileInfo_0010edb4(long fileInfo,undefined8 fileName,undefined4 fileType,ulong fileSize)\n\n{\n  char writeSuccess;\n  int cmpResult;\n  undefined8 symbolWriteResult;\n  undefined8 additionalArg;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < fileSize) {\n    *(ulong *)(fileInfo + 0x1f0) = fileSize;\n  }\n  cmpResult = filename_cmp(fileName);\n  if (cmpResult != 0) {\n    writeSuccess = stab_write_symbol_lto_priv_0(fileInfo,0x84,0,fileSize,fileName);\n    if (writeSuccess == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = fileName;\n  }\n  symbolWriteResult = stab_write_symbol_lto_priv_0\n                    (fileInfo,0x44,fileType,fileSize - *(long *)(fileInfo + 0x200),0,additionalArg);\n  return symbolWriteResult;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_file_info_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "param_1": "input_ptr",
                "param_2": "length",
                "__ptr": "ptr_to_free",
                "__s": "string_to_process",
                "sVar2": "string_length",
                "__s_00": "modified_string",
                "in_R10": "constant_value",
                "iVar3": "iterator",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] reverse_and_modify_0010e5db(long input_ptr,int length)\n\n{\n  char cVar1;\n  void *ptr_to_free;\n  char *string_to_process;\n  size_t string_length;\n  char *modified_string;\n  ulong constant_value;\n  int iterator;\n  undefined result [16];\n  \n  iterator = 0;\n  do {\n    if (length <= iterator) {\n      result = stab_modify_type(input_ptr,0x66,0,input_ptr + 0x188,input_ptr + 400,constant_value);\n      return result;\n    }\n    if (*(char *)(*(long *)(input_ptr + 0x60) + 0x1c) == '\\0') {\n      ptr_to_free = (void *)stab_pop_type(input_ptr);\n      free(ptr_to_free);\n    }\n    else {\n      string_to_process = (char *)stab_pop_type(input_ptr);\n      string_length = strlen(string_to_process);\n      modified_string = (char *)xmalloc(string_length + 3);\n      sprintf(modified_string,\":t%s\",string_to_process);\n      free(string_to_process);\n      cVar1 = stab_write_symbol_lto_priv_0(input_ptr,0x80,0,0,modified_string);\n      if (cVar1 == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = constant_value;\n        return result << 0x40;\n      }\n      free(modified_string);\n    }\n    iterator = iterator + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_modify_type",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_remove_00104d25",
                "param_7": "param",
                "status": "cleanupStatus"
            },
            "code": "\nvoid cleanupAndRemove_00104d25(void)\n\n{\n  undefined8 param;\n  \n  cleanupStatus = 1;\n  bfd_nonfatal_message(0,param,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "FUNC_0010551d"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_0010551d(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  code *pcVar4;\n  undefined8 *puVar5;\n  ulong uVar6;\n  ulong uVar7;\n  char *__s;\n  char cVar8;\n  char cVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *__s_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *puVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppuVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (cVar9 = startswith_lto_priv_0_lto_priv_0(), cVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    cVar9 = bfd_get_full_section_contents();\n    if (cVar9 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (cVar9 = bfd_set_section_size(), cVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      __s_00 = fopen((char *)puVar29[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar29[2],0,0);\n      }\n      else {\n        cVar9 = bfd_malloc_and_get_section();\n        if (cVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,__s_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar17);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        uVar6 = uVar24;\n        uVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = uVar6, uVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            uVar6 = uVar20;\n            uVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUNC_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar37 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *puVar34 = 0;\n      puVar34 = puVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        cVar9 = bfd_get_section_contents();\n        if (cVar9 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                bVar2 = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar13,lVar27,pcVar33);\n                    cVar9 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar9 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)bVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppuVar37 = ppuVar37 + 2;\n    } while (ppuVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar9 = finish_stab(), cVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar28);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (cVar9 = finish_stab(), cVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      cVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          non_fatal(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = debug_set_filename(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (cVar9 = debug_record_function(puStack0000000000000020), cVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = debug_record_line(puStack0000000000000020,iVar11 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar9 != '\\0') {\n                  cVar9 = debug_end_function(puStack0000000000000020);\n                  if (cVar9 == '\\0') goto LAB_00105981;\n                  cVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_lto_priv_0();\n          if (lVar21 == 0) goto LAB_00105981;\n          cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = isympp + in_stack_00000010;\n        plVar15 = isympp;\n        do {\n          uVar10 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar10 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar10 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = add_symbols;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        pcVar4 = (code *)plVar15[4];\n        uVar10 = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = add_sym_list;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = create_new_symbol(puVar29);\n          uVar17 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          cVar9 = *pcVar33;\n          if (cVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            cVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = section_rename_list, (uVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        cVar9 = *pcVar28;\n        if (cVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == cVar9) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uVar10 & 0x82) == 0 && (pcVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          cVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (cVar9 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = cVar9;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          __s = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            sVar18 = strlen(__s);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uVar10 & 0x20) == 0) &&\n           (((uVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uVar10 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uVar10 & 0x82) == 0) && (pcVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  cVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            cVar9 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (cVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(uVar17);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          cVar9 = is_strip_section_isra_0(plVar15[4]);\n          if (cVar9 == '\\0') {\n            if (((uVar10 & 0x800002) == 0) && (pcVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uVar10 & 0x82) != 0) {\n                cVar9 = is_specified_symbol(pcVar28);\n                if ((cVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uVar10 & 1) != 0) && (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pcVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      puVar29 = add_sym_list;\n      iVar11 = add_symbols;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = create_new_symbol(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      cVar9 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (cVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (cVar9 = bfd_set_section_size(lVar25,in_stack_00000110), cVar9 == '\\0')) ||\n         (cVar9 = bfd_set_section_size(lVar27,in_stack_00000140), cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      cVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((cVar9 == '\\0') ||\n         (cVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (puVar29 = add_sections; puVar5 = update_sections, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; puVar5 != (undefined8 *)0x0; puVar5 = (undefined8 *)*puVar5) {\n    uVar17 = *(undefined8 *)(puVar5[5] + 0x60);\n    cVar9 = bfd_set_section_contents(in_stack_00000008,uVar17,puVar5[4],0,puVar5[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, cVar9 != '\\0')) {\n      uVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uVar10;\n      if ((char)uVar10 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        cVar9 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (cVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (cVar9 = startswith_lto_priv_0_lto_priv_0(*puVar29,\".gnu.build.attributes\"), cVar9 != '\\0'))\n    {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (cVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "input"
            },
            "code": "\nvoid hashString_00108800(undefined8 *input)\n\n{\n  htab_hash_string(*input);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_demangle_template",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextPtr",
                "cVar2": "shouldContinue",
                "__ptr": "currentPtr"
            },
            "code": "\nundefined processDebugRecords_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPtr;\n  char shouldContinue;\n  undefined8 *currentPtr;\n  \n  currentPtr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    shouldContinue = debug_record_variable\n                      (param1,currentPtr[1],currentPtr[2],*(undefined4 *)(currentPtr + 3),currentPtr[4],param6,param5\n                      );\n    if (shouldContinue == '\\0') break;\n    nextPtr = (undefined8 *)*currentPtr;\n    free(currentPtr);\n    currentPtr = nextPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "process_debug_records_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_typedef_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "framePointer",
                "unaff_R13": "symbolArray",
                "uVar1": "symbolCount",
                "lVar2": "symbolValue",
                "cVar3": "symbolCheck",
                "puVar4": "outputArray",
                "puVar5": "outputPointer",
                "uVar6": "i",
                "strip_symbols": "symbolType"
            },
            "code": "\nvoid processSymbols_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolValue;\n  char symbolCheck;\n  long baseAddress;\n  undefined8 *outputArray;\n  undefined8 *outputPointer;\n  long framePointer;\n  ulong i;\n  undefined8 *symbolArray;\n  \n  symbolCount = *(uint *)(baseAddress + 0x78);\n  if (symbolType == 7) {\n    outputArray = symbolArray;\n    for (i = 0; i != symbolCount; i = i + 1) {\n      outputPointer = outputArray;\n      if (((*(long **)symbolArray[i] != (long *)0x0) &&\n          (symbolValue = **(long **)symbolArray[i], symbolValue != 0)) &&\n         (symbolCheck = is_specified_symbol(*(undefined8 *)(symbolValue + 8),keep_specific_htab), symbolCheck != '\\0')\n         ) {\n        outputPointer = outputArray + 1;\n        *outputArray = symbolArray[i];\n      }\n      outputArray = outputPointer;\n    }\n    *outputArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(framePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "isEndOfFile",
                "piVar2": "errnoLocation",
                "pcVar3": "errorMessage",
                "uVar4": "translatedMessage",
                "__stream": "filePointer",
                "uVar5": "allocatedMemory",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "allocatedSize"
            },
            "code": "\nvoid readAndStoreFile_00114d60(long fileInfo)\n\n{\n  int isEndOfFile;\n  int *errnoLocation;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  FILE *filePointer;\n  undefined8 allocatedMemory;\n  size_t bytesRead;\n  long totalBytesRead;\n  long allocatedSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errnoLocation = __errno_location();\n    errorMessage = strerror(*errnoLocation);\n    allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n    translatedMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(translatedMessage,allocatedMemory,errorMessage);\n  }\n  allocatedSize = 0x1000;\n  totalBytesRead = 0;\n  allocatedMemory = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n  while( true ) {\n    isEndOfFile = feof(filePointer);\n    if (isEndOfFile != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (totalBytesRead == allocatedSize) {\n      allocatedSize = totalBytesRead * 2;\n      allocatedMemory = xrealloc(*(undefined8 *)(fileInfo + 0x20),allocatedSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocatedMemory;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,allocatedSize - totalBytesRead,filePointer);\n    isEndOfFile = ferror(filePointer);\n    if (isEndOfFile != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  allocatedMemory = *(undefined8 *)(fileInfo + 0x10);\n  translatedMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(translatedMessage,allocatedMemory);\n}\n\n",
            "called": [
                "section_add_load_file.cold",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_store_file_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_missing_section_00108808",
                "unaff_RBP": "basePointer",
                "uVar1": "sectionPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleMissingSection_00108808(void)\n\n{\n  undefined8 sectionPointer;\n  undefined8 errorMessage;\n  long basePointer;\n  \n  sectionPointer = *(undefined8 *)(basePointer + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionPointer);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_missing_section_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_input_lines_00104d1c",
                "unaff_EBP": "index",
                "unaff_R13": "fileHandle",
                "unaff_R14": "lineStart",
                "unaff_R15": "linePtr",
                "in_stack_00000008": "message",
                "in_stack_00000010": "errorPtr",
                "ppbVar2": "slot",
                "pbVar3": "wordPtr",
                "bVar4": "currentChar",
                "pbVar5": "nextLineStart",
                "pbVar6": "wordStart",
                "pbVar7": "lineEnd",
                "pbVar6[1]": "nextChar",
                "htab_find_slot()": "findSlot"
            },
            "code": "\nvoid parseInputLines_00104d1c(void)\n\n{\n  undefined8 uVar1;\n  byte **slot;\n  byte *wordPtr;\n  byte currentChar;\n  byte *nextLineStart;\n  int index;\n  byte *wordStart;\n  undefined8 fileHandle;\n  byte *lineEnd;\n  byte *lineStart;\n  byte *linePtr;\n  undefined8 message;\n  undefined8 *errorPtr;\n  \n  *lineStart = 0;\nLAB_00114520:\n  lineStart = lineStart + 1;\n  do {\n    currentChar = *lineStart;\n    lineEnd = lineStart;\n    if (currentChar == 10) {\n      *lineStart = 0;\n      if (lineStart[1] == 0xd) {\n        lineEnd = lineStart + 1;\n        nextLineStart = lineStart + 2;\n      }\n      else {\n        nextLineStart = lineStart + 1;\n      }\n    }\n    else if ((char)currentChar < '\\v') {\n      if (currentChar != 0) goto LAB_00114520;\n      nextLineStart = lineStart + 1;\n    }\n    else {\n      if (currentChar != 0xd) break;\n      *lineStart = 0;\n      nextLineStart = lineStart + 1;\n      if (lineStart[1] == 10) {\n        nextLineStart = lineStart + 2;\n        lineEnd = lineStart + 1;\n      }\n    }\n    currentChar = *linePtr;\n    while ((currentChar == 0x20 || (wordStart = linePtr, currentChar == 9))) {\n      wordStart = linePtr + 1;\n      linePtr = linePtr + 1;\n      currentChar = *wordStart;\n    }\n    do {\n      if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n      if (currentChar == 0) goto LAB_00114599;\n      currentChar = nextChar;\n      wordStart = wordStart + 1;\n    } while ((currentChar != 0x20) && (currentChar != 9));\n    if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentChar = nextChar;\n      if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n            ((currentChar = wordStart[2], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = wordStart[3], currentChar == 9 || (currentChar == 0x20)))) &&\n          ((currentChar = wordStart[4], currentChar == 9 || (currentChar == 0x20)))) &&\n         ((currentChar = wordStart[5], currentChar == 9 || (currentChar == 0x20)))) {\n        currentChar = wordStart[6];\n        wordPtr = wordStart + 6;\n        if ((currentChar == 9) || (currentChar == 0x20)) {\n          do {\n            do {\n              currentChar = wordPtr[1];\n              wordPtr = wordPtr + 1;\n            } while (currentChar == 0x20);\n          } while (currentChar == 9);\n        }\n      }\n      if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n        uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(uVar1,message,index);\n      }\n    }\nLAB_00114599:\n    *wordStart = 0;\n    if (linePtr < wordStart) {\n      slot = (byte **)findSlot;\n      *slot = linePtr;\n    }\n    index = index + 1;\n    lineStart = nextLineStart;\n    linePtr = nextLineStart;\n    if (lineEnd[1] == 0) {\n      *errorPtr = fileHandle;\n      return;\n    }\n  } while( true );\n  if (currentChar == 0x23) {\n    parseInputLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_input_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_fatal_error_00119940",
                "param_1": "memoryAddress",
                "param_2": "errorMessage",
                "uVar1": "localizedErrorMessage",
                "local_20": "fileErrorMessage"
            },
            "code": "\nvoid checkAndFatalError_00119940(undefined8 memoryAddress,undefined8 errorMessage)\n\n{\n  undefined8 localizedErrorMessage;\n  char *fileErrorMessage [2];\n  \n  bfd_scan_vma(memoryAddress,fileErrorMessage,0);\n  if (*fileErrorMessage[0] == '\\0') {\n    return;\n  }\n  localizedErrorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(localizedErrorMessage,errorMessage,memoryAddress);\n}\n\n",
            "called": [
                "parse_vma.cold",
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_fatal_error_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "main",
                "FUN_00107880",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00104ea2",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_and_write_debug_info_00113a4d",
                "param_1": "write_function",
                "param_2": "debug_info",
                "param_3": "data_block_ptr",
                "param_4": "block_start",
                "param_5": "block_end",
                "cVar1": "result",
                "uVar2": "return_value",
                "puVar3": "block_ptr",
                "auVar4": "line_number_info"
            },
            "code": "\nundefined8\nprocess_and_write_debug_info_00113a4d(undefined8 write_function,undefined8 debug_info,long data_block_ptr,undefined8 block_start,\n            undefined8 block_end)\n\n{\n  char result;\n  undefined8 return_value;\n  undefined8 *block_ptr;\n  undefined line_number_info [16];\n  \n  result = debug_write_linenos_constprop_0(write_function,debug_info,*(undefined8 *)(data_block_ptr + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data_block_ptr + 0x28) == 0 && (*(long *)(data_block_ptr + 8) != 0)) ||\n      (result = stab_start_block_lto_priv_0(debug_info,*(undefined8 *)(data_block_ptr + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(data_block_ptr + 0x28) != (undefined8 *)0x0) {\n      for (block_ptr = (undefined8 *)**(undefined8 **)(data_block_ptr + 0x28); block_ptr != (undefined8 *)0x0;\n          block_ptr = (undefined8 *)*block_ptr) {\n        result = debug_write_name_constprop_0(write_function,debug_info,block_ptr);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (block_ptr = *(undefined8 **)(data_block_ptr + 0x10); block_ptr != (undefined8 *)0x0;\n        block_ptr = (undefined8 *)*block_ptr) {\n      result = process_and_write_debug_info_00113a4d(write_function,debug_info,block_ptr);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    line_number_info = debug_write_linenos_constprop_0(write_function,debug_info,*(undefined8 *)(data_block_ptr + 0x20));\n    if (line_number_info[0] != '\\0') {\n      if ((*(long *)(data_block_ptr + 0x28) == 0) && (*(long *)(data_block_ptr + 8) != 0)) {\n        return line_number_info._0_8_;\n      }\n      return_value = stab_end_block_lto_priv_0\n                        (debug_info,*(undefined8 *)(data_block_ptr + 0x20),line_number_info._8_8_,block_end);\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_block.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "debug_write_name.constprop.0",
                "stab_end_block.lto_priv.0",
                "debug_write_block.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_name.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_and_write_debug_info_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "input",
                "unaff_RBX": "memory_to_release",
                "param_7": "result"
            },
            "code": "\nundefined8 release_memory_001081e9(void)\n\n{\n  undefined8 input;\n  void *memory_to_release;\n  undefined8 result;\n  \n  result = input;\n  free(memory_to_release);\n  return result;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "main",
                "setup_section",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "find_section_list",
                "is_specified_symbol_predicate"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "create_constprop_00113b71",
                "param_1": "input_value",
                "lVar1": "constant_value"
            },
            "code": "\nlong create_constprop_00113b71(long input_value)\n\n{\n  long constant_value;\n  \n  if (input_value != 0) {\n    constant_value = debug_make_type_constprop_0(0x14,0);\n    if (constant_value == 0) {\n      constant_value = 0;\n    }\n    else {\n      *(long *)(constant_value + 0x10) = input_value;\n    }\n    return constant_value;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_constprop_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "push_defined_type_00109dfe",
                "param_1": "param",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid pushDefinedType_00109dfe(long param)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    stab_push_defined_type(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  counter = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = counter + 1;\n  *(long *)(param + 0x70) = counter;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  stab_push_string(param,formattedString,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_to_string_00109bbb",
                "param_1": "inputData",
                "__s": "stringPointer",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolonToString_00109bbb(long inputData)\n\n{\n  char *stringPointer;\n  size_t stringLength;\n  \n  if (*(long *)(inputData + 0x60) != 0) {\n    stringPointer = *(char **)(*(long *)(inputData + 0x60) + 0x30);\n    if (stringPointer != (char *)0x0) {\n      stringLength = strlen(stringPointer);\n      *(undefined2 *)(stringPointer + stringLength) = 0x3b;\n    }\n    return stringPointer != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_to_string_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "assemble_string_0010ae0e",
                "param_1": "input_address",
                "lVar1": "struct_ptr",
                "lVar2": "array_ptr",
                "__ptr": "ptr",
                "pcVar3": "array_element",
                "sVar4": "str_len1",
                "sVar5": "str_len2",
                "pcVar6": "result_str",
                "uVar7": "status",
                "lVar8": "result_length",
                "uVar9": "counter",
                "uVar10": "element_count"
            },
            "code": "\nundefined8 assemble_string_0010ae0e(long input_address)\n\n{\n  long struct_ptr;\n  long array_ptr;\n  void *ptr;\n  char *array_element;\n  size_t str_len1;\n  size_t str_len2;\n  char *result_str;\n  undefined8 status;\n  long result_length;\n  uint counter;\n  ulong element_count;\n  \n  status = 0;\n  struct_ptr = *(long *)(input_address + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (result_str = *(char **)(struct_ptr + 0x20), result_str != (char *)0x0)) {\n    str_len1 = strlen(*(char **)(struct_ptr + 8));\n    str_len2 = strlen(result_str);\n    array_ptr = *(long *)(struct_ptr + 0x28);\n    if (array_ptr == 0) {\n      result_length = str_len1 + str_len2 + 10;\n      element_count = 0;\n    }\n    else {\n      result_length = str_len1 + str_len2 + 0x1e;\n      element_count = 0;\n      while( true ) {\n        result_str = *(char **)(array_ptr + element_count * 8);\n        if (result_str == (char *)0x0) break;\n        str_len1 = strlen(result_str);\n        element_count = (ulong)((int)element_count + 1);\n        result_length = result_length + str_len1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      str_len1 = strlen(*(char **)(struct_ptr + 0x30));\n      result_length = result_length + str_len1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      str_len1 = strlen(*(char **)(struct_ptr + 0x38));\n      result_length = result_length + str_len1;\n    }\n    result_str = (char *)xmalloc(result_length);\n    struct_ptr = *(long *)(input_address + 0x60);\n    strcpy(result_str,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      str_len1 = strlen(result_str);\n      sprintf(result_str + str_len1,\"!%u,\",element_count);\n      while( true ) {\n        struct_ptr = *(long *)(input_address + 0x60);\n        element_count = (ulong)counter;\n        ptr = *(void **)(struct_ptr + 0x28);\n        array_element = *(char **)((long)ptr + element_count * 8);\n        if (array_element == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result_str,array_element);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + element_count * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(input_address + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input_address + 0x60);\n    strcat(result_str,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input_address + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(result_str,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input_address + 0x60) + 0x30) = 0;\n    }\n    str_len1 = strlen(result_str);\n    struct_ptr = *(long *)(input_address + 0x60);\n    *(undefined2 *)(result_str + str_len1) = 0x3b;\n    array_element = *(char **)(struct_ptr + 0x38);\n    if (array_element != (char *)0x0) {\n      strcpy(result_str + str_len1 + 1,array_element);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input_address + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input_address + 0x60) + 8));\n    struct_ptr = *(long *)(input_address + 0x60);\n    *(char **)(struct_ptr + 8) = result_str;\n    status = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return status;\n}\n\n",
            "called": [
                "strcat",
                "strcpy",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "assemble_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "debugInfo",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "currentParam",
                "puVar5": "currentBlock"
            },
            "code": "\nundefined8 processDebugInfo_001135a5(undefined8 param1,undefined8 param2,long debugInfo)\n\n{\n  int index;\n  char result;\n  undefined8 returnValue;\n  undefined8 *currentParam;\n  undefined8 *currentBlock;\n  \n  if (6 < *(uint *)(debugInfo + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(debugInfo + 0x14)) {\n  case 0:\n    result = debug_write_type_constprop_0(param1,param2,*(undefined8 *)(debugInfo + 0x20),debugInfo);\n    if (result != '\\0') {\n      returnValue = stab_typdef_lto_priv_0(param2,*(undefined8 *)(debugInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = debug_write_type_constprop_0(param1,param2,*(undefined8 *)(debugInfo + 0x20),debugInfo);\n    if (result != '\\0') {\n      returnValue = stab_tag_lto_priv_0(param2,*(undefined8 *)(debugInfo + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = debug_write_type_constprop_0\n                      (param1,param2,*(undefined8 *)(*(long *)(debugInfo + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = stab_variable_lto_priv_0\n                        (param2,*(undefined8 *)(debugInfo + 8),**(undefined4 **)(debugInfo + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(debugInfo + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    currentBlock = *(undefined8 **)(debugInfo + 0x20);\n    index = *(int *)(debugInfo + 0x18);\n    returnValue = *(undefined8 *)(debugInfo + 8);\n    result = debug_write_linenos_constprop_0(param1,param2,*(undefined8 *)(currentBlock[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type_constprop_0(param1,param2,*currentBlock,0), result != '\\0')) &&\n       (result = stab_start_function_lto_priv_0(param2,returnValue,index == 2), result != '\\0')) {\n      for (currentParam = (undefined8 *)currentBlock[1]; currentParam != (undefined8 *)0x0;\n          currentParam = (undefined8 *)*currentParam) {\n        result = debug_write_type_constprop_0(param1,param2,currentParam[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = stab_function_parameter_lto_priv_0(param2,currentParam[1],*(undefined4 *)(currentParam + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      currentBlock = (undefined8 *)currentBlock[2];\n      while( true ) {\n        if (currentBlock == (undefined8 *)0x0) {\n          returnValue = stab_end_function_lto_priv_0(param2);\n          return returnValue;\n        }\n        result = debug_write_block_constprop_0(param1,param2,currentBlock);\n        if (result == '\\0') break;\n        currentBlock = (undefined8 *)*currentBlock;\n      }\n    }\n    break;\n  case 4:\n    returnValue = stab_int_constant_lto_priv_0\n                      (param2,*(undefined8 *)(debugInfo + 8),*(undefined8 *)(debugInfo + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(debugInfo + 0x20),param2,*(undefined8 *)(debugInfo + 8));\n    return returnValue;\n  case 6:\n    result = debug_write_type_constprop_0(param1,param2,**(undefined8 **)(debugInfo + 0x20),0);\n    if (result != '\\0') {\n      returnValue = stab_typed_constant_lto_priv_0\n                        (param2,*(undefined8 *)(debugInfo + 8),\n                         *(undefined8 *)(*(long *)(debugInfo + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_end_function.lto_priv.0",
                "stab_variable.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "abort",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "debug_write_block.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_float_constant.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_info_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = recognize_input_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_file_flags",
                "dcgettext",
                "printf",
                "FUN_001152b6",
                "bfd_set_start_address",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)debug_make_volatile_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)debug_make_const_type_isra_0(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)debug_make_pointer_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)debug_make_reference_type_isra_0(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)debug_make_function_type_isra_0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)stab_find_tagged_type(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) ||\n           (plVar4 = (long *)debug_get_fields_isra_0(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)debug_get_type_name_constprop_0(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "stab_find_tagged_type",
                "strncmp",
                "abort",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_type.constprop.0",
                "stab_demangle_v3_arglist",
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "cplus_demangle_print",
                "debug_get_fields.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "strcmp",
                "debug_make_reference_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_v3_arglist"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_lines_00104c36",
                "unaff_RBX": "current_line",
                "unaff_EBP": "line_number",
                "unaff_R13": "file_name",
                "unaff_R14": "line_buffer",
                "unaff_R15": "line_start",
                "in_stack_00000008": "error_msg",
                "in_stack_00000010": "return_address",
                "uVar1": "error_text",
                "ppbVar2": "slot",
                "pbVar3": "temp",
                "pbVar5": "iterator",
                "in_CL": "current_character",
                "bVar4": "next_character"
            },
            "code": "\nvoid parse_lines_00104c36(void)\n\n{\n  undefined8 error_text;\n  byte **slot;\n  byte *temp;\n  byte current_character;\n  byte next_character;\n  byte *current_line;\n  int line_number;\n  byte *iterator;\n  undefined8 file_name;\n  byte *line_buffer;\n  byte *line_start;\n  undefined8 error_msg;\n  undefined8 *return_address;\n  \n  do {\n    iterator = line_start;\n    if (current_character == 9) goto LAB_00104c3f;\n    do {\n      if ((current_character == 10) || (current_character == 0xd)) goto LAB_00114676;\n      if (current_character == 0) goto LAB_00114599;\n      current_character = iterator[1];\n      iterator = iterator + 1;\n    } while ((current_character != 0x20) && (current_character != 9));\n    if ((char)current_character < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_character & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_character = iterator[1];\n      if ((((((next_character == 9) || (next_character == 0x20)) &&\n            ((next_character = iterator[2], next_character == 9 || (next_character == 0x20)))) &&\n           ((next_character = iterator[3], next_character == 9 || (next_character == 0x20)))) &&\n          ((next_character = iterator[4], next_character == 9 || (next_character == 0x20)))) &&\n         ((next_character = iterator[5], next_character == 9 || (next_character == 0x20)))) {\n        next_character = iterator[6];\n        temp = iterator + 6;\n        if ((next_character == 9) || (next_character == 0x20)) {\n          do {\n            do {\n              next_character = temp[1];\n              temp = temp + 1;\n            } while (next_character == 0x20);\n          } while (next_character == 9);\n        }\n      }\n      if ((0xd < next_character) || ((-0x2402L >> (next_character & 0x3f) & 1U) != 0)) {\n        error_text = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_text,error_msg,line_number);\n      }\n    }\nLAB_00114599:\n    *iterator = 0;\n    if (line_start < iterator) {\n      slot = (byte **)htab_find_slot();\n      *slot = line_start;\n    }\n    line_number = line_number + 1;\n    iterator = current_line;\n    if (line_buffer[1] == 0) {\n      *return_address = file_name;\n      return;\n    }\n    for (; next_character = *iterator, line_buffer = iterator, next_character != 10; iterator = iterator + 1) {\n      if ((char)next_character < '\\v') {\n        if (next_character == 0) {\n          temp = iterator + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_character == 0xd) {\n          *iterator = 0;\n          temp = iterator + 1;\n          if (iterator[1] == 10) {\n            temp = iterator + 2;\n            line_buffer = iterator + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_character == 0x23) {\n          parse_input_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *iterator = 0;\n    if (iterator[1] == 0xd) {\n      line_buffer = iterator + 1;\n      temp = iterator + 2;\n    }\n    else {\n      temp = iterator + 1;\n    }\nLAB_00114553:\n    current_character = *current_line;\n    line_start = current_line;\n    while (current_line = temp, current_character == 0x20) {\nLAB_00104c3f:\n      iterator = line_start + 1;\n      line_start = line_start + 1;\n      temp = current_line;\n      current_character = *iterator;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,get_sections,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = gap_fill_set != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_7,*plVar28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,plVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_stab(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = start_stab_constprop_0(unaff_R14,0,plVar28), lVar14 == 0))\n             || ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = parse_stab(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar14 != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,puVar26,0,__ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = isympp;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = add_symbols;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = add_sym_list;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar26 = add_sym_list;\n        iVar10 = add_symbols;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,isympp);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(strip_specific_htab);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(keep_specific_htab), lVar14 != 0 ||\n           (lVar14 = htab_elements(localize_specific_htab), lVar14 != 0)) ||\n          (lVar14 = htab_elements(globalize_specific_htab), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(keepglobal_specific_htab), lVar14 != 0 ||\n          (lVar14 = htab_elements(weaken_specific_htab), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(redefine_specific_htab), lVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar26 = add_sections; puVar4 = update_sections, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = gnu_debuglink_filename\n       , cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "is_strip_section.isra.0",
                "is_specified_symbol",
                "finish_stab",
                "bfd_is_local_label",
                "fatal",
                "bfd_map_over_sections",
                "strlen",
                "concat",
                "dcgettext",
                "bfd_set_section_size",
                "create_new_symbol",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "bfd_set_symtab",
                "htab_find",
                "debug_end_block",
                "copy_section",
                "bfd_coff_get_syment",
                "strcmp",
                "debug_record_function",
                "non_fatal",
                "htab_traverse",
                "free",
                "bfd_map_over_sections",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "free_saved_stabs",
                "strcpy",
                "parse_stab",
                "bfd_alt_mach_code",
                "bfd_decode_symclass",
                "debug_set_filename",
                "bfd_make_section_with_flags",
                "bfd_set_error",
                "bfd_errmsg",
                "debug_record_line",
                "save_stab",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_elements",
                "bfd_fill_in_gnu_debuglink_section",
                "qsort",
                "mark_symbols_used_in_relocations",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_coff_get_auxent",
                "start_stab.constprop.0",
                "bfd_octets_per_byte",
                "get_sections",
                "bfd_set_section_contents",
                "bfd_get_error",
                "xstrdup",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "compare_section_lma",
                "bfd_get_section_contents",
                "parse_coff_symbol.constprop.0.isra.0",
                "is_specified_symbol_predicate",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "FUN_0010554f",
                "stab_find_tagged_type",
                "find_section_list",
                "debug_set_class_id.lto_priv.0",
                "eq_string_redefnode",
                "main",
                "parse_stab",
                "setup_section",
                "is_strip_section_1.isra.0",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_tag_type",
                "convert_efi_target",
                "debug_find_named_type",
                "skip_section"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "format_and_push_string_00109cf4",
                "param_1": "output_buffer",
                "param_2": "input_value",
                "param_3": "flag",
                "local_3c": "formatted_string"
            },
            "code": "\nvoid format_and_push_string_00109cf4(undefined8 output_buffer,undefined8 input_value,undefined4 flag)\n\n{\n  char formatted_string [28];\n  \n  sprintf(formatted_string,\"%ld\",input_value);\n  stab_push_string(output_buffer,formatted_string,input_value,0,flag);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_and_extract_numbers_00109ab1",
                "param_1": "input_string_ptr",
                "param_2": "output_numbers_ptr",
                "param_3": "temp_param_3",
                "param_4": "temp_param_4",
                "param_5": "temp_param_5",
                "uVar1": "parsed_number",
                "pcVar2": "current_char_ptr",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_and_extract_numbers_00109ab1(char **input_string_ptr,undefined4 *output_numbers_ptr,undefined8 temp_param_3,undefined8 temp_param_4,\n            undefined8 temp_param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char_ptr;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char_ptr = *input_string_ptr;\n  if (*current_char_ptr == '(') {\n    *input_string_ptr = current_char_ptr + 1;\n    parsed_number = parse_number(input_string_ptr,0);\n    *output_numbers_ptr = parsed_number;\n    if (**input_string_ptr == ',') {\n      *input_string_ptr = *input_string_ptr + 1;\n      parsed_number = parse_number(input_string_ptr,0,temp_param_3);\n      output_numbers_ptr[1] = parsed_number;\n      if (**input_string_ptr == ')') {\n        current_char_ptr = *input_string_ptr + 1;\n        *input_string_ptr = current_char_ptr;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char_ptr);\n    result = 0;\n  }\n  else {\n    *output_numbers_ptr = 0;\n    current_char_ptr = (char *)parse_number(input_string_ptr,0);\n    output_numbers_ptr[1] = (int)current_char_ptr;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char_ptr >> 8),1);\n  }\n  return_value._8_8_ = temp_param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "parse_number",
                "bad_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_and_extract_numbers_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "section_address",
                "uVar1": "symbol_address",
                "cVar2": "result",
                "uVar3": "section_is_strip",
                "lVar4": "group_signature",
                "lVar5": "current_group_signature"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long section_address)\n\n{\n  undefined8 symbol_address;\n  char result;\n  undefined4 section_is_strip;\n  long group_signature;\n  long current_group_signature;\n  \n  section_is_strip = is_strip_section_1_isra_0();\n  if ((char)section_is_strip == '\\0') {\n    if ((*(byte *)(section_address + 0x27) & 2) == 0) {\n      return section_is_strip;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(section_address + 0xd0),*(undefined8 *)(section_address + 0xe0));\n    if ((group_signature != 0) &&\n       (((symbol_address = *(undefined8 *)(group_signature + 8), strip_symbols != 7 ||\n         (result = is_specified_symbol(symbol_address,keep_specific_htab), result != '\\0')) &&\n        (result = is_specified_symbol(symbol_address,strip_specific_htab), result == '\\0')))) {\n      group_signature = *(long *)(*(long *)(section_address + 0xd0) + 0xc0);\n      current_group_signature = group_signature;\n      do {\n        if (current_group_signature == 0) {\n          return 1;\n        }\n        result = is_strip_section_1_isra_0(current_group_signature);\n        if (result == '\\0') {\n          return section_is_strip;\n        }\n        current_group_signature = *(long *)(*(long *)(current_group_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_group_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0",
                "is_specified_symbol",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "skip_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input",
                "__s": "sourceString",
                "uVar4": "result",
                "uVar1": "flag",
                "uVar3": "value",
                "__s_00": "topString",
                "sVar5": "topStringLength",
                "sVar6": "sourceStringLength",
                "__s_01": "combinedString",
                "lVar2": "data"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input)\n\n{\n  undefined flag;\n  long data;\n  char *sourceString;\n  undefined8 value;\n  undefined4 result;\n  char *topString;\n  size_t topStringLength;\n  size_t sourceStringLength;\n  char *combinedString;\n  \n  data = *(long *)(input + 0x60);\n  if ((data != 0) && (sourceString = *(char **)(data + 0x20), sourceString != (char *)0x0)) {\n    result = *(undefined4 *)(data + 0x18);\n    flag = *(undefined *)(data + 0x1c);\n    value = *(undefined8 *)(data + 0x10);\n    topString = (char *)stab_pop_type();\n    topStringLength = strlen(topString);\n    sourceStringLength = strlen(sourceString);\n    combinedString = (char *)xmalloc(topStringLength + 2 + sourceStringLength);\n    sprintf(combinedString,\"%s%s;\",topString,sourceString);\n    free(topString);\n    free(sourceString);\n    result = stab_push_string(input,combinedString,value,flag,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "handle_file_open_error_0010543c",
                "unaff_RBP": "currentFrameRBP",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar1": "fileHandle",
                "uVar4": "errorString"
            },
            "code": "\nvoid handleFileOpenError_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorString;\n  long currentFrameRBP;\n  \n  errorLocation = __errno_location();\n  errorMessage = strerror(*errorLocation);\n  fileHandle = *(undefined8 *)(currentFrameRBP + 0x10);\n  errorString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(errorString,fileHandle,errorMessage);\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "handle_file_open_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_string_0010a424",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "check",
                "cVar1": "tempChar",
                "bVar2": "tempByte",
                "iVar3": "tempInt",
                "uVar4": "result",
                "pcVar5": "str1",
                "__ptr": "ptrArr",
                "uVar6": "temp",
                "__s": "str2",
                "sVar7": "size1",
                "sVar8": "size2",
                "__s_00": "str3",
                "lVar9": "length1",
                "bVar10": "checkByte",
                "lVar11": "length2",
                "uVar12": "flag2"
            },
            "code": "\nundefined4 generateString_0010a424(long input,char flag,int count,char check)\n\n{\n  char tempChar;\n  byte tempByte;\n  int tempInt;\n  undefined4 result;\n  char *str1;\n  undefined8 *ptrArr;\n  undefined8 temp;\n  char *str2;\n  size_t size1;\n  size_t size2;\n  char *str3;\n  long length1;\n  byte checkByte;\n  long length2;\n  undefined flag2;\n  \n  if ((flag == '\\0') && (tempChar = stab_empty_type_lto_priv_0(), tempChar == '\\0')) {\n    return 0;\n  }\n  checkByte = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n  str1 = (char *)stab_pop_type(input);\n  if (count < 0) {\n    ptrArr = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    flag2 = 1;\n    if (checkByte != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      tempInt = count + 1;\n      ptrArr = (undefined8 *)xmalloc((long)tempInt * 8);\n      length1 = (long)(count + -1);\n      do {\n        tempByte = 1;\n        if (checkByte == 0) {\n          tempByte = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        temp = stab_pop_type(input);\n        checkByte = tempByte & 1;\n        ptrArr[length1] = temp;\n        length1 = length1 + -1;\n      } while ((int)length1 != -1);\n      if (check == '\\0') {\n        tempChar = stab_empty_type_lto_priv_0(input);\n        if (tempChar == '\\0') {\n          return 0;\n        }\n        tempByte = 1;\n        if (checkByte == 0) {\n          tempByte = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        checkByte = tempByte & 1;\n        temp = stab_pop_type(input);\n        ptrArr[(long)tempInt + -1] = temp;\n        count = tempInt;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArr = (undefined8 *)0x0;\n    if (check != '\\0') goto LAB_0010a582;\n    ptrArr = (undefined8 *)xmalloc(8);\n    tempChar = stab_empty_type_lto_priv_0(input);\n    if (tempChar == '\\0') {\n      return 0;\n    }\n    if ((checkByte != 0) || (*(char *)(*(long *)(input + 0x60) + 0x1c) != '\\0')) {\n      temp = stab_pop_type(input);\n      count = 1;\n      flag2 = 1;\n      *ptrArr = temp;\n      goto LAB_0010a596;\n    }\n    temp = stab_pop_type(input);\n    count = 1;\n    *ptrArr = temp;\n  }\n  flag2 = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)stab_pop_type(input);\n  size1 = strlen(str1);\n  size2 = strlen(str2);\n  length1 = size1 + 10 + size2;\n  for (length2 = 0; (int)length2 < count; length2 = length2 + 1) {\n    size1 = strlen((char *)ptrArr[length2]);\n    length1 = length1 + size1;\n  }\n  str3 = (char *)xmalloc(length1);\n  sprintf(str3,\"#%s,%s\",str1,str2);\n  length1 = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    size1 = strlen(str3);\n    if (count <= (int)length1) break;\n    *(undefined2 *)(str3 + size1) = 0x2c;\n    str1 = (char *)ptrArr[length1];\n    length1 = length1 + 1;\n    strcpy(str3 + size1 + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(str3 + size1) = 0x3b;\n  free(ptrArr);\n  result = stab_push_string(input,str3,0,flag2,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  free(str3);\n  return result;\n}\n\n",
            "called": [
                "strcpy",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_empty_type.lto_priv.0",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "versionString",
                "pcVar1": "copyrightMsg"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 versionString)\n\n{\n  char *copyrightMsg;\n  \n  printf(\"GNU %s %s\\n\",versionString,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMsg);\n  copyrightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "display_info.isra.0.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_assignment_00114c80",
                "param_1": "input_string",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "pcVar1": "equals_position",
                "uVar2": "format_string",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] parse_assignment_00114c80(char *input_string,undefined8 value1,undefined8 value2,undefined8 value3)\n\n{\n  char *equals_position;\n  undefined8 format_string;\n  undefined result [16];\n  \n  equals_position = strchr(input_string,0x3d);\n  if (equals_position != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    format_string = xstrndup(input_string,(long)equals_position - (long)input_string);\n    result._0_8_[2] = equals_position + 1;\n    result._0_8_[1] = format_string;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value1;\n    result._8_8_ = value3;\n    return result;\n  }\n  format_string = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(format_string,value2);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_assignment_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_value_and_increment_pointer_0010870e",
                "param_1": "value",
                "param_2": "newValue",
                "param_3": "pointer",
                "puVar1": "targetAddress"
            },
            "code": "\nvoid storeValueAndIncrementPointer_0010870e(undefined8 value,undefined8 newValue,long *pointer)\n\n{\n  undefined8 *targetAddress;\n  \n  targetAddress = (undefined8 *)*pointer;\n  *targetAddress = newValue;\n  *pointer = (long)(targetAddress + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_value_and_increment_pointer_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_ptr",
                "param_2": "ptr_array",
                "param_3": "debug_info_ptr",
                "param_5": "type_code",
                "param_6": "struct_ptr",
                "lVar1": "tmp_var1",
                "cVar2": "tmp_var2",
                "uVar3": "tmp_var3",
                "uVar4": "tmp_var4",
                "lVar5": "type_ptr",
                "uVar6": "tmp_var6",
                "plVar7": "temp_ptr1",
                "__ptr": "tmp_ptr1",
                "__ptr_00": "tmp_ptr2",
                "bVar8": "tmp_var8",
                "iVar9": "tmp_var9",
                "pcVar10": "tmp_ptr3",
                "uVar11": "tmp_var11",
                "lVar12": "tmp_var12",
                "uVar13": "tmp_var13",
                "uVar14": "tmp_var14",
                "uVar15": "tmp_var15",
                "local_68": "local_buffer",
                "local_48": "local_var1",
                "local_47": "local_var2"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_ptr,long *ptr_array,long debug_info_ptr,undefined8 param_4,uint type_code,\n                 long *struct_ptr,char param_7,undefined8 param_8)\n\n{\n  long tmp_var1;\n  char tmp_var2;\n  undefined4 tmp_var3;\n  undefined8 tmp_var4;\n  long type_ptr;\n  undefined8 tmp_var6;\n  long *temp_ptr1;\n  void *tmp_ptr1;\n  void *tmp_ptr2;\n  byte tmp_var8;\n  int tmp_var9;\n  char *tmp_ptr3;\n  ulong tmp_var11;\n  long tmp_var12;\n  uint tmp_var13;\n  uint tmp_var14;\n  undefined8 tmp_var15;\n  undefined local_buffer [32];\n  char local_var1;\n  byte local_var2;\n  \n  type_ptr = *(long *)(coff_ptr + 0x110);\n  if ((~*(uint *)(type_ptr + 0x38) & type_code) != 0) {\n    tmp_var13 = (int)type_code >> ((byte)*(undefined4 *)(type_ptr + 0x44) & 0x1f);\n    tmp_var11 = (ulong)(type_code & *(uint *)(type_ptr + 0x40));\n    tmp_var8 = (byte)*(undefined4 *)(type_ptr + 0x3c);\n    tmp_var13 = (tmp_var13 ^ type_code) & *(uint *)(type_ptr + 0x38) ^ tmp_var13;\n    if (tmp_var11 == 1L << (tmp_var8 & 0x3f)) {\n      tmp_var4 = parse_coff_type_0010dac0(coff_ptr,ptr_array,debug_info_ptr,param_4,tmp_var13,struct_ptr,param_7,param_8);\n      type_ptr = debug_make_pointer_type_isra_0(tmp_var4);\n      return type_ptr;\n    }\n    if (tmp_var11 != 2L << (tmp_var8 & 0x3f)) {\n      if (tmp_var11 != 3L << (tmp_var8 & 0x3f)) {\n        tmp_var4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(type_ptr + 0x3c),\n                          tmp_var13);\n        non_fatal(tmp_var4,type_code);\n        return 0;\n      }\n      tmp_var14 = 0;\n      if (struct_ptr != (long *)0x0) {\n        tmp_var14 = (uint)*(ushort *)(struct_ptr + 2);\n        temp_ptr1 = struct_ptr + 2;\n        for (tmp_var9 = 0; (*(short *)temp_ptr1 != 0 && (tmp_var9 != 3)); tmp_var9 = tmp_var9 + 1) {\n          *(short *)temp_ptr1 = *(short *)((long)temp_ptr1 + 2);\n          temp_ptr1 = (long *)((long)temp_ptr1 + 2);\n        }\n        *(short *)temp_ptr1 = 0;\n      }\n      tmp_var15 = 0;\n      tmp_var4 = param_8;\n      tmp_var6 = parse_coff_type_0010dac0(coff_ptr,ptr_array,debug_info_ptr,param_4,tmp_var13,struct_ptr,0);\n      type_ptr = *(long *)(debug_info_ptr + 0x28);\n      if (type_ptr == 0) {\n        tmp_var4 = debug_make_int_type_isra_0(4,0,tmp_var15,tmp_var4);\n        type_ptr = debug_name_type(param_8,\"int\",tmp_var4);\n        *(long *)(debug_info_ptr + 0x28) = type_ptr;\n      }\n      type_ptr = debug_make_array_type_isra_0(tmp_var6,type_ptr,0,(long)(int)(tmp_var14 - 1),0);\n      return type_ptr;\n    }\n    tmp_var4 = parse_coff_type_0010dac0(coff_ptr,ptr_array,debug_info_ptr,param_4,tmp_var13,struct_ptr,param_7,param_8);\n    type_ptr = debug_make_function_type_isra_0(tmp_var4,0,0);\n    return type_ptr;\n  }\n  if ((struct_ptr != (long *)0x0) && (0 < *struct_ptr)) {\n    temp_ptr1 = (long *)coff_get_slot_lto_priv_0(debug_info_ptr);\n    if (*temp_ptr1 != 0) {\n      return *temp_ptr1;\n    }\n    type_ptr = debug_make_indirect_type_isra_0(temp_ptr1,0);\n    return type_ptr;\n  }\n  if (param_7 == '\\0') {\n    struct_ptr = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    type_ptr = debug_make_void_type_isra_0();\n    return type_ptr;\n  }\n  type_ptr = *(long *)(debug_info_ptr + 8 + (long)(int)type_code * 8);\n  if (type_ptr != 0) {\n    return type_ptr;\n  }\n  switch(type_code) {\n  default:\n    tmp_var4 = debug_make_void_type_isra_0();\n    tmp_ptr3 = \"void\";\n    break;\n  case 2:\n    tmp_var4 = debug_make_int_type_isra_0(1,0);\n    tmp_ptr3 = \"char\";\n    break;\n  case 3:\n    tmp_var4 = debug_make_int_type_isra_0(2,0);\n    tmp_ptr3 = \"short\";\n    break;\n  case 4:\n    tmp_var4 = debug_make_int_type_isra_0(4,0);\n    tmp_ptr3 = \"int\";\n    break;\n  case 5:\n    tmp_var4 = debug_make_int_type_isra_0(4,0);\n    tmp_ptr3 = \"long\";\n    break;\n  case 6:\n    tmp_var4 = debug_make_float_type_isra_0(4);\n    tmp_ptr3 = \"float\";\n    break;\n  case 7:\n    tmp_var4 = debug_make_float_type_isra_0(8);\n    tmp_ptr3 = \"double\";\n    break;\n  case 8:\n    if (struct_ptr == (long *)0x0) {\n      type_ptr = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    tmp_var4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (struct_ptr == (long *)0x0) {\n      type_ptr = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    tmp_var4 = 9;\nLAB_0010de7a:\n    type_ptr = parse_coff_struct_type(coff_ptr,ptr_array,debug_info_ptr,tmp_var4,struct_ptr,param_8);\nLAB_0010e046:\n    temp_ptr1 = (long *)coff_get_slot_lto_priv_0(debug_info_ptr,param_4);\n    *temp_ptr1 = type_ptr;\n    return type_ptr;\n  case 10:\n    if (struct_ptr == (long *)0x0) {\n      type_ptr = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      type_ptr = struct_ptr[3];\n      tmp_ptr1 = (void *)xmalloc(0x50);\n      tmp_ptr2 = (void *)xmalloc(0x50);\n      tmp_var12 = 0;\n      do {\n        while( true ) {\n          if ((type_ptr <= ptr_array[3]) || (ptr_array[1] <= ptr_array[2])) goto LAB_0010e032;\n          tmp_var9 = (int)tmp_var12;\n          tmp_var1 = *(long *)(*ptr_array + ptr_array[2] * 8);\n          tmp_var2 = bfd_coff_get_syment(coff_ptr,tmp_var1,local_buffer);\n          tmp_var12 = (long)tmp_var9;\n          if (tmp_var2 == '\\0') {\n            tmp_var3 = bfd_get_error();\n            tmp_var4 = bfd_errmsg(tmp_var3);\n            tmp_var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(tmp_var6,tmp_var4);\n            free(tmp_ptr1);\n            free(tmp_ptr2);\n            type_ptr = 0;\n            goto LAB_0010e046;\n          }\n          ptr_array[2] = ptr_array[2] + 1;\n          ptr_array[3] = (ulong)local_var2 + 1 + ptr_array[3];\n          if (local_var1 != '\\x10') break;\n          if ((int)type_code <= tmp_var9 + 1) {\n            type_code = type_code + 10;\n            tmp_ptr1 = (void *)xrealloc(tmp_ptr1);\n            tmp_ptr2 = (void *)xrealloc(tmp_ptr2,(long)(int)type_code << 3);\n          }\n          tmp_var12 = *(long *)(tmp_var1 + 0x20);\n          *(undefined8 *)((long)tmp_ptr1 + (long)tmp_var9 * 8) = *(undefined8 *)(tmp_var1 + 8);\n          *(long *)((long)tmp_ptr2 + (long)tmp_var9 * 8) =\n               *(long *)(tmp_var1 + 0x10) + *(long *)(tmp_var12 + 0x30);\n          tmp_var12 = (long)(tmp_var9 + 1);\n        }\n      } while (local_var1 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)tmp_ptr1 + tmp_var12 * 8) = 0;\n      type_ptr = debug_make_enum_type_isra_0(tmp_ptr1,tmp_ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    type_ptr = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    tmp_var4 = debug_make_int_type_isra_0(1,1);\n    tmp_ptr3 = \"unsigned char\";\n    break;\n  case 0xd:\n    tmp_var4 = debug_make_int_type_isra_0(2,1);\n    tmp_ptr3 = \"unsigned short\";\n    break;\n  case 0xe:\n    tmp_var4 = debug_make_int_type_isra_0(4,1);\n    tmp_ptr3 = \"unsigned int\";\n    break;\n  case 0xf:\n    tmp_var4 = debug_make_int_type_isra_0(4,1);\n    tmp_ptr3 = \"unsigned long\";\n    break;\n  case 0x10:\n    tmp_var4 = debug_make_float_type_isra_0(0xc);\n    tmp_ptr3 = \"long double\";\n  }\n  type_ptr = debug_name_type(param_8,tmp_ptr3,tmp_var4);\nLAB_0010e065:\n  *(long *)(debug_info_ptr + 8 + (long)(int)type_code * 8) = type_ptr;\n  return type_ptr;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "coff_get_slot.lto_priv.0",
                "free",
                "debug_make_indirect_type.isra.0",
                "bfd_get_error",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_array_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment",
                "debug_make_enum_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "comparisonResult",
                "auVar2": "result",
                "iVar1": "strncmpResult",
                "in_RAX": "unknownValue"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int strncmpResult;\n  undefined8 unknownValue;\n  size_t length;\n  undefined4 comparisonResult;\n  undefined result [16];\n  \n  length = strlen(string2);\n  strncmpResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(comparisonResult,strncmpResult) >> 8);\n  result[0] = strncmpResult == 0;\n  result._8_8_ = unknownValue;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "main",
                "stab_demangle_function_name.constprop.0",
                "handle_remove_section_option",
                "parse_stab_type",
                "FUN_0010554f",
                "convert_efi_target",
                "FUN_00107880",
                "skip_section",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "handle_time_setting_error_0010882c",
                "piVar1": "errorPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleTimeSettingError_0010882c(void)\n\n{\n  int *errorPtr;\n  undefined8 errorMessage;\n  \n  errorPtr = __errno_location();\n  strerror(*errorPtr);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  non_fatal(errorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "handle_time_setting_error_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_with_prefix_0010ebb0",
                "param_1": "param1",
                "param_2": "prefix",
                "param_3": "length",
                "param_4": "param4",
                "__s": "symbol",
                "uVar2": "index",
                "uVar3": "result",
                "__s_00": "combinedSymbol",
                "cVar1": "character",
                "sVar4": "prefixLength",
                "sVar5": "symbolLength"
            },
            "code": "\nundefined4 writeSymbolWithPrefix_0010ebb0(undefined8 param1,char *prefix,int length,undefined8 param4)\n\n{\n  char character;\n  uint index;\n  undefined4 result;\n  char *symbol;\n  size_t prefixLength;\n  size_t symbolLength;\n  char *combinedSymbol;\n  \n  symbol = (char *)stab_pop_type();\n  index = length - 1;\n  if (index < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)index * 4);\n    character = *(char *)((long)&CSWTCH_43 + (ulong)index);\n    prefixLength = strlen(prefix);\n    symbolLength = strlen(symbol);\n    combinedSymbol = (char *)xmalloc(prefixLength + 3 + symbolLength);\n    sprintf(combinedSymbol,\"%s:%c%s\",prefix,(ulong)(uint)(int)character,symbol);\n    free(symbol);\n    result = stab_write_symbol_lto_priv_0(param1,result,0,param4,combinedSymbol);\n    if ((char)result != '\\0') {\n      free(combinedSymbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_prefix_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_type_constprop_00113b98",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "lVar1": "type_constprop_result",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong create_type_constprop_00113b98(long input_1,long input_2,long input_3,undefined input_4)\n\n{\n  long type_constprop_result;\n  long *allocated_memory;\n  \n  if ((input_1 != 0) && (type_constprop_result = debug_make_type_constprop_0(0x13,0), type_constprop_result != 0)) {\n    allocated_memory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input_1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input_2;\n    allocated_memory[2] = input_3;\n    *(undefined *)(allocated_memory + 3) = input_4;\n    *(long **)(type_constprop_result + 0x10) = allocated_memory;\n    return type_constprop_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_type_constprop_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_symbol_existence_00115d70",
                "param_1": "symbol",
                "param_2": "symbolTable",
                "lVar1": "result",
                "local_18": "symbolReference",
                "local_10": "isSymbolPresent"
            },
            "code": "\nundefined checkSymbolExistence_00115d70(undefined8 symbol,undefined8 symbolTable)\n\n{\n  long result;\n  undefined8 symbolReference;\n  undefined isSymbolPresent;\n  \n  if (wildcard == '\\0') {\n    result = htab_find(symbolTable,symbol);\n    isSymbolPresent = result != 0;\n  }\n  else {\n    isSymbolPresent = 0;\n    symbolReference = symbol;\n    htab_traverse(symbolTable,is_specified_symbol_predicate,&symbolReference);\n  }\n  return isSymbolPresent;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_traverse",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_0010554f",
                "copy_relocations_in_section.cold"
            ],
            "imported": false,
            "current_name": "check_symbol_existence_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_performance_analysis_00104000",
                "ctx": "context",
                "iVar1": "performanceResult"
            },
            "code": "\nint initializePerformanceAnalysis_00104000(EVP_PKEY_CTX *context)\n\n{\n  int performanceResult;\n  \n  performanceResult = __gmon_start__();\n  return performanceResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_performance_analysis_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "merge_gnu_build_notes",
                "add_redefine_and_check",
                "list_matching_formats",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "finish_stab",
                "stab_struct_field.lto_priv.0",
                "bad_stab",
                "copy_usage",
                "main",
                "debug_name_type",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "stab_write_symbol.lto_priv.0",
                "debug_write_type.constprop.0",
                "get_file_size.cold",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "display_info.isra.0",
                "debug_end_block",
                "add_specific_symbols",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "parse_coff_struct_type",
                "endian_string",
                "debug_end_function",
                "copy_section.cold",
                "debug_start_block",
                "copy_object",
                "parse_vma.cold",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "parse_number",
                "print_version",
                "create_new_symbol.cold",
                "FUN_00107880",
                "copy_file",
                "do_display_target",
                "stab_demangle_v3_arg",
                "debug_record_line",
                "list_supported_targets",
                "FUN_0010554f",
                "init_section_add.cold",
                "debug_record_variable",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "FUN_00116490",
                "setup_section.cold",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00108179",
                "stab_demangle_v3_arglist",
                "FUN_00104cc1",
                "stab_bad_demangle",
                "setup_section",
                "get_file_size",
                "section_add_load_file.cold",
                "stab_find_slot",
                "FUN_00105828",
                "copy_object.cold",
                "set_times.cold",
                "FUN_0010808f",
                "stab_find_type",
                "FUN_001152b6",
                "stab_int_type.lto_priv.0",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "FUN_001086af",
                "FUN_00107976",
                "check_new_section_flags.cold",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "FUN_00114dc7",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "resize_and_insert_00109be3",
                "param_1": "array",
                "param_2": "element",
                "param_3": "size",
                "uVar1": "newArray",
                "puVar2": "insertionPoint",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 resizeAndInsert_00109be3(long array,undefined8 element,undefined4 size)\n\n{\n  undefined8 newArray;\n  undefined8 *insertionPoint;\n  uint currentSize;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    currentSize = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = currentSize;\n    newArray = xrealloc(*(undefined8 *)(array + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(array + 0x20) = newArray;\n  }\n  currentSize = *(uint *)(array + 0x28);\n  insertionPoint = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(array + 0x20));\n  *insertionPoint = element;\n  *(undefined4 *)(insertionPoint + 1) = size;\n  *(uint *)(array + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)insertionPoint >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "resize_and_insert_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "main",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "create_symbol_with_length_0010e918",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "value",
                "__s": "type",
                "sVar2": "nameLength",
                "sVar3": "typeLength",
                "__s_00": "symbolString",
                "uVar1": "result"
            },
            "code": "\nundefined4 createSymbolWithLength_0010e918(undefined8 symbolTable,char *name,undefined8 value)\n\n{\n  undefined4 result;\n  char *type;\n  size_t nameLength;\n  size_t typeLength;\n  char *symbolString;\n  \n  type = (char *)stab_pop_type();\n  nameLength = strlen(name);\n  typeLength = strlen(type);\n  symbolString = (char *)xmalloc(nameLength + 0x14 + typeLength);\n  sprintf(symbolString,\"%s:c=e%s,%ld\",name,type,value);\n  free(type);\n  result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,symbolString);\n  if ((char)result != '\\0') {\n    free(symbolString);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "create_symbol_with_length_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "handle_section_00116110",
                "param_1": "binaryFile",
                "param_2": "sectionHeader",
                "param_3": "outputBFD",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "lVar3": "sectionOffset",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "errorFlag",
                "uVar7": "errorString",
                "__ptr": "sectionContents",
                "lVar8": "loopVar1",
                "uVar9": "loopVar2",
                "iVar10": "reverseBytes",
                "uVar11": "loopVar3",
                "puVar12": "tempPtr",
                "lVar13": "tempVar3",
                "puVar14": "tempPtr2",
                "puVar15": "tempPtr3",
                "pvVar16": "tempPtr4",
                "uVar17": "tempVar4",
                "uVar18": "tempVar5",
                "uVar19": "tempVar6",
                "bVar20": "tempByte",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid handleSection_00116110(undefined8 binaryFile,undefined8 *sectionHeader,undefined8 outputBFD)\n\n{\n  undefined tempVar1;\n  undefined8 tempVar2;\n  long sectionOffset;\n  int copyWidth;\n  int copyByte;\n  char errorFlag;\n  undefined8 errorString;\n  undefined8 *sectionContents;\n  long loopVar1;\n  ulong loopVar2;\n  int reverseBytes;\n  ulong loopVar3;\n  undefined *tempPtr;\n  long tempVar3;\n  undefined8 *tempPtr2;\n  undefined8 *tempPtr3;\n  void *tempPtr4;\n  ulong tempVar4;\n  ulong tempVar5;\n  ulong tempVar6;\n  byte tempByte;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  tempByte = 0;\n  errorFlag = skip_section(binaryFile,sectionHeader,1);\n  if (errorFlag != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeader[8];\n  sectionOffset = sectionHeader[0xc];\n  if (((*(byte *)((long)sectionHeader + 0x25) & 1) == 0) || ((*(byte *)(sectionOffset + 0x25) & 1) == 0)) {\n    tempVar3 = find_section_list(*sectionHeader,0,0x80);\n    if (tempVar3 == 0) {\n      return;\n    }\n    if ((*(byte *)(tempVar3 + 0x29) & 1) == 0) {\n      return;\n    }\n    sectionContents = (undefined8 *)xmalloc(sectionSize);\n    tempPtr3 = sectionContents;\n    if (7 < sectionSize) {\n      for (tempVar5 = sectionSize >> 3; tempVar5 != 0; tempVar5 = tempVar5 - 1) {\n        *tempPtr3 = 0;\n        tempPtr3 = tempPtr3 + (ulong)tempByte * -2 + 1;\n      }\n    }\n    tempPtr2 = tempPtr3;\n    if ((sectionSize & 4) != 0) {\n      tempPtr2 = (undefined8 *)((long)tempPtr3 + (ulong)tempByte * -8 + 4);\n      *(undefined4 *)tempPtr3 = 0;\n    }\n    tempPtr3 = tempPtr2;\n    if ((sectionSize & 2) != 0) {\n      tempPtr3 = (undefined8 *)((long)tempPtr2 + (ulong)tempByte * -4 + 2);\n      *(undefined2 *)tempPtr2 = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)tempPtr3 = 0;\n    }\n    errorFlag = bfd_set_section_contents(outputBFD,sectionOffset,sectionContents,0);\n    if (errorFlag != '\\0') {\n      free(sectionContents);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputBFD,sectionOffset,0);\n    free(sectionContents);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  errorFlag = bfd_get_full_section_contents(binaryFile,sectionHeader,&sectionContent);\n  if ((errorFlag == '\\0') ||\n     (errorFlag = bfd_convert_section_contents(binaryFile,sectionHeader,outputBFD,&sectionContent,&sectionSize),\n     reverseBytes = reverse_bytes, errorFlag == '\\0')) {\n    bfd_set_section_size(sectionOffset,0);\n    status = 1;\n    bfd_nonfatal_message(0,binaryFile,sectionHeader,0);\n    free(sectionContent);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    tempVar5 = (ulong)reverse_bytes;\n    if (sectionSize % tempVar5 != 0) {\n      tempVar2 = *sectionHeader;\n      errorString = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorString,tempVar2,reverseBytes);\n    }\n    reverseBytes = reverse_bytes / 2;\n    loopVar3 = 0;\n    while (tempVar6 = loopVar3, copyWidth = copy_width, copyByte = copy_byte, tempVar6 < sectionSize) {\n      loopVar3 = tempVar5 + tempVar6;\n      tempVar4 = loopVar3;\n      for (loopVar2 = 0; loopVar2 < (ulong)(long)reverseBytes; loopVar2 = loopVar2 + 1) {\n        tempVar4 = tempVar4 - 1;\n        tempPtr = (undefined *)(tempVar6 + loopVar2 + (long)sectionContent);\n        tempVar1 = *tempPtr;\n        *tempPtr = *(undefined *)((long)sectionContent + tempVar4);\n        *(undefined *)((long)sectionContent + tempVar4) = tempVar1;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    tempVar5 = (ulong)interleave;\n    reverseBytes = (int)((ulong)sectionHeader[7] % tempVar5);\n    loopVar3 = ((long)copyByte - (long)reverseBytes) + (long)sectionContent;\n    if (copyByte < reverseBytes) {\n      loopVar3 = loopVar3 + tempVar5;\n    }\n    tempVar3 = (sectionSize + (long)sectionContent) - loopVar3;\n    tempPtr4 = sectionContent;\n    for (; loopVar3 < sectionSize + (long)sectionContent; loopVar3 = loopVar3 + tempVar5) {\n      for (loopVar1 = 0; ((int)loopVar1 < copyWidth && (loopVar1 != tempVar3)); loopVar1 = loopVar1 + 1) {\n        *(undefined *)((long)tempPtr4 + loopVar1) = *(undefined *)(loopVar3 + loopVar1);\n      }\n      tempPtr4 = (void *)((long)tempPtr4 + loopVar1);\n      tempVar3 = tempVar3 - tempVar5;\n    }\n    sectionSize = ((((tempVar5 - 1) + sectionSize) - (long)copyByte) / tempVar5) * (long)copyWidth;\n    tempVar5 = *(ulong *)(sectionOffset + 0x38) / tempVar5;\n    *(ulong *)(sectionOffset + 0x38) = tempVar5;\n    if (copyByte < reverseBytes) {\n      *(ulong *)(sectionOffset + 0x38) = tempVar5 + 1;\n      errorFlag = bfd_set_section_contents(outputBFD,sectionOffset,sectionContent,0,sectionSize);\n      if (errorFlag == '\\0') {\n        free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  errorFlag = bfd_set_section_contents(outputBFD,sectionOffset,sectionContent,0,sectionSize);\n  if (errorFlag == '\\0') {\n    free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_nonfatal_message",
                "find_section_list",
                "free",
                "bfd_get_full_section_contents",
                "skip_section",
                "xmalloc",
                "bfd_set_section_contents",
                "copy_section.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "handle_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type",
                "mark_symbols_used_in_relocations.cold",
                "stab_typdef.lto_priv.0",
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "copy_file",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_unknown_error_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printUnknownError_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_unknown_error_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "end_debug_block_0010bf20",
                "param_1": "blockPointer",
                "param_2": "newValue",
                "param_3": "unusedParam",
                "param_4": "returnValue",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnArray"
            },
            "code": "\n\n\nundefined  [16] endDebugBlock_0010bf20(long blockPointer,undefined8 newValue,undefined8 unusedParam,undefined8 returnValue)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnArray [16];\n  \n  if ((*(long *)(blockPointer + 8) == 0) || (currentBlock = *(long *)(blockPointer + 0x20), currentBlock == 0)) {\n    errorString = \"debug_end_block: no current block\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) != 0) {\n      *(undefined8 *)(currentBlock + 0x20) = newValue;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(long *)(blockPointer + 0x20) = *(long *)(currentBlock + 8);\n      goto LAB_0010bf84;\n    }\n    errorString = \"debug_end_block: attempt to close top level block\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010bf84:\n  returnArray._8_8_ = returnValue;\n  returnArray._0_8_ = errorMessage;\n  return returnArray;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "end_debug_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "reverse_and_improve_0010c95e",
                "param_1": "p_function",
                "param_2": "p_byte",
                "param_3": "p_long",
                "bVar1": "byte_value",
                "bVar2": "byte_switch",
                "pbVar3": "p_byte_temp",
                "bVar4": "bool_temp1",
                "bVar5": "bool_temp2",
                "bVar6": "bool_temp3",
                "cVar7": "char_temp",
                "uVar8": "uint_value",
                "pbVar9": "p_byte_temp2",
                "lVar10": "long_temp",
                "uVar11": "undefined8_temp",
                "pcVar12": "pc_temp1",
                "sVar13": "size_t_value",
                "uVar14": "ulong_value",
                "__ptr": "ptr_temp",
                "lVar15": "long_temp2",
                "pcVar19": "pc_temp2",
                "pbVar20": "p_byte_temp3",
                "local_49": "undefined_temp",
                "local_48": "ulong_temp",
                "local_40": "p_char_array_temp"
            },
            "code": "\nundefined8 reverse_and_improve_0010c95e(undefined8 *p_function,byte **p_byte,long *p_long)\n\n{\n  byte byte_value;\n  byte byte_switch;\n  byte *p_byte_temp;\n  bool bool_temp1;\n  bool bool_temp2;\n  bool bool_temp3;\n  char char_temp;\n  uint uint_value;\n  byte *p_byte_temp2;\n  long long_temp;\n  undefined8 undefined8_temp;\n  char *pc_temp1;\n  size_t size_t_value;\n  ulong ulong_value;\n  void *ptr_temp;\n  long long_temp2;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *pc_temp2;\n  byte *p_byte_temp3;\n  undefined undefined_temp;\n  ulong ulong_temp;\n  char *p_char_array_temp [2];\n  \n  while( true ) {\n    p_byte_temp3 = *p_byte;\n    byte_value = *p_byte_temp3;\n    if ('T' < (char)byte_value) break;\n    if ((char)byte_value < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_value) {\n    case 0x41:\n      long_temp2 = 0;\n      p_byte_temp = p_byte_temp3;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *p_byte = p_byte_temp3 + 1;\n      char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n      if (char_temp == '\\0') {\n        return 0;\n      }\n      if (p_long == (long *)0x0) {\n        return 1;\n      }\n      long_temp2 = debug_make_const_type_isra_0(*p_long);\n      *p_long = long_temp2;\n      return 1;\n    case 0x46:\n      *p_byte = p_byte_temp3 + 1;\n      if (p_long == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &ulong_temp;\n        ppcVar18 = p_char_array_temp;\n      }\n      char_temp = stab_demangle_args(p_function,p_byte,ppcVar18,puVar16);\n      if (char_temp == '\\0') {\n        return 0;\n      }\n      if (**p_byte == 0x5f) {\n        *p_byte = *p_byte + 1;\n        char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n        if (char_temp == '\\0') {\n          return 0;\n        }\n        if (p_long == (long *)0x0) {\n          return 1;\n        }\n        long_temp2 = debug_make_function_type_isra_0(*p_long,p_char_array_temp[0],ulong_temp & 0xff);\n        *p_long = long_temp2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *p_byte = p_byte_temp3 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_temp = 0;\n      p_char_array_temp[0] = (char *)0x0;\n      ulong_temp = 0;\n      *p_byte = p_byte_temp3 + 1;\n      if (((&_sch_istable)[(ulong)p_byte_temp3[1] * 2] & 4) == 0) {\n        if (p_byte_temp3[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = p_char_array_temp;\n        if (p_long == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        char_temp = stab_demangle_qualified(p_function,p_byte,ppcVar18);\n        if (char_temp == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uint_value = stab_demangle_count(p_byte);\n        p_byte_temp = *p_byte;\n        size_t_value = strlen((char *)p_byte_temp);\n        if (size_t_value < uint_value) goto switchD_0010cdf9_caseD_60;\n        *p_byte = p_byte_temp + uint_value;\n        if ((p_long != (long *)0x0) &&\n           (p_char_array_temp[0] = (char *)stab_find_tagged_type(*p_function,p_function[1],p_byte_temp,uint_value,9),\n           p_char_array_temp[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byte_switch = **p_byte;\n      if (byte_value == 0x4d) {\n        if ((byte_switch == 0x43) || (byte_switch == 0x56)) {\n          *p_byte = *p_byte + 1;\n        }\n        if (**p_byte != 0x46) goto switchD_0010cdf9_caseD_60;\n        *p_byte = *p_byte + 1;\n        if (p_long == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &undefined_temp;\n          puVar16 = &ulong_temp;\n        }\n        char_temp = stab_demangle_args(p_function,p_byte,puVar16,puVar17);\n        if (char_temp == '\\0') {\n          return 0;\n        }\n      }\n      if (**p_byte == 0x5f) {\n        *p_byte = *p_byte + 1;\n        char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n        if (char_temp == '\\0') {\n          return 0;\n        }\n        if (p_long == (long *)0x0) {\n          return 1;\n        }\n        if (byte_value != 0x4d) {\n          long_temp2 = debug_make_offset_type_isra_0(p_char_array_temp[0],*p_long);\n          *p_long = long_temp2;\n          return 1;\n        }\n        long_temp2 = debug_make_method_type_isra_0(*p_long,p_char_array_temp[0],ulong_temp,undefined_temp);\n        *p_long = long_temp2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      undefined8_temp = stab_demangle_qualified(p_function,p_byte,p_long);\n      return undefined8_temp;\n    case 0x52:\n      *p_byte = p_byte_temp3 + 1;\n      char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n      if (char_temp == '\\0') {\n        return 0;\n      }\n      if (p_long == (long *)0x0) {\n        return 1;\n      }\n      long_temp2 = debug_make_reference_type_isra_0(*p_long);\n      *p_long = long_temp2;\n      return 1;\n    case 0x54:\n      *p_byte = p_byte_temp3 + 1;\n      char_temp = stab_demangle_get_count(p_byte,&ulong_temp);\n      if (char_temp != '\\0') {\n        if ((uint)ulong_temp < *(uint *)(p_function + 5)) {\n          p_char_array_temp[0] = *(char **)((ulong_temp & 0xffffffff) * 0x10 + p_function[4]);\n          char_temp = reverse_and_improve_0010c95e(p_function,p_char_array_temp,p_long);\n          if (char_temp == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_value == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *p_byte = p_byte_temp3 + 1;\n    char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n    if (char_temp == '\\0') {\n      return 0;\n    }\n    if (p_long == (long *)0x0) {\n      return 1;\n    }\n    long_temp2 = debug_make_pointer_type_isra_0(*p_long);\n    *p_long = long_temp2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_temp3 = false;\n  bool_temp1 = false;\n  char_temp = '\\0';\n  bool_temp2 = false;\n  do {\n    p_byte_temp = *p_byte;\n    byte_value = *p_byte_temp;\n    if (byte_value == 0x55) {\n      char_temp = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_value) {\n      if (byte_value == 0x56) {\n        bool_temp3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_value) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_value < '_') goto LAB_0010cdfb;\n      switch(byte_value) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (p_long == (long *)0x0) {\nLAB_0010d0aa:\n          *p_byte = p_byte_temp + 1;\n          return 1;\n        }\n        long_temp2 = debug_find_named_type(*p_function,&DAT_00120436);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_type_constprop_0(6,4);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"unsigned char\";\n        if ((char_temp == '\\0') && (pc_temp2 = \"char\", bool_temp1)) {\n          pc_temp2 = \"signed char\";\n        }\n        long_temp2 = debug_find_named_type(*p_function,pc_temp2);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_int_type_isra_0(1,char_temp);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        long_temp2 = debug_find_named_type(*p_function,\"float\");\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_float_type_isra_0(4);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"unsigned int\";\n        pc_temp1 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"long unsigned int\";\n        pc_temp1 = \"long int\";\nLAB_0010ced2:\n        if (char_temp == '\\0') {\n          pc_temp2 = pc_temp1;\n        }\n        long_temp2 = debug_find_named_type(*p_function,pc_temp2);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_int_type_isra_0(4,char_temp);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        pc_temp2 = \"long double\";\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        long_temp2 = debug_find_named_type(*p_function,pc_temp2);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_float_type_isra_0(8);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"short unsigned int\";\n        if (char_temp == '\\0') {\n          pc_temp2 = \"short int\";\n        }\n        long_temp2 = debug_find_named_type(*p_function,pc_temp2);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_int_type_isra_0(2,char_temp);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = p_char_array_temp;\n        if (p_long == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        char_temp = stab_demangle_template(p_function,p_byte,ppcVar18);\n        if (char_temp == '\\0') {\n          return 0;\n        }\n        if (p_long == (long *)0x0) {\n          return 1;\n        }\n        size_t_value = strlen(p_char_array_temp[0]);\n        long_temp2 = stab_find_tagged_type(*p_function,p_function[1],p_char_array_temp[0],size_t_value & 0xffffffff,9);\n        *p_long = long_temp2;\n        free(p_char_array_temp[0]);\n        long_temp2 = *p_long;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        long_temp2 = debug_find_named_type(*p_function,&DAT_00120495);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_void_type_isra_0();\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        long_temp2 = debug_find_named_type(*p_function,\"__wchar_t\");\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_int_type_isra_0(2,1);\n          *p_long = long_temp2;\n          *p_byte = *p_byte + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (p_long == (long *)0x0) goto LAB_0010d0aa;\n        pc_temp2 = \"long long unsigned int\";\n        if (char_temp == '\\0') {\n          pc_temp2 = \"long long int\";\n        }\n        long_temp2 = debug_find_named_type(*p_function,pc_temp2);\n        *p_long = long_temp2;\n        if (long_temp2 == 0) {\n          long_temp2 = debug_make_int_type_isra_0(8,char_temp);\n          *p_long = long_temp2;\n        }\n      }\n      *p_byte = *p_byte + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_value == 0x43) {\n      bool_temp2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_value != 0x53) goto LAB_0010cdc5;\n    bool_temp1 = true;\nLAB_0010cd84:\n    *p_byte = p_byte_temp + 1;\n  } while( true );\nLAB_0010ca26:\n  p_byte_temp2 = p_byte_temp + 1;\n  *p_byte = p_byte_temp2;\n  byte_value = *p_byte_temp2;\n  if (byte_value == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_value == 0x5f) {\n    *p_byte = p_byte_temp + 2;\n    char_temp = reverse_and_improve_0010c95e(p_function,p_byte,p_long);\n    if (char_temp == '\\0') {\n      return 0;\n    }\n    if (p_long == (long *)0x0) {\n      return 1;\n    }\n    long_temp = debug_find_named_type(*p_function,\"int\");\n    if (long_temp == 0) {\n      long_temp = debug_make_int_type_isra_0(4,0);\n    }\n    long_temp2 = debug_make_array_type_isra_0(*p_long,long_temp,0,long_temp2,0);\n    *p_long = long_temp2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_value * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  long_temp2 = long_temp2 * 10 + (long)((char)byte_value + -0x30);\n  p_byte_temp = p_byte_temp2;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_value < ':') {\n    if ((char)byte_value < '0') {\n      if (byte_value != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(p_byte_temp3);\n      if (p_long == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_value != 0x47) || (*p_byte = p_byte_temp + 1, ((&_sch_istable)[(ulong)p_byte_temp[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  p_byte_temp3 = *p_byte;\n  uint_value = stab_demangle_count(p_byte);\n  p_byte_temp = *p_byte;\n  size_t_value = strlen((char *)p_byte_temp);\n  ulong_value = (ulong)uint_value;\n  if (ulong_value <= size_t_value) {\n    *p_byte = p_byte_temp + ulong_value;\n    if (p_long == (long *)0x0) {\n      return 1;\n    }\n    ptr_temp = (void *)savestring(p_byte_temp,ulong_value);\n    long_temp2 = debug_find_named_type(*p_function,ptr_temp);\n    *p_long = long_temp2;\n    free(ptr_temp);\n    if (*p_long == 0) {\n      long_temp2 = stab_find_tagged_type(*p_function,p_function[1],p_byte_temp,(int)*p_byte - (int)p_byte_temp,0);\n      *p_long = long_temp2;\njoined_r0x0010d1d8:\n      if (long_temp2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool_temp2) {\n      long_temp2 = debug_make_const_type_isra_0(*p_long);\n      *p_long = long_temp2;\n    }\n    if (bool_temp3) {\n      long_temp2 = debug_make_volatile_type_isra_0(*p_long);\n      *p_long = long_temp2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(p_byte_temp3);\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring",
                "debug_make_type.constprop.0",
                "stab_bad_demangle",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_pointer_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_find_named_type",
                "stab_demangle_args",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_const_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_arg",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = recognize_input_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "strerror",
                "merge_gnu_build_notes",
                "check_new_section_flags",
                "startswith.lto_priv.0.lto_priv.0",
                "FUN_0010554f",
                "find_section_list",
                "bfd_get_arch",
                "setup_section",
                "bfd_create_gnu_debuglink_section",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_nonfatal_message",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "copy_object.cold",
                "bfd_malloc_and_get_section",
                "non_fatal",
                "fwrite",
                "bfd_set_format",
                "free",
                "bfd_map_over_sections",
                "fclose",
                "bfd_make_section_with_flags",
                "xmalloc",
                "fopen",
                "__errno_location"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "localizedErrorMessage",
                "local_38": "creationTime",
                "uStack_34": "accessTime",
                "uStack_30": "modificationTime",
                "uStack_2c": "useconds",
                "local_28": "reservedTime1",
                "uStack_24": "reservedTime2",
                "uStack_20": "reservedTime3",
                "uStack_1c": "reservedTime4"
            },
            "code": "\nvoid setTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 localizedErrorMessage;\n  undefined4 creationTime;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 useconds;\n  undefined4 reservedTime1;\n  undefined4 reservedTime2;\n  undefined4 reservedTime3;\n  undefined4 reservedTime4;\n  \n  reservedTime1 = *(undefined4 *)(fileInfo + 0x58);\n  reservedTime2 = *(undefined4 *)(fileInfo + 0x5c);\n  reservedTime3 = *(undefined4 *)(fileInfo + 0x60);\n  reservedTime4 = *(undefined4 *)(fileInfo + 100);\n  creationTime = *(undefined4 *)(fileInfo + 0x48);\n  accessTime = *(undefined4 *)(fileInfo + 0x4c);\n  modificationTime = *(undefined4 *)(fileInfo + 0x50);\n  useconds = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&creationTime,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorString = strerror(*errnoPtr);\n    localizedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localizedErrorMessage,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "set_times.cold",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "error",
                "iVar1": "error_code",
                "uVar2": "error_message",
                "in_R10": "additional_info"
            },
            "code": "\n\n\nvoid printError_0011a110(long error)\n\n{\n  int error_code;\n  undefined8 error_message;\n  undefined8 additional_info;\n  \n  error_code = bfd_get_error();\n  if (error_code == 0) {\n    error_message = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_message = bfd_errmsg(error_code);\n  }\n  fflush(_stdout);\n  if (error != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,error,error_message,additional_info);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,error_message,additional_info);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_nonfatal.cold",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "do_display_target.cold",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "paramArray",
                "param_2": "flag",
                "param_3": "size",
                "param_5": "inputString",
                "lVar1": "value",
                "uVar2": "error",
                "lVar3": "hashResult",
                "uVar4": "errorMsg",
                "uVar5": "translatedMsg",
                "sVar6": "strLength",
                "lVar7": "result",
                "local_44": "localVar1",
                "uStack_40": "stackVar1",
                "uStack_3f": "stackVar2",
                "uStack_3e": "stackVar3",
                "local_3c": "localArray"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *paramArray,undefined flag,int size,undefined8 param_4,char *inputString)\n\n{\n  long value;\n  undefined4 error;\n  long hashResult;\n  undefined8 errorMsg;\n  undefined8 translatedMsg;\n  size_t strLength;\n  long result;\n  undefined4 localVar1;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined2 stackVar3;\n  undefined4 localArray [3];\n  \n  if (inputString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    hashResult = bfd_hash_lookup(paramArray + 7,inputString,1,1);\n    if (hashResult == 0) {\n      error = bfd_get_error();\n      errorMsg = bfd_errmsg(error);\n      translatedMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(translatedMsg,errorMsg);\n      return 0;\n    }\n    result = *(long *)(hashResult + 0x20);\n    if (result == -1) {\n      result = paramArray[6];\n      value = paramArray[5];\n      *(long *)(hashResult + 0x20) = result;\n      if (value == 0) {\n        paramArray[4] = hashResult;\n      }\n      else {\n        *(long *)(value + 0x18) = hashResult;\n      }\n      paramArray[5] = hashResult;\n      strLength = strlen(inputString);\n      paramArray[6] = result + 1 + strLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(result,&localVar1);\n  stackVar2 = 0;\n  stackVar1 = flag;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)size,&stackVar3);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(param_4,localArray);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    result = xrealloc(paramArray[1]);\n    paramArray[1] = result;\n  }\n  result = paramArray[2];\n  hashResult = paramArray[1];\n  *(ulong *)(hashResult + result) = CONCAT26(stackVar3,CONCAT15(stackVar2,CONCAT14(stackVar1,localVar1)));\n  *(undefined4 *)(hashResult + 8 + result) = localArray[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)result >> 8),1);\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_end_block.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionStr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "cmpResult",
                "uVar2": "errMsg",
                "pcVar3": "commaPtr",
                "pcVar4": "nextSectionStr",
                "sVar5": "sectionLen",
                "iVar6": "sectionIndex",
                "uVar7": "sectionFlags",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionStr,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int cmpResult;\n  undefined8 errMsg;\n  char *commaPtr;\n  char *nextSectionStr;\n  size_t sectionLen;\n  int sectionIndex;\n  uint sectionFlags;\n  undefined result [16];\n  \n  sectionFlags = 0;\n  do {\n    commaPtr = strchr(sectionStr,0x2c);\n    if (commaPtr == (char *)0x0) {\n      sectionLen = strlen(sectionStr);\n      sectionIndex = (int)sectionLen;\n      nextSectionStr = (char *)0x0;\n    }\n    else {\n      nextSectionStr = commaPtr + 1;\n      sectionIndex = (int)commaPtr - (int)sectionStr;\n    }\n    sectionLen = (size_t)sectionIndex;\n    cmpResult = strncasecmp(\"alloc\",sectionStr,sectionLen);\n    if (cmpResult == 0) {\n      sectionFlags = sectionFlags | 1;\n    }\n    else {\n      cmpResult = strncasecmp(\"load\",sectionStr,sectionLen);\n      if (cmpResult == 0) {\n        sectionFlags = sectionFlags | 2;\n      }\n      else {\n        cmpResult = strncasecmp(\"noload\",sectionStr,sectionLen);\n        if (cmpResult == 0) {\n          sectionFlags = sectionFlags | 0x200;\n        }\n        else {\n          cmpResult = strncasecmp(\"readonly\",sectionStr,sectionLen);\n          if (cmpResult == 0) {\n            sectionFlags = sectionFlags | 8;\n          }\n          else {\n            cmpResult = strncasecmp(\"debug\",sectionStr,sectionLen);\n            if (cmpResult == 0) {\n              sectionFlags = sectionFlags | 0x2000;\n            }\n            else {\n              cmpResult = strncasecmp(\"code\",sectionStr,sectionLen);\n              if (cmpResult == 0) {\n                sectionFlags = sectionFlags | 0x10;\n              }\n              else {\n                cmpResult = strncasecmp(\"data\",sectionStr,sectionLen);\n                if (cmpResult == 0) {\n                  sectionFlags = sectionFlags | 0x20;\n                }\n                else {\n                  cmpResult = strncasecmp(\"rom\",sectionStr,sectionLen);\n                  if (cmpResult == 0) {\n                    sectionFlags = sectionFlags | 0x40;\n                  }\n                  else {\n                    cmpResult = strncasecmp(\"exclude\",sectionStr,sectionLen);\n                    if (cmpResult == 0) {\n                      sectionFlags = sectionFlags | 0x8000;\n                    }\n                    else {\n                      cmpResult = strncasecmp(\"share\",sectionStr,sectionLen);\n                      if (cmpResult == 0) {\n                        sectionFlags = sectionFlags | 0x8000000;\n                      }\n                      else {\n                        cmpResult = strncasecmp(\"contents\",sectionStr,sectionLen);\n                        if (cmpResult == 0) {\n                          sectionFlags = sectionFlags | 0x100;\n                        }\n                        else {\n                          cmpResult = strncasecmp(\"merge\",sectionStr,sectionLen);\n                          if (cmpResult == 0) {\n                            sectionFlags = sectionFlags | 0x800000;\n                          }\n                          else {\n                            cmpResult = strncasecmp(\"strings\",sectionStr,sectionLen);\n                            if (cmpResult != 0) {\n                              commaPtr = (char *)xmalloc((long)(sectionIndex + 1));\n                              strncpy(commaPtr,sectionStr,sectionLen);\n                              commaPtr[sectionLen] = '\\0';\n                              errMsg = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errMsg,commaPtr);\n                              errMsg = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errMsg,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            sectionFlags = sectionFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionStr = nextSectionStr;\n  } while (nextSectionStr != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = sectionFlags;\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "construct_function_name_001125fa",
                "param_1": "inputParams",
                "ppcVar2": "ptrToCharPtr",
                "sVar3": "lengthPtrToCharPtr",
                "sVar4": "lengthInputParams",
                "__s": "outputString",
                "uVar1": "totalLength",
                "curr_1": "currentLength",
                "buf_0": "buffer"
            },
            "code": "\nchar * constructFunctionName_001125fa(char **inputParams)\n\n{\n  ulong totalLength;\n  char **ptrToCharPtr;\n  size_t lengthPtrToCharPtr;\n  size_t lengthInputParams;\n  char *outputString;\n  \n  if (inputParams == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToCharPtr = (char **)inputParams[0x1d];\n  outputString = *inputParams;\n  if ((ptrToCharPtr != (char **)0x0) && ((*(byte *)((long)ptrToCharPtr + 0x49) & 0x10) == 0)) {\n    lengthPtrToCharPtr = strlen(*ptrToCharPtr);\n    lengthInputParams = strlen(outputString);\n    totalLength = lengthPtrToCharPtr + 3 + lengthInputParams;\n    if (currentLength < totalLength) {\n      if (currentLength != 0) {\n        free(buffer);\n      }\n      currentLength = (totalLength >> 1) + totalLength;\n      buffer = (char *)xmalloc();\n    }\n    sprintf(buffer,\"%s(%s)\",*(undefined8 *)inputParams[0x1d],*inputParams);\n    outputString = buffer;\n  }\n  return outputString;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "copy_object",
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "construct_function_name_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "parse_stab_type",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "bfd_nonfatal_message",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined getOne_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_00108863",
                "puVar1": "ptrSavedStabs",
                "puVar2": "ptrNextSavedStabs",
                "saved_stabs": "ptrStabs",
                "saved_stabs_index": "stabsIndex"
            },
            "code": "\nvoid freeMemory_00108863(void)\n\n{\n  undefined4 *ptrSavedStabs;\n  undefined4 *ptrNextSavedStabs;\n  \n  ptrSavedStabs = (undefined4 *)ptrStabs;\n  do {\n    ptrNextSavedStabs = ptrSavedStabs + 6;\n    free(*(void **)(ptrSavedStabs + 4));\n    *(undefined8 *)(ptrSavedStabs + 4) = 0;\n    ptrSavedStabs = ptrNextSavedStabs;\n  } while (ptrNextSavedStabs != &stabsIndex);\n  stabsIndex = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "add_filename_to_debug_sources_00108f08",
                "param_1": "source_manager",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "success_flag",
                "puVar3": "current_entry",
                "puVar4": "previous_entry",
                "lVar5": "loop_counter",
                "puVar6": "head_entry",
                "pcVar7": "current_filename",
                "puVar8": "last_entry",
                "bVar9": "padding_byte"
            },
            "code": "\n\n\nundefined8 addFilenameToDebugSources_00108f08(long source_manager,char *filename)\n\n{\n  int comparison_result;\n  undefined8 success_flag;\n  undefined8 *current_entry;\n  undefined8 *previous_entry;\n  long loop_counter;\n  undefined8 *head_entry;\n  char *current_filename;\n  undefined8 *last_entry;\n  byte padding_byte;\n  \n  padding_byte = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    success_flag = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",success_flag);\n    success_flag = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    head_entry = *(undefined8 **)(source_manager + 0x10);\n    last_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)padding_byte * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    last_entry = (undefined8 *)*head_entry;\n    while (previous_entry = last_entry, previous_entry != (undefined8 *)0x0) {\n      head_entry = previous_entry;\n      last_entry = (undefined8 *)*previous_entry;\n    }\n    *head_entry = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_entry;\n    success_flag = 1;\n  }\n  return success_flag;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_filename_to_debug_sources_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_00116852",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "copy_file.cold",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_sections_00114190",
                "param_1": "input_string",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "temp_var",
                "plVar2": "section_name",
                "pplVar3": "result",
                "iVar4": "comparison_result",
                "uVar5": "error_message",
                "pplVar6": "current_section",
                "pplVar7": "prev_section",
                "pplVar8": "next_section"
            },
            "code": "\nlong ** process_sections_00114190(long *input_string,char flag,uint options)\n\n{\n  uint temp_var;\n  long *section_name;\n  long **result;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_section;\n  long **prev_section;\n  long **next_section;\n  \n  prev_section = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_section = (long **)*prev_section;\n      if (current_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prev_section = (long **)0x0;\n    }\n    else {\n      section_name = change_sections[1];\n      if (*(char *)section_name == '!') {\n        comparison_result = fnmatch((char *)((long)section_name + 1),(char *)input_string,0);\n        current_section = prev_section;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)section_name,(char *)input_string,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_section = (long **)*prev_section;\n      if (current_section == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)current_section + 0x14)) != 0) {\n      section_name = current_section[1];\n      if (*(char *)section_name == '!') {\n        comparison_result = fnmatch((char *)((long)section_name + 1),(char *)input_string,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)section_name,(char *)input_string,0);\n        if ((prev_section == (long **)0x0) && (comparison_result == 0)) {\n          next_section = (long **)*current_section;\n          prev_section = current_section;\n          if (next_section == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_section = (long **)*current_section;\n    current_section = prev_section;\n    if (next_section != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)change_sections[1],(char *)input_string);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      temp_var = *(uint *)((long)prev_section + 0x14);\n      if ((((temp_var & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((temp_var & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,input_string);\n      }\n      if ((((temp_var & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,input_string);\n      }\n      if ((((temp_var & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)prev_section + 0x14) = temp_var | options;\n        return prev_section;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,input_string);\n    }\n    prev_section = (long **)*prev_section;\n    if (prev_section == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)prev_section[1],(char *)input_string);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_section = (long **)*prev_section;\n    current_section = (long **)0x0;\n    if (next_section == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prev_section = current_section;\n      if (flag == '\\0') {\n        while (current_section = next_section, result = prev_section, next_section = current_section,\n              (options & *(uint *)((long)current_section + 0x14)) != 0) {\n          section_name = current_section[1];\n          if (*(char *)section_name == '!') {\n            comparison_result = fnmatch((char *)((long)section_name + 1),(char *)input_string,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_section = (long **)*current_section;\n            if ((long **)*current_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)section_name,(char *)input_string,0);\n            if ((prev_section == (long **)0x0) && (comparison_result == 0)) {\n              prev_section = current_section;\n              next_section = (long **)*current_section;\n              if ((long **)*current_section == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_section = (long **)*current_section;\n              if ((long **)*current_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_section[1],(char *)input_string);\n        result = current_section;\n        prev_section = next_section;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_section = result;\n      next_section = (long **)*next_section;\n      prev_section = current_section;\n    } while (next_section != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      current_section = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_section + 2) = 0;\n      *(uint *)((long)current_section + 0x14) = options;\n      current_section[5] = (long *)0x0;\n      prev_section = current_section;\n      *current_section = (long *)change_sections;\n      change_sections = prev_section;\n      current_section[1] = input_string;\n      return current_section;\n    }\n  }\nLAB_00114212:\n  if (prev_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prev_section + 2) = 1;\n  return prev_section;\n}\n\n",
            "called": [
                "dcgettext",
                "fnmatch",
                "find_section_list.cold",
                "xmalloc",
                "fatal",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "main",
                "setup_section",
                "is_strip_section_1.isra.0",
                "handle_remove_section_option",
                "copy_relocations_in_section",
                "FUN_00107880",
                "setup_section.cold",
                "copy_section"
            ],
            "imported": false,
            "current_name": "process_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_and_process_gnu_build_notes_00116490",
                "param_2": "note_size",
                "param_3": "note_data",
                "param_4": "data_size",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "bVar4": "is_valid",
                "puVar5": "ptr_var",
                "iVar6": "loop_index",
                "lVar7": "temp_var4",
                "uVar8": "temp_var5",
                "in_RAX": "note_type",
                "uVar9": "temp_var6",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "uVar12": "temp_var9",
                "__ptr": "temp_ptr",
                "uVar13": "temp_var10",
                "unaff_RBX": "remaining_size",
                "unaff_RBP": "temp_var11",
                "puVar14": "ptr_var2",
                "puVar15": "ptr_var3",
                "cVar16": "char_var",
                "puVar17": "ptr_var4",
                "puVar18": "ptr_var5",
                "in_R11": "description_size",
                "unaff_R12": "current_note",
                "puVar19": "ptr_var6",
                "unaff_R13": "current_ptr",
                "__nmemb": "temp_var12",
                "unaff_R14": "param_array",
                "puVar20": "temp_ptr2",
                "bVar21": "byte_var",
                "iVar22": "loop_index2",
                "unaff_retaddr": "return_address",
                "param_7": "result_size",
                "param_8": "has_version_note",
                "param_9": "version_note",
                "in_stack_00000020": "result_array_size",
                "in_stack_00000028": "extracted_notes",
                "in_stack_00000030": "result_array",
                "in_stack_00000038": "has_excess_data",
                "in_stack_00000040": "missing_version_note",
                "in_stack_00000048": "non_fatal_message"
            },
            "code": "\nulong extract_and_process_gnu_build_notes_00116490(undefined8 param_1,ulong note_size,ulong note_data,long data_size)\n\n{\n  undefined8 temp_var1;\n  undefined8 temp_var2;\n  ulong temp_var3;\n  bool is_valid;\n  ulong *ptr_var;\n  int loop_index;\n  long temp_var4;\n  undefined8 temp_var5;\n  ulong note_type;\n  ulong temp_var6;\n  ulong temp_var7;\n  ulong temp_var8;\n  ulong temp_var9;\n  undefined *temp_ptr;\n  ulong temp_var10;\n  ulong remaining_size;\n  ulong temp_var11;\n  ulong *ptr_var2;\n  undefined *ptr_var3;\n  char char_var;\n  undefined *ptr_var4;\n  undefined *ptr_var5;\n  ulong description_size;\n  ulong *current_note;\n  ulong *ptr_var6;\n  ulong current_ptr;\n  size_t temp_var12;\n  undefined8 *param_array;\n  ulong *temp_ptr2;\n  byte byte_var;\n  int loop_index2;\n  ulong return_address;\n  ulong result_size;\n  uint has_version_note;\n  ulong version_note;\n  ulong result_array_size;\n  ulong *extracted_notes;\n  undefined *result_array;\n  uint has_excess_data;\n  uint missing_version_note;\n  undefined8 *non_fatal_message;\n  \n  byte_var = 0;\ncode_r0x00116490:\n  temp_var4 = data_size;\n  temp_var7 = temp_var11;\n  temp_var10 = current_ptr;\n  if (note_type == 0) {\n    if (note_size == 0x100) {\n      current_note[7] = return_address;\n      temp_var8 = return_address;\nLAB_001164af:\n      temp_var6 = current_ptr;\n      temp_var10 = current_ptr;\n      return_address = temp_var8;\n    }\n    else {\n      current_note[7] = version_note;\nLAB_0011669e:\n      temp_var7 = temp_var11;\n      temp_var6 = temp_var11;\n    }\nLAB_001164bb:\n    current_note[8] = temp_var6;\n    if (*(char *)((current_note[3] - 1) + note_data) != '\\0') {\n      temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var6 = current_note + 9;\n    if (0xb < remaining_size) {\n      temp_var6 = (**(code **)(param_array[1] + 0x40))(temp_var4);\n      *ptr_var6 = temp_var6;\n      temp_var6 = (**(code **)(param_array[1] + 0x40))(temp_var4 + 4);\n      current_note[10] = temp_var6;\n      note_size = (**(code **)(param_array[1] + 0x40))(temp_var4 + 8);\n      note_data = *ptr_var6;\n      current_note[0xb] = note_size;\n      note_type = current_note[10];\n      temp_var6 = note_data + 3 & 0xfffffffffffffffc;\n      current_note[0xf] = temp_var6;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < note_size - 0x100) {\n        temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      temp_var8 = temp_var6 + note_type + 0xc;\n      if (remaining_size < temp_var8) {\n        temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_data < 2) {\n        temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      current_note[0xc] = temp_var4 + 0xc;\n      description_size = temp_var4 + 0xc + temp_var6;\n      current_note[0xd] = description_size;\n      remaining_size = remaining_size + (-0xc - (temp_var6 + note_type));\n      data_size = temp_var4 + temp_var8;\n      temp_var11 = temp_var7;\n      current_note = ptr_var6;\n      current_ptr = temp_var10;\n      if (note_data != 2) {\n        if (*(char *)(temp_var4 + 0xc) == '$') {\n          if ((*(char *)(temp_var4 + 0xd) == '\\x01') && (*(char *)(temp_var4 + 0xe) == '1')) {\n            temp_var7 = extract_and_process_gnu_build_notes_00116490();\n            return temp_var7;\n          }\n        }\n        else if ((((4 < note_data) && (*(char *)(temp_var4 + 0xc) == 'G')) &&\n                 (*(char *)(temp_var4 + 0xd) == 'A')) &&\n                ((*(char *)(temp_var4 + 0xe) == '$' && (*(char *)(temp_var4 + 0xf) == '\\x01')))) {\n          if (*(char *)(temp_var4 + 0x10) == '2') {\n            temp_var7 = extract_and_process_gnu_build_notes_00116490();\n            return temp_var7;\n          }\n          if (*(char *)(temp_var4 + 0x10) == '3') {\n            temp_var7 = extract_and_process_gnu_build_notes_00116490();\n            return temp_var7;\n          }\n          temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_size != 0) {\n      temp_var4 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((has_excess_data | missing_version_note | has_version_note) == 0) {\n      temp_var1 = *param_array;\n      temp_var2 = *non_fatal_message;\n      temp_var5 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(temp_var5,temp_var1,temp_var2);\nLAB_0011671b:\n      temp_var12 = ((long)ptr_var6 - (long)extracted_notes >> 3) * -0x71c71c71c71c71c7;\n      qsort(extracted_notes,temp_var12,0x48,compare_gnu_build_notes);\n      for (ptr_var2 = extracted_notes; ptr_var2 < ptr_var6; ptr_var2 = ptr_var2 + 9) {\n        temp_var7 = ptr_var2[2];\n        if (temp_var7 != 0) {\n          temp_var10 = ptr_var2[7];\n          temp_var6 = ptr_var2[8];\n          temp_ptr2 = ptr_var2;\n          loop_index2 = 0;\n          if (temp_var10 == temp_var6) {\n            ptr_var2[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr_var = temp_ptr2;\n                temp_ptr2 = ptr_var + -9;\n                if (temp_ptr2 < extracted_notes) goto LAB_001167f5;\n                temp_var8 = ptr_var[-7];\n              } while (temp_var8 == 0);\n              if ((*temp_ptr2 != *ptr_var2) ||\n                 (loop_index = memcmp((void *)ptr_var[-6],(void *)ptr_var2[3],*ptr_var2), loop_index != 0))\n              break;\n              temp_var3 = ptr_var[-2];\n              temp_var9 = ptr_var[-1];\n              if (temp_var10 == temp_var3) {\n                if (temp_var6 == temp_var9) {\n                  ptr_var2[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (temp_var6 <= temp_var9) {\n                  ptr_var2[2] = 0;\n                  break;\n                }\n                if (temp_var9 < temp_var10) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < temp_var9) ||\n                     (temp_var10 <= (temp_var9 + 0xf & 0xfffffffffffffff0))) goto extract_and_process_gnu_build_notes_00116490_00116852;\n                }\nLAB_001167b8:\n                if ((temp_var7 == 0x101) == (temp_var8 == 0x101)) {\n                  if (temp_var9 <= temp_var6) {\n                    temp_var9 = temp_var6;\n                  }\n                  if (temp_var3 < temp_var10) {\n                    temp_var10 = temp_var3;\n                  }\n                  ptr_var[-1] = temp_var9;\n                  ptr_var[-2] = temp_var10;\n                  ptr_var2[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (temp_var3 <= temp_var10) goto LAB_001167a6;\n                if (temp_var9 < temp_var10) goto LAB_0010852c;\n                if (temp_var6 < temp_var10) {\n                  if ((0xfffffffffffffff0 < temp_var6) || (temp_var3 <= (temp_var6 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_and_process_gnu_build_notes_00116490_00116852;\n                  goto LAB_001167b8;\n                }\n                if (temp_var6 != temp_var9) goto LAB_001167b8;\n              }\nextract_and_process_gnu_build_notes_00116490_00116852:\n              is_valid = loop_index2 < 0x11;\n              loop_index2 = loop_index2 + 1;\n            } while (is_valid);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(extracted_notes,temp_var12,0x48,sort_gnu_build_notes);\n      temp_ptr = (undefined *)xmalloc(result_array_size * 2);\n      result_size = 0;\n      version_note = 0;\n      ptr_var5 = temp_ptr;\n      for (ptr_var2 = extracted_notes; ptr_var2 < ptr_var6; ptr_var2 = ptr_var2 + 9) {\n        if (ptr_var2[2] != 0) {\n          ptr_var4 = ptr_var5 + 4;\n          ptr_var3 = ptr_var5 + 0xc;\n          if ((ptr_var2[7] == version_note) && (ptr_var2[8] == result_size)) {\n            (**(code **)(param_array[1] + 0x50))(*ptr_var2,ptr_var5);\n            (**(code **)(param_array[1] + 0x50))(0,ptr_var4);\n            (**(code **)(param_array[1] + 0x50))(ptr_var2[2],ptr_var5 + 8);\n            temp_var10 = ptr_var2[6];\n            temp_var7 = *ptr_var2;\n            ptr_var5 = (undefined *)ptr_var2[3];\n            ptr_var4 = ptr_var3;\n            for (temp_var6 = temp_var7; temp_var6 != 0; temp_var6 = temp_var6 - 1) {\n              *ptr_var4 = *ptr_var5;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n            }\n            if (temp_var7 < temp_var10) {\n              for (temp_var4 = temp_var10 - temp_var7; temp_var4 != 0; temp_var4 = temp_var4 + -1) {\n                *ptr_var4 = 0;\n                ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            ptr_var5 = ptr_var3 + temp_var10;\n          }\n          else {\n            (**(code **)(param_array[1] + 0x50))();\n            if (*(int *)(param_array[1] + 8) == 5) {\n              char_var = (*(char *)(param_array[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_var = '\\b';\n            }\n            (**(code **)(param_array[1] + 0x50))(char_var,ptr_var4);\n            (**(code **)(param_array[1] + 0x50))(ptr_var2[2],ptr_var5 + 8);\n            temp_var7 = *ptr_var2;\n            ptr_var5 = (undefined *)ptr_var2[3];\n            ptr_var4 = ptr_var3;\n            for (temp_var10 = temp_var7; temp_var10 != 0; temp_var10 = temp_var10 - 1) {\n              *ptr_var4 = *ptr_var5;\n              ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n              ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n            }\n            temp_var10 = ptr_var2[6];\n            if (temp_var7 < temp_var10) {\n              for (temp_var4 = temp_var10 - temp_var7; temp_var4 != 0; temp_var4 = temp_var4 + -1) {\n                *ptr_var4 = 0;\n                ptr_var4 = ptr_var4 + (ulong)byte_var * -2 + 1;\n              }\n            }\n            temp_var4 = param_array[1];\n            ptr_var3 = ptr_var3 + temp_var10;\n            ptr_var5 = ptr_var3 + 8;\n            if ((*(int *)(temp_var4 + 8) == 5) && (*(char *)(param_array[0x22] + 4) == '\\x02')) {\n              (**(code **)(temp_var4 + 0x38))(ptr_var2[7],ptr_var3);\n              (**(code **)(param_array[1] + 0x38))(ptr_var2[8],ptr_var5);\n              ptr_var5 = ptr_var3 + 0x10;\n            }\n            else {\n              (**(code **)(temp_var4 + 0x50))(ptr_var2[7],ptr_var3);\n              (**(code **)(param_array[1] + 0x50))(ptr_var2[8],ptr_var3 + 4);\n            }\n            version_note = ptr_var2[7];\n            result_size = ptr_var2[8];\n          }\n        }\n      }\n      temp_var10 = (long)ptr_var5 - (long)temp_ptr;\n      temp_var7 = temp_var10;\n      ptr_var5 = temp_ptr;\n      if (temp_var10 < result_array_size) {\n        for (; result_array_size = temp_var10, temp_var7 != 0; temp_var7 = temp_var7 - 1) {\n          *result_array = *ptr_var5;\n          ptr_var5 = ptr_var5 + (ulong)byte_var * -2 + 1;\n          result_array = result_array + (ulong)byte_var * -2 + 1;\n        }\n      }\n      free(temp_ptr);\nLAB_001166f8:\n      free(extracted_notes);\n      return result_array_size;\n    }\n    if (((missing_version_note | has_version_note) == 0) || (has_excess_data == 0)) {\n      if (missing_version_note == 0) {\n        if (has_version_note != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (has_version_note == 0) goto LAB_001166f8;\n    }\n    temp_var4 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      temp_var8 = (**(code **)(param_array[1] + 0x28))(description_size);\n      temp_var6 = (**(code **)(param_array[1] + 0x28))(current_note[4] + 8);\n      if (temp_var6 < temp_var8) {\n        temp_var8 = temp_var6;\n      }\nLAB_00116631:\n      if (current_note[2] == 0x100) {\n        if (temp_var8 == 0) {\n          temp_var8 = return_address;\n        }\n        note_data = *current_note;\n        current_note[7] = temp_var8;\n        temp_var10 = temp_var6;\n        return_address = temp_var8;\n        if (temp_var6 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_var8 == 0) {\n          temp_var8 = version_note;\n        }\n        note_data = *current_note;\n        current_note[7] = temp_var8;\n        temp_var7 = temp_var6;\n        version_note = temp_var8;\n        if (temp_var6 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        temp_var8 = (**(code **)(param_array[1] + 0x40))(description_size);\n        temp_var6 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        temp_var7 = FUNC_001086af();\n        return temp_var7;\n      }\n    }\n    temp_var4 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (temp_var4 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,param_array,non_fatal_message,temp_var4);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "extract_and_process_gnu_build_notes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto extract_and_process_gnu_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto extract_and_process_gnu_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nextract_and_process_gnu_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "targetValue",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *file)\n\n{\n  long targetValue;\n  char *message;\n  long *targetList;\n  long *targetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    targetValue = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (targetValue == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_target_list",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "check_function_validity_0010be1a",
                "param_1": "functionData",
                "param_2": "newParam1",
                "param_3": "newParam2",
                "param_4": "newParam3",
                "lVar1": "blockData",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] checkFunctionValidity_0010be1a(long functionData,undefined8 newParam1,undefined8 newParam2,undefined8 newParam3)\n\n{\n  long blockData;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockData = *(long *)(functionData + 0x20), blockData == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorString = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockData + 8) == 0) {\n      *(undefined8 *)(blockData + 0x20) = newParam1;\n      errorMessage = CONCAT71((int7)((ulong)blockData >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorString = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = newParam3;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "check_function_validity_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "stab_class_start_method.lto_priv.0",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "add_redefine_and_check",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "stab_struct_field.lto_priv.0",
                "savestring",
                "debug_set_class_id.lto_priv.0",
                "xstrndup",
                "stab_start_struct_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "debug_name_type",
                "debug_make_array_type.isra.0",
                "convert_efi_target",
                "stab_demangle_args",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "copy_section",
                "add_specific_symbols",
                "bfd_get_archive_filename",
                "debug_make_enum_type.isra.0",
                "stab_function_type.lto_priv.0",
                "debug_record_function",
                "debug_add_to_namespace.constprop.0",
                "stab_range_type.lto_priv.0",
                "template_in_dir",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "debug_start_block",
                "parse_flags.cold",
                "parse_stab",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "stab_modify_type",
                "FUN_00107880",
                "section_add_load_file",
                "debug_record_line",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "debug_record_variable",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "stab_set_type.lto_priv.0",
                "init_section_add",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_make_method_type.isra.0",
                "stab_class_start_method.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "debug_make_offset_type.isra.0",
                "stab_class_static_member.lto_priv.0",
                "debug_make_struct_type.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_find_slot",
                "stab_function_parameter.lto_priv.0",
                "stab_push_string",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "start_stab.constprop.0",
                "stab_find_tagged_type",
                "debug_make_type.constprop.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_record_variable",
                "parse_coff_type.lto_priv.0",
                "debug_tag_type",
                "debug_start_source",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_type_and_data_00113da9",
                "param_1": "byteCount",
                "param_2": "unknown1",
                "param_3": "data",
                "param_4": "value",
                "puVar1": "typeDataPtr",
                "lVar2": "loopCounter",
                "puVar3": "currentPtr",
                "bVar4": "incrementVal",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeTypeAndData_00113da9(byte byteCount,undefined8 unknown1,undefined8 data,undefined8 value)\n\n{\n  undefined8 *typeDataPtr;\n  long loopCounter;\n  undefined8 *currentPtr;\n  byte incrementVal;\n  undefined result [16];\n  \n  incrementVal = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byteCount);\n  if (result._0_8_ != 0) {\n    typeDataPtr = (undefined8 *)xmalloc(0x28);\n    currentPtr = typeDataPtr + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPtr = 0;\n      currentPtr = (undefined8 *)((long)currentPtr + (ulong)incrementVal * -8 + 4);\n    }\n    *typeDataPtr = data;\n    *(undefined8 **)(result._0_8_ + 0x10) = typeDataPtr;\n  }\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "initialize_type_and_data_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "generate_stab_string_0010a69a",
                "param_1": "ptrData",
                "param_2": "ptrStruct",
                "param_3": "length",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "structIndex",
                "sVar3": "stringLength",
                "uVar4": "allocatedMemory",
                "uVar5": "hasStructIndex",
                "local_60": "stabString"
            },
            "code": "\nundefined4 generateStabString_0010a69a(long ptrData,undefined8 ptrStruct,int length,char flag,uint value)\n\n{\n  undefined4 result;\n  long structIndex;\n  size_t stringLength;\n  undefined8 allocatedMemory;\n  undefined hasStructIndex;\n  char stabString [48];\n  \n  if (length == 0) {\n    stabString[0] = '\\0';\n    hasStructIndex = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    hasStructIndex = 1;\n    sprintf(stabString,\"%ld=\",structIndex);\n  }\n  stringLength = strlen(stabString);\n  sprintf(stabString + stringLength,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(ptrData,stabString,structIndex,hasStructIndex,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(ptrData + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(ptrData + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "setup_section",
                "parse_stab_type",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_validity_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "strip_symbols_value",
                "lVar4": "section_list_result_1",
                "lVar5": "section_list_result_2",
                "uVar6": "result",
                "plVar7": "update_sections_ptr"
            },
            "code": "\nundefined8 check_section_validity_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int strip_symbols_value;\n  long section_list_result_1;\n  long section_list_result_2;\n  undefined8 result;\n  long *update_sections_ptr;\n  \n  section_list_result_1 = find_section_list(*section_names,0,4);\n  if (section_list_result_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_result_1 = find_section_list(*section_names,0,1);\n      section_list_result_2 = find_section_list(*section_names,0,2);\n      if (section_list_result_1 != 0) {\n        if (section_list_result_2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section);\n        }\n        if (section_list_result_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          update_sections_ptr = update_sections;\n          do {\n            strip_symbols_value = strcmp(current_section,(char *)update_sections_ptr[1]);\n            if (strip_symbols_value == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section);\n            }\n            update_sections_ptr = (long *)*update_sections_ptr;\n          } while (update_sections_ptr != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_result_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_symbols_value = strip_symbols;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          strip_symbols_value = strcmp(current_section,\".reloc\");\n          if (strip_symbols_value != 0) {\n            return 1;\n          }\n          result = check_dwo_section_0010829e();\n          return result;\n        }\n      }\n      if (strip_symbols_value == 5) {\n        result = is_dwo_section_constprop_0(section_names);\n        return result;\n      }\n      if (strip_symbols_value == 4) {\n        return 0;\n      }\n    }\n    if (strip_symbols_value == 6) {\n      result = invert_and_check_dwo_section_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0.cold",
                "dcgettext",
                "find_section_list",
                "FUN_0010829e",
                "strcmp",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_section_validity_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_00116b40",
                "completed_0": "is_initialized"
            },
            "code": "\nvoid initialize_00116b40(void)\n\n{\n  if (is_initialize_00116b40d != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  is_initialize_00116b40d = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_table_00116030",
                "param_1": "bfd_object",
                "param_2": "base_address",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_value",
                "iVar5": "bfd_error",
                "in_RAX": "retval",
                "lVar6": "fwrite_ptr",
                "lVar7": "reloc_count",
                "__ptr": "reloc_table",
                "lVar8": "reloc_index",
                "uStack_28": "retval_stack"
            },
            "code": "\n\n\nundefined8 process_reloc_table_00116030(undefined8 *bfd_object,long base_address)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long lVar3;\n  long lVar4;\n  int bfd_error;\n  undefined8 retval;\n  long fwrite_ptr;\n  void *reloc_table;\n  long reloc_count;\n  undefined8 extraout_RAX;\n  long reloc_index;\n  undefined8 retval_stack;\n  \n  if (*(long *)(base_address + 0x60) == 0) {\n    return retval;\n  }\n  fwrite_ptr = bfd_get_reloc_upper_bound();\n  if (fwrite_ptr < 0) {\n    if ((fwrite_ptr != -1) || (bfd_error = bfd_get_error(), bfd_error != 5)) {\n      bfd_nonfatal(*bfd_object);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_ptr != 0) {\n    reloc_table = (void *)xmalloc();\n    reloc_count = bfd_canonicalize_reloc(bfd_object,base_address,reloc_table);\n    lVar4 = _DAT_00128680;\n    lVar3 = _DAT_00128568;\n    fwrite_ptr = _fwrite;\n    if (reloc_count < 0) {\n      bfd_nonfatal(*bfd_object);\n                    \n      xexit(1);\n    }\n    if (reloc_count != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_table + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != fwrite_ptr)) &&\n           ((reloc_value != lVar4 && (reloc_value != lVar3)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (reloc_count != reloc_index);\n    }\n    free(reloc_table);\n    return extraout_RAX;\n  }\n  return retval_stack;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xexit",
                "mark_symbols_used_in_relocations.cold",
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_table_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_starts_with_00113ede",
                "param_1": "input_strings",
                "__s": "current_string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_starts_with_00113ede(char **input_strings)\n\n{\n  char *current_string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_strings == (char **)0x0) {\n    return 0;\n  }\n  current_string = *input_strings;\n  if (current_string != (char *)0x0) {\n    string_length = strlen(current_string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(current_string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_length_starts_with_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "list_matching_formats",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_pop_type",
                "stab_int_constant.lto_priv.0",
                "main",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "stab_emit_pending_vars",
                "copy_section",
                "bfd_get_archive_filename",
                "stab_function_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "free_saved_stabs",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "FUN_00107880",
                "copy_file",
                "stab_demangle_v3_arg",
                "stab_end_struct_type.lto_priv.0",
                "save_stab",
                "FUN_0010554f",
                "list_supported_targets",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "FUN_00114b84",
                "make_tempdir.cold",
                "mark_symbols_used_in_relocations",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "stab_function_parameter.lto_priv.0",
                "copy_object.cold",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "stab_find_tagged_type",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_class_method_var",
                "parse_coff_type.lto_priv.0",
                "FUN_00108466",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "main",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_info_0010c892",
                "param_1": "param1",
                "param_2": "param2",
                "cVar1": "character",
                "lVar2": "localVar2",
                "lVar3": "localVar3",
                "uVar4": "result",
                "puVar5": "ptr",
                "iVar6": "intValue"
            },
            "code": "\n\n\nundefined8 processDebugInfo_0010c892(undefined8 param1,long param2)\n\n{\n  char character;\n  long localVar2;\n  long localVar3;\n  undefined8 result;\n  undefined8 *ptr;\n  int intValue;\n  \n  if (*(char *)(param2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (ptr = *(undefined8 **)(param2 + 0x1a0); ptr != (undefined8 *)0x0;\n        ptr = (undefined8 *)*ptr) {\n      intValue = *(int *)(ptr + 2);\n      localVar3 = ptr[1];\n      if (intValue != 0) {\n        if (localVar3 != 0) {\n          if (intValue - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (localVar3 == 0) goto LAB_0010c910;\n      intValue = 7;\nLAB_0010c8d5:\n      localVar2 = debug_make_type_constprop_0(intValue,0);\n      if (localVar2 == 0) goto LAB_0010c910;\n      localVar3 = debug_tag_type(param1,localVar3,localVar2);\n      ptr[3] = localVar3;\n      if (localVar3 == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    character = stab_emit_pending_vars();\n    if (character != '\\0') {\n      character = debug_end_function(param1,*(undefined8 *)(param2 + 0x68));\n      if (character != '\\0') {\n        *(undefined *)(param2 + 0x60) = 0;\n        *(undefined8 *)(param2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_tag_type",
                "stab_emit_pending_vars",
                "debug_make_type.constprop.0",
                "debug_end_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_info_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_00112904",
                "param_1": "sourceValue",
                "param_2": "destinationValue",
                "puVar1": "memoryPointer"
            },
            "code": "\nvoid initializeMemory_00112904(undefined4 sourceValue,undefined4 destinationValue)\n\n{\n  undefined4 *memoryPointer;\n  \n  memoryPointer = (undefined4 *)xmalloc(0x18);\n  *memoryPointer = sourceValue;\n  memoryPointer[1] = destinationValue;\n  *(undefined (*) [16])(memoryPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_find_type",
                "finish_stab",
                "stab_demangle_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "parse_stab_type",
                "debug_make_pointer_type.isra.0",
                "debug_tag_type",
                "debug_make_method_type.isra.0",
                "debug_make_offset_type.isra.0",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_enum_type.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "unused",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 unused;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = unused;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_at_exit_functions_0011a390",
                "plVar4": "functionList",
                "uVar5": "numFunctions",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex"
            },
            "code": "\nvoid executeAtExitFunctions_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionList;\n  uint numFunctions;\n  \n  functionList = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      numFunctions = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)numFunctions) {\n        index = (long)(int)numFunctions;\n        numFunctions = numFunctions & 7;\n        (*(code *)functionList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (numFunctions != 0) {\n            if (numFunctions != 1) {\n              if (numFunctions != 2) {\n                if (numFunctions != 3) {\n                  if (numFunctions != 4) {\n                    if (numFunctions != 5) {\n                      if (numFunctions != 6) {\n                        (*(code *)functionList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionList[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[index])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_at_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "display_info.isra.0.cold",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_stab_type",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_lto_symbol_to_file_0010e842",
                "param_1": "fileHandle",
                "param_2": "symbol",
                "param_3": "integer",
                "param_4": "data",
                "__s": "formattedSymbol",
                "sVar1": "symbolLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] writeLtoSymbolToFile_0010e842(undefined8 fileHandle,char *symbol,undefined8 integer,undefined8 data)\n\n{\n  size_t symbolLength;\n  char *formattedSymbol;\n  undefined result [16];\n  \n  symbolLength = strlen(symbol);\n  formattedSymbol = (char *)xmalloc(symbolLength + 0x14);\n  sprintf(formattedSymbol,\"%s:c=i%ld\",symbol,integer);\n  result._0_4_ = stab_write_symbol_lto_priv_0(fileHandle,0x80,0,0,formattedSymbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedSymbol);\n  }\n  result._8_8_ = data;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_lto_symbol_to_file_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "create_constprop_object_00113cb9",
                "param_1": "input_value",
                "lVar1": "constprop_object",
                "debug_make_type_constprop_0": "create_constprop_object_helper"
            },
            "code": "\nlong create_constprop_object_00113cb9(long input_value)\n\n{\n  long constprop_object;\n  \n  if (input_value != 0) {\n    constprop_object = create_constprop_object_00113cb9_helper(0xe,0);\n    if (constprop_object == 0) {\n      constprop_object = 0;\n    }\n    else {\n      *(long *)(constprop_object + 0x10) = input_value;\n    }\n    return constprop_object;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_constprop_object_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_symbol_with_prefix_0010eafe",
                "param_1": "symbolTablePtr",
                "param_2": "symbolString",
                "param_3": "flag",
                "__s": "popTypeResult",
                "sVar2": "symbolLength",
                "sVar3": "popTypeResultLength",
                "__s_00": "newSymbolString",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbolWithPrefix_0010eafe(long symbolTablePtr,char *symbolString,char flag)\n\n{\n  undefined4 result;\n  char *popTypeResult;\n  size_t symbolLength;\n  size_t popTypeResultLength;\n  char *newSymbolString;\n  \n  if ((*(int *)(symbolTablePtr + 0x1f8) == 0) && (*(long *)(symbolTablePtr + 0x1e8) == -1)) {\n    popTypeResult = (char *)stab_pop_type();\n    symbolLength = strlen(symbolString);\n    popTypeResultLength = strlen(popTypeResult);\n    newSymbolString = (char *)xmalloc(symbolLength + 3 + popTypeResultLength);\n    sprintf(newSymbolString,\"%s:%c%s\",symbolString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),popTypeResult);\n    *(undefined8 *)(symbolTablePtr + 0x1e8) = *(undefined8 *)(symbolTablePtr + 0x10);\n    result = stab_write_symbol_lto_priv_0(symbolTablePtr,0x24,0,0,newSymbolString);\n    if ((char)result != '\\0') {\n      free(newSymbolString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_prefix_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_const_prop_00113df2",
                "param_1": "inputParam",
                "debug_make_type_constprop_0": "setDebugTypeConstPropZero"
            },
            "code": "\nvoid initializeDebugTypeConstProp_00113df2(undefined4 inputParam)\n\n{\n  setDebugTypeConstPropZero(4,inputParam);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_const_prop_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "print_version",
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "reverse_string_concatenation_0010a377",
                "param_1": "input_address",
                "cVar1": "is_null",
                "__s": "first_string",
                "__s_00": "second_string",
                "sVar3": "first_string_length",
                "sVar4": "second_string_length",
                "__s_01": "result_string",
                "uVar5": "use_null_byte",
                "uVar2": "return_value"
            },
            "code": "\nundefined4 reverse_string_concatenation_0010a377(long input_address)\n\n{\n  char is_null;\n  undefined4 return_value;\n  char *first_string;\n  char *second_string;\n  size_t first_string_length;\n  size_t second_string_length;\n  char *result_string;\n  undefined use_null_byte;\n  \n  use_null_byte = 1;\n  is_null = *(char *)(*(long *)(input_address + 0x60) + 0x1c);\n  first_string = (char *)stab_pop_type();\n  if (is_null == '\\0') {\n    use_null_byte = *(undefined *)(*(long *)(input_address + 0x60) + 0x1c);\n  }\n  second_string = (char *)stab_pop_type(input_address);\n  first_string_length = strlen(first_string);\n  second_string_length = strlen(second_string);\n  result_string = (char *)xmalloc(first_string_length + 3 + second_string_length);\n  sprintf(result_string,\"@%s,%s\",second_string,first_string);\n  free(second_string);\n  free(first_string);\n  return_value = stab_push_string(input_address,result_string,0,use_null_byte,0);\n  if ((char)return_value != '\\0') {\n    free(result_string);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_string_concatenation_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "extract_function_info_0010d882",
                "param_1": "inputParam",
                "param_2": "inputString",
                "param_3": "outputParam",
                "param_4": "outputFlag",
                "iVar1": "iterator",
                "pcVar2": "currentChar",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentString",
                "uVar6": "count",
                "bVar7": "isCountPositive",
                "local_50": "stringIndex",
                "local_4c": "localValue",
                "local_48": "localCount",
                "local_44": "localFlag",
                "local_40": "localArray"
            },
            "code": "\nundefined8 extractFunctionInfo_0010d882(long inputParam,char **inputString,long *outputParam,undefined *outputFlag)\n\n{\n  int iterator;\n  char *currentChar;\n  char currentChar;\n  long allocatedMemory;\n  char *currentString;\n  ulong count;\n  bool isCountPositive;\n  uint stringIndex;\n  undefined4 localValue;\n  uint localCount;\n  int localFlag;\n  undefined8 localArray [2];\n  \n  currentChar = *inputString;\n  localValue = 10;\n  if (outputParam != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputParam = allocatedMemory;\n    *outputFlag = 0;\n  }\n  stringIndex = 0;\n  while( true ) {\n    currentString = *inputString;\n    currentChar = *currentString;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *inputString = currentString + 1;\n      if (currentChar == 'T') {\n        localFlag = 1;\n      }\n      else {\n        currentChar = stab_demangle_get_count(inputString,&localFlag);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = stab_demangle_get_count(inputString,&localCount);\n      if ((currentChar == '\\0') || (*(uint *)(inputParam + 0x28) <= localCount)) {\nLAB_0010d958:\n        stab_bad_demangle(currentChar);\n        return 0;\n      }\n      count = (ulong)localCount;\n      while (iterator = localFlag + -1, isCountPositive = localFlag != 0, localFlag = iterator, isCountPositive) {\n        localArray[0] = *(undefined8 *)(*(long *)(inputParam + 0x20) + count * 0x10);\n        currentChar = stab_demangle_arg(inputParam,localArray,outputParam,&stringIndex,&localValue);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = stab_demangle_arg(inputParam,inputString,outputParam,&stringIndex,&localValue);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputParam == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputParam + (ulong)stringIndex * 8) = 0;\n    if (*currentString != 'e') goto LAB_0010d9fa;\n    *outputFlag = 1;\n  }\n  currentString = currentString + 1;\n  *inputString = currentString;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentString >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_arg",
                "stab_bad_demangle",
                "stab_demangle_get_count",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_function_info_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryHolder",
                "param_2": "paramValue",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "memoryBlock",
                "pauVar2": "tempMemory",
                "lVar3": "loopCounter",
                "puVar4": "currentMemory",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryHolder) [16],undefined8 paramValue,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *memoryBlock;\n  undefined (*tempMemory) [16];\n  long loopCounter;\n  undefined4 *currentMemory;\n  byte byteValue;\n  \n  byteValue = 0;\n  memoryBlock = (undefined4 *)xmalloc(0x28);\n  currentMemory = memoryBlock;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentMemory = 0;\n    currentMemory = currentMemory + (ulong)byteValue * -2 + 1;\n  }\n  tempMemory = *memoryHolder;\n  *(undefined8 *)(memoryBlock + 2) = paramValue;\n  memoryBlock[5] = value1;\n  memoryBlock[6] = value2;\n  if (tempMemory == (undefined (*) [16])0x0) {\n    tempMemory = (undefined (*) [16])xmalloc(0x10);\n    *tempMemory = ZEXT816(0);\n    *memoryHolder = tempMemory;\n    *(undefined (**) [16])(*tempMemory + 8) = tempMemory;\n  }\n  **(undefined8 **)(*tempMemory + 8) = memoryBlock;\n  *(undefined4 **)(*tempMemory + 8) = memoryBlock;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_name_type",
                "debug_record_function",
                "debug_tag_type",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "recordInfoPtr",
                "param_2": "param2Value",
                "param_3": "param3Value",
                "uVar1": "errorMessage",
                "puVar2": "entryRecordPtr",
                "uVar3": "loopCounter",
                "puVar4": "newRecordPtr",
                "lVar5": "loopIterator",
                "puVar6": "currentPtr",
                "bVar7": "byteVariable"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long recordInfoPtr,undefined8 param2Value,undefined8 param3Value)\n\n{\n  undefined8 errorMessage;\n  undefined8 *entryRecordPtr;\n  ulong loopCounter;\n  undefined4 *newRecordPtr;\n  long loopIterator;\n  undefined4 *currentPtr;\n  byte byteVariable;\n  \n  byteVariable = 0;\n  if (*(long *)(recordInfoPtr + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopIterator = *(long *)(recordInfoPtr + 0x28);\n    if ((loopIterator != 0) && (*(long *)(loopIterator + 8) == *(long *)(recordInfoPtr + 0x10))) {\n      loopCounter = 0;\n      do {\n        if (*(long *)(loopIterator + 0x10 + loopCounter * 8) == -1) {\n          entryRecordPtr = (undefined8 *)(loopCounter & 0xffffffff);\n          *(undefined8 *)(loopIterator + 0x10 + (long)entryRecordPtr * 8) = param2Value;\n          *(undefined8 *)(loopIterator + 0x60 + (long)entryRecordPtr * 8) = param3Value;\n          goto LAB_0010c056;\n        }\n        loopCounter = loopCounter + 1;\n      } while (loopCounter != 10);\n    }\n    newRecordPtr = (undefined4 *)xmalloc(0xb0);\n    currentPtr = newRecordPtr;\n    for (loopIterator = 0x2c; loopIterator != 0; loopIterator = loopIterator + -1) {\n      *currentPtr = 0;\n      currentPtr = currentPtr + (ulong)byteVariable * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(recordInfoPtr + 0x10);\n    *(undefined8 *)(newRecordPtr + 4) = param2Value;\n    *(undefined8 *)(newRecordPtr + 2) = errorMessage;\n    *(undefined8 *)(newRecordPtr + 0x18) = param3Value;\n    currentPtr = newRecordPtr + 6;\n    for (loopIterator = 0x48; loopIterator != 0; loopIterator = loopIterator + -1) {\n      *(undefined *)currentPtr = 0xff;\n      currentPtr = (undefined4 *)((long)currentPtr + (ulong)byteVariable * -2 + 1);\n    }\n    entryRecordPtr = *(undefined8 **)(recordInfoPtr + 0x28);\n    if (entryRecordPtr == (undefined8 *)0x0) {\n      entryRecordPtr = *(undefined8 **)(recordInfoPtr + 8);\n      entryRecordPtr[2] = newRecordPtr;\n    }\n    else {\n      *entryRecordPtr = newRecordPtr;\n    }\n    *(undefined4 **)(recordInfoPtr + 0x28) = newRecordPtr;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)entryRecordPtr >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "string",
                "__pattern": "current_pattern",
                "iVar1": "match_result"
            },
            "code": "\nint checkPatternMatch_0011a170(char **pattern,char **string)\n\n{\n  char *current_pattern;\n  int match_result;\n  \n  current_pattern = *pattern;\n  if (*current_pattern == '!') {\n    match_result = fnmatch(current_pattern + 1,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 0;\n      return match_result;\n    }\n  }\n  else {\n    match_result = fnmatch(current_pattern,*string,0);\n    if (match_result == 0) {\n      *(undefined *)(string + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "check_pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_address",
                "param_2": "param_value",
                "param_3": "param_size",
                "param_4": "param_type",
                "param_5": "param_data",
                "puVar1": "current_ptr",
                "uVar2": "error_message",
                "puVar3": "alloc_ptr",
                "puVar4": "ptr",
                "lVar5": "loop_count",
                "puVar6": "last_ptr",
                "puVar7": "assign_ptr",
                "bVar8": "byte_var"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_address,long param_value,long param_size,undefined4 param_type,undefined8 param_data)\n\n{\n  undefined8 *current_ptr;\n  undefined8 error_message;\n  undefined4 *alloc_ptr;\n  undefined8 *ptr;\n  long loop_count;\n  undefined8 *last_ptr;\n  undefined4 *assign_ptr;\n  byte byte_var;\n  \n  byte_var = 0;\n  if (param_value == 0) {\n    return 0;\n  }\n  if (param_size != 0) {\n    if ((*(long *)(function_address + 8) != 0) && (*(long *)(function_address + 0x18) != 0)) {\n      alloc_ptr = (undefined4 *)xmalloc(0x28);\n      assign_ptr = alloc_ptr;\n      for (loop_count = 10; loop_count != 0; loop_count = loop_count + -1) {\n        *assign_ptr = 0;\n        assign_ptr = assign_ptr + (ulong)byte_var * -2 + 1;\n      }\n      loop_count = *(long *)(function_address + 0x18);\n      *(long *)(alloc_ptr + 2) = param_value;\n      *(long *)(alloc_ptr + 4) = param_size;\n      alloc_ptr[6] = param_type;\n      current_ptr = *(undefined8 **)(loop_count + 8);\n      *(undefined8 *)(alloc_ptr + 8) = param_data;\n      last_ptr = (undefined8 *)(loop_count + 8);\n      while (ptr = current_ptr, ptr != (undefined8 *)0x0) {\n        last_ptr = ptr;\n        current_ptr = (undefined8 *)*ptr;\n      }\n      *last_ptr = alloc_ptr;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "cVar1": "result",
                "iVar2": "architecture",
                "ppcVar3": "file_names",
                "pvVar4": "buffer",
                "lVar5": "bytes_read",
                "ppcVar6": "output_file",
                "pcVar7": "file_path",
                "puVar8": "temp_info",
                "piVar9": "errno",
                "pcVar10": "file_name",
                "uVar11": "error_msg",
                "lVar12": "size",
                "pcVar13": "close_func",
                "lVar14": "bytes_written",
                "unaff_EBX": "stat_result",
                "unaff_RBP": "stat_buffer",
                "pcVar15": "path_ptr",
                "psVar16": "temp_buffer",
                "unaff_R12": "temp_dir",
                "unaff_R13": "temp_info_list",
                "unaff_R15": "input_file",
                "bVar17": "flag",
                "unaff_retaddr": "return_address",
                "param_7": "input_file_name",
                "param_8": "bytes_remaining",
                "param_9": "temp_dir_name",
                "param_10": "output_file_name",
                "param_11": "flags",
                "in_stack_00000030": "unknown_value",
                "param_18": "permissions",
                "param_19": "expected_size",
                "status": "result_code"
            },
            "code": "\nvoid extract_and_copy_archive_00104ea2(void)\n\n{\n  char result;\n  int architecture;\n  char **file_names;\n  void *buffer;\n  long bytes_read;\n  char **output_file;\n  char *file_path;\n  undefined8 *temp_info;\n  int *errno;\n  char *file_name;\n  undefined8 error_msg;\n  long size;\n  code *close_func;\n  long bytes_written;\n  int stat_result;\n  stat *stat_buffer;\n  char *path_ptr;\n  stat *temp_buffer;\n  char *temp_dir;\n  undefined8 *temp_info_list;\n  char **input_file;\n  byte flag;\n  undefined8 return_address;\n  undefined8 *input_file_name;\n  long *bytes_remaining;\n  char *temp_dir_name;\n  undefined8 *output_file_name;\n  undefined8 flags;\n  undefined8 unknown_value;\n  uint permissions;\n  long expected_size;\n  \n  flag = 0;\ncode_r0x00104ea2:\n  output_file = (char **)bfd_openw(temp_dir,flags);\n  if (output_file == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(temp_dir,0,0,0);\nLAB_00104e93:\n    result_code = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(input_file,output_file,return_address);\n    if (result == '\\0') {\n      architecture = bfd_get_arch(input_file);\n      if (architecture == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(output_file);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(temp_dir,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(output_file);\n    output_file = input_file;\n    if (result == '\\0') {\n      bfd_nonfatal_message(temp_dir,0,0,0);\n      result_code = 1;\n    }\nLAB_00114a86:\n    if ((preserve_dates != '\\0') && (stat_result == 0)) {\n      set_times(temp_dir,stat_buffer);\n    }\n    size = bfd_openr(temp_dir,flags);\n    temp_info_list[2] = size;\n    *bytes_remaining = size;\n    bytes_remaining = (long *)(size + 0xf0);\n    input_file = (char **)bfd_openr_next_archived_file(output_file_name,output_file);\n    bfd_close(output_file);\n    while ((result_code == 0 && (input_file != (char **)0x0))) {\n      file_name = *input_file;\n      file_path = file_name;\n      if (*file_name == '/') {\nLAB_0010527d:\n        error_msg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(error_msg,file_name);\n        goto LAB_00104e93;\n      }\n      while (*file_path != '\\0') {\n        path_ptr = file_path;\n        if ((*file_path == '.') && (path_ptr = file_path + 1, file_path[1] == '.')) {\n          path_ptr = file_path + 2;\n          if ((file_path[2] == '\\0') || (file_path[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*path_ptr != '\\0' && (*path_ptr != '/')); path_ptr = path_ptr + 1) {\n        }\n        file_path = path_ptr;\n        if (*path_ptr == '/') {\n          copy_and_extract_archive_001052a2();\n          return;\n        }\n      }\n      stat_buffer = (stat *)&stack0x00000050;\n      temp_dir = (char *)concat(temp_dir_name,&DAT_0011b47d);\n      architecture = stat(temp_dir,stat_buffer);\n      temp_info = temp_info_list;\n      if (-1 < architecture) {\n        size = make_tempdir(temp_dir);\n        free(temp_dir);\n        if (size == 0) {\n          errno = __errno_location();\n          file_name = strerror(*errno);\n          error_msg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(error_msg,file_name);\n          goto LAB_00104e93;\n        }\n        temp_info = (undefined8 *)xmalloc(0x18);\n        file_name = *input_file;\n        *temp_info = temp_info_list;\n        temp_info[2] = 0;\n        temp_info[1] = size;\n        temp_dir = (char *)concat(size,&DAT_0011b47d,file_name);\n      }\n      stat_result = 0;\n      if (preserve_dates != '\\0') {\n        temp_buffer = stat_buffer;\n        for (size = 0x24; size != 0; size = size + -1) {\n          *(undefined4 *)&temp_buffer->st_dev = 0;\n          temp_buffer = (stat *)((long)temp_buffer + (ulong)flag * -8 + 4);\n        }\n        output_file = (char **)input_file[0x1d];\n        if ((char **)input_file[0x1d] == (char **)0x0) {\n          output_file = input_file;\n        }\n        stat_result = (**(code **)(output_file[1] + 0x1e8))(input_file,stat_buffer);\n        if (stat_result != 0) {\n          file_name = *input_file;\n          error_msg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(error_msg,file_name);\n        }\n      }\n      temp_info_list = (undefined8 *)xmalloc(0x18);\n      temp_info_list[1] = temp_dir;\n      *temp_info_list = temp_info;\n      temp_info_list[2] = 0;\n      result = bfd_check_format(input_file,1);\n      if (result != '\\0') {\n        if (unknown_value._7_1_ != '\\0') goto code_r0x00104ea2;\n        output_file = (char **)bfd_openw(temp_dir,*(undefined8 *)input_file[1]);\n        if (output_file == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      error_msg = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,input_file,0,error_msg);\n      output_file = (char **)bfd_openw(temp_dir,flags);\n      if (output_file == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      file_names = (char **)input_file[0x1d];\n      if ((char **)input_file[0x1d] == (char **)0x0) {\n        file_names = input_file;\n      }\n      architecture = (**(code **)(file_names[1] + 0x1e8))(input_file);\n      size = expected_size;\n      if (architecture == 0) {\n        if (expected_size < 0) {\n          bfd_get_archive_filename(input_file);\n          error_msg = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(error_msg);\n        }\n        else {\n          architecture = bfd_seek(input_file,0,0);\n          if (architecture == 0) {\n            if (verbose != '\\0') {\n              file_name = *output_file;\n              error_msg = bfd_get_archive_filename(input_file);\n              file_path = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(file_path,error_msg,file_name);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (size == 0) {\n                chmod(*output_file,permissions | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(output_file);\n                output_file = input_file;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(temp_dir,0,0,0);\n                  result_code = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytes_written = 0x2000;\n              if (size < 0x2001) {\n                bytes_written = size;\n              }\n              bytes_read = bfd_bread(buffer,bytes_written,input_file);\n              file_names = input_file;\n              if ((bytes_written != bytes_read) ||\n                 (bytes_read = bfd_bwrite(buffer,bytes_written,output_file), file_names = output_file, bytes_written != bytes_read))\n              break;\n              size = size - bytes_written;\n            }\n            bfd_nonfatal_message(0,file_names,0,0);\n            free(buffer);\n          }\n          else {\n            error_msg = bfd_get_archive_filename(input_file);\n            bfd_nonfatal(error_msg);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,input_file,0,0);\n      }\n      result = bfd_close_all_done(output_file);\n      if (result == '\\0') {\n        bfd_nonfatal_message(temp_dir,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(temp_dir);\n      result_code = 1;\n    }\n    *bytes_remaining = 0;\n    buffer = (void *)xstrdup(*input_file_name);\n    if (result_code == 0) {\n      close_func = bfd_close;\n    }\n    else {\n      close_func = bfd_close_all_done;\n    }\n    result = (*close_func)(input_file_name);\n    if (result == '\\0') {\n      result_code = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*output_file_name);\n    result = bfd_close(output_file_name);\n    if (result == '\\0') {\n      result_code = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (temp_info_list != (undefined8 *)0x0) {\n    if (temp_info_list[2] == 0) {\n      rmdir((char *)temp_info_list[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)temp_info_list[1]);\n    }\n    free((void *)temp_info_list[1]);\n    temp_info = (undefined8 *)*temp_info_list;\n    free(temp_info_list);\n    temp_info_list = temp_info;\n  }\n  rmdir(temp_dir_name);\n  free(temp_dir_name);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "stat",
                "strerror",
                "bfd_openr",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_close_all_done",
                "concat",
                "dcgettext",
                "printf",
                "bfd_bread",
                "FUN_00114b84",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_get_archive_filename",
                "non_fatal",
                "chmod",
                "free",
                "bfd_seek",
                "copy_object",
                "xstrdup",
                "bfd_bwrite",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "xmalloc",
                "bfd_nonfatal",
                "set_times",
                "bfd_close",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "process_data_00113ce0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param4",
                "param_5": "param5",
                "lVar1": "result",
                "plVar2": "allocatedMemory",
                "auVar3": "output",
                "xmalloc": "allocateMemory",
                "debug_make_type_constprop_0": "debugMakeTypeConstprop",
                "LAB_00113d2f": "returnLabel"
            },
            "code": "\nundefined  [16]\nprocessData_00113ce0(long input1,long input2,undefined input3,undefined8 param4,undefined8 param5)\n\n{\n  long result;\n  long *allocatedMemory;\n  undefined output [16];\n  \n  if (input1 != 0) {\n    result = debugMakeTypeConstprop(0xd,0);\n    if (result != 0) {\n      allocatedMemory = (long *)allocateMemory(0x18);\n      *(undefined4 *)((long)allocatedMemory + 0x11) = 0;\n      *allocatedMemory = input1;\n      *(undefined4 *)((long)allocatedMemory + 0x14) = 0;\n      allocatedMemory[1] = input2;\n      *(undefined *)(allocatedMemory + 2) = input3;\n      *(long **)(result + 0x10) = allocatedMemory;\n      goto returnLabel;\n    }\n  }\n  result = 0;\nreturnLabel:\n  output._8_8_ = param5;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_data_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "filePointer",
                "unaff_RBP": "bufferPointer",
                "unaff_R12": "startPosition",
                "unaff_R14": "endPosition",
                "iVar1": "errorFlag",
                "uVar2": "errorMessage",
                "uVar3": "errorContext",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int errorFlag;\n  undefined8 errorMessage;\n  undefined8 errorContext;\n  size_t bytesRead;\n  FILE *filePointer;\n  long bufferPointer;\n  long startPosition;\n  long endPosition;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(bufferPointer + 0x20) + startPosition),1,endPosition - startPosition,\n                  filePointer);\n    errorFlag = ferror(filePointer);\n    if (errorFlag != 0) {\n      errorContext = *(undefined8 *)(bufferPointer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,errorContext);\n    }\n    startPosition = startPosition + bytesRead;\n    errorFlag = feof(filePointer);\n    if (errorFlag != 0) break;\n    if (startPosition == endPosition) {\n      endPosition = startPosition * 2;\n      errorContext = xrealloc(*(undefined8 *)(bufferPointer + 0x20),endPosition);\n      *(undefined8 *)(bufferPointer + 0x20) = errorContext;\n    }\n  }\n  *(long *)(bufferPointer + 0x18) = startPosition;\n  fclose(filePointer);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "dcgettext",
                "ferror",
                "xrealloc",
                "feof",
                "fread",
                "FUN_00114dc7",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_binary_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "status",
                "cVar2": "flag",
                "iVar3": "index",
                "uVar4": "endian_header",
                "uVar5": "endian_data",
                "__format": "format_string",
                "lVar6": "total_size",
                "uVar7": "printable_header",
                "lVar8": "realloc_size"
            },
            "code": "\nundefined4 process_binary_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 status;\n  char flag;\n  int index;\n  undefined8 endian_header;\n  undefined8 endian_data;\n  char *format_string;\n  long total_size;\n  undefined8 printable_header;\n  long realloc_size;\n  \n  index = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = index;\n  if ((ulong)data[2] < (ulong)((long)index * 0x60)) {\n    total_size = 0x3000;\n    if (0x3f < index) {\n      total_size = (long)index * 0xc0;\n    }\n    realloc_size = xrealloc(data[3]);\n    data[3] = realloc_size;\n    memset((void *)(realloc_size + data[2]),0,total_size - data[2]);\n    data[2] = total_size;\n  }\n  status = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  endian_header = endian_string(status);\n  endian_data = endian_string(*(undefined4 *)(header + 2));\n  printable_header = *header;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,printable_header,endian_data,endian_header);\n  total_size = bfd_openw(*data,*header);\n  if (total_size == 0) {\n    bfd_nonfatal(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    index = 2;\n    flag = bfd_set_format(total_size,1);\n    if (flag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        bfd_nonfatal(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        flag = (**(code **)(*(long *)(total_size + 8) + 0x2a0))(total_size,index,0);\n        if (flag != '\\0') {\n          printable_header = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",printable_header);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(total_size);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "printf",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "endian_string",
                "do_display_target.cold",
                "bfd_set_format",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "process_binary_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "source_fd",
                "param_2": "destination_path",
                "param_3": "source_stats",
                "iVar1": "errno_copy",
                "__fd": "destination_fd",
                "iVar2": "read_result",
                "_Var3": "file_offset",
                "uVar4": "copy_size",
                "sVar5": "write_result",
                "piVar6": "errno_location",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int source_fd,char *destination_path,long source_stats)\n\n{\n  int errno_copy;\n  int destination_fd;\n  int read_result;\n  __off_t file_offset;\n  ulong copy_size;\n  size_t write_result;\n  int *errno_location;\n  undefined buffer [8200];\n  \n  if ((-1 < source_fd) && (file_offset = lseek(source_fd,0,0), file_offset == 0)) {\n    destination_fd = open(destination_path,0x201);\n    if (destination_fd < 0) {\n      copy_size = simple_copy_cold();\n      return copy_size;\n    }\n    do {\n      copy_size = read(source_fd,buffer,0x2000);\n      read_result = (int)copy_size;\n      if (read_result < 1) {\n        errno_location = __errno_location();\n        errno_copy = *errno_location;\n        fchmod(destination_fd,*(__mode_t *)(source_stats + 0x18));\n        close(source_fd);\n        close(destination_fd);\n        if (read_result != 0) {\n          *errno_location = errno_copy;\n          return 0xffffffff;\n        }\n        return copy_size & 0xffffffff;\n      }\n      write_result = write(destination_fd,buffer,(long)read_result);\n    } while (write_result == (long)read_result);\n    errno_location = __errno_location();\n    read_result = *errno_location;\n    close(source_fd);\n    close(destination_fd);\n    *errno_location = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "lseek",
                "fchmod",
                "write",
                "simple_copy.cold",
                "open",
                "read",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_and_set_file_times_00108200",
                "unaff_RBP": "sourceFilePath",
                "unaff_R12B": "copyFileFlag",
                "unaff_R13": "filePermissions",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPointer",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined  [16] copyAndSetFileTimes_00108200(void)\n\n{\n  int *errnoPointer;\n  undefined8 errorMessage;\n  char *sourceFilePath;\n  char copyFileFlag;\n  ulong filePermissions;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errnoPointer = __errno_location();\n  strerror(*errnoPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(sourceFilePath);\n  if (copyFileFlag != '\\0') {\n    set_times();\n  }\n  auVar3._0_8_ = filePermissions & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "set_times",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_and_set_file_times_00108200"
        }
    },
    "used_tokens": 220691,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}