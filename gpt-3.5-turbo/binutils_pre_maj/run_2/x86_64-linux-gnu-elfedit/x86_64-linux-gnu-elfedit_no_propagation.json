{
    "functions": {
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "error",
                "warn"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00109320 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00109148);\n  FUNC_00103b30();\n  DAT_00109320 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00103b30",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_0010358d": {
            "renaming": {
                "FUN_0010358d": "process_archive_0010358d",
                "param_1": "fileName",
                "param_2": "file",
                "param_3": "isWritable",
                "lVar1": "length",
                "pcVar2": "corruptMsg",
                "iVar3": "result",
                "uVar4": "archiveResult",
                "uVar5": "errorMsg",
                "uVar7": "archiveErrorMsg",
                "uVar8": "fileSize",
                "sVar6": "readSize",
                "sVar9": "fileNameLength",
                "sVar10": "tmpLength1",
                "sVar11": "tmpLength2",
                "__s": "corruptStr",
                "__s_00": "processedFileName",
                "pcVar12": "archiveName",
                "pcVar13": "archiveErrorMsg",
                "__stream": "processedFile",
                "uVar14": "finalResult",
                "local_208": "fileStat",
                "local_178": "archiveStream",
                "local_160": "tmpUndefined1",
                "local_148": "tmpFile1",
                "local_d8": "tmpFile2",
                "local_c0": "tmpFile3",
                "local_a8": "tmpFile4",
                "local_98": "archivePos",
                "local_90": "filePos",
                "local_88": "isError",
                "local_80": "tmpData",
                "local_50": "tmpName",
                "local_46": "tmpValue"
            },
            "code": "\nuint processArchive_0010358d(undefined8 fileName,FILE *file,char isWritable)\n\n{\n  long length;\n  char *corruptMsg;\n  int result;\n  uint archiveResult;\n  undefined8 errorMsg;\n  size_t readSize;\n  undefined8 archiveErrorMsg;\n  ulong fileSize;\n  size_t fileNameLength;\n  char *corruptStr;\n  size_t tmpLength1;\n  size_t tmpLength2;\n  char *processedFileName;\n  char *archiveName;\n  FILE *processedFile;\n  char *archiveErrorMsg;\n  uint finalResult;\n  stat fileStat;\n  undefined archiveStream [24];\n  undefined tmpUndefined1 [16];\n  undefined8 tmpFile1;\n  undefined tmpFile2 [16];\n  undefined tmpFile3 [16];\n  undefined8 tmpFile4;\n  long archivePos;\n  long filePos;\n  int isError;\n  undefined tmpData [48];\n  char tmpName [10];\n  short tmpValue;\n  \n  tmpFile1 = 0;\n  tmpFile2 = ZEXT816(0);\n  tmpFile3 = ZEXT816(0);\n  archiveStream._0_16_ = ZEXT816(0);\n  tmpUndefined1 = ZEXT816(0);\n  tmpFile4 = 0;\n  result = fileno(file);\n  result = fstat(result,&fileStat);\n  if ((result < 0) ||\n     (result = FUN_001025ab(tmpFile2,fileName,file,fileStat.st_size,isWritable), result != 0)) {\nLAB_001036cc:\n    finalResult = 1;\nLAB_00103a46:\n    if ((FILE *)archiveStream._8_8_ != (FILE *)0x0) {\n      fclose((FILE *)archiveStream._8_8_);\n    }\n    FUN_00102f65(archiveStream);\n    FUN_00102f65(tmpFile2);\n  }\n  else {\n    finalResult = 0;\n    while (result = fseek(file,filePos,0), result == 0) {\n      readSize = fread(tmpData,1,0x3c,file);\n      if (readSize != 0x3c) {\n        if (readSize == 0) goto LAB_00103a46;\n        archiveErrorMsg = \"%s: failed to read archive header\\n\";\nLAB_001036b8:\n        errorMsg = dcgettext(0,archiveErrorMsg,5);\n        error(errorMsg,fileName);\n        goto LAB_001036cc;\n      }\n      if (tmpValue != 0xa60) {\n        errorMsg = tmpFile2._0_8_;\n        archiveErrorMsg = dcgettext(0,\"%s: did not find a valid archive header\\n\",5);\n        error(archiveErrorMsg,errorMsg);\n        goto LAB_001036cc;\n      }\n      filePos = filePos + 0x3c;\n      fileSize = strtoul(tmpName,(char **)0x0,10);\n      DAT_00109438 = (fileSize + 1) - (ulong)((fileSize & 1) == 0);\n      archiveErrorMsg = (char *)FUN_001029a5(tmpFile2,archiveStream);\n      if (archiveErrorMsg == (char *)0x0) {\n        archiveErrorMsg = \"%s: bad archive file name\\n\";\n        goto LAB_001036b8;\n      }\n      fileNameLength = strlen(archiveErrorMsg);\n      corruptStr = (char *)dcgettext(0,\"<corrupt>\",5);\n      archiveName = (char *)tmpFile2._0_8_;\n      tmpLength1 = strlen((char *)tmpFile2._0_8_);\n      tmpLength2 = strlen(archiveErrorMsg);\n      readSize = tmpLength1 + tmpLength2 + 3;\n      if (isError == 0) {\n        processedFileName = (char *)malloc(readSize);\n        if (processedFileName == (char *)0x0) goto LAB_001037d3;\n        snprintf(processedFileName,readSize,\"%s(%s)\",archiveName,archiveErrorMsg);\n      }\n      else if (archivePos == 0) {\n        processedFileName = (char *)malloc(readSize);\n        if (processedFileName == (char *)0x0) {\nLAB_001037d3:\n          errorMsg = dcgettext(0,\"Out of memory\\n\",5);\n          error(errorMsg);\n          errorMsg = dcgettext(0,\"%s: bad archive file name\\n\",5);\n          error(errorMsg,fileName);\n          free(archiveErrorMsg);\n          goto LAB_001036cc;\n        }\n        snprintf(processedFileName,readSize,\"%s[%s]\",archiveName,archiveErrorMsg);\n      }\n      else {\n        corruptMsg = (char *)archiveStream._0_8_;\n        length = tmpLength1 + tmpLength2 + 5;\n        if ((char *)archiveStream._0_8_ == (char *)0x0) {\n          readSize = strlen(corruptStr);\n          readSize = length + readSize;\n          processedFileName = (char *)malloc(readSize);\n          corruptMsg = corruptStr;\n        }\n        else {\n          readSize = strlen((char *)archiveStream._0_8_);\n          readSize = length + readSize;\n          processedFileName = (char *)malloc(readSize);\n        }\n        if (processedFileName == (char *)0x0) goto LAB_001037d3;\n        snprintf(processedFileName,readSize,\"%s[%s(%s)]\",archiveName,corruptMsg,archiveErrorMsg);\n      }\n      if (isWritable == '\\0') {\n        free(archiveErrorMsg);\n        filePos = filePos + DAT_00109438;\n        archiveResult = FUN_00104de0(processedFileName,file);\n        finalResult = finalResult | archiveResult;\n      }\n      else {\n        if (archivePos == 0) {\n          archiveName = (char *)FUN_00102cc4(fileName,archiveErrorMsg,fileNameLength);\n          free(archiveErrorMsg);\n          if (archiveName != (char *)0x0) {\n            processedFile = fopen(archiveName,\"r+b\");\n            if (processedFile != (FILE *)0x0) {\n              archiveResult = FUN_00104de0(processedFileName,processedFile);\n              finalResult = finalResult | archiveResult;\n              fclose(processedFile);\n              free(archiveName);\n              goto LAB_00103a39;\n            }\n            errorMsg = dcgettext(0,\"Input file \\'%s\\' is not readable\\n\",5);\n            error(errorMsg,archiveName);\n            free(archiveName);\n          }\n          free(processedFileName);\n          goto LAB_001036cc;\n        }\n        free(archiveErrorMsg);\n        result = fseek((FILE *)archiveStream._8_8_,archivePos + 0x3c,0);\n        if (result != 0) {\n          errorMsg = archiveStream._0_8_;\n          archiveErrorMsg = dcgettext(0,\"%s: failed to seek to archive member\\n\",5);\n          error(archiveErrorMsg,errorMsg);\n          free(processedFileName);\n          goto LAB_001036cc;\n        }\n        archiveResult = FUN_00104de0(processedFileName,archiveStream._8_8_);\n        finalResult = finalResult | archiveResult;\n      }\nLAB_00103a39:\n      free(processedFileName);\n    }\n    errorMsg = dcgettext(0,\"%s: failed to seek to next archive header\\n\",5);\n    finalResult = 1;\n    error(errorMsg,fileName);\n  }\n  return finalResult;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "strtoul",
                "FUN_00102f65",
                "error",
                "FUN_00102cc4",
                "fopen",
                "snprintf",
                "strlen",
                "FUN_001025ab",
                "fstat",
                "fclose",
                "malloc",
                "FUN_00104de0",
                "fseek",
                "fileno",
                "free",
                "FUN_001029a5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010358d",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "process_archive_0010358d"
        },
        "FUN_00104d30": {
            "renaming": {
                "FUN_00104d30": "get_machine_type_00104d30",
                "param_1": "machineType",
                "iVar1": "comparisonResult",
                "iVar2": "comparisonResult2",
                "uVar3": "errorMsg"
            },
            "code": "\nint getMachineType_00104d30(char *machineType)\n\n{\n  int comparisonResult;\n  int comparisonResult2;\n  undefined8 errorMsg;\n  \n  comparisonResult = strcasecmp(machineType,\"i386\");\n  if (comparisonResult == 0) {\n    comparisonResult = 3;\n  }\n  else {\n    comparisonResult = strcasecmp(machineType,\"iamcu\");\n    if (comparisonResult == 0) {\n      return 6;\n    }\n    comparisonResult2 = strcasecmp(machineType,\"l1om\");\n    comparisonResult = 0xb4;\n    if (comparisonResult2 != 0) {\n      comparisonResult = strcasecmp(machineType,\"k1om\");\n      if (comparisonResult == 0) {\n        return 0xb5;\n      }\n      comparisonResult = strcasecmp(machineType,\"x86_64\");\n      if (comparisonResult == 0) {\n        comparisonResult = 0x3e;\n      }\n      else {\n        comparisonResult = strcasecmp(machineType,\"x86-64\");\n        if (comparisonResult == 0) {\n          comparisonResult = 0x3e;\n        }\n        else {\n          comparisonResult = strcasecmp(machineType,\"none\");\n          if (comparisonResult != 0) {\n            errorMsg = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n            error(errorMsg,machineType);\n            comparisonResult = -1;\n          }\n        }\n      }\n    }\n  }\n  return comparisonResult;\n}\n\n",
            "called": [
                "strcasecmp",
                "FUN_0010234b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d30",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "get_machine_type_00104d30"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103449"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001028be": {
            "renaming": {
                "FUN_001028be": "validate_and_read_archive_header_001028be",
                "param_1": "archive_info",
                "uVar1": "prev_value",
                "iVar2": "result",
                "uVar3": "header_size",
                "uVar4": "error_message",
                "sVar5": "bytes_read",
                "uVar6": "archive_path",
                "pcVar7": "error_format"
            },
            "code": "\nundefined8 validate_and_read_archive_header_001028be(undefined8 *archive_info)\n\n{\n  undefined prev_value;\n  int result;\n  ulong header_size;\n  undefined8 error_message;\n  size_t bytes_read;\n  undefined8 archive_path;\n  char *error_format;\n  \n  prev_value = *(undefined *)((long)archive_info + 0x92);\n  *(undefined *)((long)archive_info + 0x92) = 0;\n  header_size = strtoul((char *)(archive_info + 0x11),(char **)0x0,10);\n  *(undefined *)((long)archive_info + 0x92) = prev_value;\n  if ((long)header_size < 0) {\n    archive_path = *archive_info;\n    error_message = dcgettext(0,\"%s: invalid archive header size: %ld\\n\",5);\n    error(error_message,archive_path,header_size);\n  }\n  else {\n    header_size = header_size + 1 & 0xfffffffffffffffe;\n    archive_info[9] = header_size + 0x3c + archive_info[9];\n    result = fseek((FILE *)archive_info[1],header_size,1);\n    if (result == 0) {\n      bytes_read = fread(archive_info + 0xb,1,0x3c,(FILE *)archive_info[1]);\n      if ((bytes_read == 0x3c) || (bytes_read == 0)) {\n        return 1;\n      }\n      archive_path = *archive_info;\n      error_format = \"%s: failed to read archive header following archive index\\n\";\n    }\n    else {\n      archive_path = *archive_info;\n      error_format = \"%s: failed to skip archive symbol table\\n\";\n    }\n    error_message = dcgettext(0,error_format,5);\n    error(error_message,archive_path);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "strtoul",
                "fseek",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028be",
            "calling": [
                "FUN_001025ab"
            ],
            "imported": false,
            "current_name": "validate_and_read_archive_header_001028be"
        },
        "FUN_00103b60": {
            "renaming": {
                "FUN_00103b60": "FUNC_00103b60"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b84) */\n/* WARNING: Removing unreachable block (ram,0x00103b90) */\n\nvoid FUNC_00103b60(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103b60",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103b60"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103b60();\n  return;\n}\n\n",
            "called": [
                "FUN_00103b60"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103be0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_001027fd"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001027fd",
                "FUN_00103006",
                "FUN_00103186",
                "FUN_00103bf0",
                "FUN_00103160",
                "FUN_0010358d"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00103160": {
            "renaming": {
                "FUN_00103160": "copy_string_00103160",
                "param_1": "inputString",
                "sVar1": "stringLength",
                "pcVar2": "copiedString",
                "lVar3": "lengthPlusOne",
                "bVar4": "byteVar"
            },
            "code": "\nvoid copyString_00103160(char *inputString)\n\n{\n  size_t stringLength;\n  char *copiedString;\n  long lengthPlusOne;\n  byte byteVar;\n  \n  byteVar = 0;\n  stringLength = strlen(inputString);\n  lengthPlusOne = stringLength + 1;\n  copiedString = (char *)FUN_00105370(lengthPlusOne);\n  for (; lengthPlusOne != 0; lengthPlusOne = lengthPlusOne + -1) {\n    *copiedString = *inputString;\n    inputString = inputString + (ulong)byteVar * -2 + 1;\n    copiedString = copiedString + (ulong)byteVar * -2 + 1;\n  }\n  return;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103160",
            "calling": [
                "FUN_00103bf0",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "copy_string_00103160"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "error",
                "warn"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_0010354e": {
            "renaming": {
                "FUN_0010354e": "write_data_0010354e",
                "param_1": "bufferAddress",
                "param_2": "data",
                "param_3": "dataLength",
                "uVar1": "errorMessage",
                "iVar2": "iterator",
                "uVar3": "remainingLength"
            },
            "code": "\nvoid writeData_0010354e(long bufferAddress,ulong data,uint dataLength)\n\n{\n  undefined8 errorMessage;\n  int iterator;\n  ulong remainingLength;\n  \n  remainingLength = (ulong)dataLength;\n  if (8 < dataLength) {\n    errorMessage = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(errorMessage,dataLength);\n                    \n    abort();\n  }\n  while (iterator = (int)remainingLength, remainingLength = (ulong)(iterator - 1), iterator != 0) {\n    *(char *)(bufferAddress + remainingLength) = (char)data;\n    data = data >> 8;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010354e",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "write_data_0010354e"
        },
        "FUN_00103ab3": {
            "renaming": {
                "FUN_00103ab3": "FUNC_00103ab3"
            },
            "code": "\nvoid FUNC_00103ab3(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab3",
            "calling": [
                "caseD_3",
                "FUN_00103a90"
            ],
            "imported": false,
            "current_name": "FUNC_00103ab3"
        },
        "FUN_00104da0": {
            "renaming": {
                "FUN_00104da0": "get_type_00104da0",
                "param_1": "input",
                "iVar1": "type",
                "iVar2": "comparisonResult",
                "uVar3": "errorMsg"
            },
            "code": "\nint getType_00104da0(char *input)\n\n{\n  int type;\n  int comparisonResult;\n  undefined8 errorMsg;\n  \n  type = strcasecmp(input,\"rel\");\n  if (type == 0) {\n    type = 1;\n  }\n  else {\n    comparisonResult = strcasecmp(input,\"exec\");\n    type = 2;\n    if (comparisonResult != 0) {\n      type = strcasecmp(input,\"dyn\");\n      if (type == 0) {\n        type = 3;\n      }\n      else {\n        type = strcasecmp(input,\"none\");\n        if (type != 0) {\n          errorMsg = dcgettext(0,\"Unknown type: %s\\n\",5);\n          error(errorMsg,input);\n          type = -1;\n        }\n      }\n    }\n  }\n  return type;\n}\n\n",
            "called": [
                "dcgettext",
                "strcasecmp",
                "error",
                "FUN_001023ce"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104da0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "get_type_00104da0"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_001032de": {
            "renaming": {
                "FUN_001032de": "update_elf_header_001032de",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "puVar1": "pointer1",
                "__ptr": "buffer",
                "pcVar2": "message",
                "puVar3": "pointer2"
            },
            "code": "\nvoid updateElfHeader_001032de(FILE *outputFile,int exitCode)\n\n{\n  undefined8 *pointer1;\n  void *buffer;\n  char *message;\n  undefined4 *pointer2;\n  \n  pointer2 = &DAT_00108ca0;\n  buffer = (void *)FUN_00103186(&DAT_00106137,0);\n  do {\n    pointer1 = (undefined8 *)(pointer2 + 6);\n    pointer2 = pointer2 + 4;\n    buffer = (void *)FUN_00103006(buffer,buffer,&DAT_001061ef,*pointer1,0);\n  } while (pointer2 != (undefined4 *)&DAT_00108d90);\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> elffile(s)\\n\",5);\n  fprintf(outputFile,message,\"elfedit\");\n  message = (char *)dcgettext(0,\" Update the ELF header of ELF files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  --input-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set input machine type\\n  --output-mach [none|i386|iamcu|l1om|k1om|x86_64]\\n                              Set output machine type\\n  --input-type [none|rel|exec|dyn]\\n                              Set input file type\\n  --output-type [none|rel|exec|dyn]\\n                              Set output file type\\n  --input-osabi [%s]\\n                              Set input OSABI\\n  --output-osabi [%s]\\n                              Set output OSABI\\n  --input-abiversion [0-255]  Set input ABIVERSION\\n  --output-abiversion [0-255] Set output ABIVERSION\\n\"\n                             ,5);\n  fprintf(outputFile,message,buffer,buffer);\n  message = (char *)dcgettext(0,\n                             \"  --enable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Enable x86 feature\\n  --disable-x86-feature [ibt|shstk|lam_u48|lam_u57]\\n                              Disable x86 feature\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -h --help                   Display this information\\n  -v --version                Display the version number of %s\\n\"\n                             ,5);\n  fprintf(outputFile,message,\"elfedit\");\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n  free(buffer);\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00103186",
                "exit",
                "FUN_00103006",
                "fprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032de",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "update_elf_header_001032de"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00104ce0",
                "FUN_00104c60",
                "FUN_001022c0",
                "FUN_0010234b",
                "FUN_00104d30",
                "FUN_00104da0"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "FUN_00104de0": {
            "renaming": {
                "FUN_00104de0": "process_elf_header_00104de0",
                "param_1": "param_file_name",
                "param_2": "param_file",
                "iVar1": "seek_result",
                "__off": "offset",
                "sVar2": "read_result",
                "uVar3": "return_value",
                "pcVar4": "error_message",
                "uVar5": "byte_1",
                "uVar6": "byte_2"
            },
            "code": "\n\n\nundefined8 process_elf_header_00104de0(undefined8 param_file_name,FILE *param_file)\n\n{\n  int seek_result;\n  long offset;\n  size_t read_result;\n  undefined8 return_value;\n  char *error_message;\n  uint byte_1;\n  uint byte_2;\n  \n  offset = ftell(param_file);\n  read_result = fread(&DAT_001093e0,0x10,1,param_file);\n  if ((read_result == 1) && (_DAT_001093e0 == 0x464c457f)) {\n    DAT_001093b8 = FUN_0010354e;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093b8 = FUN_00103ad0;\n    }\n    DAT_001093c0 = FUN_0010347f;\n    if (DAT_001093e5 != '\\x02') {\n      DAT_001093c0 = FUN_00103a90;\n    }\n    if ((char)_DAT_001093e4 == '\\x01') {\n      read_result = fread(&DAT_00109390,0x24,1,param_file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109390,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109392,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109394,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109398,4);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_0010939c,4);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_001093a0,4);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_001093a4,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_001093a8,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_001093aa,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_001093ac,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_001093ae,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_001093b0,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_001093b2,2);\n      _DAT_00109380 = _DAT_001093e0;\n      uRam0000000000109384 = _DAT_001093e4;\n      _DAT_00109388 = _DAT_001093e8;\n      uRam000000000010938c = uRam00000000001093ec;\n    }\n    else {\n      if ((char)_DAT_001093e4 != '\\x02') {\n        return_value = FUN_00102558();\n        return return_value;\n      }\n      read_result = fread(&DAT_00109350,0x30,1,param_file);\n      if (read_result != 1) goto code_r0x00102558;\n      DAT_00109418 = (*DAT_001093c0)(&DAT_00109350,2);\n      DAT_0010941a = (*DAT_001093c0)(&DAT_00109352,2);\n      _DAT_00109408 = (*DAT_001093c0)(&DAT_00109354,4);\n      _DAT_001093f0 = (*DAT_001093c0)(&DAT_00109358,8);\n      DAT_001093f8 = (*DAT_001093c0)(&DAT_00109360,8);\n      _DAT_00109400 = (*DAT_001093c0)(&DAT_00109368,8);\n      _DAT_00109410 = (*DAT_001093c0)(&DAT_00109370,4);\n      _DAT_0010941c = (*DAT_001093c0)(&DAT_00109374,2);\n      _DAT_00109420 = (*DAT_001093c0)(&DAT_00109376,2);\n      DAT_00109424 = (*DAT_001093c0)(&DAT_00109378,2);\n      _DAT_00109428 = (*DAT_001093c0)(&DAT_0010937a,2);\n      _DAT_0010942c = (*DAT_001093c0)(&DAT_0010937c,2);\n      _DAT_00109430 = (*DAT_001093c0)(&DAT_0010937e,2);\n      _DAT_00109340 = _DAT_001093e0;\n      uRam0000000000109344 = _DAT_001093e4;\n      _DAT_00109348 = _DAT_001093e8;\n      uRam000000000010934c = uRam00000000001093ec;\n    }\n    seek_result = fseek(param_file,offset,0);\n    if (seek_result != 0) {\n      return_value = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n      error(return_value,param_file_name);\n    }\n    byte_1 = _DAT_001093e4 >> 0x10 & 0xff;\n    if ((char)byte_1 == '\\x01') {\n      byte_1 = (uint)DAT_0010941a;\n      if (byte_1 == DAT_0010916c) {\n        return 0;\n      }\n      byte_2 = _DAT_001093e4 & 0xff;\n      if (DAT_00109170 == 0xffffffff) {\n        if (DAT_0010941a == 6) {\n          DAT_00109170 = 1;\n        }\n        else if (DAT_0010941a < 7) {\n          DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n        }\n        else {\n          DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n        }\n      }\n      if ((byte_2 == DAT_00109170) || (DAT_00109170 == 3)) {\n        if ((byte_2 == DAT_00109168) || (DAT_00109168 == 3)) {\n          if ((byte_1 == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n            byte_1 = (uint)DAT_00109418;\n            if ((DAT_00109164 == 0xffffffff) || (byte_1 == DAT_00109164)) {\n              byte_1 = _DAT_001093e4 >> 0x18;\n              if ((DAT_0010915c == 0xffffffff) || (byte_1 == DAT_0010915c)) {\n                byte_1 = _DAT_001093e8 & 0xff;\n                if ((byte_1 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                  if ((char)byte_2 == '\\x01') {\n                    if (DAT_0010916c != 0xffffffff) {\n                      (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                    }\n                    if (DAT_00109160 != -1) {\n                      (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                    }\n                    if (DAT_00109158 != -1) {\n                      uRam0000000000109384 =\n                           CONCAT13((char)DAT_00109158,(undefined3)uRam0000000000109384);\n                    }\n                    if (DAT_00109150 != -1) {\n                      _DAT_00109388 = CONCAT31(DAT_00109388_1,(char)DAT_00109150);\n                    }\n                    read_result = fwrite(&DAT_00109380,0x34,1,param_file);\n                    if (read_result == 1) {\n                      return 0;\n                    }\n                    return_value = FUN_001024ec();\n                    return return_value;\n                  }\n                  if ((char)byte_2 != '\\x02') {\n                    \n                    abort();\n                  }\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    uRam0000000000109344 =\n                         CONCAT13((char)DAT_00109158,(undefined3)uRam0000000000109344);\n                  }\n                  if (DAT_00109150 != -1) {\n                    _DAT_00109348 = CONCAT31(DAT_00109348_1,(char)DAT_00109150);\n                  }\n                  read_result = fwrite(&DAT_00109340,0x40,1,param_file);\n                  if (read_result == 1) {\n                    return 0;\n                  }\n                  return_value = FUN_001024ec();\n                  return return_value;\n                }\n                error_message = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n                byte_2 = DAT_00109154;\n              }\n              else {\n                error_message = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n                byte_2 = DAT_0010915c;\n              }\n            }\n            else {\n              error_message = \"%s: Unmatched e_type: %d is not %d\\n\";\n              byte_2 = DAT_00109164;\n            }\n          }\n          else {\n            error_message = \"%s: Unmatched e_machine: %d is not %d\\n\";\n            byte_2 = DAT_00109174;\n          }\n          return_value = dcgettext(0,error_message,5);\n          error(return_value,param_file_name,byte_1,byte_2);\n          return 1;\n        }\n        error_message = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n        byte_1 = DAT_00109168;\n      }\n      else {\n        error_message = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n        byte_1 = DAT_00109170;\n      }\n      return_value = dcgettext(0,error_message,5);\n      error(return_value,param_file_name,byte_2,byte_1);\n    }\n    else {\n      return_value = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n      error(return_value,param_file_name,byte_1,1);\n    }\n  }\n  else {\ncode_r0x00102558:\n    return_value = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n    error(return_value,param_file_name);\n  }\n  return 1;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_0010354e",
                "FUN_00102558",
                "error",
                "ftell",
                "FUN_00103ad0",
                "FUN_001024ec",
                "FUN_00103a90",
                "fseek",
                "abort",
                "FUN_00102434",
                "FUN_0010347f",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104de0",
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d"
            ],
            "imported": false,
            "current_name": "process_elf_header_00104de0"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103bf0",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102558": {
            "renaming": {
                "FUN_00102558": "read_elf_header_failed_00102558",
                "uVar1": "errorMsg",
                "dcgettext": "getErrorMessage",
                "error": "printErrorMessage"
            },
            "code": "\nundefined8 readElfHeaderFailed_00102558(void)\n\n{\n  undefined8 errorMsg;\n  \n  errorMsg = dcgettext(0,\"%s: Failed to read ELF header\\n\",5);\n  printErrorMessage(errorMsg);\n  return 1;\n}\n\n",
            "called": [
                "dcgettext",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102558",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "read_elf_header_failed_00102558"
        },
        "FUN_00103449": {
            "renaming": {
                "FUN_00103449": "resize_memory_00103449",
                "param_1": "memoryBlock",
                "param_2": "newSize",
                "__size": "size",
                "pvVar1": "newBlock"
            },
            "code": "\nvoid resizeMemory_00103449(void *memoryBlock,size_t newSize)\n\n{\n  size_t size;\n  void *newBlock;\n  \n  size = 1;\n  if (newSize != 0) {\n    size = newSize;\n  }\n  if (memoryBlock == (void *)0x0) {\n    newBlock = malloc(size);\n  }\n  else {\n    newBlock = realloc(memoryBlock,size);\n  }\n  if (newBlock == (void *)0x0) {\n    FUN_00102fc7(size);\n  }\n  return;\n}\n\n",
            "called": [
                "malloc",
                "FUN_00102fc7",
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103449",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "resize_memory_00103449"
        },
        "FUN_00102fc7": {
            "renaming": {
                "FUN_00102fc7": "allocate_memory_00102fc7",
                "param_1": "mem_size",
                "cVar1": "success",
                "pvVar2": "brk_ptr",
                "sVar3": "str_length",
                "uVar4": "temp",
                "pcVar5": "result_string",
                "pcVar8": "current_string",
                "ppcVar6": "string_array",
                "ppcVar10": "string_ptr_array",
                "ppcVar11": "string_ptr_array_copy",
                "__s": "format_string",
                "__ptr": "file_stream",
                "bVar9": "flag",
                "uStack_f8": "stack_size",
                "apcStack_e0": "string_array_stack",
                "uStack_c0": "param_copy",
                "lStack_b8": "brk_ptr_offset",
                "uStack_b0": "extra_param",
                "uStack_28": "mem_size_copy"
            },
            "code": "\n\n\nchar * allocate_memory_00102fc7(undefined8 mem_size)\n\n{\n  char success;\n  void *brk_ptr;\n  size_t str_length;\n  ulong temp;\n  char *result_string;\n  char **string_array;\n  undefined8 extraout_RDX;\n  long lVar7;\n  char *format_string;\n  FILE *file_stream;\n  char *current_string;\n  byte flag;\n  undefined8 extraout_XMM0_Qa;\n  uint stack_size;\n  char **string_ptr_array;\n  char **string_ptr_array_copy;\n  char *string_array_stack [4];\n  undefined8 param_copy;\n  long brk_ptr_offset;\n  undefined8 extra_param;\n  undefined8 mem_size_copy;\n  \n  flag = 0;\n  brk_ptr = sbrk(0);\n  brk_ptr_offset = (long)brk_ptr + -0x10a0e0;\n  string_array_stack[3] = \"\";\n  format_string = \"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\";\n  file_stream = _stderr;\n  param_copy = mem_size;\n  fprintf(_stderr,\"\\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\\n\");\n  success = FUN_00102fbc();\n  if (success != '\\0') {\n    extra_param = extraout_XMM0_Qa;\n  }\n  lVar7 = 0;\n  stack_size = 0x10;\n  current_string = format_string;\n  string_ptr_array = (char **)register0x00000020;\n  string_array_stack[2] = (char *)extraout_RDX;\n  mem_size_copy = mem_size;\n  do {\n    str_length = strlen(current_string);\n    lVar7 = lVar7 + str_length;\n    if (stack_size < 0x30) {\n      temp = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      string_array = (char **)((long)string_array_stack + temp);\n      string_ptr_array_copy = string_ptr_array;\n    }\n    else {\n      string_ptr_array_copy = string_ptr_array + 1;\n      string_array = string_ptr_array;\n    }\n    current_string = *string_array;\n    string_ptr_array = string_ptr_array_copy;\n  } while (current_string != (char *)0x0);\n  result_string = (char *)FUN_00105370(lVar7 + 1);\n  stack_size = 0x10;\n  current_string = result_string;\n  string_ptr_array = (char **)register0x00000020;\n  do {\n    str_length = strlen(format_string);\n    for (; str_length != 0; str_length = str_length - 1) {\n      *current_string = *format_string;\n      format_string = format_string + (ulong)flag * -2 + 1;\n      current_string = current_string + (ulong)flag * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      string_array = (char **)((long)string_array_stack + temp);\n      string_ptr_array_copy = string_ptr_array;\n    }\n    else {\n      string_ptr_array_copy = string_ptr_array + 1;\n      string_array = string_ptr_array;\n    }\n    format_string = *string_array;\n    string_ptr_array = string_ptr_array_copy;\n  } while (format_string != (char *)0x0);\n  *current_string = '\\0';\n  free(file_stream);\n  return result_string;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00102fbc",
                "sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc7",
            "calling": [
                "FUN_00103449",
                "FUN_00102cbc"
            ],
            "imported": false,
            "current_name": "allocate_memory_00102fc7"
        },
        "FUN_00103a90": {
            "renaming": {
                "FUN_00103a90": "convert_data_00103a90",
                "param_1": "dataPointer",
                "param_2": "dataLength",
                "uVar1": "convertedValue",
                "uVar2": "errorMessage"
            },
            "code": "\nulong convertData_00103a90(ulong *dataPointer,ulong dataLength)\n\n{\n  ulong convertedValue;\n  undefined8 errorMessage;\n  \n  switch(dataLength & 0xffffffff) {\n  default:\n    errorMessage = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(errorMessage,dataLength & 0xffffffff);\n                    \n    abort();\n  case 1:\n    return (ulong)*(byte *)dataPointer;\n  case 2:\n    return (ulong)*(ushort *)dataPointer;\n  case 3:\n    convertedValue = FUNC_00103ab3(dataPointer,dataLength,\n                         (ulong)*(byte *)((long)dataPointer + 1) << 8 |\n                         (ulong)*(byte *)((long)dataPointer + 2) << 0x10);\n    return convertedValue;\n  case 4:\n    return (ulong)*(uint *)dataPointer;\n  case 5:\n    convertedValue = FUNC_00103ab3(dataPointer,dataLength,(ulong)*(byte *)((long)dataPointer + 4) << 0x20);\n    return convertedValue;\n  case 6:\n    convertedValue = FUNC_00103ab3(dataPointer,dataLength,\n                         (ulong)*(byte *)((long)dataPointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)dataPointer + 5) << 0x28);\n    return convertedValue;\n  case 7:\n    convertedValue = FUNC_00103ab3(dataPointer,dataLength,\n                         (ulong)*(byte *)((long)dataPointer + 4) << 0x20 |\n                         (ulong)*(byte *)((long)dataPointer + 5) << 0x28 | (ulong)*(uint *)dataPointer);\n    return convertedValue;\n  case 8:\n    return *dataPointer;\n  }\n}\n\n",
            "called": [
                "caseD_0",
                "caseD_3",
                "FUN_00103ab3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "convert_data_00103a90"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105394",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_001025ab": {
            "renaming": {
                "FUN_001025ab": "extract_symbols_from_archive_001025ab",
                "param_1": "output",
                "param_2": "archive_name",
                "param_3": "archive_file",
                "param_4": "long_table_size",
                "param_5": "flags",
                "__ptr": "ptr",
                "uVar1": "temp",
                "cVar2": "charVar",
                "iVar3": "result",
                "pcVar4": "tempString",
                "sVar5": "readSize",
                "uVar6": "string",
                "pcVar7": "stringPtr"
            },
            "code": "\nundefined4 extractSymbolsFromArchive_001025ab(char **output,char *archive_name,FILE *archive_file,long long_table_size,undefined4 flags)\n\n{\n  char **ptr;\n  undefined temp;\n  char charVar;\n  int result;\n  char *tempString;\n  size_t readSize;\n  undefined8 string;\n  char *stringPtr;\n  \n  tempString = strdup(archive_name);\n  output[2] = (char *)0x0;\n  *(undefined4 *)((long)output + 0x54) = 0;\n  *output = tempString;\n  output[1] = (char *)archive_file;\n  output[5] = (char *)0x0;\n  output[6] = (char *)0x0;\n  *(undefined4 *)(output + 10) = flags;\n  output[9] = (char *)0x8;\n  *(undefined (*) [16])(output + 3) = ZEXT816(0);\n  *(undefined (*) [16])(output + 7) = ZEXT816(0);\n  result = fseek(archive_file,8,0);\n  tempString = \"%s: failed to seek to first archive header\\n\";\n  if (result != 0) goto LAB_00102658;\n  ptr = output + 0xb;\n  readSize = fread(ptr,1,0x3c,archive_file);\n  if (readSize != 0x3c) {\n    if (readSize == 0) {\n      return 0;\n    }\n    tempString = \"%s: failed to read archive header\\n\";\n    goto LAB_00102658;\n  }\n  charVar = FUN_001027fd(ptr,\"/               \");\n  if (charVar == '\\0') {\n    charVar = FUN_001027fd(ptr,\"/SYM64/         \");\n    if (charVar != '\\0') {\n      *(undefined4 *)((long)output + 0x54) = 1;\n      result = FUN_001028be(output,8);\n      goto joined_r0x001026dd;\n    }\n  }\n  else {\n    result = FUN_001028be(output,4);\njoined_r0x001026dd:\n    if (result == 0) {\n      return 1;\n    }\n  }\n  charVar = FUN_001027fd(ptr);\n  if (charVar == '\\0') {\n    return 0;\n  }\n  temp = *(undefined *)((long)output + 0x92);\n  *(undefined *)((long)output + 0x92) = 0;\n  tempString = (char *)strtoul((char *)(output + 0x11),(char **)0x0,10);\n  stringPtr = \"%s: long name table is too small, (size = %ld)\\n\";\n  output[7] = tempString;\n  *(undefined *)((long)output + 0x92) = temp;\n  if ((char *)0x7 < tempString) {\n    if (((long)tempString <= long_table_size) && (-1 < (long)tempString)) {\n      output[9] = tempString + 0x3c + (long)output[9];\n      stringPtr = (char *)malloc((size_t)(tempString + 1));\n      output[6] = stringPtr;\n      if (stringPtr == (char *)0x0) {\n        string = dcgettext(0,\"Out of memory reading long symbol names in archive\\n\",5);\n        error(string);\n        return 1;\n      }\n      readSize = fread(stringPtr,(size_t)tempString,1,archive_file);\n      if (readSize == 1) {\n        if ((*(byte *)(output + 7) & 1) != 0) {\n          getc(archive_file);\n        }\n        output[6][(long)output[7]] = '\\0';\n        return 0;\n      }\n      free(output[6]);\n      tempString = \"%s: failed to read long symbol name string table\\n\";\n      output[6] = (char *)0x0;\nLAB_00102658:\n      string = dcgettext(0,tempString,5);\n      error(string,archive_name);\n      return 1;\n    }\n    stringPtr = \"%s: long name table is too big, (size = %#lx)\\n\";\n  }\n  string = dcgettext(0,stringPtr,5);\n  error(string,archive_name,tempString);\n  return 1;\n}\n\n",
            "called": [
                "FUN_001027fd",
                "malloc",
                "dcgettext",
                "fread",
                "fseek",
                "strtoul",
                "error",
                "strdup",
                "FUN_001028be",
                "free",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025ab",
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "extract_symbols_from_archive_001025ab"
        },
        "FUN_00102434": {
            "renaming": {
                "FUN_00102434": "verify_elf_header_00102434",
                "unaff_RBX": "file",
                "uVar1": "errorMessage",
                "sVar2": "writeStatus",
                "pcVar3": "errorMsgTemplate"
            },
            "code": "\nundefined8 verifyELFHeader_00102434(void)\n\n{\n  undefined8 errorMessage;\n  size_t writeStatus;\n  FILE *file;\n  char *errorMsgTemplate;\n  \n  errorMessage = dcgettext(0,\"%s: Failed to seek to ELF header\\n\",5);\n  error(errorMessage);\n  if (DAT_001093e6 == '\\x01') {\n    if (DAT_0010941a == DAT_0010916c) {\n      return 0;\n    }\n    if (DAT_00109170 == 0xffffffff) {\n      if (DAT_0010941a == 6) {\n        DAT_00109170 = 1;\n      }\n      else if (DAT_0010941a < 7) {\n        DAT_00109170 = (DAT_0010941a != 3) + 1 + (uint)(DAT_0010941a != 3);\n      }\n      else {\n        DAT_00109170 = 3 - ((ushort)(DAT_0010941a - 0xb4) < 2);\n      }\n    }\n    if ((DAT_001093e4 == DAT_00109170) || (DAT_00109170 == 3)) {\n      if ((DAT_001093e4 == DAT_00109168) || (DAT_00109168 == 3)) {\n        if ((DAT_0010941a == DAT_00109174) || (DAT_00109174 == 0xffffffff)) {\n          if ((DAT_00109164 == 0xffffffff) || (DAT_00109418 == DAT_00109164)) {\n            if ((DAT_0010915c == 0xffffffff) || (DAT_001093e7 == DAT_0010915c)) {\n              if ((DAT_001093e8 == DAT_00109154) || (DAT_00109154 == 0xffffffff)) {\n                if (DAT_001093e4 == 1) {\n                  if (DAT_0010916c != 0xffffffff) {\n                    (*DAT_001093b8)(&DAT_00109392,(long)(int)DAT_0010916c,2);\n                  }\n                  if (DAT_00109160 != -1) {\n                    (*DAT_001093b8)(&DAT_00109390,(long)DAT_00109160,2);\n                  }\n                  if (DAT_00109158 != -1) {\n                    DAT_00109387 = (undefined)DAT_00109158;\n                  }\n                  if (DAT_00109150 != -1) {\n                    DAT_00109388 = (undefined)DAT_00109150;\n                  }\n                  writeStatus = fwrite(&DAT_00109380,0x34,1,file);\n                  if (writeStatus == 1) {\n                    return 0;\n                  }\n                  errorMessage = FUN_001024ec();\n                  return errorMessage;\n                }\n                if (DAT_001093e4 != 2) {\n                    \n                  abort();\n                }\n                if (DAT_0010916c != 0xffffffff) {\n                  (*DAT_001093b8)(&DAT_00109352,(long)(int)DAT_0010916c,2);\n                }\n                if (DAT_00109160 != -1) {\n                  (*DAT_001093b8)(&DAT_00109350,(long)DAT_00109160,2);\n                }\n                if (DAT_00109158 != -1) {\n                  DAT_00109347 = (undefined)DAT_00109158;\n                }\n                if (DAT_00109150 != -1) {\n                  DAT_00109348 = (undefined)DAT_00109150;\n                }\n                writeStatus = fwrite(&DAT_00109340,0x40,1,file);\n                if (writeStatus == 1) {\n                  return 0;\n                }\n                errorMessage = FUN_001024ec();\n                return errorMessage;\n              }\n              errorMsgTemplate = \"%s: Unmatched EI_ABIVERSION: %d is not %d\\n\";\n            }\n            else {\n              errorMsgTemplate = \"%s: Unmatched EI_OSABI: %d is not %d\\n\";\n            }\n          }\n          else {\n            errorMsgTemplate = \"%s: Unmatched e_type: %d is not %d\\n\";\n          }\n        }\n        else {\n          errorMsgTemplate = \"%s: Unmatched e_machine: %d is not %d\\n\";\n        }\n        errorMessage = dcgettext(0,errorMsgTemplate,5);\n        error(errorMessage);\n        return 1;\n      }\n      errorMsgTemplate = \"%s: Unmatched output EI_CLASS: %d is not %d\\n\";\n    }\n    else {\n      errorMsgTemplate = \"%s: Unmatched input EI_CLASS: %d is not %d\\n\";\n    }\n    errorMessage = dcgettext(0,errorMsgTemplate,5);\n    error(errorMessage);\n  }\n  else {\n    errorMessage = dcgettext(0,\"%s: Unsupported EI_VERSION: %d is not %d\\n\",5);\n    error(errorMessage);\n  }\n  return 1;\n}\n\n",
            "called": [
                "dcgettext",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102434",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "verify_elf_header_00102434"
        },
        "FUN_00103006": {
            "renaming": {
                "FUN_00103006": "reverse_and_concatenate_strings_00103006",
                "param_1": "string1_length",
                "param_2": "string2_length",
                "param_3": "string3_length",
                "param_4": "string4_length",
                "param_5": "string5_length",
                "param_6": "string6_length",
                "param_7": "string7_length",
                "param_8": "string8_length",
                "param_9": "string_to_free",
                "param_10": "input_strings",
                "param_11": "ptr1",
                "param_12": "ptr2",
                "param_13": "str1",
                "param_14": "str2",
                "in_AL": "flag",
                "sVar1": "str_length",
                "uVar2": "temp",
                "pcVar3": "result",
                "ppcVar4": "temp_ptr",
                "lVar5": "total_length",
                "pcVar6": "current_string",
                "bVar7": "increment",
                "local_f0": "stack_size",
                "local_e8": "stack_ptr_array",
                "local_d8": "local_vars",
                "local_b8": "local_var1",
                "local_b0": "local_var2",
                "local_a8": "local_var3",
                "local_98": "local_var4",
                "local_88": "local_var5",
                "local_78": "local_var6",
                "local_68": "local_var7",
                "local_58": "local_var8",
                "local_48": "local_var9",
                "local_38": "local_var10"
            },
            "code": "\nchar * reverseAndConcatenateStrings_00103006(undefined4 string1_length,undefined4 string2_length,undefined4 string3_length,undefined4 string4_length,\n                   undefined4 string5_length,undefined4 string6_length,undefined4 string7_length,undefined4 string8_length,\n                   void *string_to_free,char *input_strings,undefined8 ptr1,undefined8 ptr2,\n                   undefined8 str1,undefined8 str2)\n\n{\n  char flag;\n  size_t str_length;\n  ulong temp;\n  char *result;\n  char **temp_ptr;\n  long total_length;\n  char *current_string;\n  byte increment;\n  uint stack_size;\n  char **stack_ptr_array;\n  char *local_vars [4];\n  undefined8 local_var1;\n  undefined8 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  \n  increment = 0;\n  if (flag != '\\0') {\n    local_var3 = string1_length;\n    local_var4 = string2_length;\n    local_var5 = string3_length;\n    local_var6 = string4_length;\n    local_var7 = string5_length;\n    local_var8 = string6_length;\n    local_var9 = string7_length;\n    local_var10 = string8_length;\n  }\n  stack_ptr_array = (char **)&stack0x00000008;\n  total_length = 0;\n  stack_size = 0x10;\n  current_string = input_strings;\n  local_vars[2] = (char *)ptr1;\n  local_vars[3] = (char *)ptr2;\n  local_var1 = str1;\n  local_var2 = str2;\n  do {\n    str_length = strlen(current_string);\n    total_length = total_length + str_length;\n    if (stack_size < 0x30) {\n      temp = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      temp_ptr = (char **)((long)local_vars + temp);\n    }\n    else {\n      temp_ptr = stack_ptr_array;\n      stack_ptr_array = stack_ptr_array + 1;\n    }\n    current_string = *temp_ptr;\n  } while (current_string != (char *)0x0);\n  result = (char *)FUN_00105370(total_length + 1);\n  stack_size = 0x10;\n  stack_ptr_array = (char **)&stack0x00000008;\n  current_string = result;\n  do {\n    str_length = strlen(input_strings);\n    for (; str_length != 0; str_length = str_length - 1) {\n      *current_string = *input_strings;\n      input_strings = input_strings + (ulong)increment * -2 + 1;\n      current_string = current_string + (ulong)increment * -2 + 1;\n    }\n    if (stack_size < 0x30) {\n      temp = (ulong)stack_size;\n      stack_size = stack_size + 8;\n      temp_ptr = (char **)((long)local_vars + temp);\n    }\n    else {\n      temp_ptr = stack_ptr_array;\n      stack_ptr_array = stack_ptr_array + 1;\n    }\n    input_strings = *temp_ptr;\n  } while (input_strings != (char *)0x0);\n  *current_string = '\\0';\n  free(string_to_free);\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "free",
                "FUN_00105370"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103006",
            "calling": [
                "FUN_001032de"
            ],
            "imported": false,
            "current_name": "reverse_and_concatenate_strings_00103006"
        },
        "FUN_0010347f": {
            "renaming": {
                "FUN_0010347f": "convert_data_0010347f",
                "param_1": "dataPtr",
                "param_2": "dataLength",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "errorMsg"
            },
            "code": "\nulong convertData_0010347f(ulong *dataPtr,undefined4 dataLength)\n\n{\n  uint value1;\n  ulong value2;\n  undefined8 errorMsg;\n  \n  switch(dataLength) {\n  case 1:\n    return (ulong)*(byte *)dataPtr;\n  case 2:\n    return (ulong)CONCAT11((char)*(undefined2 *)dataPtr,(char)((ushort)*(undefined2 *)dataPtr >> 8))\n    ;\n  case 3:\n    return (ulong)*(byte *)((long)dataPtr + 1) << 8 | (ulong)*(byte *)dataPtr << 0x10 |\n           (ulong)*(byte *)((long)dataPtr + 2);\n  case 4:\n    value1 = *(uint *)dataPtr;\n    return (ulong)(value1 >> 0x18 | (value1 & 0xff0000) >> 8 | (value1 & 0xff00) << 8 | value1 << 0x18);\n  case 5:\n    value1 = *(uint *)((long)dataPtr + 1);\n    return (ulong)CONCAT14(*(byte *)dataPtr,\n                           value1 >> 0x18 | (value1 & 0xff0000) >> 8 | (value1 & 0xff00) << 8 |\n                           value1 << 0x18);\n  case 6:\n    value1 = *(uint *)((long)dataPtr + 2);\n    return (ulong)*(byte *)((long)dataPtr + 1) << 0x20 | (ulong)*(byte *)dataPtr << 0x28 |\n           (ulong)(value1 >> 0x18 | (value1 & 0xff0000) >> 8 | (value1 & 0xff00) << 8 | value1 << 0x18);\n  case 7:\n    value1 = *(uint *)((long)dataPtr + 3);\n    return (ulong)*(byte *)((long)dataPtr + 2) << 0x20 | (ulong)*(byte *)((long)dataPtr + 1) << 0x28\n           | (ulong)*(byte *)dataPtr << 0x30 |\n           (ulong)(value1 >> 0x18 | (value1 & 0xff0000) >> 8 | (value1 & 0xff00) << 8 | value1 << 0x18);\n  case 8:\n    value2 = *dataPtr;\n    return value2 >> 0x38 | (value2 & 0xff000000000000) >> 0x28 | (value2 & 0xff0000000000) >> 0x18 |\n           (value2 & 0xff00000000) >> 8 | (value2 & 0xff000000) << 8 | (value2 & 0xff0000) << 0x18 |\n           (value2 & 0xff00) << 0x28 | value2 << 0x38;\n  default:\n    errorMsg = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n    error(errorMsg,dataLength);\n                    \n    abort();\n  }\n}\n\n",
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010347f",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "convert_data_0010347f"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "FUN_0010234b": {
            "renaming": {
                "FUN_0010234b": "get_machine_type_0010234b",
                "unaff_RBX": "machineType",
                "iVar1": "comparisonResult",
                "uVar2": "errorMsg"
            },
            "code": "\nint getMachineType_0010234b(void)\n\n{\n  int comparisonResult;\n  undefined8 errorMsg;\n  char *machineType;\n  \n  comparisonResult = strcasecmp(machineType,\"x86_64\");\n  if (comparisonResult == 0) {\n    comparisonResult = 0x3e;\n  }\n  else {\n    comparisonResult = strcasecmp(machineType,\"x86-64\");\n    if (comparisonResult == 0) {\n      comparisonResult = 0x3e;\n    }\n    else {\n      comparisonResult = strcasecmp(machineType,\"none\");\n      if (comparisonResult != 0) {\n        errorMsg = dcgettext(0,\"Unknown machine type: %s\\n\",5);\n        error(errorMsg);\n        comparisonResult = -1;\n      }\n    }\n  }\n  return comparisonResult;\n}\n\n",
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010234b",
            "calling": [
                "FUN_00104d30"
            ],
            "imported": false,
            "current_name": "get_machine_type_0010234b"
        },
        "FUN_00103b30": {
            "renaming": {
                "FUN_00103b30": "FUNC_00103b30"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103b43) */\n/* WARNING: Removing unreachable block (ram,0x00103b4f) */\n\nvoid FUNC_00103b30(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103b30",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103b30"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00104c60": {
            "renaming": {
                "FUN_00104c60": "get_x86_feature_bits_00104c60",
                "param_1": "feature_name",
                "param_2": "enable",
                "param_3": "message",
                "param_4": "result",
                "iVar1": "strcasecmp_result",
                "uVar2": "feature_bits",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] get_x86_feature_bits_00104c60(char *feature_name,int enable,undefined8 message,undefined8 result)\n\n{\n  int strcasecmp_result;\n  uint feature_bits;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  strcasecmp_result = strcasecmp(feature_name,\"ibt\");\n  feature_bits = 1;\n  if (strcasecmp_result != 0) {\n    strcasecmp_result = strcasecmp(feature_name,\"shstk\");\n    feature_bits = 2;\n    if (strcasecmp_result != 0) {\n      strcasecmp_result = strcasecmp(feature_name,\"lam_u48\");\n      if (strcasecmp_result == 0) {\n        feature_bits = 4;\n      }\n      else {\n        strcasecmp_result = strcasecmp(feature_name,\"lam_u57\");\n        feature_bits = 8;\n        if (strcasecmp_result != 0) {\n          error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n          error(error_message,feature_name);\n          error_message = 0xffffffff;\n          goto LAB_00104ca5;\n        }\n      }\n    }\n  }\n  if (enable == 0) {\n    DAT_00109440 = feature_bits | DAT_00109440;\n    DAT_00109444 = ~feature_bits & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_bits | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_bits;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  return_value._8_8_ = result;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "called": [
                "strcasecmp",
                "FUN_001022c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c60",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "get_x86_feature_bits_00104c60"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bf0",
                "FUN_001024ec"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103bf0",
                "FUN_00102fbc",
                "FUN_001032de"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "warn": {
            "renaming": {},
            "code": "\n\n\nvoid warn(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n         undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n         undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n         undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Warning: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102da5",
            "calling": [],
            "imported": false,
            "current_name": "warn"
        },
        "FUN_00102fbc": {
            "renaming": {
                "FUN_00102fbc": "exit_program_00102fbc"
            },
            "code": "\nvoid exit_program_00102fbc(void)\n\n{\n                    \n  exit(1);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fbc",
            "calling": [
                "FUN_00102fc7",
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "exit_program_00102fbc"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103bf0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00103bf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b00",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_0010354e",
                "FUN_00104de0",
                "caseD_0",
                "FUN_0010347f",
                "FUN_00102c98"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_00102f65": {
            "renaming": {
                "FUN_00102f65": "clear_memory_00102f65",
                "param_1": "memoryPointers",
                "param_1[3]": "memoryPointer2",
                "param_1[4]": "memoryPointer3",
                "param_1[6]": "memoryPointer4"
            },
            "code": "\nvoid clearMemory_00102f65(void **memoryPointers)\n\n{\n  free(*memoryPointers);\n  free(memoryPointer2);\n  free(memoryPointer3);\n  free(memoryPointer4);\n  *memoryPointers = (void *)0x0;\n  memoryPointer4 = (void *)0x0;\n  *(undefined (*) [16])(memoryPointers + 3) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f65",
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "clear_memory_00102f65"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00104de0",
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00102323": {
            "renaming": {
                "FUN_00102323": "print_unknown_osabi_error_00102323",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "auVar2": "returnValue"
            },
            "code": "\nundefined  [16] printUnknownOSABIError_00102323(void)\n\n{\n  undefined8 errorMessage;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(errorMessage);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102323",
            "calling": [
                "FUN_00104ce0"
            ],
            "imported": false,
            "current_name": "print_unknown_osabi_error_00102323"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_0010354e",
                "error",
                "FUN_00102558",
                "FUN_00102cc4",
                "FUN_00103bf0",
                "FUN_00102323",
                "FUN_001024ec",
                "FUN_001022c0",
                "FUN_001025ab",
                "FUN_001032de",
                "FUN_00104de0",
                "caseD_0",
                "warn",
                "FUN_00102434",
                "FUN_001028be",
                "FUN_0010234b",
                "FUN_0010347f",
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00104da0",
                "FUN_00102c98"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "FUN_001027fd": {
            "renaming": {
                "FUN_001027fd": "string_comparison_001027fd",
                "param_1": "str1",
                "param_2": "str2",
                "iVar1": "result",
                "in_RAX": "returnValue",
                "__n": "length",
                "extraout_var": "extraVar",
                "auVar2": "comparisonResult"
            },
            "code": "\nundefined  [16] stringComparison_001027fd(char *str1,char *str2)\n\n{\n  int result;\n  undefined8 returnValue;\n  size_t length;\n  undefined4 extraVar;\n  undefined comparisonResult [16];\n  \n  length = strlen(str2);\n  result = strncmp(str1,str2,length);\n  comparisonResult._1_7_ = (undefined7)(CONCAT44(extraVar,result) >> 8);\n  comparisonResult[0] = result == 0;\n  comparisonResult._8_8_ = returnValue;\n  return comparisonResult;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027fd",
            "calling": [
                "FUN_001025ab"
            ],
            "imported": false,
            "current_name": "string_comparison_001027fd"
        },
        "FUN_00102c98": {
            "renaming": {
                "FUN_00102c98": "handle_unhandled_data_length_00102c98",
                "unaff_EBX": "errorCode",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid handleUnhandledDataLength_00102c98(void)\n\n{\n  undefined8 errorMessage;\n  undefined4 errorCode;\n  \n  errorMessage = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(errorMessage,errorCode);\n                    \n  abort();\n}\n\n",
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c98",
            "calling": [
                "FUN_00103ad0"
            ],
            "imported": false,
            "current_name": "handle_unhandled_data_length_00102c98"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "error": {
            "renaming": {},
            "code": "\n\n\nvoid error(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n          undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,char *param_9,\n          undefined8 param_10,undefined8 param_11,undefined8 param_12,undefined8 param_13,\n          undefined8 param_14)\n\n{\n  char in_AL;\n  char *__format;\n  undefined4 local_e0;\n  undefined4 local_dc;\n  undefined *local_d8;\n  undefined *local_d0;\n  undefined local_c8 [8];\n  undefined8 local_c0;\n  undefined8 local_b8;\n  undefined8 local_b0;\n  undefined8 local_a8;\n  undefined8 local_a0;\n  undefined4 local_98;\n  undefined4 local_88;\n  undefined4 local_78;\n  undefined4 local_68;\n  undefined4 local_58;\n  undefined4 local_48;\n  undefined4 local_38;\n  undefined4 local_28;\n  \n  if (in_AL != '\\0') {\n    local_98 = param_1;\n    local_88 = param_2;\n    local_78 = param_3;\n    local_68 = param_4;\n    local_58 = param_5;\n    local_48 = param_6;\n    local_38 = param_7;\n    local_28 = param_8;\n  }\n  local_c0 = param_10;\n  local_b8 = param_11;\n  local_b0 = param_12;\n  local_a8 = param_13;\n  local_a0 = param_14;\n  fflush(_stdout);\n  local_d8 = &stack0x00000008;\n  local_d0 = local_c8;\n  local_e0 = 8;\n  local_dc = 0x30;\n  __format = (char *)dcgettext(0,\"%s: Error: \",5);\n  fprintf(_stderr,__format,\"elfedit\");\n  vfprintf(_stderr,param_9,&local_e0);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e85",
            "calling": [
                "FUN_0010354e",
                "FUN_00102558",
                "FUN_00102cc4",
                "FUN_00103bf0",
                "FUN_00102323",
                "FUN_001024ec",
                "FUN_001022c0",
                "FUN_001025ab",
                "FUN_00104de0",
                "caseD_0",
                "FUN_00102434",
                "FUN_001028be",
                "FUN_0010234b",
                "FUN_0010347f",
                "FUN_0010358d",
                "FUN_001029a5",
                "FUN_00104da0",
                "FUN_00102c98"
            ],
            "imported": false,
            "current_name": "error"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "caseD_0": {
            "renaming": {},
            "code": "\nvoid switchD_00103aac::caseD_0(void)\n\n{\n  undefined8 uVar1;\n  undefined4 unaff_EBX;\n  \n  uVar1 = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(uVar1,unaff_EBX);\n                    \n  abort();\n}\n\n",
            "called": [
                "dcgettext",
                "abort",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010289a",
            "calling": [
                "FUN_00103a90"
            ],
            "imported": false,
            "current_name": "caseD_0"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103bf0",
                "FUN_001028be",
                "FUN_001025ab",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_001024ec": {
            "renaming": {
                "FUN_001024ec": "handle_failed_update_001024ec",
                "piVar1": "ptrErrno",
                "uVar2": "translatedErrorMessage"
            },
            "code": "\nundefined8 handleFailedUpdate_001024ec(void)\n\n{\n  int *ptrErrno;\n  undefined8 translatedErrorMessage;\n  \n  ptrErrno = __errno_location();\n  strerror(*ptrErrno);\n  translatedErrorMessage = dcgettext(0,\"%s: Failed to update ELF header: %s\\n\",5);\n  error(translatedErrorMessage);\n  return 1;\n}\n\n",
            "called": [
                "dcgettext",
                "error",
                "strerror",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024ec",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "handle_failed_update_001024ec"
        },
        "caseD_3": {
            "renaming": {},
            "code": "\nvoid switchD_00103aac::caseD_3(long param_1,undefined8 param_2)\n\n{\n  FUNC_00103ab3(param_1,param_2,\n               (ulong)*(byte *)(param_1 + 1) << 8 | (ulong)*(byte *)(param_1 + 2) << 0x10);\n  return;\n}\n\n",
            "called": [
                "FUN_00103ab3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102825",
            "calling": [
                "FUN_00103a90"
            ],
            "imported": false,
            "current_name": "caseD_3"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103006",
                "FUN_00102f65",
                "FUN_00103bf0",
                "FUN_001025ab",
                "FUN_001032de",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00103186": {
            "renaming": {
                "FUN_00103186": "generate_string_00103186",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "character",
                "sVar1": "length",
                "uVar2": "size",
                "pcVar3": "newString",
                "ppcVar4": "stringPtr",
                "lVar5": "totalLength",
                "pcVar6": "currentString",
                "pcVar7": "destination",
                "bVar8": "flag",
                "local_e0": "counter",
                "local_d8": "stackPtr",
                "local_c8": "paramArray",
                "local_a8": "param13_64",
                "local_a0": "param14_64",
                "local_98": "param1_copy",
                "local_88": "param2_copy",
                "local_78": "param3_copy",
                "local_68": "param4_copy",
                "local_58": "param5_copy",
                "local_48": "param6_copy",
                "local_38": "param7_copy",
                "local_28": "param8_copy"
            },
            "code": "\nchar * generateString_00103186(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                   undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                   undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                   undefined8 param13,undefined8 param14)\n\n{\n  char character;\n  size_t length;\n  ulong size;\n  char *newString;\n  char **stringPtr;\n  long totalLength;\n  char *currentString;\n  char *destination;\n  byte flag;\n  uint counter;\n  char **stackPtr;\n  char *paramArray [4];\n  undefined8 param13_64;\n  undefined8 param14_64;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  flag = 0;\n  if (character != '\\0') {\n    param1_copy = input1;\n    param2_copy = input2;\n    param3_copy = input3;\n    param4_copy = input4;\n    param5_copy = input5;\n    param6_copy = input6;\n    param7_copy = input7;\n    param8_copy = input8;\n  }\n  stackPtr = (char **)&stack0x00000008;\n  totalLength = 0;\n  counter = 8;\n  currentString = \"none\";\n  paramArray[1] = (char *)param10;\n  paramArray[2] = (char *)param11;\n  paramArray[3] = (char *)param12;\n  param13_64 = param13;\n  param14_64 = param14;\n  do {\n    length = strlen(currentString);\n    totalLength = totalLength + length;\n    if (counter < 0x30) {\n      size = (ulong)counter;\n      counter = counter + 8;\n      stringPtr = (char **)((long)paramArray + size);\n    }\n    else {\n      stringPtr = stackPtr;\n      stackPtr = stackPtr + 1;\n    }\n    currentString = *stringPtr;\n  } while (currentString != (char *)0x0);\n  currentString = \"none\";\n  newString = (char *)FUN_00105370(totalLength + 1);\n  counter = 8;\n  stackPtr = (char **)&stack0x00000008;\n  destination = newString;\n  do {\n    length = strlen(currentString);\n    for (; length != 0; length = length - 1) {\n      *destination = *currentString;\n      currentString = currentString + (ulong)flag * -2 + 1;\n      destination = destination + (ulong)flag * -2 + 1;\n    }\n    if (counter < 0x30) {\n      size = (ulong)counter;\n      counter = counter + 8;\n      stringPtr = (char **)((long)paramArray + size);\n    }\n    else {\n      stringPtr = stackPtr;\n      stackPtr = stackPtr + 1;\n    }\n    currentString = *stringPtr;\n  } while (currentString != (char *)0x0);\n  *destination = '\\0';\n  return newString;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00105370"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103186",
            "calling": [
                "FUN_001032de"
            ],
            "imported": false,
            "current_name": "generate_string_00103186"
        },
        "FUN_00103bf0": {
            "renaming": {
                "FUN_00103bf0": "parse_command_line_arguments_00103bf0",
                "param_1": "argc",
                "param_2": "argv",
                "cVar1": "charValue",
                "bVar2": "byteValue",
                "uVar3": "ulongValue",
                "bVar4": "boolValue",
                "bVar5": "boolValue2",
                "bVar6": "boolValue3",
                "bVar7": "boolValue4",
                "iVar8": "index",
                "uVar9": "result",
                "iVar10": "status",
                "__addr": "address",
                "__ptr": "pointer",
                "plVar11": "longPointer",
                "uVar12": "ulongValue2",
                "uVar13": "ulongValue3",
                "uVar14": "ulongValue4",
                "uVar15": "ulongValue5",
                "pFVar16": "filePointer",
                "sVar17": "size",
                "__s": "string",
                "sVar18": "size2",
                "piVar19": "errorNumber",
                "lVar20": "longValue",
                "plVar21": "longPointer2",
                "pbVar22": "bytePointer",
                "lVar23": "longValue2",
                "plVar24": "longPointer3",
                "uVar25": "returnValue",
                "uVar26": "ulongValue6",
                "pbVar27": "bytePointer2",
                "uVar28": "ulongValue7",
                "lVar29": "longValue3",
                "uVar30": "returnValue2",
                "iVar31": "counter",
                "ppuVar32": "pointerPointer",
                "uVar33": "ulongValue8",
                "pcVar34": "stringValue",
                "uVar35": "ulongValue9",
                "pcVar36": "stringValue2",
                "puVar37": "pointer2",
                "local_138": "localArray",
                "local_120": "localValue",
                "local_d8": "localString",
                "local_d0": "localBytePointer",
                "local_c8": "localStatObject"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nuint parseCommandLineArguments_00103bf0(int argc,long *argv)\n\n{\n  char charValue;\n  byte byteValue;\n  ulong ulongValue;\n  bool boolValue;\n  bool boolValue2;\n  bool boolValue3;\n  bool boolValue4;\n  int index;\n  uint result;\n  int status;\n  void *address;\n  void *pointer;\n  long *longPointer;\n  ulong ulongValue2;\n  ulong ulongValue3;\n  ulong ulongValue4;\n  ulong ulongValue5;\n  FILE *filePointer;\n  size_t size;\n  byte *string;\n  size_t size2;\n  int *errorNumber;\n  long longValue;\n  long *longPointer2;\n  byte *bytePointer;\n  long longValue2;\n  long *longPointer3;\n  undefined8 returnValue;\n  ulong ulongValue6;\n  byte *bytePointer2;\n  uint ulongValue7;\n  long longValue3;\n  uint returnValue2;\n  int counter;\n  undefined **pointerPointer;\n  uint ulongValue8;\n  char *stringValue;\n  ulong ulongValue9;\n  char *stringValue2;\n  undefined8 *pointer2;\n  ulong ulongValue8;\n  undefined8 *localArray;\n  ulong localValue;\n  char *localString;\n  byte *localBytePointer;\n  stat localStatObject;\n  \n  index = 0;\n  counter = 2000;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  longPointer2 = argv;\nLAB_00103c54:\n  longValue3 = (long)(index + 1);\n  do {\n    index = (int)longValue3;\n    if (argc <= index) {\n      pointerPointer = &PTR_s_input_mach_00109180;\n      break;\n    }\n    if (*(char *)longPointer2[longValue3] == '@') {\n      counter = counter + -1;\n      if (counter == 0) {\n        longValue3 = *longPointer2;\n        stringValue2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00104739;\n      }\n      stringValue2 = (char *)longPointer2[longValue3] + 1;\n      status = stat(stringValue2,&localStatObject);\n      if (-1 < status) {\n        if ((localStatObject.st_mode & 0xf000) == 0x4000) {\n          do {\n            longValue3 = *longPointer2;\n            stringValue2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00104739:\n            fprintf(_stderr,stringValue2,longValue3);\n            FUN_00102fbc();\n          } while( true );\n        }\n        filePointer = fopen(stringValue2,\"r\");\n        if (filePointer != (FILE *)0x0) goto code_r0x00104650;\n      }\n    }\n    longValue3 = longValue3 + 1;\n  } while( true );\nLAB_00103c87:\n  index = getopt_long(argc,longPointer2,&DAT_0010604c,pointerPointer,0);\n  if (index == -1) {\n    if ((_optind == argc) ||\n       (((DAT_00109444 | DAT_00109440) == 0 &&\n        (pointerPointer = (undefined **)0x0,\n        (DAT_0010916c & DAT_00109160 & DAT_00109158 & DAT_00109150) == 0xffffffff))))\n    goto switchD_00103cba_caseD_69;\n    returnValue2 = 0;\n    goto LAB_00103d1c;\n  }\n  switch(index) {\n  case 0x68:\n    FUN_001032de(_stdout,0);\n  default:\nswitchD_00103cba_caseD_69:\n    FUN_001032de(_stderr,1);\n    goto switchD_00103cba_caseD_9a;\n  case 0x76:\n    printf(\"GNU %s %s\\n\",\"elfedit\",\"(GNU Binutils for Debian) 2.40\");\n    stringValue2 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(stringValue2);\n    stringValue2 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(stringValue2);\n                    \n    exit(0);\n  case 0x96:\n    DAT_00109174 = FUN_00104d30(_optarg);\n    if (DAT_00109174 < 0) {\n      return 1;\n    }\n    if (DAT_00109174 == 6) {\n      DAT_00109170 = 1;\n    }\n    else if (DAT_00109174 < 7) {\n      DAT_00109170 = (DAT_00109174 != 3) + 1 + (uint)(DAT_00109174 != 3);\n    }\n    else {\n      DAT_00109170 = 3 - (uint)(DAT_00109174 - 0xb4U < 2);\n    }\n    goto LAB_00103c87;\n  case 0x97:\n    DAT_0010916c = FUN_00104d30(_optarg);\n    if ((int)DAT_0010916c < 0) {\n      return 1;\n    }\n    if ((int)DAT_0010916c < 0xb6) {\n      DAT_00109168 = 2;\n      if (((int)DAT_0010916c < 0xb4) && (DAT_00109168 = 1, DAT_0010916c != 3)) {\n        DAT_00109168 = (DAT_0010916c != 6) + 1 + (uint)(DAT_0010916c != 6);\n      }\n    }\n    else {\n      DAT_00109168 = 3;\n    }\n    goto LAB_00103c87;\n  case 0x98:\n    DAT_00109164 = FUN_00104da0(_optarg);\n    returnValue2 = DAT_00109164;\n    break;\n  case 0x99:\n    DAT_00109160 = FUN_00104da0(_optarg);\n    returnValue2 = DAT_00109160;\n    break;\n  case 0x9a:\n    goto switchD_00103cba_caseD_9a;\n  case 0x9b:\n    DAT_00109158 = FUN_00104ce0(_optarg);\n    returnValue2 = DAT_00109158;\n    break;\n  case 0x9c:\n    ulongValue5 = strtoul(_optarg,&localString,0);\n    returnValue2 = (uint)ulongValue5;\n    charValue = *localString;\n    DAT_00109154 = returnValue2;\n    stringValue2 = _optarg;\n    goto joined_r0x00104334;\n  case 0x9d:\n    ulongValue5 = strtoul(_optarg,&localString,0);\n    returnValue2 = (uint)ulongValue5;\n    charValue = *localString;\n    DAT_00109150 = returnValue2;\n    stringValue2 = _optarg;\njoined_r0x00104334:\n    _optarg = stringValue2;\n    if ((charValue != '\\0') || (0xff < returnValue2)) {\n      returnValue = dcgettext(0,\"Invalid ABIVERSION: %s\\n\",5);\n      error(returnValue,stringValue2);\n      return 1;\n    }\n    goto LAB_00103c87;\n  case 0x9e:\n    returnValue = 1;\n    goto LAB_00103e9d;\n  case 0x9f:\n    returnValue = 0;\nLAB_00103e9d:\n    returnValue2 = FUN_00104c60(_optarg,returnValue);\n  }\njoined_r0x00103eae:\n  if ((int)returnValue2 < 0) {\n    return 1;\n  }\n  goto LAB_00103c87;\nLAB_00103d1c:\n  longValue3 = (long)_optind;\n  if (argc <= _optind) {\n    return returnValue2;\n  }\n  _optind = _optind + 1;\n  stringValue2 = (char *)longPointer2[longValue3];\n  index = stat(stringValue2,&localStatObject);\n  if (index < 0) {\n    errorNumber = __errno_location();\n    stringValue = \"\\'%s\\': No such file\\n\";\n    if (*errorNumber == 2) goto LAB_00104497;\n    stringValue = strerror(*errorNumber);\n    returnValue = dcgettext(0,\"Could not locate \\'%s\\'.  System error message: %s\\n\",5);\n    error(returnValue,stringValue2,stringValue);\nLAB_001044ab:\n    result = 1;\n  }\n  else {\n    if ((localStatObject.st_mode & 0xf000) != 0x8000) {\n      stringValue = \"\\'%s\\' is not an ordinary file\\n\";\nLAB_00104497:\n      returnValue = dcgettext(0,stringValue,5);\n      error(returnValue,stringValue2);\n      goto LAB_001044ab;\n    }\n    filePointer = fopen(stringValue2,\"r+b\");\n    if (filePointer == (FILE *)0x0) {\n      stringValue = \"Input file \\'%s\\' is not readable\\n\";\n      goto LAB_00104497;\n    }\n    size = fread(&localBytePointer,8,1,filePointer);\n    if (size != 1) {\n      returnValue = dcgettext(0,\"%s: Failed to read file\\'s magic number\\n\",5);\n      error(returnValue,stringValue2);\n      fclose(filePointer);\n      goto LAB_001044ab;\n    }\n    if (localBytePointer == (byte *)0xa3e686372613c21) {\n      result = FUN_0010358d(stringValue2,filePointer,0);\n    }\n    else if (localBytePointer == (byte *)0xa3e6e6968743c21) {\n      result = FUN_0010358d(stringValue2,filePointer,1);\n    }\n    else {\n      rewind(filePointer);\n      DAT_00109438 = 0;\n      result = FUN_00104de0(stringValue2,filePointer);\n      if (((result == 0) && ((ushort)(DAT_00109418 - 2U) < 2)) &&\n         ((DAT_00109444 | DAT_00109440) != 0)) {\n        if ((DAT_0010941a == 3) ||\n           (stringValue = \"%s: Not an i386 nor x86-64 ELF file\\n\", DAT_0010941a == 0x3e)) {\n          index = fileno(filePointer);\n          index = fstat(index,&localStatObject);\n          if (index < 0) {\n            returnValue = dcgettext(0,\"%s: stat () failed\\n\",5);\n            error(returnValue,stringValue2);\n            result = 1;\n          }\n          else {\n            index = fileno(filePointer);\n            address = mmap((void *)0x0,localStatObject.st_size,3,1,index,0);\n            if (address == (void *)0xffffffffffffffff) {\n              stringValue = \"%s: mmap () failed\\n\";\n              goto LAB_0010438d;\n            }\n            pointer = (void *)FUN_00105370((ulong)DAT_00109424 << 6);\n            longValue3 = DAT_001093f8;\n            if (DAT_001093e4 == '\\x01') {\n              for (ulongValue5 = 0; (uint)ulongValue5 < DAT_00109424; ulongValue5 = (ulong)((uint)ulongValue5 + 1)) {\n                longValue = ulongValue5 * 0x20 + longValue3 + (long)address;\n                pointer2 = (undefined8 *)((long)pointer + ulongValue5 * 0x40);\n                returnValue = (*DAT_001093c0)(longValue,4);\n                *pointer2 = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 4,4);\n                pointer2[2] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 8,4);\n                pointer2[3] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0xc,4);\n                pointer2[4] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x10,4);\n                pointer2[5] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x14,4);\n                pointer2[6] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x18,4);\n                pointer2[1] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x1c,4);\n                pointer2[7] = returnValue;\n              }\n            }\n            else {\n              for (ulongValue7 = 0; ulongValue7 < DAT_00109424; ulongValue7 = ulongValue7 + 1) {\n                longValue = (ulong)ulongValue7 * 0x38 + longValue3 + (long)address;\n                pointer2 = (undefined8 *)((ulong)ulongValue7 * 0x40 + (long)pointer);\n                returnValue = (*DAT_001093c0)(longValue,4);\n                *pointer2 = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 8,8);\n                pointer2[2] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x10,8);\n                pointer2[3] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x18,8);\n                pointer2[4] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x20,8);\n                pointer2[5] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x28,8);\n                pointer2[6] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 4,4);\n                pointer2[1] = returnValue;\n                returnValue = (*DAT_001093c0)(longValue + 0x30,8);\n                pointer2[7] = returnValue;\n              }\n            }\n            for (ulongValue5 = 0; (uint)ulongValue5 < DAT_00109424; ulongValue5 = (ulong)((uint)ulongValue5 + 1)) {\n              longPointer = (long *)(ulongValue5 * 0x40 + (long)pointer);\n              if (*longPointer == 4) {\n                longValue3 = longPointer[5];\n                ulongValue = longPointer[7];\n                ulongValue9 = (long)address + longPointer[2];\n                for (localValue = ulongValue9; localValue < ulongValue9 + longValue3;\n                    localValue = localValue + ((ulongValue - 1) + ulongValue4 + ulongValue3 & ulongValue6)) {\n                  if ((ulongValue9 - localValue) + longValue3 < 0xc) {\nLAB_001044cb:\n                    returnValue = dcgettext(0,\"%s: Invalid PT_NOTE segment\\n\",5);\n                    error(returnValue,stringValue2);\n                    result = 1;\n                    goto LAB_001042bf;\n                  }\n                  longValue = (*DAT_001093c0)(localValue + 8,4);\n                  ulongValue2 = (*DAT_001093c0)(localValue,4);\n                  if ((ulongValue9 - (long)(char *)(localValue + 0xc)) + longValue3 < ulongValue2)\n                  goto LAB_001044cb;\n                  ulongValue3 = (*DAT_001093c0)(localValue + 4,4);\n                  ulongValue6 = -ulongValue;\n                  ulongValue4 = ulongValue + 0xb + ulongValue2 & ulongValue6;\n                  ulongValue8 = localValue + ulongValue4;\n                  if ((ulongValue3 != 0) &&\n                     ((ulongValue9 + longValue3 <= ulongValue8 || ((ulongValue9 - ulongValue8) + longValue3 < ulongValue3))))\n                  goto LAB_001044cb;\n                  if ((ulongValue2 == 4) &&\n                     ((index = strcmp((char *)(localValue + 0xc),\"GNU\"), index == 0 && (longValue == 5))\n                     )) {\n                    if ((ulongValue3 < 8) || (ulongValue3 % ulongValue != 0)) goto LAB_001044cb;\n                    ulongValue2 = ulongValue8 + ulongValue3;\n                    do {\n                      index = (*DAT_001093c0)(ulongValue8,4);\n                      ulongValue7 = (*DAT_001093c0)(ulongValue8 + 4,4);\n                      longValue = ulongValue8 + 8;\n                      if (ulongValue2 < longValue + (ulong)ulongValue7) goto LAB_001044cb;\n                      if (index == -0x3ffffffe) {\n                        if (ulongValue7 != 4) goto LAB_001044cb;\n                        ulongValue7 = (*DAT_001093c0)(longValue,4);\n                        if (DAT_00109444 == 0) {\n                          ulongValue8 = ulongValue7;\n                          if (DAT_00109440 == 0) goto LAB_001042bf;\nLAB_001042ac:\n                          ulongValue8 = ulongValue8 & ~DAT_00109440;\n                        }\n                        else {\n                          ulongValue8 = DAT_00109444 | ulongValue7;\n                          if (DAT_00109440 != 0) goto LAB_001042ac;\n                        }\n                        if (ulongValue7 != ulongValue8) {\n                          (*DAT_001093b8)(longValue,ulongValue8,4);\n                        }\n                        goto LAB_001042bf;\n                      }\n                      ulongValue8 = longValue + ((ulong)ulongValue7 + (ulongValue - 1) & ulongValue6);\n                    } while (7 < (long)(ulongValue2 - ulongValue8));\n                  }\n                }\n              }\n            }\nLAB_001042bf:\n            free(pointer);\n            munmap(address,localStatObject.st_size);\n          }\n        }\n        else {\nLAB_0010438d:\n          returnValue = dcgettext(0,stringValue,5);\n          error(returnValue,stringValue2);\n        }\n      }\n    }\n    fclose(filePointer);\n  }\n  returnValue2 = returnValue2 | result;\n  goto LAB_00103d1c;\nswitchD_00103cba_caseD_9a:\n  DAT_0010915c = FUN_00104ce0(_optarg);\n  returnValue2 = DAT_0010915c;\n  goto joined_r0x00103eae;\ncode_r0x00104650:\n  status = fseek(filePointer,0,2);\n  if (((status != -1) && (size = ftell(filePointer), size != 0xffffffffffffffff)) &&\n     (status = fseek(filePointer,0,0), status != -1)) {\n    string = (byte *)FUN_00105370(size + 1);\n    size2 = fread(string,1,size,filePointer);\n    if ((size == size2) || (status = ferror(filePointer), status == 0)) {\n      string[size2] = 0;\n      bytePointer2 = string;\nLAB_001046fc:\n      if (*bytePointer2 == 0) {\n        localArray = (undefined8 *)FUN_00105370(8);\n        *localArray = 0;\n      }\n      else {\n        if (((&DAT_00107040)[(ulong)*bytePointer2 * 2] & 0x40) != 0) goto code_r0x00104718;\n        localBytePointer = string;\n        strlen((char *)string);\n        bytePointer2 = (byte *)FUN_00105370();\n        localArray = (undefined8 *)0x0;\n        status = 0;\n        boolValue3 = false;\n        boolValue2 = false;\n        boolValue4 = false;\n        longValue = 0;\n        do {\n          FUN_00102fa0(&localBytePointer);\n          bytePointer = bytePointer2;\n          if ((status == 0) || (status + -1 <= (int)longValue)) {\n            if (localArray == (undefined8 *)0x0) {\n              status = 8;\n              localArray = (undefined8 *)FUN_00105370(0x40);\n            }\n            else {\n              status = status * 2;\n              localArray = (undefined8 *)FUN_00103449(localArray,(long)status << 3);\n            }\n            localArray[longValue] = 0;\n          }\n          for (; byteValue = *localBytePointer, byteValue != 0; localBytePointer = localBytePointer + 1) {\n            if ((((&DAT_00107040)[(ulong)byteValue * 2] & 0x40) != 0) &&\n               (boolValue = (bool)(boolValue2 | boolValue4 | boolValue3), !boolValue)) {\n              boolValue3 = false;\n              boolValue4 = false;\n              boolValue2 = boolValue;\n              break;\n            }\n            if (boolValue3) {\n              *bytePointer = byteValue;\n              boolValue3 = false;\n              bytePointer = bytePointer + 1;\n            }\n            else if (byteValue == 0x5c) {\n              boolValue3 = true;\n            }\n            else if (boolValue2) {\n              if (byteValue == 0x27) {\n                boolValue2 = false;\n              }\n              else {\nLAB_00104c08:\n                *bytePointer = byteValue;\n                bytePointer = bytePointer + 1;\n              }\n            }\n            else if (boolValue4) {\n              if (byteValue != 0x22) goto LAB_00104c08;\n              boolValue4 = false;\n            }\n            else if (byteValue == 0x27) {\n              boolValue2 = true;\n            }\n            else {\n              if (byteValue != 0x22) goto LAB_00104c08;\n              boolValue4 = true;\n            }\n          }\n          *bytePointer = 0;\n          returnValue = FUN_00103160();\n          localArray[longValue] = returnValue;\n          localArray[longValue + 1] = 0;\n          FUN_00102fa0(&localBytePointer);\n          longValue = longValue + 1;\n        } while (*localBytePointer != 0);\n        free(bytePointer2);\n      }\n      if (longPointer2 == argv) {\n        longValue = 1;\n        do {\n          longValue2 = longValue;\n          longValue = longValue2 + 1;\n        } while (longPointer2[longValue2 + -1] != 0);\n        longPointer3 = (long *)FUN_00105370((long)(int)longValue2 << 3);\n        longPointer = longPointer3;\n        while (longValue = *longPointer2, longPointer2 = longPointer2 + 1, longValue != 0) {\n          longValue = FUN_00103160();\n          *longPointer = longValue;\n          longPointer = longPointer + 1;\n        }\n        *longPointer = 0;\n        longValue = 0;\n      }\n      else {\n        longValue = 0;\n        longPointer3 = longPointer2;\n      }\n      for (; localArray[longValue] != 0; longValue = longValue + 1) {\n      }\n      free((void *)longPointer3[longValue3]);\n      longPointer2 = (long *)FUN_00103449(longPointer3,(longValue + 1 + (long)argc) * 8);\n      memmove(longPointer2 + longValue3 + longValue,longPointer2 + longValue3 + 1,(long)(argc - index) << 3);\n      argc = argc + -1 + (int)longValue;\n      memcpy(longPointer2 + longValue3,localArray,longValue * 8);\n      free(localArray);\n      free(string);\n      index = index + -1;\n    }\n    else {\n      free(string);\n    }\n  }\n  fclose(filePointer);\n  goto LAB_00103c54;\ncode_r0x00104718:\n  bytePointer2 = bytePointer2 + 1;\n  goto LAB_001046fc;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "FUN_00104c60",
                "strtoul",
                "error",
                "strcmp",
                "ferror",
                "FUN_00102fa0",
                "munmap",
                "FUN_00104d30",
                "FUN_00105370",
                "mmap",
                "fclose",
                "FUN_00104de0",
                "fileno",
                "fprintf",
                "FUN_00103449",
                "memcpy",
                "FUN_00102fbc",
                "bindtextdomain",
                "setlocale",
                "rewind",
                "__errno_location",
                "FUN_00104da0",
                "memmove",
                "FUN_00104ce0",
                "stat",
                "exit",
                "textdomain",
                "fopen",
                "ftell",
                "strlen",
                "FUN_00103160",
                "printf",
                "FUN_001032de",
                "fstat",
                "fseek",
                "strerror",
                "getopt_long",
                "FUN_0010358d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "parse_command_line_arguments_00103bf0"
        },
        "snprintf": {
            "renaming": {},
            "code": "\n\n\nint snprintf(char *__s,size_t __maxlen,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = snprintf(__s,__maxlen,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "snprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_0010358d"
            ],
            "imported": false,
            "current_name": "snprintf"
        },
        "FUN_00103ad0": {
            "renaming": {
                "FUN_00103ad0": "fill_memory_with_data_00103ad0",
                "param_1": "destination",
                "param_2": "data",
                "param_3": "length",
                "uVar1": "message",
                "uVar2": "count"
            },
            "code": "\nvoid fillMemoryWithData_00103ad0(long destination,ulong data,uint length)\n\n{\n  undefined8 message;\n  ulong count;\n  \n  if (length < 9) {\n    for (count = 0; length != count; count = count + 1) {\n      *(char *)(destination + count) = (char)data;\n      data = data >> 8;\n    }\n    return;\n  }\n  message = dcgettext(0,\"Unhandled data length: %d\\n\",5);\n  error(message,length);\n                    \n  abort();\n}\n\n",
            "called": [
                "FUN_00102c98"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ad0",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "fill_memory_with_data_00103ad0"
        },
        "FUN_00104ce0": {
            "renaming": {
                "FUN_00104ce0": "find_osabi_00104ce0",
                "param_1": "OSABI_to_find",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "comparison_result",
                "uVar2": "error_message",
                "uVar3": "index",
                "uVar4": "next_index",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] find_OSABI_00104ce0(char *OSABI_to_find,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  ulong index;\n  uint next_index;\n  undefined4 *puVar5;\n  undefined return_value [16];\n  \n  puVar5 = &DAT_00108ca0;\n  index = 0;\n  do {\n    comparison_result = strcasecmp(OSABI_to_find,*(char **)(puVar5 + 2));\n    if (comparison_result == 0) {\n      index = (ulong)(uint)(&DAT_00108ca0)[index * 4];\n      goto LAB_00104d20;\n    }\n    next_index = (int)index + 1;\n    index = (ulong)next_index;\n    puVar5 = puVar5 + 4;\n  } while (next_index != 0x10);\n  error_message = dcgettext(0,\"Unknown OSABI: %s\\n\",5);\n  error(error_message,OSABI_to_find);\n  index = 0xffffffff;\nLAB_00104d20:\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = index;\n  return return_value;\n}\n\n",
            "called": [
                "strcasecmp",
                "FUN_00102323"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ce0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "find_osabi_00104ce0"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00102cc4",
                "FUN_00103449",
                "FUN_001025ab",
                "FUN_0010358d",
                "FUN_00105370"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00102cc4": {
            "renaming": {
                "FUN_00102cc4": "extract_file_name_00102cc4",
                "param_1": "path",
                "param_2": "source",
                "param_3": "length",
                "__size": "totalSize",
                "lVar1": "totalLength",
                "cVar2": "currentChar",
                "pcVar3": "newPath",
                "pcVar4": "lastSlash",
                "uVar5": "localizedErrorMessage",
                "uVar6": "remainingLength",
                "uVar7": "nameLength",
                "bVar8": "flag"
            },
            "code": "\nchar * extractFileName_00102cc4(char *path,char *source,ulong length)\n\n{\n  ulong totalSize;\n  long totalLength;\n  char currentChar;\n  char *newPath;\n  char *lastSlash;\n  undefined8 localizedErrorMessage;\n  ulong remainingLength;\n  ulong nameLength;\n  byte flag;\n  \n  flag = 0;\n  newPath = path;\n  lastSlash = path;\n  while (currentChar = *newPath, currentChar != '\\0') {\n    newPath = newPath + 1;\n    if (currentChar == '/') {\n      lastSlash = newPath;\n    }\n  }\n  if ((*source == '/') || (path == lastSlash)) {\n    if (length + 1 == 0) {\n      return (char *)0x0;\n    }\n    lastSlash = (char *)malloc(length + 1);\n    remainingLength = length;\n    newPath = lastSlash;\n    if (lastSlash != (char *)0x0) {\n      for (; remainingLength != 0; remainingLength = remainingLength - 1) {\n        *newPath = *source;\n        source = source + (ulong)flag * -2 + 1;\n        newPath = newPath + (ulong)flag * -2 + 1;\n      }\n      lastSlash[length] = '\\0';\n      return lastSlash;\n    }\n  }\n  else {\n    nameLength = (long)lastSlash - (long)path;\n    totalLength = nameLength + length;\n    remainingLength = length;\n    if (length <= nameLength) {\n      remainingLength = nameLength;\n    }\n    totalSize = totalLength + 1;\n    if (totalSize < remainingLength) {\n      localizedErrorMessage = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      error(localizedErrorMessage,length);\n      return (char *)0x0;\n    }\n    lastSlash = (char *)malloc(totalSize);\n    newPath = lastSlash;\n    if (lastSlash != (char *)0x0) {\n      for (; nameLength != 0; nameLength = nameLength - 1) {\n        *newPath = *path;\n        path = path + (ulong)flag * -2 + 1;\n        newPath = newPath + (ulong)flag * -2 + 1;\n      }\n      for (; length != 0; length = length - 1) {\n        *newPath = *source;\n        source = source + (ulong)flag * -2 + 1;\n        newPath = newPath + (ulong)flag * -2 + 1;\n      }\n      lastSlash[totalLength] = '\\0';\n      return lastSlash;\n    }\n  }\n  localizedErrorMessage = dcgettext(0,\"Out of memory\\n\",5);\n  error(localizedErrorMessage);\n  return (char *)0x0;\n}\n\n",
            "called": [
                "malloc",
                "dcgettext",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cc4",
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "extract_file_name_00102cc4"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_001023ce": {
            "renaming": {
                "FUN_001023ce": "get_return_value_001023ce"
            },
            "code": "\nundefined8 getReturnValue_001023ce(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023ce",
            "calling": [
                "FUN_00104da0"
            ],
            "imported": false,
            "current_name": "get_return_value_001023ce"
        },
        "FUN_00102fa0": {
            "renaming": {
                "FUN_00102fa0": "skip_invalid_flags_00102fa0",
                "param_1": "byteArray"
            },
            "code": "\nvoid skipInvalidFlags_00102fa0(byte **byteArray)\n\n{\n  while (((&DAT_00107040)[(ulong)**byteArray * 2] & 0x40) != 0) {\n    *byteArray = *byteArray + 1;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fa0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "skip_invalid_flags_00102fa0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00104de0"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "fstat": {
            "renaming": {},
            "code": "\n\n\nint fstat(int __fd,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = fstat(__fd,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "fstat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00103bf0",
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "fstat"
        },
        "FUN_001022c0": {
            "renaming": {
                "FUN_001022c0": "update_x86_features_001022c0",
                "unaff_RBX": "feature_name",
                "unaff_EBP": "is_enabled",
                "iVar1": "strcasecmp_result",
                "uVar2": "feature_bit",
                "uVar3": "error_message",
                "auVar4": "result",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] update_x86_features_001022c0(void)\n\n{\n  int strcasecmp_result;\n  uint feature_bit;\n  undefined8 error_message;\n  char *feature_name;\n  int is_enabled;\n  undefined result [16];\n  undefined8 return_address;\n  \n  strcasecmp_result = strcasecmp(feature_name,\"lam_u48\");\n  if (strcasecmp_result == 0) {\n    feature_bit = 4;\n  }\n  else {\n    strcasecmp_result = strcasecmp(feature_name,\"lam_u57\");\n    feature_bit = 8;\n    if (strcasecmp_result != 0) {\n      error_message = dcgettext(0,\"Unknown x86 feature: %s\\n\",5);\n      error(error_message);\n      error_message = 0xffffffff;\n      goto LAB_00104ca5;\n    }\n  }\n  if (is_enabled == 0) {\n    DAT_00109440 = feature_bit | DAT_00109440;\n    DAT_00109444 = ~feature_bit & DAT_00109444;\n  }\n  else {\n    DAT_00109444 = feature_bit | DAT_00109444;\n    DAT_00109440 = DAT_00109440 & ~feature_bit;\n  }\n  error_message = 0;\nLAB_00104ca5:\n  result._8_8_ = return_address;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strcasecmp",
                "error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104c60"
            ],
            "imported": false,
            "current_name": "update_x86_features_001022c0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "error",
                "FUN_00102fc7",
                "FUN_00103bf0",
                "warn",
                "FUN_001032de"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_00105370": {
            "renaming": {
                "FUN_00105370": "extract_file_name_from_path_00105370",
                "param_1": "filePath",
                "param_2": "charSequence",
                "pcVar4": "lastSlash",
                "pcVar5": "fileNameLength",
                "pcVar6": "extractedFileName",
                "uVar7": "remainingCharCount",
                "extraout_RDX": "charSequenceLength",
                "uVar8": "fileNameLengthFromPath",
                "bVar9": "flag",
                "__size": "newFileNameSize",
                "lVar1": "totalFileSize",
                "uVar3": "errorMessage"
            },
            "code": "\nchar * extractFileNameFromPath_00105370(char *filePath,char *charSequence)\n\n{\n  ulong newFileNameSize;\n  long totalFileSize;\n  char cVar2;\n  undefined8 errorMessage;\n  char *lastSlash;\n  char *fileNameLength;\n  char *extractedFileName;\n  ulong remainingCharCount;\n  ulong charSequenceLength;\n  ulong fileNameLengthFromPath;\n  byte flag;\n  \n  flag = 0;\n  fileNameLength = (char *)0x1;\n  if (filePath != (char *)0x0) {\n    fileNameLength = filePath;\n  }\n  extractedFileName = (char *)malloc((size_t)fileNameLength);\n  if (extractedFileName != (char *)0x0) {\n    return extractedFileName;\n  }\n  FUN_00102fc7();\n  extractedFileName = fileNameLength;\n  lastSlash = fileNameLength;\n  while (cVar2 = *extractedFileName, cVar2 != '\\0') {\n    extractedFileName = extractedFileName + 1;\n    if (cVar2 == '/') {\n      lastSlash = extractedFileName;\n    }\n  }\n  if ((*charSequence == '/') || (fileNameLength == lastSlash)) {\n    if (charSequenceLength + 1 == 0) {\n      return (char *)0x0;\n    }\n    extractedFileName = (char *)malloc(charSequenceLength + 1);\n    remainingCharCount = charSequenceLength;\n    fileNameLength = extractedFileName;\n    if (extractedFileName != (char *)0x0) {\n      for (; remainingCharCount != 0; remainingCharCount = remainingCharCount - 1) {\n        *fileNameLength = *charSequence;\n        charSequence = charSequence + (ulong)flag * -2 + 1;\n        fileNameLength = fileNameLength + (ulong)flag * -2 + 1;\n      }\n      extractedFileName[charSequenceLength] = '\\0';\n      return extractedFileName;\n    }\n  }\n  else {\n    fileNameLengthFromPath = (long)lastSlash - (long)fileNameLength;\n    totalFileSize = fileNameLengthFromPath + charSequenceLength;\n    remainingCharCount = charSequenceLength;\n    if (charSequenceLength <= fileNameLengthFromPath) {\n      remainingCharCount = fileNameLengthFromPath;\n    }\n    newFileNameSize = totalFileSize + 1;\n    if (newFileNameSize < remainingCharCount) {\n      errorMessage = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      error(errorMessage,charSequenceLength);\n      return (char *)0x0;\n    }\n    lastSlash = (char *)malloc(newFileNameSize);\n    extractedFileName = lastSlash;\n    if (lastSlash != (char *)0x0) {\n      for (; remainingCharCount = charSequenceLength, fileNameLengthFromPath != 0; fileNameLengthFromPath = fileNameLengthFromPath - 1) {\n        *extractedFileName = *fileNameLength;\n        fileNameLength = fileNameLength + (ulong)flag * -2 + 1;\n        extractedFileName = extractedFileName + (ulong)flag * -2 + 1;\n      }\n      for (; remainingCharCount != 0; remainingCharCount = remainingCharCount - 1) {\n        *extractedFileName = *charSequence;\n        charSequence = charSequence + (ulong)flag * -2 + 1;\n        extractedFileName = extractedFileName + (ulong)flag * -2 + 1;\n      }\n      lastSlash[totalFileSize] = '\\0';\n      return lastSlash;\n    }\n  }\n  errorMessage = dcgettext(0,\"Out of memory\\n\",5);\n  error(errorMessage);\n  return (char *)0x0;\n}\n\n",
            "called": [
                "malloc",
                "FUN_00102cbc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105370",
            "calling": [
                "FUN_00103006",
                "FUN_00103186",
                "FUN_00103bf0",
                "FUN_00103160",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "extract_file_name_from_path_00105370"
        },
        "munmap": {
            "renaming": {},
            "code": "\n\n\nint munmap(void *__addr,size_t __len)\n\n{\n  int iVar1;\n  \n  iVar1 = munmap(__addr,__len);\n  return iVar1;\n}\n\n",
            "called": [
                "munmap"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "munmap"
        },
        "rewind": {
            "renaming": {},
            "code": "\n\n\nvoid rewind(FILE *__stream)\n\n{\n  rewind(__stream);\n  return;\n}\n\n",
            "called": [
                "rewind"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "rewind"
        },
        "FUN_00102cbc": {
            "renaming": {
                "FUN_00102cbc": "extract_file_name_00102cbc",
                "param_1": "input",
                "param_2": "filePath",
                "__size": "totalSize",
                "lVar1": "extraSize",
                "cVar2": "currentChar",
                "pcVar3": "currentCharPtr",
                "pcVar4": "lastSlashPtr",
                "uVar5": "errorString",
                "uVar6": "remainingSize",
                "extraout_RDX": "fileLen",
                "unaff_RBX": "pathPtr",
                "uVar7": "numCharsBeforeSlash",
                "bVar8": "flag"
            },
            "code": "\nchar * extractFileName_00102cbc(undefined8 input,char *filePath)\n\n{\n  ulong totalSize;\n  long extraSize;\n  char currentChar;\n  char *currentCharPtr;\n  char *lastSlashPtr;\n  undefined8 errorString;\n  ulong remainingSize;\n  ulong fileLen;\n  char *pathPtr;\n  ulong numCharsBeforeSlash;\n  byte flag;\n  \n  flag = 0;\n  FUN_00102fc7();\n  currentCharPtr = pathPtr;\n  lastSlashPtr = pathPtr;\n  while (currentChar = *currentCharPtr, currentChar != '\\0') {\n    currentCharPtr = currentCharPtr + 1;\n    if (currentChar == '/') {\n      lastSlashPtr = currentCharPtr;\n    }\n  }\n  if ((*filePath == '/') || (pathPtr == lastSlashPtr)) {\n    if (fileLen + 1 == 0) {\n      return (char *)0x0;\n    }\n    lastSlashPtr = (char *)malloc(fileLen + 1);\n    remainingSize = fileLen;\n    currentCharPtr = lastSlashPtr;\n    if (lastSlashPtr != (char *)0x0) {\n      for (; remainingSize != 0; remainingSize = remainingSize - 1) {\n        *currentCharPtr = *filePath;\n        filePath = filePath + (ulong)flag * -2 + 1;\n        currentCharPtr = currentCharPtr + (ulong)flag * -2 + 1;\n      }\n      lastSlashPtr[fileLen] = '\\0';\n      return lastSlashPtr;\n    }\n  }\n  else {\n    numCharsBeforeSlash = (long)lastSlashPtr - (long)pathPtr;\n    extraSize = numCharsBeforeSlash + fileLen;\n    remainingSize = fileLen;\n    if (fileLen <= numCharsBeforeSlash) {\n      remainingSize = numCharsBeforeSlash;\n    }\n    totalSize = extraSize + 1;\n    if (totalSize < remainingSize) {\n      errorString = dcgettext(0,\"Abnormal length of thin archive member name: %lx\\n\",5);\n      error(errorString,fileLen);\n      return (char *)0x0;\n    }\n    lastSlashPtr = (char *)malloc(totalSize);\n    currentCharPtr = lastSlashPtr;\n    if (lastSlashPtr != (char *)0x0) {\n      for (; remainingSize = fileLen, numCharsBeforeSlash != 0; numCharsBeforeSlash = numCharsBeforeSlash - 1) {\n        *currentCharPtr = *pathPtr;\n        pathPtr = pathPtr + (ulong)flag * -2 + 1;\n        currentCharPtr = currentCharPtr + (ulong)flag * -2 + 1;\n      }\n      for (; remainingSize != 0; remainingSize = remainingSize - 1) {\n        *currentCharPtr = *filePath;\n        filePath = filePath + (ulong)flag * -2 + 1;\n        currentCharPtr = currentCharPtr + (ulong)flag * -2 + 1;\n      }\n      lastSlashPtr[extraSize] = '\\0';\n      return lastSlashPtr;\n    }\n  }\n  errorString = dcgettext(0,\"Out of memory\\n\",5);\n  error(errorString);\n  return (char *)0x0;\n}\n\n",
            "called": [
                "FUN_00102fc7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cbc",
            "calling": [
                "FUN_00105370"
            ],
            "imported": false,
            "current_name": "extract_file_name_00102cbc"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001025ab"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "mmap": {
            "renaming": {},
            "code": "\n\n\nvoid * mmap(void *__addr,size_t __len,int __prot,int __flags,int __fd,__off_t __offset)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = mmap(__addr,__len,__prot,__flags,__fd,__offset);\n  return pvVar1;\n}\n\n",
            "called": [
                "mmap"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103bf0"
            ],
            "imported": false,
            "current_name": "mmap"
        },
        "sbrk": {
            "renaming": {},
            "code": "\n\n\nvoid * sbrk(intptr_t __delta)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = sbrk(__delta);\n  return pvVar1;\n}\n\n",
            "called": [
                "sbrk"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102fc7"
            ],
            "imported": false,
            "current_name": "sbrk"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001025ab"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_00102020"
            },
            "code": "\nvoid execute_indirect_function_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00102020"
        },
        "FUN_001029a5": {
            "renaming": {
                "FUN_001029a5": "extract_archive_member_001029a5",
                "param_1": "archiveMember",
                "param_2": "fileNames",
                "uVar1": "tempVar1",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "iVar6": "status",
                "uVar7": "longNameIndex",
                "uVar8": "longNameTableSize",
                "uVar9": "index",
                "uVar10": "tempVar2",
                "__stream": "file",
                "sVar11": "readSize",
                "puVar12": "resultArray",
                "lVar13": "counter",
                "pcVar14": "fileName",
                "pcVar15": "errorMsg",
                "pcVar16": "errorFmt",
                "local_c0": "tempBuffer",
                "local_b8": "fileStat"
            },
            "code": "\nundefined4 * extractArchiveMember_001029a5(undefined8 *archiveMember,char **fileNames)\n\n{\n  undefined tempVar1;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int status;\n  ulong longNameIndex;\n  ulong longNameTableSize;\n  ulong index;\n  undefined8 tempVar2;\n  FILE *file;\n  size_t readSize;\n  undefined4 *resultArray;\n  long counter;\n  char *fileName;\n  char *errorMsg;\n  char *errorFmt;\n  char *tempBuffer;\n  stat fileStat;\n  \n  if (*(char *)(archiveMember + 0xb) != '/') {\n    counter = 0;\n    do {\n      if (*(char *)((long)archiveMember + counter + 0x58) == '/') {\n        *(undefined *)((long)archiveMember + counter + 0x58) = 0;\n        resultArray = (undefined4 *)FUN_00103160(archiveMember + 0xb);\n        return resultArray;\n      }\n      counter = counter + 1;\n    } while (counter != 0x10);\n    resultArray = (undefined4 *)FUN_00105370(0x11);\n    result1 = *(undefined4 *)(archiveMember + 0xb);\n    result2 = *(undefined4 *)((long)archiveMember + 0x5c);\n    result3 = *(undefined4 *)(archiveMember + 0xc);\n    result4 = *(undefined4 *)((long)archiveMember + 100);\n    *(undefined *)(resultArray + 4) = 0;\n    *resultArray = result1;\n    resultArray[1] = result2;\n    resultArray[2] = result3;\n    resultArray[3] = result4;\n    return resultArray;\n  }\n  if ((archiveMember[6] == 0) || (archiveMember[7] == 0)) {\n    errorMsg = \"Archive member uses long names, but no longname table found\\n\";\nLAB_00102acd:\n    tempVar2 = dcgettext(0,errorMsg,5);\n    error(tempVar2);\n    return (undefined4 *)0x0;\n  }\n  tempVar1 = *(undefined *)((long)archiveMember + 0x92);\n  archiveMember[8] = 0;\n  *(undefined *)((long)archiveMember + 0x92) = 0;\n  longNameIndex = strtoul((char *)((long)archiveMember + 0x59),&tempBuffer,10);\n  if (((*(int *)(archiveMember + 10) != 0) && (tempBuffer != (char *)0x0)) && (*tempBuffer == ':')) {\n    longNameTableSize = strtoul(tempBuffer + 1,(char **)0x0,10);\n    archiveMember[8] = longNameTableSize;\n  }\n  longNameTableSize = archiveMember[7];\n  *(undefined *)((long)archiveMember + 0x92) = tempVar1;\n  if (longNameTableSize < longNameIndex) {\n    tempVar2 = dcgettext(0,\"Found long name index (%ld) beyond end of long name table\\n\",5);\n    error(tempVar2,longNameIndex);\n    return (undefined4 *)0x0;\n  }\n  counter = archiveMember[6];\n  for (index = longNameIndex;\n      ((longNameTableSize != index && (*(char *)(counter + index) != '\\0')) &&\n      (*(char *)(counter + index) != '\\n')); index = index + 1) {\n  }\n  if ((index != 0) && (*(char *)(counter + -1 + index) == '/')) {\n    index = index - 1;\n  }\n  if (index < longNameTableSize) {\n    longNameTableSize = index;\n  }\n  *(undefined *)(counter + longNameTableSize) = 0;\n  if ((*(int *)(archiveMember + 10) == 0) || (archiveMember[8] == 0)) goto LAB_00102c2d;\n  if (longNameTableSize <= longNameIndex) {\n    errorMsg = \"Invalid Thin archive member name\\n\";\n    goto LAB_00102acd;\n  }\n  errorMsg = (char *)FUN_00102cc4(*archiveMember,archiveMember[6] + longNameIndex,longNameTableSize - longNameIndex);\n  if (errorMsg != (char *)0x0) {\n    if ((*fileNames == (char *)0x0) || (status = strcmp(*fileNames,errorMsg), status != 0)) {\n      if ((FILE *)fileNames[1] != (FILE *)0x0) {\n        fclose((FILE *)fileNames[1]);\n        fileNames[1] = (char *)0x0;\n      }\n      FUN_00102f65(fileNames);\n      file = fopen(errorMsg,\"rb\");\n      if (file != (FILE *)0x0) {\n        status = fileno(file);\n        status = fstat(status,&fileStat);\n        if ((-1 < status) &&\n           (status = FUN_001025ab(fileNames,errorMsg,file,fileStat.st_size,0), status == 0))\n        goto LAB_00102b84;\n      }\n    }\n    else {\nLAB_00102b84:\n      status = fseek((FILE *)fileNames[1],archiveMember[8],0);\n      if (status == 0) {\n        readSize = fread(fileNames + 0xb,1,0x3c,(FILE *)fileNames[1]);\n        if (readSize == 0x3c) {\n          if (*(short *)((long)fileNames + 0x92) == 0xa60) {\n            resultArray = (undefined4 *)extractArchiveMember_001029a5(fileNames,0);\n            if (resultArray != (undefined4 *)0x0) {\n              free(errorMsg);\n              return resultArray;\n            }\n            goto LAB_00102c25;\n          }\n          fileName = *fileNames;\n          errorFmt = \"%s: did not find a valid archive header\\n\";\n        }\n        else {\n          fileName = *fileNames;\n          errorFmt = \"%s: failed to read archive header\\n\";\n        }\n      }\n      else {\n        fileName = *fileNames;\n        errorFmt = \"%s: failed to seek to next file name\\n\";\n      }\n      tempVar2 = dcgettext(0,errorFmt,5);\n      error(tempVar2,fileName);\n    }\n  }\nLAB_00102c25:\n  free(errorMsg);\nLAB_00102c2d:\n  resultArray = (undefined4 *)FUN_00103160(archiveMember[6] + longNameIndex);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "fread",
                "strtoul",
                "FUN_00102f65",
                "strcmp",
                "fopen",
                "error",
                "FUN_00102cc4",
                "FUN_00103160",
                "FUN_001025ab",
                "fstat",
                "FUN_00105370",
                "fclose",
                "fseek",
                "fileno",
                "FUN_001029a5",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001029a5",
            "calling": [
                "FUN_0010358d",
                "FUN_001029a5"
            ],
            "imported": false,
            "current_name": "extract_archive_member_001029a5"
        }
    },
    "used_tokens": 34576,
    "layers": [
        [
            "FUN_0010358d",
            "FUN_00104d30",
            "FUN_001028be",
            "FUN_00103160",
            "FUN_0010354e",
            "FUN_00104da0",
            "FUN_001032de",
            "FUN_00104de0",
            "FUN_00102558",
            "FUN_00103449",
            "FUN_00102fc7",
            "FUN_00103a90",
            "FUN_001025ab",
            "FUN_00102434",
            "FUN_00103006",
            "FUN_0010347f",
            "FUN_0010234b",
            "FUN_00104c60",
            "FUN_00102fbc",
            "FUN_00102f65",
            "FUN_00102323",
            "FUN_001027fd",
            "FUN_00102c98",
            "FUN_001024ec",
            "FUN_00103186",
            "FUN_00103bf0",
            "FUN_00103ad0",
            "FUN_00104ce0",
            "FUN_00102cc4",
            "FUN_001023ce",
            "FUN_00102fa0",
            "FUN_001022c0",
            "FUN_00105370",
            "FUN_00102cbc",
            "FUN_00102020",
            "FUN_001029a5"
        ]
    ],
    "locked_functions": []
}