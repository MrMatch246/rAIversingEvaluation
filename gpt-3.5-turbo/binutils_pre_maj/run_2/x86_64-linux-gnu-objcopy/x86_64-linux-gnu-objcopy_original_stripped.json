{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "assign_value_to_debug_variable_00113dfe",
                "param_1": "valueToAssign",
                "param_2": "newValue",
                "lVar1": "debugVariableAddress"
            },
            "code": "\nvoid assignValueToDebugVariable_00113dfe(undefined4 valueToAssign,undefined newValue)\n\n{\n  long debugVariableAddress;\n  \n  debugVariableAddress = debug_make_type_constprop_0(3,valueToAssign);\n  if (debugVariableAddress != 0) {\n    *(undefined *)(debugVariableAddress + 0x10) = newValue;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "assign_value_to_debug_variable_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "bfd_nonfatal.cold",
                "debug_find_named_type",
                "display_info.isra.0",
                "debug_record_function",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "stab_find_type",
                "stab_demangle_v3_arg",
                "debug_tag_type",
                "debug_get_real_type.isra.0",
                "stab_context",
                "debug_record_variable",
                "parse_stab",
                "list_supported_targets",
                "debug_name_type",
                "list_matching_formats",
                "finish_stab",
                "parse_stab_type",
                "debug_record_parameter",
                "copy_usage",
                "debug_end_block",
                "main",
                "debug_end_function",
                "bad_stab",
                "warn_stab",
                "stab_bad_demangle",
                "debug_start_block",
                "report",
                "bfd_nonfatal_message",
                "strip_usage",
                "debug_record_line",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "debug_start_source",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "update_string_0010ab4d",
                "param_1": "input_ptr",
                "param_2": "new_string",
                "uVar1": "struct_ptr",
                "lVar2": "struct_ptr_copy",
                "auVar3": "result",
                "sVar4": "new_string_length",
                "pcVar5": "existing_string",
                "sVar6": "existing_string_length",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] updateString_0010ab4d(long input_ptr,char *new_string,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong struct_ptr;\n  long struct_ptr_copy;\n  undefined result [16];\n  size_t new_string_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined return_value [16];\n  \n  struct_ptr = *(ulong *)(input_ptr + 0x60);\n  if ((struct_ptr != 0) && (*(long *)(struct_ptr + 0x20) != 0)) {\n    existing_string = *(char **)(struct_ptr + 0x30);\n    new_string_length = strlen(new_string);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(new_string_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,new_string_length + 4 + existing_string_length);\n    }\n    new_string_length = strlen(existing_string);\n    sprintf(existing_string + new_string_length,\"%s::\",new_string);\n    struct_ptr_copy = *(long *)(input_ptr + 0x60);\n    *(char **)(struct_ptr_copy + 0x30) = existing_string;\n    return_value._1_7_ = (undefined7)((ulong)struct_ptr_copy >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param_4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = struct_ptr;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_string_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_debug_type_to_namespace_0010c218",
                "param_1": "file",
                "param_2": "type",
                "param_3": "name_type",
                "uVar1": "error_message",
                "lVar2": "type_handle",
                "pauVar3": "type_data",
                "lVar4": "namespace_entry"
            },
            "code": "\n\n\nlong addDebugTypeToNamespace_0010c218(long file,long type,long name_type)\n\n{\n  undefined8 error_message;\n  long type_handle;\n  undefined (*type_data) [16];\n  long namespace_entry;\n  \n  if ((type != 0) && (name_type != 0)) {\n    if ((*(long *)(file + 8) == 0) || (*(long *)(file + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      type_handle = debug_make_type_constprop_0(0x16,0);\n      if (type_handle != 0) {\n        type_data = (undefined (*) [16])xmalloc(0x10);\n        namespace_entry = *(long *)(file + 0x10);\n        *type_data = ZEXT816(0);\n        *(long *)(*type_data + 8) = name_type;\n        *(undefined (**) [16])(type_handle + 0x10) = type_data;\n        namespace_entry = debug_add_to_namespace_constprop_0(namespace_entry + 0x10,type,0,3);\n        if (namespace_entry != 0) {\n          *(long *)(namespace_entry + 0x20) = type_handle;\n          *(long *)*type_data = namespace_entry;\n          return type_handle;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_debug_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "fseek",
                "xstrdup",
                "bfd_set_default_target",
                "delete_symbol_htabs",
                "display_info.isra.0",
                "xatexit_cleanup.lto_priv.0",
                "setlocale",
                "filename_cmp",
                "textdomain",
                "parse_flags",
                "getc",
                "htab_create_alloc",
                "section_add_load_file",
                "malloc",
                "bfd_set_error_program_name",
                "non_fatal",
                "fopen",
                "smart_rename",
                "xcalloc",
                "fread",
                "bfd_scan_arch",
                "strlen",
                "dcgettext",
                "memcpy",
                "mkstemp",
                "strcpy",
                "xmalloc",
                "htab_hash_redefnode",
                "bfd_nonfatal_message",
                "close",
                "bfd_init",
                "create_symbol_htab",
                "strchr",
                "bfd_errmsg",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_find_slot",
                "template_in_dir",
                "print_version",
                "stat",
                "ftell",
                "add_redefine_and_check",
                "xexit",
                "xrealloc",
                "htab_elements",
                "copy_file",
                "find_section_list",
                "strtoul",
                "strcasecmp",
                "get_file_size",
                "unlink_if_ordinary",
                "strtol",
                "xmalloc_set_program_name",
                "ferror",
                "strncasecmp",
                "dup",
                "strncpy",
                "free",
                "add_specific_symbols",
                "bindtextdomain",
                "strerror",
                "fprintf",
                "init_section_add",
                "copy_usage",
                "memmove",
                "fatal",
                "strcmp",
                "__errno_location",
                "eq_string_redefnode",
                "handle_remove_section_option",
                "bfd_get_error",
                "strip_usage",
                "fclose",
                "getopt_long",
                "parse_vma",
                "xstrndup",
                "convert_efi_target",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_debug_block_0010be88",
                "param_1": "blockPtr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "returnValue",
                "puVar1": "lastBlockPtr",
                "uVar2": "success",
                "puVar3": "newBlockPtr",
                "puVar4": "currentBlockPtr",
                "puVar6": "tempBlockPtr",
                "puVar7": "newBlockData",
                "bVar8": "byteFlag",
                "lVar5": "blockData",
                "auVar9": "result"
            },
            "code": "\n\n\nundefined  [16] startDebugBlock_0010be88(long blockPtr,undefined8 param2,undefined8 param3,undefined8 returnValue)\n\n{\n  undefined8 *lastBlockPtr;\n  undefined8 success;\n  undefined4 *newBlockPtr;\n  undefined8 *currentBlockPtr;\n  long blockData;\n  undefined8 *tempBlockPtr;\n  undefined4 *newBlockData;\n  byte byteFlag;\n  undefined result [16];\n  \n  byteFlag = 0;\n  if ((*(long *)(blockPtr + 8) == 0) || (*(long *)(blockPtr + 0x20) == 0)) {\n    success = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success);\n    success = 0;\n  }\n  else {\n    newBlockPtr = (undefined4 *)xmalloc(0x30);\n    newBlockData = newBlockPtr;\n    for (blockData = 0xc; blockData != 0; blockData = blockData + -1) {\n      *newBlockData = 0;\n      newBlockData = newBlockData + (ulong)byteFlag * -2 + 1;\n    }\n    blockData = *(long *)(blockPtr + 0x20);\n    *(undefined8 *)(newBlockPtr + 6) = param2;\n    *(undefined8 *)(newBlockPtr + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockPtr + 2) = blockData;\n    lastBlockPtr = *(undefined8 **)(blockData + 0x10);\n    tempBlockPtr = (undefined8 *)(blockData + 0x10);\n    while (currentBlockPtr = lastBlockPtr, currentBlockPtr != (undefined8 *)0x0) {\n      tempBlockPtr = currentBlockPtr;\n      lastBlockPtr = (undefined8 *)*currentBlockPtr;\n    }\n    *tempBlockPtr = newBlockPtr;\n    success = 1;\n    *(undefined4 **)(blockPtr + 0x20) = newBlockPtr;\n  }\n  result._8_8_ = returnValue;\n  result._0_8_ = success;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_debug_block_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "paramArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "flag",
                "iVar2": "count",
                "lVar3": "localVar",
                "__s": "typeInfo",
                "sVar4": "param2Len",
                "sVar5": "fieldNameLen",
                "sVar6": "typeInfoLen",
                "__s_00": "message",
                "uVar7": "warning",
                "uVar8": "returnValue",
                "pcVar9": "optionalField"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *paramArray,char *fieldName,undefined8 param3,ulong fieldSize,int fieldType)\n\n{\n  char flag;\n  int count;\n  long localVar;\n  char *typeInfo;\n  size_t param2Len;\n  size_t fieldNameLen;\n  size_t typeInfoLen;\n  char *message;\n  undefined8 warning;\n  undefined8 returnValue;\n  char *optionalField;\n  \n  flag = *(char *)(paramArray[0xc] + 0x1c);\n  count = *(int *)(paramArray[0xc] + 0x18);\n  typeInfo = (char *)stab_pop_type();\n  if (*(char **)(paramArray[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    param2Len = strlen(*(char **)(paramArray[0xc] + 0x20));\n    fieldNameLen = strlen(fieldName);\n    typeInfoLen = strlen(typeInfo);\n    message = (char *)xmalloc(param2Len + 0x32 + fieldNameLen + typeInfoLen);\n    if (fieldType == 1) {\n      optionalField = \"/1\";\n    }\n    else {\n      optionalField = \"/0\";\n      if ((fieldType != 2) && (optionalField = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(count * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*paramArray;\n      warning = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(warning,returnValue,fieldName);\n    }\n    sprintf(message,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(paramArray[0xc] + 0x20),fieldName,optionalField,typeInfo,\n            param3,fieldSize);\n    free(*(void **)(paramArray[0xc] + 0x20));\n    localVar = paramArray[0xc];\n    *(char **)(localVar + 0x20) = message;\n    if (flag != '\\0') {\n      *(undefined *)(localVar + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)localVar >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "non_fatal",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "dcgettext",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_data_0010aa53",
                "param_1": "inputPtr",
                "param_2": "value",
                "param_3": "flag",
                "param_4": "mode",
                "cVar1": "flagValue",
                "__s": "stringPtr",
                "sVar5": "stringLength",
                "pcVar6": "allocatedString",
                "cVar3": "modeValue",
                "lVar2": "structPtr",
                "uVar8": "returnValue",
                "uVar9": "tempVar1",
                "uVar10": "tempVar2",
                "uVar4": "loopCounter",
                "lVar7": "reallocPtr"
            },
            "code": "\nundefined8 processData_0010aa53(long inputPtr,undefined8 value,char flag,int mode)\n\n{\n  char flagValue;\n  long structPtr;\n  char modeValue;\n  uint loopCounter;\n  char *stringPtr;\n  size_t stringLength;\n  char *allocatedString;\n  long reallocPtr;\n  undefined8 returnValue;\n  ulong tempVar1;\n  ulong tempVar2;\n  \n  flagValue = *(char *)(*(long *)(inputPtr + 0x60) + 0x1c);\n  stringPtr = (char *)stab_pop_type();\n  stringLength = strlen(stringPtr);\n  allocatedString = (char *)xmalloc(stringLength + 0x19);\n  *allocatedString = flag + '0';\n  if (mode == 1) {\n    modeValue = '1';\n  }\n  else {\n    modeValue = '0';\n    if ((mode != 2) && (modeValue = '2', mode != 0)) {\n                    \n      abort();\n    }\n  }\n  allocatedString[1] = modeValue;\n  sprintf(allocatedString + 2,\"%ld,%s;\",value);\n  free(stringPtr);\n  structPtr = *(long *)(inputPtr + 0x60);\n  returnValue = 0;\n  if ((structPtr != 0) && (*(long *)(structPtr + 0x20) != 0)) {\n    structPtr = *(long *)(structPtr + 0x28);\n    tempVar2 = 0;\n    if (structPtr != 0) {\n      loopCounter = 0;\n      do {\n        tempVar1 = (ulong)loopCounter;\n        tempVar2 = (ulong)loopCounter;\n        loopCounter = loopCounter + 1;\n      } while (*(long *)(structPtr + tempVar1 * 8) != 0);\n    }\n    reallocPtr = xrealloc(structPtr,(ulong)((int)tempVar2 + 2) << 3);\n    *(char **)(reallocPtr + tempVar2 * 8) = allocatedString;\n    *(undefined8 *)(reallocPtr + (ulong)((int)tempVar2 + 1) * 8) = 0;\n    structPtr = *(long *)(inputPtr + 0x60);\n    *(long *)(structPtr + 0x28) = reallocPtr;\n    if (flagValue != '\\0') {\n      *(undefined *)(structPtr + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "xmalloc",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "analyze_source_code_0011173a",
                "param_2": "inputParams",
                "param_3": "eventCode",
                "param_4": "blockDepth",
                "param_5": "currentLine",
                "param_6": "sourceCode",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "ptr",
                "cVar3": "charVar3",
                "uVar4": "undefinedVar4",
                "iVar5": "intVar5",
                "puVar6": "ptrVar6",
                "plVar7": "ptrVar7",
                "pcVar8": "charPtr8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "lVar11": "longVar11",
                "lVar12": "longVar12",
                "pplVar13": "ptrPtrVar13",
                "uVar14": "ulongVar14",
                "uVar15": "ulongVar15",
                "pcVar16": "charPtr16",
                "uVar17": "uintVar17",
                "dVar19": "doubleVar19",
                "local_48": "localCharPtr48",
                "local_40": "localPtrArray40"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined analyzeSourceCode_0011173a(undefined8 param_1,long *inputParams,int eventCode,int blockDepth,ulong currentLine,\n                      char *sourceCode)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *ptr;\n  char charVar3;\n  undefined undefinedVar4;\n  int intVar5;\n  undefined8 *ptrVar6;\n  long *ptrVar7;\n  char *charPtr8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  long longVar11;\n  long longVar12;\n  long **ptrPtrVar13;\n  ulong ulongVar14;\n  ulong ulongVar15;\n  char *charPtr16;\n  uint uintVar17;\n  long **pplVar18;\n  double doubleVar19;\n  char *localCharPtr48;\n  long **localPtrArray40 [2];\n  \n  if (inputParams[4] != 0) {\n    if (((eventCode == 100) && (*sourceCode != '\\0')) && (inputParams[5] == currentLine)) goto LAB_00111a06;\n    charVar3 = debug_set_filename(param_1);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)inputParams + 0x44) = 0;\n    *(undefined4 *)(inputParams + 8) = 0;\n    inputParams[9] = inputParams[4];\n    if (*(char *)(inputParams + 1) == '\\0') {\n      inputParams[6] = inputParams[5];\n    }\n    *(undefined4 *)(inputParams + 0x10) = 1;\n    ptrVar6 = (undefined8 *)xmalloc(8);\n    inputParams[0x11] = (long)ptrVar6;\n    *ptrVar6 = 0;\n    inputParams[4] = 0;\n  }\n  strlen(sourceCode);\n  if (eventCode == 0x84) {\nLAB_00111ab7:\n    undefinedVar4 = debug_start_source(param_1,sourceCode);\n    return undefinedVar4;\n  }\n  if (eventCode < 0x85) {\n    if (eventCode == 0x3c) {\n      intVar5 = strcmp(sourceCode,\"gcc2_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(inputParams + 8) = 2;\n        return 1;\n      }\n      intVar5 = strcmp(sourceCode,\"gcc_compiled.\");\n      if (intVar5 == 0) {\n        *(undefined4 *)(inputParams + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)inputParams + 0x44) = 1;\n      return 1;\n    }\n    if (eventCode < 0x3d) {\n      if (eventCode == 0x24) {\n        if (*sourceCode == '\\0') {\n          if (*(char *)(inputParams + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(inputParams + 1) != '\\0') {\n            currentLine = currentLine + inputParams[7];\n          }\n          charVar3 = stab_emit_pending_vars(param_1,inputParams);\n          if (charVar3 != '\\0') {\n            charVar3 = debug_end_function(param_1,currentLine);\n            if (charVar3 != '\\0') {\n              *(undefined *)(inputParams + 0xc) = 0;\n              inputParams[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(inputParams + 0xc) != '\\0') &&\n           ((currentLine < (ulong)inputParams[0xd] || (inputParams[0xd] == 0xffffffffffffffff)))) {\n          inputParams[0xd] = currentLine;\n        }\n      }\n      else if (eventCode < 0x25) {\n        if (eventCode == 0xc) {\n          return 1;\n        }\n        if (eventCode - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (eventCode == 0x2a) {\n          return 1;\n        }\n        if (eventCode == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (eventCode == 100) {\nLAB_00111a06:\n        if (*(char *)(inputParams + 0xc) != '\\0') {\n          ulongVar14 = currentLine;\n          if (((*sourceCode != '\\0') && (ulongVar15 = inputParams[0xd], ulongVar15 != 0xffffffffffffffff)) &&\n             (ulongVar14 = ulongVar15, currentLine < ulongVar15)) {\n            ulongVar14 = currentLine;\n          }\n          charVar3 = stab_emit_pending_vars(param_1,inputParams);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          charVar3 = debug_end_function(param_1,ulongVar14);\n          if (charVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(inputParams + 0xc) = 0;\n          inputParams[0xd] = -1;\n        }\n        if (*sourceCode == '\\0') {\n          return 1;\n        }\n        ptr = (void *)inputParams[4];\n        if (ptr == (void *)0x0) {\n          longVar12 = xstrdup(sourceCode);\n          inputParams[4] = longVar12;\n        }\n        else {\n          if (*sourceCode == '/') {\n            longVar12 = xstrdup(sourceCode);\n          }\n          else {\n            longVar12 = concat(ptr,sourceCode,0);\n          }\n          inputParams[4] = longVar12;\n          free(ptr);\n        }\n        inputParams[5] = currentLine;\n        return 1;\n      }\n      if (eventCode < 0x65) {\n        if (eventCode == 0x44) {\n          longVar12 = 0;\n          if (*(char *)(inputParams + 0xc) != '\\0') {\n            longVar12 = inputParams[7];\n          }\n          undefinedVar4 = debug_record_line(param_1,(long)blockDepth,longVar12 + currentLine);\n          return undefinedVar4;\n        }\n        if (eventCode == 0x62) {\n          return 1;\n        }\n      }\n      else if (eventCode == 0x82) {\n        ptrVar7 = (long *)xmalloc();\n        intVar5 = *(int *)(inputParams + 0x10);\n        longVar10 = inputParams[10];\n        longVar11 = inputParams[0xb];\n        ptrVar7[5] = 0;\n        longVar12 = inputParams[0x11];\n        *(int *)(ptrVar7 + 4) = intVar5;\n        uintVar17 = intVar5 + 1;\n        *(uint *)(inputParams + 0x10) = uintVar17;\n        *ptrVar7 = longVar11;\n        ptrVar7[1] = longVar10;\n        ptrVar7[2] = (long)sourceCode;\n        ptrVar7[3] = currentLine;\n        inputParams[10] = (long)ptrVar7;\n        inputParams[0xb] = (long)ptrVar7;\n        longVar12 = xrealloc(longVar12,(ulong)uintVar17 << 3);\n        uintVar17 = *(uint *)(ptrVar7 + 4);\n        inputParams[0x11] = longVar12;\n        *(undefined8 *)(longVar12 + (ulong)uintVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    charPtr8 = strchr(sourceCode,0x3a);\n    if ((charPtr8 != (char *)0x0) && ((charPtr8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(inputParams + 0xc) != '\\0') {\n        ulongVar14 = inputParams[0xd];\n        ulongVar15 = currentLine;\n        if ((ulongVar14 != 0xffffffffffffffff) && (ulongVar15 = ulongVar14, currentLine < ulongVar14)) {\n          ulongVar15 = currentLine;\n        }\n        charVar3 = stab_emit_pending_vars(param_1,inputParams);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        charVar3 = debug_end_function(param_1,ulongVar15);\n        if (charVar3 == '\\0') {\n          return 0;\n        }\n        inputParams[0xd] = -1;\n      }\n      if (*(char *)(inputParams + 1) != '\\0') {\n        inputParams[7] = currentLine;\n      }\n      *(undefined *)(inputParams + 0xc) = 1;\n    }\n    localCharPtr48 = strchr(sourceCode,0x3a);\n    if (localCharPtr48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localCharPtr48[1] == ':') goto code_r0x00111cc7;\n    if (*sourceCode == '$') {\n      charVar3 = sourceCode[1];\n      charPtr16 = \"eh_throw\";\n      if (charVar3 != 'e') {\n        if (charVar3 < 'f') {\n          if ((charVar3 != 'X') && (charVar3 != '_')) {\nLAB_00111d1a:\n            undefinedVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(sourceCode,undefinedVar9);\n          }\n        }\n        else {\n          charPtr16 = \"this\";\n          if (charVar3 == 't') goto LAB_00111d62;\n          if (charVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      charPtr16 = (char *)0x0;\n      if ((sourceCode != localCharPtr48) && ((*sourceCode != ' ' || (localCharPtr48 != sourceCode + 1)))) {\n        charPtr16 = (char *)savestring(sourceCode,(int)localCharPtr48 - (int)sourceCode);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localCharPtr48[1];\n    charPtr8 = localCharPtr48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    charPtr8 = localCharPtr48 + 2;\n    charVar3 = localCharPtr48[1];\n    switch(charVar3) {\n    case 'C':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      charPtr8 = \"debug_record_label: not implemented\";\n      if (longVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      charVar3 = debug_record_function(param_1,charPtr16,longVar12,charVar3 == 'F',currentLine);\n      if (charVar3 != '\\0') {\n        do {\n          if (*localCharPtr48 != ';') {\n            return 1;\n          }\n          localCharPtr48 = localCharPtr48 + 1;\n          longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charPtr16 == (char *)0x0) goto LAB_0011208f;\n      longVar10 = inputParams[3];\n      ptrVar7 = (long *)inputParams[2];\n      charVar3 = *(char *)(*(long *)(*inputParams + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (eventCode == 0x24) {\n        localCharPtr48 = charPtr8;\n        do {\n          if (*localCharPtr48 != ';') {\n            return 1;\n          }\n          localCharPtr48 = localCharPtr48 + 1;\n          longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n        } while (longVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      break;\n    case 'S':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar3 = localCharPtr48[2];\n      if (charVar3 == 't') {\n        charPtr8 = localCharPtr48 + 3;\n      }\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,charPtr16,&localCharPtr48,localPtrArray40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charPtr16 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(inputParams + 0x35);\n      ptrVar7 = (long *)debug_tag_type(param_1,charPtr16,longVar12);\n      if (ptrVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArray40[0] != (long **)0x0) {\n        *localPtrArray40[0] = ptrVar7;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      ptrPtrVar13 = (long **)(inputParams + 0x34);\n      pplVar18 = (long **)inputParams[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      charPtr8 = localCharPtr48 + 3;\n      if (((localCharPtr48[2] != '\\0') && (charPtr8 = localCharPtr48 + 4, localCharPtr48[3] == 'n')) &&\n         (charPtr8 = localCharPtr48 + 5, charPtr16 = localCharPtr48 + 4, localCharPtr48 = charPtr8, *charPtr16 == '0')) {\n        for (; charPtr8 = localCharPtr48, *localCharPtr48 != '\\0'; localCharPtr48 = localCharPtr48 + 1) {\n          if (*localCharPtr48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 4;\n      break;\n    case 'c':\n      if (localCharPtr48[2] == '=') {\n        charPtr8 = localCharPtr48 + 4;\n        charVar3 = localCharPtr48[3];\n        localCharPtr48 = charPtr8;\n        if (charVar3 == 'i') {\n          longVar12 = strtol(charPtr8,(char **)0x0,10);\n          if (charPtr16 == (char *)0x0) {\n            return 0;\n          }\n          longVar10 = debug_add_to_current_namespace_constprop_0(param_1,charPtr16,4);\n          if (longVar10 != 0) {\n            *(long *)(longVar10 + 0x20) = (long)(int)longVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'r') {\n          doubleVar19 = strtod(charPtr8,(char **)0x0);\n          if (charPtr16 == (char *)0x0) {\n            return 0;\n          }\n          longVar12 = debug_add_to_current_namespace_constprop_0(param_1,charPtr16,5);\n          if (longVar12 != 0) {\n            *(double *)(longVar12 + 0x20) = doubleVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar3 == 'e') {\n          longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n          if (longVar12 == 0) {\n            return 0;\n          }\n          charPtr8 = localCharPtr48;\n          if (*localCharPtr48 == ',') {\n            longVar10 = strtol(localCharPtr48,(char **)0x0,10);\n            if (charPtr16 == (char *)0x0) {\n              return 0;\n            }\n            longVar11 = debug_add_to_current_namespace_constprop_0(param_1,charPtr16,6);\n            if (longVar11 != 0) {\n              ptrVar7 = (long *)xmalloc(0x10);\n              *ptrVar7 = longVar12;\n              ptrVar7[1] = (long)(int)longVar10;\n              *(long **)(longVar11 + 0x20) = ptrVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localCharPtr48[2] == 'F') {\n        localCharPtr48 = localCharPtr48 + 3;\n        longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n        if (longVar12 == 0) {\n          return 0;\n        }\n        undefinedVar9 = debug_make_function_type_isra_0(longVar12,0,0);\n        longVar12 = debug_make_pointer_type_isra_0(undefinedVar9);\n      }\n      else {\n        localCharPtr48 = charPtr8;\n        longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      }\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 1;\n      break;\n    case 'r':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 5;\nLAB_001123e8:\n      charVar3 = stab_record_variable(param_1,inputParams,charPtr16,longVar12,undefinedVar9,currentLine);\n      goto joined_r0x001123f8;\n    case 't':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,charPtr16,&localCharPtr48,localPtrArray40);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      if (charPtr16 == (char *)0x0) {\n        return 1;\n      }\n      ptrVar7 = (long *)debug_name_type(param_1,charPtr16,longVar12);\n      if (ptrVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrArray40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArray40[0] = ptrVar7;\n      return 1;\n    case 'v':\n      localCharPtr48 = charPtr8;\n      longVar12 = parse_stab_type(param_1,inputParams,0,&localCharPtr48,0);\n      if (longVar12 == 0) {\n        return 0;\n      }\n      undefinedVar9 = 3;\n    }\n    charVar3 = debug_record_parameter(param_1,charPtr16,longVar12,undefinedVar9,currentLine);\n    goto joined_r0x001123f8;\n  }\n  if (eventCode == 0xe0) {\n    if ((*(char *)((long)inputParams + 0x44) != '\\0') && (blockDepth == 1)) {\n      return 1;\n    }\n    charVar3 = stab_emit_pending_vars(param_1,inputParams);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    charVar3 = debug_end_block(param_1,inputParams[7] + inputParams[6] + currentLine);\n    if (charVar3 == '\\0') {\n      return 0;\n    }\n    inputParams = inputParams + 0xe;\n    *(int *)inputParams = *(int *)inputParams + -1;\n    charPtr8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)inputParams) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < eventCode) {\n      if (eventCode == 0xe2) {\n        charPtr8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        charPtr8 = \"debug_end_common_block: not implemented\";\n        if (eventCode != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar9 = dcgettext(0,charPtr8,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar9);\n      return 0;\n    }\n    if (eventCode != 0xc0) {\n      if (eventCode == 0xc2) {\n        intVar5 = *(int *)(inputParams + 0x10);\n        *(uint *)(inputParams + 0x10) = intVar5 + 1U;\n        longVar12 = xrealloc(inputParams[0x11],(ulong)(intVar5 + 1U) << 3);\n        ptrVar6 = (undefined8 *)inputParams[0xb];\n        inputParams[0x11] = longVar12;\n        while( true ) {\n          if (ptrVar6 == (undefined8 *)0x0) {\n            undefinedVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(sourceCode,undefinedVar9);\n            *(undefined8 *)(inputParams[0x11] + (ulong)(*(int *)(inputParams + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((currentLine == ptrVar6[3]) && (intVar5 = strcmp((char *)ptrVar6[2],sourceCode), intVar5 == 0))\n          break;\n          ptrVar6 = (undefined8 *)*ptrVar6;\n        }\n        *(undefined8 *)(longVar12 + (ulong)(*(int *)(inputParams + 0x10) - 1) * 8) = ptrVar6[5];\n        return 1;\n      }\n      if (eventCode == 0xa2) {\n        longVar12 = inputParams[10];\n        if (longVar12 != 0) {\n          longVar10 = *(long *)(longVar12 + 8);\n          uintVar17 = *(uint *)(longVar12 + 0x20);\n          inputParams[10] = longVar10;\n          if ((uintVar17 < *(uint *)(inputParams + 0x10)) &&\n             (*(undefined8 *)(longVar12 + 0x28) = *(undefined8 *)(inputParams[0x11] + (ulong)uintVar17 * 8),\n             longVar10 != 0)) {\n            sourceCode = *(char **)(longVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        sourceCode = (char *)inputParams[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)inputParams + 0x44) != '\\0') && (blockDepth == 1)) {\n      return 1;\n    }\n    if (*(char *)(inputParams + 0xc) != '\\0') {\n      charVar3 = debug_start_block(param_1,inputParams[7] + inputParams[6] + currentLine);\n      if (charVar3 == '\\0') {\n        return 0;\n      }\n      charVar3 = stab_emit_pending_vars(param_1,inputParams);\n      if (charVar3 != '\\0') {\n        *(int *)(inputParams + 0xe) = *(int *)(inputParams + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    charPtr8 = \"N_LBRAC not within function\\n\";\n  }\n  charPtr8 = (char *)dcgettext(0,charPtr8,5);\n  fprintf(_stderr,charPtr8);\n  return 0;\ncode_r0x00111cc7:\n  localCharPtr48 = localCharPtr48 + 2;\n  localCharPtr48 = strchr(localCharPtr48,0x3a);\n  if (localCharPtr48 == (char *)0x0) {\n    charPtr8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localCharPtr48 = charPtr8;\n    bad_stab(sourceCode);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar3 != 't') {\n      return 1;\n    }\n    ptrVar7 = (long *)debug_name_type(param_1,charPtr16,ptrVar7);\n    if (ptrVar7 != (long *)0x0) {\n      if (localPtrArray40[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrArray40[0] = ptrVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *charPtr16) &&\n     (intVar5 = strcmp((char *)pplVar18[1],charPtr16), intVar5 == 0)) {\n    pplVar18[3] = ptrVar7;\n    *ptrPtrVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrPtrVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar10 < 1) {\nLAB_0011208f:\n    undefinedVar9 = 1;\nLAB_001121c4:\n    charVar3 = debug_record_variable(param_1,charPtr16,longVar12,undefinedVar9,currentLine);\njoined_r0x001123f8:\n    if (charVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  charPtr8 = *(char **)(*ptrVar7 + 8);\n  if ((charVar3 != '\\0') && (charVar3 == *charPtr8)) {\n    charPtr8 = charPtr8 + 1;\n  }\n  if ((*charPtr8 == *charPtr16) && (intVar5 = strcmp(charPtr8,charPtr16), intVar5 == 0)) {\n    currentLine = *(long *)(*ptrVar7 + 0x10) + *(long *)(*(long *)(*ptrVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar10 = longVar10 + -1;\n  ptrVar7 = ptrVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "xstrdup",
                "debug_record_function",
                "strtod",
                "stab_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_tag_type",
                "strtol",
                "debug_record_variable",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "free",
                "parse_stab_type",
                "fprintf",
                "debug_record_parameter",
                "savestring",
                "debug_end_block",
                "debug_end_function",
                "strlen",
                "bad_stab",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "warn_stab",
                "debug_start_block",
                "stab_emit_pending_vars",
                "strchr",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "debug_start_source",
                "debug_make_function_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "analyze_source_code_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "strip_section_and_relocate_00115dc0",
                "param_1": "binary",
                "param_2": "sectionHeaders",
                "param_3": "relocationTable",
                "cVar1": "sectionSkipped",
                "iVar2": "error",
                "uVar3": "relocationCount",
                "lVar4": "sectionIndex",
                "puVar5": "relocatedSymbols",
                "uVar6": "canonicalizedCount",
                "UNRECOVERED_JUMPTABLE": "targetFunction",
                "puVar7": "filteredSymbols",
                "puVar8": "filteredSymbolPtr",
                "uVar9": "symbolIndex",
                "uStack_38": "messageBuffer"
            },
            "code": "\nvoid stripSectionAndRelocate_00115dc0(undefined8 binary,undefined8 *sectionHeaders,long relocationTable)\n\n{\n  char sectionSkipped;\n  int error;\n  undefined8 relocationCount;\n  long sectionIndex;\n  undefined8 *relocatedSymbols;\n  ulong canonicalizedCount;\n  code *targetFunction;\n  undefined8 *filteredSymbols;\n  undefined8 *filteredSymbolPtr;\n  ulong symbolIndex;\n  undefined8 messageBuffer;\n  \n  sectionSkipped = skip_section(binary,sectionHeaders,0);\n  if (sectionSkipped != '\\0') {\n    return;\n  }\n  relocationCount = sectionHeaders[0xc];\n  if ((((*(byte *)(relocationTable + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (sectionIndex = find_section_list(*sectionHeaders,0,0x100), sectionIndex == 0)) {\n    sectionIndex = bfd_get_reloc_upper_bound(binary,sectionHeaders);\n    if (sectionIndex < 0) {\n      if ((sectionIndex != -1) || (error = bfd_get_error(), error != 5)) {\n        status = 1;\n        relocationCount = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,binary,sectionHeaders,relocationCount,messageBuffer);\n        return;\n      }\n    }\n    else if (sectionIndex != 0) {\n      relocatedSymbols = (undefined8 *)sectionHeaders[0xe];\n      if (relocatedSymbols == (undefined8 *)0x0) {\n        relocatedSymbols = (undefined8 *)bfd_alloc(relocationTable);\n        if (relocatedSymbols == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        canonicalizedCount = bfd_canonicalize_reloc(binary,sectionHeaders,relocatedSymbols,isympp);\n        if ((long)canonicalizedCount < 0) {\n          status = 1;\n          relocationCount = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        canonicalizedCount = (ulong)*(uint *)(sectionHeaders + 0xf);\n      }\n      if (strip_symbols == 7) {\n        filteredSymbols = relocatedSymbols;\n        for (symbolIndex = 0; symbolIndex != canonicalizedCount; symbolIndex = symbolIndex + 1) {\n          filteredSymbolPtr = filteredSymbols;\n          if (((*(long **)relocatedSymbols[symbolIndex] != (long *)0x0) &&\n              (sectionIndex = **(long **)relocatedSymbols[symbolIndex], sectionIndex != 0)) &&\n             (sectionSkipped = is_specified_symbol(*(undefined8 *)(sectionIndex + 8),keep_specific_htab),\n             sectionSkipped != '\\0')) {\n            filteredSymbolPtr = filteredSymbols + 1;\n            *filteredSymbols = relocatedSymbols[symbolIndex];\n          }\n          filteredSymbols = filteredSymbolPtr;\n        }\n        *filteredSymbols = 0;\n        canonicalizedCount = (long)filteredSymbols - (long)relocatedSymbols >> 3;\n      }\n      targetFunction = *(code **)(*(long *)(relocationTable + 8) + 0x288);\n      if (canonicalizedCount == 0) {\n        canonicalizedCount = 0;\n        relocatedSymbols = (undefined8 *)0x0;\n      }\n      else {\n        canonicalizedCount = canonicalizedCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  canonicalizedCount = 0;\n  relocatedSymbols = (undefined8 *)0x0;\n  targetFunction = *(code **)(*(long *)(relocationTable + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*targetFunction)(relocationTable,relocationCount,relocatedSymbols,canonicalizedCount);\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_error",
                "skip_section",
                "dcgettext",
                "copy_relocations_in_section.cold",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "strip_section_and_relocate_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "copy_file",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "report",
                "bfd_nonfatal_message",
                "list_matching_formats"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "process_function_0010d559",
                "param_1": "arrayPtr",
                "param_2": "bytePtr",
                "param_3": "counterPtr",
                "bVar1": "byteVar",
                "pbVar2": "byteArrayPtr",
                "cVar3": "charVar",
                "uVar4": "uintVar",
                "iVar5": "intVar",
                "ppcVar6": "charPtrPtr",
                "sVar7": "sizeVar",
                "lVar8": "longVar",
                "plVar9": "longPtr",
                "pcVar10": "charPtr",
                "__s1": "charPtr1",
                "__ptr": "voidPtr",
                "pbVar11": "bytePtr1",
                "uVar12": "uintVar1",
                "__nptr": "bytePtr2",
                "local_64": "localCounter",
                "local_40": "localArray"
            },
            "code": "\nundefined8 processFunction_0010d559(undefined8 *arrayPtr,byte **bytePtr,long *counterPtr)\n\n{\n  byte byteVar;\n  byte *byteArrayPtr;\n  char charVar;\n  uint uintVar;\n  int intVar;\n  char **charPtrPtr;\n  size_t sizeVar;\n  long longVar;\n  long *longPtr;\n  char *charPtr;\n  char *charPtr1;\n  void *voidPtr;\n  byte *bytePtr1;\n  undefined8 uintVar1;\n  byte *bytePtr2;\n  int localCounter;\n  char *localArray [2];\n  \n  byteArrayPtr = *bytePtr;\n  byteVar = byteArrayPtr[1];\n  if ((char)byteVar < ':') {\n    if ((char)byteVar < '1') goto LAB_0010d5d8;\n    localCounter = (char)byteVar + -0x30;\n    if (byteArrayPtr[2] == 0x5f) {\n      *bytePtr = byteArrayPtr + 1;\n    }\n    bytePtr1 = *bytePtr + 2;\n  }\n  else {\n    if (((byteVar != 0x5f) || (((&_sch_istable)[(ulong)byteArrayPtr[2] * 2] & 4) == 0)) ||\n       (byteArrayPtr[2] == 0x30)) goto LAB_0010d5d8;\n    bytePtr2 = byteArrayPtr + 2;\n    longVar = strtol((char *)bytePtr2,(char **)0x0,10);\n    localCounter = (int)longVar;\n    while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0) {\n      bytePtr2 = bytePtr2 + 1;\n    }\n    bytePtr1 = bytePtr2 + 1;\n    if (*bytePtr2 != 0x5f) goto LAB_0010d5d8;\n  }\n  *bytePtr = bytePtr1;\n  charPtrPtr = (char **)0x0;\n  if (counterPtr != (long *)0x0) {\n    charPtrPtr = localArray;\n  }\n  longVar = 0;\n  while( true ) {\n    while( true ) {\n      localCounter = localCounter + -1;\n      if (localCounter == -1) {\n        if (counterPtr != (long *)0x0) {\n          *counterPtr = longVar;\n        }\n        return 1;\n      }\n      if (**bytePtr == 0x5f) {\n        *bytePtr = *bytePtr + 1;\n      }\n      if (**bytePtr != 0x74) break;\n      charVar = stab_demangle_template(arrayPtr,bytePtr,charPtrPtr);\n      charPtr = localArray[0];\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (counterPtr != (long *)0x0) {\n        sizeVar = strlen(localArray[0]);\n        longVar = stab_find_tagged_type(*arrayPtr,arrayPtr[1],charPtr,sizeVar & 0xffffffff,9);\n        free(charPtr);\n        if (longVar == 0) {\n          return 0;\n        }\n      }\n    }\n    uintVar = stab_demangle_count(bytePtr);\n    sizeVar = strlen((char *)*bytePtr);\n    if (sizeVar < uintVar) break;\n    if (counterPtr != (long *)0x0) {\n      if ((longVar != 0) && (longPtr = (long *)debug_get_fields_isra_0(longVar), longPtr != (long *)0x0))\n      {\n        charPtr = (char *)savestring(*bytePtr,uintVar);\n        for (; longVar = *longPtr, longVar != 0; longPtr = longPtr + 1) {\n          longVar = *(long *)(longVar + 8);\n          if (longVar == 0) {\n            free(charPtr);\n            return 0;\n          }\n          charPtr1 = (char *)debug_get_type_name_constprop_0(longVar);\n          if ((charPtr1 != (char *)0x0) && (intVar = strcmp(charPtr1,charPtr), intVar == 0)) break;\n        }\n        free(charPtr);\n        if (longVar != 0) goto LAB_0010d7ad;\n      }\n      uintVar1 = 9;\n      if (localCounter == 0) {\n        voidPtr = (void *)savestring(*bytePtr,uintVar);\n        longVar = debug_find_named_type(*arrayPtr,voidPtr);\n        free(voidPtr);\n        if (longVar != 0) goto LAB_0010d7ad;\n        uintVar1 = 0;\n      }\n      longVar = stab_find_tagged_type(*arrayPtr,arrayPtr[1],*bytePtr,uintVar,uintVar1);\n      if (longVar == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *bytePtr = *bytePtr + uintVar;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(byteArrayPtr);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "savestring",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_find_tagged_type",
                "stab_demangle_template",
                "free",
                "debug_get_type_name.constprop.0",
                "stab_demangle_count",
                "strcmp",
                "strtol",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "process_function_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,errorMessage,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memoryToFree",
                "status": "executionStatus"
            },
            "code": "\nvoid cleanupAndFreeMemory_00108466(void)\n\n{\n  void *memoryToFree;\n  \n  executionStatus = 1;\n  bfd_nonfatal_message(0);\n  free(memoryToFree);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_integer_from_byte_array_00108e76",
                "param_1": "byteArrayPtr",
                "bVar1": "currentByte",
                "iVar2": "result"
            },
            "code": "\nint extractIntegerFromByteArray_00108e76(byte **byteArrayPtr)\n\n{\n  byte currentByte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentByte = **byteArrayPtr;\n    if (((&_sch_istable)[(ulong)currentByte * 2] & 4) == 0) break;\n    *byteArrayPtr = *byteArrayPtr + 1;\n    result = result * 10 + -0x30 + (int)(char)currentByte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_integer_from_byte_array_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "create_new_bfd_hash_0010bb52",
                "param_1": "inputParam",
                "param_2": "allocationParam1",
                "param_3": "allocationParam2",
                "lVar1": "hashPointer"
            },
            "code": "\nlong createNewBFDHash_0010bb52(long inputParam,undefined8 allocationParam1,undefined8 allocationParam2)\n\n{\n  long hashPointer;\n  \n  if (((inputParam != 0) || (inputParam = bfd_hash_allocate(allocationParam1,0x30), inputParam != 0)) &&\n     (hashPointer = bfd_hash_newfunc(inputParam,allocationParam1,allocationParam2), hashPointer != 0)) {\n    *(undefined8 *)(hashPointer + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hashPointer + 0x18) = 0;\n    *(undefined4 *)(hashPointer + 0x28) = 0;\n    return hashPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "create_new_bfd_hash_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "validate_permission_0011283f",
                "param_1": "path",
                "param_2": "default_path",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * validate_permission_0011283f(char *path,char *default_path)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_path == (char *)0x0) && (path != (char *)0x0)) {\n    access_result = access(path,7);\n    if (access_result == 0) {\n      access_result = stat(path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_path = path;\n      }\n    }\n  }\n  return default_path;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "validate_permission_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "copy_section",
                "FUN_00107880",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_set_error_00108237",
                "unaff_R12D": "file_descriptor",
                "piVar2": "error_pointer",
                "iVar1": "original_error_value"
            },
            "code": "\nundefined8 closeFileAndSetError_00108237(void)\n\n{\n  int original_error_value;\n  int *error_pointer;\n  int file_descriptor;\n  \n  error_pointer = __errno_location();\n  original_error_value = *error_pointer;\n  close(file_descriptor);\n  *error_pointer = original_error_value;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "debugContext",
                "param_2": "filename",
                "param_3": "debugInfo",
                "param_4": "flag",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "errorMessage",
                "plVar2": "debugData",
                "puVar3": "arrayPtr",
                "lVar4": "iterator",
                "puVar5": "arrayIter",
                "pcVar6": "defaultFilename",
                "bVar7": "byteFlag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long debugContext,char *filename,long debugInfo,uint flag,undefined8 param5,\n            undefined8 param6)\n\n{\n  undefined8 errorMessage;\n  long *debugData;\n  undefined4 *arrayPtr;\n  long iterator;\n  undefined4 *arrayIter;\n  char *defaultFilename;\n  byte byteFlag;\n  undefined returnValue [16];\n  \n  byteFlag = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  if (debugInfo != 0) {\n    if (*(long *)(debugContext + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      debugData = (long *)xmalloc(0x18);\n      *debugData = debugInfo;\n      *(undefined (*) [16])(debugData + 1) = ZEXT816(0);\n      arrayPtr = (undefined4 *)xmalloc(0x30);\n      *(long **)(debugContext + 0x18) = debugData;\n      debugData[2] = (long)arrayPtr;\n      arrayIter = arrayPtr;\n      for (iterator = 0xc; iterator != 0; iterator = iterator + -1) {\n        *arrayIter = 0;\n        arrayIter = arrayIter + (ulong)byteFlag * -2 + 1;\n      }\n      *(undefined4 **)(debugContext + 0x20) = arrayPtr;\n      iterator = *(long *)(debugContext + 0x10);\n      *(undefined8 *)(arrayPtr + 6) = param5;\n      *(undefined8 *)(arrayPtr + 8) = 0xffffffffffffffff;\n      iterator = debug_add_to_namespace_constprop_0(iterator + 0x10,defaultFilename,3,(flag & 0xff) + 1);\n      if (iterator != 0) {\n        *(long **)(iterator + 0x20) = debugData;\n        errorMessage = CONCAT71((int7)((ulong)iterator >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = reengineer_function_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00107880",
                "non_fatal",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "main",
                "simple_copy.cold",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "generate_file_path_00114cf0",
                "param_1": "inputPath",
                "pcVar1": "lastSlash",
                "lVar2": "length",
                "lVar3": "startIndex",
                "lVar4": "slashIndex",
                "pcVar5": "outputPath",
                "bVar6": "isSlashPresent"
            },
            "code": "\nvoid generateFilePath_00114cf0(char *inputPath)\n\n{\n  char *lastSlash;\n  long length;\n  long startIndex;\n  long slashIndex;\n  char *outputPath;\n  byte isSlashPresent;\n  \n  isSlashPresent = 0;\n  lastSlash = strrchr(inputPath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    startIndex = 0;\n  }\n  else {\n    slashIndex = (long)lastSlash - (long)inputPath;\n    lastSlash = (char *)xmalloc(slashIndex + 0xb);\n    startIndex = slashIndex + 1;\n    outputPath = lastSlash;\n    for (length = slashIndex; length != 0; length = length + -1) {\n      *outputPath = *inputPath;\n      inputPath = inputPath + (ulong)isSlashPresent * -2 + 1;\n      outputPath = outputPath + (ulong)isSlashPresent * -2 + 1;\n    }\n    lastSlash[slashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlash + startIndex) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + startIndex) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "generate_file_path_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_string_data_0010a181",
                "param_1": "data_ptr",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "char_flag",
                "iVar2": "int_value",
                "iVar3": "result",
                "uVar4": "return_value",
                "__s": "first_string",
                "__s_00": "second_string",
                "sVar5": "first_string_length",
                "sVar6": "second_string_length",
                "__s_01": "processed_string",
                "lVar7": "counter",
                "local_41": "local_flag"
            },
            "code": "\nundefined4 processStringData_0010a181(long data_ptr,long start_index,long end_index,byte flag)\n\n{\n  char char_flag;\n  int int_value;\n  int result;\n  undefined4 return_value;\n  char *first_string;\n  char *second_string;\n  size_t first_string_length;\n  size_t second_string_length;\n  char *processed_string;\n  long counter;\n  byte local_flag;\n  \n  char_flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  first_string = (char *)stab_pop_type();\n  local_flag = 1;\n  if (char_flag == '\\0') {\n    local_flag = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  int_value = *(int *)(*(long *)(data_ptr + 0x60) + 0x18);\n  second_string = (char *)stab_pop_type(data_ptr);\n  first_string_length = strlen(first_string);\n  second_string_length = strlen(second_string);\n  processed_string = (char *)xmalloc(first_string_length + 100 + second_string_length);\n  if (flag == 0) {\n    *processed_string = '\\0';\n    counter = 0;\n    local_flag = local_flag & 1;\n  }\n  else {\n    counter = *(long *)(data_ptr + 0x68);\n    *(long *)(data_ptr + 0x68) = counter + 1;\n    sprintf(processed_string,\"%ld=@S;\",counter);\n    local_flag = flag;\n  }\n  first_string_length = strlen(processed_string);\n  sprintf(processed_string + first_string_length,\"ar%s;%ld;%ld;%s\",first_string,start_index,end_index,second_string);\n  free(first_string);\n  free(second_string);\n  result = 0;\n  if (start_index <= end_index) {\n    result = int_value * (((int)end_index - (int)start_index) + 1);\n  }\n  return_value = stab_push_string(data_ptr,processed_string,counter,local_flag,result);\n  if ((char)return_value != '\\0') {\n    free(processed_string);\n  }\n  return return_value;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_string_data_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "display_temp_file_and_architectures_001199d0",
                "iVar1": "maxColumns",
                "iVar2": "archIndex",
                "iVar3": "strCmpResult",
                "pcVar4": "formatString",
                "sVar5": "stringLength",
                "pcVar6": "tempFilePath",
                "uVar7": "tmpResult",
                "piVar8": "errorCode",
                "iVar9": "tempFileDescriptor",
                "lVar10": "index",
                "lVar11": "outerIndex",
                "ppcVar12": "archMachArray",
                "uVar13": "maxStringLength",
                "uVar14": "strLength",
                "local_70": "fileDescriptor"
            },
            "code": "\n\n\nvoid displayTempFileAndArchitectures_001199d0(void)\n\n{\n  int maxColumns;\n  int archIndex;\n  int strCmpResult;\n  char *formatString;\n  size_t stringLength;\n  char *tempFilePath;\n  undefined8 tmpResult;\n  int *errorCode;\n  int tempFileDescriptor;\n  long index;\n  long outerIndex;\n  char **archMachArray;\n  uint maxStringLength;\n  ulong strLength;\n  int fileDescriptor;\n  \n  formatString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(formatString,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    formatString = getenv(\"TMPDIR\");\n    tmpResult = try_dir_lto_priv_0(formatString,0);\n    formatString = getenv(\"TMP\");\n    tmpResult = try_dir_lto_priv_0(formatString,tmpResult);\n    formatString = getenv(\"TEMP\");\n    tmpResult = try_dir_lto_priv_0(formatString,tmpResult);\n    tmpResult = try_dir_lto_priv_0(&DAT_0011b39a,tmpResult);\n    tmpResult = try_dir_lto_priv_0(vartmp,tmpResult);\n    formatString = (char *)try_dir_lto_priv_0(&tmp,tmpResult);\n    if (formatString == (char *)0x0) {\n      formatString = \".\";\n    }\n    stringLength = strlen(formatString);\n    tempFilePath = (char *)xmalloc((int)stringLength + 2);\n    memoized_tmpdir = strcpy(tempFilePath,formatString);\n    memoized_tmpdir[stringLength & 0xffffffff] = '/';\n    memoized_tmpdir[(int)stringLength + 1] = '\\0';\n  }\n  formatString = memoized_tmpdir;\n  stringLength = strlen(memoized_tmpdir);\n  index = (long)(int)stringLength;\n  tempFilePath = (char *)xmalloc(index + 9);\n  strcpy(tempFilePath,formatString);\n  *(undefined2 *)(tempFilePath + index) = 0x6363;\n  *(undefined4 *)(tempFilePath + index + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + index + 2) + 3) = 0x585858;\n  tempFilePath[index + 8] = '\\0';\n  archIndex = mkstemps(tempFilePath,0);\n  if (archIndex == -1) {\n    errorCode = __errno_location();\n    tempFilePath = strerror(*errorCode);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",formatString,tempFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxStringLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  fileDescriptor = 0;\n  do {\n    formatString = (char *)bfd_printable_arch_mach(archIndex);\n    stringLength = strlen(formatString);\n    if ((int)maxStringLength < (int)(uint)stringLength) {\n      maxStringLength = (uint)stringLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  formatString = getenv(\"COLUMNS\");\n  archIndex = fileDescriptor;\n  if (formatString != (char *)0x0) {\n    index = strtol(formatString,(char **)0x0,10);\n    maxColumns = (int)index;\n    if (maxColumns != 0) goto LAB_00119b11;\n  }\n  maxColumns = 0x50;\nLAB_00119b11:\n  do {\n    fileDescriptor = archIndex;\n    if (-1 < fileDescriptor) {\n      return;\n    }\n    outerIndex = (long)fileDescriptor;\n    tempFileDescriptor = (maxColumns - maxStringLength) + -1;\n    index = outerIndex;\n    do {\n      archIndex = (int)index;\n      if (-1 < archIndex) break;\n      stringLength = strlen(*(char **)(index * 0x60));\n      index = index + 1;\n      tempFileDescriptor = (tempFileDescriptor - (int)stringLength) + -1;\n    } while (-1 < tempFileDescriptor);\n    printf(\"\\n%*s\",(ulong)(maxStringLength + 1),&DAT_0011b4a1);\n    for (archMachArray = (char **)(outerIndex * 0x60);\n        ((ulong)(uint)(archIndex - fileDescriptor) + outerIndex) * 0x60 - (long)archMachArray != 0;\n        archMachArray = archMachArray + 0xc) {\n      printf(\"%s \",*archMachArray);\n    }\n    tempFileDescriptor = 2;\n    putc(10,_stdout);\n    do {\n      formatString = (char *)bfd_printable_arch_mach(tempFileDescriptor,0);\n      strCmpResult = strcmp(formatString,\"UNKNOWN!\");\n      if (strCmpResult != 0) {\n        tmpResult = bfd_printable_arch_mach(tempFileDescriptor,0);\n        printf(\"%*s \",(ulong)maxStringLength,tmpResult);\n        archMachArray = (char **)(outerIndex * 0x60);\n        strCmpResult = fileDescriptor;\n        while (archIndex != strCmpResult) {\n          if (*(char *)((long)archMachArray + (ulong)(tempFileDescriptor - 2) + 8) == '\\0') {\n            stringLength = strlen(*archMachArray);\n            for (strLength = stringLength & 0xffffffff; (int)strLength != 0; strLength = (ulong)((int)strLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachArray,_stdout);\n          }\n          strCmpResult = strCmpResult + 1;\n          if (archIndex != strCmpResult) {\n            putc(0x20,_stdout);\n          }\n          archMachArray = archMachArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      tempFileDescriptor = tempFileDescriptor + 1;\n    } while (tempFileDescriptor != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "try_dir.lto_priv.0",
                "strlen",
                "dcgettext",
                "getenv",
                "strcpy",
                "display_info.isra.0.cold",
                "do_display_target",
                "xmalloc",
                "__errno_location",
                "bfd_printable_arch_mach",
                "mkstemps",
                "close",
                "abort",
                "bfd_iterate_over_targets",
                "unlink",
                "free",
                "printf",
                "strerror",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_temp_file_and_architectures_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a",
                "decompiled_function_00116490": "initialize"
            },
            "code": "\nvoid execute_initialization_0010847a(void)\n\n{\n  initialize();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "demangle_and_count_strings_0010d21c",
                "param_2": "string_ptr",
                "param_3": "output_string_ptr",
                "bVar1": "temp_byte1",
                "pbVar2": "current_byte_ptr",
                "bVar3": "temp_byte2",
                "cVar4": "temp_char",
                "bVar5": "temp_byte3",
                "uVar6": "result",
                "iVar7": "temp_int",
                "uVar8": "temp_uint",
                "sVar9": "string_length",
                "pbVar10": "temp_byte_ptr",
                "__ptr": "temp_ptr",
                "__ptr_00": "temp_ptr_00",
                "__haystack": "haystack_ptr",
                "pcVar11": "temp_char_ptr",
                "uVar12": "temp_long",
                "pcVar13": "temp_char_ptr_00",
                "bVar14": "temp_byte4",
                "pcVar15": "temp_char_ptr_01",
                "bVar16": "temp_byte5",
                "bVar17": "temp_byte6",
                "bVar18": "temp_byte7",
                "bVar19": "temp_byte8",
                "uVar20": "counter",
                "uVar21": "counter_long",
                "local_3c": "counter_array"
            },
            "code": "\nundefined4 demangleAndCountStrings_0010d21c(undefined8 param_1,byte **string_ptr,undefined8 *output_string_ptr)\n\n{\n  byte temp_byte1;\n  byte *current_byte_ptr;\n  byte temp_byte2;\n  char temp_char;\n  byte temp_byte3;\n  undefined4 result;\n  int temp_int;\n  uint temp_uint;\n  size_t string_length;\n  byte *temp_byte_ptr;\n  void *temp_ptr;\n  void *temp_ptr_00;\n  char *haystack_ptr;\n  char *temp_char_ptr;\n  undefined8 temp_long;\n  char *temp_char_ptr_00;\n  byte temp_byte4;\n  char *temp_char_ptr_01;\n  byte temp_byte5;\n  byte temp_byte6;\n  byte temp_byte7;\n  byte temp_byte8;\n  uint counter;\n  ulong counter_long;\n  uint counter_array [3];\n  \n  current_byte_ptr = *string_ptr;\n  *string_ptr = current_byte_ptr + 1;\n  counter_array[0] = stab_demangle_count(string_ptr);\n  counter_long = (ulong)counter_array[0];\n  if (counter_array[0] != 0) {\n    temp_byte_ptr = *string_ptr;\n    string_length = strlen((char *)temp_byte_ptr);\n    if (counter_long <= string_length) {\n      *string_ptr = temp_byte_ptr + counter_long;\n      counter = 0;\n      result = stab_demangle_get_count(string_ptr,counter_array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (counter_array[0] <= counter) {\n          if (output_string_ptr == (undefined8 *)0x0) {\n            return result;\n          }\n          temp_ptr = (void *)savestring(current_byte_ptr,(int)*string_ptr - (int)current_byte_ptr);\n          temp_ptr_00 = (void *)concat(\"NoSuchStrinG__\",temp_ptr,0);\n          free(temp_ptr);\n          haystack_ptr = (char *)cplus_demangle(temp_ptr_00,2);\n          free(temp_ptr_00);\n          if ((haystack_ptr != (char *)0x0) &&\n             (temp_char_ptr = strstr(haystack_ptr,\"::NoSuchStrinG\"), temp_char_ptr_00 = haystack_ptr,\n             temp_char_ptr_01 = haystack_ptr, temp_char_ptr != (char *)0x0)) {\n            for (; temp_char_ptr_00 != temp_char_ptr; temp_char_ptr_00 = temp_char_ptr_00 + 1) {\n              if ((*temp_char_ptr_00 != ' ') ||\n                 (((temp_char_ptr_00[1] == '>' && (haystack_ptr < temp_char_ptr_00)) && (temp_char_ptr_00[-1] == '>')))) {\n                *temp_char_ptr_01 = *temp_char_ptr_00;\n                temp_char_ptr_01 = temp_char_ptr_01 + 1;\n              }\n            }\n            temp_long = savestring(haystack_ptr,(int)temp_char_ptr_01 - (int)haystack_ptr);\n            *output_string_ptr = temp_long;\n            free(haystack_ptr);\n            return result;\n          }\n          stab_bad_demangle(current_byte_ptr);\n          free(haystack_ptr);\n          return 0;\n        }\n        temp_byte_ptr = *string_ptr;\n        if (*temp_byte_ptr != 0x5a) {\n          temp_byte3 = stab_demangle_type_lto_priv_0(param_1,string_ptr,0);\n          if (temp_byte3 == 0) {\n            return 0;\n          }\n          temp_byte2 = 0;\n          temp_byte4 = 0;\n          temp_byte7 = 0;\n          temp_byte6 = 0;\n          temp_byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              temp_byte5 = temp_byte2;\n              temp_byte1 = *temp_byte_ptr;\n              if ((temp_byte4 | temp_byte1 == 0) != 0) {\n                temp_byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp_byte2 = temp_byte3;\n              temp_byte4 = temp_byte3;\n            } while ('v' < (char)temp_byte1);\n            if ((char)temp_byte1 < 'b') {\n              if ((char)temp_byte1 < 'U') {\n                if ((char)temp_byte1 < 'C') goto LAB_0010d2e9;\n                counter_long = 1L << (temp_byte1 + 0xbd & 0x3f);\n                if ((counter_long & 0x11409) == 0) {\n                  if ((counter_long & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (temp_byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(temp_byte1 + 0xab)) goto LAB_0010d2e9;\n              temp_byte_ptr = temp_byte_ptr + 1;\n              temp_byte2 = temp_byte5;\n              temp_byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(temp_byte1) {\n            case 0x62:\n              temp_byte2 = temp_byte5;\n              temp_byte7 = temp_byte3;\n              break;\n            case 99:\n              temp_byte2 = temp_byte5;\n              temp_byte8 = temp_byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp_byte2 = temp_byte5;\n              temp_byte6 = temp_byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *string_ptr = temp_byte_ptr + 1;\n        temp_char = stab_demangle_type_lto_priv_0(param_1,string_ptr,0);\n        if (temp_char == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(current_byte_ptr);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (temp_byte5 == 0) {\n    if (temp_byte8 == 0) {\n      if (temp_byte7 == 0) {\n        if (temp_byte6 == 0) {\n          if (temp_byte3 != 0) {\n            temp_uint = stab_demangle_count(string_ptr);\n            if (temp_uint == 0) goto LAB_0010d280;\n            *string_ptr = *string_ptr + temp_uint;\n          }\n        }\n        else {\n          if (**string_ptr == 0x6d) {\n            *string_ptr = *string_ptr + 1;\n          }\n          while( true ) {\n            temp_byte_ptr = *string_ptr;\n            if (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) == 0) break;\n            *string_ptr = temp_byte_ptr + 1;\n          }\n          if (*temp_byte_ptr == 0x2e) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *string_ptr = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n          temp_byte_ptr = *string_ptr;\n          if (*temp_byte_ptr == 0x65) {\n            do {\n              temp_byte_ptr = temp_byte_ptr + 1;\n              *string_ptr = temp_byte_ptr;\n            } while (((&_sch_istable)[(ulong)*temp_byte_ptr * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        temp_uint = stab_demangle_count(string_ptr);\n        if (1 < temp_uint) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**string_ptr == 0x6d) {\n        *string_ptr = *string_ptr + 1;\n      }\n      temp_int = stab_demangle_count(string_ptr);\n      if (temp_int == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**string_ptr == 0x6d) {\n      *string_ptr = *string_ptr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**string_ptr * 2] & 4) != 0) {\n      *string_ptr = *string_ptr + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "cplus_demangle",
                "savestring",
                "strlen",
                "abort",
                "strstr",
                "concat",
                "stab_demangle_type.lto_priv.0",
                "free",
                "stab_demangle_count",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_and_count_strings_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_specific_tables_001054af",
                "param_1": "unusedParameter1",
                "param_2": "unusedParameter2",
                "strip_specific_htab": "stripSpecificHashtable",
                "strip_unneeded_htab": "stripUnneededHashtable",
                "keep_specific_htab": "keepSpecificHashtable",
                "localize_specific_htab": "localizeSpecificHashtable",
                "globalize_specific_htab": "globalizeSpecificHashtable",
                "keepglobal_specific_htab": "keepGlobalSpecificHashtable",
                "weaken_specific_htab": "weakenSpecificHashtable",
                "redefine_specific_htab": "redefineSpecificHashtable",
                "redefine_specific_reverse_htab": "redefineSpecificReverseHashtable",
                "in_RAX": "unusedVariable"
            },
            "code": "\nvoid cleanupSpecificTables_001054af(undefined8 unusedParameter1,undefined8 unusedParameter2)\n\n{\n  undefined8 unusedVariable;\n  \n  htab_delete(stripSpecificHashtable);\n  htab_delete(stripUnneededHashtable);\n  htab_delete(keepSpecificHashtable);\n  htab_delete(localizeSpecificHashtable);\n  htab_delete(globalizeSpecificHashtable);\n  htab_delete(keepGlobalSpecificHashtable);\n  htab_delete(weakenSpecificHashtable);\n  htab_delete(redefineSpecificHashtable);\n  htab_delete(redefineSpecificReverseHashtable,unusedParameter2,unusedVariable);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_specific_tables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "process_record_0010c139",
                "param_1": "record",
                "param_2": "data",
                "param_3": "paramA",
                "param_4": "paramB",
                "param_5": "paramC",
                "param_6": "paramD",
                "uVar1": "tempVar1",
                "uVar3": "result",
                "puVar4": "newData",
                "in_R10": "varA",
                "unaff_R15": "varB"
            },
            "code": "\nulong processRecord_0010c139(undefined8 record,long data,undefined8 paramA,undefined8 paramB,\n                  undefined4 paramC,undefined8 paramD)\n\n{\n  undefined8 tempVar1;\n  char cVar2;\n  ulong result;\n  undefined8 *newData;\n  undefined8 varA;\n  undefined8 varB;\n  \n  cVar2 = *(char *)(data + 0x60);\n  if ((cVar2 != '\\0') && ((*(int *)(data + 0x40) != 0 || (*(char *)(data + 0x44) == '\\0')))) {\n    newData = (undefined8 *)xmalloc(0x28);\n    tempVar1 = *(undefined8 *)(data + 0x78);\n    *(undefined8 *)((long)newData + 0x1c) = 0;\n    newData[2] = paramB;\n    *(undefined4 *)(newData + 3) = paramC;\n    newData[4] = paramD;\n    *(undefined8 **)(data + 0x78) = newData;\n    *newData = tempVar1;\n    newData[1] = paramA;\n    return CONCAT71((int7)((ulong)varB >> 8),cVar2) & 0xffffffff;\n  }\n  result = debug_record_variable(record,paramA,paramB,paramC,paramD,varA);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "process_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "write_symbol_to_memory_0010e439",
                "param_1": "memoryAddress",
                "param_2": "symbolValue"
            },
            "code": "\nvoid writeSymbolToMemory_0010e439(long memoryAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(memoryAddress + 0x210) = symbolValue;\n  stab_write_symbol_lto_priv_0(memoryAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_memory_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00104ea2",
                "main",
                "parse_stab",
                "stab_push_string",
                "FUN_0010554f",
                "save_stab"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "stab_modify_type",
                "FUN_00114dc7",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "stab_class_start_method.lto_priv.0",
                "stab_demangle_remember_type",
                "stab_demangle_v3_arglist",
                "do_display_target",
                "stab_class_baseclass.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_class_method_var",
                "stab_demangle_arg",
                "stab_get_struct_index",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "try_dir.lto_priv.0",
                "FUN_00104ea2",
                "main",
                "get_file_size"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "input",
                "param_2": "size",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 input,int size)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(size - 1U) * 8);\n  }\n  stab_push_defined_type(input,defaultValue,size);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_if_value_in_array_00112502",
                "param_1": "array",
                "param_2": "value",
                "param_3": "maxValue",
                "uVar1": "index",
                "puVar2": "arrayPointer",
                "uVar3": "assignedValue",
                "cVar4": "charValue"
            },
            "code": "\nundefined checkIfValueInArray_00112502(long array,undefined8 value,ulong maxValue)\n\n{\n  uint index;\n  undefined8 *arrayPointer;\n  undefined8 assignedValue;\n  char charValue;\n  \n  do {\n    arrayPointer = *(undefined8 **)(array + 0x40);\n    if (arrayPointer == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(array + 0x48), index < 10 && (arrayPointer[(ulong)index + 2] != -1))) {\n      if (maxValue <= (ulong)arrayPointer[(ulong)index + 0xc]) {\n        return 1;\n      }\n      charValue = stab_lineno_lto_priv_0(value,*(undefined8 *)(arrayPointer[1] + 8));\n      if (charValue == '\\0') {\n        return 0;\n      }\n      *(int *)(array + 0x48) = *(int *)(array + 0x48) + 1;\n    }\n    assignedValue = *arrayPointer;\n    *(undefined4 *)(array + 0x48) = 0;\n    *(undefined8 *)(array + 0x40) = assignedValue;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "check_if_value_in_array_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "param_7": "errorMessage",
                "param_8": "result",
                "param_9": "inputLine",
                "uVar1": "message",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "bVar4": "nextChar",
                "unaff_RBX": "lineBuffer",
                "pbVar5": "lineStart",
                "unaff_EBP": "lineNumber",
                "in_R10": "line",
                "unaff_R13": "ignorableData",
                "unaff_R14": "endOfLine",
                "unaff_R15": "foundRubbish",
                "htab_find_slot()": "findSlot()"
            },
            "code": "\nvoid processInputLines_00104cc1(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *currentChar;\n  byte nextChar;\n  byte *lineBuffer;\n  byte *lineStart;\n  int lineNumber;\n  byte *line;\n  undefined8 ignorableData;\n  byte *endOfLine;\n  byte *foundRubbish;\n  undefined8 errorMessage;\n  undefined8 *result;\n  byte *inputLine;\n  \ncode_r0x00104cc1:\n  inputLine = line;\n  message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(message,errorMessage,lineNumber);\n  lineStart = lineBuffer;\n  line = inputLine;\nLAB_00114599:\n  do {\n    *line = 0;\n    if (foundRubbish < line) {\n      slot = (byte **)findSlot();\n      *slot = foundRubbish;\n    }\n    lineNumber = lineNumber + 1;\n    currentChar = lineStart;\n    if (endOfLine[1] == 0) {\n      *result = ignorableData;\n      return;\n    }\n    for (; nextChar = *currentChar, endOfLine = currentChar, nextChar != 10; currentChar = currentChar + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          lineBuffer = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *currentChar = 0;\n          lineBuffer = currentChar + 1;\n          if (currentChar[1] == 10) {\n            lineBuffer = currentChar + 2;\n            endOfLine = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          parse_input_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      endOfLine = currentChar + 1;\n      lineBuffer = currentChar + 2;\n    }\n    else {\n      lineBuffer = currentChar + 1;\n    }\nLAB_00114553:\n    nextChar = *lineStart;\n    foundRubbish = lineStart;\n    while ((nextChar == 0x20 || (line = foundRubbish, nextChar == 9))) {\n      lineStart = foundRubbish + 1;\n      foundRubbish = foundRubbish + 1;\n      nextChar = *lineStart;\n    }\n    do {\n      lineStart = lineBuffer;\n      if ((nextChar == 10) || (nextChar == 0xd)) goto LAB_00114676;\n      if (nextChar == 0) goto LAB_00114599;\n      nextChar = line[1];\n      line = line + 1;\n    } while ((nextChar != 0x20) && (nextChar != 9));\n    if ((char)nextChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (nextChar & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    nextChar = line[1];\n    if ((((((nextChar == 9) || (nextChar == 0x20)) && ((nextChar = line[2], nextChar == 9 || (nextChar == 0x20)))\n          ) && ((nextChar = line[3], nextChar == 9 || (nextChar == 0x20)))) &&\n        ((nextChar = line[4], nextChar == 9 || (nextChar == 0x20)))) &&\n       ((nextChar = line[5], nextChar == 9 || (nextChar == 0x20)))) {\n      nextChar = line[6];\n      currentChar = line + 6;\n      if ((nextChar == 9) || (nextChar == 0x20)) {\n        do {\n          do {\n            nextChar = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (nextChar == 0x20);\n        } while (nextChar == 9);\n      }\n    }\n    if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "non_fatal",
                "htab_find_slot",
                "dcgettext",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "allocate_and_store_00113bfa",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "type_ptr",
                "plVar2": "dynamic_array_ptr"
            },
            "code": "\nlong allocate_and_store_00113bfa(long input_1,long input_2)\n\n{\n  long type_ptr;\n  long *dynamic_array_ptr;\n  \n  if (((input_1 != 0) && (input_2 != 0)) &&\n     (type_ptr = debug_make_type_constprop_0(0x12,0), type_ptr != 0)) {\n    dynamic_array_ptr = (long *)xmalloc(0x10);\n    *dynamic_array_ptr = input_1;\n    dynamic_array_ptr[1] = input_2;\n    *(long **)(type_ptr + 0x10) = dynamic_array_ptr;\n    return type_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_and_store_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_output_format_00108375",
                "uVar1": "ptr1",
                "uVar2": "ptr2",
                "unaff_EBX": "ebx"
            },
            "code": "\nuint check_output_format_00108375(undefined8 param_1,undefined8 *param_2,undefined8 param_3)\n\n{\n  undefined8 ptr1;\n  undefined8 ptr2;\n  uint ebx;\n  \n  if (*(int *)(param_2[1] + 8) != 2) {\n    ptr1 = *param_2;\n    ebx = ebx & 0xf7ffffff;\n    ptr2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(ptr2,ptr1,param_3);\n  }\n  return ebx;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "check_output_format_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "format_and_push_string_00109e76",
                "param_1": "functionPointer",
                "param_2": "value",
                "lVar1": "previousValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid formatAndPushString_00109e76(long functionPointer,uint value)\n\n{\n  long previousValue;\n  char formattedString [58];\n  \n  previousValue = *(long *)(functionPointer + 0x68);\n  *(long *)(functionPointer + 0x68) = previousValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",previousValue,previousValue,(ulong)value);\n  stab_push_string(functionPointer,formattedString,previousValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_push_string_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_saved_stabs_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "saved_stabs_index": "currentEntryIndex",
                "lVar2": "entryOffset",
                "uVar3": "duplicateValue",
                "xstrdup": "duplicateString",
                "iVar1": "newIndex"
            },
            "code": "\nulong updateSavedStabsEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int newIndex;\n  long entryOffset;\n  undefined8 duplicateValue;\n  \n  entryOffset = (long)currentEntryIndex * 0x18;\n  free(*(void **)(saved_stabs + entryOffset + 0x10));\n  *(undefined4 *)(saved_stabs + entryOffset) = newValue1;\n  *(undefined4 *)(saved_stabs + entryOffset + 4) = newValue2;\n  *(undefined8 *)(saved_stabs + entryOffset + 8) = newValue3;\n  duplicateValue = duplicateString(newValue4);\n  *(undefined8 *)(saved_stabs + entryOffset + 0x10) = duplicateValue;\n  newIndex = currentEntryIndex + 1;\n  currentEntryIndex = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_saved_stabs_entry_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "stab_lineno.lto_priv.0",
                "debug_start_source"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_and_return_0010afd5",
                "param_1": "list",
                "param_2": "data",
                "param_3": "str_ptr",
                "param_4": "str_len",
                "param_5": "type",
                "param_6": "debug_val",
                "__s2": "str",
                "puVar2": "node",
                "uVar3": "indirect_type",
                "lVar4": "size",
                "puVar5": "subnode",
                "puVar6": "tmp_ptr",
                "bVar7": "flag",
                "auVar8": "result"
            },
            "code": "\nundefined  [16]\nfindStringAndReturn_0010afd5(undefined8 *list,long data,undefined8 str_ptr,undefined4 str_len,\n            undefined4 type,undefined8 debug_val)\n\n{\n  int iVar1;\n  char *str;\n  undefined8 *node;\n  undefined8 indirect_type;\n  long size;\n  undefined8 *subnode;\n  undefined4 *tmp_ptr;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  str = (char *)savestring(str_ptr,str_len);\n  for (list = (undefined8 *)*list; list != (undefined8 *)0x0;\n      list = (undefined8 *)*list) {\n    for (node = (undefined8 *)list[1]; node != (undefined8 *)0x0;\n        node = (undefined8 *)*node) {\n      if ((undefined8 *)node[2] != (undefined8 *)0x0) {\n        for (subnode = *(undefined8 **)(undefined8 *)node[2]; subnode != (undefined8 *)0x0;\n            subnode = (undefined8 *)*subnode) {\n          if ((*(int *)((long)subnode + 0x14) == 1) && (*(char *)subnode[1] == *str)) {\n            iVar1 = strcmp((char *)subnode[1],str);\n            if (iVar1 == 0) {\n              size = subnode[4];\n              if (size == 0) goto LAB_0010b05b;\n              free(str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  node = *(undefined8 **)(data + 0x1a0);\n  do {\n    if (node == (undefined8 *)0x0) {\n      node = (undefined8 *)xmalloc(0x28);\n      indirect_type = *(undefined8 *)(data + 0x1a0);\n      tmp_ptr = (undefined4 *)((long)node + 0x14);\n      for (size = 5; size != 0; size = size + -1) {\n        *tmp_ptr = 0;\n        tmp_ptr = tmp_ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(node + 2) = type;\n      *node = indirect_type;\n      node[1] = str;\n      indirect_type = debug_make_indirect_type_isra_0(node + 3,str);\n      *(undefined8 **)(data + 0x1a0) = node;\n      node[4] = indirect_type;\nLAB_0010b0e7:\n      size = node[4];\nLAB_0010b0eb:\n      result._8_8_ = debug_val;\n      result._0_8_ = size;\n      return result;\n    }\n    if (*(char *)node[1] == *str) {\n      iVar1 = strcmp((char *)node[1],str);\n      if (iVar1 == 0) {\n        if (*(int *)(node + 2) == 0) {\n          *(undefined4 *)(node + 2) = type;\n        }\n        free(str);\n        goto LAB_0010b0e7;\n      }\n    }\n    node = (undefined8 *)*node;\n  } while( true );\n}\n\n",
            "called": [
                "savestring",
                "debug_make_indirect_type.isra.0",
                "free",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_string_and_return_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_count",
                "debug_get_real_type.isra.0",
                "debug_make_type.constprop.0",
                "malloc",
                "sprintf",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_qualified",
                "debug_make_float_type.isra.0",
                "parse_number",
                "cplus_demangle_init_info",
                "debug_make_void_type.isra.0",
                "savestring",
                "strlen",
                "dcgettext",
                "strcpy",
                "xmalloc",
                "warn_stab",
                "parse_stab_type_number",
                "debug_make_enum_type.isra.0",
                "cplus_demangle_mangled_name",
                "startswith.lto_priv.0.lto_priv.0",
                "strchr",
                "stab_find_tagged_type",
                "xrealloc",
                "debug_find_named_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "stab_find_type",
                "stab_demangle_template",
                "strtol",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_make_const_type.isra.0",
                "free",
                "parse_stab_type",
                "strncmp",
                "fprintf",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_remember_type",
                "bad_stab",
                "strcat",
                "debug_make_offset_type.isra.0",
                "strcmp",
                "stab_bad_demangle",
                "strstr",
                "strspn",
                "concat",
                "debug_make_function_type.isra.0",
                "stab_find_slot",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stabs_entries_00108b3e",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "offset",
                "piVar3": "stab_entry",
                "iVar4": "index",
                "saved_stabs_index": "stabs_index",
                "saved_stabs": "stabs_data"
            },
            "code": "\n\n\nundefined8 print_stabs_entries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long offset;\n  int *stab_entry;\n  int index;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  index = stabs_index;\n  do {\n    offset = (long)index * 0x18;\n    stab_entry = (int *)(stabs_data + offset);\n    if (*(long *)(stabs_data + offset + 0x10) != 0) {\n      stab_name = bfd_get_stab_name(*stab_entry);\n      if (stab_name == 0) {\n        if (*stab_entry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(stabs_data + offset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(stabs_data + offset + 8));\n      if (*stab_entry != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(stabs_data + offset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    index = (index + 1) % 0x10;\n  } while (stabs_index != index);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "inputParam",
                "stab_modify_type": "updateStabType"
            },
            "code": "\nvoid modifyStabType_0010a083(long inputParam)\n\n{\n  updateStabType(inputParam,0x2a,4,inputParam + 0x178,inputParam + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_copy_memory_00109c2e",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "output",
                "param_6": "data",
                "lVar1": "newMemory",
                "plVar2": "destPtr",
                "lVar3": "remainingBytes",
                "puVar4": "currentByte",
                "uVar5": "maxSize",
                "bVar6": "flagByte",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandAndCopyMemory_00109c2e(long source,long destination,ulong size,int flag,undefined4 *output,\n            undefined8 data)\n\n{\n  long newMemory;\n  long *destPtr;\n  long remainingBytes;\n  undefined *currentByte;\n  ulong maxSize;\n  byte flagByte;\n  undefined returnValue [16];\n  \n  flagByte = 0;\n  size = size & 0xffffffff;\n  maxSize = *(ulong *)(source + 0x1b0);\n  if (maxSize <= size) {\n    if (maxSize == 0) {\n      maxSize = 10;\n    }\n    for (; maxSize <= size; maxSize = maxSize * 2) {\n    }\n    newMemory = xrealloc(*(undefined8 *)(source + 0x1a8),maxSize * 0x18);\n    *(long *)(source + 0x1a8) = newMemory;\n    currentByte = (undefined *)(*(long *)(source + 0x1b0) * 0x18 + newMemory);\n    for (remainingBytes = (maxSize - *(long *)(source + 0x1b0)) * 0x18; remainingBytes != 0; remainingBytes = remainingBytes + -1) {\n      *currentByte = 0;\n      currentByte = currentByte + (ulong)flagByte * -2 + 1;\n    }\n    *(ulong *)(source + 0x1b0) = maxSize;\n  }\n  destPtr = (long *)(size * 0x18 + *(long *)(source + 0x1a8));\n  if (*destPtr == 0) {\n    newMemory = *(long *)(source + 0x68);\n    *destPtr = newMemory;\n    *(long *)(source + 0x68) = newMemory + 1;\n    destPtr[1] = destination;\n    *(int *)(destPtr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(destPtr + 2) = 0;\n    *(undefined4 *)((long)destPtr + 0x14) = *output;\n  }\n  else {\n    *output = *(undefined4 *)((long)destPtr + 0x14);\n  }\n  returnValue._8_8_ = data;\n  returnValue._0_8_ = *destPtr;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_start_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_and_copy_memory_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "display_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "translateText"
            },
            "code": "\nvoid displayErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = translateText(0,\"bad format for %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "display_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_param_to_current_namespace_00112996",
                "param_1": "fileStructure",
                "uVar1": "result",
                "lVar2": "offset"
            },
            "code": "\n\n\nundefined8 addParamToCurrentNamespace_00112996(long fileStructure,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long offset;\n  \n  if ((*(long *)(fileStructure + 8) != 0) && (*(long *)(fileStructure + 0x10) != 0)) {\n    offset = *(long *)(fileStructure + 0x10) + 0x10;\n    if (*(long *)(fileStructure + 0x20) != 0) {\n      offset = *(long *)(fileStructure + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(offset,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "add_param_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_ptr",
                "param_2": "class_name",
                "param_3": "type_ptr",
                "param_4": "param_4_new",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "lVar3": "temp_var3",
                "piVar4": "temp_var4",
                "__s1": "temp_var5",
                "cVar5": "temp_var6",
                "iVar6": "temp_var7",
                "puVar7": "temp_var8",
                "auVar8": "return_val"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_ptr,char *class_name,int *type_ptr,undefined8 param_4_new)\n\n{\n  undefined8 temp_var1;\n  uint temp_var2;\n  long temp_var3;\n  int *temp_var4;\n  char *temp_var5;\n  char temp_var6;\n  int temp_var7;\n  undefined8 *temp_var8;\n  undefined return_val [16];\n  \n  if (3 < *type_ptr - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  temp_var3 = *(long *)(type_ptr + 4);\n  temp_var8 = (undefined8 *)(ulong)*(uint *)(temp_var3 + 0xc);\n  if (*(uint *)(temp_var3 + 0xc) <= *(uint *)(class_ptr + 0x38)) {\n    for (temp_var8 = *(undefined8 **)(class_ptr + 0x50); temp_var8 != (undefined8 *)0x0;\n        temp_var8 = (undefined8 *)*temp_var8) {\n      temp_var4 = (int *)temp_var8[1];\n      if (*temp_var4 == *type_ptr) {\n        temp_var5 = (char *)temp_var8[2];\n        if (class_name == (char *)0x0) {\n          if (temp_var5 == (char *)0x0) {\nLAB_0010c82c:\n            temp_var6 = debug_type_samep(class_ptr,temp_var4,type_ptr);\n            if (temp_var6 != '\\0') {\n              temp_var2 = *(uint *)(*(long *)(temp_var8[1] + 0x10) + 0xc);\n              temp_var8 = (undefined8 *)(ulong)temp_var2;\n              *(uint *)(temp_var3 + 0xc) = temp_var2;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((temp_var5 != (char *)0x0) && (*temp_var5 == *class_name)) &&\n                (temp_var7 = strcmp(temp_var5,class_name), temp_var7 == 0)) goto LAB_0010c82c;\n      }\n    }\n    temp_var7 = *(int *)(class_ptr + 0x34) + 1;\n    *(int *)(class_ptr + 0x34) = temp_var7;\n    *(int *)(temp_var3 + 0xc) = temp_var7;\n    temp_var8 = (undefined8 *)xmalloc(0x18);\n    temp_var1 = *(undefined8 *)(class_ptr + 0x50);\n    temp_var8[2] = class_name;\n    *(undefined8 **)(class_ptr + 0x50) = temp_var8;\n    *temp_var8 = temp_var1;\n    temp_var8[1] = type_ptr;\n  }\nLAB_0010c884:\n  return_val._1_7_ = (undefined7)((ulong)temp_var8 >> 8);\n  return_val[0] = 1;\n  return_val._8_8_ = param_4_new;\n  return return_val;\n}\n\n",
            "called": [
                "__assert_fail",
                "debug_type_samep",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "context",
                "uVar1": "type_a",
                "uVar2": "type_b",
                "pplVar3": "ptr_ptr_a",
                "ppcVar4": "str_ptr_a",
                "ppcVar5": "str_ptr_b",
                "lVar6": "ptr_a",
                "lVar7": "ptr_b",
                "lVar8": "ptr_c",
                "pcVar9": "str_a",
                "pcVar10": "str_b",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparison",
                "uVar14": "type_a_real",
                "uVar15": "type_b_real",
                "puVar16": "ptr_type_a",
                "puVar17": "ptr_type_b",
                "plVar18": "ptr_a",
                "lVar19": "offset",
                "lVar22": "ptr_a",
                "local_70": "ptr_type_b",
                "local_58": "head",
                "plStack_50": "ptr_a",
                "local_48": "ptr_b",
                "plVar20": "ptr_type_b",
                "plVar21": "ptr_a"
            },
            "code": "\nbyte checkEquality_0010922b(long context,long *param_2,long *param_3)\n\n{\n  uint type_a;\n  uint type_b;\n  long **ptr_ptr_a;\n  char **str_ptr_a;\n  char **str_ptr_b;\n  long ptr_a;\n  long ptr_b;\n  long ptr_c;\n  char *str_a;\n  char *str_b;\n  char result;\n  byte isEqual;\n  int comparison;\n  undefined8 type_a_real;\n  undefined8 type_b_real;\n  undefined8 *ptr_type_a;\n  undefined8 *ptr_type_b;\n  long *ptr_a;\n  long offset;\n  long *ptr_type_b;\n  long *ptr_a;\n  long ptr_a;\n  long *ptr_type_b;\n  undefined8 *head;\n  long *ptr_a;\n  long *ptr_b;\n  \n  ptr_a = param_3;\n  if (param_2 == (long *)0x0) {\nLAB_00109241:\n    return param_3 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (ptr_a == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type_a = *(uint *)param_2;\n    if (type_a == 1) goto code_r0x00109263;\n    while (type_b = *(uint *)param_3, type_b == 1) {\n      param_3 = **(long ***)param_3[2];\n      if (param_3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (param_2 == param_3) {\n      return true;\n    }\n    if (type_a != 0x16) break;\n    if (type_b != 0x17) goto LAB_001092cb;\n    param_2 = *(long **)(param_2[2] + 8);\n    if (param_2 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type_a == 0x17) && (type_b == 0x16)) {\n    param_3 = *(long **)(param_3[2] + 8);\n    ptr_a = param_3;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*param_2 != *param_3) {\n    return false;\n  }\n  if (type_a == 3) {\n    return *(char *)(param_2 + 2) == *(char *)(param_3 + 2);\n  }\n  if (type_a < 4) {\n    if (type_a == 2) {\n      return true;\n    }\n  }\n  else if (type_a - 4 < 3) {\n    return true;\n  }\n  head = *(undefined8 **)(context + 0x58);\n  for (ptr_type_b = head; ptr_type_b != (undefined8 *)0x0; ptr_type_b = (undefined8 *)*ptr_type_b) {\n    if (((long *)ptr_type_b[1] == param_2) && ((long *)ptr_type_b[2] == param_3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(context + 0x58) = &head;\n  ptr_a = param_2;\n  ptr_b = param_3;\n  switch(type_a) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    ptr_a = (long *)param_2[2];\n    ptr_ptr_a = (long **)param_3[2];\n    if (ptr_a == (long *)0x0) {\n      isEqual = ptr_ptr_a == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_ptr_a == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(context + 0x38) < *(uint *)((long)ptr_a + 0xc)) &&\n       (*(uint *)((long)ptr_a + 0xc) == *(uint *)((long)ptr_ptr_a + 0xc))) goto LAB_001097af;\n    ptr_type_b = (undefined8 *)*ptr_a;\n    ptr_type_b = *ptr_ptr_a;\n    if (((ptr_type_b == (undefined8 *)0x0) == (ptr_type_b == (long *)0x0)) &&\n       ((((ptr_a[2] == 0) == (ptr_ptr_a[2] == (long *)0x0) &&\n         ((ptr_a[3] == 0) == (ptr_ptr_a[3] == (long *)0x0))) &&\n        ((ptr_a[4] == 0) == (ptr_ptr_a[4] == (long *)0x0))))) {\n      if (ptr_type_b == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((ptr_a[4] != 0) &&\n           (result = checkEquality_0010922b(context,ptr_a[4],ptr_ptr_a[4]), result == '\\0'))\n        goto LAB_00109382;\n        ptr_a = (long *)ptr_a[2];\n        if (ptr_a == (long *)0x0) {\nLAB_00109540:\n          ptr_type_b = (undefined8 *)ptr_a[3];\n          if (ptr_type_b == (undefined8 *)0x0) goto LAB_001097af;\n          ptr_a = ptr_ptr_a[3];\n          while( true ) {\n            str_ptr_b = (char **)*ptr_type_b;\n            if (str_ptr_b == (char **)0x0) {\n              isEqual = *ptr_a == 0;\n              goto LAB_001099c4;\n            }\n            str_ptr_a = (char **)*ptr_a;\n            if (str_ptr_a == (char **)0x0) break;\n            if ((**str_ptr_b != **str_ptr_a) || (comparison = strcmp(*str_ptr_b,*str_ptr_a), comparison != 0))\n            break;\n            str_a = str_ptr_b[1];\n            str_b = str_ptr_a[1];\n            if ((str_a == (char *)0x0) != (str_b == (char *)0x0)) break;\n            if (str_a != (char *)0x0) {\n              ptr_a = 0;\n              while( true ) {\n                str_ptr_b = *(char ***)(str_a + ptr_a);\n                str_ptr_a = *(char ***)(str_b + ptr_a);\n                if (str_ptr_b == (char **)0x0) break;\n                if (str_ptr_a == (char **)0x0) goto LAB_00109382;\n                if ((((**str_ptr_b != **str_ptr_a) ||\n                     ((((ulong)str_ptr_b[2] ^ (ulong)str_ptr_a[2]) & 0xffffffffffff) != 0)) ||\n                    ((str_ptr_b[3] != str_ptr_a[3] ||\n                     ((((str_ptr_b[4] == (char *)0x0) != (str_ptr_a[4] == (char *)0x0) ||\n                       (comparison = strcmp(*str_ptr_b,*str_ptr_a), comparison != 0)) ||\n                      (result = checkEquality_0010922b(context,str_ptr_b[1],str_ptr_a[1]), result == '\\0')))))) ||\n                   ((str_ptr_b[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(context,str_ptr_b[4],str_ptr_a[4]), result == '\\0'))))\n                goto LAB_00109382;\n                ptr_a = ptr_a + 8;\n              }\n              if (str_ptr_a == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr_type_b = ptr_type_b + 1;\n            ptr_a = ptr_a + 1;\n          }\n        }\n        else {\n          ptr_type_b = ptr_ptr_a[2];\n          for (; ptr_type_b = (undefined8 *)*ptr_a, ptr_type_b != (undefined8 *)0x0;\n              ptr_a = ptr_a + 1) {\n            ptr_type_a = (undefined8 *)*ptr_type_b;\n            if ((((ptr_type_a == (undefined8 *)0x0) ||\n                 (((ptr_type_b[1] ^ ptr_type_a[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr_type_b + 2) != *(int *)(ptr_type_a + 2))) ||\n               (result = checkEquality_0010922b(context,*ptr_type_b,*ptr_type_a), result == '\\0'))\n            goto LAB_00109382;\n            ptr_type_b = ptr_type_b + 1;\n          }\n          if (*ptr_type_b == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; str_ptr_b = (char **)*ptr_type_b, str_ptr_b != (char **)0x0; ptr_type_b = ptr_type_b + 1) {\n          str_ptr_a = (char **)*ptr_type_b;\n          if (str_ptr_a == (char **)0x0) goto LAB_00109382;\n          str_a = *str_ptr_a;\n          str_b = *str_ptr_b;\n          if ((*str_b != *str_a) ||\n             ((((ulong)str_ptr_b[2] ^ (ulong)str_ptr_a[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)str_ptr_b + 0x14) == '\\0') {\n            if (str_ptr_b[3] == str_ptr_a[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison = strcmp(str_ptr_b[3],str_ptr_a[3]);\n          if (comparison != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison = strcmp(str_b,str_a);\n          if (((comparison != 0) || (str_ptr_b[1] == (char *)0x0)) || (str_ptr_a[1] == (char *)0x0))\n          goto LAB_00109382;\n          type_a_real = debug_get_real_type_isra_0(str_ptr_a[1],0);\n          type_b_real = debug_get_real_type_isra_0(str_ptr_b[1],0);\n          result = checkEquality_0010922b(context,type_b_real,type_a_real);\n          if (result == '\\0') goto LAB_00109382;\n          ptr_type_b = ptr_type_b + 1;\n        }\n        if (*ptr_type_b == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    ptr_a = (long *)param_2[2];\n    ptr_a = (long *)param_3[2];\n    if (ptr_a == (long *)0x0) {\n      isEqual = ptr_a == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (ptr_a == (long *)0x0) goto LAB_00109382;\n    ptr_a = *ptr_a;\n    ptr_a = *ptr_a;\n    offset = 0;\n    ptr_b = ptr_a[1];\n    ptr_c = ptr_a[1];\n    do {\n      str_a = *(char **)(ptr_a + offset);\n      if (str_a == (char *)0x0) {\n        isEqual = *(long *)(ptr_a + offset) == 0;\n        goto LAB_001099c1;\n      }\n      str_b = *(char **)(ptr_a + offset);\n      if (((str_b == (char *)0x0) || (*str_a != *str_b)) ||\n         (*(long *)(ptr_b + offset) != *(long *)(ptr_c + offset))) break;\n      comparison = strcmp(str_a,str_b);\n      offset = offset + 8;\n    } while (comparison == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(context,param_2[2],param_3[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)param_2[2] + 2) == *(char *)((undefined8 *)param_3[2] + 2)) &&\n       (result = checkEquality_0010922b(context,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]),\n       result != '\\0')) {\n      ptr_a = *(long **)(param_2[2] + 8);\n      ptr_a = *(long **)(param_3[2] + 8);\n      if ((ptr_a == (long *)0x0) == (ptr_a == (long *)0x0)) {\n        if (ptr_a == (long *)0x0) goto LAB_001097af;\n        while (((*ptr_a != 0 && (*ptr_a != 0)) &&\n               (result = checkEquality_0010922b(context), result != '\\0'))) {\n          ptr_a = ptr_a + 1;\n          ptr_a = ptr_a + 1;\n        }\nLAB_0010995d:\n        if (*ptr_a != 0) goto LAB_00109964;\n        isEqual = *ptr_a == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr_type_b = (undefined8 *)param_3[2];\n    ptr_type_a = (undefined8 *)param_2[2];\n    isEqual = 0;\n    if ((ptr_type_a[1] == ptr_type_b[1]) && (ptr_type_a[2] == ptr_type_b[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(context,*ptr_type_a,*ptr_type_b);\n    }\n    break;\n  case 0x10:\n    ptr_type_b = (undefined8 *)param_3[2];\n    ptr_type_a = (undefined8 *)param_2[2];\n    isEqual = 0;\n    if (((ptr_type_a[2] == ptr_type_b[2]) && (ptr_type_a[3] == ptr_type_b[3])) &&\n       (*(char *)(ptr_type_a + 4) == *(char *)(ptr_type_b + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr_type_b = (undefined8 *)param_3[2];\n    ptr_type_a = (undefined8 *)param_2[2];\n    isEqual = 0;\n    if (*(char *)(ptr_type_a + 1) == *(char *)(ptr_type_b + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(context,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(context,*(undefined8 *)(param_2[2] + 8),*(undefined8 *)(param_3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)param_2[2] + 3) == *(char *)((undefined8 *)param_3[2] + 3)) &&\n        (result = checkEquality_0010922b(context,*(undefined8 *)param_2[2],*(undefined8 *)param_3[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(context,*(undefined8 *)(param_2[2] + 8),\n                              *(undefined8 *)(param_3[2] + 8)), result != '\\0')) {\n      ptr_a = *(long **)(param_2[2] + 0x10);\n      ptr_a = *(long **)(param_3[2] + 0x10);\n      if ((ptr_a == (long *)0x0) == (ptr_a == (long *)0x0)) {\n        if (ptr_a != (long *)0x0) {\n          while (((*ptr_a != 0 && (*ptr_a != 0)) &&\n                 (result = checkEquality_0010922b(context), result != '\\0'))) {\n            ptr_a = ptr_a + 1;\n            ptr_a = ptr_a + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    ptr_a = (long *)param_3[2];\n    ptr_a = (long *)param_2[2];\n    comparison = strcmp(*(char **)(*ptr_a + 8),*(char **)(*ptr_a + 8));\n    isEqual = 0;\n    if (comparison == 0) {\n      isEqual = checkEquality_0010922b(context,ptr_a[1],ptr_a[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(context + 0x58) = head;\n  return isEqual;\ncode_r0x00109263:\n  param_2 = **(long ***)param_2[2];\n  ptr_a = param_2;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "debug_type_samep",
                "strcmp",
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_set_class_id.lto_priv.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "result",
                "iVar2": "index",
                "iVar3": "statResult",
                "ppcVar4": "currentFile",
                "lVar5": "readBytes",
                "uVar6": "format",
                "puVar7": "tempdirResult",
                "piVar8": "errnoLocation",
                "uVar9": "errorMsg",
                "in_RAX": "filePtr",
                "pcVar10": "currentChar",
                "ppcVar11": "fileList",
                "lVar12": "fileSize",
                "pvVar13": "buffer",
                "pcVar14": "closeFunction",
                "lVar15": "bytesToCopy",
                "pcVar16": "nextChar",
                "psVar17": "statStruct",
                "unaff_R14": "tempdirList",
                "unaff_R15": "filePtrList",
                "bVar18": "byteFlag",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "p1",
                "in_stack_00000010": "p2",
                "in_stack_00000018": "p3",
                "in_stack_00000020": "p4",
                "in_stack_00000028": "p5",
                "in_stack_00000030": "p6",
                "in_stack_000000f8": "p7",
                "in_stack_00000110": "p8",
                "status": "statusCode"
            },
            "code": "\nvoid copyArchive_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char result;\n  int index;\n  int statResult;\n  char **currentFile;\n  long readBytes;\n  undefined8 format;\n  char *__format;\n  undefined8 *tempdirResult;\n  int *errnoLocation;\n  undefined8 errorMsg;\n  long filePtr;\n  char *currentChar;\n  char **fileList;\n  long fileSize;\n  void *buffer;\n  code *closeFunction;\n  long bytesToCopy;\n  char *nextChar;\n  stat *statStruct;\n  undefined8 *tempdirList;\n  char **filePtrList;\n  byte byteFlag;\n  undefined8 returnAddress;\n  undefined8 *p1;\n  long *p2;\n  char *p3;\n  undefined8 *p4;\n  undefined8 p5;\n  undefined8 p6;\n  uint p7;\n  long p8;\n  \n  byteFlag = 0;\n  currentChar = (char *)(filePtr + 1);\n  do {\n    if (*currentChar == '/') {\n      copyArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(p3,&DAT_0011b47d);\n      statResult = stat(currentChar,(stat *)&stack0x00000050);\n      tempdirResult = tempdirList;\n      if (-1 < statResult) {\n        fileSize = make_tempdir(currentChar);\n        free(currentChar);\n        if (fileSize == 0) {\n          errnoLocation = __errno_location();\n          currentChar = strerror(*errnoLocation);\n          errorMsg = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMsg,currentChar);\n          goto LAB_00104e93;\n        }\n        tempdirResult = (undefined8 *)xmalloc(0x18);\n        currentChar = *filePtrList;\n        *tempdirResult = tempdirList;\n        tempdirResult[2] = 0;\n        tempdirResult[1] = fileSize;\n        currentChar = (char *)concat(fileSize,&DAT_0011b47d,currentChar);\n      }\n      statResult = 0;\n      if (preserve_dates != '\\0') {\n        statStruct = (stat *)&stack0x00000050;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&statStruct->st_dev = 0;\n          statStruct = (stat *)((long)statStruct + (ulong)byteFlag * -8 + 4);\n        }\n        fileList = (char **)filePtrList[0x1d];\n        if ((char **)filePtrList[0x1d] == (char **)0x0) {\n          fileList = filePtrList;\n        }\n        statResult = (**(code **)(fileList[1] + 0x1e8))(filePtrList,(stat *)&stack0x00000050);\n        if (statResult != 0) {\n          nextChar = *filePtrList;\n          errorMsg = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMsg,nextChar);\n        }\n      }\n      tempdirList = (undefined8 *)xmalloc(0x18);\n      tempdirList[1] = currentChar;\n      *tempdirList = tempdirResult;\n      tempdirList[2] = 0;\n      result = bfd_check_format(filePtrList,1);\n      if (result == '\\0') {\n        errorMsg = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,filePtrList,0,errorMsg);\n        fileList = (char **)bfd_openw(currentChar,p5);\n        if (fileList == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        currentFile = (char **)filePtrList[0x1d];\n        if ((char **)filePtrList[0x1d] == (char **)0x0) {\n          currentFile = filePtrList;\n        }\n        index = (**(code **)(currentFile[1] + 0x1e8))(filePtrList,&stack0x000000e0);\n        fileSize = p8;\n        if (index == 0) {\n          if (p8 < 0) {\n            errorMsg = bfd_get_archive_filename(filePtrList);\n            format = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(format,errorMsg);\n          }\n          else {\n            index = bfd_seek(filePtrList,0,0);\n            if (index == 0) {\n              if (verbose != '\\0') {\n                nextChar = *fileList;\n                errorMsg = bfd_get_archive_filename(filePtrList);\n                __format = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(__format,errorMsg,nextChar);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; fileSize != 0; fileSize = fileSize - bytesToCopy) {\n                bytesToCopy = 0x2000;\n                if (fileSize < 0x2001) {\n                  bytesToCopy = fileSize;\n                }\n                readBytes = bfd_bread(buffer,bytesToCopy,filePtrList);\n                currentFile = filePtrList;\n                if ((bytesToCopy != readBytes) ||\n                   (readBytes = bfd_bwrite(buffer,bytesToCopy,fileList), currentFile = fileList, bytesToCopy != readBytes\n                   )) {\n                  bfd_nonfatal_message(0,currentFile,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*fileList,p7 | 0x100);\n              free(buffer);\n              result = bfd_close_all_done(fileList);\n              if (result == '\\0') {\n                bfd_nonfatal_message(currentChar,0,0,0);\n                statusCode = 1;\n              }\n              goto LAB_00114a86;\n            }\n            errorMsg = bfd_get_archive_filename(filePtrList);\n            bfd_nonfatal(errorMsg);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,filePtrList,0,0);\n        }\nLAB_00104f00:\n        result = bfd_close_all_done(fileList);\n        if (result == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        statusCode = 1;\n      }\n      else {\n        if (p6._7_1_ == '\\0') {\n          fileList = (char **)bfd_openw(currentChar,*(undefined8 *)filePtrList[1]);\n        }\n        else {\n          fileList = (char **)bfd_openw(currentChar,p5);\n        }\n        if (fileList == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        result = copy_object(filePtrList,fileList,returnAddress);\n        if (result == '\\0') {\n          index = bfd_get_arch(filePtrList);\n          if (index == 0) goto LAB_00104d75;\n          result = bfd_close_all_done(fileList);\n          if (result == '\\0') {\n            bfd_nonfatal_message(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        result = bfd_close(fileList);\n        if (result == '\\0') {\n          bfd_nonfatal_message(currentChar,0,0,0);\n          statusCode = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (statResult == 0)) {\n          set_times(currentChar,(stat *)&stack0x00000050);\n        }\n        fileSize = bfd_openr(currentChar,p5);\n        tempdirList[2] = fileSize;\n        *p2 = fileSize;\n        p2 = (long *)(fileSize + 0xf0);\n        fileList = (char **)bfd_openr_next_archived_file(p4,filePtrList);\n        bfd_close(filePtrList);\n        filePtrList = fileList;\n      }\n      if ((statusCode != 0) || (filePtrList == (char **)0x0)) {\n        *p2 = 0;\n        buffer = (void *)xstrdup(*p1);\n        if (statusCode == 0) {\n          closeFunction = bfd_close;\n        }\n        else {\n          closeFunction = bfd_close_all_done;\n        }\n        result = (*closeFunction)(p1);\n        if (result == '\\0') {\n          statusCode = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*p4);\n        result = bfd_close(p4);\n        if (result == '\\0') {\n          statusCode = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      currentChar = *filePtrList;\n      param3 = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    nextChar = currentChar;\n    if ((*currentChar == '.') && (nextChar = currentChar + 1, currentChar[1] == '.')) {\n      nextChar = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        errorMsg = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMsg,param3);\nLAB_00104e93:\n        statusCode = 1;\nLAB_00114b4b:\n        while (tempdirList != (undefined8 *)0x0) {\n          if (tempdirList[2] == 0) {\n            rmdir((char *)tempdirList[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)tempdirList[1]);\n          }\n          free((void *)tempdirList[1]);\n          tempdirResult = (undefined8 *)*tempdirList;\n          free(tempdirList);\n          tempdirList = tempdirResult;\n        }\n        rmdir(p3);\n        free(p3);\n        return;\n      }\n    }\n    for (; (currentChar = nextChar, *nextChar != '\\0' && (*nextChar != '/')); nextChar = nextChar + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "list_supported_targets",
                "list_matching_formats",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "generate_stab_entry_0010e453",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "loopIndex",
                "cVar2": "result",
                "sVar3": "stringLength",
                "__s": "buffer",
                "uVar4": "returnValue",
                "lVar5": "totalLength",
                "ppcVar6": "currentParam",
                "lVar7": "offset"
            },
            "code": "\nundefined8 generateStabEntry_0010e453(long param1,char *param2,char **param3)\n\n{\n  long loopIndex;\n  char result;\n  size_t stringLength;\n  undefined2 *buffer;\n  undefined8 returnValue;\n  long totalLength;\n  char **currentParam;\n  long offset;\n  \n  if (param3 == (char **)0x0) {\n    if (param2 != (char *)0x0) {\n      stringLength = strlen(param2);\n      buffer = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)buffer,\"xe%s:\",param2);\nLAB_0010e578:\n      result = stab_push_string(param1,buffer,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    totalLength = 10;\n    currentParam = param3;\n    if (param2 != (char *)0x0) {\n      stringLength = strlen(param2);\n      totalLength = stringLength + 10;\n    }\n    for (; *currentParam != (char *)0x0; currentParam = currentParam + 1) {\n      stringLength = strlen(*currentParam);\n      totalLength = totalLength + 0x14 + stringLength;\n    }\n    buffer = (undefined2 *)xmalloc(totalLength);\n    if (param2 == (char *)0x0) {\n      *buffer = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(param1 + 0x68);\n      *(long *)(param1 + 0x68) = totalLength + 1;\n      sprintf((char *)buffer,\"%s:T%ld=e\",param2,totalLength);\n    }\n    offset = 0;\n    while( true ) {\n      loopIndex = *(long *)((long)param3 + offset);\n      stringLength = strlen((char *)buffer);\n      if (loopIndex == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)buffer + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)buffer + stringLength) = 0x3b;\n    if (param2 == (char *)0x0) goto LAB_0010e578;\n    result = stab_write_symbol_lto_priv_0(param1,0x80,0,0,buffer);\n    if ((result == '\\0') || (result = stab_push_defined_type(param1,totalLength,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(buffer);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_entry_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_value_0010ed2c",
                "param_1": "ptr",
                "param_2": "value",
                "param_3": "context",
                "cVar1": "result",
                "iVar2": "count",
                "extraout_RDX": "extra",
                "uVar3": "updatedValue",
                "in_R10": "additionalContext",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] updateValue_0010ed2c(long ptr,ulong value,undefined8 context)\n\n{\n  char result;\n  int count;\n  undefined8 extra;\n  ulong updatedValue;\n  undefined8 additionalContext;\n  undefined returnValue [16];\n  \n  if (*(ulong *)(ptr + 0x1f0) < value) {\n    *(ulong *)(ptr + 0x1f0) = value;\n  }\n  if (*(long *)(ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(ptr + 0x1f8) != 0) {\n      count = *(int *)(ptr + 0x1f8) + -1;\n      updatedValue = CONCAT71((int7)((ulong)context >> 8),1);\n      *(int *)(ptr + 0x1f8) = count;\n      if (count != 0) {\n        returnValue = stab_write_symbol_lto_priv_0\n                           (ptr,0xe0,0,value - *(long *)(ptr + 0x200),0,additionalContext);\n        return returnValue;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = stab_write_symbol_lto_priv_0(ptr,0xc0,0,*(long *)(ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(ptr + 0x208) = 0xffffffffffffffff;\n      context = extra;\n      goto LAB_0010ed78;\n    }\n  }\n  updatedValue = 0;\nLAB_0010edae:\n  returnValue._0_8_ = updatedValue & 0xffffffff;\n  returnValue._8_8_ = additionalContext;\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_value_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "maxInput1",
                "uVar2": "maxInput2",
                "iVar3": "comparisonResult",
                "extraout_var": "additionalOutput",
                "uVar4": "combinedResult",
                "auVar5": "returnVal"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *input1,ulong *input2,undefined8 param3,undefined8 param4)\n\n{\n  ulong maxInput1;\n  ulong maxInput2;\n  int comparisonResult;\n  undefined4 additionalOutput;\n  ulong combinedResult;\n  undefined returnVal [16];\n  \n  combinedResult = *input1;\n  if (*input2 <= *input1) {\n    combinedResult = *input2;\n  }\n  comparisonResult = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(additionalOutput,comparisonResult);\n  if (comparisonResult == 0) {\n    maxInput1 = input1[8];\n    if (maxInput1 < input2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      maxInput2 = input2[8];\n      if (maxInput2 < input1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (maxInput2 < maxInput1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (maxInput2 <= maxInput1) {\n              if (input1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  returnVal._8_8_ = param4;\n  returnVal._0_8_ = combinedResult;\n  return returnVal;\n}\n\n",
            "called": [
                "compare_gnu_build_notes.cold",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_reloc_sections_001163d0",
                "param_1": "param_section1",
                "param_2": "param_section2",
                "param_3": "section_size",
                "uVar1": "result",
                "uVar2": "section1_value",
                "uVar3": "section2_value",
                "bVar4": "check",
                "puVar5": "pointer",
                "iVar6": "length",
                "uVar7": "warning_message",
                "lVar8": "size",
                "__ptr": "reloc_ptr",
                "uVar9": "temp_value1",
                "uVar10": "temp_value2",
                "uVar11": "temp_value3",
                "uVar12": "temp_value4",
                "uVar13": "alignment_value",
                "uVar14": "attribute_value1",
                "uVar15": "attribute_value2",
                "uVar16": "loop_count",
                "puVar17": "reloc_info",
                "puVar18": "ptr1",
                "cVar19": "version_check",
                "puVar20": "ptr2",
                "iVar21": "count",
                "puVar22": "data_ptr",
                "puVar23": "reloc_ptr2",
                "uVar24": "attribute_value3",
                "__nmemb": "num_elements",
                "puVar25": "temp_ptr",
                "bVar26": "boolean_value",
                "local_88": "value1",
                "uStack_80": "value2",
                "local_70": "value3",
                "local_68": "improved_code_size",
                "local_60": "reloc_ptr3"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong merge_reloc_sections_001163d0(undefined8 *param_section1,undefined8 *param_section2,ulong section_size,undefined *param_4)\n\n{\n  ulong result;\n  undefined8 section1_value;\n  undefined8 section2_value;\n  bool check;\n  ulong *pointer;\n  int length;\n  undefined8 warning_message;\n  long size;\n  void *reloc_ptr;\n  ulong temp_value1;\n  ulong temp_value2;\n  ulong temp_value3;\n  ulong temp_value4;\n  undefined *reloc_ptr_00;\n  ulong alignment_value;\n  ulong attribute_value1;\n  ulong attribute_value2;\n  ulong loop_count;\n  ulong *reloc_info;\n  undefined *ptr1;\n  char version_check;\n  undefined *ptr2;\n  int count;\n  undefined *data_ptr;\n  ulong *reloc_ptr2;\n  ulong attribute_value3;\n  size_t num_elements;\n  ulong *temp_ptr;\n  byte boolean_value;\n  ulong value1;\n  ulong value2;\n  ulong value3;\n  ulong improved_code_size;\n  ulong *reloc_ptr3;\n  \n  boolean_value = 0;\n  size = bfd_get_reloc_upper_bound();\n  improved_code_size = section_size;\n  if (0 < size) {\n    reloc_ptr = (void *)xmalloc(size);\n    size = bfd_canonicalize_reloc(param_section1,param_section2,reloc_ptr,isympp);\n    free(reloc_ptr);\n    if (size != 0) {\n      if (is_strip == 0) {\n        section1_value = *param_section1;\n        section2_value = *param_section2;\n        warning_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(warning_message,section1_value,section2_value);\n      }\n      reloc_ptr3 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  reloc_ptr3 = (ulong *)xcalloc(section_size / 0xc,0x48,section_size % 0xc);\n  value1 = 0;\n  value3 = 0;\n  loop_count = section_size;\n  attribute_value2 = 0;\n  reloc_ptr2 = reloc_ptr3;\n  attribute_value1 = 0;\n  data_ptr = param_4;\n  while (0xb < loop_count) {\n    temp_value2 = (**(code **)(param_section1[1] + 0x40))(data_ptr);\n    *reloc_ptr2 = temp_value2;\n    temp_value2 = (**(code **)(param_section1[1] + 0x40))(data_ptr + 4);\n    reloc_ptr2[1] = temp_value2;\n    temp_value3 = (**(code **)(param_section1[1] + 0x40))(data_ptr + 8);\n    temp_value2 = *reloc_ptr2;\n    reloc_ptr2[2] = temp_value3;\n    temp_value4 = reloc_ptr2[1];\n    alignment_value = temp_value2 + 3 & 0xfffffffffffffffc;\n    reloc_ptr2[6] = alignment_value;\n    if (temp_value4 != (temp_value4 + 3 & 0xfffffffffffffffc)) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_value3 - 0x100) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = alignment_value + temp_value4 + 0xc;\n    if (loop_count < result) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_value2 < 2) {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    reloc_ptr2[3] = (ulong)(data_ptr + 0xc);\n    reloc_ptr2[4] = (ulong)(data_ptr + alignment_value + 0xc);\n    loop_count = loop_count + (-0xc - (alignment_value + temp_value4));\n    if (temp_value2 != 2) {\n      if (data_ptr[0xc] == '$') {\n        if ((data_ptr[0xd] == '\\x01') && (data_ptr[0xe] == '1')) {\n          loop_count = decompiled_function_00116490();\n          return loop_count;\n        }\n      }\n      else if ((((4 < temp_value2) && (data_ptr[0xc] == 'G')) && (data_ptr[0xd] == 'A')) &&\n              ((data_ptr[0xe] == '$' && (data_ptr[0xf] == '\\x01')))) {\n        if (data_ptr[0x10] == '2') {\n          loop_count = decompiled_function_00116490();\n          return loop_count;\n        }\n        if (data_ptr[0x10] == '3') {\n          loop_count = decompiled_function_00116490();\n          return loop_count;\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_value1 = attribute_value2;\n    attribute_value3 = attribute_value1;\n    if (temp_value4 == 0) {\n      if (temp_value3 == 0x100) {\n        reloc_ptr2[7] = value1;\nLAB_001164af:\n        temp_value4 = attribute_value1;\n        attribute_value3 = attribute_value1;\n      }\n      else {\n        reloc_ptr2[7] = value3;\nLAB_0011669e:\n        temp_value1 = attribute_value2;\n        temp_value4 = attribute_value2;\n      }\n    }\n    else {\n      if (temp_value4 != 0x10) {\n        if (temp_value4 < 0x11) {\n          if (temp_value4 == 4) {\n            temp_value3 = (**(code **)(param_section1[1] + 0x40))();\n            temp_value4 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_value4 == 8) {\n            loop_count = FUNC_001086af();\n            return loop_count;\n          }\n        }\n        size = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp_value3 = (**(code **)(param_section1[1] + 0x28))(data_ptr + alignment_value + 0xc);\n      temp_value4 = (**(code **)(param_section1[1] + 0x28))();\n      if (temp_value4 < temp_value3) {\n        temp_value3 = temp_value4;\n      }\nLAB_00116631:\n      if (reloc_ptr2[2] == 0x100) {\n        if (temp_value3 == 0) {\n          temp_value3 = value1;\n        }\n        temp_value2 = *reloc_ptr2;\n        reloc_ptr2[7] = temp_value3;\n        attribute_value3 = temp_value4;\n        value1 = temp_value3;\n        if (temp_value4 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_value3 == 0) {\n          temp_value3 = value3;\n        }\n        temp_value2 = *reloc_ptr2;\n        reloc_ptr2[7] = temp_value3;\n        temp_value1 = temp_value4;\n        value3 = temp_value3;\n        if (temp_value4 == 0) goto LAB_0011669e;\n      }\n    }\n    reloc_ptr2[8] = temp_value4;\n    if (*(char *)((reloc_ptr2[3] - 1) + temp_value2) != '\\0') {\n      size = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    reloc_ptr2 = reloc_ptr2 + 9;\n    attribute_value2 = temp_value1;\n    attribute_value1 = attribute_value3;\n    data_ptr = data_ptr + result;\n  }\n  if (loop_count == 0) {\n    section1_value = *param_section1;\n    section2_value = *param_section2;\n    warning_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(warning_message,section1_value,section2_value);\n    num_elements = ((long)reloc_ptr2 - (long)reloc_ptr3 >> 3) * -0x71c71c71c71c71c7;\n    qsort(reloc_ptr3,num_elements,0x48,compare_gnu_build_notes);\n    for (reloc_info = reloc_ptr3; reloc_info < reloc_ptr2; reloc_info = reloc_info + 9) {\n      loop_count = reloc_info[2];\n      if (loop_count != 0) {\n        attribute_value2 = reloc_info[7];\n        attribute_value1 = reloc_info[8];\n        temp_ptr = reloc_info;\n        count = 0;\n        if (attribute_value2 == attribute_value1) {\n          reloc_info[2] = 0;\n        }\n        else {\n          do {\n            do {\n              pointer = temp_ptr;\n              temp_ptr = pointer + -9;\n              if (temp_ptr < reloc_ptr3) goto LAB_001167f5;\n              temp_value2 = pointer[-7];\n            } while (temp_value2 == 0);\n            if ((*temp_ptr != *reloc_info) ||\n               (length = memcmp((void *)pointer[-6],(void *)reloc_info[3],*reloc_info), length != 0)) break;\n            temp_value4 = pointer[-2];\n            temp_value3 = pointer[-1];\n            if (attribute_value2 == temp_value4) {\n              if (attribute_value1 == temp_value3) {\n                reloc_info[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (attribute_value1 <= temp_value3) {\n                reloc_info[2] = 0;\n                break;\n              }\n              if (temp_value3 < attribute_value2) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp_value3) || (attribute_value2 <= (temp_value3 + 0xf & 0xfffffffffffffff0))\n                   ) goto reconstruct_gnu_build_notes_00116852;\n              }\nLAB_001167b8:\n              if ((loop_count == 0x101) == (temp_value2 == 0x101)) {\n                if (temp_value3 <= attribute_value1) {\n                  temp_value3 = attribute_value1;\n                }\n                if (temp_value4 < attribute_value2) {\n                  attribute_value2 = temp_value4;\n                }\n                pointer[-1] = temp_value3;\n                pointer[-2] = attribute_value2;\n                reloc_info[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_value4 <= attribute_value2) goto LAB_001167a6;\n              if (temp_value3 < attribute_value2) goto LAB_0010852c;\n              if (attribute_value1 < attribute_value2) {\n                if ((0xfffffffffffffff0 < attribute_value1) || (temp_value4 <= (attribute_value1 + 0xf & 0xfffffffffffffff0))\n                   ) goto reconstruct_gnu_build_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (attribute_value1 != temp_value3) goto LAB_001167b8;\n            }\nreconstruct_gnu_build_notes_00116852:\n            check = count < 0x11;\n            count = count + 1;\n          } while (check);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(reloc_ptr3,num_elements,0x48,sort_gnu_build_notes);\n    reloc_ptr_00 = (undefined *)xmalloc(section_size * 2);\n    value2 = 0;\n    value3 = 0;\n    data_ptr = reloc_ptr_00;\n    for (reloc_info = reloc_ptr3; reloc_info < reloc_ptr2; reloc_info = reloc_info + 9) {\n      if (reloc_info[2] != 0) {\n        ptr1 = data_ptr + 0xc;\n        if ((reloc_info[7] == value3) && (reloc_info[8] == value2)) {\n          (**(code **)(param_section1[1] + 0x50))(*reloc_info,data_ptr);\n          (**(code **)(param_section1[1] + 0x50))(0,data_ptr + 4);\n          (**(code **)(param_section1[1] + 0x50))(reloc_info[2],data_ptr + 8);\n          attribute_value2 = reloc_info[6];\n          loop_count = *reloc_info;\n          data_ptr = (undefined *)reloc_info[3];\n          ptr2 = ptr1;\n          for (attribute_value1 = loop_count; attribute_value1 != 0; attribute_value1 = attribute_value1 - 1) {\n            *ptr2 = *data_ptr;\n            data_ptr = data_ptr + (ulong)boolean_value * -2 + 1;\n            ptr2 = ptr2 + (ulong)boolean_value * -2 + 1;\n          }\n          if (loop_count < attribute_value2) {\n            for (size = attribute_value2 - loop_count; size != 0; size = size + -1) {\n              *ptr2 = 0;\n              ptr2 = ptr2 + (ulong)boolean_value * -2 + 1;\n            }\n          }\n          data_ptr = ptr1 + attribute_value2;\n        }\n        else {\n          (**(code **)(param_section1[1] + 0x50))();\n          if (*(int *)(param_section1[1] + 8) == 5) {\n            version_check = (*(char *)(param_section1[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            version_check = '\\b';\n          }\n          (**(code **)(param_section1[1] + 0x50))(version_check,data_ptr + 4);\n          (**(code **)(param_section1[1] + 0x50))(reloc_info[2],data_ptr + 8);\n          loop_count = *reloc_info;\n          data_ptr = (undefined *)reloc_info[3];\n          ptr2 = ptr1;\n          for (attribute_value2 = loop_count; attribute_value2 != 0; attribute_value2 = attribute_value2 - 1) {\n            *ptr2 = *data_ptr;\n            data_ptr = data_ptr + (ulong)boolean_value * -2 + 1;\n            ptr2 = ptr2 + (ulong)boolean_value * -2 + 1;\n          }\n          attribute_value2 = reloc_info[6];\n          if (loop_count < attribute_value2) {\n            for (size = attribute_value2 - loop_count; size != 0; size = size + -1) {\n              *ptr2 = 0;\n              ptr2 = ptr2 + (ulong)boolean_value * -2 + 1;\n            }\n          }\n          size = param_section1[1];\n          ptr1 = ptr1 + attribute_value2;\n          data_ptr = ptr1 + 8;\n          if ((*(int *)(size + 8) == 5) && (*(char *)(param_section1[0x22] + 4) == '\\x02')) {\n            (**(code **)(size + 0x38))(reloc_info[7],ptr1);\n            (**(code **)(param_section1[1] + 0x38))(reloc_info[8],data_ptr);\n            data_ptr = ptr1 + 0x10;\n          }\n          else {\n            (**(code **)(size + 0x50))(reloc_info[7],ptr1);\n            (**(code **)(param_section1[1] + 0x50))(reloc_info[8],ptr1 + 4);\n          }\n          value3 = reloc_info[7];\n          value2 = reloc_info[8];\n        }\n      }\n    }\n    attribute_value2 = (long)data_ptr - (long)reloc_ptr_00;\n    loop_count = attribute_value2;\n    data_ptr = reloc_ptr_00;\n    improved_code_size = section_size;\n    if (attribute_value2 < section_size) {\n      for (; improved_code_size = attribute_value2, loop_count != 0; loop_count = loop_count - 1) {\n        *param_4 = *data_ptr;\n        data_ptr = data_ptr + (ulong)boolean_value * -2 + 1;\n        param_4 = param_4 + (ulong)boolean_value * -2 + 1;\n      }\n    }\n    free(reloc_ptr_00);\n  }\n  else {\n    size = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (size != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param_section1,param_section2,size);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(reloc_ptr3);\n  return improved_code_size;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_reloc_sections_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "display_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "localizedText"
            },
            "code": "\nvoid displayUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *localizedText;\n  \n  programName = program_name;\n  localizedText = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,localizedText,programName);\n  localizedText = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  localizedText = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,localizedText);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    localizedText = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedText,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driver_name_ptr",
                "cVar1": "startswith_result",
                "iVar2": "strcmp_result",
                "sVar3": "length",
                "puVar4": "parsed_name_ptr",
                "lVar5": "driver_name",
                "__s": "name_ptr",
                "__s1": "arch_ptr",
                "puVar6": "parsed_name_ptr_iter",
                "uVar7": "return_value",
                "bVar8": "byte_value"
            },
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_name_ptr)\n\n{\n  char startswith_result;\n  int strcmp_result;\n  size_t length;\n  undefined2 *parsed_name_ptr;\n  long driver_name;\n  char *name_ptr;\n  char *arch_ptr;\n  undefined2 *parsed_name_ptr_iter;\n  undefined8 return_value;\n  byte byte_value;\n  \n  byte_value = 0;\n  driver_name = *driver_name_ptr;\n  name_ptr = (char *)(driver_name + 4);\n  startswith_result = startswith_lto_priv_0_lto_priv_0(name_ptr,&DAT_0011b73b);\n  if (startswith_result == '\\0') {\n    startswith_result = startswith_lto_priv_0_lto_priv_0(name_ptr,\"bsdrv-\");\n    if (startswith_result == '\\0') {\n      startswith_result = startswith_lto_priv_0_lto_priv_0(name_ptr,\"rtdrv-\");\n      if (startswith_result == '\\0') {\n        return 0xffffffff;\n      }\n      name_ptr = (char *)(driver_name + 6);\n      return_value = 0xc;\n    }\n    else {\n      name_ptr = (char *)(driver_name + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  length = strlen(name_ptr);\n  parsed_name_ptr = (undefined2 *)xmalloc(length + 8);\n  arch_ptr = name_ptr + 4;\n  parsed_name_ptr_iter = parsed_name_ptr;\n  for (driver_name = length + 1; driver_name != 0; driver_name = driver_name + -1) {\n    *(char *)parsed_name_ptr_iter = *name_ptr;\n    name_ptr = name_ptr + (ulong)byte_value * -2 + 1;\n    parsed_name_ptr_iter = (undefined2 *)((long)parsed_name_ptr_iter + (ulong)byte_value * -2 + 1);\n  }\n  *(undefined *)(parsed_name_ptr + 1) = 0x69;\n  *parsed_name_ptr = 0x6570;\n  strcmp_result = strcmp(arch_ptr,\"ia32\");\n  if (strcmp_result == 0) {\n    *(undefined *)((long)parsed_name_ptr + 7) = 0x36;\n    *(undefined2 *)((long)parsed_name_ptr + 5) = 0x3833;\n  }\n  else {\n    strcmp_result = strcmp(arch_ptr,\"x86_64\");\n    if (strcmp_result == 0) {\n      *(undefined *)((long)parsed_name_ptr + 7) = 0x2d;\n    }\n    else {\n      strcmp_result = strcmp(arch_ptr,\"aarch64\");\n      if (strcmp_result == 0) {\n        *(undefined8 *)((long)parsed_name_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_name_ptr = (long)parsed_name_ptr;\n  return return_value;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "translatedFormat",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *translatedFormat;\n  \n  translatedFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(standardError,translatedFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_and_return_status_001053d5",
                "unaff_R12": "ptr_offset",
                "unaff_R14": "ptr_bfd",
                "bfd_nonfatal": "handleNonFatal",
                "bfd_close_all_done": "closeAllDone"
            },
            "code": "\nundefined4 closeAndReturnStatus_001053d5(void)\n\n{\n  long ptr_offset;\n  undefined8 *ptr_bfd;\n  \n  handleNonFatal(*ptr_bfd);\n  *(undefined4 *)(ptr_offset + 8) = 1;\n  closeAllDone();\n  return *(undefined4 *)(ptr_offset + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "validate_and_set_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "statusFlags",
                "unaff_R14": "baseAddress"
            },
            "code": "\nvoid validateAndSetFlags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint statusFlags;\n  long baseAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((statusFlags & 0x10) == 0)) && ((statusFlags & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((statusFlags & 0x40) == 0)) && ((statusFlags & 0x60) != 0x60)) {\n      *(uint *)(baseAddress + 0x14) = flags | statusFlags;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "validate_and_set_flags_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "stab_class_baseclass.lto_priv.0",
                "display_info.isra.0",
                "stab_class_static_member.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_template",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "debug_type_samep"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "size",
                "puVar1": "destination",
                "lVar2": "remainingSize",
                "puVar3": "destIndex",
                "bVar4": "increment",
                "xmalloc": "allocateMemory"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int size)\n\n{\n  undefined *destination;\n  long remainingSize;\n  undefined *destIndex;\n  byte increment;\n  \n  increment = 0;\n  destination = (undefined *)allocateMemory((long)(size + 1));\n  destIndex = destination;\n  for (remainingSize = (long)size; remainingSize != 0; remainingSize = remainingSize + -1) {\n    *destIndex = *source;\n    source = source + (ulong)increment * -2 + 1;\n    destIndex = destIndex + (ulong)increment * -2 + 1;\n  }\n  destination[size] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_memory_0010da0b",
                "param_1": "memoryPointer",
                "param_2": "slotIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "translatedMessage",
                "plVar2": "allocatedMemory",
                "lVar3": "offset",
                "lVar4": "counter",
                "uVar5": "remainingSlots",
                "bVar6": "byteFlag",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16] allocateAndInitializeMemory_0010da0b(long **memoryPointer,ulong slotIndex,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 translatedMessage;\n  long *allocatedMemory;\n  long offset;\n  long counter;\n  ulong remainingSlots;\n  byte byteFlag;\n  undefined returnValue [16];\n  \n  byteFlag = 0;\n  remainingSlots = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*memoryPointer == (long *)0x0) {\n        allocatedMemory = (long *)xmalloc(0x88);\n        *memoryPointer = allocatedMemory;\n        for (offset = 0x22; offset != 0; offset = offset + -1) {\n          *(undefined4 *)allocatedMemory = 0;\n          allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteFlag * -8 + 4);\n        }\n      }\n      memoryPointer = (long **)*memoryPointer;\n    }\n    offset = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      offset = 0;\n    }\n    if (*memoryPointer == (long *)0x0) {\n      allocatedMemory = (long *)xmalloc(0x88);\n      *memoryPointer = allocatedMemory;\n      for (counter = 0x22; counter != 0; counter = counter + -1) {\n        *(undefined4 *)allocatedMemory = 0;\n        allocatedMemory = (long *)((long)allocatedMemory + (ulong)byteFlag * -8 + 4);\n      }\n    }\n    returnValue._8_8_ = param4;\n    returnValue._0_8_ = *memoryPointer + slotIndex + offset + 1;\n    return returnValue;\n  }\n  translatedMessage = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(translatedMessage,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_memory_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "create_data_structure_00112894",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "puVar1": "dataStructure",
                "puVar2": "tempPtr",
                "lVar3": "loopCounter",
                "bVar4": "zero",
                "xmalloc": "allocateMemory"
            },
            "code": "\nundefined8 *\ncreateDataStructure_00112894(undefined8 input1,undefined input2,undefined8 input3,undefined8 input4)\n\n{\n  undefined8 *dataStructure;\n  undefined8 *tempPtr;\n  long loopCounter;\n  byte zero;\n  \n  zero = 0;\n  dataStructure = (undefined8 *)allocateMemory(0x1b0);\n  tempPtr = dataStructure;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)tempPtr = 0;\n    tempPtr = (undefined8 *)((long)tempPtr + (ulong)zero * -8 + 4);\n  }\n  *dataStructure = input1;\n  *(undefined *)(dataStructure + 1) = input2;\n  dataStructure[2] = input3;\n  dataStructure[3] = input4;\n  *(undefined4 *)(dataStructure + 0x10) = 1;\n  tempPtr = (undefined8 *)allocateMemory(8);\n  dataStructure[0xd] = 0xffffffffffffffff;\n  dataStructure[0x11] = tempPtr;\n  *tempPtr = 0;\n  return dataStructure;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "create_data_structure_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "get_next_item_00109b2f",
                "param_1": "previous_item",
                "__ptr": "current_item",
                "puVar1": "next_item"
            },
            "code": "\nundefined8 * get_next_item_00109b2f(long previous_item)\n\n{\n  undefined8 *current_item;\n  undefined8 *next_item;\n  \n  current_item = *(undefined8 **)(previous_item + 0x60);\n  if (current_item != (undefined8 *)0x0) {\n    next_item = (undefined8 *)current_item[1];\n    *(undefined8 *)(previous_item + 0x60) = *current_item;\n    free(current_item);\n    return next_item;\n  }\n  return current_item;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_modify_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "get_next_item_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinition_00108d9a",
                "param_1": "error_message",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_pair",
                "pcVar2": "duplicate_symbol",
                "lVar3": "symbol_htab_entry",
                "uVar4": "message_translation",
                "plVar5": "htab_slot"
            },
            "code": "\nundefined8 check_symbol_redefinition_00108d9a(undefined8 error_message,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_pair;\n  char *duplicate_symbol;\n  long symbol_htab_entry;\n  undefined8 message_translation;\n  long *htab_slot;\n  \n  symbol_pair = (char **)xmalloc(0x10);\n  duplicate_symbol = strdup(symbol_name);\n  *symbol_pair = duplicate_symbol;\n  duplicate_symbol = strdup(target_symbol);\n  message_translation = redefine_specific_htab;\n  symbol_pair[1] = duplicate_symbol;\n  symbol_htab_entry = htab_find(message_translation,symbol_pair);\n  if (symbol_htab_entry != 0) {\n    message_translation = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(message_translation,error_message,symbol_name);\n  }\n  symbol_htab_entry = htab_find(redefine_specific_reverse_htab,target_symbol);\n  if (symbol_htab_entry != 0) {\n    message_translation = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(message_translation,error_message,target_symbol);\n  }\n  htab_slot = (long *)htab_find_slot(redefine_specific_htab,symbol_pair,1);\n  message_translation = redefine_specific_reverse_htab;\n  *htab_slot = (long)symbol_pair;\n  duplicate_symbol = symbol_pair[1];\n  symbol_pair = (char **)htab_find_slot(message_translation,duplicate_symbol,1);\n  *symbol_pair = duplicate_symbol;\n  return result;\n}\n\n",
            "called": [
                "htab_find",
                "strdup",
                "htab_find_slot",
                "dcgettext",
                "fatal",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "generate_symbol_0010e9a0",
                "param_1": "symbolTable",
                "param_2": "name",
                "param_3": "type",
                "param_4": "value",
                "__s": "typeValue",
                "__s_00": "newTypeValue",
                "lVar1": "nextSymbolIndex",
                "uVar2": "result",
                "sVar3": "nameLength",
                "sVar4": "typeValueLength",
                "__s_01": "symbolString",
                "pcVar5": "typeLetter",
                "uVar6": "typeFlag"
            },
            "code": "\nundefined4 generateSymbol_0010e9a0(long symbolTable,char *name,undefined4 type,undefined8 value)\n\n{\n  long nextSymbolIndex;\n  undefined4 result;\n  byte *typeValue;\n  byte *newTypeValue;\n  size_t nameLength;\n  size_t typeValueLength;\n  char *symbolString;\n  char *typeLetter;\n  undefined8 typeFlag;\n  \n  typeValue = (byte *)stab_pop_type();\n  switch(type) {\n  case 1:\n    typeLetter = \"G\";\n    typeFlag = 0x20;\n    break;\n  case 2:\n    typeLetter = \"S\";\n    typeFlag = 0x26;\n    break;\n  case 3:\n    typeLetter = \"V\";\n    typeFlag = 0x26;\n    break;\n  case 4:\n    typeLetter = \"\";\n    typeFlag = 0x80;\n    if (((&_sch_istable)[(ulong)*typeValue * 2] & 4) == 0) {\n      nextSymbolIndex = *(long *)(symbolTable + 0x68);\n      *(long *)(symbolTable + 0x68) = nextSymbolIndex + 1;\n      nameLength = strlen((char *)typeValue);\n      newTypeValue = (byte *)xmalloc(nameLength + 0x14);\n      sprintf((char *)newTypeValue,\"%ld=%s\",nextSymbolIndex,typeValue);\n      free(typeValue);\n      typeValue = newTypeValue;\n    }\n    break;\n  case 5:\n    typeLetter = \"r\";\n    typeFlag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  nameLength = strlen(name);\n  typeValueLength = strlen((char *)typeValue);\n  symbolString = (char *)xmalloc(nameLength + 3 + typeValueLength);\n  sprintf(symbolString,\"%s:%s%s\",name,typeLetter,typeValue);\n  free(typeValue);\n  result = stab_write_symbol_lto_priv_0(symbolTable,typeFlag,0,value,symbolString);\n  if ((char)result != '\\0') {\n    free(symbolString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_symbol_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_matching_error_0010827b",
                "uVar1": "sectionEntry",
                "uVar2": "errorMessage",
                "unaff_RBX": "sectionEntryPtr"
            },
            "code": "\nvoid handleSectionMatchingError_0010827b(void)\n\n{\n  undefined8 sectionEntry;\n  undefined8 errorMessage;\n  undefined8 *sectionEntryPtr;\n  \n  sectionEntry = *sectionEntryPtr;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  fatal(errorMessage,sectionEntry);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_matching_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "display_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getTranslatedMessage"
            },
            "code": "\nvoid displayErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getTranslatedMessage(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "display_error_message_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "bfd_nonfatal_message",
                "FUN_00107880",
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hashtable_00113f20",
                "htab_create_alloc": "createHashtable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashtable_00113f20(void)\n\n{\n  createHashtable(0x10,hashString,isEqualString,0,allocateMemory,deallocateMemory);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc",
                "free",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hashtable_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "copy_file",
                "display_info.isra.0",
                "get_file_size.cold",
                "smart_rename.cold",
                "main",
                "simple_copy.cold",
                "simple_copy",
                "set_times.cold",
                "FUN_00104ea2",
                "FUN_00107880",
                "section_add_load_file.cold",
                "add_specific_symbols",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_main_00116aa0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackVars"
            },
            "code": "\nvoid processEntry startMain_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackVars [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackVars);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_main_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_copy_data_00108179",
                "unaff_RBX": "rbx",
                "unaff_RBP": "rbp",
                "unaff_R12": "r12",
                "unaff_R14B": "r14b",
                "unaff_R15": "r15",
                "lVar1": "returnValue",
                "lVar2": "tempValue",
                "cVar3": "successFlag",
                "lVar4": "errorMessage",
                "lVar5": "dataValue"
            },
            "code": "\nvoid setAlignmentAndCopyData_00108179(void)\n\n{\n  long returnValue;\n  long tempValue;\n  char successFlag;\n  long errorMessage;\n  long dataValue;\n  long rbx;\n  long rbp;\n  long r12;\n  char r14b;\n  long r15;\n  \n  errorMessage = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(r15 + 0xb4) = *(undefined4 *)(rbx + 0xb4);\n  *(byte *)(r15 + 0x28) =\n       *(byte *)(r15 + 0x28) & 0xcf | *(byte *)(rbx + 0x28) & 0x30;\n  *(long *)(rbx + 0x60) = r15;\n  *(undefined8 *)(rbx + 0x58) = 0;\n  if ((*(byte *)(rbx + 0x27) & 2) != 0) {\n    returnValue = *(long *)(rbx + 0xd0);\n    dataValue = group_signature_isra_0(returnValue,*(undefined8 *)(rbx + 0xe0));\n    if ((dataValue != 0) &&\n       (tempValue = *(long *)(r12 + 8), *(uint *)(dataValue + 0x18) = *(uint *)(dataValue + 0x18) | 0x20,\n       *(int *)(tempValue + 8) == 5)) {\n      *(long *)(returnValue + 0xb0) = dataValue;\n      successFlag = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n      if (successFlag == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  successFlag = (**(code **)(*(long *)(rbp + 8) + 0x158))();\n  if (successFlag == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (r14b != '\\0') {\n    *(undefined4 *)(*(long *)(r15 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "group_signature.isra.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_and_copy_data_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "parse_file_type_00109022",
                "param_1": "fileIndex",
                "param_2": "fileNumbers",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "fileTypeIndex",
                "pcVar2": "errorMessage",
                "plVar3": "fileTypePtr",
                "lVar4": "loopCounter1",
                "uVar5": "loopCounter2",
                "pplVar6": "fileTypeArrayPtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] parseFileType_00109022(long fileIndex,uint *fileNumbers,undefined8 param3,undefined8 param4)\n\n{\n  uint fileTypeIndex;\n  char *errorMessage;\n  long *fileTypePtr;\n  long loopCounter1;\n  uint loopCounter2;\n  long **fileTypeArrayPtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  loopCounter2 = *fileNumbers;\n  fileTypeIndex = fileNumbers[1];\n  if (((int)loopCounter2 < 0) || (*(uint *)(fileIndex + 0x80) <= loopCounter2)) {\n    errorMessage = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)loopCounter2);\n  }\n  else {\n    if (-1 < (int)fileTypeIndex) {\n      fileTypeArrayPtr = (long **)(*(long *)(fileIndex + 0x88) + (long)(int)loopCounter2 * 8);\n      for (loopCounter2 = fileTypeIndex; 0xf < (int)loopCounter2; loopCounter2 = loopCounter2 - 0x10) {\n        if (*fileTypeArrayPtr == (long *)0x0) {\n          fileTypePtr = (long *)xmalloc(0x88);\n          *fileTypeArrayPtr = fileTypePtr;\n          for (loopCounter1 = 0x22; loopCounter1 != 0; loopCounter1 = loopCounter1 + -1) {\n            *(undefined4 *)fileTypePtr = 0;\n            fileTypePtr = (long *)((long)fileTypePtr + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileTypeArrayPtr = (long **)*fileTypeArrayPtr;\n      }\n      if (*fileTypeArrayPtr == (long *)0x0) {\n        fileTypePtr = (long *)xmalloc(0x88);\n        *fileTypeArrayPtr = fileTypePtr;\n        for (loopCounter1 = 0x22; loopCounter1 != 0; loopCounter1 = loopCounter1 + -1) {\n          *(undefined4 *)fileTypePtr = 0;\n          fileTypePtr = (long *)((long)fileTypePtr + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileTypePtr = *fileTypeArrayPtr + (long)(int)((fileTypeIndex >> 4) * -0x10 + fileTypeIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMessage = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMessage,(ulong)fileTypeIndex);\n  }\n  fileTypePtr = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = fileTypePtr;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_file_type_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_debug_info_0010c05d",
                "param_1": "filepath",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "fileIndex",
                "param_5": "message",
                "param_6": "returnValue",
                "auVar1": "result",
                "uVar2": "status",
                "piVar3": "integerData",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "currentNamespace",
                "piVar7": "pointer"
            },
            "code": "\n\n\nundefined  [16]\nrecordVariableDebugInfo_0010c05d(long filepath,long variable,ulong namespace,int fileIndex,undefined8 message,\n            undefined8 returnValue)\n\n{\n  undefined result [16];\n  undefined8 status;\n  int *integerData;\n  char flag;\n  long counter;\n  long currentNamespace;\n  int *pointer;\n  byte bVar8;\n  undefined auVar9 [16];\n  \n  bVar8 = 0;\n  if (variable == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = namespace;\n    return result << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(filepath + 8) == 0) || (currentNamespace = *(long *)(filepath + 0x10), currentNamespace == 0)) {\n      status = dcgettext(0,\"debug_record_variable: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",status);\n    }\n    else {\n      if (fileIndex - 1U < 2) {\n        currentNamespace = currentNamespace + 0x10;\n        flag = (fileIndex == 1) + '\\x01';\n      }\n      else if (*(long *)(filepath + 0x20) == 0) {\n        currentNamespace = currentNamespace + 0x10;\n        flag = '\\0';\n      }\n      else {\n        currentNamespace = *(long *)(filepath + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      currentNamespace = debug_add_to_namespace_constprop_0(currentNamespace,variable,2,flag);\n      if (currentNamespace != 0) {\n        integerData = (int *)xmalloc(0x18);\n        pointer = integerData + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)bVar8 * -2 + 1;\n        }\n        *integerData = fileIndex;\n        status = 1;\n        *(ulong *)(integerData + 2) = namespace;\n        *(undefined8 *)(integerData + 4) = message;\n        *(int **)(currentNamespace + 0x20) = integerData;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  status = 0;\nLAB_0010c12e:\n  auVar9._8_8_ = returnValue;\n  auVar9._0_8_ = status;\n  return auVar9;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_emit_pending_vars",
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_variable_debug_info_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "push_defined_type_or_string_00109d97",
                "param_1": "functionParam",
                "lVar1": "counter",
                "local_40": "formattedString"
            },
            "code": "\nvoid pushDefinedTypeOrString_00109d97(long functionParam)\n\n{\n  long counter;\n  char formattedString [40];\n  \n  if (*(long *)(functionParam + 0x70) != 0) {\n    stab_push_defined_type(functionParam,*(long *)(functionParam + 0x70),0);\n    return;\n  }\n  counter = *(long *)(functionParam + 0x68);\n  *(long *)(functionParam + 0x68) = counter + 1;\n  sprintf(formattedString,\"%ld=%ld\",counter,counter);\n  stab_push_string(functionParam,formattedString,counter,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_or_string_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "create_symbol_htab",
                "main",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = decompiled_function_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = decompiled_function_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = decompiled_function_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto reconstruct_gnu_build_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto reconstruct_gnu_build_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nreconstruct_gnu_build_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "FUN_00116490",
                "dcgettext",
                "qsort",
                "merge_gnu_build_notes.cold",
                "bfd_set_error",
                "compare_gnu_build_notes"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_class_0010add5",
                "stab_class_method_var": "setClassMethodVariable"
            },
            "code": "\nvoid initializeClass_0010add5(void)\n\n{\n  setClassMethodVariable();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_type_constprop_00113e17",
                "debug_make_type_constprop_0": "debugSetTypeToConstprop"
            },
            "code": "\nvoid initializeTypeConstprop_00113e17(void)\n\n{\n  debugSetTypeToConstprop(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_find_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_type_constprop_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_new_object_00109b52",
                "param_1": "objectPointer",
                "param_2": "str",
                "param_3": "additionalParam",
                "param_4": "flag",
                "param_5": "status",
                "uVar1": "oldObject",
                "puVar2": "newObject",
                "uVar3": "duplicatedStr"
            },
            "code": "\nundefined initializeNewObject_00109b52(long objectPointer,undefined8 str,undefined8 additionalParam,undefined flag,\n                      undefined4 status)\n\n{\n  undefined8 oldObject;\n  undefined8 *newObject;\n  undefined8 duplicatedStr;\n  \n  newObject = (undefined8 *)xmalloc(0x40);\n  duplicatedStr = xstrdup(str);\n  newObject[2] = additionalParam;\n  *(undefined (*) [16])(newObject + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newObject + 6) = ZEXT816(0);\n  oldObject = *(undefined8 *)(objectPointer + 0x60);\n  *(undefined *)((long)newObject + 0x1c) = flag;\n  *(undefined4 *)(newObject + 3) = status;\n  *(undefined8 **)(objectPointer + 0x60) = newObject;\n  *newObject = oldObject;\n  newObject[1] = duplicatedStr;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_modify_type",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_new_object_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "extract_numeric_value_00109a32",
                "param_1": "input_strings",
                "param_2": "numeric_overflow",
                "param_3": "end_of_string",
                "param_4": "unused_param_4",
                "param_5": "unused_param_5",
                "__nptr": "current_string",
                "piVar1": "errno_ptr",
                "uVar2": "numeric_value",
                "uVar3": "error_message",
                "auVar4": "result"
            },
            "code": "\nundefined  [16]\nextract_numeric_value_00109a32(char **input_strings,undefined *numeric_overflow,char *end_of_string,undefined8 unused_param_4,undefined8 unused_param_5)\n\n{\n  char *current_string;\n  int *errno_ptr;\n  ulong numeric_value;\n  undefined8 error_message;\n  undefined result [16];\n  \n  if (numeric_overflow != (undefined *)0x0) {\n    *numeric_overflow = 0;\n  }\n  current_string = *input_strings;\n  if ((current_string < end_of_string) && (*current_string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    numeric_value = strtoul(current_string,input_strings,0);\n    if ((numeric_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (numeric_overflow == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(current_string,error_message);\n    }\n    else {\n      *numeric_overflow = 1;\n    }\n  }\n  numeric_value = 0;\nLAB_00109aa9:\n  result._8_8_ = unused_param_5;\n  result._0_8_ = numeric_value;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "strtoul",
                "dcgettext",
                "warn_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "extract_numeric_value_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_debug_tag_type_0010c6be",
                "param_1": "filePointer",
                "param_2": "debugTag",
                "param_3": "tagPointer",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTagPointer",
                "pauVar4": "newTagArray",
                "lVar5": "offset",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * findDebugTagType_0010c6be(long filePointer,char *debugTag,int *tagPointer)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTagPointer;\n  undefined (*newTagArray) [16];\n  long offset;\n  char *errorMessage;\n  \n  if ((debugTag != (char *)0x0) && (tagPointer != (int *)0x0)) {\n    if (*(long *)(filePointer + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagPointer != 0x17) {\n        newTagPointer = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagPointer == (int *)0x0) {\n          return (int *)0x0;\n        }\n        newTagArray = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(filePointer + 0x10);\n        *newTagArray = ZEXT816(0);\n        *(int **)(*newTagArray + 8) = tagPointer;\n        *(undefined (**) [16])(newTagPointer + 4) = newTagArray;\n        offset = debug_add_to_namespace_constprop_0(offset + 0x10,debugTag,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = newTagPointer;\n        *(long *)*newTagArray = offset;\n        return newTagPointer;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagPointer + 4) + 8),debugTag);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagPointer;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "dcgettext",
                "strcmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "finish_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "find_debug_tag_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_args_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg_list",
                "param_4": "has_error",
                "__ptr": "result_buffer",
                "__format": "error_message",
                "lVar1": "demangle_result",
                "uVar2": "buffer_index",
                "uVar3": "buffer_size",
                "uVar4": "new_buffer_index",
                "local_39": "demangle_buffer"
            },
            "code": "\n\n\nvoid * demangle_args_0010b6ea(undefined8 arg1,undefined8 arg2,int *arg_list,undefined *has_error)\n\n{\n  void *result_buffer;\n  char *error_message;\n  long demangle_result;\n  ulong buffer_index;\n  ulong buffer_size;\n  uint new_buffer_index;\n  char demangle_buffer [9];\n  \n  buffer_size = 10;\n  buffer_index = 0;\n  result_buffer = (void *)xmalloc(0x50);\n  *has_error = 0;\n  for (; arg_list != (int *)0x0; arg_list = *(int **)(arg_list + 6)) {\n    if (*arg_list != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_buffer);\n      return (void *)0x0;\n    }\n    if (*(long *)(arg_list + 4) == 0) break;\n    demangle_result = stab_demangle_v3_arg(arg1,arg2,*(long *)(arg_list + 4),0,demangle_buffer);\n    if (demangle_result == 0) {\n      if (demangle_buffer[0] == '\\0') {\n        free(result_buffer);\n        return (void *)0x0;\n      }\n      *has_error = 1;\n    }\n    else {\n      new_buffer_index = (int)buffer_index + 1;\n      if ((uint)buffer_size <= new_buffer_index) {\n        buffer_size = (ulong)((uint)buffer_size + 10);\n        result_buffer = (void *)xrealloc(result_buffer,buffer_size << 3);\n      }\n      *(long *)((long)result_buffer + buffer_index * 8) = demangle_result;\n      buffer_index = (ulong)new_buffer_index;\n    }\n  }\n  *(undefined8 *)((long)result_buffer + buffer_index * 8) = 0;\n  return result_buffer;\n}\n\n",
            "called": [
                "dcgettext",
                "stab_demangle_v3_arg",
                "xmalloc",
                "free",
                "xrealloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_args_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "transform_data_0011a2e0",
                "param_1": "dataParam1",
                "param_2": "dataParam2",
                "uVar1": "variable1",
                "uVar2": "variable2",
                "lVar3": "result",
                "lVar4": "section",
                "bfd_get_section_by_name": "getSectionByName",
                "dcgettext": "retrieveSectionError",
                "fatal": "handleFatalError"
            },
            "code": "\nlong transformData_0011a2e0(long dataParam1,long dataParam2)\n\n{\n  undefined8 variable1;\n  undefined8 variable2;\n  long result;\n  long section;\n  \n  result = (**(code **)(*(long *)(dataParam2 + 8) + 0x208))(dataParam2);\n  section = *(long *)(dataParam1 + 0x20);\n  *(undefined8 *)(result + 8) = *(undefined8 *)(dataParam1 + 8);\n  *(undefined8 *)(result + 0x10) = *(undefined8 *)(dataParam1 + 0x10);\n  *(undefined4 *)(result + 0x18) = *(undefined4 *)(dataParam1 + 0x18);\n  if (section == 0) {\n    section = 0x128598;\n  }\n  else {\n    section = getSectionByName(dataParam2);\n    if (section == 0) {\n      variable1 = *(undefined8 *)(dataParam1 + 0x20);\n      variable2 = retrieveSectionError(0,\"Section %s not found\",5);\n                    \n      handleFatalError(variable2,variable1);\n    }\n  }\n  *(long *)(result + 0x20) = section;\n  return result;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "transform_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_symbol_0010e8a9",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "string",
                "uVar1": "returnValue",
                "sVar2": "stringLength",
                "__s": "formattedString"
            },
            "code": "\nundefined4 writeSymbol_0010e8a9(undefined8 input1,undefined8 input2,char *string)\n\n{\n  undefined4 returnValue;\n  size_t stringLength;\n  char *formattedString;\n  \n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedString,\"%s:c=f%g\",input1,string);\n  returnValue = stab_write_symbol_lto_priv_0(input2,0x80,0,0,formattedString);\n  if ((char)returnValue != '\\0') {\n    free(formattedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "section",
                "sVar4": "sectionLength",
                "iVar1": "comparisonResult",
                "pcVar3": "delimiterPosition",
                "iVar5": "stringLength",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "flagToCompare",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *delimiterPosition;\n  char *currentFlag;\n  char *section;\n  size_t sectionLength;\n  int stringLength;\n  uint sectionFlags;\n  char *flagToCompare;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    section = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (section == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              delimiterPosition = strchr(section,0x2c);\n              if (delimiterPosition == (char *)0x0) {\n                sectionLength = strlen(section);\n                stringLength = (int)sectionLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = delimiterPosition + 1;\n                stringLength = (int)delimiterPosition - (int)section;\n              }\n              sectionLength = (size_t)stringLength;\n              comparisonResult = strncasecmp(flagToCompare,section,sectionLength);\n              if (comparisonResult != 0) break;\n              sectionFlags = sectionFlags | 1;\n              section = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",section,sectionLength);\n            if (comparisonResult != 0) break;\n            sectionFlags = sectionFlags | 2;\n            section = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",section,sectionLength);\n          if (comparisonResult != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          section = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",section,sectionLength);\n        if (comparisonResult != 0) break;\n        sectionFlags = sectionFlags | 8;\n        section = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",section,sectionLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",section,sectionLength);\n      if (comparisonResult == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        section = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",section,sectionLength);\n        if (comparisonResult == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          section = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",section,sectionLength);\n          if (comparisonResult == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            section = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",section,sectionLength);\n            if (comparisonResult == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              section = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",section,sectionLength);\n              if (comparisonResult == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                section = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",section,sectionLength);\n                if (comparisonResult == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  section = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",section,sectionLength);\n                  if (comparisonResult == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    section = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",section,sectionLength);\n                    if (comparisonResult != 0) {\n                      delimiterPosition = (char *)xmalloc((long)(stringLength + 1));\n                      strncpy(delimiterPosition,section,sectionLength);\n                      delimiterPosition[sectionLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,delimiterPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    section = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strncasecmp",
                "strchr",
                "non_fatal",
                "strlen",
                "dcgettext",
                "parse_flags.cold",
                "fatal",
                "strncpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_in_binary_0010914e",
                "param_1": "binaryPtr",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentCompilationUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "typeNode",
                "lVar5": "nodePtr",
                "puVar6": "typeListPtr",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedTypeInBinary_0010914e(long binaryPtr,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentCompilationUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *typeNode;\n  long nodePtr;\n  undefined8 *typeListPtr;\n  undefined returnValue [16];\n  \n  currentCompilationUnit = *(long *)(binaryPtr + 8);\n  if (currentCompilationUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (nodePtr = *(long *)(binaryPtr + 0x20); nodePtr != 0; nodePtr = *(long *)(nodePtr + 8)) {\n      if (*(undefined8 **)(nodePtr + 0x28) != (undefined8 *)0x0) {\n        for (typeNode = (undefined8 *)**(undefined8 **)(nodePtr + 0x28); typeNode != (undefined8 *)0x0;\n            typeNode = (undefined8 *)*typeNode) {\n          if (*(int *)((long)typeNode + 0x14) == 0) {\n            if (*(char *)typeNode[1] == *typeName) {\n              comparisonResult = strcmp((char *)typeNode[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (typeListPtr = *(undefined8 **)(currentCompilationUnit + 8); typeListPtr != (undefined8 *)0x0;\n        typeListPtr = (undefined8 *)*typeListPtr) {\n      if ((undefined8 *)typeListPtr[2] != (undefined8 *)0x0) {\n        for (typeNode = *(undefined8 **)(undefined8 *)typeListPtr[2]; typeNode != (undefined8 *)0x0;\n            typeNode = (undefined8 *)*typeNode) {\n          if (*(int *)((long)typeNode + 0x14) == 0) {\n            if (*(char *)typeNode[1] == *typeName) {\n              comparisonResult = strcmp((char *)typeNode[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\nLAB_00109216:\n  errorMessage = typeNode[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "strcmp",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "find_named_type_in_binary_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "process_operation_0010829e",
                "unaff_EBP": "operation_type",
                "uVar1": "result"
            },
            "code": "\nundefined8 process_operation_0010829e(void)\n\n{\n  undefined8 result;\n  int operation_type;\n  \n  if (operation_type == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((operation_type != 4) && (operation_type == 6)) {\n    result = calculate_inverse_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "process_operation_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_machs_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultValue",
                "iVar9": "endIndex",
                "uStack000000000000000c": "indentationLevel",
                "unaff_R15D": "paramValue",
                "uVar10": "stringLength",
                "uVar11": "archIndex",
                "param_7": "startIndex",
                "param_11": "archMach",
                "param_13": "dataPointer",
                "iVar2": "archComparison",
                "lVar8": "innerIndex",
                "iVar7": "outerIndex",
                "pcVar5": "archMachString",
                "sVar4": "archStringLength"
            },
            "code": "\n\n\nvoid printReverseArchMachs_00104943(void)\n\n{\n  int defaultValue;\n  int archComparison;\n  char *inputString;\n  long convertedValue;\n  size_t archStringLength;\n  char *archMachString;\n  undefined8 uVar6;\n  int outerIndex;\n  long innerIndex;\n  int endIndex;\n  uint paramValue;\n  ulong stringLength;\n  uint archIndex;\n  int startIndex;\n  uint indentationLevel;\n  undefined8 archMach;\n  long dataPointer;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultValue = (int)convertedValue;\n  endIndex = startIndex;\n  indentationLevel = paramValue;\n  if (defaultValue == 0) {\n    defaultValue = 0x50;\n  }\n  do {\n    startIndex = endIndex;\n    if (archMach._4_4_ <= startIndex) {\n      return;\n    }\n    innerIndex = (long)startIndex;\n    outerIndex = (defaultValue - indentationLevel) + -1;\n    convertedValue = innerIndex;\n    do {\n      endIndex = (int)convertedValue;\n      if (archMach._4_4_ <= endIndex) break;\n      archStringLength = strlen(*(char **)(dataPointer + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      outerIndex = (outerIndex - (int)archStringLength) + -1;\n    } while (-1 < outerIndex);\n    printf(\"\\n%*s\",(ulong)(indentationLevel + 1),&DAT_0011b4a1);\n    for (convertedValue = innerIndex * 0x60; ((ulong)(uint)(endIndex - startIndex) + innerIndex) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(dataPointer + convertedValue));\n    }\n    outerIndex = 2;\n    putc(10,_stdout);\n    do {\n      archMachString = (char *)bfd_printable_arch_mach(outerIndex,0);\n      archComparison = strcmp(archMachString,\"UNKNOWN!\");\n      if (archComparison != 0) {\n        uVar6 = bfd_printable_arch_mach(outerIndex,0);\n        printf(\"%*s \",(ulong)indentationLevel,uVar6);\n        archIndex = outerIndex - 2;\n        convertedValue = innerIndex * 0x60;\n        archComparison = startIndex;\n        while (endIndex != archComparison) {\n          archMachString = *(char **)(dataPointer + convertedValue);\n          if (*(char *)((long)(char **)(dataPointer + convertedValue) + (ulong)archIndex + 8) == '\\0') {\n            archStringLength = strlen(archMachString);\n            for (stringLength = archStringLength & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(archMachString,_stdout);\n          }\n          archComparison = archComparison + 1;\n          if (endIndex != archComparison) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      outerIndex = outerIndex + 1;\n    } while (outerIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "fputs",
                "strcmp",
                "printf",
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_machs_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_and_store_debug_type_00113e23",
                "param_1": "source_param",
                "param_2": "destination_param",
                "lVar1": "debug_type_ptr",
                "puVar2": "debug_value_ptr"
            },
            "code": "\nlong create_and_store_debug_type_00113e23(undefined8 source_param,undefined8 destination_param)\n\n{\n  long debug_type_ptr;\n  undefined8 *debug_value_ptr;\n  \n  debug_type_ptr = debug_make_type_constprop_0(1,0);\n  if (debug_type_ptr != 0) {\n    debug_value_ptr = (undefined8 *)xmalloc(0x10);\n    *debug_value_ptr = source_param;\n    debug_value_ptr[1] = destination_param;\n    *(undefined8 **)(debug_type_ptr + 0x10) = debug_value_ptr;\n  }\n  return debug_type_ptr;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_tagged_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "create_and_store_debug_type_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "stab",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 stab)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stab);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab_type_number",
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "extract_and_convert_number_00108ea1",
                "param_1": "input_data",
                "param_2": "output_number",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong extract_and_convert_number_00108ea1(byte **input_data,int *output_number)\n\n{\n  int iVar1;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_data;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    iVar1 = (char)*current_byte + -0x30;\n    *output_number = iVar1;\n    *input_data = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        iVar1 = iVar1 * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_data = next_byte;\n        *output_number = iVar1;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_and_convert_number_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_size_and_alignment_00108072",
                "unaff_RBX": "section",
                "unaff_RBP": "basePointer",
                "unaff_R12": "register12",
                "lVar5": "errorString",
                "lVar6": "sectionList1",
                "lVar7": "sectionAddress",
                "lVar8": "changeSectionAddress",
                "unaff_R14B": "flag",
                "unaff_R15": "register15",
                "uVar2": "sectionValue",
                "uVar4": "sectionAlignment",
                "bVar1": "byteValue",
                "cVar3": "charValue"
            },
            "code": "\nvoid setSectionSizeAndAlignment_00108072(void)\n\n{\n  byte byteValue;\n  undefined8 sectionValue;\n  char charValue;\n  uint sectionAlignment;\n  long errorString;\n  long sectionList1;\n  long sectionAddress;\n  undefined8 *section;\n  long basePointer;\n  long register12;\n  long changeSectionAddress;\n  char flag;\n  long register15;\n  \n  errorString = dcgettext(0,\"failed to set size\",5);\n  changeSectionAddress = section[6];\n  sectionList1 = find_section_list(*section,0,0x18);\n  if (sectionList1 == 0) {\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    sectionValue = *section;\n    changeSectionAddress = changeSectionAddress + change_section_address;\n    *(long *)(register15 + 0x30) = changeSectionAddress;\n    *(long *)(register15 + 0x38) = changeSectionAddress;\n    changeSectionAddress = section[7];\n    sectionList1 = find_section_list(sectionValue,0,0x60);\n    if (sectionList1 == 0) goto LAB_00115695;\nLAB_00115860:\n    sectionAddress = *(long *)(sectionList1 + 0x20);\n    if ((*(byte *)(sectionList1 + 0x14) & 0x40) != 0) {\n      sectionAddress = sectionAddress + changeSectionAddress;\n    }\n    *(long *)(register15 + 0x38) = sectionAddress;\n    changeSectionAddress = find_section_list(*section,0,0x200);\n    if (changeSectionAddress != 0) goto LAB_00115889;\nLAB_001156b8:\n    sectionAlignment = *(uint *)((long)section + 0x7c);\n    if (sectionAlignment < 0x3f) goto LAB_001156c4;\n    errorString = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)section + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(section + 5) & 0x30;\n    section[0xc] = register15;\n    section[0xb] = 0;\n    byteValue = *(byte *)((long)section + 0x27);\n  }\n  else {\n    sectionAddress = *(long *)(sectionList1 + 0x18);\n    if ((*(byte *)(sectionList1 + 0x14) & 8) == 0) {\n      sectionAddress = sectionAddress + changeSectionAddress;\n    }\n    *(byte *)(register15 + 0x28) = *(byte *)(register15 + 0x28) | 1;\n    sectionValue = *section;\n    *(long *)(register15 + 0x30) = sectionAddress;\n    *(long *)(register15 + 0x38) = sectionAddress;\n    changeSectionAddress = section[7];\n    sectionList1 = find_section_list(sectionValue,0,0x60);\n    if (sectionList1 != 0) goto LAB_00115860;\nLAB_00115695:\n    sectionValue = *section;\n    *(long *)(register15 + 0x38) = changeSectionAddress + change_section_address;\n    changeSectionAddress = find_section_list(sectionValue,0,0x200);\n    if (changeSectionAddress == 0) goto LAB_001156b8;\nLAB_00115889:\n    sectionAlignment = *(uint *)(changeSectionAddress + 0x2c);\n    if (0x3e < sectionAlignment) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(register15 + 0x7c) = sectionAlignment;\n    *(undefined4 *)(register15 + 0xb4) = *(undefined4 *)((long)section + 0xb4);\n    *(byte *)(register15 + 0x28) =\n         *(byte *)(register15 + 0x28) & 0xcf | *(byte *)(section + 5) & 0x30;\n    section[0xc] = register15;\n    section[0xb] = 0;\n    byteValue = *(byte *)((long)section + 0x27);\n  }\n  if ((byteValue & 2) != 0) {\n    changeSectionAddress = section[0x1a];\n    sectionList1 = group_signature_isra_0(changeSectionAddress,section[0x1c]);\n    if ((sectionList1 != 0) &&\n       (sectionAddress = *(long *)(register12 + 8), *(uint *)(sectionList1 + 0x18) = *(uint *)(sectionList1 + 0x18) | 0x20,\n       *(int *)(sectionAddress + 8) == 5)) {\n      *(long *)(changeSectionAddress + 0xb0) = sectionList1;\n      charValue = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (charValue == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charValue = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (charValue == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (flag != '\\0') {\n    *(undefined4 *)(*(long *)(register15 + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "FUN_00108179",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_size_and_alignment_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_and_store_string_0010a2b9",
                "param_1": "ptr_1",
                "param_2": "char_2",
                "param_3": "ptr_3",
                "param_4": "ptr_4",
                "cVar1": "char_var",
                "__s": "string_s",
                "sVar2": "string_length",
                "__s_00": "new_string",
                "lVar3": "long_var",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] process_and_store_string_0010a2b9(long ptr_1,char char_2,undefined8 ptr_3,undefined8 ptr_4)\n\n{\n  char char_var;\n  char *string_s;\n  size_t string_length;\n  char *new_string;\n  long long_var;\n  undefined result [16];\n  \n  char_var = *(char *)(*(long *)(ptr_1 + 0x60) + 0x1c);\n  string_s = (char *)stab_pop_type();\n  string_length = strlen(string_s);\n  new_string = (char *)xmalloc(string_length + 0x1e);\n  if (char_2 == '\\0') {\n    *new_string = '\\0';\n    long_var = 0;\n    char_2 = char_var;\n  }\n  else {\n    long_var = *(long *)(ptr_1 + 0x68);\n    *(long *)(ptr_1 + 0x68) = long_var + 1;\n    sprintf(new_string,\"%ld=@S;\",long_var);\n  }\n  string_length = strlen(new_string);\n  sprintf(new_string + string_length,\"S%s\",string_s);\n  free(string_s);\n  result._0_4_ = stab_push_string(ptr_1,new_string,long_var,char_2,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_string);\n  }\n  result._8_8_ = ptr_4;\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_and_store_string_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "dataStruct",
                "param_2": "inputValue",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "iVar1": "count",
                "cVar2": "result",
                "param_1[0x3c]": "dataStruct.offset1",
                "param_1[1]": "dataStruct.pointer1",
                "param_1[0x3d]": "dataStruct.offset2",
                "param_1[0x40]": "dataStruct.param",
                "param_1[0x41]": "dataStruct.offsetDifference"
            },
            "code": "\nundefined processData_0010ec73(long *dataStruct,long inputValue,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  int count;\n  char result;\n  \n  if (dataStruct.offset1 != -1) {\n    (**(code **)(*(long *)(*dataStruct + 8) + 0x50))(inputValue,dataStruct.pointer1 + 8 + dataStruct.offset1);\n    dataStruct.offset1 = -1;\n  }\n  if (dataStruct.offset2 != -1) {\n    (**(code **)(*(long *)(*dataStruct + 8) + 0x50))(inputValue,dataStruct.pointer1 + 8 + dataStruct.offset2);\n    dataStruct.offset2 = -1;\n  }\n  count = *(int *)(dataStruct + 0x3f);\n  *(int *)(dataStruct + 0x3f) = count + 1;\n  if (count == 0) {\n    dataStruct.param = inputValue;\n  }\n  else {\n    if ((dataStruct.offsetDifference != -1) &&\n       (result = stab_write_symbol_lto_priv_0(dataStruct,0xc0,0,dataStruct.offsetDifference,0,param6,param4),\n       result == '\\0')) {\n      return 0;\n    }\n    dataStruct.offsetDifference = inputValue - dataStruct.param;\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endianness)\n\n{\n  if (endianness == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endianness == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "file_copy_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "fileSize",
                "param_5": "preserveTimes",
                "param_6": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "copySize",
                "auVar6": "result",
                "unlink": "deleteFile",
                "set_times": "modifyFileTimes",
                "simple_copy": "copyFunction",
                "__errno_location": "getErrorCodeLocation",
                "strerror": "getErrorMessage",
                "dcgettext": "getTranslatedErrorMessage",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nundefined  [16]\nfileCopy_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 fileSize,char preserveTimes,\n            undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong copySize;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    copySize = 0;\n  }\n  else {\n    copyResult = copyFunction(bufferSize,destinationFilePath,fileSize);\n    copySize = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPtr = getErrorCodeLocation();\n      errorString = getErrorMessage(*errnoPtr);\n      errorMessage = getTranslatedErrorMessage(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      handleNonFatalError(errorMessage,destinationFilePath,errorString);\n    }\n    deleteFile(sourceFilePath);\n  }\n  if (preserveTimes != '\\0') {\n    modifyFileTimes(destinationFilePath,fileSize);\n  }\n  result._8_8_ = errorCode;\n  result._0_8_ = copySize;\n  return result;\n}\n\n",
            "called": [
                "smart_rename.cold",
                "simple_copy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "file_copy_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_method_var_0010adf2",
                "stab_class_method_var": "initialize_stab_class_method_var"
            },
            "code": "\nvoid initialize_class_method_var_0010adf2(void)\n\n{\n  initialize_stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "param_1": "input_value",
                "param_2": "output_value",
                "param_3": "additional_data",
                "param_4": "counter1",
                "param_5": "counter2",
                "uVar1": "value1",
                "cVar2": "flag",
                "uVar3": "result",
                "lVar4": "temp_value",
                "plVar5": "temp_array",
                "local_40": "local_array"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_value,undefined8 *output_value,long *additional_data,uint *counter1,uint *counter2)\n\n{\n  undefined8 value1;\n  char flag;\n  undefined4 result;\n  long temp_value;\n  long *temp_array;\n  uint uVar6;\n  long local_array [2];\n  \n  value1 = *output_value;\n  temp_array = local_array;\n  if (additional_data == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  flag = stab_demangle_type_lto_priv_0(input_value,output_value,temp_array);\n  if ((flag != '\\0') &&\n     (result = stab_demangle_remember_type(input_value,value1,(int)*output_value - (int)value1),\n     (char)result != '\\0')) {\n    if (additional_data == (long *)0x0) {\n      return result;\n    }\n    if (local_array[0] != 0) {\n      if (*counter2 <= *counter1 + 1) {\n        uVar6 = *counter2 + 10;\n        temp_value = *additional_data;\n        *counter2 = uVar6;\n        temp_value = xrealloc(temp_value,(ulong)uVar6 << 3);\n        *additional_data = temp_value;\n      }\n      uVar6 = *counter1;\n      *(long *)(*additional_data + (ulong)uVar6 * 8) = local_array[0];\n      *counter1 = uVar6 + 1;\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "stab_demangle_type.lto_priv.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "err_num_ptr",
                "uVar3": "error_msg",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *err_num_ptr;\n  undefined8 error_msg;\n  char *error_reason;\n  stat file_stat;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stat);\n    if (status < 0) {\n      err_num_ptr = __errno_location();\n      if (*err_num_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_msg,file_path);\n      }\n      else {\n        error_reason = strerror(*err_num_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_msg,file_path,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(error_msg,file_path);\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_msg,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "get_file_size.cold",
                "non_fatal",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "copy_file",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_app_001087fd"
            },
            "code": "\nundefined8 initializeApp_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_app_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "uVar1": "programName",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatList);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "generate_debug_info_0011378f",
                "param_1": "output_file",
                "param_2": "stats",
                "param_3": "symbol_table",
                "param_4": "line_table",
                "param_5": "source_files",
                "param_6": "compilation_units",
                "auVar1": "temp",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "puVar5": "ptr",
                "sVar6": "length",
                "lVar7": "loop_counter",
                "puVar8": "symbol_entry",
                "puVar9": "stab_array",
                "__dest": "dest_str",
                "plVar11": "source_files_entry",
                "bVar12": "flag",
                "local_258": "output_file_ptr",
                "local_250": "buffer_size",
                "local_248": "var_1",
                "uStack_244": "var_2",
                "uStack_240": "var_3",
                "uStack_23c": "var_4",
                "local_238": "var_5",
                "local_228": "var_6",
                "local_220": "hash_table_1",
                "local_1f8": "var_7",
                "local_1f0": "var_8",
                "local_1e8": "symbol_array",
                "local_a0": "hash_table_2",
                "local_78": "var_9",
                "uStack_70": "var_10",
                "local_68": "var_11",
                "local_60": "var_12",
                "local_58": "var_13",
                "uStack_54": "var_14",
                "uStack_50": "var_15",
                "uStack_4c": "var_16"
            },
            "code": "\nundefined4\ngenerate_debug_info_0011378f(undefined8 *output_file,undefined8 *stats,long *symbol_table,undefined8 *line_table,\n            undefined8 *source_files,undefined8 *compilation_units)\n\n{\n  undefined temp [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_msg;\n  undefined *ptr;\n  size_t length;\n  long loop_counter;\n  undefined8 *symbol_entry;\n  undefined4 *stab_array;\n  char *dest_str;\n  undefined8 *puVar10;\n  long *source_files_entry;\n  byte flag;\n  undefined8 *output_file_ptr;\n  long buffer_size;\n  undefined4 var_1;\n  undefined4 var_2;\n  undefined4 var_3;\n  undefined4 var_4;\n  undefined var_5 [16];\n  undefined8 var_6;\n  undefined hash_table_1 [40];\n  undefined8 var_7;\n  undefined8 var_8;\n  undefined4 symbol_array [82];\n  undefined hash_table_2 [40];\n  undefined var_9 [8];\n  undefined8 var_10;\n  undefined8 var_11;\n  undefined4 var_12;\n  undefined4 var_13;\n  undefined4 var_14;\n  undefined4 var_15;\n  undefined4 var_16;\n  \n  flag = 0;\n  var_1 = 0;\n  var_2 = 0;\n  var_3 = 500;\n  var_4 = 0;\n  output_file_ptr = output_file;\n  buffer_size = xmalloc(500);\n  var_6 = 1;\n  var_5 = ZEXT816(0);\n  result = bfd_hash_table_init(hash_table_1,string_hash_newfunc_lto_priv_0,0x30);\n  if ((result == '\\0') ||\n     (result = bfd_hash_table_init(hash_table_2,string_hash_newfunc_lto_priv_0,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_msg = bfd_errmsg(error_code);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",error_msg);\n  }\n  else {\n    var_7 = 0;\n    unique0x100000e9 = 0xffffffff;\n    var_9 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    stab_array = symbol_array;\n    for (loop_counter = 0x52; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *stab_array = 0;\n      stab_array = stab_array + (ulong)flag * -2 + 1;\n    }\n    var_11 = 0;\n    var_12 = 0;\n    var_8 = 1;\n    var_13 = 0;\n    var_14 = 0;\n    var_15 = 0xffffffff;\n    var_16 = 0xffffffff;\n    result = stab_write_symbol_lto_priv_0(&output_file_ptr,0,0,0,0);\n    temp = _var_9;\n    if (result != '\\0') {\n      var_9._4_4_ = var_2;\n      var_9._0_4_ = var_1;\n      var_10 = temp._8_8_;\n      result = stab_write_symbol_lto_priv_0(&output_file_ptr,100,0,0,*output_file);\n      if (result != '\\0') {\n        *(int *)(stats + 6) = *(int *)(stats + 6) + 1;\n        stats[10] = 0;\n        puVar10 = (undefined8 *)*stats;\n        *(undefined4 *)(stats + 7) = *(undefined4 *)((long)stats + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          stats[8] = puVar10[2];\n          *(undefined4 *)(stats + 9) = 0;\n          result = stab_start_compilation_unit_lto_priv_0(&output_file_ptr,*(undefined8 *)(puVar10[1] + 8))\n          ;\n          if (result == '\\0') {\n            return 0;\n          }\n          source_files_entry = (long *)puVar10[1];\n          if (source_files_entry != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)source_files_entry[2] != (undefined8 *)0x0) {\n                for (symbol_entry = *(undefined8 **)(undefined8 *)source_files_entry[2]; symbol_entry != (undefined8 *)0x0;\n                    symbol_entry = (undefined8 *)*symbol_entry) {\n                  result = debug_write_name_constprop_0(stats,&output_file_ptr);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              source_files_entry = (long *)*source_files_entry;\n              if (source_files_entry == (long *)0x0) break;\n              result = stab_start_source_lto_priv_0(&output_file_ptr,source_files_entry[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = debug_write_linenos_constprop_0(stats,&output_file_ptr,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var_16,var_15) == -1) &&\n           (error_code = stab_write_symbol_lto_priv_0(&output_file_ptr,100,0,var_11,0), (char)error_code != '\\0'))\n        {\n          (**(code **)(output_file[1] + 0x50))(var_6,buffer_size + 8);\n          *symbol_table = buffer_size;\n          *line_table = CONCAT44(var_2,var_1);\n          *compilation_units = var_6;\n          ptr = (undefined *)xmalloc();\n          *ptr = 0;\n          dest_str = ptr + 1;\n          *source_files = ptr;\n          for (loop_counter = var_5._0_8_; loop_counter != 0; loop_counter = *(long *)(loop_counter + 0x18)) {\n            strcpy(dest_str,*(char **)(loop_counter + 8));\n            length = strlen(dest_str);\n            dest_str = dest_str + length + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "bfd_hash_table_init",
                "strlen",
                "debug_write_linenos.constprop.0",
                "string_hash_newfunc.lto_priv.0",
                "strcpy",
                "debug_write_name.constprop.0",
                "xmalloc",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "generate_debug_info_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorPtr",
                "uVar2": "errorString"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorPtr;\n  undefined8 errorString;\n  \n  errorPtr = __errno_location();\n  if (*errorPtr == 2) {\n    errorString = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorString);\n  }\n  else {\n    strerror(*errorPtr);\n    errorString = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorString);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_stab_entry_0010a0a0",
                "param_1": "entry_address",
                "stab_modify_type": "modify_symbol_table_entry"
            },
            "code": "\nvoid modify_stab_entry_0010a0a0(long entry_address)\n\n{\n  modify_symbol_table_entry(entry_address,0x26,4,entry_address + 0x198,entry_address + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_entry_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_data_00119ed0",
                "param_1": "configParam1",
                "param_2": "configParam2",
                "param_3": "configParam3",
                "param_4": "configParam4",
                "param_5": "configParam5",
                "param_6": "configParam6",
                "param_7": "configParam7",
                "param_8": "configParam8",
                "param_9": "dataParam1",
                "param_10": "dataParam2",
                "param_11": "dataParam3",
                "param_12": "dataParam4",
                "param_13": "dataParam5",
                "param_14": "dataParam6",
                "in_AL": "isConfigPresent",
                "local_d8": "stackSize",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "bufferPointer",
                "local_b8": "buffer",
                "local_b0": "dataParam2Copy",
                "local_a8": "dataParam3Copy",
                "local_a0": "dataParam4Copy",
                "local_98": "dataParam5Copy",
                "local_90": "dataParam6Copy",
                "local_88": "configParam1Copy",
                "local_78": "configParam2Copy",
                "local_68": "configParam3Copy",
                "local_58": "configParam4Copy",
                "local_48": "configParam5Copy",
                "local_38": "configParam6Copy",
                "local_28": "configParam7Copy",
                "local_18": "configParam8Copy"
            },
            "code": "\nvoid reportData_00119ed0(undefined4 configParam1,undefined4 configParam2,undefined4 configParam3,undefined4 configParam4,\n                 undefined4 configParam5,undefined4 configParam6,undefined4 configParam7,undefined4 configParam8,\n                 undefined8 dataParam1,undefined8 dataParam2,undefined8 dataParam3,undefined8 dataParam4,\n                 undefined8 dataParam5,undefined8 dataParam6)\n\n{\n  char isConfigPresent;\n  undefined4 stackSize;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *bufferPointer;\n  undefined buffer [8];\n  undefined8 dataParam2Copy;\n  undefined8 dataParam3Copy;\n  undefined8 dataParam4Copy;\n  undefined8 dataParam5Copy;\n  undefined8 dataParam6Copy;\n  undefined4 configParam1Copy;\n  undefined4 configParam2Copy;\n  undefined4 configParam3Copy;\n  undefined4 configParam4Copy;\n  undefined4 configParam5Copy;\n  undefined4 configParam6Copy;\n  undefined4 configParam7Copy;\n  undefined4 configParam8Copy;\n  \n  if (isConfigPresent != '\\0') {\n    configParam1Copy = configParam1;\n    configParam2Copy = configParam2;\n    configParam3Copy = configParam3;\n    configParam4Copy = configParam4;\n    configParam5Copy = configParam5;\n    configParam6Copy = configParam6;\n    configParam7Copy = configParam7;\n    configParam8Copy = configParam8;\n  }\n  stackPointer = &stack0x00000008;\n  stackSize = 8;\n  bufferPointer = buffer;\n  bufferSize = 0x30;\n  dataParam2Copy = dataParam2;\n  dataParam3Copy = dataParam3;\n  dataParam4Copy = dataParam4;\n  dataParam5Copy = dataParam5;\n  dataParam6Copy = dataParam6;\n  report(dataParam1,&stackSize);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "main",
                "merge_gnu_build_notes",
                "get_file_size",
                "parse_flags.cold",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "set_times.cold",
                "FUN_00105828",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00104ea2",
                "FUN_00107880",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "report_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "decompiled_function_00112c1f",
                "param_1": "param_",
                "plVar1": "pointer_var1",
                "lVar2": "local_var2",
                "puVar3": "pointer_var3",
                "puVar4": "pointer_var4",
                "cVar5": "char_var",
                "piVar6": "pointer_var6",
                "uVar7": "return_value",
                "uVar8": "unused_var8",
                "iVar9": "int_var9",
                "uVar10": "unused_var10",
                "uVar11": "unused_var11",
                "uVar12": "unused_var12",
                "uVar13": "unsigned_var13",
                "bVar14": "bool_var14",
                "local_3c": "local_var3c"
            },
            "code": "\n\n\nundefined8 decompiled_function_00112c1f(ulong param_,undefined8 param_2,int *param_3,long param_4)\n\n{\n  long *pointer_var1;\n  long local_var2;\n  undefined8 *pointer_var3;\n  undefined8 *pointer_var4;\n  char char_var;\n  int *pointer_var6;\n  undefined8 return_value;\n  undefined8 unused_var8;\n  int int_var9;\n  undefined4 unused_var10;\n  undefined8 unused_var11;\n  ulong unused_var12;\n  uint unsigned_var13;\n  bool bool_var14;\n  uint local_var3c;\n  \n  unused_var12 = param_;\nLAB_00112c39:\n  if (param_3 != (int *)0x0) {\n    int_var9 = *param_3;\n    if (int_var9 - 0x16U < 2) {\n      do {\n        pointer_var1 = *(long **)(param_3 + 4);\n        unsigned_var13 = *(uint *)(param_ + 0x30);\n        unused_var12 = (ulong)unsigned_var13;\n        local_var2 = *pointer_var1;\n        if (*(uint *)(local_var2 + 0x10) == unsigned_var13) {\n          if (int_var9 == 0x16) {\n            return_value = stab_typedef_type_lto_priv_0(param_2,*(undefined8 *)(local_var2 + 8));\n            return return_value;\n          }\nLAB_00112c94:\n          pointer_var6 = (int *)debug_get_real_type_isra_0(param_3,0);\n          if (pointer_var6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*pointer_var6 - 7U < 4) && (*(long *)(pointer_var6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(pointer_var6 + 4) + 0xc) <= *(uint *)(param_ + 0x38)) &&\n               (char_var = debug_set_class_id_lto_priv_0\n                                  (param_,*(undefined8 *)(**(long **)(param_3 + 4) + 8),pointer_var6),\n               char_var == '\\0')) {\n              return 0;\n            }\n            unsigned_var13 = *(uint *)(*(long *)(pointer_var6 + 4) + 0xc);\n          }\n          else {\n            unsigned_var13 = 0;\n          }\n          int_var9 = *pointer_var6;\n          return_value = *(undefined8 *)(**(long **)(param_3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (int_var9 == 0x17) {\n          if (local_var2 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = unsigned_var13;\n          param_4 = *pointer_var1;\n          param_3 = (int *)pointer_var1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = unsigned_var13;\n        }\n        param_3 = (int *)pointer_var1[1];\n        if (param_3 == (int *)0x0) goto LAB_00112dd6;\n        int_var9 = *param_3;\n        param_4 = 0;\n      } while (int_var9 - 0x16U < 2);\nLAB_00112d74:\n      return_value = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(param_ + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      return_value = *(undefined8 *)(param_4 + 8);\n    }\n    switch(int_var9) {\n    case 0:\n      return_value = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",return_value);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      return_value = stab_void_type_lto_priv_0(param_2);\n      return return_value;\n    case 3:\n      return_value = stab_int_type_lto_priv_0(param_2,param_3[1],*(undefined *)(param_3 + 4));\n      return return_value;\n    case 4:\n      return_value = stab_float_type_lto_priv_0(param_2,param_3[1]);\n      return return_value;\n    case 5:\n      return_value = stab_complex_type_lto_priv_0(param_2,param_3[1]);\n      return return_value;\n    case 6:\n      return_value = stab_bool_type_lto_priv_0(param_2,param_3[1]);\n      return return_value;\n    case 7:\n    case 8:\n      if (*(long *)(param_3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_ + 0x38)) &&\n           (char_var = debug_set_class_id_lto_priv_0(param_,return_value,param_3), char_var == '\\0')) {\n          return 0;\n        }\n        local_var2 = *(long *)(param_3 + 4);\n        if (*(int *)(param_ + 0x30) == *(int *)(local_var2 + 8)) {\n          unsigned_var13 = *(uint *)(local_var2 + 0xc);\n          if (unsigned_var13 <= *(uint *)(param_ + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          int_var9 = *param_3;\nLAB_00112ed2:\n          return_value = stab_tag_type_lto_priv_0(param_2,return_value,unsigned_var13,int_var9);\n          return return_value;\n        }\n        *(int *)(local_var2 + 8) = *(int *)(param_ + 0x30);\n      }\n      unused_var10 = 0;\n      if (*(long *)(param_3 + 4) != 0) {\n        unused_var10 = *(undefined4 *)(*(long *)(param_3 + 4) + 0xc);\n      }\n      char_var = stab_start_struct_type_lto_priv_0(param_2,return_value,unused_var10,*param_3 == 7,param_3[1]);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_3 + 4) != (long *)0x0) && (unused_var12 = 0, **(long **)(param_3 + 4) != 0)) {\n        while( true ) {\n          pointer_var4 = *(undefined8 **)(**(long **)(param_3 + 4) + unused_var12 * 8);\n          if (pointer_var4 == (undefined8 *)0x0) break;\n          char_var = decompiled_function_00112c1f(param_,param_2,pointer_var4[1],0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n          char_var = stab_struct_field_lto_priv_0\n                            (param_2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3),\n                             *(undefined4 *)((long)pointer_var4 + 0x1c),*(undefined4 *)(pointer_var4 + 2));\n          if (char_var == '\\0') {\n            return 0;\n          }\n          unused_var12 = (ulong)((int)unused_var12 + 1);\n        }\n      }\n      return_value = stab_end_struct_type_lto_priv_0(param_2);\n      return return_value;\n    case 9:\n    case 10:\n      if (*(long *)(param_3 + 4) == 0) {\n        unsigned_var13 = 0;\n        pointer_var6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_ + 0x38)) &&\n           (unused_var12 = param_, char_var = debug_set_class_id_lto_priv_0(param_,return_value,param_3),\n           char_var == '\\0')) {\n          return 0;\n        }\n        local_var2 = *(long *)(param_3 + 4);\n        unsigned_var13 = *(uint *)(local_var2 + 0xc);\n        if (*(int *)(param_ + 0x30) == *(int *)(local_var2 + 8)) {\n          if (unsigned_var13 <= *(uint *)(param_ + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          int_var9 = *param_3;\n          goto LAB_00112ed2;\n        }\n        pointer_var6 = *(int **)(local_var2 + 0x20);\n        *(int *)(local_var2 + 8) = *(int *)(param_ + 0x30);\n        if (((pointer_var6 != (int *)0x0) && (param_3 != pointer_var6)) &&\n           (unused_var12 = param_, char_var = decompiled_function_00112c1f(param_,param_2,pointer_var6,0), char_var == '\\0')) {\n          return 0;\n        }\n      }\n      char_var = stab_start_class_type_lto_priv_0\n                        (param_2,return_value,unsigned_var13,*param_3 == 9,param_3[1],pointer_var6 != (int *)0x0,\n                         param_3 == pointer_var6,unused_var12);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_3 + 4) != (long *)0x0) {\n        unsigned_var13 = 0;\n        if (**(long **)(param_3 + 4) != 0) {\n          while (pointer_var4 = *(undefined8 **)(**(long **)(param_3 + 4) + (ulong)unsigned_var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = decompiled_function_00112c1f(param_,param_2,pointer_var4[1],0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointer_var4 + 0x14) == '\\0') {\n              char_var = stab_struct_field_lto_priv_0(param_2,*pointer_var4,*(undefined4 *)(pointer_var4 + 3));\n            }\n            else {\n              char_var = stab_class_static_member_lto_priv_0(param_2,*pointer_var4,pointer_var4[3]);\n            }\n            if (char_var == '\\0') {\n              return 0;\n            }\n            unsigned_var13 = unsigned_var13 + 1;\n          }\n        }\n        unsigned_var13 = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x10) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x10) + (ulong)unsigned_var13 * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = decompiled_function_00112c1f(param_,param_2,*pointer_var4,0);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            char_var = stab_class_baseclass_lto_priv_0\n                              (param_2,*(undefined4 *)(pointer_var4 + 1),\n                               *(undefined *)((long)pointer_var4 + 0xc));\n            if (char_var == '\\0') {\n              return 0;\n            }\n            unsigned_var13 = unsigned_var13 + 1;\n          }\n        }\n        local_var3c = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x18) != 0) {\n          while (pointer_var4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x18) + (ulong)local_var3c * 8),\n                pointer_var4 != (undefined8 *)0x0) {\n            char_var = stab_class_start_method_lto_priv_0(param_2,*pointer_var4);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            unsigned_var13 = 0;\n            while (pointer_var3 = *(undefined8 **)(pointer_var4[1] + (ulong)unsigned_var13 * 8),\n                  pointer_var3 != (undefined8 *)0x0) {\n              if ((pointer_var3[4] != 0) &&\n                 (char_var = decompiled_function_00112c1f(param_,param_2,pointer_var3[4],0), char_var == '\\0')) {\n                return 0;\n              }\n              char_var = decompiled_function_00112c1f(param_,param_2,pointer_var3[1],0);\n              if (char_var == '\\0') {\n                return 0;\n              }\n              if (pointer_var3[3] == -1) {\n                char_var = stab_class_static_method_variant_lto_priv_0\n                                  (param_2,*pointer_var3,*(undefined4 *)(pointer_var3 + 2),\n                                   *(undefined *)((long)pointer_var3 + 0x14),\n                                   *(undefined *)((long)pointer_var3 + 0x15));\n              }\n              else {\n                char_var = stab_class_method_variant_lto_priv_0(param_2);\n              }\n              if (char_var == '\\0') {\n                return 0;\n              }\n              unsigned_var13 = unsigned_var13 + 1;\n            }\n            char_var = stab_class_end_method_lto_priv_0(param_2);\n            if (char_var == '\\0') {\n              return 0;\n            }\n            local_var3c = local_var3c + 1;\n          }\n        }\n      }\n      return_value = stab_end_class_type_lto_priv_0(param_2);\n      return return_value;\n    case 0xb:\n      pointer_var4 = *(undefined8 **)(param_3 + 4);\n      if (pointer_var4 == (undefined8 *)0x0) {\n        unused_var8 = 0;\n        unused_var11 = 0;\n      }\n      else {\n        unused_var8 = pointer_var4[1];\n        unused_var11 = *pointer_var4;\n      }\n      return_value = stab_enum_type_lto_priv_0(param_2,return_value,unused_var11,unused_var8);\n      return return_value;\n    case 0xc:\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_pointer_type_lto_priv_0(param_2);\n      return return_value;\n    case 0xd:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      unused_var12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 8) == 0) {\n        unused_var12 = 0xffffffff;\n      }\n      else {\n        while (local_var2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 8) + unused_var12 * 8), local_var2 != 0) {\n          unused_var12 = unused_var12 + 1;\n          char_var = decompiled_function_00112c1f(param_,param_2,local_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n        unused_var12 = unused_var12 & 0xffffffff;\n      }\n      return_value = stab_function_type_lto_priv_0\n                        (param_2,unused_var12,*(undefined *)(*(long *)(param_3 + 4) + 0x10));\n      return return_value;\n    case 0xe:\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_reference_type_lto_priv_0(param_2);\n      return return_value;\n    case 0xf:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_range_type_lto_priv_0\n                        (param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_3 + 4) + 0x10));\n      return return_value;\n    case 0x10:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      local_var2 = *(long *)(param_3 + 4);\n      return_value = stab_array_type_lto_priv_0\n                        (param_2,*(undefined8 *)(local_var2 + 0x10),*(undefined8 *)(local_var2 + 0x18),\n                         *(undefined *)(local_var2 + 0x20));\n      return return_value;\n    case 0x11:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_set_type_lto_priv_0(param_2,*(undefined *)(*(long *)(param_3 + 4) + 8));\n      return return_value;\n    case 0x12:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_offset_type_lto_priv_0(param_2);\n      return return_value;\n    case 0x13:\n      char_var = decompiled_function_00112c1f(param_,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      unused_var12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 0x10) == 0) {\n        unused_var12 = 0xffffffff;\n      }\n      else {\n        while (local_var2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 0x10) + unused_var12 * 8), local_var2 != 0)\n        {\n          unused_var12 = unused_var12 + 1;\n          char_var = decompiled_function_00112c1f(param_,param_2,local_var2,0);\n          if (char_var == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_3 + 4) + 8) != 0) &&\n         (char_var = decompiled_function_00112c1f(param_,param_2,*(long *)(*(long *)(param_3 + 4) + 8),0),\n         char_var == '\\0')) {\n        return 0;\n      }\n      return_value = stab_method_type_lto_priv_0\n                        (param_2,*(long *)(*(long *)(param_3 + 4) + 8) != 0,unused_var12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_3 + 4) + 0x18));\n      return return_value;\n    case 0x14:\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_const_type_lto_priv_0(param_2);\n      return return_value;\n    case 0x15:\n      char_var = decompiled_function_00112c1f(param_,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (char_var == '\\0') {\n        return 0;\n      }\n      return_value = stab_volatile_type_lto_priv_0(param_2);\n      return return_value;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bool_var14 = *(int **)**(undefined8 **)(param_3 + 4) == param_3;\n  param_3 = *(int **)**(undefined8 **)(param_3 + 4);\n  if (bool_var14) {\nLAB_00112dd6:\n    return_value = stab_empty_type_lto_priv_0(param_2);\n    return return_value;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "__assert_fail",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_tag_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "abort",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "fprintf",
                "stab_function_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_method_variant.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "dcgettext",
                "stab_int_type.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "decompiled_function_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "copySuccessful",
                "unaff_R15": "sourceData",
                "lVar1": "errorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long errorMessage;\n  char copySuccessful;\n  long sourceData;\n  \n  errorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (copySuccessful != '\\0') {\n    *(undefined4 *)(*(long *)(sourceData + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "filename",
                "param_2": "message",
                "in_RAX": "result",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 filename,undefined8 message)\n\n{\n  undefined8 result;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,message,filename,result);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_number",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_architecture_00105828",
                "iVar1": "architecture",
                "uVar2": "fileArch",
                "uVar3": "archMach",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileArchitecture_00105828(void)\n\n{\n  int architecture;\n  undefined4 fileArch;\n  undefined8 archMach;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    archMach = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,archMach);\n  }\n  else {\n    archMach = bfd_get_mach();\n    fileArch = bfd_get_arch();\n    archMach = bfd_printable_arch_mach(fileArch,archMach);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,archMach);\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "non_fatal",
                "bfd_get_arch",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_architecture_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temporary_directory_0011a0e0",
                "__template": "template_path",
                "pcVar1": "temporary_directory_path"
            },
            "code": "\nchar * create_temporary_directory_0011a0e0(void)\n\n{\n  char *template_path;\n  char *temporary_directory_path;\n  \n  template_path = (char *)template_in_dir();\n  temporary_directory_path = mkdtemp(template_path);\n  if (temporary_directory_path == (char *)0x0) {\n    free(template_path);\n  }\n  return temporary_directory_path;\n}\n\n",
            "called": [
                "make_tempdir.cold",
                "template_in_dir",
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temporary_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_push_0010bba1",
                "param_1": "hash_table",
                "param_2": "key",
                "lVar1": "lookup_result",
                "uVar2": "push_result"
            },
            "code": "\nundefined8 lookup_and_push_0010bba1(long hash_table,undefined8 key)\n\n{\n  long lookup_result;\n  undefined8 push_result;\n  \n  lookup_result = bfd_hash_lookup(hash_table + 0x1b8,key,0,0);\n  if ((lookup_result != 0) && (0 < *(long *)(lookup_result + 0x20))) {\n    push_result = stab_push_defined_type(hash_table,*(long *)(lookup_result + 0x20),*(undefined4 *)(lookup_result + 0x28));\n    return push_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "lookup_and_push_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "generate_stab_entry_0010e6a8",
                "param_1": "file",
                "param_2": "symbol",
                "param_3": "type",
                "param_4": "result",
                "__s": "typeStr",
                "sVar3": "symbolLen",
                "sVar4": "typeStrLen",
                "__s_00": "stabEntryStr",
                "lVar5": "symbolHash",
                "lVar8": "nextIndex",
                "uVar1": "writeResult",
                "uVar2": "entryType",
                "uVar6": "errorMsg",
                "uVar7": "errorContext",
                "uVar9": "returnValue",
                "auVar10": "resultContainer"
            },
            "code": "\nundefined  [16] generateStabEntry_0010e6a8(long file,char *symbol,undefined8 type,undefined8 result)\n\n{\n  uint writeResult;\n  undefined4 entryType;\n  char *typeStr;\n  size_t symbolLen;\n  size_t typeStrLen;\n  char *stabEntryStr;\n  long symbolHash;\n  undefined8 errorMsg;\n  undefined8 errorContext;\n  long nextIndex;\n  ulong returnValue;\n  undefined resultContainer [16];\n  \n  nextIndex = *(long *)(*(long *)(file + 0x60) + 0x10);\n  entryType = *(undefined4 *)(*(long *)(file + 0x60) + 0x18);\n  typeStr = (char *)stab_pop_type();\n  symbolLen = strlen(symbol);\n  typeStrLen = strlen(typeStr);\n  stabEntryStr = (char *)xmalloc(symbolLen + 0x14 + typeStrLen);\n  if (nextIndex < 1) {\n    nextIndex = *(long *)(file + 0x68);\n    *(long *)(file + 0x68) = nextIndex + 1;\n    sprintf(stabEntryStr,\"%s:t%ld=%s\",symbol,nextIndex,typeStr);\n  }\n  else {\n    sprintf(stabEntryStr,\"%s:t%s\",symbol,typeStr);\n  }\n  free(typeStr);\n  writeResult = stab_write_symbol_lto_priv_0(file,0x80,0,0,stabEntryStr);\n  returnValue = (ulong)writeResult;\n  if ((char)writeResult != '\\0') {\n    free(stabEntryStr);\n    symbolHash = bfd_hash_lookup(file + 0x1b8,symbol,1,0);\n    if (symbolHash != 0) {\n      *(long *)(symbolHash + 0x20) = nextIndex;\n      *(undefined4 *)(symbolHash + 0x28) = entryType;\n      goto LAB_0010e7b3;\n    }\n    entryType = bfd_get_error();\n    errorMsg = bfd_errmsg(entryType);\n    errorContext = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(errorContext,errorMsg);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  resultContainer._8_8_ = result;\n  resultContainer._0_8_ = returnValue;\n  return resultContainer;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "bfd_get_error",
                "stab_pop_type",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "sprintf",
                "dcgettext",
                "bfd_hash_lookup",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_entry_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "generate_and_write_symbol_0010e7c2",
                "param_1": "symbol_data",
                "param_2": "input_string",
                "param_3": "unused_param",
                "param_4": "user_param",
                "__s": "symbol",
                "sVar1": "input_length",
                "sVar2": "symbol_length",
                "__s_00": "new_symbol",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] generate_and_write_symbol_0010e7c2(undefined8 symbol_data,char *input_string,undefined8 unused_param,undefined8 user_param)\n\n{\n  char *symbol;\n  size_t input_length;\n  size_t symbol_length;\n  char *new_symbol;\n  undefined result [16];\n  \n  symbol = (char *)stab_pop_type();\n  input_length = strlen(input_string);\n  symbol_length = strlen(symbol);\n  new_symbol = (char *)xmalloc(input_length + 3 + symbol_length);\n  sprintf(new_symbol,\"%s:T%s\",input_string,symbol);\n  free(symbol);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbol_data,0x80,0,0,new_symbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(new_symbol);\n  }\n  result._8_8_ = user_param;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_and_write_symbol_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "data9",
                "param_10": "data10",
                "param_11": "data11",
                "param_12": "data12",
                "param_13": "data13",
                "param_14": "data14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "copySize",
                "local_d0": "bufferPtr",
                "local_c8": "localBufferPtr",
                "local_b8": "localBuffer",
                "local_b0": "localData10",
                "local_a8": "localData11",
                "local_a0": "localData12",
                "local_98": "localData13",
                "local_90": "localData14",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 data9,undefined8 data10,undefined8 data11,undefined8 data12,\n                 undefined8 data13,undefined8 data14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 copySize;\n  undefined *bufferPtr;\n  undefined *localBufferPtr;\n  undefined localBuffer [8];\n  undefined8 localData10;\n  undefined8 localData11;\n  undefined8 localData12;\n  undefined8 localData13;\n  undefined8 localData14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (flag != '\\0') {\n    localParam1 = errorCode;\n    localParam2 = param2;\n    localParam3 = param3;\n    localParam4 = param4;\n    localParam5 = param5;\n    localParam6 = param6;\n    localParam7 = param7;\n    localParam8 = param8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBufferPtr = localBuffer;\n  copySize = 0x30;\n  localData10 = data10;\n  localData11 = data11;\n  localData12 = data12;\n  localData13 = data13;\n  localData14 = data14;\n  report(data9,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "report",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "copy_file",
                "find_section_list",
                "FUN_00114dc7",
                "copy_section.cold",
                "main",
                "parse_flags.cold",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "coff_get_slot.lto_priv.0",
                "init_section_add.cold",
                "section_add_load_file.cold",
                "FUN_0010554f",
                "add_redefine_and_check",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_file",
                "FUN_00107880",
                "copy_object",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_bfd_errors_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "bufferPointer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleBFDErrors_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *bufferPointer;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return returnAddress;\n    }\n  }\n  bfd_nonfatal(*bufferPointer);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_bfd_errors_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "reconstruct_gnu_build_notes_00116852",
                "in_RCX": "note_array",
                "param_10": "note_array_size",
                "param_11": "original_note_array",
                "param_12": "reconstructed_notes",
                "param_13": "note_params",
                "param_14": "original_note_array_size",
                "unaff_RBX": "min_note_size",
                "unaff_RBP": "note",
                "unaff_R13": "original_note_ptr",
                "unaff_R14": "current_note_ptr",
                "unaff_R15": "max_note_size",
                "in_R10": "current_index",
                "in_R11": "note_type",
                "uVar4": "incremented_index",
                "uVar6": "current_note_max_size",
                "uVar5": "current_note_min_size",
                "lVar7": "loop_index",
                "uVar8": "current_note_size",
                "psVar13": "original_note",
                "bVar14": "byte_value",
                "cVar10": "char_value",
                "__ptr": "temp_ptr",
                "puVar9": "current_note_bytes",
                "puVar11": "temp_ptr_2",
                "puVar12": "reconstructed_notes_end",
                "iVar3": "memcmp_result",
                "sVar1": "current_note_type"
            },
            "code": "\nulong reconstruct_gnu_build_notes_00116852(void)\n\n{\n  size_t current_note_type;\n  code *pcVar2;\n  int memcmp_result;\n  uint incremented_index;\n  undefined *temp_ptr;\n  size_t *note_array;\n  ulong current_note_min_size;\n  ulong current_note_max_size;\n  long loop_index;\n  ulong current_note_size;\n  size_t min_note_size;\n  size_t *note;\n  undefined *current_note_bytes;\n  char char_value;\n  undefined *temp_ptr_2;\n  ulong current_index;\n  undefined *reconstructed_notes_end;\n  size_t note_type;\n  size_t *original_note_ptr;\n  size_t *current_note_ptr;\n  size_t max_note_size;\n  size_t *original_note;\n  byte byte_value;\n  size_t param_7;\n  size_t param_9;\n  ulong note_array_size;\n  size_t *original_note_array;\n  undefined *reconstructed_notes;\n  long note_params;\n  size_t original_note_array_size;\n  \n  byte_value = 0;\ncode_r0x00116852:\n  incremented_index = (int)current_index + 1;\n  if (0x10 < (int)current_index) goto LAB_001167f5;\nLAB_00116863:\n  current_note_ptr = current_note_ptr + -9;\n  do {\n    if (original_note_ptr <= current_note_ptr) {\n      current_note_type = current_note_ptr[2];\n      if (current_note_type == 0) goto LAB_00116863;\n      current_note_size = (ulong)incremented_index;\n      if ((*current_note_ptr == *note) &&\n         (memcmp_result = memcmp((void *)current_note_ptr[3],(void *)note[3],*note), memcmp_result == 0)) {\n        current_note_max_size = current_note_ptr[7];\n        current_note_min_size = current_note_ptr[8];\n        current_index = current_note_size & 0xffffffff;\n        if (max_note_size == current_note_max_size) {\n          if (min_note_size != current_note_min_size) goto LAB_001167a6;\n          note[2] = 0;\n        }\n        else {\n          if (max_note_size < current_note_max_size) {\n            if (current_note_min_size < max_note_size) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < current_note_min_size) || (max_note_size <= (current_note_min_size + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (min_note_size < max_note_size) {\n              if ((0xfffffffffffffff0 < min_note_size) ||\n                 (current_note_max_size <= (min_note_size + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (min_note_size == current_note_min_size) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (min_note_size <= current_note_min_size) {\n              note[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (current_note_min_size < max_note_size) goto LAB_0010852c;\n          }\n          if ((note_type == 0x101) != (current_note_type == 0x101)) goto code_r0x00116852;\n          if (current_note_min_size <= min_note_size) {\n            current_note_min_size = min_note_size;\n          }\n          if (current_note_max_size < max_note_size) {\n            max_note_size = current_note_max_size;\n          }\n          current_note_ptr[8] = current_note_min_size;\n          current_note_ptr[7] = max_note_size;\n          note[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        current_note_ptr = note;\n        note = current_note_ptr + 9;\n        if (note_array <= note) {\n          qsort(original_note_array,original_note_array_size,0x48,sort_gnu_build_notes);\n          temp_ptr = (undefined *)xmalloc(note_array_size * 2);\n          param_7 = 0;\n          reconstructed_notes_end = temp_ptr;\n          for (original_note = original_note_array; original_note < note_array; original_note = original_note + 9) {\n            if (original_note[2] != 0) {\n              temp_ptr_2 = reconstructed_notes_end + 4;\n              current_note_bytes = reconstructed_notes_end + 0xc;\n              pcVar2 = *(code **)(*(long *)(note_params + 8) + 0x50);\n              if ((original_note[7] == param_9) && (original_note[8] == param_7)) {\n                (*pcVar2)(*original_note,reconstructed_notes_end);\n                (**(code **)(*(long *)(note_params + 8) + 0x50))(0,temp_ptr_2);\n                (**(code **)(*(long *)(note_params + 8) + 0x50))(original_note[2],reconstructed_notes_end + 8);\n                current_note_max_size = original_note[6];\n                current_note_size = *original_note;\n                reconstructed_notes_end = (undefined *)original_note[3];\n                temp_ptr_2 = current_note_bytes;\n                for (current_note_min_size = current_note_size; current_note_min_size != 0; current_note_min_size = current_note_min_size - 1) {\n                  *temp_ptr_2 = *reconstructed_notes_end;\n                  reconstructed_notes_end = reconstructed_notes_end + (ulong)byte_value * -2 + 1;\n                  temp_ptr_2 = temp_ptr_2 + (ulong)byte_value * -2 + 1;\n                }\n                if (current_note_size < current_note_max_size) {\n                  for (loop_index = current_note_max_size - current_note_size; loop_index != 0; loop_index = loop_index + -1) {\n                    *temp_ptr_2 = 0;\n                    temp_ptr_2 = temp_ptr_2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                reconstructed_notes_end = current_note_bytes + current_note_max_size;\n              }\n              else {\n                (*pcVar2)();\n                if (*(int *)(*(long *)(note_params + 8) + 8) == 5) {\n                  char_value = (*(char *)(*(long *)(note_params + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  char_value = '\\b';\n                }\n                (**(code **)(*(long *)(note_params + 8) + 0x50))(char_value,temp_ptr_2);\n                (**(code **)(*(long *)(note_params + 8) + 0x50))(original_note[2],reconstructed_notes_end + 8);\n                current_note_size = *original_note;\n                reconstructed_notes_end = (undefined *)original_note[3];\n                temp_ptr_2 = current_note_bytes;\n                for (current_note_max_size = current_note_size; current_note_max_size != 0; current_note_max_size = current_note_max_size - 1) {\n                  *temp_ptr_2 = *reconstructed_notes_end;\n                  reconstructed_notes_end = reconstructed_notes_end + (ulong)byte_value * -2 + 1;\n                  temp_ptr_2 = temp_ptr_2 + (ulong)byte_value * -2 + 1;\n                }\n                current_note_max_size = original_note[6];\n                if (current_note_size < current_note_max_size) {\n                  for (loop_index = current_note_max_size - current_note_size; loop_index != 0; loop_index = loop_index + -1) {\n                    *temp_ptr_2 = 0;\n                    temp_ptr_2 = temp_ptr_2 + (ulong)byte_value * -2 + 1;\n                  }\n                }\n                loop_index = *(long *)(note_params + 8);\n                current_note_bytes = current_note_bytes + current_note_max_size;\n                reconstructed_notes_end = current_note_bytes + 8;\n                if ((*(int *)(loop_index + 8) == 5) &&\n                   (*(char *)(*(long *)(note_params + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loop_index + 0x38))(original_note[7],current_note_bytes);\n                  (**(code **)(*(long *)(note_params + 8) + 0x38))(original_note[8],reconstructed_notes_end);\n                  reconstructed_notes_end = current_note_bytes + 0x10;\n                }\n                else {\n                  (**(code **)(loop_index + 0x50))(original_note[7],current_note_bytes);\n                  (**(code **)(*(long *)(note_params + 8) + 0x50))(original_note[8],current_note_bytes + 4);\n                }\n                param_9 = original_note[7];\n                param_7 = original_note[8];\n              }\n            }\n          }\n          current_note_max_size = (long)reconstructed_notes_end - (long)temp_ptr;\n          current_note_size = current_note_max_size;\n          reconstructed_notes_end = temp_ptr;\n          if (current_note_max_size < note_array_size) {\n            for (; note_array_size = current_note_max_size, current_note_size != 0; current_note_size = current_note_size - 1) {\n              *reconstructed_notes = *reconstructed_notes_end;\n              reconstructed_notes_end = reconstructed_notes_end + (ulong)byte_value * -2 + 1;\n              reconstructed_notes = reconstructed_notes + (ulong)byte_value * -2 + 1;\n            }\n          }\n          free(temp_ptr);\n          free(original_note_array);\n          return note_array_size;\n        }\n        note_type = current_note_ptr[0xb];\n      } while (note_type == 0);\n      max_note_size = current_note_ptr[0x10];\n      min_note_size = current_note_ptr[0x11];\n      incremented_index = 0;\n      if (max_note_size != min_note_size) break;\n      current_note_ptr[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116852",
                "sort_gnu_build_notes",
                "qsort",
                "xmalloc",
                "free",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "reconstruct_gnu_build_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "update_pointer_00113d3a",
                "param_1": "pointer"
            },
            "code": "\nlong updatePointer_00113d3a(long pointer)\n\n{\n  long lVar1;\n  \n  if (pointer != 0) {\n    lVar1 = *(long *)(pointer + 8);\n    if (lVar1 == 0) {\n      lVar1 = debug_make_type_constprop_0(0xc,0);\n      if (lVar1 == 0) {\n        lVar1 = 0;\n      }\n      else {\n        *(long *)(lVar1 + 0x10) = pointer;\n        *(long *)(pointer + 8) = lVar1;\n      }\n    }\n    return lVar1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "update_pointer_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "main",
                "parse_stab",
                "display_info.isra.0.cold",
                "stab_demangle_qualified",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "section_add_load_file",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "stab_modify_type_0010a0d3",
                "param_1": "stab_ptr"
            },
            "code": "\nvoid stab_modify_type_0010a0d3(long stab_ptr)\n\n{\n  stab_modify_type_0010a0d3(stab_ptr,0x42,*(undefined4 *)(*(long *)(stab_ptr + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "stab_modify_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "create_output_section_00115530",
                "param_2": "section_list",
                "lVar1": "section_flags",
                "pcVar2": "section_name",
                "ppcVar3": "rename_list_entry",
                "cVar4": "is_strip_section",
                "iVar5": "comparison_result",
                "uVar6": "updated_flags",
                "sVar7": "prefix_length",
                "sVar8": "section_name_length",
                "lVar9": "section_entry",
                "pcVar10": "prefix_string",
                "pcVar11": "change_address",
                "pcVar12": "group_signature",
                "uVar13": "section_flags",
                "bVar14": "should_update_flags",
                "local_50": "status",
                "local_48": "updated_section_name",
                "copy_byte": "copy_size",
                "interleave": "interleave_factor",
                "change_section_address": "address_change_value",
                "prefix_alloc_sections_string": "alloc_sections_prefix",
                "prefix_sections_string": "sections_prefix",
                "strip_symbols": "strip_symbols_value",
                "extract_symbol": "is_extract_symbol"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid create_output_section_00115530(long param_1,char **section_list,long param_3)\n\n{\n  long section_flags;\n  char *section_name;\n  char **rename_list_entry;\n  char is_strip_section;\n  int comparison_result;\n  uint updated_flags;\n  size_t prefix_length;\n  size_t section_name_length;\n  long section_entry;\n  char *prefix_string;\n  char *change_address;\n  char *group_signature;\n  uint section_flags;\n  bool should_update_flags;\n  long status;\n  char *updated_section_name;\n  long local_40 [2];\n  \n  is_strip_section = is_strip_section_isra_0(section_list);\n  if (is_strip_section != '\\0') {\n    return;\n  }\n  prefix_string = *section_list;\n  section_flags = *(uint *)((long)section_list + 0x24);\n  updated_section_name = prefix_string;\n  rename_list_entry = section_rename_list;\n  if (*(int *)(*(long *)(param_1 + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    section_flags = section_flags & *(uint *)(*(long *)(param_1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; rename_list_entry != (char **)0x0; rename_list_entry = (char **)rename_list_entry[3]) {\n    comparison_result = strcmp(*rename_list_entry,prefix_string);\n    if (comparison_result == 0) {\n      if (*(uint *)(rename_list_entry + 2) != 0xffffffff) {\n        section_flags = *(uint *)(rename_list_entry + 2);\n      }\n      if (prefix_string != rename_list_entry[1]) {\n        updated_section_name = rename_list_entry[1];\n        section_flags = check_new_section_flags(section_flags,param_3);\n      }\n      break;\n    }\n  }\n  if (((alloc_sections_prefix != (char *)0x0) &&\n      (prefix_string = alloc_sections_prefix, (*(byte *)((long)section_list + 0x24) & 1) != 0)) ||\n     (prefix_string = sections_prefix, sections_prefix != (char *)0x0)) {\n    prefix_length = strlen(prefix_string);\n    section_name_length = strlen(updated_section_name);\n    group_signature = (char *)xmalloc(prefix_length + 1 + section_name_length);\n    prefix_string = strcpy(group_signature,prefix_string);\n    updated_section_name = strcat(prefix_string,updated_section_name);\n  }\n  section_entry = find_section_list(*section_list,0,0x80);\n  should_update_flags = false;\n  if (section_entry == 0) {\n    if ((strip_symbols_value == 4) && ((section_flags & 0x2000001) != 0)) {\n      comparison_result = *(int *)(*(long *)(param_1 + 8) + 8);\n      if (comparison_result == 5) {\n        if (*(int *)(section_list[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            should_update_flags = (section_flags & 0x2000000) == 0;\n            updated_flags = ~((-(uint)((section_flags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)section_list + 0x24) = *(uint *)((long)section_list + 0x24) & updated_flags;\n          }\n          else {\n            updated_flags = 0xfdfffefd;\n          }\n          section_flags = section_flags & updated_flags;\n        }\n      }\n      else if ((comparison_result != 2) || (comparison_result = strcmp(*section_list,\".buildid\"), comparison_result != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    section_flags = check_new_section_flags(section_flags & 0x104 | *(uint *)(section_entry + 0x28),param_3,*section_list);\n  }\n  is_strip_section = bfd_convert_section_setup(param_1,section_list,param_3,&updated_section_name,local_40);\n  if (is_strip_section == '\\0') {\n    prefix_string = (char *)0x0;\n    status = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  prefix_string = (char *)bfd_make_section_anyway_with_flags(param_3,updated_section_name,section_flags);\n  if (prefix_string == (char *)0x0) {\n    status = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copy_size < 0) {\n    if (is_extract_symbol != '\\0') {\n      local_40[0] = 0;\n      goto LAB_001158e7;\n    }\n    is_strip_section = bfd_set_section_size(prefix_string,local_40[0]);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    local_40[0] = ((((long)interleave_factor - 1U) + local_40[0]) / (ulong)(long)interleave_factor) *\n                  (long)copy_width;\nLAB_001158e7:\n    is_strip_section = bfd_set_section_size(prefix_string);\n    if (is_strip_section == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  status = 0;\n  group_signature = section_list[6];\n  section_entry = find_section_list(*section_list,0,0x18);\n  if (section_entry == 0) {\n    prefix_string[0x28] = prefix_string[0x28] | 1;\n    change_address = *section_list;\n    group_signature = group_signature + address_change_value;\n    *(char **)(prefix_string + 0x30) = group_signature;\n    *(char **)(prefix_string + 0x38) = group_signature;\n    group_signature = section_list[7];\n    section_entry = find_section_list(change_address,0,0x60);\n    if (section_entry == 0) goto LAB_00115695;\nLAB_00115860:\n    change_address = *(char **)(section_entry + 0x20);\n    if ((*(byte *)(section_entry + 0x14) & 0x40) != 0) {\n      change_address = change_address + (long)group_signature;\n    }\n    *(char **)(prefix_string + 0x38) = change_address;\n    section_entry = find_section_list(*section_list,0,0x200);\n    if (section_entry != 0) goto LAB_00115889;\nLAB_001156b8:\n    section_flags = *(uint *)((long)section_list + 0x7c);\n    if (section_flags < 0x3f) goto LAB_001156c4;\n    status = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(prefix_string + 0xb4) = *(undefined4 *)((long)section_list + 0xb4);\n    prefix_string[0x28] = prefix_string[0x28] & 0xcfU | *(byte *)(section_list + 5) & 0x30;\n    section_list[0xc] = prefix_string;\n    section_list[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_list + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    is_strip_section = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,section_list,param_3,prefix_string);\n    if (is_strip_section == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    change_address = *(char **)(section_entry + 0x18);\n    if ((*(byte *)(section_entry + 0x14) & 8) == 0) {\n      change_address = change_address + (long)group_signature;\n    }\n    prefix_string[0x28] = prefix_string[0x28] | 1;\n    section_name = *section_list;\n    *(char **)(prefix_string + 0x30) = change_address;\n    *(char **)(prefix_string + 0x38) = change_address;\n    group_signature = section_list[7];\n    section_entry = find_section_list(section_name,0,0x60);\n    if (section_entry != 0) goto LAB_00115860;\nLAB_00115695:\n    change_address = *section_list;\n    *(char **)(prefix_string + 0x38) = group_signature + address_change_value;\n    section_entry = find_section_list(change_address,0,0x200);\n    if (section_entry == 0) goto LAB_001156b8;\nLAB_00115889:\n    section_flags = *(uint *)(section_entry + 0x2c);\n    if (0x3e < section_flags) {\n      set_alignment_and_copy_data_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(prefix_string + 0x7c) = section_flags;\n    *(undefined4 *)(prefix_string + 0xb4) = *(undefined4 *)((long)section_list + 0xb4);\n    prefix_string[0x28] = prefix_string[0x28] & 0xcfU | *(byte *)(section_list + 5) & 0x30;\n    section_list[0xc] = prefix_string;\n    section_list[0xb] = (char *)0x0;\n    if ((*(byte *)((long)section_list + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    group_signature = section_list[0x1a];\n    section_entry = group_signature_isra_0(group_signature,section_list[0x1c]);\n    if ((section_entry == 0) ||\n       (section_flags = *(long *)(param_1 + 8), *(uint *)(section_entry + 0x18) = *(uint *)(section_entry + 0x18) | 0x20,\n       *(int *)(section_flags + 8) != 5)) goto LAB_00115700;\n    *(long *)(group_signature + 0xb0) = section_entry;\n    is_strip_section = (**(code **)(*(long *)(param_3 + 8) + 0x158))(param_1,section_list,param_3,prefix_string);\n    if (is_strip_section == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (should_update_flags) {\n    *(undefined4 *)(*(long *)(prefix_string + 0xd0) + 4) = 8;\n  }\n  if (status == 0) {\n    return;\n  }\nLAB_001080d1:\n  status = 1;\n  bfd_nonfatal_message(0,param_3,prefix_string,status);\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "setup_section.cold",
                "strlen",
                "strcat",
                "dcgettext",
                "bfd_make_section_anyway_with_flags",
                "strcpy",
                "strcmp",
                "is_strip_section.isra.0",
                "xmalloc",
                "bfd_convert_section_setup",
                "check_new_section_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "create_output_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "modify_debug_type_0010a0bd",
                "param_1": "data_ptr",
                "stab_modify_type": "update_debug_type"
            },
            "code": "\nvoid modify_debug_type_0010a0bd(long data_ptr)\n\n{\n  update_debug_type(data_ptr,0x6b,*(undefined4 *)(*(long *)(data_ptr + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_debug_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_and_demangle_type_00113e5e",
                "param_1": "input_str",
                "param_2": "argv",
                "param_3": "arg_offset",
                "local_20": "current_arg"
            },
            "code": "\nundefined8 check_and_demangle_type_00113e5e(undefined8 input_str,char **argv,long arg_offset)\n\n{\n  char cVar1;\n  char *current_arg [2];\n  \n  current_arg[0] = *argv;\n  *argv = (char *)(arg_offset + 2);\n  if ((((long)(char *)(arg_offset + 2) - (long)current_arg[0] < 5) ||\n      (cVar1 = startswith_lto_priv_0_lto_priv_0(current_arg[0],\"type\"), cVar1 == '\\0')) ||\n     ((current_arg[0][4] != '$' && (current_arg[0][4] != '.')))) {\n    if (*current_arg[0] != '_') {\n      return 1;\n    }\n    if (current_arg[0][1] != '_') {\n      return 1;\n    }\n    if (current_arg[0][2] != 'o') {\n      return 1;\n    }\n    if (current_arg[0][3] != 'p') {\n      return 1;\n    }\n    current_arg[0] = current_arg[0] + 4;\n  }\n  else {\n    current_arg[0] = current_arg[0] + 5;\n  }\n  cVar1 = stab_demangle_type_lto_priv_0(input_str,current_arg,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "check_and_demangle_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "create_new_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "populate_info_0010abdd",
                "param_1": "input_data",
                "param_2": "string1",
                "param_3": "size",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "data_ptr",
                "pcVar2": "str_ptr1",
                "bVar3": "byte_val",
                "pcVar4": "str_ptr2",
                "__s": "str_ptr3",
                "sVar5": "len1",
                "sVar6": "len2",
                "sVar7": "len3",
                "sVar8": "len4",
                "uVar9": "result",
                "cVar10": "char_val1",
                "cVar11": "char_val2",
                "local_52": "local_byte"
            },
            "code": "\nundefined8\npopulateInfo_0010abdd(long input_data,char *string1,uint size,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long data_ptr;\n  char *str_ptr1;\n  byte byte_val;\n  char *str_ptr2;\n  char *str_ptr3;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  undefined8 result;\n  char char_val1;\n  char char_val2;\n  byte local_byte;\n  \n  str_ptr3 = (char *)0x0;\n  local_byte = *(byte *)(*(long *)(input_data + 0x60) + 0x1c);\n  str_ptr2 = (char *)stab_pop_type();\n  if (flag4 != '\\0') {\n    byte_val = 1;\n    if (local_byte == 0) {\n      byte_val = *(byte *)(*(long *)(input_data + 0x60) + 0x1c);\n    }\n    local_byte = byte_val & 1;\n    str_ptr3 = (char *)stab_pop_type(input_data);\n  }\n  data_ptr = *(long *)(input_data + 0x60);\n  if ((data_ptr == 0) || (str_ptr1 = *(char **)(data_ptr + 0x30), str_ptr1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < size) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      char_val2 = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char_val2 = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char_val1 = '?';\n    if (flag1 == '\\0') {\n      char_val1 = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    len1 = strlen(str_ptr1);\n    len2 = strlen(str_ptr2);\n    len3 = strlen(string1);\n    len4 = 0;\n    if (flag4 != '\\0') {\n      len4 = strlen(str_ptr3);\n    }\n    result = xrealloc(str_ptr1,len3 + len1 + 0x28 + len2 + len4);\n    *(undefined8 *)(data_ptr + 0x30) = result;\n    str_ptr1 = *(char **)(*(long *)(input_data + 0x60) + 0x30);\n    len1 = strlen(str_ptr1);\n    sprintf(str_ptr1 + len1,\"%s:%s;%c%c%c\",str_ptr2,string1,(ulong)(byte)(0x32 - (char)size),\n            (ulong)(uint)(int)char_val2,(ulong)(uint)(int)char_val1,len1);\n    free(str_ptr2);\n    if (flag4 != '\\0') {\n      str_ptr2 = *(char **)(*(long *)(input_data + 0x60) + 0x30);\n      len1 = strlen(str_ptr2);\n      sprintf(str_ptr2 + len1,\"%ld;%s;\",value,str_ptr3);\n      free(str_ptr3);\n    }\n    if (local_byte != 0) {\n      *(undefined *)(*(long *)(input_data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "abort",
                "sprintf",
                "free",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "populate_info_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "value",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *parameters,undefined8 value)\n\n{\n  undefined8 value1;\n  undefined8 value2;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value1 = *parameters;\n    flags = flags & 0xf7ffffff;\n    value2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(value2,value1,value);\n  }\n  return flags;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "setup_section"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_result_001129f4",
                "param_1": "input_array",
                "puVar1": "pointer1",
                "piVar2": "pointer2"
            },
            "code": "\nundefined8 get_result_001129f4(int *input_array)\n\n{\n  undefined8 *pointer1;\n  int *pointer2;\n  \n  do {\n    if (*input_array != 1) {\n      if (1 < *input_array - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input_array + 4) + 8);\n    }\n    pointer1 = (undefined8 *)(input_array + 4);\n    pointer2 = **(int ***)(undefined8 *)*pointer1;\n  } while ((input_array != pointer2) && (input_array = pointer2, pointer2 != (int *)0x0));\n  return ((undefined8 *)*pointer1)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_result_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_inverse_001082b3",
                "uVar1": "isDwoSectionConstpropResult"
            },
            "code": "\nuint calculateInverse_001082b3(void)\n\n{\n  uint isDwoSectionConstpropResult;\n  \n  isDwoSectionConstpropResult = is_dwo_section_constprop_0();\n  return isDwoSectionConstpropResult ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_inverse_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_archive_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "fileStat",
                "param_5": "deplib",
                "param_6": "fileSize",
                "param_7": "copyOptions",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerPointerVar",
                "pvVar7": "voidPointerVar",
                "lVar8": "longVar1",
                "puVar9": "ptrVar1",
                "piVar10": "ptrIntVar",
                "uVar11": "ulongVar1",
                "uVar12": "ulongVar2",
                "lVar13": "longVar2",
                "puVar14": "inputFilePtr",
                "ppcVar16": "filePtr",
                "pcVar15": "tempDirPath",
                "pcVar17": "charVar3",
                "pcVar18": "charVar4",
                "__ptr": "position",
                "ppcVar19": "archivePtr",
                "pcVar20": "closeFunction",
                "lVar21": "longVar3",
                "uVar22": "uintVar1",
                "pcVar23": "charVar5",
                "psVar24": "statPtr",
                "bVar25": "boolVar",
                "bVar26": "byteVar2",
                "local_1a0": "localOutputFilePtr",
                "local_198": "localFileList",
                "local_158": "statStruct",
                "local_c8": "localTempDirs",
                "uStack_b0": "stackVar1",
                "lStack_98": "stackVar2",
                "status": "statusCode"
            },
            "code": "\nvoid copyArchive_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 fileStat,\n                 undefined8 deplib,long fileSize,undefined8 copyOptions)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **pointerPointerVar;\n  void *voidPointerVar;\n  long longVar1;\n  undefined8 *ptrVar1;\n  int *ptrIntVar;\n  undefined8 ulongVar1;\n  undefined8 ulongVar2;\n  long longVar2;\n  undefined8 *inputFilePtr;\n  char *tempDirPath;\n  char **filePtr;\n  char *charVar3;\n  char *charVar4;\n  undefined8 *position;\n  char **archivePtr;\n  code *closeFunction;\n  long longVar3;\n  uint uintVar1;\n  char *charVar5;\n  stat *statPtr;\n  bool boolVar;\n  byte byteVar2;\n  undefined8 *localOutputFilePtr;\n  long *localFileList;\n  stat statStruct;\n  void *localTempDirs [3];\n  uint stackVar1;\n  long stackVar2;\n  \n  byteVar2 = 0;\n  longVar2 = get_file_size();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      ulongVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      non_fatal(ulongVar2,inputFilePath);\n    }\n    statusCode = 1;\n    return;\n  }\n  inputFilePtr = (undefined8 *)bfd_openr(inputFilePath,deplib);\n  if ((inputFilePtr == (undefined8 *)0x0) || (intVar2 = bfd_stat(inputFilePtr,fileStat), intVar2 != 0)) {\n    bfd_nonfatal_message(inputFilePath,0,0,0);\n    statusCode = 1;\n    return;\n  }\n  switch(do_debug_sections) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0x8000;\n  }\n  if (do_elf_stt_common == 1) {\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0xc0000;\n  }\n  else if (do_elf_stt_common == 2) {\n    *(uint *)((long)inputFilePtr + 0x44) = *(uint *)((long)inputFilePtr + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(inputFilePtr,2);\n  if (charVar1 != '\\0') {\n    if (fileSize == 0) {\n      charVar1 = '\\0';\n      fileSize = *(long *)inputFilePtr[1];\n    }\n    if (fileDescriptor < 0) {\n      localOutputFilePtr = (undefined8 *)bfd_openw(outputFilePath,fileSize);\n    }\n    else {\n      localOutputFilePtr = (undefined8 *)bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n    }\n    if (localOutputFilePtr != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        ulongVar2 = *inputFilePtr;\n        ulongVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        non_fatal(ulongVar1,ulongVar2);\n        gnu_debuglink_filename = 0;\n      }\n      set_long_section_mode(localOutputFilePtr,inputFilePtr,long_section_names);\n      localFileList = localOutputFilePtr + 0x1f;\n      if ((*(byte *)((long)inputFilePtr + 0x49) & 0x10) != 0) {\n        statusCode = 1;\n        bfd_set_error(5);\n        ulongVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfd_nonfatal_message(0,inputFilePtr,0,ulongVar2);\n        return;\n      }\n      tempDirPath = (char *)make_tempdir(*localOutputFilePtr);\n      if (tempDirPath == (char *)0x0) {\n        ptrIntVar = __errno_location();\n        tempDirPath = strerror(*ptrIntVar);\n        ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        fatal(ulongVar2,tempDirPath);\n      }\n      if (strip_symbols == 7) {\n        byteVar1 = *(byte *)((long)inputFilePtr + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)inputFilePtr + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar = deterministic != 0;\n      *(byte *)((long)localOutputFilePtr + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)localOutputFilePtr + 0x49) & 0xe7;\n      if (boolVar) {\n        *(uint *)((long)localOutputFilePtr + 0x44) = *(uint *)((long)localOutputFilePtr + 0x44) | 0x2000;\n      }\n      position = (undefined8 *)0x0;\n      filePtr = (char **)bfd_openr_next_archived_file(inputFilePtr,0);\n      charVar2 = bfd_set_format(localOutputFilePtr,*(byte *)(inputFilePtr + 9) & 7);\n      if (charVar2 == '\\0') {\n        statusCode = 1;\n        bfd_nonfatal_message(0,localOutputFilePtr,0,0);\n        delete_directory_00114b84();\n        return;\n      }\n      while ((statusCode == 0 && (filePtr != (char **)0x0))) {\n        charVar4 = *filePtr;\n        charVar3 = charVar4;\n        if (*charVar4 == '/') {\nLAB_0010527d:\n          ulongVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          non_fatal(ulongVar2,charVar4);\nLAB_00104e93:\n          statusCode = 1;\n          goto LAB_00114b4b;\n        }\n        while (*charVar3 != '\\0') {\n          charVar5 = charVar3;\n          if ((*charVar3 == '.') && (charVar5 = charVar3 + 1, charVar3[1] == '.')) {\n            charVar5 = charVar3 + 2;\n            if ((charVar3[2] == '\\0') || (charVar3[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*charVar5 != '\\0' && (*charVar5 != '/')); charVar5 = charVar5 + 1) {\n          }\n          charVar3 = charVar5;\n          if (*charVar5 == '/') {\n            copy_archive_001052a2();\n            return;\n          }\n        }\n        charVar4 = (char *)concat(tempDirPath,&DAT_0011b47d);\n        intVar2 = stat(charVar4,&statStruct);\n        ptrVar1 = position;\n        if (-1 < intVar2) {\n          longVar2 = make_tempdir(charVar4);\n          free(charVar4);\n          if (longVar2 == 0) {\n            ptrIntVar = __errno_location();\n            charVar4 = strerror(*ptrIntVar);\n            ulongVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            non_fatal(ulongVar2,charVar4);\n            goto LAB_00104e93;\n          }\n          ptrVar1 = (undefined8 *)xmalloc(0x18);\n          charVar4 = *filePtr;\n          *ptrVar1 = position;\n          ptrVar1[2] = 0;\n          ptrVar1[1] = longVar2;\n          charVar4 = (char *)concat(longVar2,&DAT_0011b47d,charVar4);\n        }\n        intVar2 = 0;\n        if (preserve_dates != '\\0') {\n          statPtr = &statStruct;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&statPtr->st_dev = 0;\n            statPtr = (stat *)((long)statPtr + (ulong)byteVar2 * -8 + 4);\n          }\n          archivePtr = (char **)filePtr[0x1d];\n          if ((char **)filePtr[0x1d] == (char **)0x0) {\n            archivePtr = filePtr;\n          }\n          intVar2 = (**(code **)(archivePtr[1] + 0x1e8))(filePtr,&statStruct);\n          if (intVar2 != 0) {\n            charVar3 = *filePtr;\n            ulongVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            non_fatal(ulongVar2,charVar3);\n          }\n        }\n        position = (undefined8 *)xmalloc(0x18);\n        position[1] = charVar4;\n        *position = ptrVar1;\n        position[2] = 0;\n        charVar2 = bfd_check_format(filePtr,1);\n        if (charVar2 == '\\0') {\n          ulongVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          bfd_nonfatal_message(0,filePtr,0,ulongVar2);\n          archivePtr = (char **)bfd_openw(charVar4,fileSize);\n          if (archivePtr == (char **)0x0) {\nLAB_00104e80:\n            bfd_nonfatal_message(charVar4,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerPointerVar = (char **)filePtr[0x1d];\n          if ((char **)filePtr[0x1d] == (char **)0x0) {\n            pointerPointerVar = filePtr;\n          }\n          intVar1 = (**(code **)(pointerPointerVar[1] + 0x1e8))(filePtr);\n          longVar2 = stackVar2;\n          if (intVar1 == 0) {\n            if (stackVar2 < 0) {\n              bfd_get_archive_filename(filePtr);\n              ulongVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              non_fatal(ulongVar2);\n            }\n            else {\n              intVar1 = bfd_seek(filePtr,0,0);\n              if (intVar1 == 0) {\n                if (verbose != '\\0') {\n                  charVar3 = *archivePtr;\n                  ulongVar2 = bfd_get_archive_filename(filePtr);\n                  charVar5 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(charVar5,ulongVar2,charVar3);\n                }\n                voidPointerVar = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPointerVar,longVar3,filePtr);\n                  pointerPointerVar = filePtr;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPointerVar,longVar3,archivePtr), pointerPointerVar = archivePtr,\n                     longVar3 != longVar1)) {\n                    bfd_nonfatal_message(0,pointerPointerVar,0,0);\n                    free(voidPointerVar);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*archivePtr,stackVar1 | 0x100);\n                free(voidPointerVar);\n                charVar2 = bfd_close_all_done(archivePtr);\n                if (charVar2 == '\\0') {\n                  bfd_nonfatal_message(charVar4,0,0,0);\n                  statusCode = 1;\n                }\n                goto LAB_00114a86;\n              }\n              ulongVar2 = bfd_get_archive_filename(filePtr);\n              bfd_nonfatal(ulongVar2);\n            }\n          }\n          else {\n            bfd_nonfatal_message(0,filePtr,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(archivePtr);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(charVar4,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(charVar4);\n          statusCode = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            archivePtr = (char **)bfd_openw(charVar4,*(undefined8 *)filePtr[1]);\n          }\n          else {\n            archivePtr = (char **)bfd_openw(charVar4,fileSize);\n          }\n          if (archivePtr == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copy_object(filePtr,archivePtr,copyOptions);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(filePtr);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(archivePtr);\n            if (charVar2 == '\\0') {\n              bfd_nonfatal_message(charVar4,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(archivePtr);\n          if (charVar2 == '\\0') {\n            bfd_nonfatal_message(charVar4,0,0,0);\n            statusCode = 1;\n          }\nLAB_00114a86:\n          if ((preserve_dates != '\\0') && (intVar2 == 0)) {\n            set_times(charVar4,&statStruct);\n          }\n          longVar2 = bfd_openr(charVar4,fileSize);\n          position[2] = longVar2;\n          *localFileList = longVar2;\n          localFileList = (long *)(longVar2 + 0xf0);\n          archivePtr = (char **)bfd_openr_next_archived_file(inputFilePtr);\n          bfd_close(filePtr);\n          filePtr = archivePtr;\n        }\n      }\n      *localFileList = 0;\n      voidPointerVar = (void *)xstrdup(*localOutputFilePtr);\n      if (statusCode == 0) {\n        closeFunction = bfd_close;\n      }\n      else {\n        closeFunction = bfd_close_all_done;\n      }\n      charVar1 = (*closeFunction)(localOutputFilePtr);\n      if (charVar1 == '\\0') {\n        statusCode = 1;\n        bfd_nonfatal_message(voidPointerVar,0,0,0);\n      }\n      free(voidPointerVar);\n      voidPointerVar = (void *)xstrdup(*inputFilePtr);\n      charVar1 = bfd_close(inputFilePtr);\n      if (charVar1 == '\\0') {\n        statusCode = 1;\n        bfd_nonfatal_message(voidPointerVar,0,0,0);\n      }\n      free(voidPointerVar);\nLAB_00114b4b:\n      while (position != (undefined8 *)0x0) {\n        if (position[2] == 0) {\n          rmdir((char *)position[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)position[1]);\n        }\n        free((void *)position[1]);\n        inputFilePtr = (undefined8 *)*position;\n        free(position);\n        position = inputFilePtr;\n      }\n      rmdir(tempDirPath);\n      free(tempDirPath);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfd_nonfatal_message(outputFilePath,0,0,0);\n    statusCode = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(inputFilePtr,1,localTempDirs);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(inputFilePtr,3,&statStruct);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      bfd_nonfatal_message(inputFilePath,0,0,0);\n      if (intVar2 == 0xd) {\n        list_matching_formats(localTempDirs[0]);\n      }\n      if (intVar1 != 0xd) {\n        statusCode = 1;\n        return;\n      }\n      list_matching_formats(statStruct.st_dev);\n      statusCode = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(localTempDirs[0]);\n    }\n  }\n  if (fileSize == 0) {\n    fileSize = *(long *)inputFilePtr[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,fileSize);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,fileSize,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  set_long_section_mode(longVar2,inputFilePtr,long_section_names);\n  charVar1 = copy_object(inputFilePtr,longVar2,copyOptions);\n  if (charVar1 == '\\0') {\n    statusCode = 1;\n  }\n  else if (statusCode == 0) {\n    charVar1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    statusCode = 1;\n    bfd_nonfatal_message(outputFilePath,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(inputFilePtr);\n  if (charVar1 == '\\0') {\n    statusCode = 1;\n    bfd_nonfatal_message(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done",
                "set_long_section_mode",
                "get_file_size",
                "bfd_openw",
                "bfd_set_error",
                "non_fatal",
                "bfd_close",
                "copy_object",
                "bfd_set_format",
                "list_matching_formats",
                "bfd_openr",
                "free",
                "strerror",
                "make_tempdir",
                "dcgettext",
                "fatal",
                "copy_file.cold",
                "bfd_fdopenw",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_check_format_matches",
                "bfd_get_error",
                "close",
                "bfd_stat",
                "bfd_check_format",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_archive_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "push_defined_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "pointer",
                "uVar2": "result",
                "sVar3": "stringLength",
                "lVar4": "value1",
                "lVar5": "value2",
                "local_8c": "formattedString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 pushDefinedType_0010b800(long baseAddress,int size,char flag)\n\n{\n  long *pointer;\n  undefined8 result;\n  size_t stringLength;\n  long value1;\n  long value2;\n  undefined2 formattedString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    value1 = baseAddress + 0xb8;\n    if (flag != '\\0') {\n      value1 = baseAddress + 0x78;\n    }\n    pointer = (long *)(value1 + (ulong)(size - 1U) * 8);\n    value1 = *pointer;\n    if (value1 != 0) {\n      result = stab_push_defined_type(baseAddress,value1,size);\n      return result;\n    }\n    value1 = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = value1 + 1;\n    *pointer = value1;\n    sprintf((char *)&formattedString,\"%ld=r%ld;\",value1,value1);\n    if (flag == '\\0') {\n      value2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&formattedString);\n      sprintf((char *)((long)&formattedString + stringLength),\"%ld;%ld;\",-value2,value2 + -1);\n    }\n    else {\n      stringLength = strlen((char *)&formattedString);\n      *(undefined2 *)((long)&formattedString + stringLength) = 0x3b30;\n      *(undefined *)((long)&formattedString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&formattedString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&formattedString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(baseAddress,&formattedString,value1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "non_fatal",
                "strlen",
                "stab_push_string",
                "sprintf",
                "dcgettext",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "stab_float_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "extract_and_store_string_00109ed3",
                "param_1": "binaryAddress",
                "param_2": "paramValue",
                "param_3": "formatSpecifier",
                "param_4": "stringArray",
                "param_5": "arraySize",
                "uVar1": "stringLength",
                "uVar2": "newArraySize",
                "cVar3": "successFlag",
                "pcVar4": "poppedString",
                "sVar5": "poppedStringLength",
                "__s": "newString",
                "lVar6": "tempAddress",
                "__ptr": "deallocAddress",
                "uVar7": "returnVal",
                "uVar8": "isDefined",
                "lVar9": "loopVar",
                "uVar10": "currentArraySize",
                "puVar11": "arrayPointer",
                "bVar12": "loopIncrement"
            },
            "code": "\nundefined8 extractAndStoreString_00109ed3(long binaryAddress,uint paramValue,undefined4 formatSpecifier,long *stringArray,ulong *arraySize)\n\n{\n  ulong stringLength;\n  ulong newArraySize;\n  char successFlag;\n  char *poppedString;\n  size_t poppedStringLength;\n  char *newString;\n  long tempAddress;\n  void *deallocAddress;\n  undefined8 returnVal;\n  undefined isDefined;\n  long loopVar;\n  ulong currentArraySize;\n  undefined *arrayPointer;\n  byte loopIncrement;\n  \n  loopIncrement = 0;\n  tempAddress = *(long *)(binaryAddress + 0x60);\n  if (tempAddress != 0) {\n    stringLength = *(ulong *)(tempAddress + 0x10);\n    if (((long)stringLength < 1) || (stringArray == (long *)0x0)) {\n      isDefined = *(undefined *)(tempAddress + 0x1c);\n      poppedString = (char *)stab_pop_type(binaryAddress);\n      poppedStringLength = strlen(poppedString);\n      newString = (char *)xmalloc(poppedStringLength + 2);\n      sprintf(newString,\"%c%s\",(ulong)paramValue,poppedString);\n      free(poppedString);\n      tempAddress = 0;\n    }\n    else {\n      currentArraySize = *arraySize;\n      if (currentArraySize <= stringLength) {\n        if (currentArraySize == 0) {\n          currentArraySize = 10;\n        }\n        for (; currentArraySize <= stringLength; currentArraySize = currentArraySize * 2) {\n        }\n        tempAddress = xrealloc(*stringArray,currentArraySize * 8);\n        newArraySize = *arraySize;\n        *stringArray = tempAddress;\n        arrayPointer = (undefined *)(tempAddress + newArraySize * 8);\n        for (loopVar = (currentArraySize - newArraySize) * 8; loopVar != 0; loopVar = loopVar + -1) {\n          *arrayPointer = 0;\n          arrayPointer = arrayPointer + (ulong)loopIncrement * -2 + 1;\n        }\n        *arraySize = currentArraySize;\n      }\n      tempAddress = *(long *)(*stringArray + stringLength * 8);\n      if ((tempAddress != 0) && (*(char *)(*(long *)(binaryAddress + 0x60) + 0x1c) == '\\0')) {\n        deallocAddress = (void *)stab_pop_type(binaryAddress);\n        free(deallocAddress);\n        returnVal = stab_push_defined_type(binaryAddress,tempAddress,formatSpecifier);\n        return returnVal;\n      }\n      tempAddress = *(long *)(binaryAddress + 0x68);\n      *(long *)(binaryAddress + 0x68) = tempAddress + 1;\n      poppedString = (char *)stab_pop_type(binaryAddress);\n      poppedStringLength = strlen(poppedString);\n      newString = (char *)xmalloc(poppedStringLength + 0x14);\n      sprintf(newString,\"%ld=%c%s\",tempAddress,(ulong)paramValue,poppedString);\n      free(poppedString);\n      isDefined = 1;\n      *(long *)(*stringArray + stringLength * 8) = tempAddress;\n    }\n    successFlag = stab_push_string(binaryAddress,newString,tempAddress,isDefined,formatSpecifier);\n    if (successFlag != '\\0') {\n      free(newString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_const_type.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_store_string_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "loopCounter",
                "puVar5": "ptr4",
                "pcVar6": "selectedFilename",
                "bVar7": "counter",
                "auVar8": "resultArray"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loopCounter;\n  undefined4 *ptr4;\n  char *selectedFilename;\n  byte counter;\n  undefined resultArray [16];\n  \n  counter = 0;\n  selectedFilename = \"\";\n  if (filename != (char *)0x0) {\n    selectedFilename = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)counter * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = selectedFilename;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)counter * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  resultArray._8_8_ = param4;\n  resultArray._0_8_ = 1;\n  return resultArray;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = reengineer_function_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "non_fatal",
                "dcgettext",
                "bfd_set_format",
                "bfd_get_archive_filename",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_sym_value_00115d00",
                "param_1": "inputValue",
                "param_2": "binaryData",
                "uVar1": "byteValue",
                "lVar2": "result",
                "isympp": "symbolPointer"
            },
            "code": "\nlong findSymValue_00115d00(long inputValue,long binaryData)\n\n{\n  uint byteValue;\n  long result;\n  \n  result = symbolPointer;\n  if (symbolPointer != 0) {\n    if (*(int *)(*(long *)(binaryData + 8) + 8) == 5) {\n      if (*(int *)(inputValue + 0x28) == *(int *)(*(long *)(binaryData + 0x110) + 0xd40)) {\n        byteValue = *(uint *)(inputValue + 0x2c);\n        if (byteValue == 0) {\n          result = 0;\n        }\n        else if ((ulong)byteValue <\n                 *(ulong *)(*(long *)(binaryData + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryData + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(symbolPointer + (ulong)(byteValue - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "find_sym_value_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_debug_type_00113c43",
                "param_1": "type",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "lVar1": "debugType",
                "plVar2": "debugPtr",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ninitializeDebugType_00113c43(long type,long size,long param3,long param4,undefined param5,\n            undefined8 param6)\n\n{\n  long debugType;\n  long *debugPtr;\n  undefined result [16];\n  \n  if ((type != 0) && (size != 0)) {\n    debugType = debug_make_type_constprop_0(0x10,0);\n    if (debugType != 0) {\n      debugPtr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)debugPtr + 0x21) = 0;\n      *debugPtr = type;\n      *(undefined4 *)((long)debugPtr + 0x24) = 0;\n      debugPtr[1] = size;\n      debugPtr[2] = param3;\n      debugPtr[3] = param4;\n      *(undefined *)(debugPtr + 4) = param5;\n      *(long **)(debugType + 0x10) = debugPtr;\n      goto LAB_00113caa;\n    }\n  }\n  debugType = 0;\nLAB_00113caa:\n  result._8_8_ = param6;\n  result._0_8_ = debugType;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "get_file_size.cold",
                "FUN_00107880",
                "smart_rename.cold",
                "main",
                "section_add_load_file.cold",
                "set_times.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_information_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "result",
                "lVar2": "type",
                "plVar3": "slotPointer"
            },
            "code": "\nbool recordDebugInformation_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined result;\n  long type;\n  long *slotPointer;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,4,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 4:\n        result = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,5,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 9:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,1,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        type = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (type == 0) {\n          return false;\n        }\n        slotPointer = (long *)coff_get_slot_lto_priv_0(param1,param3);\n        *slotPointer = type;\n        break;\n      case 0xd:\n        type = debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return type != 0;\n      case 0x11:\n        result = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)result;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = debug_record_variable\n                      (param5,*(undefined8 *)(param2 + 8),param6,1,\n                       *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_record_parameter",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "debug_tag_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_information_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "identify_type_0010c2d2",
                "param_1": "debugInfo",
                "param_2": "typeTable",
                "param_3": "typeInfo",
                "uVar1": "type",
                "pcVar2": "typeString",
                "uVar3": "newType",
                "lVar4": "typeAddress",
                "plVar5": "slotAddress",
                "uVar6": "index"
            },
            "code": "\n\n\nlong identifyType_0010c2d2(undefined8 debugInfo,long typeTable,int *typeInfo)\n\n{\n  uint type;\n  char *typeString;\n  undefined8 newType;\n  long typeAddress;\n  long *slotAddress;\n  uint index;\n  \n  if ((*typeInfo == 0) && (type = typeInfo[1], (int)type < 0)) {\n    index = ~type;\n    if (index < 0x22) {\n      typeAddress = *(long *)(typeTable + 0x90 + (ulong)index * 8);\n      if (typeAddress == 0) {\n        switch(index) {\n        case 1:\n          newType = debug_make_int_type_isra_0(1,0);\n          typeString = \"char\";\n          break;\n        case 2:\n          newType = debug_make_int_type_isra_0(2,0);\n          typeString = \"short\";\n          break;\n        case 3:\n          newType = debug_make_int_type_isra_0(4,0);\n          typeString = \"long\";\n          break;\n        case 4:\n          newType = debug_make_int_type_isra_0(1,1);\n          typeString = \"unsigned char\";\n          break;\n        case 5:\n          newType = debug_make_int_type_isra_0(1,0);\n          typeString = \"signed char\";\n          break;\n        case 6:\n          newType = debug_make_int_type_isra_0(2,1);\n          typeString = \"unsigned short\";\n          break;\n        case 7:\n          newType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned int\";\n          break;\n        case 8:\n          newType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned\";\n          break;\n        case 9:\n          newType = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned long\";\n          break;\n        case 10:\n          newType = debug_make_void_type_isra_0();\n          typeString = \"void\";\n          break;\n        case 0xb:\n          newType = debug_make_float_type_isra_0(4);\n          typeString = \"float\";\n          break;\n        case 0xc:\n          newType = debug_make_float_type_isra_0(8);\n          typeString = \"double\";\n          break;\n        case 0xd:\n          newType = debug_make_float_type_isra_0(8);\n          typeString = \"long double\";\n          break;\n        case 0xe:\n          newType = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer\";\n          break;\n        case 0xf:\n          newType = debug_make_type_constprop_0(6,4);\n          typeString = \"boolean\";\n          break;\n        case 0x10:\n          newType = debug_make_float_type_isra_0(4);\n          typeString = \"short real\";\n          break;\n        case 0x11:\n          newType = debug_make_float_type_isra_0(8);\n          typeString = \"real\";\n          break;\n        case 0x12:\n          typeString = \"stringptr\";\n          newType = 0;\n          break;\n        case 0x13:\n          newType = debug_make_int_type_isra_0(1,1);\n          typeString = \"character\";\n          break;\n        case 0x14:\n          newType = debug_make_type_constprop_0(6,1);\n          typeString = \"logical*1\";\n          break;\n        case 0x15:\n          newType = debug_make_type_constprop_0(6,2);\n          typeString = \"logical*2\";\n          break;\n        case 0x16:\n          newType = debug_make_type_constprop_0(6,4);\n          typeString = \"logical*4\";\n          break;\n        case 0x17:\n          newType = debug_make_type_constprop_0(6,4);\n          typeString = \"logical\";\n          break;\n        case 0x18:\n          newType = debug_make_type_constprop_0(5,8);\n          typeString = \"complex\";\n          break;\n        case 0x19:\n          newType = debug_make_type_constprop_0(5,0x10);\n          typeString = \"double complex\";\n          break;\n        case 0x1a:\n          newType = debug_make_int_type_isra_0(1,0);\n          typeString = \"integer*1\";\n          break;\n        case 0x1b:\n          newType = debug_make_int_type_isra_0(2,0);\n          typeString = \"integer*2\";\n          break;\n        case 0x1c:\n          newType = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer*4\";\n          break;\n        case 0x1d:\n          newType = debug_make_int_type_isra_0(2,0);\n          typeString = \"wchar\";\n          break;\n        case 0x1e:\n          newType = debug_make_int_type_isra_0(8,0);\n          typeString = \"long long\";\n          break;\n        case 0x1f:\n          newType = debug_make_int_type_isra_0(8,1);\n          typeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          newType = debug_make_type_constprop_0(6,8);\n          typeString = \"logical*8\";\n          break;\n        case 0x21:\n          newType = debug_make_int_type_isra_0(8,0);\n          typeString = \"integer*8\";\n          break;\n        default:\n          newType = debug_make_int_type_isra_0(4,0);\n          typeString = \"int\";\n        }\n        typeAddress = debug_name_type(debugInfo,typeString,newType);\n        *(long *)(typeTable + 0x90 + (ulong)index * 8) = typeAddress;\n        return typeAddress;\n      }\n      return typeAddress;\n    }\n    typeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeString,(ulong)type);\n  }\n  else {\n    slotAddress = (long *)stab_find_slot(typeTable);\n    if (slotAddress != (long *)0x0) {\n      if (*slotAddress == 0) {\n        typeAddress = debug_make_indirect_type_isra_0(slotAddress,0);\n        return typeAddress;\n      }\n      return *slotAddress;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "dcgettext",
                "debug_name_type",
                "stab_find_slot",
                "debug_make_float_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "identify_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_types_0010e07c",
                "param_1": "param_bfd",
                "param_2": "param_syms",
                "param_3": "param_symtab",
                "param_4": "param_is_lto",
                "param_5": "param_hdr",
                "param_6": "param_xmalloc",
                "lVar1": "sec_hdr",
                "lVar2": "sym",
                "lVar3": "sym_idx",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "parsed_types",
                "uVar6": "type_size",
                "uVar7": "field_type_size",
                "puVar8": "type_entry",
                "pcVar9": "error_msg",
                "puVar10": "aux_info",
                "uVar11": "flags",
                "lVar12": "type_count",
                "iVar13": "member_offset",
                "iVar14": "type_capacity",
                "local_a8": "local_type",
                "uStack_a4": "local_type_high",
                "uStack_a0": "local_field_type",
                "uStack_9c": "local_field_type_high",
                "local_88": "sym_info",
                "local_6a": "aux_idx",
                "local_68": "aux_type",
                "local_67": "aux_count",
                "local_60": "aux_info_buffer",
                "local_56": "section_idx"
            },
            "code": "\nundefined8\nparse_coff_types_0010e07c(undefined8 param_bfd,long *param_syms,undefined8 param_symtab,int param_is_lto,long param_hdr,\n            undefined8 param_xmalloc)\n\n{\n  long sec_hdr;\n  long sym;\n  long sym_idx;\n  char result;\n  undefined4 error_code;\n  void *parsed_types;\n  undefined8 type_size;\n  undefined8 field_type_size;\n  undefined4 *type_entry;\n  char *error_msg;\n  undefined *aux_info;\n  uint flags;\n  long type_count;\n  int member_offset;\n  int type_capacity;\n  undefined4 local_type;\n  undefined4 local_type_high;\n  undefined4 local_field_type;\n  undefined4 local_field_type_high;\n  undefined sym_info [30];\n  undefined2 aux_idx;\n  byte aux_type;\n  byte aux_count;\n  undefined aux_info_buffer [10];\n  ushort section_idx;\n  \n  type_capacity = 10;\n  type_count = 0;\n  sec_hdr = *(long *)(param_hdr + 0x18);\n  parsed_types = (void *)xmalloc(0x50);\n  while ((param_syms[3] < sec_hdr && (param_syms[2] < param_syms[1]))) {\n    sym = *(long *)(*param_syms + param_syms[2] * 8);\n    result = bfd_coff_get_syment(param_bfd,sym,sym_info);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      type_size = bfd_errmsg(error_code);\n      error_msg = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      field_type_size = dcgettext(0,error_msg,5);\n      non_fatal(field_type_size,type_size);\n      free(parsed_types);\n      return 0;\n    }\n    sym_idx = param_syms[3];\n    aux_info = (undefined *)0x0;\n    param_syms[2] = param_syms[2] + 1;\n    param_syms[3] = sym_idx + 1 + (ulong)aux_count;\n    if (aux_count != 0) {\n      aux_info = aux_info_buffer;\n      result = bfd_coff_get_auxent(param_bfd,sym,0,aux_info);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        type_size = bfd_errmsg(error_code);\n        error_msg = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (aux_type == 0x12) {\n      flags = (uint)section_idx;\n      member_offset = (int)*(undefined8 *)(sym + 0x10) +\n               (int)*(undefined8 *)(*(long *)(sym + 0x20) + 0x30);\n    }\n    else {\n      if (aux_type < 0x13) {\n        if ((aux_type == 8) || (aux_type == 0xb)) {\n          flags = 0;\n          member_offset = ((int)*(undefined8 *)(sym + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(sym + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (aux_type == 0x66) break;\n      flags = 0;\n      member_offset = 0;\n    }\nLAB_0010e214:\n    field_type_size = parse_coff_type_lto_priv_0(param_bfd,param_syms,param_symtab,sym_idx,aux_idx,aux_info,1);\n    type_size = *(undefined8 *)(sym + 8);\n    type_entry = (undefined4 *)xmalloc(0x20);\n    local_type = (undefined4)type_size;\n    local_type_high = (undefined4)((ulong)type_size >> 0x20);\n    local_field_type = (undefined4)field_type_size;\n    local_field_type_high = (undefined4)((ulong)field_type_size >> 0x20);\n    *(undefined8 *)(type_entry + 5) = 0;\n    type_entry[6] = member_offset;\n    type_entry[7] = flags;\n    type_entry[4] = 0;\n    *type_entry = local_type;\n    type_entry[1] = local_type_high;\n    type_entry[2] = local_field_type;\n    type_entry[3] = local_field_type_high;\n    if (type_capacity <= (int)type_count + 1) {\n      type_capacity = type_capacity + 10;\n      parsed_types = (void *)xrealloc(parsed_types,(long)type_capacity << 3,type_entry,0,param_xmalloc);\n    }\n    *(undefined4 **)((long)parsed_types + type_count * 8) = type_entry;\n    type_count = type_count + 1;\n  }\n  *(undefined8 *)((long)parsed_types + (long)(int)type_count * 8) = 0;\n  type_size = debug_make_struct_type_isra_0(param_is_lto == 8,*(undefined2 *)(param_hdr + 10),parsed_types);\n  return type_size;\n}\n\n",
            "called": [
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "non_fatal",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "dcgettext",
                "free",
                "xmalloc",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_types_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3"
            },
            "code": "\nundefined8 getDefaultValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_parse_file_00114460",
                "param_1": "filename",
                "param_2": "hashTable",
                "param_3": "fileData",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashSlot",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextChar",
                "pbVar10": "currentPos",
                "pbVar11": "nextPos",
                "pbVar12": "lineStartPos",
                "iVar1": "lineNumber",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage"
            },
            "code": "\nvoid readAndParseFile_00114460(char *filename,undefined8 hashTable,byte **fileData)\n\n{\n  int lineNumber;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashSlot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextChar;\n  byte *currentPos;\n  byte *nextPos;\n  byte *lineStartPos;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(errorMessage,filename,errorString);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,filename);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    lineStartPos = fileBuffer;\n    while (currentPos = lineStartPos, currentByte != 0) {\n      for (; currentByte = *currentPos, nextPos = currentPos, currentByte != 10; currentPos = currentPos + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextChar = currentPos + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPos = 0;\n            nextChar = currentPos + 1;\n            if (currentPos[1] == 10) {\n              nextChar = currentPos + 2;\n              nextPos = currentPos + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            parse_input_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPos = 0;\n      if (currentPos[1] == 0xd) {\n        nextPos = currentPos + 1;\n        nextChar = currentPos + 2;\n      }\n      else {\n        nextChar = currentPos + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartPos;\n      while ((currentByte == 0x20 || (currentPos = lineStartPos, currentByte == 9))) {\n        currentPos = lineStartPos + 1;\n        lineStartPos = lineStartPos + 1;\n        currentByte = *currentPos;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPos[1];\n        currentPos = currentPos + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPos[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPos[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPos[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPos[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPos[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPos[6];\n          currentChar = currentPos + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(errorMessage,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *currentPos = 0;\n      if (lineStartPos < currentPos) {\n        hashSlot = (byte **)htab_find_slot(hashTable,lineStartPos,1);\n        *hashSlot = lineStartPos;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPos = nextChar;\n      currentByte = nextPos[1];\n    }\n    *fileData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "fread",
                "ferror",
                "dcgettext",
                "fopen",
                "get_file_size",
                "fatal",
                "fclose",
                "xmalloc",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_parse_file_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "format_and_assign_key_value_pair_0010a94e",
                "param_1": "input",
                "param_2": "key",
                "param_3": "suffix",
                "param_4": "flag",
                "cVar1": "flagValue",
                "__s": "value",
                "sVar3": "keyLength",
                "sVar4": "inputLength",
                "sVar5": "valueLength",
                "sVar6": "suffixLength",
                "pcVar7": "formattedPair",
                "uVar8": "returnValue",
                "pcVar9": "statusSuffix",
                "lVar2": "dataPtr"
            },
            "code": "\nundefined8 formatAndAssignKeyValuePair_0010a94e(long input,char *key,char *suffix,int flag)\n\n{\n  char flagValue;\n  long dataPtr;\n  char *value;\n  size_t keyLength;\n  size_t inputLength;\n  size_t valueLength;\n  size_t suffixLength;\n  char *formattedPair;\n  undefined8 returnValue;\n  char *statusSuffix;\n  \n  flagValue = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  value = (char *)stab_pop_type();\n  formattedPair = *(char **)(*(long *)(input + 0x60) + 0x20);\n  if (formattedPair == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    keyLength = strlen(formattedPair);\n    inputLength = strlen(key);\n    valueLength = strlen(value);\n    suffixLength = strlen(suffix);\n    formattedPair = (char *)xmalloc(keyLength + 10 + inputLength + valueLength + suffixLength);\n    if (flag == 1) {\n      statusSuffix = \"/1\";\n    }\n    else {\n      statusSuffix = \"/0\";\n      if ((flag != 2) && (statusSuffix = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedPair,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(input + 0x60) + 0x20),key,statusSuffix,\n            value,suffix,*(long *)(input + 0x60));\n    free(*(void **)(*(long *)(input + 0x60) + 0x20));\n    dataPtr = *(long *)(input + 0x60);\n    *(char **)(dataPtr + 0x20) = formattedPair;\n    if (flagValue != '\\0') {\n      *(undefined *)(dataPtr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "format_and_assign_key_value_pair_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "get_real_type_00113b1e",
                "param_1": "input",
                "param_3": "result",
                "auVar1": "output",
                "piVar2": "typeInfo",
                "uVar3": "value",
                "auVar4": "resultObj"
            },
            "code": "\nundefined  [16] getRealType_00113b1e(long input,undefined8 param_2,ulong result,undefined8 param_4)\n\n{\n  undefined output [16];\n  int *typeInfo;\n  undefined8 value;\n  undefined resultObj [16];\n  \n  if (input != 0) {\n    typeInfo = (int *)debug_get_real_type_isra_0(input,0);\n    if ((typeInfo == (int *)0x0) || (3 < *typeInfo - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(typeInfo + 4);\n    }\n    resultObj._8_8_ = param_4;\n    resultObj._0_8_ = value;\n    return resultObj;\n  }\n  output._8_8_ = 0;\n  output._0_8_ = result;\n  return output << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "get_real_type_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "bfd_get_archive_filename",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "process_data_0010a0e9",
                "param_1": "dataAddress",
                "param_2": "value1",
                "param_3": "value2",
                "__s": "string",
                "sVar3": "stringLength",
                "__s_00": "newString",
                "uVar1": "type",
                "uVar2": "result"
            },
            "code": "\nundefined4 processData_0010a0e9(long dataAddress,undefined8 value1,undefined8 value2)\n\n{\n  undefined type;\n  undefined4 result;\n  char *string;\n  size_t stringLength;\n  char *newString;\n  \n  type = *(undefined *)(*(long *)(dataAddress + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(dataAddress + 0x60) + 0x18);\n  string = (char *)stab_pop_type();\n  stringLength = strlen(string);\n  newString = (char *)xmalloc(stringLength + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  result = stab_push_string(dataAddress,newString,0,type,result);\n  if ((char)result != '\\0') {\n    free(newString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryAddress",
                "cVar1": "startsWithData",
                "pcVar2": "sectionAddress",
                "sections_removed": "numSectionsRemoved"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryAddress)\n\n{\n  char startsWithData;\n  char *sectionAddress;\n  \n  find_section_list(binaryAddress,1,1);\n  startsWithData = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (startsWithData != '\\0') {\n    sectionAddress = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      sectionAddress = (char *)(binaryAddress + 4);\n    }\n    if (*sectionAddress != '\\0') {\n      find_section_list(sectionAddress,1,0x100);\n    }\n  }\n  numSectionsRemoved = 1;\n  return;\n}\n\n",
            "called": [
                "find_section_list",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_and_update_sections_00115f50",
                "param_1": "inputAddress",
                "param_2": "inputStrings",
                "param_3": "checkFlag",
                "__s1": "inputString",
                "uVar1": "comparisonResult",
                "uVar2": "extraValue",
                "plVar3": "sectionsPointer",
                "auVar4": "isStripSectionResult"
            },
            "code": "\nuint checkAndUpdateSections_00115f50(long inputAddress,char **inputStrings,char checkFlag)\n\n{\n  char *inputString;\n  uint comparisonResult;\n  undefined4 extraValue;\n  undefined4 extraout_EDX;\n  long *sectionsPointer;\n  undefined isStripSectionResult [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  isStripSectionResult = is_strip_section_isra_0(inputStrings);\n  if (isStripSectionResult[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      inputString = *inputStrings;\n      sectionsPointer = update_sections;\n      do {\n        comparisonResult = strcmp(inputString,(char *)sectionsPointer[1]);\n        isStripSectionResult._4_4_ = 0;\n        isStripSectionResult._0_4_ = comparisonResult;\n        isStripSectionResult._8_4_ = extraout_EDX;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        sectionsPointer = (long *)*sectionsPointer;\n      } while (sectionsPointer != (long *)0x0);\n    }\n    extraValue = isStripSectionResult._8_4_;\n    if (((((checkFlag == '\\0') || (merge_notes == '\\0')) ||\n         (isStripSectionResult._8_4_ = extraValue, isStripSectionResult._0_8_ = *(long *)(inputAddress + 8),\n         *(int *)(*(long *)(inputAddress + 8) + 8) != 5)) ||\n        ((isStripSectionResult._0_8_ = (ulong)inputStrings[0x1a], *(int *)(inputStrings[0x1a] + 4) != 7 ||\n         (isStripSectionResult = startswith_lto_priv_0_lto_priv_0(*inputStrings,\".gnu.build.attributes\"),\n         isStripSectionResult[0] == '\\0')))) && ((*(byte *)((long)inputStrings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(isStripSectionResult._1_7_,inputStrings[8] == (char *)0x0) |\n             CONCAT31(isStripSectionResult._9_3_,inputStrings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp",
                "is_strip_section.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_section",
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "check_and_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_reverse_bytes_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleReverseBytes_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 sectionLength;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionValue,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "handle_reverse_bytes_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataPtr",
                "param_2": "dataSize",
                "lVar1": "tempPtr",
                "cVar2": "isIntType",
                "__ptr": "popPtr",
                "uVar3": "ulongVar",
                "uVar4": "uintVar",
                "local_5a": "stringArray"
            },
            "code": "\nvoid processData_0010b948(long dataPtr,uint dataSize)\n\n{\n  long tempPtr;\n  char isIntType;\n  void *popPtr;\n  ulong ulongVar;\n  uint uintVar;\n  char stringArray [50];\n  \n  uintVar = dataSize - 1;\n  ulongVar = (ulong)dataSize;\n  if ((uintVar < 0x10) && (tempPtr = *(long *)(dataPtr + 0xf8 + (ulong)uintVar * 8), tempPtr != 0)) {\n    stab_push_defined_type(dataPtr,tempPtr,ulongVar);\n    return;\n  }\n  isIntType = stab_int_type_lto_priv_0(dataPtr,4,0);\n  if (isIntType != '\\0') {\n    popPtr = (void *)stab_pop_type(dataPtr);\n    tempPtr = *(long *)(dataPtr + 0x68);\n    *(long *)(dataPtr + 0x68) = tempPtr + 1;\n    if (uintVar < 0x10) {\n      *(long *)(dataPtr + 0xf8 + (ulong)uintVar * 8) = tempPtr;\n    }\n    sprintf(stringArray,\"%ld=r%s;%u;0;\",tempPtr,popPtr,ulongVar);\n    free(popPtr);\n    stab_push_string(dataPtr,stringArray,tempPtr,1,ulongVar);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "check_debug_type_00112b6e",
                "param_1": "input_value",
                "param_2": "debug_info",
                "iVar1": "input_value_value",
                "__format": "format_string",
                "piVar3": "result",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "next_debug_info",
                "local_10": "next_input_value",
                "uVar2": "type_name"
            },
            "code": "\n\n\nint * check_debug_type_00112b6e(int *input_value,long *debug_info)\n\n{\n  int input_value_value;\n  undefined8 type_name;\n  char *format_string;\n  int *result;\n  long *current_debug_info;\n  bool is_circular;\n  long *next_debug_info;\n  int *next_input_value;\n  \n  input_value_value = *input_value;\n  if ((input_value_value != 1) && (1 < input_value_value - 0x16U)) {\n    return input_value;\n  }\n  current_debug_info = debug_info;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_value == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_value,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,type_name);\n      return (int *)0x0;\n    }\n  }\n  next_debug_info = debug_info;\n  next_input_value = input_value;\n  if (input_value_value - 0x16U < 2) {\n    result = (int *)check_debug_type_00112b6e((*(undefined8 **)(input_value + 4))[1],&next_debug_info);\n    return result;\n  }\n  result = *(int **)**(undefined8 **)(input_value + 4);\n  if (input_value == result) {\n    return input_value;\n  }\n  if (result == (int *)0x0) {\n    return input_value;\n  }\n  result = (int *)check_debug_type_00112b6e(result,&next_debug_info);\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "debug_get_type_name.constprop.0",
                "debug_get_real_type.isra.0",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_fields.isra.0",
                "debug_write_type.constprop.0",
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "check_debug_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "config",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "mask",
                "param_6": "bool_var1",
                "param_7": "bool_var2",
                "uVar1": "result",
                "__s": "string_ptr",
                "__s_00": "new_string_ptr",
                "sVar2": "string_length",
                "cVar3": "char_var"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 config,ulong size,undefined flag,ulong mask,\n            byte bool_var1,byte bool_var2)\n\n{\n  undefined4 result;\n  char *string_ptr;\n  char *new_string_ptr;\n  size_t string_length;\n  char char_var;\n  \n  if (((bool_var2 ^ 1) & bool_var1) == 0) {\n    string_ptr = (char *)0x0;\n    char_var = '\\0';\n  }\n  else {\n    char_var = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    string_ptr = (char *)stab_pop_type();\n    mask = mask & 0xffffffff;\n    size = size & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(data_ptr,config,size,flag,mask);\n  if ((char)result != '\\0') {\n    if (bool_var1 == 0) {\n      return result;\n    }\n    if (bool_var2 == 0) {\n      if (string_ptr == (char *)0x0) {\n        return 0;\n      }\n      string_length = strlen(string_ptr);\n      new_string_ptr = (char *)xmalloc(string_length + 3);\n      sprintf(new_string_ptr,\"~%%%s\",string_ptr);\n      free(string_ptr);\n      if (char_var != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      new_string_ptr = (char *)xmalloc(0x14);\n      sprintf(new_string_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = new_string_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "sprintf",
                "stab_start_struct_type.lto_priv.0",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "allocate_and_store_00113d6e",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar": "type_const",
                "puVar": "allocated_ptr"
            },
            "code": "\nlong allocate_and_store_00113d6e(undefined8 input_1,undefined8 input_2)\n\n{\n  long type_const1;\n  undefined8 *allocated_ptr2;\n  \n  type_const1 = debug_make_type_constprop_0(0xb,0);\n  if (type_const1 != 0) {\n    allocated_ptr2 = (undefined8 *)xmalloc(0x10);\n    *allocated_ptr2 = input_1;\n    allocated_ptr2[1] = input_2;\n    *(undefined8 **)(type_const1 + 0x10) = allocated_ptr2;\n  }\n  return type_const1;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_and_store_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "bfd_nonfatal_message",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3"
            },
            "code": "\nvoid executeFunction_00114d50(long arg1,long arg2,uint arg3)\n\n{\n  if (*(int *)(*(long *)(arg1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((arg3 == 2) && (*(int *)(*(long *)(arg2 + 8) + 8) == 2)) {\n    arg3 = (uint)*(byte *)(*(long *)(*(long *)(arg2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(arg1 + 8) + 0x380) + 0x78))(arg1,arg3 != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_file_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printFileUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "list_supported_targets",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_file_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "handle_bfd_error_001126c0",
                "param_1": "error_1",
                "param_2": "error_2",
                "param_3": "error_3",
                "param_4": "error_4",
                "param_5": "error_5",
                "param_6": "error_6",
                "param_7": "error_7",
                "param_8": "error_8",
                "param_9": "archive_filename",
                "param_10": "bfd_error",
                "param_11": "error_list",
                "param_12": "error_message",
                "in_AL": "condition",
                "iVar1": "bfd_error_code",
                "uVar2": "error_msg",
                "local_100": "constant_1",
                "local_fc": "constant_2",
                "local_f8": "temp_ptr1",
                "local_f0": "temp_ptr2",
                "local_e8": "local_buffer",
                "local_c8": "param_13_updated",
                "local_c0": "param_14_updated",
                "local_b8": "error_1_updated",
                "local_a8": "error_2_updated",
                "local_98": "error_3_updated",
                "local_88": "error_4_updated",
                "local_78": "error_5_updated",
                "local_68": "error_6_updated",
                "local_58": "error_7_updated",
                "local_48": "error_8_updated",
                "_stdout": "stdout_stream",
                "_stderr": "stderr_stream",
                "program_name": "name_of_program",
                "stack0x00000008": "stack_variable",
                "LAB_001127c1": "label_end_of_function"
            },
            "code": "\n\n\nvoid handleBFDError_001126c0(undefined4 error_1,undefined4 error_2,undefined4 error_3,undefined4 error_4,\n                 undefined4 error_5,undefined4 error_6,undefined4 error_7,undefined4 error_8,\n                 long archive_filename,long bfd_error,long *error_list,char *error_message,undefined8 error_13,\n                 undefined8 error_14)\n\n{\n  char condition;\n  int bfd_error_code;\n  undefined8 error_msg;\n  undefined4 constant_1;\n  undefined4 constant_2;\n  undefined *temp_ptr1;\n  undefined *temp_ptr2;\n  undefined local_buffer [32];\n  undefined8 param_13_updated;\n  undefined8 param_14_updated;\n  undefined4 error_1_updated;\n  undefined4 error_2_updated;\n  undefined4 error_3_updated;\n  undefined4 error_4_updated;\n  undefined4 error_5_updated;\n  undefined4 error_6_updated;\n  undefined4 error_7_updated;\n  undefined4 error_8_updated;\n  \n  if (condition != '\\0') {\n    error_1_updated = error_1;\n    error_2_updated = error_2;\n    error_3_updated = error_3;\n    error_4_updated = error_4;\n    error_5_updated = error_5;\n    error_6_updated = error_6;\n    error_7_updated = error_7;\n    error_8_updated = error_8;\n  }\n  param_13_updated = error_13;\n  param_14_updated = error_14;\n  bfd_error_code = bfd_get_error();\n  if (bfd_error_code == 0) {\n    error_msg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    error_msg = bfd_errmsg();\n  }\n  fflush(stdout_stream);\n  fputs(name_of_program,stderr_stream);\n  if (bfd_error != 0) {\n    if (archive_filename == 0) {\n      archive_filename = bfd_get_archive_filename(bfd_error);\n    }\n    if ((error_list != (long *)0x0) && (*error_list != 0)) {\n      fprintf(stderr_stream,\": %s[%s]\",archive_filename);\n      goto label_end_of_function;\n    }\n  }\n  fprintf(stderr_stream,\": %s\",archive_filename);\nlabel_end_of_function:\n  if (error_message != (char *)0x0) {\n    temp_ptr1 = &stack_variable;\n    temp_ptr2 = local_buffer;\n    constant_1 = 0x20;\n    constant_2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,stderr_stream);\n    vfprintf(stderr_stream,error_message,&constant_1);\n  }\n  fprintf(stderr_stream,\": %s\\n\",error_msg);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fwrite",
                "bfd_get_error",
                "bfd_errmsg",
                "dcgettext",
                "bfd_get_archive_filename",
                "vfprintf",
                "fputs",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00108466",
                "copy_file",
                "FUN_0010808f",
                "main",
                "copy_relocations_in_section",
                "FUN_001086af",
                "copy_file.cold",
                "copy_object.cold",
                "copy_section",
                "FUN_00104ea2",
                "FUN_00107880",
                "copy_object",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "handle_bfd_error_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_debug_type_00113b4a",
                "param_1": "inputValue",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113b4a(long inputValue)\n\n{\n  long debugType;\n  \n  if (inputValue != 0) {\n    debugType = debug_make_type_constprop_0(0x15,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputValue;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_symbol_information_0010edb4",
                "param_1": "symbolInfo",
                "param_2": "fileName",
                "param_3": "symbolType",
                "param_4": "symbolSize",
                "cVar1": "status",
                "iVar2": "comparisonResult",
                "uVar3": "result",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateSymbolInformation_0010edb4(long symbolInfo,undefined8 fileName,undefined4 symbolType,ulong symbolSize)\n\n{\n  char status;\n  int comparisonResult;\n  undefined8 result;\n  undefined8 additionalParam;\n  \n  if (*(long *)(symbolInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(symbolInfo + 0x1f0) < symbolSize) {\n    *(ulong *)(symbolInfo + 0x1f0) = symbolSize;\n  }\n  comparisonResult = filename_cmp(fileName);\n  if (comparisonResult != 0) {\n    status = stab_write_symbol_lto_priv_0(symbolInfo,0x84,0,symbolSize,fileName);\n    if (status == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(symbolInfo + 0x210) = fileName;\n  }\n  result = stab_write_symbol_lto_priv_0\n                    (symbolInfo,0x44,symbolType,symbolSize - *(long *)(symbolInfo + 0x200),0,additionalParam);\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_information_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "modify_and_write_symbols_0010e5db",
                "param_1": "baseAddress",
                "param_2": "symbolCount",
                "cVar1": "symbolResult",
                "__ptr": "symbolPointer",
                "__s": "symbolString",
                "sVar2": "symbolLength",
                "__s_00": "modifiedSymbolString",
                "in_R10": "auxiliaryValue",
                "iVar3": "iterationCount",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] modifyAndWriteSymbols_0010e5db(long baseAddress,int symbolCount)\n\n{\n  char symbolResult;\n  void *symbolPointer;\n  char *symbolString;\n  size_t symbolLength;\n  char *modifiedSymbolString;\n  ulong auxiliaryValue;\n  int iterationCount;\n  undefined result [16];\n  \n  iterationCount = 0;\n  do {\n    if (symbolCount <= iterationCount) {\n      result = stab_modify_type(baseAddress,0x66,0,baseAddress + 0x188,baseAddress + 400,auxiliaryValue);\n      return result;\n    }\n    if (*(char *)(*(long *)(baseAddress + 0x60) + 0x1c) == '\\0') {\n      symbolPointer = (void *)stab_pop_type(baseAddress);\n      free(symbolPointer);\n    }\n    else {\n      symbolString = (char *)stab_pop_type(baseAddress);\n      symbolLength = strlen(symbolString);\n      modifiedSymbolString = (char *)xmalloc(symbolLength + 3);\n      sprintf(modifiedSymbolString,\":t%s\",symbolString);\n      free(symbolString);\n      symbolResult = stab_write_symbol_lto_priv_0(baseAddress,0x80,0,0,modifiedSymbolString);\n      if (symbolResult == '\\0') {\n        result._8_8_ = 0;\n        result._0_8_ = auxiliaryValue;\n        return result << 0x40;\n      }\n      free(modifiedSymbolString);\n    }\n    iterationCount = iterationCount + 1;\n  } while( true );\n}\n\n",
            "called": [
                "stab_modify_type",
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_and_write_symbols_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_00104d25",
                "param_7": "handle",
                "status": "operationStatus"
            },
            "code": "\nvoid cleanup_00104d25(void)\n\n{\n  undefined8 handle;\n  \n  operationStatus = 1;\n  bfd_nonfatal_message(0,handle,0,0);\n  delete_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "FUN_00114b84"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "FUNC_0010551d"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_0010551d(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  code *pcVar4;\n  undefined8 *puVar5;\n  ulong uVar6;\n  ulong uVar7;\n  char *__s;\n  char cVar8;\n  char cVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *__s_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *puVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppuVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (cVar9 = startswith_lto_priv_0_lto_priv_0(), cVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    cVar9 = bfd_get_full_section_contents();\n    if (cVar9 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (cVar9 = bfd_set_section_size(), cVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      __s_00 = fopen((char *)puVar29[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar29[2],0,0);\n      }\n      else {\n        cVar9 = bfd_malloc_and_get_section();\n        if (cVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,__s_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar17);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        uVar6 = uVar24;\n        uVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = uVar6, uVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            uVar6 = uVar20;\n            uVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = reengineer_function_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar37 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *puVar34 = 0;\n      puVar34 = puVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        cVar9 = bfd_get_section_contents();\n        if (cVar9 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                bVar2 = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar13,lVar27,pcVar33);\n                    cVar9 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar9 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)bVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppuVar37 = ppuVar37 + 2;\n    } while (ppuVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar9 = finish_stab(), cVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar28);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (cVar9 = finish_stab(), cVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      cVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          non_fatal(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = debug_set_filename(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (cVar9 = debug_record_function(puStack0000000000000020), cVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = debug_record_line(puStack0000000000000020,iVar11 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar9 != '\\0') {\n                  cVar9 = debug_end_function(puStack0000000000000020);\n                  if (cVar9 == '\\0') goto LAB_00105981;\n                  cVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_lto_priv_0();\n          if (lVar21 == 0) goto LAB_00105981;\n          cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = isympp + in_stack_00000010;\n        plVar15 = isympp;\n        do {\n          uVar10 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar10 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar10 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = add_symbols;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        pcVar4 = (code *)plVar15[4];\n        uVar10 = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = add_sym_list;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = create_new_symbol(puVar29);\n          uVar17 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          cVar9 = *pcVar33;\n          if (cVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            cVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = section_rename_list, (uVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        cVar9 = *pcVar28;\n        if (cVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == cVar9) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uVar10 & 0x82) == 0 && (pcVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          cVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (cVar9 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = cVar9;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          __s = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            sVar18 = strlen(__s);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uVar10 & 0x20) == 0) &&\n           (((uVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uVar10 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uVar10 & 0x82) == 0) && (pcVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  cVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            cVar9 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (cVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(uVar17);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          cVar9 = is_strip_section_isra_0(plVar15[4]);\n          if (cVar9 == '\\0') {\n            if (((uVar10 & 0x800002) == 0) && (pcVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uVar10 & 0x82) != 0) {\n                cVar9 = is_specified_symbol(pcVar28);\n                if ((cVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uVar10 & 1) != 0) && (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pcVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      puVar29 = add_sym_list;\n      iVar11 = add_symbols;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = create_new_symbol(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      cVar9 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (cVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (cVar9 = bfd_set_section_size(lVar25,in_stack_00000110), cVar9 == '\\0')) ||\n         (cVar9 = bfd_set_section_size(lVar27,in_stack_00000140), cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      cVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((cVar9 == '\\0') ||\n         (cVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (puVar29 = add_sections; puVar5 = update_sections, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; puVar5 != (undefined8 *)0x0; puVar5 = (undefined8 *)*puVar5) {\n    uVar17 = *(undefined8 *)(puVar5[5] + 0x60);\n    cVar9 = bfd_set_section_contents(in_stack_00000008,uVar17,puVar5[4],0,puVar5[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, cVar9 != '\\0')) {\n      uVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uVar10;\n      if ((char)uVar10 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        cVar9 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (cVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (cVar9 = startswith_lto_priv_0_lto_priv_0(*puVar29,\".gnu.build.attributes\"), cVar9 != '\\0'))\n    {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (cVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "dcgettext",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "inputString",
                "htab_hash_string": "hashString"
            },
            "code": "\nvoid calculateHash_00108800(undefined8 *inputString)\n\n{\n  hashString(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_00104ea2",
                "parse_stab",
                "stab_demangle_template",
                "FUN_0010554f",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_debug_records_0010c1c6",
                "param_1": "functionAddress",
                "param_2": "structAddress",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextStruct",
                "cVar2": "result",
                "__ptr": "currentStruct"
            },
            "code": "\nundefined processDebugRecords_0010c1c6(undefined8 functionAddress,long structAddress,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextStruct;\n  char result;\n  undefined8 *currentStruct;\n  \n  currentStruct = *(undefined8 **)(structAddress + 0x78);\n  while( true ) {\n    if (currentStruct == (undefined8 *)0x0) {\n      *(undefined8 *)(structAddress + 0x78) = 0;\n      return 1;\n    }\n    result = debug_record_variable\n                      (functionAddress,currentStruct[1],currentStruct[2],*(undefined4 *)(currentStruct + 3),currentStruct[4],param6,param5\n                      );\n    if (result == '\\0') break;\n    nextStruct = (undefined8 *)*currentStruct;\n    free(currentStruct);\n    currentStruct = nextStruct;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "process_debug_records_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_write_symbol.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "functionContext",
                "unaff_R13": "symbolArray",
                "uVar1": "symbolCount",
                "lVar2": "symbolAddress",
                "cVar3": "isSymbolSpecified",
                "uVar6": "index",
                "puVar4": "newSymbolArray",
                "puVar5": "currentSymbol"
            },
            "code": "\nvoid processSymbols_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolAddress;\n  char isSymbolSpecified;\n  long baseAddress;\n  undefined8 *newSymbolArray;\n  undefined8 *currentSymbol;\n  long functionContext;\n  ulong index;\n  undefined8 *symbolArray;\n  \n  symbolCount = *(uint *)(baseAddress + 0x78);\n  if (strip_symbols == 7) {\n    newSymbolArray = symbolArray;\n    for (index = 0; index != symbolCount; index = index + 1) {\n      currentSymbol = newSymbolArray;\n      if (((*(long **)symbolArray[index] != (long *)0x0) &&\n          (symbolAddress = **(long **)symbolArray[index], symbolAddress != 0)) &&\n         (isSymbolSpecified = is_specified_symbol(*(undefined8 *)(symbolAddress + 8),keep_specific_htab), isSymbolSpecified != '\\0')\n         ) {\n        currentSymbol = newSymbolArray + 1;\n        *newSymbolArray = symbolArray[index];\n      }\n      newSymbolArray = currentSymbol;\n    }\n    *newSymbolArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(functionContext + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "copy_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_allocate_from_file_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofIndicator",
                "piVar2": "errorPointer",
                "pcVar3": "errorMessage",
                "uVar4": "errorFormat",
                "__stream": "fileStream",
                "uVar5": "allocationResult",
                "sVar6": "readSize",
                "lVar7": "currentSize",
                "lVar8": "maxSize"
            },
            "code": "\nvoid readAndAllocateFromFile_00114d60(long fileInfo)\n\n{\n  int eofIndicator;\n  int *errorPointer;\n  char *errorMessage;\n  undefined8 errorFormat;\n  FILE *fileStream;\n  undefined8 allocationResult;\n  size_t readSize;\n  long currentSize;\n  long maxSize;\n  \n  fileStream = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (fileStream == (FILE *)0x0) {\n    errorPointer = __errno_location();\n    errorMessage = strerror(*errorPointer);\n    allocationResult = *(undefined8 *)(fileInfo + 0x10);\n    errorFormat = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorFormat,allocationResult,errorMessage);\n  }\n  maxSize = 0x1000;\n  currentSize = 0;\n  allocationResult = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = allocationResult;\n  while( true ) {\n    eofIndicator = feof(fileStream);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfo + 0x18) = currentSize;\n      fclose(fileStream);\n      return;\n    }\n    if (currentSize == maxSize) {\n      maxSize = currentSize * 2;\n      allocationResult = xrealloc(*(undefined8 *)(fileInfo + 0x20),maxSize);\n      *(undefined8 *)(fileInfo + 0x20) = allocationResult;\n    }\n    readSize = fread((void *)(*(long *)(fileInfo + 0x20) + currentSize),1,maxSize - currentSize,fileStream);\n    eofIndicator = ferror(fileStream);\n    if (eofIndicator != 0) break;\n    currentSize = currentSize + readSize;\n  }\n  allocationResult = *(undefined8 *)(fileInfo + 0x10);\n  errorFormat = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorFormat,allocationResult);\n}\n\n",
            "called": [
                "fopen",
                "section_add_load_file.cold",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_and_allocate_from_file_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_section_not_found_00108808",
                "unaff_RBP": "framePointer",
                "uVar1": "sectionAddress",
                "uVar2": "sectionNotFoundMsg"
            },
            "code": "\nvoid handleSectionNotFound_00108808(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 sectionNotFoundMsg;\n  long framePointer;\n  \n  sectionAddress = *(undefined8 *)(framePointer + 0x20);\n  sectionNotFoundMsg = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(sectionNotFoundMsg,sectionAddress);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_section_not_found_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_input_lines_00104d1c",
                "unaff_EBP": "line_counter",
                "unaff_R13": "filename",
                "unaff_R14": "current_line",
                "unaff_R15": "current_char",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "uVar1": "error_message",
                "ppbVar2": "hash_table_slot",
                "pbVar3": "next_token",
                "bVar4": "current_token_char",
                "pbVar5": "next_line",
                "pbVar6": "current_token",
                "pbVar7": "next_char"
            },
            "code": "\nvoid parse_input_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_slot;\n  byte *next_token;\n  byte current_token_char;\n  byte *next_line;\n  int line_counter;\n  byte *current_token;\n  undefined8 filename;\n  byte *next_char;\n  byte *current_line;\n  byte *current_char;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_token_char = *current_line;\n    next_char = current_line;\n    if (current_token_char == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_char = current_line + 1;\n        next_line = current_line + 2;\n      }\n      else {\n        next_line = current_line + 1;\n      }\n    }\n    else if ((char)current_token_char < '\\v') {\n      if (current_token_char != 0) goto LAB_00114520;\n      next_line = current_line + 1;\n    }\n    else {\n      if (current_token_char != 0xd) break;\n      *current_line = 0;\n      next_line = current_line + 1;\n      if (current_line[1] == 10) {\n        next_line = current_line + 2;\n        next_char = current_line + 1;\n      }\n    }\n    current_token_char = *current_char;\n    while ((current_token_char == 0x20 || (current_token = current_char, current_token_char == 9))) {\n      current_token = current_char + 1;\n      current_char = current_char + 1;\n      current_token_char = *current_token;\n    }\n    do {\n      if ((current_token_char == 10) || (current_token_char == 0xd)) goto LAB_00114676;\n      if (current_token_char == 0) goto LAB_00114599;\n      current_token_char = current_token[1];\n      current_token = current_token + 1;\n    } while ((current_token_char != 0x20) && (current_token_char != 9));\n    if ((char)current_token_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_token_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_token_char = current_token[1];\n      if ((((((current_token_char == 9) || (current_token_char == 0x20)) &&\n            ((current_token_char = current_token[2], current_token_char == 9 || (current_token_char == 0x20)))) &&\n           ((current_token_char = current_token[3], current_token_char == 9 || (current_token_char == 0x20)))) &&\n          ((current_token_char = current_token[4], current_token_char == 9 || (current_token_char == 0x20)))) &&\n         ((current_token_char = current_token[5], current_token_char == 9 || (current_token_char == 0x20)))) {\n        current_token_char = current_token[6];\n        next_token = current_token + 6;\n        if ((current_token_char == 9) || (current_token_char == 0x20)) {\n          do {\n            do {\n              current_token_char = next_token[1];\n              next_token = next_token + 1;\n            } while (current_token_char == 0x20);\n          } while (current_token_char == 9);\n        }\n      }\n      if ((0xd < current_token_char) || ((-0x2402L >> (current_token_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,format_string,line_counter);\n      }\n    }\nLAB_00114599:\n    *current_token = 0;\n    if (current_char < current_token) {\n      hash_table_slot = (byte **)htab_find_slot();\n      *hash_table_slot = current_char;\n    }\n    line_counter = line_counter + 1;\n    current_line = next_line;\n    current_char = next_line;\n    if (next_char[1] == 0) {\n      *return_address = filename;\n      return;\n    }\n  } while( true );\n  if (current_token_char == 0x23) {\n    parse_input_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_input_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_log_number_00119940",
                "param_1": "input_number",
                "param_2": "error_message",
                "uVar1": "translated_message",
                "local_20": "scanned_address"
            },
            "code": "\nvoid validate_and_log_number_00119940(undefined8 input_number,undefined8 error_message)\n\n{\n  undefined8 translated_message;\n  char *scanned_address [2];\n  \n  bfd_scan_vma(input_number,scanned_address,0);\n  if (*scanned_address[0] == '\\0') {\n    return;\n  }\n  translated_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(translated_message,error_message,input_number);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "parse_vma.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "validate_and_log_number_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3",
                "in_RAX": "tempRAX"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 parameter1,long parameter2,uint parameter3)\n\n{\n  long tempRAX;\n  \n  if ((parameter3 == 2) && (*(int *)(*(long *)(parameter2 + 8) + 8) == 2)) {\n    parameter3 = (uint)*(byte *)(*(long *)(*(long *)(parameter2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(tempRAX + 0x380) + 0x78))(parameter1,parameter3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00114dc7",
                "FUN_00107880",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "copy_section",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00104ea2",
                "FUN_00107880",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "param_3": "data",
                "param_4": "ptr4",
                "param_5": "ptr5",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "ptrArray",
                "auVar4": "tempArray"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 ptr1,undefined8 ptr2,long data,undefined8 ptr4,\n            undefined8 ptr5)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *ptrArray;\n  undefined tempArray [16];\n  \n  result = debug_write_linenos_constprop_0(ptr1,ptr2,*(undefined8 *)(data + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(data + 0x28) == 0 && (*(long *)(data + 8) != 0)) ||\n      (result = stab_start_block_lto_priv_0(ptr2,*(undefined8 *)(data + 0x18)), result != '\\0'))\n     )) {\n    if (*(undefined8 **)(data + 0x28) != (undefined8 *)0x0) {\n      for (ptrArray = (undefined8 *)**(undefined8 **)(data + 0x28); ptrArray != (undefined8 *)0x0;\n          ptrArray = (undefined8 *)*ptrArray) {\n        result = debug_write_name_constprop_0(ptr1,ptr2,ptrArray);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (ptrArray = *(undefined8 **)(data + 0x10); ptrArray != (undefined8 *)0x0;\n        ptrArray = (undefined8 *)*ptrArray) {\n      result = processFunction_00113a4d(ptr1,ptr2,ptrArray);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    tempArray = debug_write_linenos_constprop_0(ptr1,ptr2,*(undefined8 *)(data + 0x20));\n    if (tempArray[0] != '\\0') {\n      if ((*(long *)(data + 0x28) == 0) && (*(long *)(data + 8) != 0)) {\n        return tempArray._0_8_;\n      }\n      returnValue = stab_end_block_lto_priv_0\n                        (ptr2,*(undefined8 *)(data + 0x20),tempArray._8_8_,ptr5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_start_block.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "debug_write_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_block.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "deallocate_memory_001081e9",
                "in_RAX": "param1",
                "unaff_RBX": "memory_block"
            },
            "code": "\nundefined8 deallocate_memory_001081e9(void)\n\n{\n  undefined8 param1;\n  void *memory_block;\n  undefined8 param_7;\n  \n  param_7 = param1;\n  free(memory_block);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "deallocate_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "is_specified_symbol_predicate",
                "find_section_list"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_debug_type_00113b71",
                "param_1": "inputValue",
                "lVar1": "debugType"
            },
            "code": "\nlong initializeDebugType_00113b71(long inputValue)\n\n{\n  long debugType;\n  \n  if (inputValue != 0) {\n    debugType = debug_make_type_constprop_0(0x14,0);\n    if (debugType == 0) {\n      debugType = 0;\n    }\n    else {\n      *(long *)(debugType + 0x10) = inputValue;\n    }\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "push_defined_type_00109dfe",
                "param_1": "input",
                "lVar1": "counter",
                "local_40": "message"
            },
            "code": "\nvoid pushDefinedType_00109dfe(long input)\n\n{\n  long counter;\n  char message [40];\n  \n  if (*(long *)(input + 0x70) != 0) {\n    stab_push_defined_type(input,*(long *)(input + 0x70),0);\n    return;\n  }\n  counter = *(long *)(input + 0x68);\n  *(long *)(input + 0x68) = counter + 1;\n  *(long *)(input + 0x70) = counter;\n  sprintf(message,\"%ld=%ld\",counter,counter);\n  stab_push_string(input,message,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "address",
                "__s": "string",
                "sVar1": "stringLength"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long address)\n\n{\n  char *string;\n  size_t stringLength;\n  \n  if (*(long *)(address + 0x60) != 0) {\n    string = *(char **)(*(long *)(address + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      stringLength = strlen(string);\n      *(undefined2 *)(string + stringLength) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "process_data_0010ae0e",
                "param_1": "data",
                "lVar1": "dataStruct",
                "lVar2": "ptrStruct",
                "__ptr": "ptr",
                "pcVar3": "tmpStr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "result",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "counter",
                "uVar10": "totalPtrs"
            },
            "code": "\nundefined8 processData_0010ae0e(long data)\n\n{\n  long dataStruct;\n  long ptrStruct;\n  void *ptr;\n  char *tmpStr;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 returnValue;\n  long totalLen;\n  uint counter;\n  ulong totalPtrs;\n  \n  returnValue = 0;\n  dataStruct = *(long *)(data + 0x60);\n  if (((dataStruct != 0) && (*(char **)(dataStruct + 8) != (char *)0x0)) &&\n     (result = *(char **)(dataStruct + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(dataStruct + 8));\n    len2 = strlen(result);\n    ptrStruct = *(long *)(dataStruct + 0x28);\n    if (ptrStruct == 0) {\n      totalLen = len1 + len2 + 10;\n      totalPtrs = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      totalPtrs = 0;\n      while( true ) {\n        result = *(char **)(ptrStruct + totalPtrs * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        totalPtrs = (ulong)((int)totalPtrs + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(dataStruct + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(dataStruct + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(dataStruct + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(dataStruct + 0x38));\n      totalLen = totalLen + len1;\n    }\n    result = (char *)xmalloc(totalLen);\n    dataStruct = *(long *)(data + 0x60);\n    strcpy(result,*(char **)(dataStruct + 8));\n    if (*(long *)(dataStruct + 0x28) != 0) {\n      counter = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",totalPtrs);\n      while( true ) {\n        dataStruct = *(long *)(data + 0x60);\n        totalPtrs = (ulong)counter;\n        ptr = *(void **)(dataStruct + 0x28);\n        tmpStr = *(char **)((long)ptr + totalPtrs * 8);\n        if (tmpStr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(result,tmpStr);\n        free(*(void **)(*(long *)(dataStruct + 0x28) + totalPtrs * 8));\n      }\n      free(ptr);\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x28) = 0;\n    }\n    dataStruct = *(long *)(data + 0x60);\n    strcat(result,*(char **)(dataStruct + 0x20));\n    free(*(void **)(dataStruct + 0x20));\n    dataStruct = *(long *)(data + 0x60);\n    *(undefined8 *)(dataStruct + 0x20) = 0;\n    if (*(char **)(dataStruct + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(dataStruct + 0x30));\n      free(*(void **)(dataStruct + 0x30));\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    dataStruct = *(long *)(data + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    tmpStr = *(char **)(dataStruct + 0x38);\n    if (tmpStr != (char *)0x0) {\n      strcpy(result + len1 + 1,tmpStr);\n      free(*(void **)(dataStruct + 0x38));\n      *(undefined8 *)(*(long *)(data + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(data + 0x60) + 8));\n    dataStruct = *(long *)(data + 0x60);\n    *(char **)(dataStruct + 8) = result;\n    returnValue = CONCAT71((int7)((ulong)dataStruct >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "strcat",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_symbols_001135a5",
                "param_1": "fileDescriptor",
                "param_2": "symbolTable",
                "param_3": "symbolData",
                "iVar1": "index",
                "cVar2": "result",
                "uVar3": "returnValue",
                "puVar4": "currentSymbol",
                "puVar5": "symbolList"
            },
            "code": "\nundefined8 processDebugSymbols_001135a5(undefined8 fileDescriptor,undefined8 symbolTable,long symbolData)\n\n{\n  int index;\n  char result;\n  undefined8 returnValue;\n  undefined8 *currentSymbol;\n  undefined8 *symbolList;\n  \n  if (6 < *(uint *)(symbolData + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(symbolData + 0x14)) {\n  case 0:\n    result = debug_write_type_constprop_0(fileDescriptor,symbolTable,*(undefined8 *)(symbolData + 0x20),symbolData);\n    if (result != '\\0') {\n      returnValue = stab_typdef_lto_priv_0(symbolTable,*(undefined8 *)(symbolData + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    result = debug_write_type_constprop_0(fileDescriptor,symbolTable,*(undefined8 *)(symbolData + 0x20),symbolData);\n    if (result != '\\0') {\n      returnValue = stab_tag_lto_priv_0(symbolTable,*(undefined8 *)(symbolData + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    result = debug_write_type_constprop_0\n                      (fileDescriptor,symbolTable,*(undefined8 *)(*(long *)(symbolData + 0x20) + 8),0);\n    if (result != '\\0') {\n      returnValue = stab_variable_lto_priv_0\n                        (symbolTable,*(undefined8 *)(symbolData + 8),**(undefined4 **)(symbolData + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(symbolData + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    symbolList = *(undefined8 **)(symbolData + 0x20);\n    index = *(int *)(symbolData + 0x18);\n    returnValue = *(undefined8 *)(symbolData + 8);\n    result = debug_write_linenos_constprop_0(fileDescriptor,symbolTable,*(undefined8 *)(symbolList[2] + 0x18));\n    if (((result != '\\0') &&\n        (result = debug_write_type_constprop_0(fileDescriptor,symbolTable,*symbolList,0), result != '\\0')) &&\n       (result = stab_start_function_lto_priv_0(symbolTable,returnValue,index == 2), result != '\\0')) {\n      for (currentSymbol = (undefined8 *)symbolList[1]; currentSymbol != (undefined8 *)0x0;\n          currentSymbol = (undefined8 *)*currentSymbol) {\n        result = debug_write_type_constprop_0(fileDescriptor,symbolTable,currentSymbol[2],0);\n        if (result == '\\0') {\n          return 0;\n        }\n        result = stab_function_parameter_lto_priv_0(symbolTable,currentSymbol[1],*(undefined4 *)(currentSymbol + 3));\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      symbolList = (undefined8 *)symbolList[2];\n      while( true ) {\n        if (symbolList == (undefined8 *)0x0) {\n          returnValue = stab_end_function_lto_priv_0(symbolTable);\n          return returnValue;\n        }\n        result = debug_write_block_constprop_0(fileDescriptor,symbolTable,symbolList);\n        if (result == '\\0') break;\n        symbolList = (undefined8 *)*symbolList;\n      }\n    }\n    break;\n  case 4:\n    returnValue = stab_int_constant_lto_priv_0\n                      (symbolTable,*(undefined8 *)(symbolData + 8),*(undefined8 *)(symbolData + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(symbolData + 0x20),symbolTable,*(undefined8 *)(symbolData + 8));\n    return returnValue;\n  case 6:\n    result = debug_write_type_constprop_0(fileDescriptor,symbolTable,**(undefined8 **)(symbolData + 0x20),0);\n    if (result != '\\0') {\n      returnValue = stab_typed_constant_lto_priv_0\n                        (symbolTable,*(undefined8 *)(symbolData + 8),\n                         *(undefined8 *)(*(long *)(symbolData + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_function.lto_priv.0",
                "debug_write_block.constprop.0",
                "debug_write_linenos.constprop.0",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_variable.lto_priv.0",
                "abort",
                "stab_float_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_typdef.lto_priv.0",
                "stab_end_function.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "debug_write_block.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_symbols_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = reengineer_function_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001152b6",
                "bfd_get_arch",
                "bfd_set_file_flags",
                "bfd_get_mach",
                "dcgettext",
                "bfd_get_archive_filename",
                "bfd_set_start_address",
                "printf"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)debug_make_volatile_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)debug_make_const_type_isra_0(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)debug_make_pointer_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)debug_make_reference_type_isra_0(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)debug_make_function_type_isra_0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)stab_find_tagged_type(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) ||\n           (plVar4 = (long *)debug_get_fields_isra_0(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)debug_get_type_name_constprop_0(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_get_fields.isra.0",
                "strlen",
                "stab_demangle_v3_arglist",
                "debug_make_reference_type.isra.0",
                "dcgettext",
                "stab_demangle_v3_arg",
                "strcmp",
                "debug_make_type.constprop.0",
                "cplus_demangle_print",
                "debug_make_int_type.isra.0",
                "abort",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_float_type.isra.0",
                "fprintf",
                "strncmp"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arglist",
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "process_lines_00104c36",
                "uVar1": "error_message",
                "ppbVar2": "hash_table_entry",
                "pbVar3": "current_byte",
                "in_CL": "current_char",
                "bVar4": "next_char",
                "unaff_RBX": "line_pointer",
                "unaff_EBP": "line_number",
                "pbVar5": "line_start",
                "unaff_R13": "callback_function",
                "unaff_R14": "line_end",
                "unaff_R15": "line_ptr",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "return_address"
            },
            "code": "\nvoid processLines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **hash_table_entry;\n  byte *current_byte;\n  byte current_char;\n  byte next_char;\n  byte *line_pointer;\n  int line_number;\n  byte *line_start;\n  undefined8 callback_function;\n  byte *line_end;\n  byte *line_ptr;\n  undefined8 filename;\n  undefined8 *return_address;\n  \n  do {\n    line_start = line_ptr;\n    if (current_char == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char == 10) || (current_char == 0xd)) goto LAB_00114676;\n      if (current_char == 0) goto LAB_00114599;\n      current_char = line_start[1];\n      line_start = line_start + 1;\n    } while ((current_char != 0x20) && (current_char != 9));\n    if ((char)current_char < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char = line_start[1];\n      if ((((((next_char == 9) || (next_char == 0x20)) &&\n            ((next_char = line_start[2], next_char == 9 || (next_char == 0x20)))) &&\n           ((next_char = line_start[3], next_char == 9 || (next_char == 0x20)))) &&\n          ((next_char = line_start[4], next_char == 9 || (next_char == 0x20)))) &&\n         ((next_char = line_start[5], next_char == 9 || (next_char == 0x20)))) {\n        next_char = line_start[6];\n        current_byte = line_start + 6;\n        if ((next_char == 9) || (next_char == 0x20)) {\n          do {\n            do {\n              next_char = current_byte[1];\n              current_byte = current_byte + 1;\n            } while (next_char == 0x20);\n          } while (next_char == 9);\n        }\n      }\n      if ((0xd < next_char) || ((-0x2402L >> (next_char & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,filename,line_number);\n      }\n    }\nLAB_00114599:\n    *line_start = 0;\n    if (line_ptr < line_start) {\n      hash_table_entry = (byte **)htab_find_slot();\n      *hash_table_entry = line_ptr;\n    }\n    line_number = line_number + 1;\n    line_start = line_pointer;\n    if (line_end[1] == 0) {\n      *return_address = callback_function;\n      return;\n    }\n    for (; next_char = *line_start, line_end = line_start, next_char != 10; line_start = line_start + 1) {\n      if ((char)next_char < '\\v') {\n        if (next_char == 0) {\n          current_byte = line_start + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char == 0xd) {\n          *line_start = 0;\n          current_byte = line_start + 1;\n          if (line_start[1] == 10) {\n            current_byte = line_start + 2;\n            line_end = line_start + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *line_start = 0;\n    if (line_start[1] == 0xd) {\n      line_end = line_start + 1;\n      current_byte = line_start + 2;\n    }\n    else {\n      current_byte = line_start + 1;\n    }\nLAB_00114553:\n    current_char = *line_pointer;\n    line_ptr = line_pointer;\n    while (line_pointer = current_byte, current_char == 0x20) {\nLAB_00104c3f:\n      line_start = line_ptr + 1;\n      line_ptr = line_ptr + 1;\n      current_byte = line_pointer;\n      current_char = *line_start;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "reengineer_function_0010554f",
                "param_7": "binary_file",
                "param_8": "section_count",
                "param_9": "isympp",
                "param_12": "gap_fill_size",
                "param_14": "gap_fill_buffer",
                "param_17": "section_addresses",
                "param_30": "output_sections",
                "param_32": "output_section_count",
                "param_36": "is_strip",
                "param_37": "discard_locals",
                "param_40": "symbol_table",
                "param_41": "is_relocatable",
                "param_42": "file_name",
                "param_43": "leading_char",
                "param_44": "leading_char_mode"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 reengineer_function_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binary_file;\n  ulong section_count;\n  char isympp;\n  undefined4 *__ptr_02;\n  ulong gap_fill_size;\n  char *param_13;\n  undefined *gap_fill_buffer;\n  uint param_15;\n  long *section_addresses;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *output_sections;\n  ulong param_31;\n  long output_section_count;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte is_strip;\n  byte discard_locals;\n  undefined8 param_38;\n  ushort param_39;\n  long *symbol_table;\n  char is_relocatable;\n  char *file_name;\n  undefined leading_char;\n  short leading_char_mode;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    gap_fill_size = 0;\n    gap_fill_buffer = (undefined *)0x0;\n    section_addresses = (long *)0x0;\n    uVar29 = gap_fill_size;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    section_addresses = (long *)xmalloc(lVar14);\n    symbol_table = section_addresses;\n    bfd_map_over_sections(binary_file,get_sections,&stack0x00000140);\n    qsort(section_addresses,(ulong)in_stack_00000068._4_4_,8,compare_section_lma);\n    gap_fill_buffer = (undefined *)xmalloc(lVar14);\n    bVar38 = gap_fill_set != '\\0';\n    puVar33 = gap_fill_buffer;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      gap_fill_size = 0;\n      do {\n        puVar30 = (ulong *)(gap_fill_buffer + uVar29 * 8);\n        plVar28 = section_addresses + uVar29;\n        uVar21 = gap_fill_size;\n        do {\n          gap_fill_size = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(binary_file,*plVar28);\n          uVar13 = bfd_octets_per_byte(binary_file);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,binary_file,*plVar28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (gap_fill_size < uVar21);\n      } while( true );\n    }\n    gap_fill_size = 0;\nLAB_00107cd1:\n    uVar29 = gap_fill_size;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(binary_file);\n      lVar14 = section_addresses[in_stack_00000068._4_4_ - 1];\n      uVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,binary_file,section_addresses[in_stack_00000068._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(gap_fill_buffer + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= gap_fill_size) {\n            uVar29 = gap_fill_size;\n          }\n        }\n      }\n    }\n  }\n  gap_fill_size = uVar29;\n  plVar28 = isympp;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &names_0;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          isympp = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (isympp == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaff_R14,1,plVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = parse_stab(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = finish_stab(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + section_count; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (is_relocatable == '-') {\n          if (((lVar14 == 0) && (lVar14 = start_stab_constprop_0(unaff_R14,0,plVar28), lVar14 == 0))\n             || ((file_name == (char *)0x0 || (*file_name == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = file_name;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < plVar28 + section_count))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          save_stab(leading_char,(int)leading_char_mode,symbol_table,pcVar22);\n          isympp = parse_stab(__ptr_02,lVar14,leading_char);\n          if (isympp == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar14 != 0) && (cVar7 = finish_stab(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (isympp == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (section_count != 0)) {\n        symbol_table = (long *)0x0;\n        output_sections = plVar28;\n        output_section_count = 0;\n        param_31 = section_count;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)section_count <= output_section_count) goto LAB_00105590;\n            lVar14 = plVar28[output_section_count];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            output_section_count = output_section_count + 1;\n            in_stack_000000d8 = (ulong)discard_locals + 1 + in_stack_000000d8;\n            if (discard_locals != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (is_strip != 0x67) {\n              cVar8 = debug_set_filename(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = debug_set_filename(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)is_strip < '\\0') {\n            if (is_strip == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (is_strip < 100) {\n              switch(is_strip) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(is_strip) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = debug_start_block(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_coff_type_lto_priv_0\n                                     (unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaff_R14[0x22] + 0x38)\n                                      ,puVar26,0,__ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = debug_record_function(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (discard_locals != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = debug_record_line(__ptr_02,iVar10 + iVar27,\n                                                *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = debug_end_function(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        non_fatal(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binary_file + 0x44) & 0x42) != 0) && ((*(uint *)(binary_file + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binary_file + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (section_count != 0) {\n        plVar28 = isympp + section_count;\n        plVar15 = isympp;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(binary_file + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = isympp;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = lVar14;\n      if (section_count == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _isympp = 0;\n        do {\n          iVar10 = add_symbols;\n          plVar15 = (long *)plVar28[_isympp];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = add_sym_list;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = create_new_symbol(puVar26);\n                  uVar17 = redefine_specific_htab;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(redefine_specific_htab);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar17);\n              }\n            }\n            _is_relocatable = 0;\n            symbol_table = plVar20;\n            lVar37 = htab_find(redefine_specific_htab);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(binary_file + 8) + 0x1c) != '\\0'))\n            {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = prefix_symbols_string;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binary_file + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(binary_file + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = prefix_symbols_string;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binary_file + 8) + 0x1c);\n            }\n            pcVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _is_relocatable = _is_relocatable & 0xffffffffffffff00;\n                symbol_table = plVar25;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (is_relocatable == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar17);\n              status = 1;\n            }\n          }\n          else {\n            _is_relocatable = _is_relocatable & 0xffffffffffffff00;\n            symbol_table = plVar25;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (is_relocatable != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _is_relocatable = _is_relocatable & 0xffffffffffffff00;\n              symbol_table = plVar25;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (is_relocatable != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _is_relocatable = _is_relocatable & 0xffffffffffffff00;\n              symbol_table = plVar25;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (is_relocatable != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = is_strip_section_isra_0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = is_specified_symbol(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(keepglobal_specific_htab), lVar37 == 0 ||\n                      (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar7 = is_specified_symbol(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _isympp = _isympp + 1;\n        } while (section_count != _isympp);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar26 = add_sym_list;\n        iVar10 = add_symbols;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = create_new_symbol(puVar26,binary_file);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = add_symbols;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        section_count = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(binary_file + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (binary_file,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(binary_file,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binary_file,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,symbol_table), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binary_file,lVar14,output_sections,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binary_file,lVar37,param_33,0,symbol_table), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,binary_file,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binary_file + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,binary_file,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,mark_symbols_used_in_relocations,isympp);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(strip_specific_htab);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(keep_specific_htab), lVar14 != 0 ||\n           (lVar14 = htab_elements(localize_specific_htab), lVar14 != 0)) ||\n          (lVar14 = htab_elements(globalize_specific_htab), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(keepglobal_specific_htab), lVar14 != 0 ||\n          (lVar14 = htab_elements(weaken_specific_htab), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(redefine_specific_htab), lVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n          (remove_leading_char != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (add_symbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binary_file,osympp,section_count & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,binary_file);\n    bfd_map_over_sections(unaff_R14,copy_section,binary_file);\n    for (puVar26 = add_sections; puVar4 = update_sections, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(binary_file,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,binary_file,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binary_file,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        bfd_nonfatal_message(0,binary_file,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binary_file + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(binary_file + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = startswith_lto_priv_0_lto_priv_0(*puVar26,\".gnu.build.attributes\"),\n            cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(binary_file,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,binary_file,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          bfd_nonfatal_message(0,binary_file,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binary_file,param_21), lVar14 = gnu_debuglink_filename\n       , cVar7 != '\\0')) {\n      if (gap_fill_buffer != (undefined *)0x0) {\n        if (0x2000 < gap_fill_size) {\n          gap_fill_size = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(gap_fill_size);\n        uVar5 = gap_fill;\n        puVar33 = __ptr;\n        for (gap_fill_size = gap_fill_size & 0xffffffff; gap_fill_size != 0; gap_fill_size = gap_fill_size - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(gap_fill_buffer + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*section_addresses + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(binary_file,*section_addresses,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                bfd_nonfatal_message(0,binary_file,*section_addresses,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          section_addresses = section_addresses + 1;\n        }\n        free(__ptr);\n        free(gap_fill_buffer);\n      }\n      uVar9 = (**(code **)(*(long *)(binary_file + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binary_file,use_alt_mach_code & 0xffffffff);\n        uVar29 = use_alt_mach_code;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar17,uVar29);\n          if (*(int *)(*(long *)(binary_file + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar17);\n            *(short *)(*(long *)(binary_file + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,binary_file,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,binary_file,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_set_section_size",
                "start_stab.constprop.0",
                "is_specified_symbol",
                "htab_traverse",
                "bfd_set_error",
                "save_stab",
                "free_saved_stabs",
                "bfd_alt_mach_code",
                "non_fatal",
                "qsort",
                "bfd_is_local_label",
                "debug_end_function",
                "copy_relocations_in_section",
                "strlen",
                "mark_symbols_used_in_relocations",
                "bfd_coff_get_syment",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_octets_per_byte",
                "strcpy",
                "xmalloc",
                "is_strip_section.isra.0",
                "is_specified_symbol_predicate",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_errmsg",
                "bfd_map_over_sections",
                "parse_coff_symbol.constprop.0.isra.0",
                "htab_elements",
                "get_sections",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "bfd_map_over_sections",
                "stab_context",
                "copy_section",
                "bfd_set_symtab",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_fill_in_gnu_debuglink_section",
                "free",
                "fprintf",
                "finish_stab",
                "compare_section_lma",
                "bfd_get_section_contents",
                "debug_end_block",
                "fatal",
                "bfd_decode_symclass",
                "strcmp",
                "debug_start_block",
                "htab_find",
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "bfd_set_section_contents",
                "concat",
                "debug_set_filename",
                "debug_record_line",
                "create_new_symbol",
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "reengineer_function_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114b84"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_find_named_type",
                "find_section_list",
                "main",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "debug_set_class_id.lto_priv.0",
                "debug_tag_type",
                "debug_type_samep",
                "eq_string_redefnode",
                "parse_stab",
                "skip_section",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "FUN_0010554f",
                "convert_efi_target",
                "is_strip_section_1.isra.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_string_00109cf4",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "param",
                "local_3c": "convertedStr"
            },
            "code": "\nvoid convertAndPushString_00109cf4(undefined8 dest,undefined8 value,undefined4 param)\n\n{\n  char convertedStr [28];\n  \n  sprintf(convertedStr,\"%ld\",value);\n  stab_push_string(dest,convertedStr,value,0,param);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_bool_type.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_tag_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_info_00109ab1",
                "param_1": "stab_data",
                "param_2": "parsed_values",
                "uVar1": "number1",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_stab_info_00109ab1(char **stab_data,undefined4 *parsed_values,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 number1;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *stab_data;\n  if (*current_char == '(') {\n    *stab_data = current_char + 1;\n    number1 = parse_number(stab_data,0);\n    *parsed_values = number1;\n    if (**stab_data == ',') {\n      *stab_data = *stab_data + 1;\n      number1 = parse_number(stab_data,0,param_3);\n      parsed_values[1] = number1;\n      if (**stab_data == ')') {\n        current_char = *stab_data + 1;\n        *stab_data = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    result = 0;\n  }\n  else {\n    *parsed_values = 0;\n    current_char = (char *)parse_number(stab_data,0);\n    parsed_values[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "bad_stab",
                "parse_number"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_stab_info_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_strip_section_001159d0",
                "param_1": "address",
                "uVar1": "result",
                "cVar2": "condition",
                "uVar3": "is_strip",
                "lVar4": "group_signature",
                "lVar5": "temp",
                "strip_symbols": "SYMBOL_FLAG",
                "strip_specific_htab": "STRIP_SPECIFIC_HTAB_FLAG",
                "keep_specific_htab": "KEEP_SPECIFIC_HTAB_FLAG"
            },
            "code": "\nundefined4 check_strip_section_001159d0(long address)\n\n{\n  undefined8 result;\n  char condition;\n  undefined4 is_strip;\n  long group_signature;\n  long temp;\n  \n  is_strip = is_strip_section_1_isra_0();\n  if ((char)is_strip == '\\0') {\n    if ((*(byte *)(address + 0x27) & 2) == 0) {\n      return is_strip;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(address + 0xd0),*(undefined8 *)(address + 0xe0));\n    if ((group_signature != 0) &&\n       (((result = *(undefined8 *)(group_signature + 8), SYMBOL_FLAG != 7 ||\n         (condition = is_specified_symbol(result,KEEP_SPECIFIC_HTAB_FLAG), condition != '\\0')) &&\n        (condition = is_specified_symbol(result,STRIP_SPECIFIC_HTAB_FLAG), condition == '\\0')))) {\n      group_signature = *(long *)(*(long *)(address + 0xd0) + 0xc0);\n      temp = group_signature;\n      do {\n        if (temp == 0) {\n          return 1;\n        }\n        condition = is_strip_section_1_isra_0(temp);\n        if (condition == '\\0') {\n          return is_strip;\n        }\n        temp = *(long *)(*(long *)(temp + 0xd0) + 0xc0);\n      } while (group_signature != temp);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_specified_symbol",
                "group_signature.isra.0",
                "is_strip_section_1.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "skip_section",
                "FUN_0010554f",
                "setup_section"
            ],
            "imported": false,
            "current_name": "check_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "concatenate_strings_0010a77a",
                "param_1": "input",
                "__s": "stringPtr",
                "uVar4": "result",
                "uVar1": "byteVal",
                "uVar3": "longVal",
                "__s_00": "inputString",
                "sVar5": "inputStrLen",
                "sVar6": "stringPtrLen",
                "__s_01": "resultString"
            },
            "code": "\nundefined4 concatenateStrings_0010a77a(long input)\n\n{\n  undefined byteVal;\n  long lVar2;\n  char *stringPtr;\n  undefined8 longVal;\n  undefined4 result;\n  char *inputString;\n  size_t inputStrLen;\n  size_t stringPtrLen;\n  char *resultString;\n  \n  lVar2 = *(long *)(input + 0x60);\n  if ((lVar2 != 0) && (stringPtr = *(char **)(lVar2 + 0x20), stringPtr != (char *)0x0)) {\n    result = *(undefined4 *)(lVar2 + 0x18);\n    byteVal = *(undefined *)(lVar2 + 0x1c);\n    longVal = *(undefined8 *)(lVar2 + 0x10);\n    inputString = (char *)stab_pop_type();\n    inputStrLen = strlen(inputString);\n    stringPtrLen = strlen(stringPtr);\n    resultString = (char *)xmalloc(inputStrLen + 2 + stringPtrLen);\n    sprintf(resultString,\"%s%s;\",inputString,stringPtr);\n    free(inputString);\n    free(stringPtr);\n    result = stab_push_string(input,resultString,longVal,byteVal,result);\n    if ((char)result != '\\0') {\n      free(resultString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "concatenate_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_error_0010543c",
                "piVar2": "errorNumberPtr",
                "pcVar3": "errorMessagePtr",
                "unaff_RBP": "stackBaseAddress",
                "uVar1": "fileName",
                "uVar4": "localizedErrorMessage"
            },
            "code": "\nvoid openFileError_0010543c(void)\n\n{\n  undefined8 fileName;\n  int *errorNumberPtr;\n  char *errorMessagePtr;\n  undefined8 localizedErrorMessage;\n  long stackBaseAddress;\n  \n  errorNumberPtr = __errno_location();\n  errorMessagePtr = strerror(*errorNumberPtr);\n  fileName = *(undefined8 *)(stackBaseAddress + 0x10);\n  localizedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(localizedErrorMessage,fileName,errorMessagePtr);\n}\n\n",
            "called": [
                "__errno_location",
                "dcgettext",
                "fatal",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "open_file_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "generate_formatted_string_0010a424",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "isSet",
                "cVar1": "emptyType",
                "bVar2": "typeFlag",
                "iVar3": "newCount",
                "uVar4": "returnValue",
                "pcVar5": "previousString",
                "__ptr": "allocatedMemory",
                "uVar6": "poppedType",
                "__s": "currentString",
                "sVar7": "previousStringLength",
                "sVar8": "currentStringLength",
                "__s_00": "newString",
                "lVar9": "index",
                "bVar10": "tempFlag",
                "lVar11": "loopIndex",
                "uVar12": "type"
            },
            "code": "\nundefined4 generateFormattedString_0010a424(long input,char flag,int count,char isSet)\n\n{\n  char emptyType;\n  byte typeFlag;\n  int newCount;\n  undefined4 returnValue;\n  char *previousString;\n  undefined8 *allocatedMemory;\n  undefined8 poppedType;\n  char *currentString;\n  size_t previousStringLength;\n  size_t currentStringLength;\n  char *newString;\n  long index;\n  byte tempFlag;\n  long loopIndex;\n  undefined type;\n  \n  if ((flag == '\\0') && (emptyType = stab_empty_type_lto_priv_0(), emptyType == '\\0')) {\n    return 0;\n  }\n  tempFlag = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n  previousString = (char *)stab_pop_type(input);\n  if (count < 0) {\n    allocatedMemory = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    type = 1;\n    if (tempFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      newCount = count + 1;\n      allocatedMemory = (undefined8 *)xmalloc((long)newCount * 8);\n      index = (long)(count + -1);\n      do {\n        typeFlag = 1;\n        if (tempFlag == 0) {\n          typeFlag = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        poppedType = stab_pop_type(input);\n        tempFlag = typeFlag & 1;\n        allocatedMemory[index] = poppedType;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (isSet == '\\0') {\n        emptyType = stab_empty_type_lto_priv_0(input);\n        if (emptyType == '\\0') {\n          return 0;\n        }\n        typeFlag = 1;\n        if (tempFlag == 0) {\n          typeFlag = *(byte *)(*(long *)(input + 0x60) + 0x1c);\n        }\n        tempFlag = typeFlag & 1;\n        poppedType = stab_pop_type(input);\n        allocatedMemory[(long)newCount + -1] = poppedType;\n        count = newCount;\n      }\n      goto LAB_0010a582;\n    }\n    allocatedMemory = (undefined8 *)0x0;\n    if (isSet != '\\0') goto LAB_0010a582;\n    allocatedMemory = (undefined8 *)xmalloc(8);\n    emptyType = stab_empty_type_lto_priv_0(input);\n    if (emptyType == '\\0') {\n      return 0;\n    }\n    if ((tempFlag != 0) || (*(char *)(*(long *)(input + 0x60) + 0x1c) != '\\0')) {\n      poppedType = stab_pop_type(input);\n      count = 1;\n      type = 1;\n      *allocatedMemory = poppedType;\n      goto LAB_0010a596;\n    }\n    poppedType = stab_pop_type(input);\n    count = 1;\n    *allocatedMemory = poppedType;\n  }\n  type = *(undefined *)(*(long *)(input + 0x60) + 0x1c);\nLAB_0010a596:\n  currentString = (char *)stab_pop_type(input);\n  previousStringLength = strlen(previousString);\n  currentStringLength = strlen(currentString);\n  index = previousStringLength + 10 + currentStringLength;\n  for (loopIndex = 0; (int)loopIndex < count; loopIndex = loopIndex + 1) {\n    previousStringLength = strlen((char *)allocatedMemory[loopIndex]);\n    index = index + previousStringLength;\n  }\n  newString = (char *)xmalloc(index);\n  sprintf(newString,\"#%s,%s\",previousString,currentString);\n  index = 0;\n  free(previousString);\n  free(currentString);\n  while( true ) {\n    previousStringLength = strlen(newString);\n    if (count <= (int)index) break;\n    *(undefined2 *)(newString + previousStringLength) = 0x2c;\n    previousString = (char *)allocatedMemory[index];\n    index = index + 1;\n    strcpy(newString + previousStringLength + 1,previousString);\n    free(previousString);\n  }\n  *(undefined2 *)(newString + previousStringLength) = 0x3b;\n  free(allocatedMemory);\n  returnValue = stab_push_string(input,newString,0,type,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(newString);\n  return returnValue;\n}\n\n",
            "called": [
                "stab_empty_type.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "stab_push_string",
                "sprintf",
                "strcpy",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "version",
                "pcVar1": "licenseText"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 version)\n\n{\n  char *licenseText;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  licenseText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(licenseText);\n  licenseText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(licenseText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "report",
                "display_info.isra.0.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_key_value_00114c80",
                "param_1": "inputString",
                "param_2": "defaultValue",
                "param_3": "errorString",
                "param_4": "additionalData",
                "pcVar1": "equalSignPos",
                "uVar2": "key",
                "auVar3": "resultStruct"
            },
            "code": "\nundefined  [16] extractKeyValue_00114c80(char *inputString,undefined8 defaultValue,undefined8 errorString,undefined8 additionalData)\n\n{\n  char *equalSignPos;\n  undefined8 key;\n  undefined resultStruct [16];\n  \n  equalSignPos = strchr(inputString,0x3d);\n  if (equalSignPos != (char *)0x0) {\n    resultStruct._0_8_ = (undefined8 *)xmalloc(0x30);\n    key = xstrndup(inputString,(long)equalSignPos - (long)inputString);\n    resultStruct._0_8_[2] = equalSignPos + 1;\n    resultStruct._0_8_[1] = key;\n    resultStruct._0_8_[4] = 0;\n    resultStruct._0_8_[3] = 0;\n    *resultStruct._0_8_ = defaultValue;\n    resultStruct._8_8_ = additionalData;\n    return resultStruct;\n  }\n  key = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(key,errorString);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_key_value_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_value_0010870e",
                "param_1": "targetAddress",
                "param_2": "newValue",
                "param_3": "ptrToPointer"
            },
            "code": "\nvoid updatePointerValue_0010870e(undefined8 targetAddress,undefined8 newValue,long *ptrToPointer)\n\n{\n  undefined8 *puVar1;\n  \n  puVar1 = (undefined8 *)*ptrToPointer;\n  *puVar1 = newValue;\n  *ptrToPointer = (long)(puVar1 + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_value_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_coff_type_0010dac0",
                "param_1": "coff_data",
                "param_2": "symbol_table",
                "param_3": "debug_data",
                "param_4": "param4",
                "param_5": "type_code",
                "param_6": "sublist",
                "param_7": "flag",
                "param_8": "param8",
                "lVar1": "var1",
                "cVar2": "var2",
                "uVar3": "var3",
                "uVar4": "var4",
                "lVar5": "var5",
                "uVar6": "var6",
                "plVar7": "var7",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "var8",
                "iVar9": "var9",
                "pcVar10": "var10",
                "uVar11": "var11",
                "lVar12": "var12",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "local_68": "local_buffer",
                "local_48": "local_flag",
                "local_47": "local_byte"
            },
            "code": "\nlong parse_coff_type_0010dac0(long coff_data,long *symbol_table,long debug_data,undefined8 param4,uint type_code,\n                 long *sublist,char flag,undefined8 param8)\n\n{\n  long var1;\n  char var2;\n  undefined4 var3;\n  undefined8 var4;\n  long var5;\n  undefined8 var6;\n  long *var7;\n  void *ptr1;\n  void *ptr2;\n  byte var8;\n  int var9;\n  char *var10;\n  ulong var11;\n  long var12;\n  uint var13;\n  uint var14;\n  undefined8 var15;\n  undefined local_buffer [32];\n  char local_flag;\n  byte local_byte;\n  \n  var5 = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(var5 + 0x38) & type_code) != 0) {\n    var13 = (int)type_code >> ((byte)*(undefined4 *)(var5 + 0x44) & 0x1f);\n    var11 = (ulong)(type_code & *(uint *)(var5 + 0x40));\n    var8 = (byte)*(undefined4 *)(var5 + 0x3c);\n    var13 = (var13 ^ type_code) & *(uint *)(var5 + 0x38) ^ var13;\n    if (var11 == 1L << (var8 & 0x3f)) {\n      var4 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param4,var13,sublist,flag,param8);\n      var5 = debug_make_pointer_type_isra_0(var4);\n      return var5;\n    }\n    if (var11 != 2L << (var8 & 0x3f)) {\n      if (var11 != 3L << (var8 & 0x3f)) {\n        var4 = dcgettext(0,\"parse_coff_type_0010dac0: Bad type code 0x%x\",5,*(undefined4 *)(var5 + 0x3c),\n                          var13);\n        non_fatal(var4,type_code);\n        return 0;\n      }\n      var14 = 0;\n      if (sublist != (long *)0x0) {\n        var14 = (uint)*(ushort *)(sublist + 2);\n        var7 = sublist + 2;\n        for (var9 = 0; (*(short *)var7 != 0 && (var9 != 3)); var9 = var9 + 1) {\n          *(short *)var7 = *(short *)((long)var7 + 2);\n          var7 = (long *)((long)var7 + 2);\n        }\n        *(short *)var7 = 0;\n      }\n      var15 = 0;\n      var4 = param8;\n      var6 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param4,var13,sublist,0);\n      var5 = *(long *)(debug_data + 0x28);\n      if (var5 == 0) {\n        var4 = debug_make_int_type_isra_0(4,0,var15,var4);\n        var5 = debug_name_type(param8,\"int\",var4);\n        *(long *)(debug_data + 0x28) = var5;\n      }\n      var5 = debug_make_array_type_isra_0(var6,var5,0,(long)(int)(var14 - 1),0);\n      return var5;\n    }\n    var4 = parse_coff_type_0010dac0(coff_data,symbol_table,debug_data,param4,var13,sublist,flag,param8);\n    var5 = debug_make_function_type_isra_0(var4,0,0);\n    return var5;\n  }\n  if ((sublist != (long *)0x0) && (0 < *sublist)) {\n    var7 = (long *)coff_get_slot_lto_priv_0(debug_data);\n    if (*var7 != 0) {\n      return *var7;\n    }\n    var5 = debug_make_indirect_type_isra_0(var7,0);\n    return var5;\n  }\n  if (flag == '\\0') {\n    sublist = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    var5 = debug_make_void_type_isra_0();\n    return var5;\n  }\n  var5 = *(long *)(debug_data + 8 + (long)(int)type_code * 8);\n  if (var5 != 0) {\n    return var5;\n  }\n  switch(type_code) {\n  default:\n    var4 = debug_make_void_type_isra_0();\n    var10 = \"void\";\n    break;\n  case 2:\n    var4 = debug_make_int_type_isra_0(1,0);\n    var10 = \"char\";\n    break;\n  case 3:\n    var4 = debug_make_int_type_isra_0(2,0);\n    var10 = \"short\";\n    break;\n  case 4:\n    var4 = debug_make_int_type_isra_0(4,0);\n    var10 = \"int\";\n    break;\n  case 5:\n    var4 = debug_make_int_type_isra_0(4,0);\n    var10 = \"long\";\n    break;\n  case 6:\n    var4 = debug_make_float_type_isra_0(4);\n    var10 = \"float\";\n    break;\n  case 7:\n    var4 = debug_make_float_type_isra_0(8);\n    var10 = \"double\";\n    break;\n  case 8:\n    if (sublist == (long *)0x0) {\n      var5 = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    var4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (sublist == (long *)0x0) {\n      var5 = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    var4 = 9;\nLAB_0010de7a:\n    var5 = parse_coff_struct_type(coff_data,symbol_table,debug_data,var4,sublist,param8);\nLAB_0010e046:\n    var7 = (long *)coff_get_slot_lto_priv_0(debug_data,param4);\n    *var7 = var5;\n    return var5;\n  case 10:\n    if (sublist == (long *)0x0) {\n      var5 = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      var5 = sublist[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      var12 = 0;\n      do {\n        while( true ) {\n          if ((var5 <= symbol_table[3]) || (symbol_table[1] <= symbol_table[2])) goto LAB_0010e032;\n          var9 = (int)var12;\n          var1 = *(long *)(*symbol_table + symbol_table[2] * 8);\n          var2 = bfd_coff_get_syment(coff_data,var1,local_buffer);\n          var12 = (long)var9;\n          if (var2 == '\\0') {\n            var3 = bfd_get_error();\n            var4 = bfd_errmsg(var3);\n            var6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(var6,var4);\n            free(ptr1);\n            free(ptr2);\n            var5 = 0;\n            goto LAB_0010e046;\n          }\n          symbol_table[2] = symbol_table[2] + 1;\n          symbol_table[3] = (ulong)local_byte + 1 + symbol_table[3];\n          if (local_flag != '\\x10') break;\n          if ((int)type_code <= var9 + 1) {\n            type_code = type_code + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)type_code << 3);\n          }\n          var12 = *(long *)(var1 + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)var9 * 8) = *(undefined8 *)(var1 + 8);\n          *(long *)((long)ptr2 + (long)var9 * 8) =\n               *(long *)(var1 + 0x10) + *(long *)(var12 + 0x30);\n          var12 = (long)(var9 + 1);\n        }\n      } while (local_flag != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + var12 * 8) = 0;\n      var5 = debug_make_enum_type_isra_0(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    var5 = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    var4 = debug_make_int_type_isra_0(1,1);\n    var10 = \"unsigned char\";\n    break;\n  case 0xd:\n    var4 = debug_make_int_type_isra_0(2,1);\n    var10 = \"unsigned short\";\n    break;\n  case 0xe:\n    var4 = debug_make_int_type_isra_0(4,1);\n    var10 = \"unsigned int\";\n    break;\n  case 0xf:\n    var4 = debug_make_int_type_isra_0(4,1);\n    var10 = \"unsigned long\";\n    break;\n  case 0x10:\n    var4 = debug_make_float_type_isra_0(0xc);\n    var10 = \"long double\";\n  }\n  var5 = debug_name_type(param8,var10,var4);\nLAB_0010e065:\n  *(long *)(debug_data + 8 + (long)(int)type_code * 8) = var5;\n  return var5;\n}\n\n",
            "called": [
                "debug_make_void_type.isra.0",
                "debug_make_struct_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "bfd_coff_get_syment",
                "dcgettext",
                "xmalloc",
                "debug_make_enum_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "debug_make_array_type.isra.0",
                "bfd_get_error",
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "parse_coff_type_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "extraout_var": "extraVar",
                "iVar1": "comparisonResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extraVar;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraVar,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "handle_remove_section_option",
                "FUN_00107880",
                "main",
                "skip_section",
                "stab_demangle_function_name.constprop.0",
                "FUN_0010554f",
                "convert_efi_target",
                "is_dwo_section.constprop.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "set_time_error_handling_0010882c",
                "piVar1": "errnoPtr",
                "uVar2": "errorString",
                "__errno_location": "__getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedErrorMessage",
                "non_fatal": "handleNonFatalError"
            },
            "code": "\nvoid setTimeErrorHandling_0010882c(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorString;\n  \n  errnoPtr = __getErrnoLocation();\n  getErrorString(*errnoPtr);\n  errorString = getLocalizedErrorMessage(0,\"%s: cannot set time: %s\",5);\n  handleNonFatalError(errorString);\n  return;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "dcgettext",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "set_time_error_handling_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_0010ebb0",
                "param_1": "outputHandle",
                "param_2": "file",
                "param_3": "count",
                "param_4": "flag",
                "__s": "symbol",
                "cVar1": "charValue",
                "uVar2": "index",
                "uVar3": "result",
                "sVar4": "fileLength",
                "sVar5": "symbolLength",
                "__s_00": "newSymbol"
            },
            "code": "\nundefined4 writeSymbol_0010ebb0(undefined8 outputHandle,char *file,int count,undefined8 flag)\n\n{\n  char charValue;\n  uint index;\n  undefined4 result;\n  char *symbol;\n  size_t fileLength;\n  size_t symbolLength;\n  char *newSymbol;\n  \n  symbol = (char *)stab_pop_type();\n  index = count - 1;\n  if (index < 4) {\n    result = *(undefined4 *)(CSWTCH_42 + (ulong)index * 4);\n    charValue = *(char *)((long)&CSWTCH_43 + (ulong)index);\n    fileLength = strlen(file);\n    symbolLength = strlen(symbol);\n    newSymbol = (char *)xmalloc(fileLength + 3 + symbolLength);\n    sprintf(newSymbol,\"%s:%c%s\",file,(ulong)(uint)(int)charValue,symbol);\n    free(symbol);\n    result = stab_write_symbol_lto_priv_0(outputHandle,result,0,flag,newSymbol);\n    if ((char)result != '\\0') {\n      free(newSymbol);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "abort",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "create_debug_type_00113b98",
                "param_1": "source",
                "param_2": "value1",
                "param_3": "value2",
                "lVar1": "debugType",
                "plVar2": "debugData"
            },
            "code": "\nlong createDebugType_00113b98(long source,long value1,long value2,undefined param_4)\n\n{\n  long debugType;\n  long *debugData;\n  \n  if ((source != 0) && (debugType = debug_make_type_constprop_0(0x13,0), debugType != 0)) {\n    debugData = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)debugData + 0x19) = 0;\n    *debugData = source;\n    *(undefined4 *)((long)debugData + 0x1c) = 0;\n    debugData[1] = value1;\n    debugData[2] = value2;\n    *(undefined *)(debugData + 3) = param_4;\n    *(long **)(debugType + 0x10) = debugData;\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_presence_or_traverse_table_00115d70",
                "param_1": "data",
                "param_2": "table",
                "lVar1": "result",
                "local_18": "symbol",
                "local_10": "presence"
            },
            "code": "\nundefined checkPresenceOrTraverseTable_00115d70(undefined8 data,undefined8 table)\n\n{\n  long result;\n  undefined8 symbol;\n  undefined presence;\n  \n  if (wildcard == '\\0') {\n    result = htab_find(table,data);\n    presence = result != 0;\n  }\n  else {\n    presence = 0;\n    symbol = data;\n    htab_traverse(table,is_specified_symbol_predicate,&symbol);\n  }\n  return presence;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_find",
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "copy_relocations_in_section.cold",
                "FUN_0010554f",
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_presence_or_traverse_table_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "initialize_monitors_00104000",
                "ctx": "context",
                "iVar1": "result",
                "__gmon_start__": "startMonitoring"
            },
            "code": "\nint initializeMonitors_00104000(EVP_PKEY_CTX *context)\n\n{\n  int result;\n  \n  result = startMonitoring();\n  return result;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitors_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "FUN_00114dc7",
                "display_info.isra.0",
                "stab_demangle_v3_arg",
                "set_times.cold",
                "copy_object.cold",
                "debug_get_real_type.isra.0",
                "FUN_001152b6",
                "debug_record_variable",
                "list_supported_targets",
                "debug_name_type",
                "section_add_load_file.cold",
                "list_matching_formats",
                "stab_typdef.lto_priv.0",
                "parse_number",
                "copy_section.cold",
                "setup_section.cold",
                "main",
                "debug_end_function",
                "copy_relocations_in_section",
                "FUN_001086af",
                "stab_int_type.lto_priv.0",
                "warn_stab",
                "FUN_00105828",
                "bfd_nonfatal_message",
                "FUN_00107976",
                "print_version",
                "debug_write_type.constprop.0",
                "FUN_0010554f",
                "add_redefine_and_check",
                "debug_find_named_type",
                "copy_file",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "FUN_00116490",
                "stab_demangle_v3_arglist",
                "debug_add_to_current_namespace.constprop.0",
                "get_file_size",
                "stab_find_type",
                "debug_tag_type",
                "stab_context",
                "FUN_00104cc1",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "copy_object",
                "stab_struct_field.lto_priv.0",
                "is_strip_section_1.isra.0.cold",
                "add_specific_symbols",
                "finish_stab",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "FUN_0010808f",
                "endian_string",
                "check_new_section_flags.cold",
                "copy_usage",
                "get_file_size.cold",
                "debug_end_block",
                "stab_write_symbol.lto_priv.0",
                "smart_rename.cold",
                "merge_gnu_build_notes",
                "bad_stab",
                "parse_flags.cold",
                "do_display_target",
                "parse_vma.cold",
                "create_new_symbol.cold",
                "stab_bad_demangle",
                "debug_start_block",
                "FUN_00108179",
                "FUN_00104ea2",
                "FUN_00107880",
                "strip_usage",
                "init_section_add.cold",
                "debug_record_line",
                "debug_start_source",
                "stab_find_slot",
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_add_element_00109be3",
                "param_1": "array",
                "param_2": "element",
                "param_3": "value",
                "uVar1": "newArray",
                "puVar2": "pointer",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndAddElement_00109be3(long array,undefined8 element,undefined4 value)\n\n{\n  undefined8 newArray;\n  undefined8 *pointer;\n  uint currentSize;\n  \n  if (*(uint *)(array + 0x2c) <= *(uint *)(array + 0x28)) {\n    currentSize = *(uint *)(array + 0x2c) + 10;\n    *(uint *)(array + 0x2c) = currentSize;\n    newArray = xrealloc(*(undefined8 *)(array + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(array + 0x20) = newArray;\n  }\n  currentSize = *(uint *)(array + 0x28);\n  pointer = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(array + 0x20));\n  *pointer = element;\n  *(undefined4 *)(pointer + 1) = value;\n  *(uint *)(array + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)pointer >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_and_add_element_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "memcpy",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "init_section_add",
                "main"
            ],
            "imported": false,
            "current_name": "copy_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_with_params_0010e918",
                "param_1": "symbolTable",
                "param_2": "value",
                "param_3": "length",
                "__s": "symbol",
                "sVar2": "valueLength",
                "sVar3": "symbolLength",
                "__s_00": "formattedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbolWithParams_0010e918(undefined8 symbolTable,char *value,undefined8 length)\n\n{\n  undefined4 result;\n  char *symbol;\n  size_t valueLength;\n  size_t symbolLength;\n  char *formattedString;\n  \n  symbol = (char *)stab_pop_type();\n  valueLength = strlen(value);\n  symbolLength = strlen(symbol);\n  formattedString = (char *)xmalloc(valueLength + 0x14 + symbolLength);\n  sprintf(formattedString,\"%s:c=e%s,%ld\",value,symbol,length);\n  free(symbol);\n  result = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,formattedString);\n  if ((char)result != '\\0') {\n    free(formattedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_params_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "inputSection",
                "param_2": "sectionParameters",
                "param_3": "outputSection",
                "uVar1": "tempByte",
                "uVar2": "tempVar2",
                "lVar3": "sectionSize",
                "iVar4": "copyWidth",
                "iVar5": "copyByte",
                "cVar6": "returnValue",
                "uVar7": "errorMessage",
                "__ptr": "allocatedMemory",
                "lVar8": "loopIndex",
                "uVar9": "loopIndex2",
                "iVar10": "reverseBytes",
                "uVar11": "loopIndex3",
                "puVar12": "tempPtr",
                "lVar13": "remainingSize",
                "puVar14": "tempPtr2",
                "puVar15": "tempPtr3",
                "pvVar16": "pointerVar",
                "uVar17": "loopIndex4",
                "uVar18": "reverseBytes2",
                "uVar19": "loopIndex5",
                "bVar20": "booleanVar",
                "local_38": "sectionSize2",
                "local_30": "sectionData"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 inputSection,undefined8 *sectionParameters,undefined8 outputSection)\n\n{\n  undefined tempByte;\n  undefined8 tempVar2;\n  long sectionSize;\n  int copyWidth;\n  int copyByte;\n  char returnValue;\n  undefined8 errorMessage;\n  undefined8 *allocatedMemory;\n  long loopIndex;\n  ulong loopIndex2;\n  int reverseBytes;\n  ulong loopIndex3;\n  undefined *tempPtr;\n  long remainingSize;\n  undefined8 *tempPtr2;\n  undefined8 *tempPtr3;\n  void *pointerVar;\n  ulong loopIndex4;\n  ulong reverseBytes2;\n  ulong loopIndex5;\n  byte booleanVar;\n  ulong sectionSize2;\n  void *sectionData;\n  \n  booleanVar = 0;\n  returnValue = skip_section(inputSection,sectionParameters,1);\n  if (returnValue != '\\0') {\n    return;\n  }\n  sectionSize2 = sectionParameters[8];\n  sectionSize = sectionParameters[0xc];\n  if (((*(byte *)((long)sectionParameters + 0x25) & 1) == 0) || ((*(byte *)(sectionSize + 0x25) & 1) == 0)) {\n    remainingSize = find_section_list(*sectionParameters,0,0x80);\n    if (remainingSize == 0) {\n      return;\n    }\n    if ((*(byte *)(remainingSize + 0x29) & 1) == 0) {\n      return;\n    }\n    allocatedMemory = (undefined8 *)xmalloc(sectionSize2);\n    tempPtr3 = allocatedMemory;\n    if (7 < sectionSize2) {\n      for (reverseBytes2 = sectionSize2 >> 3; reverseBytes2 != 0; reverseBytes2 = reverseBytes2 - 1) {\n        *tempPtr3 = 0;\n        tempPtr3 = tempPtr3 + (ulong)booleanVar * -2 + 1;\n      }\n    }\n    tempPtr2 = tempPtr3;\n    if ((sectionSize2 & 4) != 0) {\n      tempPtr2 = (undefined8 *)((long)tempPtr3 + (ulong)booleanVar * -8 + 4);\n      *(undefined4 *)tempPtr3 = 0;\n    }\n    tempPtr3 = tempPtr2;\n    if ((sectionSize2 & 2) != 0) {\n      tempPtr3 = (undefined8 *)((long)tempPtr2 + (ulong)booleanVar * -4 + 2);\n      *(undefined2 *)tempPtr2 = 0;\n    }\n    if ((sectionSize2 & 1) != 0) {\n      *(undefined *)tempPtr3 = 0;\n    }\n    returnValue = bfd_set_section_contents(outputSection,sectionSize,allocatedMemory,0);\n    if (returnValue != '\\0') {\n      free(allocatedMemory);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,outputSection,sectionSize,0);\n    free(allocatedMemory);\n    return;\n  }\n  sectionData = (void *)0x0;\n  returnValue = bfd_get_full_section_contents(inputSection,sectionParameters,&sectionData);\n  if ((returnValue == '\\0') ||\n     (returnValue = bfd_convert_section_contents(inputSection,sectionParameters,outputSection,&sectionData,&sectionSize2),\n     reverseBytes = reverse_bytes, returnValue == '\\0')) {\n    bfd_set_section_size(sectionSize,0);\n    status = 1;\n    bfd_nonfatal_message(0,inputSection,sectionParameters,0);\n    free(sectionData);\n    return;\n  }\n  copyWidth = copy_width;\n  copyByte = copy_byte;\n  if (reverse_bytes != 0) {\n    reverseBytes2 = (ulong)reverse_bytes;\n    if (sectionSize2 % reverseBytes2 != 0) {\n      tempVar2 = *sectionParameters;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(errorMessage,tempVar2,reverseBytes);\n    }\n    reverseBytes = reverse_bytes / 2;\n    loopIndex3 = 0;\n    while (loopIndex5 = loopIndex3, copyWidth = copy_width, copyByte = copy_byte, loopIndex5 < sectionSize2) {\n      loopIndex3 = reverseBytes2 + loopIndex5;\n      loopIndex4 = loopIndex3;\n      for (loopIndex2 = 0; loopIndex2 < (ulong)(long)reverseBytes; loopIndex2 = loopIndex2 + 1) {\n        loopIndex4 = loopIndex4 - 1;\n        tempPtr = (undefined *)(loopIndex5 + loopIndex2 + (long)sectionData);\n        tempByte = *tempPtr;\n        *tempPtr = *(undefined *)((long)sectionData + loopIndex4);\n        *(undefined *)((long)sectionData + loopIndex4) = tempByte;\n      }\n    }\n  }\n  copy_width = copyWidth;\n  copy_byte = copyByte;\n  if (-1 < copyByte) {\n    reverseBytes2 = (ulong)interleave;\n    reverseBytes = (int)((ulong)sectionParameters[7] % reverseBytes2);\n    loopIndex3 = ((long)copyByte - (long)reverseBytes) + (long)sectionData;\n    if (copyByte < reverseBytes) {\n      loopIndex3 = loopIndex3 + reverseBytes2;\n    }\n    remainingSize = (sectionSize2 + (long)sectionData) - loopIndex3;\n    pointerVar = sectionData;\n    for (; loopIndex3 < sectionSize2 + (long)sectionData; loopIndex3 = loopIndex3 + reverseBytes2) {\n      for (loopIndex = 0; ((int)loopIndex < copyWidth && (loopIndex != remainingSize)); loopIndex = loopIndex + 1) {\n        *(undefined *)((long)pointerVar + loopIndex) = *(undefined *)(loopIndex3 + loopIndex);\n      }\n      pointerVar = (void *)((long)pointerVar + loopIndex);\n      remainingSize = remainingSize - reverseBytes2;\n    }\n    sectionSize2 = ((((reverseBytes2 - 1) + sectionSize2) - (long)copyByte) / reverseBytes2) * (long)copyWidth;\n    reverseBytes2 = *(ulong *)(sectionSize + 0x38) / reverseBytes2;\n    *(ulong *)(sectionSize + 0x38) = reverseBytes2;\n    if (copyByte < reverseBytes) {\n      *(ulong *)(sectionSize + 0x38) = reverseBytes2 + 1;\n      returnValue = bfd_set_section_contents(outputSection,sectionSize,sectionData,0,sectionSize2);\n      if (returnValue == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  returnValue = bfd_set_section_contents(outputSection,sectionSize,sectionData,0,sectionSize2);\n  if (returnValue == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionData);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "copy_section.cold",
                "bfd_nonfatal_message",
                "find_section_list",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "skip_section",
                "xmalloc",
                "free",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "copy_relocations_in_section",
                "do_display_target",
                "bfd_nonfatal_message",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "uVar1": "errorMessage",
                "unaff_RBX": "isError",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long isError;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (isError != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block",
                "param_2": "new_block",
                "param_3": "unused",
                "param_4": "error_message",
                "lVar1": "current_block",
                "uVar2": "result",
                "pcVar3": "error_string",
                "auVar4": "output"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block,undefined8 new_block,undefined8 unused,undefined8 error_message)\n\n{\n  long current_block;\n  undefined8 result;\n  char *error_string;\n  undefined output [16];\n  \n  if ((*(long *)(block + 8) == 0) || (current_block = *(long *)(block + 0x20), current_block == 0)) {\n    error_string = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_block;\n      result = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_string = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  result = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010bf84:\n  output._8_8_ = error_message;\n  output._0_8_ = result;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "improved_demangle_0010c95e",
                "param_1": "ptr_input",
                "param_2": "ptr_buffer",
                "param_3": "ptr_length",
                "bVar1": "byte_val",
                "bVar2": "byte_val2",
                "pbVar3": "ptr_buffer2",
                "bVar4": "bool_val1",
                "bVar5": "bool_val2",
                "bVar6": "bool_val3",
                "cVar7": "char_val",
                "uVar8": "uint_val",
                "pbVar9": "ptr_buffer3",
                "lVar10": "long_val",
                "uVar11": "ushort_val",
                "pcVar12": "ptr_char1",
                "sVar13": "size_val",
                "uVar14": "ulong_val",
                "__ptr": "ptr_void",
                "lVar15": "ulong_val2",
                "puVar16": "ptr_ulong",
                "puVar17": "ptr_undefined",
                "ppcVar18": "ptr_ptr_char",
                "pcVar19": "ptr_char2",
                "pbVar20": "ptr_byte",
                "local_49": "undefined_val1",
                "local_48": "ulong_val3",
                "local_40": "ptr_char_array"
            },
            "code": "\nundefined8 improved_demangle_0010c95e(undefined8 *ptr_input,byte **ptr_buffer,long *ptr_length)\n\n{\n  byte byte_val;\n  byte byte_val2;\n  byte *ptr_buffer2;\n  bool bool_val1;\n  bool bool_val2;\n  bool bool_val3;\n  char char_val;\n  uint uint_val;\n  byte *ptr_buffer3;\n  long long_val;\n  undefined8 ushort_val;\n  char *ptr_char1;\n  size_t size_val;\n  ulong ulong_val;\n  void *ptr_void;\n  long ulong_val2;\n  ulong *ptr_ulong;\n  undefined *ptr_undefined;\n  char **ptr_ptr_char;\n  char *ptr_char2;\n  byte *ptr_byte;\n  undefined undefined_val1;\n  ulong ulong_val3;\n  char *ptr_char_array [2];\n  \n  while( true ) {\n    ptr_byte = *ptr_buffer;\n    byte_val = *ptr_byte;\n    if ('T' < (char)byte_val) break;\n    if ((char)byte_val < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byte_val) {\n    case 0x41:\n      ulong_val2 = 0;\n      ptr_buffer2 = ptr_byte;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *ptr_buffer = ptr_byte + 1;\n      char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n      if (char_val == '\\0') {\n        return 0;\n      }\n      if (ptr_length == (long *)0x0) {\n        return 1;\n      }\n      ulong_val2 = debug_make_const_type_isra_0(*ptr_length);\n      *ptr_length = ulong_val2;\n      return 1;\n    case 0x46:\n      *ptr_buffer = ptr_byte + 1;\n      if (ptr_length == (long *)0x0) {\n        ptr_ulong = (ulong *)0x0;\n        ptr_ptr_char = (char **)0x0;\n      }\n      else {\n        ptr_ulong = &ulong_val3;\n        ptr_ptr_char = ptr_char_array;\n      }\n      char_val = stab_demangle_args(ptr_input,ptr_buffer,ptr_ptr_char,ptr_ulong);\n      if (char_val == '\\0') {\n        return 0;\n      }\n      if (**ptr_buffer == 0x5f) {\n        *ptr_buffer = *ptr_buffer + 1;\n        char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n        if (char_val == '\\0') {\n          return 0;\n        }\n        if (ptr_length == (long *)0x0) {\n          return 1;\n        }\n        ulong_val2 = debug_make_function_type_isra_0(*ptr_length,ptr_char_array[0],ulong_val3 & 0xff);\n        *ptr_length = ulong_val2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *ptr_buffer = ptr_byte + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefined_val1 = 0;\n      ptr_char_array[0] = (char *)0x0;\n      ulong_val3 = 0;\n      *ptr_buffer = ptr_byte + 1;\n      if (((&_sch_istable)[(ulong)ptr_byte[1] * 2] & 4) == 0) {\n        if (ptr_byte[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ptr_ptr_char = ptr_char_array;\n        if (ptr_length == (long *)0x0) {\n          ptr_ptr_char = (char **)0x0;\n        }\n        char_val = stab_demangle_qualified(ptr_input,ptr_buffer,ptr_ptr_char);\n        if (char_val == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uint_val = stab_demangle_count(ptr_buffer);\n        ptr_buffer2 = *ptr_buffer;\n        size_val = strlen((char *)ptr_buffer2);\n        if (size_val < uint_val) goto switchD_0010cdf9_caseD_60;\n        *ptr_buffer = ptr_buffer2 + uint_val;\n        if ((ptr_length != (long *)0x0) &&\n           (ptr_char_array[0] = (char *)stab_find_tagged_type(*ptr_input,ptr_input[1],ptr_buffer2,uint_val,9),\n           ptr_char_array[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byte_val2 = **ptr_buffer;\n      if (byte_val == 0x4d) {\n        if ((byte_val2 == 0x43) || (byte_val2 == 0x56)) {\n          *ptr_buffer = *ptr_buffer + 1;\n        }\n        if (**ptr_buffer != 0x46) goto switchD_0010cdf9_caseD_60;\n        *ptr_buffer = *ptr_buffer + 1;\n        if (ptr_length == (long *)0x0) {\n          ptr_undefined = (undefined *)0x0;\n          ptr_ulong = (ulong *)0x0;\n        }\n        else {\n          ptr_undefined = &undefined_val1;\n          ptr_ulong = &ulong_val3;\n        }\n        char_val = stab_demangle_args(ptr_input,ptr_buffer,ptr_ulong,ptr_undefined);\n        if (char_val == '\\0') {\n          return 0;\n        }\n      }\n      if (**ptr_buffer == 0x5f) {\n        *ptr_buffer = *ptr_buffer + 1;\n        char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n        if (char_val == '\\0') {\n          return 0;\n        }\n        if (ptr_length == (long *)0x0) {\n          return 1;\n        }\n        if (byte_val != 0x4d) {\n          ulong_val2 = debug_make_offset_type_isra_0(ptr_char_array[0],*ptr_length);\n          *ptr_length = ulong_val2;\n          return 1;\n        }\n        ulong_val2 = debug_make_method_type_isra_0(*ptr_length,ptr_char_array[0],ulong_val3,undefined_val1);\n        *ptr_length = ulong_val2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      ushort_val = stab_demangle_qualified(ptr_input,ptr_buffer,ptr_length);\n      return ushort_val;\n    case 0x52:\n      *ptr_buffer = ptr_byte + 1;\n      char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n      if (char_val == '\\0') {\n        return 0;\n      }\n      if (ptr_length == (long *)0x0) {\n        return 1;\n      }\n      ulong_val2 = debug_make_reference_type_isra_0(*ptr_length);\n      *ptr_length = ulong_val2;\n      return 1;\n    case 0x54:\n      *ptr_buffer = ptr_byte + 1;\n      char_val = stab_demangle_get_count(ptr_buffer,&ulong_val3);\n      if (char_val != '\\0') {\n        if ((uint)ulong_val3 < *(uint *)(ptr_input + 5)) {\n          ptr_char_array[0] = *(char **)((ulong_val3 & 0xffffffff) * 0x10 + ptr_input[4]);\n          char_val = improved_demangle_0010c95e(ptr_input,ptr_char_array,ptr_length);\n          if (char_val == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byte_val == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *ptr_buffer = ptr_byte + 1;\n    char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n    if (char_val == '\\0') {\n      return 0;\n    }\n    if (ptr_length == (long *)0x0) {\n      return 1;\n    }\n    ulong_val2 = debug_make_pointer_type_isra_0(*ptr_length);\n    *ptr_length = ulong_val2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool_val3 = false;\n  bool_val1 = false;\n  char_val = '\\0';\n  bool_val2 = false;\n  do {\n    ptr_buffer2 = *ptr_buffer;\n    byte_val = *ptr_buffer2;\n    if (byte_val == 0x55) {\n      char_val = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byte_val) {\n      if (byte_val == 0x56) {\n        bool_val3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byte_val) goto switchD_0010cdf9_caseD_60;\n      if ((char)byte_val < '_') goto LAB_0010cdfb;\n      switch(byte_val) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (ptr_length == (long *)0x0) {\nLAB_0010d0aa:\n          *ptr_buffer = ptr_buffer2 + 1;\n          return 1;\n        }\n        ulong_val2 = debug_find_named_type(*ptr_input,&DAT_00120436);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_type_constprop_0(6,4);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"unsigned char\";\n        if ((char_val == '\\0') && (ptr_char2 = \"char\", bool_val1)) {\n          ptr_char2 = \"signed char\";\n        }\n        ulong_val2 = debug_find_named_type(*ptr_input,ptr_char2);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_int_type_isra_0(1,char_val);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ulong_val2 = debug_find_named_type(*ptr_input,\"float\");\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_float_type_isra_0(4);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"unsigned int\";\n        ptr_char1 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"long unsigned int\";\n        ptr_char1 = \"long int\";\nLAB_0010ced2:\n        if (char_val == '\\0') {\n          ptr_char2 = ptr_char1;\n        }\n        ulong_val2 = debug_find_named_type(*ptr_input,ptr_char2);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_int_type_isra_0(4,char_val);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        ptr_char2 = \"long double\";\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        ulong_val2 = debug_find_named_type(*ptr_input,ptr_char2);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_float_type_isra_0(8);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"short unsigned int\";\n        if (char_val == '\\0') {\n          ptr_char2 = \"short int\";\n        }\n        ulong_val2 = debug_find_named_type(*ptr_input,ptr_char2);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_int_type_isra_0(2,char_val);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ptr_ptr_char = ptr_char_array;\n        if (ptr_length == (long *)0x0) {\n          ptr_ptr_char = (char **)0x0;\n        }\n        char_val = stab_demangle_template(ptr_input,ptr_buffer,ptr_ptr_char);\n        if (char_val == '\\0') {\n          return 0;\n        }\n        if (ptr_length == (long *)0x0) {\n          return 1;\n        }\n        size_val = strlen(ptr_char_array[0]);\n        ulong_val2 = stab_find_tagged_type(*ptr_input,ptr_input[1],ptr_char_array[0],size_val & 0xffffffff,9);\n        *ptr_length = ulong_val2;\n        free(ptr_char_array[0]);\n        ulong_val2 = *ptr_length;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ulong_val2 = debug_find_named_type(*ptr_input,&DAT_00120495);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_void_type_isra_0();\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ulong_val2 = debug_find_named_type(*ptr_input,\"__wchar_t\");\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_int_type_isra_0(2,1);\n          *ptr_length = ulong_val2;\n          *ptr_buffer = *ptr_buffer + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (ptr_length == (long *)0x0) goto LAB_0010d0aa;\n        ptr_char2 = \"long long unsigned int\";\n        if (char_val == '\\0') {\n          ptr_char2 = \"long long int\";\n        }\n        ulong_val2 = debug_find_named_type(*ptr_input,ptr_char2);\n        *ptr_length = ulong_val2;\n        if (ulong_val2 == 0) {\n          ulong_val2 = debug_make_int_type_isra_0(8,char_val);\n          *ptr_length = ulong_val2;\n        }\n      }\n      *ptr_buffer = *ptr_buffer + 1;\n      goto LAB_0010d1de;\n    }\n    if (byte_val == 0x43) {\n      bool_val2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byte_val != 0x53) goto LAB_0010cdc5;\n    bool_val1 = true;\nLAB_0010cd84:\n    *ptr_buffer = ptr_buffer2 + 1;\n  } while( true );\nLAB_0010ca26:\n  ptr_buffer3 = ptr_buffer2 + 1;\n  *ptr_buffer = ptr_buffer3;\n  byte_val = *ptr_buffer3;\n  if (byte_val == 0) goto switchD_0010cdf9_caseD_60;\n  if (byte_val == 0x5f) {\n    *ptr_buffer = ptr_buffer2 + 2;\n    char_val = improved_demangle_0010c95e(ptr_input,ptr_buffer,ptr_length);\n    if (char_val == '\\0') {\n      return 0;\n    }\n    if (ptr_length == (long *)0x0) {\n      return 1;\n    }\n    long_val = debug_find_named_type(*ptr_input,\"int\");\n    if (long_val == 0) {\n      long_val = debug_make_int_type_isra_0(4,0);\n    }\n    ulong_val2 = debug_make_array_type_isra_0(*ptr_length,long_val,0,ulong_val2,0);\n    *ptr_length = ulong_val2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byte_val * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  ulong_val2 = ulong_val2 * 10 + (long)((char)byte_val + -0x30);\n  ptr_buffer2 = ptr_buffer3;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byte_val < ':') {\n    if ((char)byte_val < '0') {\n      if (byte_val != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(ptr_byte);\n      if (ptr_length == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byte_val != 0x47) || (*ptr_buffer = ptr_buffer2 + 1, ((&_sch_istable)[(ulong)ptr_buffer2[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  ptr_byte = *ptr_buffer;\n  uint_val = stab_demangle_count(ptr_buffer);\n  ptr_buffer2 = *ptr_buffer;\n  size_val = strlen((char *)ptr_buffer2);\n  ulong_val = (ulong)uint_val;\n  if (ulong_val <= size_val) {\n    *ptr_buffer = ptr_buffer2 + ulong_val;\n    if (ptr_length == (long *)0x0) {\n      return 1;\n    }\n    ptr_void = (void *)savestring(ptr_buffer2,ulong_val);\n    ulong_val2 = debug_find_named_type(*ptr_input,ptr_void);\n    *ptr_length = ulong_val2;\n    free(ptr_void);\n    if (*ptr_length == 0) {\n      ulong_val2 = stab_find_tagged_type(*ptr_input,ptr_input[1],ptr_buffer2,(int)*ptr_buffer - (int)ptr_buffer2,0);\n      *ptr_length = ulong_val2;\njoined_r0x0010d1d8:\n      if (ulong_val2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool_val2) {\n      ulong_val2 = debug_make_const_type_isra_0(*ptr_length);\n      *ptr_length = ulong_val2;\n    }\n    if (bool_val3) {\n      ulong_val2 = debug_make_volatile_type_isra_0(*ptr_length);\n      *ptr_length = ulong_val2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(ptr_byte);\n  return 0;\n}\n\n",
            "called": [
                "debug_find_named_type",
                "debug_make_void_type.isra.0",
                "stab_demangle_get_count",
                "debug_make_method_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "savestring",
                "strlen",
                "stab_demangle_args",
                "debug_make_reference_type.isra.0",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "stab_demangle_count",
                "stab_bad_demangle",
                "debug_make_type.constprop.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "stab_find_tagged_type",
                "stab_demangle_qualified",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "free",
                "debug_make_float_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_template",
                "stab_demangle_arg"
            ],
            "imported": false,
            "current_name": "improved_demangle_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = reengineer_function_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_section_size",
                "find_section_list",
                "bfd_get_arch",
                "bfd_get_full_section_contents",
                "copy_object.cold",
                "fwrite",
                "non_fatal",
                "fopen",
                "bfd_set_format",
                "check_new_section_flags",
                "free",
                "setup_section",
                "strerror",
                "merge_gnu_build_notes",
                "dcgettext",
                "bfd_get_section_by_name",
                "bfd_malloc_and_get_section",
                "xmalloc",
                "bfd_create_gnu_debuglink_section",
                "FUN_00105828",
                "__errno_location",
                "bfd_nonfatal_message",
                "startswith.lto_priv.0.lto_priv.0",
                "bfd_map_over_sections",
                "fclose",
                "FUN_0010554f",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_modification_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorString",
                "uVar4": "localizedString",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "backupTime",
                "local_28": "filePermissions",
                "uStack_24": "ownerUserId",
                "uStack_20": "ownerGroupId",
                "uStack_1c": "someValue"
            },
            "code": "\nvoid setFileModificationTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorString;\n  undefined8 localizedString;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 backupTime;\n  undefined4 filePermissions;\n  undefined4 ownerUserId;\n  undefined4 ownerGroupId;\n  undefined4 someValue;\n  \n  filePermissions = *(undefined4 *)(fileInfo + 0x58);\n  ownerUserId = *(undefined4 *)(fileInfo + 0x5c);\n  ownerGroupId = *(undefined4 *)(fileInfo + 0x60);\n  someValue = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  backupTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorString = strerror(*error);\n    localizedString = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(localizedString,filePath,errorString);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "set_times.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unknownValue"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unknownValue;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorDescription,errorMessage,unknownValue);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,unknownValue);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal.cold",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00104ea2",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "do_display_target.cold",
                "do_display_target",
                "mark_symbols_used_in_relocations.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "arrayPointer",
                "param_2": "paramFlag",
                "param_3": "paramInt",
                "param_4": "paramPtr",
                "param_5": "stringPtr",
                "lVar1": "tempLong1",
                "uVar2": "tempVar1",
                "lVar3": "tempLong2",
                "uVar4": "tempVar2",
                "uVar5": "tempVar3",
                "sVar6": "strLength",
                "lVar7": "tempLong3",
                "local_44": "localVar1",
                "uStack_40": "stackVar1",
                "uStack_3f": "stackVar2",
                "uStack_3e": "stackVar3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *arrayPointer,undefined paramFlag,int paramInt,undefined8 paramPtr,char *stringPtr)\n\n{\n  long tempLong1;\n  undefined4 tempVar1;\n  long tempLong2;\n  undefined8 tempVar2;\n  undefined8 tempVar3;\n  size_t strLength;\n  long tempLong3;\n  undefined4 localVar1;\n  undefined stackVar1;\n  undefined stackVar2;\n  undefined2 stackVar3;\n  undefined4 localVar2 [3];\n  \n  if (stringPtr == (char *)0x0) {\n    tempLong3 = 0;\n  }\n  else {\n    tempLong2 = bfd_hash_lookup(arrayPointer + 7,stringPtr,1,1);\n    if (tempLong2 == 0) {\n      tempVar1 = bfd_get_error();\n      tempVar2 = bfd_errmsg(tempVar1);\n      tempVar3 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(tempVar3,tempVar2);\n      return 0;\n    }\n    tempLong3 = *(long *)(tempLong2 + 0x20);\n    if (tempLong3 == -1) {\n      tempLong3 = arrayPointer[6];\n      tempLong1 = arrayPointer[5];\n      *(long *)(tempLong2 + 0x20) = tempLong3;\n      if (tempLong1 == 0) {\n        arrayPointer[4] = tempLong2;\n      }\n      else {\n        *(long *)(tempLong1 + 0x18) = tempLong2;\n      }\n      arrayPointer[5] = tempLong2;\n      strLength = strlen(stringPtr);\n      arrayPointer[6] = tempLong3 + 1 + strLength;\n    }\n  }\n  (**(code **)(*(long *)(*arrayPointer + 8) + 0x50))(tempLong3,&localVar1);\n  stackVar2 = 0;\n  stackVar1 = paramFlag;\n  (**(code **)(*(long *)(*arrayPointer + 8) + 0x68))((long)paramInt,&stackVar3);\n  (**(code **)(*(long *)(*arrayPointer + 8) + 0x50))(paramPtr,localVar2);\n  if ((ulong)arrayPointer[3] < arrayPointer[2] + 0xcU) {\n    arrayPointer[3] = arrayPointer[3] * 2;\n    tempLong3 = xrealloc(arrayPointer[1]);\n    arrayPointer[1] = tempLong3;\n  }\n  tempLong3 = arrayPointer[2];\n  tempLong2 = arrayPointer[1];\n  *(ulong *)(tempLong2 + tempLong3) = CONCAT26(stackVar3,CONCAT15(stackVar2,CONCAT14(stackVar1,localVar1)));\n  *(undefined4 *)(tempLong2 + 8 + tempLong3) = localVar2[0];\n  arrayPointer[2] = arrayPointer[2] + 0xc;\n  return CONCAT71((int7)((ulong)tempLong3 >> 8),1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "non_fatal",
                "bfd_errmsg",
                "strlen",
                "dcgettext",
                "bfd_hash_lookup",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_end_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "compareResult",
                "uVar2": "errorText",
                "pcVar3": "commaPos",
                "pcVar4": "nextSectionFlag",
                "sVar5": "sectionFlagLength",
                "iVar6": "sectionFlagIndex",
                "uVar7": "sectionFlagValue",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  int compareResult;\n  undefined8 errorText;\n  char *commaPos;\n  char *nextSectionFlag;\n  size_t sectionFlagLength;\n  int sectionFlagIndex;\n  uint sectionFlagValue;\n  undefined result [16];\n  \n  sectionFlagValue = 0;\n  do {\n    commaPos = strchr(sectionFlags,0x2c);\n    if (commaPos == (char *)0x0) {\n      sectionFlagLength = strlen(sectionFlags);\n      sectionFlagIndex = (int)sectionFlagLength;\n      nextSectionFlag = (char *)0x0;\n    }\n    else {\n      nextSectionFlag = commaPos + 1;\n      sectionFlagIndex = (int)commaPos - (int)sectionFlags;\n    }\n    sectionFlagLength = (size_t)sectionFlagIndex;\n    compareResult = strncasecmp(\"alloc\",sectionFlags,sectionFlagLength);\n    if (compareResult == 0) {\n      sectionFlagValue = sectionFlagValue | 1;\n    }\n    else {\n      compareResult = strncasecmp(\"load\",sectionFlags,sectionFlagLength);\n      if (compareResult == 0) {\n        sectionFlagValue = sectionFlagValue | 2;\n      }\n      else {\n        compareResult = strncasecmp(\"noload\",sectionFlags,sectionFlagLength);\n        if (compareResult == 0) {\n          sectionFlagValue = sectionFlagValue | 0x200;\n        }\n        else {\n          compareResult = strncasecmp(\"readonly\",sectionFlags,sectionFlagLength);\n          if (compareResult == 0) {\n            sectionFlagValue = sectionFlagValue | 8;\n          }\n          else {\n            compareResult = strncasecmp(\"debug\",sectionFlags,sectionFlagLength);\n            if (compareResult == 0) {\n              sectionFlagValue = sectionFlagValue | 0x2000;\n            }\n            else {\n              compareResult = strncasecmp(\"code\",sectionFlags,sectionFlagLength);\n              if (compareResult == 0) {\n                sectionFlagValue = sectionFlagValue | 0x10;\n              }\n              else {\n                compareResult = strncasecmp(\"data\",sectionFlags,sectionFlagLength);\n                if (compareResult == 0) {\n                  sectionFlagValue = sectionFlagValue | 0x20;\n                }\n                else {\n                  compareResult = strncasecmp(\"rom\",sectionFlags,sectionFlagLength);\n                  if (compareResult == 0) {\n                    sectionFlagValue = sectionFlagValue | 0x40;\n                  }\n                  else {\n                    compareResult = strncasecmp(\"exclude\",sectionFlags,sectionFlagLength);\n                    if (compareResult == 0) {\n                      sectionFlagValue = sectionFlagValue | 0x8000;\n                    }\n                    else {\n                      compareResult = strncasecmp(\"share\",sectionFlags,sectionFlagLength);\n                      if (compareResult == 0) {\n                        sectionFlagValue = sectionFlagValue | 0x8000000;\n                      }\n                      else {\n                        compareResult = strncasecmp(\"contents\",sectionFlags,sectionFlagLength);\n                        if (compareResult == 0) {\n                          sectionFlagValue = sectionFlagValue | 0x100;\n                        }\n                        else {\n                          compareResult = strncasecmp(\"merge\",sectionFlags,sectionFlagLength);\n                          if (compareResult == 0) {\n                            sectionFlagValue = sectionFlagValue | 0x800000;\n                          }\n                          else {\n                            compareResult = strncasecmp(\"strings\",sectionFlags,sectionFlagLength);\n                            if (compareResult != 0) {\n                              commaPos = (char *)xmalloc((long)(sectionFlagIndex + 1));\n                              strncpy(commaPos,sectionFlags,sectionFlagLength);\n                              commaPos[sectionFlagLength] = '\\0';\n                              errorText = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errorText,commaPos);\n                              errorText = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errorText,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            sectionFlagValue = sectionFlagValue | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextSectionFlag;\n  } while (nextSectionFlag != (char *)0x0);\n  result._4_4_ = 0;\n  result._0_4_ = sectionFlagValue;\n  result._8_8_ = arg4;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "get_modified_string_001125fa",
                "param_1": "inputArray",
                "__s": "outputString",
                "ppcVar2": "ptrToCharPointer",
                "sVar3": "lengthCharPointer",
                "sVar4": "lengthOutputString",
                "uVar1": "totalLength",
                "curr_1": "currentLength",
                "buf_0": "buffer"
            },
            "code": "\nchar * getModifiedString_001125fa(char **inputArray)\n\n{\n  ulong totalLength;\n  char **ptrToCharPointer;\n  size_t lengthCharPointer;\n  size_t lengthOutputString;\n  char *outputString;\n  \n  if (inputArray == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  ptrToCharPointer = (char **)inputArray[0x1d];\n  outputString = *inputArray;\n  if ((ptrToCharPointer != (char **)0x0) && ((*(byte *)((long)ptrToCharPointer + 0x49) & 0x10) == 0)) {\n    lengthCharPointer = strlen(*ptrToCharPointer);\n    lengthOutputString = strlen(outputString);\n    totalLength = lengthCharPointer + 3 + lengthOutputString;\n    if (currentLength < totalLength) {\n      if (currentLength != 0) {\n        free(buffer);\n      }\n      currentLength = (totalLength >> 1) + totalLength;\n      buffer = (char *)xmalloc();\n    }\n    sprintf(buffer,\"%s(%s)\",*(undefined8 *)inputArray[0x1d],*inputArray);\n    outputString = buffer;\n  }\n  return outputString;\n}\n\n",
            "called": [
                "strlen",
                "__assert_fail",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "copy_object",
                "FUN_00107976",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "get_modified_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "stab_demangle_template",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "bfd_nonfatal_message",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "main",
                "parse_coff_struct_type",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "FUN_0010554f",
                "stab_typdef.lto_priv.0",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "FUNC_00108f05"
            },
            "code": "\nundefined FUNC_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "FUNC_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_saved_stabs_00108863",
                "puVar1": "currentPointer",
                "puVar2": "nextPointer"
            },
            "code": "\nvoid clearSavedStabs_00108863(void)\n\n{\n  undefined4 *currentPointer;\n  undefined4 *nextPointer;\n  \n  currentPointer = (undefined4 *)saved_stabs;\n  do {\n    nextPointer = currentPointer + 6;\n    free(*(void **)(currentPointer + 4));\n    *(undefined8 *)(currentPointer + 4) = 0;\n    currentPointer = nextPointer;\n  } while (nextPointer != &saved_stabs_index);\n  saved_stabs_index = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_saved_stabs_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "update_debug_source_00108f08",
                "param_1": "sourceAddress",
                "param_2": "filename",
                "iVar1": "cmpResult",
                "uVar2": "returnValue",
                "puVar3": "currentSource",
                "puVar4": "previousSource",
                "lVar5": "count",
                "puVar6": "headSource",
                "pcVar7": "currentFilename",
                "puVar8": "tailSource",
                "bVar9": "byteFlag"
            },
            "code": "\n\n\nundefined8 updateDebugSource_00108f08(long sourceAddress,char *filename)\n\n{\n  int cmpResult;\n  undefined8 returnValue;\n  undefined8 *currentSource;\n  undefined8 *previousSource;\n  long count;\n  undefined8 *headSource;\n  char *currentFilename;\n  undefined8 *tailSource;\n  byte byteFlag;\n  \n  byteFlag = 0;\n  currentFilename = \"\";\n  if (filename != (char *)0x0) {\n    currentFilename = filename;\n  }\n  if (*(long *)(sourceAddress + 8) == 0) {\n    returnValue = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",returnValue);\n    returnValue = 0;\n  }\n  else {\n    for (currentSource = *(undefined8 **)(*(long *)(sourceAddress + 8) + 8); currentSource != (undefined8 *)0x0;\n        currentSource = (undefined8 *)*currentSource) {\n      cmpResult = filename_cmp(currentSource[1],currentFilename);\n      if (cmpResult == 0) goto LAB_00108fad;\n    }\n    currentSource = (undefined8 *)xmalloc(0x18);\n    headSource = *(undefined8 **)(sourceAddress + 0x10);\n    tailSource = currentSource;\n    for (count = 6; count != 0; count = count + -1) {\n      *(undefined4 *)tailSource = 0;\n      tailSource = (undefined8 *)((long)tailSource + (ulong)byteFlag * -8 + 4);\n    }\n    currentSource[1] = currentFilename;\n    tailSource = (undefined8 *)*headSource;\n    while (previousSource = tailSource, previousSource != (undefined8 *)0x0) {\n      headSource = previousSource;\n      tailSource = (undefined8 *)*previousSource;\n    }\n    *headSource = currentSource;\nLAB_00108fad:\n    *(undefined8 **)(sourceAddress + 0x10) = currentSource;\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "filename_cmp",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "update_debug_source_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_00116852",
                "FUN_001086af",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "delete_directory_00114b84",
                "param_9": "directory_path"
            },
            "code": "\nvoid delete_directory_00114b84(void)\n\n{\n  char *directory_path;\n  \n  rmdir(directory_path);\n  free(directory_path);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "copy_file.cold"
            ],
            "imported": false,
            "current_name": "delete_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "improved_process_sections_00114190",
                "param_1": "sections",
                "param_2": "is_reversed",
                "param_3": "flags",
                "uVar1": "section_flags",
                "plVar2": "current_section",
                "pplVar3": "result",
                "iVar4": "comparison_result",
                "uVar5": "error_message",
                "pplVar6": "current_change_section",
                "pplVar7": "previous_change_section",
                "pplVar8": "next_change_section"
            },
            "code": "\nlong ** improved_process_sections_00114190(long *sections,char is_reversed,uint flags)\n\n{\n  uint section_flags;\n  long *current_section;\n  long **result;\n  int comparison_result;\n  undefined8 error_message;\n  long **current_change_section;\n  long **previous_change_section;\n  long **next_change_section;\n  \n  previous_change_section = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (is_reversed == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_reversed == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_change_section = (long **)*previous_change_section;\n      if (current_change_section == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_change_section = (long **)0x0;\n    }\n    else {\n      current_section = change_sections[1];\n      if (*(char *)current_section == '!') {\n        comparison_result = fnmatch((char *)((long)current_section + 1),(char *)sections,0);\n        current_change_section = previous_change_section;\n        if (comparison_result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      comparison_result = fnmatch((char *)current_section,(char *)sections,0);\n      if (comparison_result != 0) goto LAB_001141e5;\n      current_change_section = (long **)*previous_change_section;\n      if (current_change_section == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_change_section + 0x14)) != 0) {\n      current_section = current_change_section[1];\n      if (*(char *)current_section == '!') {\n        comparison_result = fnmatch((char *)((long)current_section + 1),(char *)sections,0);\n        if (comparison_result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_change_section + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        comparison_result = fnmatch((char *)current_section,(char *)sections,0);\n        if ((previous_change_section == (long **)0x0) && (comparison_result == 0)) {\n          next_change_section = (long **)*current_change_section;\n          previous_change_section = current_change_section;\n          if (next_change_section == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_change_section = (long **)*current_change_section;\n    current_change_section = previous_change_section;\n    if (next_change_section != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    comparison_result = strcmp((char *)change_sections[1],(char *)sections);\n    if (comparison_result == 0) {\nLAB_001143cd:\n      section_flags = *(uint *)((long)previous_change_section + 0x14);\n      if ((((section_flags & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((section_flags & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,sections);\n      }\n      if ((((section_flags & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,sections);\n      }\n      if ((((section_flags & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_change_section + 0x14) = section_flags | flags;\n        return previous_change_section;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,sections);\n    }\n    previous_change_section = (long **)*previous_change_section;\n    if (previous_change_section == (long **)0x0) goto LAB_001142a9;\n    comparison_result = strcmp((char *)previous_change_section[1],(char *)sections);\n    if (comparison_result == 0) goto LAB_001143cd;\n    next_change_section = (long **)*previous_change_section;\n    current_change_section = (long **)0x0;\n    if (next_change_section == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_change_section = current_change_section;\n      if (is_reversed == '\\0') {\n        while (current_change_section = next_change_section, result = previous_change_section, next_change_section = current_change_section,\n              (flags & *(uint *)((long)current_change_section + 0x14)) != 0) {\n          current_section = current_change_section[1];\n          if (*(char *)current_section == '!') {\n            comparison_result = fnmatch((char *)((long)current_section + 1),(char *)sections,0);\n            if (comparison_result == 0) goto LAB_0011438e;\n            next_change_section = (long **)*current_change_section;\n            if ((long **)*current_change_section == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            comparison_result = fnmatch((char *)current_section,(char *)sections,0);\n            if ((previous_change_section == (long **)0x0) && (comparison_result == 0)) {\n              previous_change_section = current_change_section;\n              next_change_section = (long **)*current_change_section;\n              if ((long **)*current_change_section == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_change_section = (long **)*current_change_section;\n              if ((long **)*current_change_section == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        comparison_result = strcmp((char *)next_change_section[1],(char *)sections);\n        result = current_change_section;\n        previous_change_section = next_change_section;\n        if (comparison_result == 0) goto LAB_001143cd;\n      }\n      current_change_section = result;\n      next_change_section = (long **)*next_change_section;\n      previous_change_section = current_change_section;\n    } while (next_change_section != (long **)0x0);\nLAB_001142a1:\n    if (is_reversed != '\\0') {\nLAB_001142a9:\n      current_change_section = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_change_section + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_change_section + 2) = 0;\n      *(uint *)((long)current_change_section + 0x14) = flags;\n      current_change_section[5] = (long *)0x0;\n      previous_change_section = current_change_section;\n      *current_change_section = (long *)change_sections;\n      change_sections = previous_change_section;\n      current_change_section[1] = sections;\n      return current_change_section;\n    }\n  }\nLAB_00114212:\n  if (previous_change_section == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_change_section + 2) = 1;\n  return previous_change_section;\n}\n\n",
            "called": [
                "find_section_list.cold",
                "dcgettext",
                "fatal",
                "fnmatch",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "copy_section",
                "handle_remove_section_option",
                "setup_section.cold",
                "FUN_00107880",
                "main",
                "copy_relocations_in_section",
                "is_strip_section_1.isra.0",
                "setup_section"
            ],
            "imported": false,
            "current_name": "improved_process_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "decompiled_function_00116490",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "bVar4": "boolVar",
                "puVar5": "ptrVar",
                "iVar6": "intVar",
                "lVar7": "lengthVar",
                "uVar8": "result4",
                "in_RAX": "param_5",
                "uVar9": "result5",
                "uVar10": "result6",
                "uVar11": "result7",
                "uVar12": "result8",
                "__ptr": "ptrVar2",
                "uVar13": "result9",
                "unaff_RBX": "unaff_var1",
                "unaff_RBP": "unaff_var2",
                "puVar14": "ptrVar3",
                "puVar15": "ptrVar4",
                "cVar16": "charVar",
                "puVar17": "ptrVar5",
                "puVar18": "ptrVar6",
                "in_R11": "param_6",
                "unaff_R12": "unaff_ptrVar1",
                "unaff_R13": "unaff_var3",
                "__nmemb": "memVar",
                "unaff_R14": "unaff_ptrVar2",
                "puVar19": "ptrVar7",
                "unaff_retaddr": "unaff_var4",
                "in_stack_00000020": "stackVar1",
                "in_stack_00000028": "stackPtrVar1",
                "in_stack_00000030": "stackPtrVar2",
                "in_stack_00000038": "stackVar2",
                "in_stack_00000040": "stackVar3",
                "in_stack_00000048": "stackPtrVar3",
                "bVar21": "byteVar",
                "iVar22": "intVar2"
            },
            "code": "\nulong decompiled_function_00116490(undefined8 arg1,ulong arg2,ulong arg3,long arg4)\n\n{\n  undefined8 result1;\n  undefined8 result2;\n  ulong result3;\n  bool boolVar;\n  ulong *ptrVar;\n  int intVar;\n  long lengthVar;\n  undefined8 result4;\n  ulong param_5;\n  ulong result5;\n  ulong result6;\n  ulong result7;\n  ulong result8;\n  undefined *ptrVar2;\n  ulong result9;\n  ulong unaff_var1;\n  ulong unaff_var2;\n  ulong *ptrVar3;\n  undefined *ptrVar4;\n  char charVar;\n  undefined *ptrVar5;\n  undefined *ptrVar6;\n  ulong param_6;\n  ulong *unaff_ptrVar1;\n  ulong *ptrVar7;\n  ulong unaff_var3;\n  size_t memVar;\n  undefined8 *unaff_ptrVar2;\n  ulong *presult20;\n  byte byteVar;\n  int intVar2;\n  ulong unaff_var4;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong stackVar1;\n  ulong *stackPtrVar1;\n  undefined *stackPtrVar2;\n  uint stackVar2;\n  uint stackVar3;\n  undefined8 *stackPtrVar3;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  lengthVar = arg4;\n  result6 = unaff_var2;\n  result9 = unaff_var3;\n  if (param_5 == 0) {\n    if (arg2 == 0x100) {\n      unaff_ptrVar1[7] = unaff_var4;\n      result7 = unaff_var4;\nLAB_001164af:\n      result5 = unaff_var3;\n      result9 = unaff_var3;\n      unaff_var4 = result7;\n    }\n    else {\n      unaff_ptrVar1[7] = param_9;\nLAB_0011669e:\n      result6 = unaff_var2;\n      result5 = unaff_var2;\n    }\nLAB_001164bb:\n    unaff_ptrVar1[8] = result5;\n    if (*(char *)((unaff_ptrVar1[3] - 1) + arg3) != '\\0') {\n      lengthVar = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar7 = unaff_ptrVar1 + 9;\n    if (0xb < unaff_var1) {\n      result5 = (**(code **)(unaff_ptrVar2[1] + 0x40))(lengthVar);\n      *ptrVar7 = result5;\n      result5 = (**(code **)(unaff_ptrVar2[1] + 0x40))(lengthVar + 4);\n      unaff_ptrVar1[10] = result5;\n      arg2 = (**(code **)(unaff_ptrVar2[1] + 0x40))(lengthVar + 8);\n      arg3 = *ptrVar7;\n      unaff_ptrVar1[0xb] = arg2;\n      param_5 = unaff_ptrVar1[10];\n      result5 = arg3 + 3 & 0xfffffffffffffffc;\n      unaff_ptrVar1[0xf] = result5;\n      if (param_5 != (param_5 + 3 & 0xfffffffffffffffc)) {\n        lengthVar = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < arg2 - 0x100) {\n        lengthVar = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      result7 = result5 + param_5 + 0xc;\n      if (unaff_var1 < result7) {\n        lengthVar = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (arg3 < 2) {\n        lengthVar = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_ptrVar1[0xc] = lengthVar + 0xc;\n      param_6 = lengthVar + 0xc + result5;\n      unaff_ptrVar1[0xd] = param_6;\n      unaff_var1 = unaff_var1 + (-0xc - (result5 + param_5));\n      arg4 = lengthVar + result7;\n      unaff_var2 = result6;\n      unaff_ptrVar1 = ptrVar7;\n      unaff_var3 = result9;\n      if (arg3 != 2) {\n        if (*(char *)(lengthVar + 0xc) == '$') {\n          if ((*(char *)(lengthVar + 0xd) == '\\x01') && (*(char *)(lengthVar + 0xe) == '1')) {\n            result6 = decompiled_function_00116490();\n            return result6;\n          }\n        }\n        else if ((((4 < arg3) && (*(char *)(lengthVar + 0xc) == 'G')) &&\n                 (*(char *)(lengthVar + 0xd) == 'A')) &&\n                ((*(char *)(lengthVar + 0xe) == '$' && (*(char *)(lengthVar + 0xf) == '\\x01')))) {\n          if (*(char *)(lengthVar + 0x10) == '2') {\n            result6 = decompiled_function_00116490();\n            return result6;\n          }\n          if (*(char *)(lengthVar + 0x10) == '3') {\n            result6 = decompiled_function_00116490();\n            return result6;\n          }\n          lengthVar = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_var1 != 0) {\n      lengthVar = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stackVar2 | stackVar3 | param_8) == 0) {\n      result1 = *unaff_ptrVar2;\n      result2 = *stackPtrVar3;\n      result4 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(result4,result1,result2);\nLAB_0011671b:\n      memVar = ((long)ptrVar7 - (long)stackPtrVar1 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stackPtrVar1,memVar,0x48,compare_gnu_build_notes);\n      for (ptrVar3 = stackPtrVar1; ptrVar3 < ptrVar7; ptrVar3 = ptrVar3 + 9) {\n        result6 = ptrVar3[2];\n        if (result6 != 0) {\n          result9 = ptrVar3[7];\n          result5 = ptrVar3[8];\n          presult20 = ptrVar3;\n          intVar2 = 0;\n          if (result9 == result5) {\n            ptrVar3[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptrVar = presult20;\n                presult20 = ptrVar + -9;\n                if (presult20 < stackPtrVar1) goto LAB_001167f5;\n                result7 = ptrVar[-7];\n              } while (result7 == 0);\n              if ((*presult20 != *ptrVar3) ||\n                 (intVar = memcmp((void *)ptrVar[-6],(void *)ptrVar3[3],*ptrVar3), intVar != 0))\n              break;\n              result3 = ptrVar[-2];\n              result8 = ptrVar[-1];\n              if (result9 == result3) {\n                if (result5 == result8) {\n                  ptrVar3[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (result5 <= result8) {\n                  ptrVar3[2] = 0;\n                  break;\n                }\n                if (result8 < result9) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < result8) ||\n                     (result9 <= (result8 + 0xf & 0xfffffffffffffff0))) goto reconstruct_gnu_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((result6 == 0x101) == (result7 == 0x101)) {\n                  if (result8 <= result5) {\n                    result8 = result5;\n                  }\n                  if (result3 < result9) {\n                    result9 = result3;\n                  }\n                  ptrVar[-1] = result8;\n                  ptrVar[-2] = result9;\n                  ptrVar3[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (result3 <= result9) goto LAB_001167a6;\n                if (result8 < result9) goto LAB_0010852c;\n                if (result5 < result9) {\n                  if ((0xfffffffffffffff0 < result5) || (result3 <= (result5 + 0xf & 0xfffffffffffffff0)))\n                  goto reconstruct_gnu_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (result5 != result8) goto LAB_001167b8;\n              }\nreconstruct_gnu_build_notes_00116852:\n              boolVar = intVar2 < 0x11;\n              intVar2 = intVar2 + 1;\n            } while (boolVar);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stackPtrVar1,memVar,0x48,sort_gnu_build_notes);\n      ptrVar2 = (undefined *)xmalloc(stackVar1 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      ptrVar6 = ptrVar2;\n      for (ptrVar3 = stackPtrVar1; ptrVar3 < ptrVar7; ptrVar3 = ptrVar3 + 9) {\n        if (ptrVar3[2] != 0) {\n          ptrVar5 = ptrVar6 + 4;\n          ptrVar4 = ptrVar6 + 0xc;\n          if ((ptrVar3[7] == param_9) && (ptrVar3[8] == param_7)) {\n            (**(code **)(unaff_ptrVar2[1] + 0x50))(*ptrVar3,ptrVar6);\n            (**(code **)(unaff_ptrVar2[1] + 0x50))(0,ptrVar5);\n            (**(code **)(unaff_ptrVar2[1] + 0x50))(ptrVar3[2],ptrVar6 + 8);\n            result9 = ptrVar3[6];\n            result6 = *ptrVar3;\n            ptrVar6 = (undefined *)ptrVar3[3];\n            ptrVar5 = ptrVar4;\n            for (result5 = result6; result5 != 0; result5 = result5 - 1) {\n              *ptrVar5 = *ptrVar6;\n              ptrVar6 = ptrVar6 + (ulong)byteVar * -2 + 1;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n            }\n            if (result6 < result9) {\n              for (lengthVar = result9 - result6; lengthVar != 0; lengthVar = lengthVar + -1) {\n                *ptrVar5 = 0;\n                ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptrVar6 = ptrVar4 + result9;\n          }\n          else {\n            (**(code **)(unaff_ptrVar2[1] + 0x50))();\n            if (*(int *)(unaff_ptrVar2[1] + 8) == 5) {\n              charVar = (*(char *)(unaff_ptrVar2[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(unaff_ptrVar2[1] + 0x50))(charVar,ptrVar5);\n            (**(code **)(unaff_ptrVar2[1] + 0x50))(ptrVar3[2],ptrVar6 + 8);\n            result6 = *ptrVar3;\n            ptrVar6 = (undefined *)ptrVar3[3];\n            ptrVar5 = ptrVar4;\n            for (result9 = result6; result9 != 0; result9 = result9 - 1) {\n              *ptrVar5 = *ptrVar6;\n              ptrVar6 = ptrVar6 + (ulong)byteVar * -2 + 1;\n              ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n            }\n            result9 = ptrVar3[6];\n            if (result6 < result9) {\n              for (lengthVar = result9 - result6; lengthVar != 0; lengthVar = lengthVar + -1) {\n                *ptrVar5 = 0;\n                ptrVar5 = ptrVar5 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            lengthVar = unaff_ptrVar2[1];\n            ptrVar4 = ptrVar4 + result9;\n            ptrVar6 = ptrVar4 + 8;\n            if ((*(int *)(lengthVar + 8) == 5) && (*(char *)(unaff_ptrVar2[0x22] + 4) == '\\x02')) {\n              (**(code **)(lengthVar + 0x38))(ptrVar3[7],ptrVar4);\n              (**(code **)(unaff_ptrVar2[1] + 0x38))(ptrVar3[8],ptrVar6);\n              ptrVar6 = ptrVar4 + 0x10;\n            }\n            else {\n              (**(code **)(lengthVar + 0x50))(ptrVar3[7],ptrVar4);\n              (**(code **)(unaff_ptrVar2[1] + 0x50))(ptrVar3[8],ptrVar4 + 4);\n            }\n            param_9 = ptrVar3[7];\n            param_7 = ptrVar3[8];\n          }\n        }\n      }\n      result9 = (long)ptrVar6 - (long)ptrVar2;\n      result6 = result9;\n      ptrVar6 = ptrVar2;\n      if (result9 < stackVar1) {\n        for (; stackVar1 = result9, result6 != 0; result6 = result6 - 1) {\n          *stackPtrVar2 = *ptrVar6;\n          ptrVar6 = ptrVar6 + (ulong)byteVar * -2 + 1;\n          stackPtrVar2 = stackPtrVar2 + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(ptrVar2);\nLAB_001166f8:\n      free(stackPtrVar1);\n      return stackVar1;\n    }\n    if (((stackVar3 | param_8) == 0) || (stackVar2 == 0)) {\n      if (stackVar3 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lengthVar = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (param_5 == 0x10) {\n      result7 = (**(code **)(unaff_ptrVar2[1] + 0x28))(param_6);\n      result5 = (**(code **)(unaff_ptrVar2[1] + 0x28))(unaff_ptrVar1[4] + 8);\n      if (result5 < result7) {\n        result7 = result5;\n      }\nLAB_00116631:\n      if (unaff_ptrVar1[2] == 0x100) {\n        if (result7 == 0) {\n          result7 = unaff_var4;\n        }\n        arg3 = *unaff_ptrVar1;\n        unaff_ptrVar1[7] = result7;\n        result9 = result5;\n        unaff_var4 = result7;\n        if (result5 == 0) goto LAB_001164af;\n      }\n      else {\n        if (result7 == 0) {\n          result7 = param_9;\n        }\n        arg3 = *unaff_ptrVar1;\n        unaff_ptrVar1[7] = result7;\n        result6 = result5;\n        param_9 = result7;\n        if (result5 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (param_5 < 0x11) {\n      if (param_5 == 4) {\n        result7 = (**(code **)(unaff_ptrVar2[1] + 0x40))(param_6);\n        result5 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (param_5 == 8) {\n        result6 = FUNC_001086af();\n        return result6;\n      }\n    }\n    lengthVar = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lengthVar != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_ptrVar2,stackPtrVar3,lengthVar);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "decompiled_function_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto reconstruct_gnu_build_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto reconstruct_gnu_build_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nreconstruct_gnu_build_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "targetListItem",
                "pcVar2": "localizedText",
                "__ptr": "targetList",
                "plVar3": "currentListItem"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long targetListItem;\n  char *localizedText;\n  long *targetList;\n  long *currentListItem;\n  \n  if (target == 0) {\n    localizedText = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,localizedText);\n  }\n  else {\n    localizedText = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,localizedText,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentListItem = targetList;\n  while( true ) {\n    targetListItem = *currentListItem;\n    currentListItem = currentListItem + 1;\n    if (targetListItem == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fputc",
                "dcgettext",
                "free",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "copy_usage",
                "strip_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_debugging_function_0010be1a",
                "param_1": "functionData",
                "param_2": "message",
                "param_3": "unkVar1",
                "param_4": "unkVar2",
                "lVar1": "blockData",
                "uVar2": "result",
                "pcVar3": "errorMessage",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endDebuggingFunction_0010be1a(long functionData,undefined8 message,undefined8 unkVar1,undefined8 unkVar2)\n\n{\n  long blockData;\n  undefined8 result;\n  char *errorMessage;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionData + 8) == 0) || (blockData = *(long *)(functionData + 0x20), blockData == 0)) ||\n     (*(long *)(functionData + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(blockData + 8) == 0) {\n      *(undefined8 *)(blockData + 0x20) = message;\n      result = CONCAT71((int7)((ulong)blockData >> 8),1);\n      *(undefined (*) [16])(functionData + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  result = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",result);\n  result = 0;\nLAB_0010be86:\n  returnValue._8_8_ = unkVar2;\n  returnValue._0_8_ = result;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "end_debugging_function_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_modify_type",
                "display_info.isra.0",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_qualified",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "setup_section",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "parse_flags.cold",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "display_info.isra.0.cold",
                "is_dwo_section.constprop.0",
                "stab_typed_constant.lto_priv.0",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "FUN_0010554f",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "start_stab.constprop.0",
                "debug_make_struct_type.isra.0",
                "display_info.isra.0",
                "stab_record_variable",
                "stab_class_start_method.lto_priv.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "section_add_load_file",
                "debug_make_type.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_record_variable",
                "debug_name_type",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "savestring",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "debug_make_enum_type.isra.0",
                "stab_find_tagged_type",
                "template_in_dir",
                "bfd_get_archive_filename",
                "FUN_0010554f",
                "add_redefine_and_check",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "debug_add_to_namespace.constprop.0",
                "stab_modify_type",
                "find_section_list",
                "parse_coff_type.lto_priv.0",
                "debug_record_function",
                "debug_make_indirect_type.isra.0",
                "stab_push_string",
                "stab_demangle_v3_arglist",
                "stab_demangle_args",
                "debug_tag_type",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "debug_make_array_type.isra.0",
                "coff_get_slot.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_struct_field.lto_priv.0",
                "add_specific_symbols",
                "parse_stab_type",
                "setup_section",
                "debug_record_parameter",
                "debug_make_method_type.isra.0",
                "init_section_add",
                "merge_gnu_build_notes",
                "stab_start_struct_type.lto_priv.0",
                "parse_flags.cold",
                "debug_make_offset_type.isra.0",
                "debug_set_class_id.lto_priv.0",
                "debug_start_block",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_variable.lto_priv.0",
                "debug_set_filename",
                "stab_float_constant.lto_priv.0",
                "debug_record_line",
                "stab_offset_type.lto_priv.0",
                "xstrndup",
                "debug_make_function_type.isra.0",
                "debug_start_source",
                "convert_efi_target",
                "stab_find_slot"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "copy_relocations_in_section",
                "merge_gnu_build_notes",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_memory_block_00113da9",
                "param_1": "size",
                "param_2": "unknown1",
                "param_3": "unknown2",
                "param_4": "unknown3",
                "puVar1": "memoryBlock",
                "lVar2": "iterator",
                "puVar3": "ptr",
                "bVar4": "offset",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] initializeMemoryBlock_00113da9(byte size,undefined8 unknown1,undefined8 unknown2,undefined8 unknown3)\n\n{\n  undefined8 *memoryBlock;\n  long iterator;\n  undefined8 *ptr;\n  byte offset;\n  undefined output [16];\n  \n  offset = 0;\n  output._0_8_ = debug_make_type_constprop_0(8 - (uint)size);\n  if (output._0_8_ != 0) {\n    memoryBlock = (undefined8 *)xmalloc(0x28);\n    ptr = memoryBlock + 1;\n    for (iterator = 8; iterator != 0; iterator = iterator + -1) {\n      *(undefined4 *)ptr = 0;\n      ptr = (undefined8 *)((long)ptr + (ulong)offset * -8 + 4);\n    }\n    *memoryBlock = unknown2;\n    *(undefined8 **)(output._0_8_ + 0x10) = memoryBlock;\n  }\n  output._8_8_ = unknown3;\n  return output;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_length",
                "return": "comparison_result"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_length;\n  \n  record1_length = record1[2];\n  if (record1_length == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          comparison_result -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              comparison_result (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          comparison_result 0;\n        }\n      }\n      comparison_result 1;\n    }\n  }\n  else if ((record1_length == 0) || ((record1_length != 0x100 && (record2[2] != 0)))) {\n    comparison_result 1;\n  }\n  comparison_result -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "create_stab_entry_0010a69a",
                "param_1": "stabIndex",
                "param_2": "param2",
                "param_3": "hasStruct",
                "param_4": "charValue",
                "param_5": "uintValue",
                "uVar1": "returnValue",
                "lVar2": "structIndex",
                "sVar3": "localStringSize",
                "uVar4": "allocatedMemory",
                "uVar5": "hasStructFlag",
                "local_60": "localString"
            },
            "code": "\nundefined4 createStabEntry_0010a69a(long stabIndex,undefined8 param2,int hasStruct,char charValue,uint uintValue)\n\n{\n  undefined4 returnValue;\n  long structIndex;\n  size_t localStringSize;\n  undefined8 allocatedMemory;\n  undefined hasStructFlag;\n  char localString [48];\n  \n  if (hasStruct == 0) {\n    localString[0] = '\\0';\n    hasStructFlag = 0;\n    structIndex = 0;\n  }\n  else {\n    structIndex = stab_get_struct_index();\n    if (structIndex < 0) {\n      return 0;\n    }\n    hasStructFlag = 1;\n    sprintf(localString,\"%ld=\",structIndex);\n  }\n  localStringSize = strlen(localString);\n  sprintf(localString + localStringSize,\"%c%u\",(ulong)((-(uint)(charValue == '\\0') & 2) + 0x73),(ulong)uintValue);\n  returnValue = stab_push_string(stabIndex,localString,structIndex,hasStructFlag,uintValue);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  structIndex = *(long *)(stabIndex + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(structIndex + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(stabIndex + 0x60) + 0x20) = 0;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_stab_entry_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "stab_end_class_type.lto_priv.0",
                "setup_section",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00114dc7",
                "main",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_binary_00115b70",
                "param_1": "binaryPath",
                "pcVar1": "currentSection",
                "iVar2": "strcmpResult",
                "iVar3": "stripOption",
                "lVar4": "sectionList1",
                "lVar5": "sectionList2",
                "uVar6": "result",
                "plVar7": "updateSections"
            },
            "code": "\nundefined8 processBinary_00115b70(char **binaryPath)\n\n{\n  char *currentSection;\n  int strcmpResult;\n  int stripOption;\n  long sectionList1;\n  long sectionList2;\n  undefined8 result;\n  long *updateSections;\n  \n  sectionList1 = find_section_list(*binaryPath,0,4);\n  if (sectionList1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      sectionList1 = find_section_list(*binaryPath,0,1);\n      sectionList2 = find_section_list(*binaryPath,0,2);\n      if (sectionList1 != 0) {\n        if (sectionList2 != 0) {\n          currentSection = *binaryPath;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,currentSection);\n        }\n        if (sectionList1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *binaryPath;\n          updateSections = update_sections;\n          do {\n            stripOption = strcmp(currentSection,(char *)updateSections[1]);\n            if (stripOption == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,currentSection);\n            }\n            updateSections = (long *)*updateSections;\n          } while (updateSections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (sectionList2 == 0)) {\n        return 1;\n      }\n    }\n    stripOption = strip_symbols;\n    if ((*(byte *)((long)binaryPath + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        currentSection = *binaryPath;\n        strcmpResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((strcmpResult != 0) && (strcmpResult = strcmp(currentSection,\".gnu_debuglink\"), strcmpResult != 0)) {\n          stripOption = strcmp(currentSection,\".reloc\");\n          if (stripOption != 0) {\n            return 1;\n          }\n          result = process_operation_0010829e();\n          return result;\n        }\n      }\n      if (stripOption == 5) {\n        result = is_dwo_section_constprop_0(binaryPath);\n        return result;\n      }\n      if (stripOption == 4) {\n        return 0;\n      }\n    }\n    if (stripOption == 6) {\n      result = calculate_inverse_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "find_section_list",
                "dcgettext",
                "FUN_0010829e",
                "fatal",
                "strcmp",
                "is_strip_section_1.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "process_binary_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_program_00116b40",
                "completed_0": "programInitialized",
                "__cxa_finalize": "cleanupProgram",
                "__dso_handle": "programHandle",
                "deregister_tm_clones": "removeDuplicateTmClones"
            },
            "code": "\nvoid initializeProgram_00116b40(void)\n\n{\n  if (programInitialized != '\\0') {\n    return;\n  }\n  cleanupProgram(programHandle);\n  removeDuplicateTmClones();\n  programInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_data_00116030",
                "param_1": "input_files",
                "param_2": "file_size",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_value",
                "lVar3": "constant1",
                "lVar4": "constant2",
                "iVar5": "error_code",
                "in_RAX": "result",
                "lVar6": "reloc_upper_bound",
                "__ptr": "reloc_buffer",
                "lVar7": "num_relocs",
                "extraout_RAX": "return_value",
                "lVar8": "index",
                "uStack_28": "default_return"
            },
            "code": "\n\n\nundefined8 process_reloc_data_00116030(undefined8 *input_files,long file_size)\n\n{\n  long *reloc_entry;\n  long reloc_value;\n  long constant1;\n  long constant2;\n  int error_code;\n  undefined8 result;\n  long reloc_upper_bound;\n  void *reloc_buffer;\n  long num_relocs;\n  undefined8 return_value;\n  long index;\n  undefined8 default_return;\n  \n  if (*(long *)(file_size + 0x60) == 0) {\n    return result;\n  }\n  reloc_upper_bound = bfd_get_reloc_upper_bound();\n  if (reloc_upper_bound < 0) {\n    if ((reloc_upper_bound != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*input_files);\n                    \n      xexit(1);\n    }\n  }\n  else if (reloc_upper_bound != 0) {\n    reloc_buffer = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(input_files,file_size,reloc_buffer);\n    constant2 = _DAT_00128680;\n    constant1 = _DAT_00128568;\n    reloc_upper_bound = _fwrite;\n    if (num_relocs < 0) {\n      bfd_nonfatal(*input_files);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_value = *reloc_entry, reloc_value != 0)) && (reloc_value != reloc_upper_bound)) &&\n           ((reloc_value != constant2 && (reloc_value != constant1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        index = index + 1;\n      } while (num_relocs != index);\n    }\n    free(reloc_buffer);\n    return return_value;\n  }\n  return default_return;\n}\n\n",
            "called": [
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "xexit",
                "xmalloc",
                "free",
                "bfd_canonicalize_reloc",
                "mark_symbols_used_in_relocations.cold",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_data_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "validate_input_00113ede",
                "param_1": "input",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 validate_input_00113ede(char **input)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input == (char **)0x0) {\n    return 0;\n  }\n  string = *input;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "validate_input_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "display_info.isra.0",
                "FUN_00116852",
                "stab_set_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "copy_object.cold",
                "save_stab",
                "stab_class_baseclass.lto_priv.0",
                "free_saved_stabs",
                "stab_int_constant.lto_priv.0",
                "list_supported_targets",
                "stab_class_method_var",
                "stab_demangle_qualified",
                "list_matching_formats",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "main",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "stab_function_parameter.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_find_tagged_type",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_modify_type",
                "copy_file",
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_demangle_template",
                "stab_enum_type.lto_priv.0",
                "copy_section",
                "parse_coff_struct_type",
                "parse_stab",
                "stab_struct_field.lto_priv.0",
                "parse_stab_type",
                "FUN_00108466",
                "stab_pop_type",
                "merge_gnu_build_notes",
                "make_tempdir.cold",
                "stab_typed_constant.lto_priv.0",
                "FUN_00104ea2",
                "FUN_00107880",
                "stab_emit_pending_vars",
                "stab_variable.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "init_section_add",
                "main",
                "parse_stab",
                "parse_flags.cold",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_tags_0010c892",
                "param_1": "functionHandle",
                "param_2": "tagInfo",
                "cVar1": "isEmitPendingVars",
                "lVar2": "typePtr",
                "lVar3": "tagPtr",
                "uVar4": "result",
                "puVar5": "tagPtrPtr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 processTags_0010c892(undefined8 functionHandle,long tagInfo)\n\n{\n  char isEmitPendingVars;\n  long typePtr;\n  long tagPtr;\n  undefined8 result;\n  undefined8 *tagPtrPtr;\n  int kind;\n  \n  if (*(char *)(tagInfo + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (tagPtrPtr = *(undefined8 **)(tagInfo + 0x1a0); tagPtrPtr != (undefined8 *)0x0;\n        tagPtrPtr = (undefined8 *)*tagPtrPtr) {\n      kind = *(int *)(tagPtrPtr + 2);\n      tagPtr = tagPtrPtr[1];\n      if (kind != 0) {\n        if (tagPtr != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        tagPtrPtr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagPtr == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      typePtr = debug_make_type_constprop_0(kind,0);\n      if (typePtr == 0) goto LAB_0010c910;\n      tagPtr = debug_tag_type(functionHandle,tagPtr,typePtr);\n      tagPtrPtr[3] = tagPtr;\n      if (tagPtr == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    isEmitPendingVars = stab_emit_pending_vars();\n    if (isEmitPendingVars != '\\0') {\n      isEmitPendingVars = debug_end_function(functionHandle,*(undefined8 *)(tagInfo + 0x68));\n      if (isEmitPendingVars != '\\0') {\n        *(undefined *)(tagInfo + 0x60) = 0;\n        *(undefined8 *)(tagInfo + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "stab_emit_pending_vars",
                "debug_end_function",
                "dcgettext",
                "debug_tag_type",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_tags_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "dataItem",
                "param_2": "dataValue",
                "puVar1": "dynamicMemoryPointer"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 dataItem,undefined4 dataValue)\n\n{\n  undefined4 *dynamicMemoryPointer;\n  \n  dynamicMemoryPointer = (undefined4 *)xmalloc(0x18);\n  *dynamicMemoryPointer = dataItem;\n  dynamicMemoryPointer[1] = dataValue;\n  *(undefined (*) [16])(dynamicMemoryPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "debug_make_struct_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_reference_type.isra.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "debug_make_offset_type.isra.0",
                "debug_tag_type",
                "debug_make_enum_type.isra.0",
                "debug_make_array_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "debug_name_type",
                "debug_make_const_type.isra.0",
                "debug_make_function_type.isra.0",
                "debug_make_float_type.isra.0",
                "finish_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "stringComparisonResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int stringComparisonResult;\n  undefined8 in_RAX;\n  undefined result [16];\n  \n  stringComparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = stringComparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_at_exit_functions_0011a390",
                "plVar4": "functionList",
                "uVar5": "count",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex"
            },
            "code": "\nvoid executeAtExitFunctions_0011a390(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionList;\n  uint count;\n  \n  functionList = (long *)xatexit_head_lto_priv_0;\n  if (xatexit_head_lto_priv_0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionList[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionList[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionList[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[index])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_at_exit_functions_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "display_info.isra.0",
                "display_info.isra.0.cold",
                "do_display_target",
                "FUN_00105828"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_class_method_var",
                "stab_struct_field.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "parse_stab_type",
                "stab_function_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_function_parameter.lto_priv.0",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_float_constant.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_stab_symbol_0010e842",
                "param_1": "symbolTable",
                "param_2": "symbolName",
                "param_3": "index",
                "param_4": "param",
                "__s": "symbolWithIndex",
                "sVar1": "symbolNameLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] writeStabSymbol_0010e842(undefined8 symbolTable,char *symbolName,undefined8 index,undefined8 param)\n\n{\n  size_t symbolNameLength;\n  char *symbolWithIndex;\n  undefined result [16];\n  \n  symbolNameLength = strlen(symbolName);\n  symbolWithIndex = (char *)xmalloc(symbolNameLength + 0x14);\n  sprintf(symbolWithIndex,\"%s:c=i%ld\",symbolName,index);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbolTable,0x80,0,0,symbolWithIndex);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(symbolWithIndex);\n  }\n  result._8_8_ = param;\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_debug_type_00113cb9",
                "param_1": "inputValue",
                "lVar1": "debugTypePointer"
            },
            "code": "\nlong initializeDebugType_00113cb9(long inputValue)\n\n{\n  long debugTypePointer;\n  \n  if (inputValue != 0) {\n    debugTypePointer = debug_make_type_constprop_0(0xe,0);\n    if (debugTypePointer == 0) {\n      debugTypePointer = 0;\n    }\n    else {\n      *(long *)(debugTypePointer + 0x10) = inputValue;\n    }\n    return debugTypePointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "create_symbol_0010eafe",
                "param_1": "symbolData",
                "param_2": "prefix",
                "param_3": "suffix",
                "__s": "popType",
                "sVar2": "prefixLength",
                "sVar3": "popTypeLength",
                "__s_00": "symbolName",
                "uVar1": "result"
            },
            "code": "\nundefined4 createSymbol_0010eafe(long symbolData,char *prefix,char suffix)\n\n{\n  undefined4 result;\n  char *popType;\n  size_t prefixLength;\n  size_t popTypeLength;\n  char *symbolName;\n  \n  if ((*(int *)(symbolData + 0x1f8) == 0) && (*(long *)(symbolData + 0x1e8) == -1)) {\n    popType = (char *)stab_pop_type();\n    prefixLength = strlen(prefix);\n    popTypeLength = strlen(popType);\n    symbolName = (char *)xmalloc(prefixLength + 3 + popTypeLength);\n    sprintf(symbolName,\"%s:%c%s\",prefix,(ulong)((-(uint)(suffix == '\\0') & 0x20) + 0x46),popType);\n    *(undefined8 *)(symbolData + 0x1e8) = *(undefined8 *)(symbolData + 0x10);\n    result = stab_write_symbol_lto_priv_0(symbolData,0x24,0,0,symbolName);\n    if ((char)result != '\\0') {\n      free(symbolName);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "stab_pop_type",
                "strlen",
                "sprintf",
                "xmalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "create_symbol_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "parse_coff_struct_type",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "pointerParam",
                "debug_make_type_constprop_0": "setDebugTypeConstant"
            },
            "code": "\nvoid initializeDebugType_00113df2(undefined4 pointerParam)\n\n{\n  setDebugTypeConstant(4,pointerParam);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_demangle_v3_arg",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "copy_usage",
                "strip_usage",
                "print_version"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "create_modified_string_0010a377",
                "param_1": "input_value",
                "__s": "first_string",
                "__s_00": "second_string",
                "sVar3": "length_first_string",
                "sVar4": "length_second_string",
                "__s_01": "modified_string",
                "uVar5": "use_custom_value",
                "cVar1": "char_value"
            },
            "code": "\nundefined4 createModifiedString_0010a377(long input_value)\n\n{\n  char char_value;\n  undefined4 uVar2;\n  char *first_string;\n  char *second_string;\n  size_t length_first_string;\n  size_t length_second_string;\n  char *modified_string;\n  undefined use_custom_value;\n  \n  use_custom_value = 1;\n  char_value = *(char *)(*(long *)(input_value + 0x60) + 0x1c);\n  first_string = (char *)stab_pop_type();\n  if (char_value == '\\0') {\n    use_custom_value = *(undefined *)(*(long *)(input_value + 0x60) + 0x1c);\n  }\n  second_string = (char *)stab_pop_type(input_value);\n  length_first_string = strlen(first_string);\n  length_second_string = strlen(second_string);\n  modified_string = (char *)xmalloc(length_first_string + 3 + length_second_string);\n  sprintf(modified_string,\"@%s,%s\",second_string,first_string);\n  free(second_string);\n  free(first_string);\n  uVar2 = stab_push_string(input_value,modified_string,0,use_custom_value,0);\n  if ((char)uVar2 != '\\0') {\n    free(modified_string);\n  }\n  return uVar2;\n}\n\n",
            "called": [
                "stab_pop_type",
                "stab_push_string",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "create_modified_string_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "demangle_and_extract_args_0010d882",
                "param_1": "param_1_ptr",
                "param_2": "param_2_ptr",
                "param_3": "param_3_ptr",
                "param_4": "param_4_ptr",
                "iVar1": "iteration_count",
                "pcVar2": "current_char_ptr",
                "cVar3": "current_char",
                "lVar4": "allocation_result",
                "pcVar5": "param_2_copy",
                "uVar6": "index",
                "bVar7": "loop_condition",
                "local_50": "arg_count",
                "local_4c": "arg_result_code",
                "local_48": "type_index",
                "local_44": "type_count",
                "local_40": "type_args"
            },
            "code": "\nundefined8 demangle_and_extract_args_0010d882(long param_1_ptr,char **param_2_ptr,long *param_3_ptr,undefined *param_4_ptr)\n\n{\n  int iteration_count;\n  char *current_char_ptr;\n  char current_char;\n  long allocation_result;\n  char *param_2_copy;\n  ulong index;\n  bool loop_condition;\n  uint arg_count;\n  undefined4 arg_result_code;\n  uint type_index;\n  int type_count;\n  undefined8 type_args [2];\n  \n  current_char_ptr = *param_2_ptr;\n  arg_result_code = 10;\n  if (param_3_ptr != (long *)0x0) {\n    allocation_result = xmalloc();\n    *param_3_ptr = allocation_result;\n    *param_4_ptr = 0;\n  }\n  arg_count = 0;\n  while( true ) {\n    param_2_copy = *param_2_ptr;\n    current_char = *param_2_copy;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *param_2_ptr = param_2_copy + 1;\n      if (current_char == 'T') {\n        type_count = 1;\n      }\n      else {\n        current_char = stab_demangle_get_count(param_2_ptr,&type_count);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = stab_demangle_get_count(param_2_ptr,&type_index);\n      if ((current_char == '\\0') || (*(uint *)(param_1_ptr + 0x28) <= type_index)) {\nLAB_0010d958:\n        stab_bad_demangle(current_char_ptr);\n        return 0;\n      }\n      index = (ulong)type_index;\n      while (iteration_count = type_count + -1, loop_condition = type_count != 0, type_count = iteration_count, loop_condition) {\n        type_args[0] = *(undefined8 *)(*(long *)(param_1_ptr + 0x20) + index * 0x10);\n        current_char = stab_demangle_arg(param_1_ptr,type_args,param_3_ptr,&arg_count,&arg_result_code);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = stab_demangle_arg(param_1_ptr,param_2_ptr,param_3_ptr,&arg_count,&arg_result_code);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (param_3_ptr == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*param_3_ptr + (ulong)arg_count * 8) = 0;\n    if (*param_2_copy != 'e') goto LAB_0010d9fa;\n    *param_4_ptr = 1;\n  }\n  param_2_copy = param_2_copy + 1;\n  *param_2_ptr = param_2_copy;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)param_2_copy >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_arg",
                "xmalloc",
                "stab_bad_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_and_extract_args_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryPtr",
                "param_2": "param2Val",
                "param_3": "param3Val",
                "param_4": "param4Val",
                "puVar1": "newMemory",
                "pauVar2": "existingMemory",
                "lVar3": "loopCounter",
                "puVar4": "currentMemory",
                "bVar5": "byteVal"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryPtr) [16],undefined8 param2Val,undefined4 param3Val,undefined4 param4Val)\n\n{\n  undefined4 *newMemory;\n  undefined (*existingMemory) [16];\n  long loopCounter;\n  undefined4 *currentMemory;\n  byte byteVal;\n  \n  byteVal = 0;\n  newMemory = (undefined4 *)xmalloc(0x28);\n  currentMemory = newMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentMemory = 0;\n    currentMemory = currentMemory + (ulong)byteVal * -2 + 1;\n  }\n  existingMemory = *memoryPtr;\n  *(undefined8 *)(newMemory + 2) = param2Val;\n  newMemory[5] = param3Val;\n  newMemory[6] = param4Val;\n  if (existingMemory == (undefined (*) [16])0x0) {\n    existingMemory = (undefined (*) [16])xmalloc(0x10);\n    *existingMemory = ZEXT816(0);\n    *memoryPtr = existingMemory;\n    *(undefined (**) [16])(*existingMemory + 8) = existingMemory;\n  }\n  **(undefined8 **)(*existingMemory + 8) = newMemory;\n  *(undefined4 **)(*existingMemory + 8) = newMemory;\n  return newMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_record_function",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "debug_name_type",
                "debug_tag_type"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "recordPointer",
                "param_2": "lineNumber",
                "param_3": "lineData",
                "uVar1": "errorMessage",
                "puVar2": "currentRecord",
                "uVar3": "index",
                "puVar4": "newRecord",
                "lVar5": "loopCounter",
                "puVar6": "recordPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long recordPointer,undefined8 lineNumber,undefined8 lineData)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentRecord;\n  ulong index;\n  undefined4 *newRecord;\n  long loopCounter;\n  undefined4 *recordPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(recordPointer + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopCounter = *(long *)(recordPointer + 0x28);\n    if ((loopCounter != 0) && (*(long *)(loopCounter + 8) == *(long *)(recordPointer + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopCounter + 0x10 + index * 8) == -1) {\n          currentRecord = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopCounter + 0x10 + (long)currentRecord * 8) = lineNumber;\n          *(undefined8 *)(loopCounter + 0x60 + (long)currentRecord * 8) = lineData;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newRecord = (undefined4 *)xmalloc(0xb0);\n    recordPtr = newRecord;\n    for (loopCounter = 0x2c; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *recordPtr = 0;\n      recordPtr = recordPtr + (ulong)flag * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(recordPointer + 0x10);\n    *(undefined8 *)(newRecord + 4) = lineNumber;\n    *(undefined8 *)(newRecord + 2) = errorMessage;\n    *(undefined8 *)(newRecord + 0x18) = lineData;\n    recordPtr = newRecord + 6;\n    for (loopCounter = 0x48; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined *)recordPtr = 0xff;\n      recordPtr = (undefined4 *)((long)recordPtr + (ulong)flag * -2 + 1);\n    }\n    currentRecord = *(undefined8 **)(recordPointer + 0x28);\n    if (currentRecord == (undefined8 *)0x0) {\n      currentRecord = *(undefined8 **)(recordPointer + 8);\n      currentRecord[2] = newRecord;\n    }\n    else {\n      *currentRecord = newRecord;\n    }\n    *(undefined4 **)(recordPointer + 0x28) = newRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentRecord >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "patternString",
                "iVar1": "result"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **input)\n\n{\n  char *patternString;\n  int result;\n  \n  patternString = *pattern;\n  if (*patternString == '!') {\n    result = fnmatch(patternString + 1,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 0;\n      return result;\n    }\n  }\n  else {\n    result = fnmatch(patternString,*input,0);\n    if (result == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "is_specified_symbol",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "add_parameter_to_debug_record_0010bd62",
                "param_1": "debugRecord",
                "param_2": "paramValue",
                "param_3": "paramSize",
                "param_4": "paramType",
                "param_5": "paramData",
                "puVar1": "currentNode",
                "uVar2": "errorMessage",
                "puVar3": "newDebugRecord",
                "puVar4": "nextNode",
                "puVar6": "currentNodePtr",
                "puVar7": "iterator",
                "bVar8": "byteVar",
                "lVar5": "loopCounter"
            },
            "code": "\n\n\nundefined8\naddParameterToDebugRecord_0010bd62(long debugRecord,long paramValue,long paramSize,undefined4 paramType,undefined8 paramData)\n\n{\n  undefined8 *currentNode;\n  undefined8 errorMessage;\n  undefined4 *newDebugRecord;\n  undefined8 *nextNode;\n  long loopCounter;\n  undefined8 *currentNodePtr;\n  undefined4 *iterator;\n  byte byteVar;\n  \n  byteVar = 0;\n  if (paramValue == 0) {\n    return 0;\n  }\n  if (paramSize != 0) {\n    if ((*(long *)(debugRecord + 8) != 0) && (*(long *)(debugRecord + 0x18) != 0)) {\n      newDebugRecord = (undefined4 *)xmalloc(0x28);\n      iterator = newDebugRecord;\n      for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *iterator = 0;\n        iterator = iterator + (ulong)byteVar * -2 + 1;\n      }\n      loopCounter = *(long *)(debugRecord + 0x18);\n      *(long *)(newDebugRecord + 2) = paramValue;\n      *(long *)(newDebugRecord + 4) = paramSize;\n      newDebugRecord[6] = paramType;\n      currentNode = *(undefined8 **)(loopCounter + 8);\n      *(undefined8 *)(newDebugRecord + 8) = paramData;\n      currentNodePtr = (undefined8 *)(loopCounter + 8);\n      while (nextNode = currentNode, nextNode != (undefined8 *)0x0) {\n        currentNodePtr = nextNode;\n        currentNode = (undefined8 *)*nextNode;\n      }\n      *currentNodePtr = newDebugRecord;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_parameter_to_debug_record_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_00104ea2",
                "unaff_R12": "sourceFilePath",
                "param_11": "destinationFilePath",
                "unaff_retaddr": "returnAddress",
                "param_7": "sourceFilePtr",
                "param_8": "destinationFilePtr",
                "param_9": "tempDirPath",
                "param_10": "archiveFilePtr",
                "param_18": "permissions",
                "param_19": "fileSize"
            },
            "code": "\nvoid copyArchive_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **ppcVar6;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int unaff_EBX;\n  stat *unaff_RBP;\n  char *pcVar15;\n  stat *psVar16;\n  char *sourceFilePath;\n  undefined8 *unaff_R13;\n  char **unaff_R15;\n  byte bVar17;\n  undefined8 returnAddress;\n  undefined8 *sourceFilePtr;\n  long *destinationFilePtr;\n  char *tempDirPath;\n  undefined8 *archiveFilePtr;\n  undefined8 destinationFilePath;\n  undefined8 in_stack_00000030;\n  uint permissions;\n  long fileSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  ppcVar6 = (char **)bfd_openw(sourceFilePath,destinationFilePath);\n  if (ppcVar6 == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(sourceFilePath,0,0,0);\nLAB_00104e93:\n    status = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = copy_object(unaff_R15,ppcVar6,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(unaff_R15);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(sourceFilePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(ppcVar6);\n    ppcVar6 = unaff_R15;\n    if (cVar1 == '\\0') {\n      bfd_nonfatal_message(sourceFilePath,0,0,0);\n      status = 1;\n    }\nLAB_00114a86:\n    if ((preserve_dates != '\\0') && (unaff_EBX == 0)) {\n      set_times(sourceFilePath,unaff_RBP);\n    }\n    lVar12 = bfd_openr(sourceFilePath,destinationFilePath);\n    unaff_R13[2] = lVar12;\n    *destinationFilePtr = lVar12;\n    destinationFilePtr = (long *)(lVar12 + 0xf0);\n    unaff_R15 = (char **)bfd_openr_next_archived_file(archiveFilePtr,ppcVar6);\n    bfd_close(ppcVar6);\n    while ((status == 0 && (unaff_R15 != (char **)0x0))) {\n      pcVar10 = *unaff_R15;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          copy_archive_001052a2();\n          return;\n        }\n      }\n      unaff_RBP = (stat *)&stack0x00000050;\n      sourceFilePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      iVar2 = stat(sourceFilePath,unaff_RBP);\n      puVar8 = unaff_R13;\n      if (-1 < iVar2) {\n        lVar12 = make_tempdir(sourceFilePath);\n        free(sourceFilePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *unaff_R15;\n        *puVar8 = unaff_R13;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        sourceFilePath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      unaff_EBX = 0;\n      if (preserve_dates != '\\0') {\n        psVar16 = unaff_RBP;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        ppcVar6 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          ppcVar6 = unaff_R15;\n        }\n        unaff_EBX = (**(code **)(ppcVar6[1] + 0x1e8))(unaff_R15,unaff_RBP);\n        if (unaff_EBX != 0) {\n          pcVar10 = *unaff_R15;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(uVar11,pcVar10);\n        }\n      }\n      unaff_R13 = (undefined8 *)xmalloc(0x18);\n      unaff_R13[1] = sourceFilePath;\n      *unaff_R13 = puVar8;\n      unaff_R13[2] = 0;\n      cVar1 = bfd_check_format(unaff_R15,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        ppcVar6 = (char **)bfd_openw(sourceFilePath,*(undefined8 *)unaff_R15[1]);\n        if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,unaff_R15,0,uVar11);\n      ppcVar6 = (char **)bfd_openw(sourceFilePath,destinationFilePath);\n      if (ppcVar6 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)unaff_R15[0x1d];\n      if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n        ppcVar3 = unaff_R15;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(unaff_R15);\n      lVar12 = fileSize;\n      if (iVar2 == 0) {\n        if (fileSize < 0) {\n          bfd_get_archive_filename(unaff_R15);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(unaff_R15,0,0);\n          if (iVar2 == 0) {\n            if (verbose != '\\0') {\n              pcVar10 = *ppcVar6;\n              uVar11 = bfd_get_archive_filename(unaff_R15);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*ppcVar6,permissions | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(ppcVar6);\n                ppcVar6 = unaff_R15;\n                if (cVar1 == '\\0') {\n                  bfd_nonfatal_message(sourceFilePath,0,0,0);\n                  status = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,unaff_R15);\n              ppcVar3 = unaff_R15;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,ppcVar6), ppcVar3 = ppcVar6, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            bfd_nonfatal_message(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = bfd_get_archive_filename(unaff_R15);\n            bfd_nonfatal(uVar11);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,unaff_R15,0,0);\n      }\n      cVar1 = bfd_close_all_done(ppcVar6);\n      if (cVar1 == '\\0') {\n        bfd_nonfatal_message(sourceFilePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(sourceFilePath);\n      status = 1;\n    }\n    *destinationFilePtr = 0;\n    pvVar4 = (void *)xstrdup(*sourceFilePtr);\n    if (status == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(sourceFilePtr);\n    if (cVar1 == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*archiveFilePtr);\n    cVar1 = bfd_close(archiveFilePtr);\n    if (cVar1 == '\\0') {\n      status = 1;\n      bfd_nonfatal_message(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (unaff_R13 != (undefined8 *)0x0) {\n    if (unaff_R13[2] == 0) {\n      rmdir((char *)unaff_R13[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)unaff_R13[1]);\n    }\n    free((void *)unaff_R13[1]);\n    puVar8 = (undefined8 *)*unaff_R13;\n    free(unaff_R13);\n    unaff_R13 = puVar8;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "xstrdup",
                "bfd_close_all_done",
                "bfd_get_arch",
                "bfd_bwrite",
                "bfd_openw",
                "non_fatal",
                "bfd_close",
                "FUN_001052a2",
                "copy_object",
                "set_times",
                "bfd_bread",
                "unlink",
                "free",
                "bfd_openr",
                "bfd_close",
                "strerror",
                "chmod",
                "rmdir",
                "make_tempdir",
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "bfd_nonfatal_message",
                "bfd_seek",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "concat",
                "bfd_get_archive_filename",
                "FUN_00114b84",
                "stat",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_00113ce0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "lVar1": "type_const",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_4,undefined8 input_5)\n\n{\n  long type_const;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_1 != 0) {\n    type_const = debug_make_type_constprop_0(0xd,0);\n    if (type_const != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_2;\n      *(undefined *)(allocated_memory + 2) = input_3;\n      *(long **)(type_const + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  type_const = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_5;\n  return_value._0_8_ = type_const;\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_demangle_v3_arg",
                "stab_demangle_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_expand_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "basePointer",
                "unaff_R12": "currentOffset",
                "unaff_R14": "endOffset",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "context",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndExpandData_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 context;\n  size_t bytesRead;\n  FILE *file;\n  long basePointer;\n  long currentOffset;\n  long endOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(basePointer + 0x20) + currentOffset),1,endOffset - currentOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      context = *(undefined8 *)(basePointer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,context);\n    }\n    currentOffset = currentOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (currentOffset == endOffset) {\n      endOffset = currentOffset * 2;\n      context = xrealloc(*(undefined8 *)(basePointer + 0x20),endOffset);\n      *(undefined8 *)(basePointer + 0x20) = context;\n    }\n  }\n  *(long *)(basePointer + 0x18) = currentOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00114dc7",
                "ferror",
                "fread",
                "feof",
                "dcgettext",
                "fclose",
                "fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_expand_data_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "reformat_and_print_header_00119f70",
                "param_1": "header_data",
                "param_2": "output_data",
                "uVar1": "header_size",
                "cVar2": "check_result",
                "iVar3": "counter",
                "uVar4": "endian_header",
                "uVar5": "endian_data",
                "__format": "format_string",
                "lVar6": "allocation_size",
                "uVar7": "printable_arch",
                "lVar8": "reallocated_data"
            },
            "code": "\nundefined4 reformat_and_print_header_00119f70(undefined8 *header_data,undefined8 *output_data)\n\n{\n  undefined4 header_size;\n  char check_result;\n  int counter;\n  undefined8 endian_header;\n  undefined8 endian_data;\n  char *format_string;\n  long allocation_size;\n  undefined8 printable_arch;\n  long reallocated_data;\n  \n  counter = *(int *)((long)output_data + 0xc) + 1;\n  *(int *)((long)output_data + 0xc) = counter;\n  if ((ulong)output_data[2] < (ulong)((long)counter * 0x60)) {\n    allocation_size = 0x3000;\n    if (0x3f < counter) {\n      allocation_size = (long)counter * 0xc0;\n    }\n    reallocated_data = xrealloc(output_data[3]);\n    output_data[3] = reallocated_data;\n    memset((void *)(reallocated_data + output_data[2]),0,allocation_size - output_data[2]);\n    output_data[2] = allocation_size;\n  }\n  header_size = *(undefined4 *)((long)header_data + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output_data + 0xc) * 0x60 + output_data[3] + -0x60) = *header_data;\n  endian_header = endian_string(header_size);\n  endian_data = endian_string(*(undefined4 *)(header_data + 2));\n  printable_arch = *header_data;\n  format_string = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(format_string,printable_arch,endian_data,endian_header);\n  allocation_size = bfd_openw(*output_data,*header_data);\n  if (allocation_size == 0) {\n    bfd_nonfatal(*output_data);\n    *(undefined4 *)(output_data + 1) = 1;\n  }\n  else {\n    counter = 2;\n    check_result = bfd_set_format(allocation_size,1);\n    if (check_result == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        bfd_nonfatal(*header_data);\n        *(undefined4 *)(output_data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        check_result = (**(code **)(*(long *)(allocation_size + 8) + 0x2a0))(allocation_size,counter,0);\n        if (check_result != '\\0') {\n          printable_arch = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",printable_arch);\n          *(undefined *)\n           ((long)*(int *)((long)output_data + 0xc) * 0x60 + output_data[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(allocation_size);\n  }\n  return *(undefined4 *)(output_data + 1);\n}\n\n",
            "called": [
                "bfd_printable_arch_mach",
                "endian_string",
                "bfd_close_all_done",
                "bfd_get_error",
                "dcgettext",
                "bfd_set_format",
                "do_display_target.cold",
                "bfd_openw",
                "memset",
                "printf",
                "xrealloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "reformat_and_print_header_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "fileDescriptorRead",
                "param_2": "filePath",
                "param_3": "fileStats",
                "iVar1": "originalErrno",
                "__fd": "fileDescriptorWrite",
                "iVar2": "readResult",
                "_Var3": "currentOffset",
                "uVar4": "bytesCopied",
                "sVar5": "writeResult",
                "piVar6": "errnoLocation",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int fileDescriptorRead,char *filePath,long fileStats)\n\n{\n  int originalErrno;\n  int fileDescriptorWrite;\n  int readResult;\n  __off_t currentOffset;\n  ulong bytesCopied;\n  size_t writeResult;\n  int *errnoLocation;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptorRead) && (currentOffset = lseek(fileDescriptorRead,0,0), currentOffset == 0)) {\n    fileDescriptorWrite = open(filePath,0x201);\n    if (fileDescriptorWrite < 0) {\n      bytesCopied = simple_copy_cold();\n      return bytesCopied;\n    }\n    do {\n      bytesCopied = read(fileDescriptorRead,buffer,0x2000);\n      readResult = (int)bytesCopied;\n      if (readResult < 1) {\n        errnoLocation = __errno_location();\n        originalErrno = *errnoLocation;\n        fchmod(fileDescriptorWrite,*(__mode_t *)(fileStats + 0x18));\n        close(fileDescriptorRead);\n        close(fileDescriptorWrite);\n        if (readResult != 0) {\n          *errnoLocation = originalErrno;\n          return 0xffffffff;\n        }\n        return bytesCopied & 0xffffffff;\n      }\n      writeResult = write(fileDescriptorWrite,buffer,(long)readResult);\n    } while (writeResult == (long)readResult);\n    errnoLocation = __errno_location();\n    readResult = *errnoLocation;\n    close(fileDescriptorRead);\n    close(fileDescriptorWrite);\n    *errnoLocation = readResult;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close",
                "simple_copy.cold",
                "read",
                "write",
                "fchmod",
                "lseek",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_set_times_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "timeFlag",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoPointer",
                "uVar2": "errorString",
                "auVar3": "result",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedErrorString",
                "non_fatal": "handleNonFatalError",
                "unlink": "deleteFile",
                "set_times": "updateFileTimes"
            },
            "code": "\nundefined  [16] copyFileAndSetTimes_00108200(void)\n\n{\n  int *errnoPointer;\n  undefined8 errorString;\n  char *filePath;\n  char shouldSetTimes;\n  ulong timeFlag;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoPointer = getErrnoLocation();\n  getErrorString(*errnoPointer);\n  errorString = getLocalizedErrorString(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  handleNonFatalError(errorString);\n  deleteFile(filePath);\n  if (shouldSetTimes != '\\0') {\n    updateFileTimes();\n  }\n  result._0_8_ = timeFlag & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "__errno_location",
                "non_fatal",
                "set_times",
                "dcgettext",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_and_set_times_00108200"
        }
    },
    "used_tokens": 265862,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}