{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_0010293a",
                "FUN_00103240",
                "FUN_001038b0",
                "FUN_0010259a",
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00103aa0",
                "FUN_001038b0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00103910": {
            "renaming": {
                "FUN_00103910": "initialize_params_00103910",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "param_7": "inputParam7",
                "param_8": "inputParam8",
                "param_9": "paramPointer1",
                "param_10": "paramPointer2",
                "param_11": "paramPointer3",
                "param_12": "paramPointer4",
                "param_13": "paramPointer5",
                "param_14": "paramPointer6",
                "in_AL": "inputFlag",
                "local_d8": "size",
                "local_d4": "localVar1",
                "local_d0": "localPointer1",
                "local_c8": "localPointer2",
                "local_b8": "localArray",
                "local_b0": "localParam1",
                "local_a8": "localParam2",
                "local_a0": "localParam3",
                "local_98": "localParam4",
                "local_90": "localParam5",
                "local_88": "localVar2",
                "local_78": "localVar3",
                "local_68": "localVar4",
                "local_58": "localVar5",
                "local_48": "localVar6",
                "local_38": "localVar7",
                "local_28": "localVar8",
                "local_18": "localVar9"
            },
            "code": "\nvoid initializeParams_00103910(undefined4 inputParam1,undefined4 inputParam2,undefined4 inputParam3,undefined4 inputParam4,\n                 undefined4 inputParam5,undefined4 inputParam6,undefined4 inputParam7,undefined4 inputParam8,\n                 undefined8 paramPointer1,undefined8 paramPointer2,undefined8 paramPointer3,undefined8 paramPointer4,\n                 undefined8 paramPointer5,undefined8 paramPointer6)\n\n{\n  char inputFlag;\n  undefined4 size;\n  undefined4 localVar1;\n  undefined *localPointer1;\n  undefined *localPointer2;\n  undefined localArray [8];\n  undefined8 localParam1;\n  undefined8 localParam2;\n  undefined8 localParam3;\n  undefined8 localParam4;\n  undefined8 localParam5;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  undefined4 localVar9;\n  \n  if (inputFlag != '\\0') {\n    localVar2 = inputParam1;\n    localVar3 = inputParam2;\n    localVar4 = inputParam3;\n    localVar5 = inputParam4;\n    localVar6 = inputParam5;\n    localVar7 = inputParam6;\n    localVar8 = inputParam7;\n    localVar9 = inputParam8;\n  }\n  localPointer1 = &stack0x00000008;\n  size = 8;\n  localPointer2 = localArray;\n  localVar1 = 0x30;\n  localParam1 = paramPointer2;\n  localParam2 = paramPointer3;\n  localParam3 = paramPointer4;\n  localParam4 = paramPointer5;\n  localParam5 = paramPointer6;\n  FUN_001038b0(paramPointer1,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001038b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103910",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "initialize_params_00103910"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_001039e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a50",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00103510": {
            "renaming": {
                "FUN_00103510": "print_formatted_text_00103510",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "currentIndex",
                "unaff_R14": "buffer",
                "unaff_R15": "flag",
                "bVar5": "isInvalid",
                "in_stack_00000010": "prompt",
                "in_stack_00000038": "inputValue"
            },
            "code": "\n\n\nvoid printFormattedText_00103510(void)\n\n{\n  ulong temp1;\n  uint temp2;\n  ulong temp3;\n  ulong currentIndex;\n  char *buffer;\n  undefined8 flag;\n  bool isInvalid;\n  undefined8 prompt;\n  undefined8 inputValue;\n  \ncode_r0x00103510:\n  currentIndex = 2;\njoined_r0x0010341b:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",prompt);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[currentIndex] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    else {\n      FUN_0010286f(flag);\n      buffer[currentIndex] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    while (currentIndex = FUN_00103520(), currentIndex != 0xffffffffffffffff) {\n      if (0xff < currentIndex) {\nLAB_0010348e:\n        FUN_00103810();\n        break;\n      }\n      if (currentIndex == 9) {\nLAB_00102438:\n        putc((int)currentIndex,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)currentIndex < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)currentIndex,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (currentIndex = (ulong)DAT_00108374, flag = inputValue, DAT_00108374 != 0) {\n      currentIndex = FUN_00103520();\n      temp2 = DAT_00108374;\n      if (currentIndex == 0xffffffffffffffff) goto LAB_001034be;\n      if (currentIndex < 0x100) {\n        if (currentIndex == 9) {\nLAB_001023f5:\n          *buffer = (char)currentIndex;\n          if (temp2 < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)currentIndex < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *buffer = (char)currentIndex;\n          if (temp2 < 2) {\n            currentIndex = 1;\n            break;\n          }\n        }\n        currentIndex = FUN_00103520();\n        temp2 = DAT_00108374;\n        if (currentIndex == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < currentIndex) goto code_r0x001034d5;\n        if (currentIndex == 9) {\nLAB_001023bb:\n          buffer[1] = (char)currentIndex;\n          if (temp2 < 3) {\n            printFormattedText_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)currentIndex < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          buffer[1] = (char)currentIndex;\n          if (temp2 < 3) goto code_r0x00103510;\n        }\n        currentIndex = FUN_00103520();\n        temp2 = DAT_00108374;\n        if (currentIndex == 0xffffffffffffffff) {\nLAB_001034be:\n          free(buffer);\n          return;\n        }\n        if (0xff < currentIndex) goto code_r0x001034d5;\n        if (currentIndex == 9) {\nLAB_00102381:\n          buffer[2] = (char)currentIndex;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)currentIndex < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + currentIndex * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          buffer[2] = (char)currentIndex;\n        }\n        if (3 < temp2) {\n          temp3 = 3;\n          do {\n            temp1 = FUN_00103520();\n            if (temp1 == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < temp1) goto code_r0x001034d5;\n            if (((temp1 != 9) && ((*(ushort *)(&_sch_istable + temp1 * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)temp1 < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + temp1 * 2) & 0x40) == 0) {\n                FUN_001034d5();\n                return;\n              }\n            }\n            temp2 = (int)temp3 + 1;\n            currentIndex = (ulong)temp2;\n            isInvalid = DAT_00108374 <= temp2;\n            buffer[temp3] = (char)temp1;\n            temp3 = currentIndex;\n            if (isInvalid) goto joined_r0x0010341b;\n          } while( true );\n        }\n        currentIndex = 3;\n        break;\n      }\ncode_r0x001034d5:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103510",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_text_00103510"
        },
        "FUN_00102b11": {
            "renaming": {
                "FUN_00102b11": "reverse_code_00102b11",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "uVar1": "var1",
                "uVar2": "var2",
                "uVar3": "var3",
                "iVar4": "var4",
                "uVar5": "var5",
                "uVar6": "var6",
                "uVar7": "var7",
                "uVar8": "var8",
                "uVar9": "var9",
                "uVar10": "var10",
                "local_80": "local1",
                "local_4c": "local2",
                "local_40": "local3",
                "local_3c": "local4",
                "local_3b": "local5",
                "local_3a": "local6",
                "local_39": "local7"
            },
            "code": "\n\n\nvoid reverseCode_00102b11(undefined8 arg1,long arg2,undefined8 arg3,long arg4,uint arg5,\n                 long arg6)\n\n{\n  undefined var1;\n  uint var2;\n  uint var3;\n  int var4;\n  uint var5;\n  ulong var6;\n  undefined var7;\n  undefined var8;\n  uint var9;\n  undefined var10;\n  ulong local1;\n  uint local2 [3];\n  uint local3;\n  byte local4;\n  byte local5;\n  byte local6;\n  byte local7;\n  \n  var9 = 0;\n  local3 = 0;\n  local1 = 0;\n  var6 = 0;\n  local2[0] = arg5;\n  var2 = 0;\n  while (var5 = (uint)var6, var9 < DAT_00108374) {\n    var2 = FUN_0010290e(arg3,arg4,local2,&local3);\n    if (var2 == 0xffffffff) break;\n    if (var2 < 0x100) {\n      var10 = (undefined)var2;\n      if (var2 == 9) {\n        if (var9 == 0) {\n          local1 = (ulong)(local3 - 1);\n        }\nLAB_00102c09:\n        var9 = var9 + 1;\n        *(undefined *)(arg6 + var6) = var10;\n        var6 = (ulong)(var5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)var2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)var2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)var2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (var9 == 0) {\n            local1 = (ulong)(local3 - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (var9 == 0) {\n            local1 = (ulong)(local3 - 1);\n          }\n          if ((int)var2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)var2 < 0xc0) goto LAB_00102b96;\n        var3 = FUN_0010290e(arg3,arg4,local2,&local3);\n        if (var3 == 0xffffffff) {\nLAB_00102dee:\n          var2 = 0xffffffff;\n          break;\n        }\n        var7 = (undefined)var3;\n        if ((var3 & 0xc0) == 0x80) {\n          if ((var2 & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            var9 = var9 + 1;\n            *(undefined *)(arg6 + var6) = var10;\n            *(undefined *)(arg6 + (ulong)(var5 + 1)) = var7;\n            var6 = (ulong)(var5 + 2);\n            var2 = var3;\n          }\n          else {\n            var3 = FUN_0010290e(arg3,arg4,local2,&local3);\n            if (var3 == 0xffffffff) goto LAB_00102dee;\n            var8 = (undefined)var3;\n            if ((var3 & 0xc0) == 0x80) {\n              if ((var2 & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                var9 = var9 + 1;\n                *(undefined *)(arg6 + var6) = var10;\n                var6 = (ulong)(var5 + 3);\n                *(undefined *)(arg6 + (ulong)(var5 + 1)) = var7;\n                *(undefined *)(arg6 + (ulong)(var5 + 2)) = var8;\n                var2 = var3;\n              }\n              else {\n                var2 = FUN_0010290e(arg3,arg4,local2,&local3);\n                if (var2 == 0xffffffff) goto LAB_00102dee;\n                var1 = (undefined)var2;\n                if ((var2 & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(arg4 + (ulong)local2[0]) = var1;\n                    *(undefined *)(arg4 + (ulong)(local2[0] + 1)) = var7;\n                    *(undefined *)(arg4 + (ulong)(local2[0] + 2)) = var8;\n                    goto LAB_00102db9;\n                  }\n                  var9 = var9 + 1;\n                  *(undefined *)(arg6 + var6) = var10;\n                  *(undefined *)(arg6 + (ulong)(var5 + 1)) = var7;\n                  var6 = (ulong)(var5 + 4);\n                  *(undefined *)(arg6 + (ulong)(var5 + 2)) = var8;\n                  *(undefined *)(arg6 + (ulong)(var5 + 3)) = var1;\n                }\n                else {\n                  *(undefined *)(arg4 + (ulong)local2[0]) = var1;\n                  *(undefined *)(arg4 + (ulong)(local2[0] + 1)) = var8;\n                  *(undefined *)(arg4 + (ulong)(local2[0] + 2)) = var7;\nLAB_00102db9:\n                  local2[0] = local2[0] + 3;\n                  var6 = 0;\n                  var9 = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              var6 = 0;\n              var9 = 0;\n              *(undefined *)(arg4 + (ulong)local2[0]) = var8;\n              *(undefined *)(arg4 + (ulong)(local2[0] + 1)) = var7;\n              local2[0] = local2[0] + 2;\n              var2 = var3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          var9 = 0;\n          *(undefined *)(arg4 + (ulong)local2[0]) = var7;\n          var6 = 0;\n          local2[0] = local2[0] + 1;\n          var2 = var3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      var9 = 0;\n      var6 = 0;\n    }\n  }\n  if (var9 < DAT_00108374) {\n    if (var2 != 0xffffffff) {\nLAB_0010308d:\n      reverseCode_00102b11(arg1,(ulong)local3 + arg2,arg3,arg4,local2[0],arg6);\n    }\n  }\n  else {\n    var2 = 0;\n    FUN_00103890(arg1,local1 + arg2);\n    while (var2 < var5) {\n      var6 = (ulong)var2;\n      if (*(byte *)(var6 + arg6) < 0x7f) {\n        var2 = var2 + 1;\n        putc((uint)*(byte *)(var6 + arg6),_stdout);\n      }\n      else {\n        var4 = FUN_0010293a();\n        var2 = var2 + var4;\n      }\n    }\n    while( true ) {\n      var2 = FUN_0010290e(arg3,arg4,local2,&local3);\n      if (var2 == 0xffffffff) break;\n      if (0xff < var2) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (var2 == 9) {\nLAB_00102ed4:\n        putc(var2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)var2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)var2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)var2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)var2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)var2 < 0xc0) goto LAB_00103049;\n        local4 = (byte)var2;\n        var4 = FUN_0010290e(arg3,arg4,local2,&local3);\n        if (var4 == -1) break;\n        local5 = (byte)var4;\n        if ((local5 & 0xc0) != 0x80) {\nLAB_00102f32:\n          var6 = (ulong)local2[0];\n          local2[0] = local2[0] + 1;\n          *(byte *)(arg4 + var6) = local5;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((local4 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        var4 = FUN_0010290e(arg3,arg4,local2,&local3);\n        if (var4 == -1) break;\n        local6 = (byte)var4;\n        if ((local6 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(arg4 + (ulong)local2[0]) = local6;\n          var2 = local2[0] + 1;\n          local2[0] = local2[0] + 2;\nLAB_00102ff2:\n          *(byte *)(arg4 + (ulong)var2) = local5;\n          goto joined_r0x00102f51;\n        }\n        if ((local4 & 0x10) != 0) {\n          var4 = FUN_0010290e(arg3,arg4,local2,&local3);\n          if (var4 != -1) {\n            local7 = (byte)var4;\n            if (((local7 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(arg4 + (ulong)local2[0]) = local7;\n            *(byte *)(arg4 + (ulong)(local2[0] + 1)) = local6;\n            var2 = local2[0] + 2;\n            local2[0] = local2[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        FUN_0010293a(&local4);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "putc",
                "FUN_0010293a",
                "fputs",
                "FUN_00103890",
                "FUN_00102b11",
                "FUN_0010290e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102b11",
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "reverse_code_00102b11"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_0010293a"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "called": [
                "FUN_00103a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_0010293a": {
            "renaming": {
                "FUN_0010293a": "decode_and_display_unicode_0010293a",
                "param_1": "input_data",
                "uVar2": "second_byte",
                "iVar3": "is_tty",
                "uVar4": "output_offset",
                "uVar5": "first_byte",
                "pbVar6": "output_data"
            },
            "code": "\n\n\nuint decode_and_display_unicode_0010293a(byte *input_data)\n\n{\n  byte bVar1;\n  uint second_byte;\n  int is_tty;\n  uint output_offset;\n  uint first_byte;\n  byte *output_data;\n  \n  output_offset = 2;\n  bVar1 = *input_data & 0x30;\n  if ((bVar1 != 0x10) && (output_offset = 3, bVar1 != 0x20)) {\n    output_offset = (-(uint)(bVar1 == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    output_data = input_data + output_offset;\n    putc(0x3c,_stdout);\n    printf(\"0x\");\n    do {\n      bVar1 = *input_data;\n      input_data = input_data + 1;\n      printf(\"%02x\",(ulong)bVar1);\n    } while (output_data != input_data);\n    putc(0x3e,_stdout);\n    return output_offset;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",input_data);\n      return output_offset;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      second_byte = (uint)input_data[1];\n      first_byte = (uint)*input_data;\n      if (output_offset == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((first_byte & 0xf) << 4 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | input_data[2] & 0x3f));\n      }\n      else if (output_offset == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((first_byte & 7) << 6 | (int)second_byte >> 2 & 0xfU),\n               (ulong)((second_byte & 3) << 6 | (int)(uint)input_data[2] >> 2 & 0xfU),\n               (ulong)((input_data[2] & 3) << 6 | input_data[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*input_data >> 2 & 7),\n               (ulong)((first_byte & 3) << 6 | input_data[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return output_offset;\n      }\n      is_tty = isatty(1);\n      if (is_tty == 0) {\n        return output_offset;\n      }\n      printf(\"\\x1b[0m\");\n      return output_offset;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    is_tty = isatty(1);\n    if (is_tty != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,_stderr);\n  return output_offset;\n}\n\n",
            "called": [
                "putc",
                "isatty",
                "printf",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010293a",
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "decode_and_display_unicode_0010293a"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001038b0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103520": {
            "renaming": {
                "FUN_00103520": "read_bytes_00103520",
                "param_1": "file",
                "param_2": "totalRead",
                "param_3": "remaining",
                "param_4": "buffer",
                "bVar1": "byteValue",
                "pbVar2": "ptr",
                "uVar3": "result",
                "uVar4": "byteResult",
                "uVar5": "value",
                "iVar6": "iteration",
                "iVar7": "numBytes"
            },
            "code": "\nulong readBytes_00103520(_IO_FILE *file,long *totalRead,int *remaining,byte **buffer)\n\n{\n  byte byteValue;\n  byte *ptr;\n  uint result;\n  ulong byteResult;\n  ulong value;\n  int iteration;\n  int numBytes;\n  \n  numBytes = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    value = 0;\n    if (DAT_00108360 == 'L') {\n      value = FUN_00102771();\n      return value;\n    }\n    goto LAB_0010361f;\n  }\n  if (file == (_IO_FILE *)0x0) {\n    value = 0;\n    iteration = 0;\n    do {\n      if (*remaining == 0) {\n        return 0xffffffffffffffff;\n      }\n      iteration = iteration + 1;\n      *remaining = *remaining + -1;\n      ptr = *buffer;\n      *buffer = ptr + 1;\n      byteValue = *ptr;\n      *totalRead = *totalRead + 1;\n      value = value << 8 | (ulong)byteValue;\n    } while (iteration != numBytes);\n  }\n  else if (*remaining == 0) {\n    ptr = (byte *)file->_IO_read_ptr;\n    if (file->_IO_read_end <= ptr) {\n      result = __uflow(file);\n      value = (ulong)(result & 0xff);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file->_IO_read_ptr = (char *)(ptr + 1);\n    value = (ulong)*ptr;\n    *totalRead = *totalRead + 1;\n    iteration = 0;\n    if (numBytes == 1) goto LAB_00103610;\nLAB_00103574:\n    ptr = (byte *)file->_IO_read_ptr;\n    if (ptr < file->_IO_read_end) {\n      file->_IO_read_ptr = (char *)(ptr + 1);\n      byteValue = *ptr;\n      *totalRead = *totalRead + 1;\n      value = value << 8 | (ulong)byteValue;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      ptr = (byte *)file->_IO_read_ptr;\n      if (ptr < file->_IO_read_end) {\n        file->_IO_read_ptr = (char *)(ptr + 1);\n        byteValue = *ptr;\n        *totalRead = *totalRead + 1;\n        value = value << 8 | (ulong)byteValue;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        result = __uflow(file);\n        if (result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        byteResult = (ulong)(result & 0xff);\nLAB_00103717:\n        *totalRead = *totalRead + 1;\n        value = value << 8 | byteResult;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        iteration = *remaining;\n      }\n      numBytes = 3;\n      while( true ) {\n        if (iteration == 0) {\n          while (ptr = (byte *)file->_IO_read_ptr, ptr < file->_IO_read_end) {\n            numBytes = numBytes + 1;\n            file->_IO_read_ptr = (char *)(ptr + 1);\n            byteValue = *ptr;\n            *totalRead = *totalRead + 1;\n            value = value << 8 | (ulong)byteValue;\n            if (DAT_0010834c <= numBytes) goto LAB_00103610;\n          }\n          result = __uflow(file);\n          if (result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          byteResult = (ulong)(result & 0xff);\n        }\n        else {\n          ptr = *buffer;\n          *remaining = iteration + -1;\n          *buffer = ptr + 1;\n          byteResult = (ulong)*ptr;\n        }\n        *totalRead = *totalRead + 1;\n        numBytes = numBytes + 1;\n        value = value << 8 | byteResult;\n        if (DAT_0010834c <= numBytes) break;\n        iteration = *remaining;\n      }\n    }\n    else {\n      result = __uflow(file);\n      if (result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      byteResult = (ulong)(result & 0xff);\nLAB_001036dd:\n      *totalRead = *totalRead + 1;\n      value = value << 8 | byteResult;\n      if (2 < DAT_0010834c) {\n        iteration = *remaining;\n        if (iteration == 0) goto LAB_001035a1;\n        ptr = *buffer;\n        *remaining = iteration + -1;\n        *buffer = ptr + 1;\n        byteResult = (ulong)*ptr;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    ptr = *buffer;\n    *remaining = *remaining + -1;\n    *buffer = ptr + 1;\n    value = (ulong)*ptr;\nLAB_001036aa:\n    *totalRead = *totalRead + 1;\n    if (1 < DAT_0010834c) {\n      iteration = *remaining;\n      if (iteration == 0) goto LAB_00103574;\n      ptr = *buffer;\n      *remaining = iteration + -1;\n      *buffer = ptr + 1;\n      byteResult = (ulong)*ptr;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    value = FUN_00102771();\n    return value;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    value = value >> 8 & 0xff | (value & 0xff) << 8;\n  }\n  return value;\n}\n\n",
            "called": [
                "__uflow",
                "FUN_00102771"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103520",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "read_bytes_00103520"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103240": {
            "renaming": {
                "FUN_00103240": "print_unicode_buffer_00103240",
                "param_1": "buffer",
                "param_2": "stream",
                "param_3": "count",
                "param_4": "flag",
                "param_5": "unicodeBuffer",
                "pbVar1": "currentByte",
                "bVar2": "currentChar",
                "cVar3": "printBuffer",
                "lVar4": "currentCount",
                "uVar5": "nextCharCount",
                "iVar6": "printFlag",
                "__ptr": "allocatedMemory",
                "__s": "printString",
                "uVar7": "byteIndex",
                "uVar8": "bufferSize",
                "uVar9": "printSize",
                "uVar10": "charIndex",
                "uVar11": "charCount",
                "bVar12": "nextCharFlag",
                "local_80": "currentBuffer",
                "local_60": "currentUnicodeBuffer",
                "local_54": "currentPrintFlag",
                "local_50": "currentCountArray",
                "local_3d": "tempBuffer"
            },
            "code": "\n\n\nvoid printUnicodeBuffer_00103240(long buffer,long stream,long count,int flag,byte *unicodeBuffer)\n\n{\n  byte *currentByte;\n  byte currentChar;\n  char printBuffer;\n  long currentCount;\n  uint nextCharCount;\n  int printFlag;\n  void *allocatedMemory;\n  char *printString;\n  ulong byteIndex;\n  ulong bufferSize;\n  uint printSize;\n  ulong charIndex;\n  uint charCount;\n  bool nextCharFlag;\n  long currentBuffer;\n  byte *currentUnicodeBuffer;\n  int currentPrintFlag;\n  long currentCountArray [2];\n  undefined tempBuffer [13];\n  \n  currentUnicodeBuffer = unicodeBuffer;\n  currentPrintFlag = flag;\n  currentCountArray[0] = count;\n  if (DAT_00108350 == 0) {\n    printString = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (currentCount = currentCountArray[0], bufferSize = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",buffer);\n        }\n        if (DAT_00108372 == '\\0') {\n          printString[bufferSize] = '\\0';\n          fputs(printString,_stdout);\n        }\n        else {\n          FUN_0010286f(currentCount);\n          printString[bufferSize] = '\\0';\n          fputs(printString,_stdout);\n        }\n        while (bufferSize = FUN_00103520(stream,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer),\n              bufferSize != 0xffffffffffffffff) {\n          if (0xff < bufferSize) {\nLAB_0010348e:\n            FUN_00103810(bufferSize,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n            break;\n          }\n          if (bufferSize == 9) {\nLAB_00102438:\n            putc((int)bufferSize,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + bufferSize * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)bufferSize < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + bufferSize * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)bufferSize,_stdout);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n      }\n      byteIndex = FUN_00103520(stream,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n      printSize = DAT_00108374;\n      if (byteIndex == 0xffffffffffffffff) goto LAB_001034be;\n      if (byteIndex < 0x100) {\n        if (byteIndex == 9) {\nLAB_001023f5:\n          *printString = (char)byteIndex;\n          if (printSize < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)byteIndex < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *printString = (char)byteIndex;\n          if (printSize < 2) {\n            bufferSize = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        byteIndex = FUN_00103520(stream,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n        printSize = DAT_00108374;\n        if (byteIndex == 0xffffffffffffffff) goto LAB_001034be;\n        if (byteIndex < 0x100) {\n          if (byteIndex == 9) {\nLAB_001023bb:\n            printString[1] = (char)byteIndex;\n            if (printSize < 3) {\n              FUN_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)byteIndex < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            printString[1] = (char)byteIndex;\n            if (printSize < 3) {\n              bufferSize = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          byteIndex = FUN_00103520(stream,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n          printSize = DAT_00108374;\n          if (byteIndex == 0xffffffffffffffff) {\nLAB_001034be:\n            free(printString);\n            return;\n          }\n          if (byteIndex < 0x100) {\n            if (byteIndex == 9) {\nLAB_00102381:\n              printString[2] = (char)byteIndex;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)byteIndex < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              printString[2] = (char)byteIndex;\n            }\n            if (printSize < 4) {\n              bufferSize = 3;\n            }\n            else {\n              charIndex = 3;\n              do {\n                byteIndex = FUN_00103520(stream,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n                if (byteIndex == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < byteIndex) goto code_r0x001034d5;\n                if (((byteIndex != 9) && ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)byteIndex < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + byteIndex * 2) & 0x40) == 0) {\n                    FUN_001034d5();\n                    return;\n                  }\n                }\n                printSize = (int)charIndex + 1;\n                bufferSize = (ulong)printSize;\n                nextCharFlag = printSize < DAT_00108374;\n                printString[charIndex] = (char)byteIndex;\n                charIndex = bufferSize;\n              } while (nextCharFlag);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      FUN_00103810(byteIndex,currentCountArray,&currentPrintFlag,&currentUnicodeBuffer);\n    } while( true );\n  }\n  if (unicodeBuffer != (byte *)0x0) {\n    bufferSize = (ulong)flag;\n    currentBuffer = count;\n    if (buffer != 0) {\nLAB_0010249c:\n      printSize = DAT_00108374;\n      printBuffer = DAT_00108373;\n      printFlag = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (bufferSize != 0) {\n          byteIndex = 0;\n          charCount = 0;\n          charIndex = 0;\n          do {\n            while( true ) {\n              currentChar = unicodeBuffer[charIndex];\n              if (currentChar != 9) break;\nLAB_0010252e:\n              nextCharCount = 1;\nLAB_00102533:\n              if (charCount == 0) {\n                byteIndex = charIndex;\n              }\n              charCount = charCount + 1;\n              if (printSize <= charCount) goto LAB_001026a9;\n              charIndex = charIndex + nextCharCount;\n              if (bufferSize <= charIndex) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentChar * 2) & 0x10) != 0) {\n              if (0x7e < currentChar) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < currentChar) {\nLAB_0010264e:\n              if ((currentChar < 0xc0) ||\n                 (nextCharCount = FUN_001028b2(unicodeBuffer + charIndex,bufferSize - charIndex), nextCharCount == 0))\n              goto LAB_0010269a;\n              if (printFlag == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((printBuffer != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentChar * 2) & 0x40) != 0)) &&\n               (currentChar != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            nextCharCount = 1;\nLAB_00102688:\n            charIndex = charIndex + nextCharCount;\n            if (bufferSize <= charIndex) goto LAB_001026a1;\n            charCount = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (stream != 0) {\n    if (buffer != 0) {\nLAB_0010255f:\n      currentCount = currentCountArray[0];\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        allocatedMemory = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        FUN_00102b11(buffer,currentCount,stream,tempBuffer,0,allocatedMemory);\n        free(allocatedMemory);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (printSize != 0) {\nLAB_00102551:\n    if (stream == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  FUN_00103890(buffer,currentBuffer + byteIndex);\n  for (; currentByte = unicodeBuffer + byteIndex, byteIndex < bufferSize; byteIndex = byteIndex + printSize) {\n    currentChar = *currentByte;\n    if (currentChar == 9) {\nLAB_00102708:\n      putc((uint)currentChar,_stdout);\n      printSize = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentChar * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (currentChar < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)currentChar * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (currentChar < 0x7f) goto LAB_00102708;\n      }\n      printFlag = FUN_001028b2(currentByte,bufferSize - byteIndex);\n      if ((printFlag == 0) || (DAT_00108350 == 5)) break;\n      printSize = FUN_0010293a(currentByte);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(DAT_00108358,_stdout);\n  }\n  currentBuffer = currentBuffer + byteIndex;\n  bufferSize = bufferSize - byteIndex;\n  unicodeBuffer = currentByte;\n  goto LAB_0010249c;\n}\n\n",
            "called": [
                "putc",
                "xmalloc",
                "FUN_0010293a",
                "FUN_001028b2",
                "fputs",
                "FUN_00103890",
                "fwrite",
                "FUN_00102b11",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_unicode_buffer_00103240"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00104a60": {
            "renaming": {
                "FUN_00104a60": "cleanup_and_exit_00104a60",
                "param_1": "fileDescriptor",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "flag3",
                "param_5": "flag4",
                "param_6": "flag5",
                "param_7": "flag6",
                "param_8": "flag7",
                "param_9": "someData",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "length",
                "local_d0": "ptr1",
                "local_c8": "ptr2",
                "local_b8": "buffer",
                "local_b0": "buffer2",
                "local_a8": "buffer3",
                "local_a0": "buffer4",
                "local_98": "buffer5",
                "local_90": "buffer6",
                "local_88": "localFlag1",
                "local_78": "localFlag2",
                "local_68": "localFlag3",
                "local_58": "localFlag4",
                "local_48": "localFlag5",
                "local_38": "localFlag6",
                "local_28": "localFlag7",
                "local_18": "localFlag8"
            },
            "code": "\n\n\nvoid cleanupAndExit_00104a60(undefined4 fileDescriptor,undefined4 flag1,undefined4 flag2,undefined4 flag3,\n                 undefined4 flag4,undefined4 flag5,undefined4 flag6,undefined4 flag7,\n                 undefined8 someData,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 length;\n  undefined *ptr1;\n  undefined *ptr2;\n  undefined buffer [8];\n  undefined8 buffer2;\n  undefined8 buffer3;\n  undefined8 buffer4;\n  undefined8 buffer5;\n  undefined8 buffer6;\n  undefined4 localFlag1;\n  undefined4 localFlag2;\n  undefined4 localFlag3;\n  undefined4 localFlag4;\n  undefined4 localFlag5;\n  undefined4 localFlag6;\n  undefined4 localFlag7;\n  undefined4 localFlag8;\n  \n  if (condition != '\\0') {\n    localFlag1 = fileDescriptor;\n    localFlag2 = flag1;\n    localFlag3 = flag2;\n    localFlag4 = flag3;\n    localFlag5 = flag4;\n    localFlag6 = flag5;\n    localFlag7 = flag6;\n    localFlag8 = flag7;\n  }\n  ptr1 = &stack0x00000008;\n  size = 8;\n  ptr2 = buffer;\n  length = 0x30;\n  buffer2 = param10;\n  buffer3 = param11;\n  buffer4 = param12;\n  buffer5 = param13;\n  buffer6 = param14;\n  FUN_001038b0(someData,&size);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "called": [
                "FUN_001038b0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a60",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "cleanup_and_exit_00104a60"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104af4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00103a10": {
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103a10",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103a10"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_0010282b": {
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "outputPtr",
                "in_RCX": "dataPtr",
                "unaff_RBX": "inputValue"
            },
            "code": "\nvoid initializeData_0010282b(void)\n\n{\n  undefined4 *outputPtr;\n  undefined8 *dataPtr;\n  undefined8 inputValue;\n  \n  DAT_00108348 = (undefined)((ulong)inputValue >> 8);\n  DAT_0010834a = (undefined)((ulong)inputValue >> 0x18);\n  DAT_00108349 = (undefined)((ulong)inputValue >> 0x10);\n  *outputPtr = 3;\n  *dataPtr = &DAT_00108348;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010282b",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "initialize_data_0010282b"
        },
        "FUN_0010286f": {
            "renaming": {
                "FUN_0010286f": "print_formatted_number_0010286f",
                "param_1": "number"
            },
            "code": "\nvoid printFormattedNumber_0010286f(undefined8 number)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"%7ld \",number);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"%7lo \",number);\n      return;\n    }\n    return;\n  }\n  printf(\"%7lx \",number);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010286f",
            "calling": [
                "FUN_00102853",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_number_0010286f"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103aa0",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001039b0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_001038b0": {
            "renaming": {
                "FUN_001038b0": "log_error_message_001038b0",
                "param_1": "errorMessage",
                "param_2": "argumentList"
            },
            "code": "\n\n\nvoid logErrorMessage_001038b0(char *errorMessage,__gnuc_va_list argumentList)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_00108378);\n  vfprintf(_stderr,errorMessage,argumentList);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001038b0",
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "imported": false,
            "current_name": "log_error_message_001038b0"
        },
        "FUN_0010290e": {
            "renaming": {
                "FUN_0010290e": "read_byte_from_file_0010290e",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remaining_bytes",
                "param_4": "bytes_read",
                "pbVar1": "ptr_byte",
                "uVar2": "result"
            },
            "code": "\nuint read_byte_from_file_0010290e(_IO_FILE *file,long position,uint *remaining_bytes,int *bytes_read)\n\n{\n  byte *ptr_byte;\n  uint result;\n  \n  if (*remaining_bytes != 0) {\n    result = *remaining_bytes - 1;\n    *remaining_bytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *bytes_read = *bytes_read + 1;\n  ptr_byte = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= ptr_byte) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(ptr_byte + 1);\n  return (uint)*ptr_byte;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010290e",
            "calling": [
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "read_byte_from_file_0010290e"
        },
        "FUN_00103890": {
            "renaming": {
                "FUN_00103890": "print_message_if_enabled_00103890",
                "param_1": "message",
                "param_2": "data"
            },
            "code": "\nvoid printMessageIfEnabled_00103890(undefined8 message,undefined8 data)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  FUN_0010286f(data);\n  return;\n}\n\n",
            "called": [
                "FUN_00102853"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103890",
            "calling": [
                "FUN_00103240",
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "print_message_if_enabled_00103890"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103810": {
            "renaming": {
                "FUN_00103810": "update_params_and_return_00103810",
                "param_1": "value",
                "param_2": "ptr_to_val1",
                "param_3": "ptr_to_val2",
                "param_4": "ptr_to_val3",
                "iVar1": "val2",
                "iVar3": "val3",
                "lVar2": "val4"
            },
            "code": "\n\n\nvoid update_params_and_return_00103810(undefined8 value,long *ptr_to_val1,int *ptr_to_val2,long *ptr_to_val3)\n\n{\n  int val2;\n  long val4;\n  int val3;\n  \n  val4 = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  val3 = DAT_0010834c + -1;\n  *ptr_to_val1 = *ptr_to_val1 - (long)val3;\n  val2 = *ptr_to_val2;\n  if (val2 == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)value;\n          *ptr_to_val2 = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)value << 8 | (ushort)value >> 8;\n            DAT_00108348 = (undefined)((ulong)value >> 0x10);\n            *ptr_to_val2 = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            FUN_0010282b();\n            return;\n          }\n        }\n      }\n      *ptr_to_val3 = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)value >> 8);\n    *ptr_to_val2 = 1;\n    *ptr_to_val3 = (long)&DAT_00108348;\n  }\n  else {\n    *ptr_to_val3 = *ptr_to_val3 + (1 - val4);\n    *ptr_to_val2 = val3 + val2;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010282b",
                "FUN_001027e2"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103810",
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "update_params_and_return_00103810"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00103aa0",
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "FUN_001030c0": {
            "renaming": {
                "FUN_001030c0": "print_strings_001030c0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "languageId",
                "pcVar2": "translation",
                "__ptr": "targetList",
                "plVar3": "ptrToList"
            },
            "code": "\nvoid printStrings_001030c0(FILE *outputFile,int exitCode)\n\n{\n  long languageId;\n  char *translation;\n  long *targetList;\n  long *ptrToList;\n  \n  languageId = DAT_00108378;\n  translation = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,translation,languageId);\n  translation = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(outputFile,translation);\n  languageId = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    translation = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,translation);\n  }\n  else {\n    translation = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,translation,languageId);\n  }\n  targetList = (long *)bfd_target_list();\n  ptrToList = targetList;\n  while( true ) {\n    languageId = *ptrToList;\n    ptrToList = ptrToList + 1;\n    if (languageId == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "fputc",
                "dcgettext",
                "exit",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_strings_001030c0"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_0010293a",
                "FUN_00103aa0",
                "FUN_00102853",
                "FUN_0010286f",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_0010259a": {
            "renaming": {
                "FUN_0010259a": "print_formatted_strings_0010259a",
                "in_R8": "stringIndex",
                "unaff_R14": "outputString",
                "unaff_R15": "formatMessage",
                "param_7": "currentIndex",
                "param_8": "formatSpecifier",
                "param_11": "lineSpecifier",
                "uVar1": "character",
                "uVar2": "result",
                "bVar3": "invalidCharFlag"
            },
            "code": "\n\n\nvoid printFormattedStrings_0010259a(void)\n\n{\n  uint character;\n  ulong result;\n  ulong stringIndex;\n  char *outputString;\n  undefined8 formatMessage;\n  bool invalidCharFlag;\n  uint currentIndex;\n  undefined8 formatSpecifier;\n  undefined8 lineSpecifier;\n  \n  do {\n    currentIndex = (uint)stringIndex;\n    printf(\"%s: \",formatSpecifier);\n    stringIndex = (ulong)currentIndex;\n    do {\n      if (DAT_00108372 == '\\0') {\n        outputString[stringIndex] = '\\0';\n        fputs(outputString,_stdout);\n      }\n      else {\n        currentIndex = (uint)stringIndex;\n        FUN_0010286f(formatMessage);\n        outputString[currentIndex] = '\\0';\n        fputs(outputString,_stdout);\n      }\n      while (result = FUN_00103520(), result != 0xffffffffffffffff) {\n        if (0xff < result) {\nLAB_0010348e:\n          FUN_00103810();\n          break;\n        }\n        if (result == 9) {\nLAB_00102438:\n          putc((int)result,_stdout);\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + result * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + result * 2) & 0x40) == 0))))\n            goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          putc((int)result,_stdout);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        putc(10,_stdout);\n      }\n      else {\n        fputs(DAT_00108358,_stdout);\n      }\n      while (stringIndex = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        result = FUN_00103520();\n        character = DAT_00108374;\n        if (result == 0xffffffffffffffff) goto LAB_001034be;\n        if (result < 0x100) {\n          if (result == 9) {\nLAB_001023f5:\n            *outputString = (char)result;\n            if (character < 2) {\n              FUN_001034fa();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *outputString = (char)result;\n            if (character < 2) {\n              stringIndex = 1;\n              break;\n            }\n          }\n          result = FUN_00103520();\n          character = DAT_00108374;\n          if (result == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < result) goto code_r0x001034d5;\n          if (result == 9) {\nLAB_001023bb:\n            outputString[1] = (char)result;\n            if (character < 3) {\n              FUN_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            outputString[1] = (char)result;\n            if (character < 3) {\n              stringIndex = 2;\n              break;\n            }\n          }\n          result = FUN_00103520();\n          character = DAT_00108374;\n          if (result == 0xffffffffffffffff) {\nLAB_001034be:\n            free(outputString);\n            return;\n          }\n          if (0xff < result) goto code_r0x001034d5;\n          if (result == 9) {\nLAB_00102381:\n            outputString[2] = (char)result;\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + result * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)result < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + result * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            outputString[2] = (char)result;\n          }\n          if (3 < character) {\n            stringIndex = 3;\n            do {\n              currentIndex = (uint)stringIndex;\n              result = FUN_00103520();\n              if (result == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < result) goto code_r0x001034d5;\n              if (((result != 9) && ((*(ushort *)(&_sch_istable + result * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)result < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&_sch_istable + result * 2) & 0x40) == 0) {\n                  FUN_001034d5();\n                  return;\n                }\n              }\n              stringIndex = (ulong)(currentIndex + 1);\n              invalidCharFlag = DAT_00108374 <= currentIndex + 1;\n              outputString[currentIndex] = (char)result;\n              if (invalidCharFlag) goto joined_r0x0010341b;\n            } while( true );\n          }\n          stringIndex = 3;\n          break;\n        }\ncode_r0x001034d5:\n        FUN_00103810();\n      }\njoined_r0x0010341b:\n      formatMessage = lineSpecifier;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "called": [
                "putc",
                "FUN_00102330",
                "FUN_00103520",
                "printf",
                "FUN_001034d5",
                "fputs",
                "FUN_0010286f",
                "FUN_00103510",
                "FUN_0010259a",
                "FUN_001034fa",
                "FUN_00103810",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259a",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_strings_0010259a"
        },
        "FUN_001028b2": {
            "renaming": {
                "FUN_001028b2": "check_byte_pattern_001028b2",
                "param_1": "byteArray",
                "param_2": "length",
                "bVar1": "firstByte",
                "lVar2": "result"
            },
            "code": "\nlong checkBytePattern_001028b2(byte *byteArray,long length)\n\n{\n  byte firstByte;\n  long result;\n  \n  firstByte = *byteArray;\n  if ((0xbf < firstByte) && (length != 1)) {\n    result = 0;\n    if ((byteArray[1] & 0xc0) == 0x80) {\n      if ((firstByte & 0x20) == 0) {\n        return 2;\n      }\n      if ((length != 2) && ((byteArray[2] & 0xc0) == 0x80)) {\n        if ((firstByte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (length != 3) {\n            return (ulong)((byteArray[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028b2",
            "calling": [
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "check_byte_pattern_001028b2"
        },
        "FUN_001039e0": {
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001039e0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_001039e0"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00102330": {
            "renaming": {
                "FUN_00102330": "print_data_00102330",
                "param_1": "data",
                "uVar1": "index",
                "in_AX": "flags",
                "uVar2": "index1",
                "uVar3": "index2",
                "in_R8D": "count",
                "unaff_R14": "output",
                "unaff_R15": "message",
                "bVar4": "isLess",
                "in_stack_00000010": "label",
                "in_stack_00000038": "message"
            },
            "code": "\n\n\nvoid printData_00102330(ulong data)\n\n{\n  uint index;\n  ushort flags;\n  ulong index1;\n  ulong index2;\n  uint count;\n  char *output;\n  undefined8 message;\n  bool isLess;\n  undefined8 label;\n  undefined8 message;\n  \ncode_r0x00102330:\n  if ((DAT_00108360 != 'S') || ((long)data < 0x80)) {\n    if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      FUN_001034d5();\n      return;\n    }\n  }\nLAB_00103400:\n  index1 = (ulong)count;\n  count = count + 1;\n  index2 = (ulong)count;\n  isLess = count < DAT_00108374;\n  output[index1] = (char)data;\n  if (isLess) goto LAB_001033b3;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",label);\n    }\n    if (DAT_00108372 == '\\0') {\n      output[index2] = '\\0';\n      fputs(output,_stdout);\n    }\n    else {\n      FUN_0010286f(message);\n      output[index2] = '\\0';\n      fputs(output,_stdout);\n    }\n    while (index2 = FUN_00103520(), index2 != 0xffffffffffffffff) {\n      if (0xff < index2) {\nLAB_0010348e:\n        FUN_00103810();\n        break;\n      }\n      if (index2 == 9) {\nLAB_00102438:\n        putc((int)index2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index2,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (index2 = (ulong)DAT_00108374, message = message, DAT_00108374 != 0) {\n      index2 = FUN_00103520();\n      index = DAT_00108374;\n      if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n      if (index2 < 0x100) {\n        if (index2 == 9) {\nLAB_001023f5:\n          *output = (char)index2;\n          if (index < 2) {\n            FUN_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *output = (char)index2;\n          if (index < 2) {\n            index2 = 1;\n            break;\n          }\n        }\n        index2 = FUN_00103520();\n        index = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_001023bb:\n          output[1] = (char)index2;\n          if (index < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          output[1] = (char)index2;\n          if (index < 3) {\n            index2 = 2;\n            break;\n          }\n        }\n        index2 = FUN_00103520();\n        index = DAT_00108374;\n        if (index2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index2) goto code_r0x001034d5;\n        if (index2 == 9) {\nLAB_00102381:\n          output[2] = (char)index2;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + index2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + index2 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          output[2] = (char)index2;\n        }\n        if (index < 4) {\n          index2 = 3;\n          break;\n        }\n        count = 3;\nLAB_001033b3:\n        data = FUN_00103520();\n        if (data == 0xffffffffffffffff) {\nLAB_001034be:\n          free(output);\n          return;\n        }\n        if (data < 0x100) {\n          if ((data == 9) ||\n             (flags = *(ushort *)(&_sch_istable + data * 2), (flags & 0x10) != 0))\n          goto LAB_00103400;\n          goto code_r0x00102330;\n        }\n      }\ncode_r0x001034d5:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_data_00102330"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00102771": {
            "renaming": {
                "FUN_00102771": "extract_byte_chunks_00102771",
                "unaff_RBX": "input"
            },
            "code": "\nulong extractByteChunks_00102771(void)\n\n{\n  ulong input;\n  \n  return input >> 0x18 & 0xff |\n         (input & 0xff) << 0x18 | (ulong)((uint)(input << 8) & 0xff0000) |\n         (ulong)((uint)(input >> 8) & 0xff00);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102771",
            "calling": [
                "FUN_00103520"
            ],
            "imported": false,
            "current_name": "extract_byte_chunks_00102771"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0",
                "FUN_001030c0",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_001034fa": {
            "renaming": {
                "FUN_001034fa": "print_formatted_output_001034fa",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "unaff_R14": "buffer",
                "unaff_R15": "message",
                "bVar5": "condition",
                "in_stack_00000010": "inputString",
                "in_stack_00000038": "additionalData"
            },
            "code": "\n\n\nvoid printFormattedOutput_001034fa(void)\n\n{\n  ulong temp1;\n  uint temp2;\n  ulong temp3;\n  ulong temp4;\n  char *buffer;\n  undefined8 message;\n  bool condition;\n  undefined8 inputString;\n  undefined8 additionalData;\n  \ncode_r0x001034fa:\n  temp4 = 1;\njoined_r0x0010341b:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",inputString);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[temp4] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    else {\n      FUN_0010286f(message);\n      buffer[temp4] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    while (temp4 = FUN_00103520(), temp4 != 0xffffffffffffffff) {\n      if (0xff < temp4) {\nLAB_0010348e:\n        FUN_00103810();\n        break;\n      }\n      if (temp4 == 9) {\nLAB_00102438:\n        putc((int)temp4,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)temp4 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)temp4,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (temp4 = (ulong)DAT_00108374, message = additionalData, DAT_00108374 != 0) {\n      temp4 = FUN_00103520();\n      temp2 = DAT_00108374;\n      if (temp4 == 0xffffffffffffffff) goto LAB_001034be;\n      if (temp4 < 0x100) {\n        if (temp4 == 9) {\nLAB_001023f5:\n          *buffer = (char)temp4;\n          if (temp2 < 2) {\n            printFormattedOutput_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)temp4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *buffer = (char)temp4;\n          if (temp2 < 2) goto code_r0x001034fa;\n        }\n        temp4 = FUN_00103520();\n        temp2 = DAT_00108374;\n        if (temp4 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < temp4) goto code_r0x001034d5;\n        if (temp4 == 9) {\nLAB_001023bb:\n          buffer[1] = (char)temp4;\n          if (temp2 < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)temp4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          buffer[1] = (char)temp4;\n          if (temp2 < 3) {\n            temp4 = 2;\n            break;\n          }\n        }\n        temp4 = FUN_00103520();\n        temp2 = DAT_00108374;\n        if (temp4 == 0xffffffffffffffff) {\nLAB_001034be:\n          free(buffer);\n          return;\n        }\n        if (0xff < temp4) goto code_r0x001034d5;\n        if (temp4 == 9) {\nLAB_00102381:\n          buffer[2] = (char)temp4;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)temp4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + temp4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          buffer[2] = (char)temp4;\n        }\n        if (3 < temp2) {\n          temp3 = 3;\n          do {\n            temp1 = FUN_00103520();\n            if (temp1 == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < temp1) goto code_r0x001034d5;\n            if (((temp1 != 9) && ((*(ushort *)(&_sch_istable + temp1 * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)temp1 < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&_sch_istable + temp1 * 2) & 0x40) == 0) {\n                FUN_001034d5();\n                return;\n              }\n            }\n            temp2 = (int)temp3 + 1;\n            temp4 = (ulong)temp2;\n            condition = DAT_00108374 <= temp2;\n            buffer[temp3] = (char)temp1;\n            temp3 = temp4;\n            if (condition) goto joined_r0x0010341b;\n          } while( true );\n        }\n        temp4 = 3;\n        break;\n      }\ncode_r0x001034d5:\n      FUN_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034fa",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_output_001034fa"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_00102853": {
            "renaming": {
                "FUN_00102853": "print_message_00102853",
                "param_1": "message"
            },
            "code": "\nvoid printMessage_00102853(undefined8 message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  FUN_0010286f();\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_0010286f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102853",
            "calling": [
                "FUN_00103890"
            ],
            "imported": false,
            "current_name": "print_message_00102853"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_0010293a",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103aa0",
                "FUN_001030c0",
                "FUN_001038b0"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "__uflow": {
            "renaming": {},
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103520",
                "FUN_0010290e"
            ],
            "imported": false,
            "current_name": "__uflow"
        },
        "FUN_001027e2": {
            "renaming": {
                "FUN_001027e2": "calculate_sum_001027e2",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "multiplier",
                "param_4": "result",
                "in_RAX": "pointer"
            },
            "code": "\nvoid calculateSum_001027e2(int num1,int num2,long multiplier,long *result)\n\n{\n  int *pointer;\n  \n  *result = *result + (1 - multiplier);\n  *pointer = num1 + num2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027e2",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "calculate_sum_001027e2"
        },
        "FUN_001034d5": {
            "renaming": {
                "FUN_001034d5": "parse_and_print_input_001034d5",
                "uVar1": "inputByte",
                "uVar2": "tempByte",
                "uVar3": "inputCounter",
                "uVar4": "counter",
                "unaff_R14": "outputBuffer",
                "bVar5": "isLessThanCounter",
                "in_stack_00000010": "promptMessage",
                "in_stack_00000038": "customMessage"
            },
            "code": "\n\n\nvoid parseAndPrintInput_001034d5(void)\n\n{\n  ulong inputByte;\n  ulong tempByte;\n  uint inputCounter;\n  ulong counter;\n  char *outputBuffer;\n  bool isLessThanCounter;\n  undefined8 promptMessage;\n  undefined8 customMessage;\n  \ncode_r0x001034d5:\n  FUN_00103810();\n  do {\n    inputByte = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      inputByte = FUN_00103520();\n      inputCounter = DAT_00108374;\n      if (inputByte == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < inputByte) goto code_r0x001034d5;\n      if (inputByte == 9) {\nLAB_001023f5:\n        *outputBuffer = (char)inputByte;\n        if (inputCounter < 2) {\n          FUN_001034fa();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)inputByte)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x40) != 0))))\n          goto LAB_001023f5;\n          goto code_r0x001034d5;\n        }\n        *outputBuffer = (char)inputByte;\n        if (inputCounter < 2) {\n          inputByte = 1;\n          goto joined_r0x001034ef;\n        }\n      }\n      inputByte = FUN_00103520();\n      inputCounter = DAT_00108374;\n      if (inputByte == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < inputByte) goto code_r0x001034d5;\n      if (inputByte == 9) {\nLAB_001023bb:\n        outputBuffer[1] = (char)inputByte;\n        if (inputCounter < 3) {\n          FUN_00103510();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)inputByte)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x40) != 0))))\n          goto LAB_001023bb;\n          goto code_r0x001034d5;\n        }\n        outputBuffer[1] = (char)inputByte;\n        if (inputCounter < 3) {\n          inputByte = 2;\n          goto joined_r0x001034ef;\n        }\n      }\n      inputByte = FUN_00103520();\n      inputCounter = DAT_00108374;\n      if (inputByte == 0xffffffffffffffff) {\nLAB_001034be:\n        free(outputBuffer);\n        return;\n      }\n      if (0xff < inputByte) goto code_r0x001034d5;\n      if (inputByte == 9) {\nLAB_00102381:\n        outputBuffer[2] = (char)inputByte;\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)inputByte)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x40) != 0))))\n          goto LAB_00102381;\n          goto code_r0x001034d5;\n        }\n        outputBuffer[2] = (char)inputByte;\n      }\n      if (inputCounter < 4) {\n        inputByte = 3;\n      }\n      else {\n        counter = 3;\n        do {\n          tempByte = FUN_00103520();\n          if (tempByte == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < tempByte) goto code_r0x001034d5;\n          if (((tempByte != 9) && ((*(ushort *)(&_sch_istable + tempByte * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)tempByte < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n            if ((*(ushort *)(&_sch_istable + tempByte * 2) & 0x40) == 0) {\n              parseAndPrintInput_001034d5();\n              return;\n            }\n          }\n          inputCounter = (int)counter + 1;\n          inputByte = (ulong)inputCounter;\n          isLessThanCounter = inputCounter < DAT_00108374;\n          outputBuffer[counter] = (char)tempByte;\n          counter = inputByte;\n        } while (isLessThanCounter);\n      }\n    }\njoined_r0x001034ef:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",promptMessage);\n    }\n    if (DAT_00108372 == '\\0') {\n      outputBuffer[inputByte] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    else {\n      FUN_0010286f(customMessage);\n      outputBuffer[inputByte] = '\\0';\n      fputs(outputBuffer,_stdout);\n    }\n    while (inputByte = FUN_00103520(), inputByte != 0xffffffffffffffff) {\n      if (0xff < inputByte) {\nLAB_0010348e:\n        FUN_00103810();\n        break;\n      }\n      if (inputByte == 9) {\nLAB_00102438:\n        putc((int)inputByte,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)inputByte < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + inputByte * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)inputByte,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034d5",
            "calling": [
                "FUN_00102330",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "parse_and_print_input_001034d5"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_00103aa0": {
            "renaming": {
                "FUN_00103aa0": "extract_strings_00103aa0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "currentByte",
                "bVar2": "currentChar",
                "bVar3": "nextChar",
                "cVar4": "charFlag",
                "iVar5": "status",
                "uVar6": "count",
                "iVar7": "index",
                "uVar8": "error",
                "__stream": "fileStream",
                "sVar9": "fileSize",
                "sVar10": "bytesRead",
                "__ptr": "processedString",
                "lVar11": "length",
                "plVar12": "currentFile",
                "uVar13": "fileIndex",
                "__src": "sourceStrings",
                "uVar14": "errorStr",
                "__stream_00": "tempStream",
                "piVar15": "errnoPtr",
                "plVar16": "currentArg",
                "uVar17": "messageStr",
                "plVar18": "currentString",
                "pbVar19": "currentPtr",
                "pcVar20": "currentPath",
                "pcVar24": "warningStr"
            },
            "code": "\n\n\n\nFILE * extractStrings_00103aa0(int argc,long *argv)\n\n{\n  byte *currentByte;\n  byte currentChar;\n  byte nextChar;\n  char charFlag;\n  int status;\n  uint count;\n  int index;\n  undefined4 error;\n  FILE *fileStream;\n  size_t fileSize;\n  size_t bytesRead;\n  byte *processedString;\n  long length;\n  long *currentFile;\n  ulong fileIndex;\n  long *sourceStrings;\n  undefined8 errorStr;\n  FILE *tempStream;\n  int *errnoPtr;\n  long *currentArg;\n  undefined8 messageStr;\n  long *currentString;\n  byte *currentPtr;\n  char *currentPath;\n  undefined **ppuVar21;\n  long lVar22;\n  byte *pcurrentChar3;\n  char *warningStr;\n  bool currentChar5;\n  long *unaff_R12;\n  undefined8 *puVar26;\n  bool currentChar7;\n  bool currentChar8;\n  long *local_140;\n  undefined8 local_138;\n  undefined8 local_128;\n  ulong local_120;\n  size_t local_118;\n  long local_110;\n  char *local_d8;\n  void *local_d0;\n  stat local_c8;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  currentArg = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  local_120 = 2000;\n  unaff_R12 = (long *)0x1;\n  local_138 = (long *)0x0;\n  currentFile = argv;\n  do {\n    index = (int)unaff_R12;\n    ppuVar21 = (undefined **)(long)index;\n    local_140 = (long *)((long)ppuVar21 * 8);\n    currentArg = currentFile;\n    if (*(char *)currentFile[(long)ppuVar21] == '@') {\n      count = (int)local_120 - 1;\n      local_120 = (ulong)count;\n      if (count == 0) {\n        length = *currentFile;\n        currentPath = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      currentPath = (char *)currentFile[(long)ppuVar21] + 1;\n      status = stat(currentPath,&local_c8);\n      if (-1 < status) {\n        if ((local_c8.st_mode & 0xf000) == 0x4000) {\n          do {\n            length = *currentFile;\n            currentPath = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(_stderr,currentPath,length);\n            xexit(1);\n          } while( true );\n        }\n        fileStream = fopen(currentPath,\"r\");\n        if (fileStream != (FILE *)0x0) {\n          status = fseek(fileStream,0,2);\n          if (((status != -1) && (fileSize = ftell(fileStream), fileSize != 0xffffffffffffffff)) &&\n             (status = fseek(fileStream,0,0), status != -1)) {\n            local_128 = (byte *)xmalloc(fileSize + 1);\n            bytesRead = fread(local_128,1,fileSize,fileStream);\n            if ((fileSize == bytesRead) || (status = ferror(fileStream), status == 0)) {\n              local_128[bytesRead] = 0;\n              nextChar = *local_128;\n              currentPtr = local_128;\n              while( true ) {\n                if (nextChar == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)nextChar * 2] & 0x40) == 0) break;\n                nextChar = currentPtr[1];\n                currentPtr = currentPtr + 1;\n              }\n              fileSize = strlen((char *)local_128);\n              processedString = (byte *)xmalloc(fileSize + 1);\n              sourceStrings = (long *)0x0;\n              status = 0;\n              local_110 = 0;\n              currentChar5 = false;\n              currentChar8 = false;\n              currentChar7 = false;\n              currentPtr = local_128;\n              do {\n                while (((&_sch_istable)[(ulong)*currentPtr * 2] & 0x40) != 0) {\n                  currentPtr = currentPtr + 1;\n                }\n                if ((status == 0) || (status + -1 <= (int)local_110)) {\n                  if (sourceStrings == (long *)0x0) {\n                    status = 8;\n                    sourceStrings = (long *)xmalloc(0x40);\n                    currentString = sourceStrings + local_110;\n                    *currentString = 0;\n                  }\n                  else {\n                    status = status * 2;\n                    sourceStrings = (long *)xrealloc(sourceStrings,(long)status << 3);\n                    currentString = sourceStrings + local_110;\n                    *currentString = 0;\n                  }\n                }\n                else {\n                  currentString = sourceStrings + local_110;\n                }\n                nextChar = *currentPtr;\n                pcurrentChar3 = processedString;\n                while (nextChar != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)nextChar * 2] & 0x40) != 0) &&\n                       (!(bool)(currentChar8 | currentChar7 | currentChar5))) {\n                      currentChar7 = false;\n                      currentChar5 = false;\n                      currentChar8 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!currentChar7) break;\n                    currentPtr = currentPtr + 1;\n                    *pcurrentChar3 = nextChar;\n                    pcurrentChar3 = pcurrentChar3 + 1;\n                    currentChar7 = false;\n                    nextChar = *currentPtr;\n                    if (nextChar == 0) goto LAB_00103d4f;\n                  }\n                  if (nextChar == 0x5c) {\n                    currentChar7 = true;\n                  }\n                  else if (currentChar8) {\n                    if (nextChar == 0x27) {\n                      currentChar8 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *pcurrentChar3 = nextChar;\n                      pcurrentChar3 = pcurrentChar3 + 1;\n                    }\n                  }\n                  else if (currentChar5) {\n                    if (nextChar != 0x22) goto LAB_00103ec8;\n                    currentChar5 = false;\n                  }\n                  else if (nextChar == 0x27) {\n                    currentChar8 = true;\n                  }\n                  else {\n                    if (nextChar != 0x22) goto LAB_00103ec8;\n                    currentChar5 = true;\n                  }\n                  currentByte = currentPtr + 1;\n                  currentPtr = currentPtr + 1;\n                  nextChar = *currentByte;\n                }\nLAB_00103d4f:\n                *pcurrentChar3 = 0;\n                length = xstrdup(processedString);\n                *currentString = length;\n                sourceStrings[local_110 + 1] = 0;\n                nextChar = *currentPtr;\n                currentChar = (&_sch_istable)[(ulong)nextChar * 2];\n                while ((currentChar & 0x40) != 0) {\n                  nextChar = currentPtr[1];\n                  currentPtr = currentPtr + 1;\n                  currentChar = (&_sch_istable)[(ulong)nextChar * 2];\n                }\n                local_110 = local_110 + 1;\n                if (nextChar == 0) {\n                  free(processedString);\n                  if (currentFile == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free(local_128);\n          }\n          fclose(fileStream);\n        }\n      }\n    }\n    if (argc <= index + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      fileStream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      ppuVar21 = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      currentPath = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        index = (int)unaff_R12;\n        status = getopt_long(argc,currentArg,currentPath);\n        if (status == -1) break;\n        currentFile = (long *)currentPath;\n        switch(status) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          FUN_001030c0(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          unaff_R12 = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          unaff_R12 = _optarg;\n          index = strcmp((char *)_optarg,\"default\");\n          if ((index == 0) || (index = strcmp((char *)unaff_R12,\"d\"), index == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            index = strcmp((char *)unaff_R12,\"locale\");\n            if ((index == 0) || (index = strcmp((char *)unaff_R12,\"l\"), index == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              index = strcmp((char *)unaff_R12,\"escape\");\n              if ((index == 0) || (index = strcmp((char *)unaff_R12,\"e\"), index == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                index = strcmp((char *)unaff_R12,\"invalid\");\n                if ((index == 0) || (index = strcmp((char *)unaff_R12,\"i\"), index == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  index = strcmp((char *)unaff_R12,\"hex\");\n                  if ((index == 0) || (index = strcmp((char *)unaff_R12,\"x\"), index == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    index = strcmp((char *)unaff_R12,\"highlight\");\n                    if ((index != 0) && (index = strcmp((char *)unaff_R12,\"h\"), index != 0)) {\n                      errorStr = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      FUN_00104a60(errorStr);\n                      FUN_001038b0();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          currentPath = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(currentPath);\n          currentPath = (char *)dcgettext(0,\n                                      \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(currentPath);\n                    \n          exit(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          unaff_R12 = (long *)&optarg;\n          index = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          status = getopt_long(argc,currentArg,currentPath);\n          if (status == -1) goto LAB_0010407f;\n          switch(status) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            status = getopt_long(argc,currentArg,currentPath);\n            if (status == -1) goto LAB_0010407f;\n            switch(status) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          fileStream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          unaff_R12 = (long *)&optarg;\n          fileIndex = strtoul((char *)_optarg,&local_d8,0);\n          DAT_00108374 = (int)fileIndex;\n          if ((local_d8 != (char *)0x0) && (currentFile = _optarg, *local_d8 != '\\0')) {\nLAB_001042e6:\n            errorStr = dcgettext(0,\"invalid integer argument %s\",5);\n            FUN_00104a60(errorStr,currentFile);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          unaff_R12 = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          currentPath = (char *)currentFile;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          unaff_R12 = (long *)&optarg;\n          index = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          charFlag = *(char *)_optarg;\n          if (charFlag == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (charFlag == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (charFlag != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)fileStream != 0) {\nLAB_001044f5:\n        currentPath = (char *)(currentArg + (long)(int)fileStream + -1);\n        fileIndex = strtoul((char *)(*(long *)currentPath + 1),&local_d8,0);\n        DAT_00108374 = (int)fileIndex;\n        if ((local_d8 != (char *)0x0) && (*local_d8 != '\\0')) {\n          currentFile = (long *)(*(long *)currentPath + 1);\n          goto LAB_001042e6;\n        }\n      }\n      index = (int)unaff_R12;\n      if (DAT_00108374 == 0) {\n        errorStr = dcgettext(0,\"invalid minimum string length %d\",5);\n        FUN_00104a60(errorStr,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      fileIndex = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((fileIndex & 0x2000000020000) == 0) {\n        if ((fileIndex & 0x401) == 0) {\n          if ((fileIndex & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      index = bfd_init();\n      if (index == 0x118) {\n        currentPath = \"x86_64-pc-linux-gnu\";\n        count = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)count != '\\0') {\n          ppuVar21 = (undefined **)&optind;\n          if (argc <= (int)_optind) {\n            DAT_00108370 = 0;\n            FUN_00103240(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          fileIndex = 0;\n          fileStream = (FILE *)0x0;\n          currentFile = (long *)(ulong)count;\n          count = _optind;\n          local_140 = currentArg;\n          goto LAB_001043b8;\n        }\n        error = bfd_get_error();\n        ppuVar21 = (undefined **)bfd_errmsg(error);\n        errorStr = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        FUN_00104a60(errorStr,\"x86_64-pc-linux-gnu\",ppuVar21);\n      }\n      errorStr = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      FUN_00104a60(errorStr);\n      currentFile = currentArg;\nLAB_0010462b:\n      warningStr = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      errorStr = dcgettext(0,warningStr,5);\n      FUN_00103910(errorStr,currentPath);\n      count = 0;\n      do {\n        while( true ) {\n          fileIndex = (ulong)currentFile & 0xffffffff;\n          fileStream = (FILE *)(ulong)((uint)fileStream | (count ^ 1) & 0xff);\n          while( true ) {\n            index = (int)fileIndex;\n            count = *(uint *)ppuVar21 + 1;\n            *(uint *)ppuVar21 = count;\n            if (argc <= (int)count) {\n              currentArg = currentFile;\n              if ((char)fileIndex != '\\0') {\n                return fileStream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            currentPath = (char *)local_140[(int)count];\n            index = strcmp(currentPath,\"-\");\n            if (index != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          index = stat(currentPath,&local_c8);\n          if (index < 0) break;\n          if ((local_c8.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (currentArg = (long *)bfd_openr(currentPath,DAT_00108368), currentArg == (long *)0x0)) {\nLAB_00104416:\n            tempStream = fopen(currentPath,\"r\");\n            if (tempStream != (FILE *)0x0) {\n              FUN_00103240(currentPath,tempStream,0,0,0);\n              index = fclose(tempStream);\n              if (index != -1) goto LAB_00104454;\n            }\n            fprintf(_stderr,\"%s: \",DAT_00108378);\n            perror(currentPath);\n            count = 0;\n          }\n          else {\n            charFlag = bfd_check_format(currentArg,1);\n            if (charFlag == '\\0') {\n              bfd_close();\n              local_138 = currentArg;\n              goto LAB_00104416;\n            }\n            puVar26 = (undefined8 *)currentArg[0x12];\n            local_138 = (long *)((ulong)currentArg & 0xffffffffffffff00);\n            local_128 = (byte *)CONCAT44(local_128._4_4_,argc);\n            for (; puVar26 != (undefined8 *)0x0; puVar26 = (undefined8 *)puVar26[1]) {\n              charFlag = (char)local_138;\n              if (((*(uint *)((long)puVar26 + 0x24) & 0x103) == 0x103) &&\n                 (local_120 = puVar26[8], local_120 != 0)) {\n                charFlag = bfd_malloc_and_get_section(currentArg,puVar26,&local_d0);\n                if (charFlag == '\\0') {\n                  error = bfd_get_error();\n                  local_120 = bfd_errmsg(error);\n                  errorStr = *puVar26;\n                  messageStr = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  FUN_00103910(messageStr,currentPath,errorStr);\n                  charFlag = (char)local_138;\n                }\n                else {\n                  FUN_00103240(currentPath,0,puVar26[0x10],local_120,local_d0);\n                  free(local_d0);\n                }\n              }\n              local_138 = (long *)CONCAT71(local_138._1_7_,charFlag);\n            }\n            currentFile = (long *)((ulong)currentFile & 0xff);\n            charFlag = bfd_close(currentArg);\n            if (charFlag == '\\0') {\n              index = bfd_get_error();\n              if (index == 0) {\n                errorStr = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                errorStr = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00108378,currentPath,errorStr);\n              goto LAB_00104416;\n            }\n            currentChar8 = (char)local_138 == '\\0';\n            if (currentChar8) goto LAB_00104416;\nLAB_00104454:\n            count = (uint)currentFile;\n          }\n        }\n        errnoPtr = __errno_location();\n        warningStr = \"\\'%s\\': No such file\";\n        if (*errnoPtr == 2) goto LAB_00104637;\n        warningStr = strerror(*errnoPtr);\n        errorStr = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00103910(errorStr,currentPath,warningStr);\n        count = 0;\n      } while( true );\n    }\n    count = index + 1;\n    local_138 = unaff_R12;\nLAB_00103eac:\n    unaff_R12 = (long *)(ulong)count;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  FUN_001030c0(_stderr);\nLAB_001040fd:\n  sourceStrings = (long *)xmalloc(8);\n  *sourceStrings = 0;\n  if (currentArg == argv) {\nLAB_0010411e:\n    if (*currentArg == 0) {\n      status = 0;\n    }\n    else {\n      length = 1;\n      do {\n        status = (int)length;\n        currentFile = currentArg + length;\n        length = length + 1;\n      } while (*currentFile != 0);\n    }\n    lVar22 = 0;\n    currentFile = (long *)xmalloc((long)(status + 1) << 3);\n    length = *currentArg;\n    while (length != 0) {\n      errorStr = xstrdup();\n      *(undefined8 *)((long)currentFile + lVar22) = errorStr;\n      lVar22 = lVar22 + 8;\n      length = *(long *)((long)currentArg + lVar22);\n    }\n    *(undefined8 *)((long)currentFile + lVar22) = 0;\nLAB_00103dea:\n    currentArg = currentFile;\n    if (*sourceStrings != 0) {\n      length = 0;\n      do {\n        length = length + 1;\n      } while (sourceStrings[length] != 0);\n      local_118 = length * 8;\n      status = argc;\n      goto LAB_00103e18;\n    }\n  }\n  length = 0;\n  local_118 = 0;\n  status = argc;\nLAB_00103e18:\n  free((void *)currentArg[(long)ppuVar21]);\n  currentFile = (long *)xrealloc(currentArg,(length + 1 + (long)status) * 8);\n  argc = status + -1 + (int)length;\n  memmove(currentFile + (long)((long)ppuVar21 + length),(void *)((long)(currentFile + 1) + (long)local_140),\n          (long)(status - index) << 3);\n  memcpy((void *)((long)currentFile + (long)local_140),sourceStrings,local_118);\n  free(sourceStrings);\n  free(local_128);\n  fclose(fileStream);\n  count = (int)local_138 + 1;\n  unaff_R12 = local_140;\n  currentArg = currentFile;\n  local_140 = sourceStrings;\n  if ((int)count < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "called": [
                "xrealloc",
                "strerror",
                "getopt_long",
                "ftell",
                "xstrdup",
                "dcgettext",
                "stat",
                "fflush",
                "bindtextdomain",
                "fprintf",
                "FUN_00103240",
                "__errno_location",
                "memcpy",
                "memmove",
                "fclose",
                "bfd_check_format",
                "bfd_malloc_and_get_section",
                "fread",
                "FUN_001030c0",
                "fseek",
                "bfd_close",
                "strtoul",
                "strcmp",
                "FUN_00103910",
                "setlocale",
                "textdomain",
                "xmalloc",
                "printf",
                "bfd_get_error",
                "FUN_00104a60",
                "bfd_openr",
                "fopen",
                "bfd_init",
                "strlen",
                "ferror",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "bfd_errmsg",
                "perror",
                "xmalloc_set_program_name",
                "exit",
                "xexit",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103aa0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "extract_strings_00103aa0"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        }
    },
    "used_tokens": 40128,
    "layers": [
        [
            "FUN_00103910",
            "FUN_00103510",
            "FUN_00102b11",
            "FUN_0010293a",
            "FUN_00103520",
            "FUN_00103240",
            "FUN_00104a60",
            "FUN_0010282b",
            "FUN_0010286f",
            "FUN_001038b0",
            "FUN_0010290e",
            "FUN_00103890",
            "FUN_00103810",
            "FUN_001030c0",
            "FUN_0010259a",
            "FUN_001028b2",
            "FUN_00102330",
            "FUN_00102771",
            "FUN_001034fa",
            "FUN_00102853",
            "FUN_001027e2",
            "FUN_001034d5",
            "FUN_00103aa0",
            "FUN_00102020"
        ]
    ],
    "locked_functions": []
}