{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240",
                "FUN_0010293a",
                "FUN_001038b0",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00103910": {
            "renaming": {
                "FUN_00103910": "print_error_message_00103910",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "booleanCondition",
                "local_d8": "bufferSize",
                "local_d4": "localVarD4",
                "local_d0": "localVarD0",
                "local_c8": "localVarC8",
                "local_b8": "localArrayB8",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCodeCopy",
                "local_78": "param2Copy",
                "local_68": "param3Copy",
                "local_58": "param4Copy",
                "local_48": "param5Copy",
                "local_38": "param6Copy",
                "local_28": "param7Copy",
                "local_18": "param8Copy"
            },
            "code": "\nvoid print_error_message_00103910(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char booleanCondition;\n  undefined4 bufferSize;\n  undefined4 localVarD4;\n  undefined *localVarD0;\n  undefined *localVarC8;\n  undefined localArrayB8 [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCodeCopy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (booleanCondition != '\\0') {\n    errorCodeCopy = errorCode;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  localVarD0 = &stack0x00000008;\n  bufferSize = 8;\n  localVarC8 = localArrayB8;\n  localVarD4 = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_00103910_001038b0(errorMessage,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001038b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103910",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_error_message_00103910"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_00108340 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00108188);\n  FUNC_001039e0();\n  DAT_00108340 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_001039e0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a50",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00103510": {
            "renaming": {
                "FUN_00103510": "print_formatted_output_00103510",
                "uVar1": "tempValue1",
                "uVar2": "tempValue2",
                "uVar3": "tempValue3",
                "uVar4": "index",
                "unaff_R14": "outputBuffer",
                "unaff_R15": "extraInfo",
                "bVar5": "isConditionTrue",
                "in_stack_00000010": "inputString",
                "in_stack_00000038": "extraData",
                "code_r0x00103510": "printFormattedOutput",
                "joined_r0x0010341b": "continuePrint",
                "printf": "print",
                "fputs": "writeToString",
                "_stdout": "standardOutput",
                "_sch_istable": "charTable",
                "putc": "printCharacter",
                "free": "releaseMemory"
            },
            "code": "\n\n\nvoid printFormattedOutput_00103510(void)\n\n{\n  ulong tempValue1;\n  uint tempValue2;\n  ulong tempValue3;\n  ulong index;\n  char *outputBuffer;\n  undefined8 extraInfo;\n  bool isConditionTrue;\n  undefined8 inputString;\n  undefined8 extraData;\n  \nprintFormattedOutput_00103510:\n  index = 2;\ncontinuePrint:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",inputString);\n    }\n    if (DAT_00108372 == '\\0') {\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,standardOutput);\n    }\n    else {\n      FUN_0010286f(extraInfo);\n      outputBuffer[index] = '\\0';\n      fputs(outputBuffer,standardOutput);\n    }\n    while (index = read_bytes_from_file_00103520(), index != 0xffffffffffffffff) {\n      if (0xff < index) {\nLAB_0010348e:\n        calculate_modified_values_00103810();\n        break;\n      }\n      if (index == 9) {\nLAB_00102438:\n        putc((int)index,standardOutput);\n      }\n      else {\n        if ((*(ushort *)(&charTable + index * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&charTable + index * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)index,standardOutput);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standardOutput);\n    }\n    else {\n      fputs(DAT_00108358,standardOutput);\n    }\n    while (index = (ulong)DAT_00108374, extraInfo = extraData, DAT_00108374 != 0) {\n      index = read_bytes_from_file_00103520();\n      tempValue2 = DAT_00108374;\n      if (index == 0xffffffffffffffff) goto LAB_001034be;\n      if (index < 0x100) {\n        if (index == 9) {\nLAB_001023f5:\n          *outputBuffer = (char)index;\n          if (tempValue2 < 2) {\n            print_formatted_string_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&charTable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&charTable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *outputBuffer = (char)index;\n          if (tempValue2 < 2) {\n            index = 1;\n            break;\n          }\n        }\n        index = read_bytes_from_file_00103520();\n        tempValue2 = DAT_00108374;\n        if (index == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_001023bb:\n          outputBuffer[1] = (char)index;\n          if (tempValue2 < 3) {\n            printFormattedOutput_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&charTable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&charTable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          outputBuffer[1] = (char)index;\n          if (tempValue2 < 3) goto printFormattedOutput_00103510;\n        }\n        index = read_bytes_from_file_00103520();\n        tempValue2 = DAT_00108374;\n        if (index == 0xffffffffffffffff) {\nLAB_001034be:\n          free(outputBuffer);\n          return;\n        }\n        if (0xff < index) goto code_r0x001034d5;\n        if (index == 9) {\nLAB_00102381:\n          outputBuffer[2] = (char)index;\n        }\n        else {\n          if ((*(ushort *)(&charTable + index * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)index < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&charTable + index * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          outputBuffer[2] = (char)index;\n        }\n        if (3 < tempValue2) {\n          tempValue3 = 3;\n          do {\n            tempValue1 = read_bytes_from_file_00103520();\n            if (tempValue1 == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < tempValue1) goto code_r0x001034d5;\n            if (((tempValue1 != 9) && ((*(ushort *)(&charTable + tempValue1 * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)tempValue1 < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&charTable + tempValue1 * 2) & 0x40) == 0) {\n                process_data_001034d5();\n                return;\n              }\n            }\n            tempValue2 = (int)tempValue3 + 1;\n            index = (ulong)tempValue2;\n            isConditionTrue = DAT_00108374 <= tempValue2;\n            outputBuffer[tempValue3] = (char)tempValue1;\n            tempValue3 = index;\n            if (isConditionTrue) goto continuePrint;\n          } while( true );\n        }\n        index = 3;\n        break;\n      }\ncode_r0x001034d5:\n      calculate_modified_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103510",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_output_00103510"
        },
        "FUN_00102b11": {
            "renaming": {
                "FUN_00102b11": "decode_and_print_data_00102b11",
                "param_1": "input_buffer",
                "param_2": "input_buffer_offset",
                "param_3": "input_data",
                "param_4": "input_data_offset",
                "param_5": "input_data_length",
                "param_6": "output_buffer",
                "uVar1": "temp_var_1",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "iVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "temp_var_6",
                "uVar7": "temp_var_7",
                "uVar8": "temp_var_8",
                "uVar9": "temp_var_9",
                "uVar10": "temp_var_10",
                "local_80": "last_valid_index",
                "local_4c": "buffer_info",
                "local_40": "buffer_length",
                "local_3c": "byte_1",
                "local_3b": "byte_2",
                "local_3a": "byte_3",
                "local_39": "byte_4"
            },
            "code": "\n\n\nvoid decode_and_print_data_00102b11(undefined8 input_buffer,long input_buffer_offset,undefined8 input_data,long input_data_offset,uint input_data_length,\n                 long output_buffer)\n\n{\n  undefined temp_var_1;\n  uint temp_var_2;\n  uint temp_var_3;\n  int temp_var_4;\n  uint temp_var_5;\n  ulong temp_var_6;\n  undefined temp_var_7;\n  undefined temp_var_8;\n  uint temp_var_9;\n  undefined temp_var_10;\n  ulong last_valid_index;\n  uint buffer_info [3];\n  uint buffer_length;\n  byte byte_1;\n  byte byte_2;\n  byte byte_3;\n  byte byte_4;\n  \n  temp_var_9 = 0;\n  buffer_length = 0;\n  last_valid_index = 0;\n  temp_var_6 = 0;\n  buffer_info[0] = input_data_length;\n  temp_var_2 = 0;\n  while (temp_var_5 = (uint)temp_var_6, temp_var_9 < DAT_00108374) {\n    temp_var_2 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n    if (temp_var_2 == 0xffffffff) break;\n    if (temp_var_2 < 0x100) {\n      temp_var_10 = (undefined)temp_var_2;\n      if (temp_var_2 == 9) {\n        if (temp_var_9 == 0) {\n          last_valid_index = (ulong)(buffer_length - 1);\n        }\nLAB_00102c09:\n        temp_var_9 = temp_var_9 + 1;\n        *(undefined *)(output_buffer + temp_var_6) = temp_var_10;\n        temp_var_6 = (ulong)(temp_var_5 + 1);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp_var_2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)temp_var_2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp_var_2 * 2) & 0x40) == 0)) goto LAB_00102b96;\n            goto LAB_00102bf3;\n          }\n          if (temp_var_9 == 0) {\n            last_valid_index = (ulong)(buffer_length - 1);\n          }\n        }\n        else {\nLAB_00102bf3:\n          if (temp_var_9 == 0) {\n            last_valid_index = (ulong)(buffer_length - 1);\n          }\n          if ((int)temp_var_2 < 0x7f) goto LAB_00102c09;\n        }\n        if ((int)temp_var_2 < 0xc0) goto LAB_00102b96;\n        temp_var_3 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n        if (temp_var_3 == 0xffffffff) {\nLAB_00102dee:\n          temp_var_2 = 0xffffffff;\n          break;\n        }\n        temp_var_7 = (undefined)temp_var_3;\n        if ((temp_var_3 & 0xc0) == 0x80) {\n          if ((temp_var_2 & 0x20) == 0) {\n            if (DAT_00108350 == 5) goto LAB_00102c67;\n            temp_var_9 = temp_var_9 + 1;\n            *(undefined *)(output_buffer + temp_var_6) = temp_var_10;\n            *(undefined *)(output_buffer + (ulong)(temp_var_5 + 1)) = temp_var_7;\n            temp_var_6 = (ulong)(temp_var_5 + 2);\n            temp_var_2 = temp_var_3;\n          }\n          else {\n            temp_var_3 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n            if (temp_var_3 == 0xffffffff) goto LAB_00102dee;\n            temp_var_8 = (undefined)temp_var_3;\n            if ((temp_var_3 & 0xc0) == 0x80) {\n              if ((temp_var_2 & 0x10) == 0) {\n                if (DAT_00108350 == 5) goto LAB_00102ce5;\n                temp_var_9 = temp_var_9 + 1;\n                *(undefined *)(output_buffer + temp_var_6) = temp_var_10;\n                temp_var_6 = (ulong)(temp_var_5 + 3);\n                *(undefined *)(output_buffer + (ulong)(temp_var_5 + 1)) = temp_var_7;\n                *(undefined *)(output_buffer + (ulong)(temp_var_5 + 2)) = temp_var_8;\n                temp_var_2 = temp_var_3;\n              }\n              else {\n                temp_var_2 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n                if (temp_var_2 == 0xffffffff) goto LAB_00102dee;\n                temp_var_1 = (undefined)temp_var_2;\n                if ((temp_var_2 & 0xc0) == 0x80) {\n                  if (DAT_00108350 == 5) {\n                    *(undefined *)(input_data_offset + (ulong)buffer_info[0]) = temp_var_1;\n                    *(undefined *)(input_data_offset + (ulong)(buffer_info[0] + 1)) = temp_var_7;\n                    *(undefined *)(input_data_offset + (ulong)(buffer_info[0] + 2)) = temp_var_8;\n                    goto LAB_00102db9;\n                  }\n                  temp_var_9 = temp_var_9 + 1;\n                  *(undefined *)(output_buffer + temp_var_6) = temp_var_10;\n                  *(undefined *)(output_buffer + (ulong)(temp_var_5 + 1)) = temp_var_7;\n                  temp_var_6 = (ulong)(temp_var_5 + 4);\n                  *(undefined *)(output_buffer + (ulong)(temp_var_5 + 2)) = temp_var_8;\n                  *(undefined *)(output_buffer + (ulong)(temp_var_5 + 3)) = temp_var_1;\n                }\n                else {\n                  *(undefined *)(input_data_offset + (ulong)buffer_info[0]) = temp_var_1;\n                  *(undefined *)(input_data_offset + (ulong)(buffer_info[0] + 1)) = temp_var_8;\n                  *(undefined *)(input_data_offset + (ulong)(buffer_info[0] + 2)) = temp_var_7;\nLAB_00102db9:\n                  buffer_info[0] = buffer_info[0] + 3;\n                  temp_var_6 = 0;\n                  temp_var_9 = 0;\n                }\n              }\n            }\n            else {\nLAB_00102ce5:\n              temp_var_6 = 0;\n              temp_var_9 = 0;\n              *(undefined *)(input_data_offset + (ulong)buffer_info[0]) = temp_var_8;\n              *(undefined *)(input_data_offset + (ulong)(buffer_info[0] + 1)) = temp_var_7;\n              buffer_info[0] = buffer_info[0] + 2;\n              temp_var_2 = temp_var_3;\n            }\n          }\n        }\n        else {\nLAB_00102c67:\n          temp_var_9 = 0;\n          *(undefined *)(input_data_offset + (ulong)buffer_info[0]) = temp_var_7;\n          temp_var_6 = 0;\n          buffer_info[0] = buffer_info[0] + 1;\n          temp_var_2 = temp_var_3;\n        }\n      }\n    }\n    else {\nLAB_00102b96:\n      temp_var_9 = 0;\n      temp_var_6 = 0;\n    }\n  }\n  if (temp_var_9 < DAT_00108374) {\n    if (temp_var_2 != 0xffffffff) {\nLAB_0010308d:\n      decode_and_print_data_00102b11(input_buffer,(ulong)buffer_length + input_buffer_offset,input_data,input_data_offset,buffer_info[0],output_buffer);\n    }\n  }\n  else {\n    temp_var_2 = 0;\n    print_if_enabled_00103890(input_buffer,last_valid_index + input_buffer_offset);\n    while (temp_var_2 < temp_var_5) {\n      temp_var_6 = (ulong)temp_var_2;\n      if (*(byte *)(temp_var_6 + output_buffer) < 0x7f) {\n        temp_var_2 = temp_var_2 + 1;\n        putc((uint)*(byte *)(temp_var_6 + output_buffer),_stdout);\n      }\n      else {\n        temp_var_4 = display_unicode_0010293a();\n        temp_var_2 = temp_var_2 + temp_var_4;\n      }\n    }\n    while( true ) {\n      temp_var_2 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n      if (temp_var_2 == 0xffffffff) break;\n      if (0xff < temp_var_2) {\nLAB_00103049:\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n        goto LAB_0010308d;\n      }\n      if (temp_var_2 == 9) {\nLAB_00102ed4:\n        putc(temp_var_2,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + (long)(int)temp_var_2 * 2) & 0x10) == 0) {\n          if ((DAT_00108360 != 'S') || ((int)temp_var_2 < 0x80)) {\n            if ((DAT_00108373 == '\\0') ||\n               ((*(ushort *)(&_sch_istable + (long)(int)temp_var_2 * 2) & 0x40) == 0)) goto LAB_00103049;\n            goto LAB_00102ecf;\n          }\n        }\n        else {\nLAB_00102ecf:\n          if ((int)temp_var_2 < 0x7f) goto LAB_00102ed4;\n        }\n        if ((int)temp_var_2 < 0xc0) goto LAB_00103049;\n        byte_1 = (byte)temp_var_2;\n        temp_var_4 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n        if (temp_var_4 == -1) break;\n        byte_2 = (byte)temp_var_4;\n        if ((byte_2 & 0xc0) != 0x80) {\nLAB_00102f32:\n          temp_var_6 = (ulong)buffer_info[0];\n          buffer_info[0] = buffer_info[0] + 1;\n          *(byte *)(input_data_offset + temp_var_6) = byte_2;\njoined_r0x00102f51:\n          if (DAT_00108358 == (char *)0x0) {\n            putc(10,_stdout);\n          }\n          else {\n            fputs(DAT_00108358,_stdout);\n          }\n          goto LAB_0010308d;\n        }\n        if ((byte_1 & 0x20) == 0) {\n          if (DAT_00108350 != 5) goto LAB_0010300e;\n          goto LAB_00102f32;\n        }\n        temp_var_4 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n        if (temp_var_4 == -1) break;\n        byte_3 = (byte)temp_var_4;\n        if ((byte_3 & 0xc0) != 0x80) {\nLAB_00102f94:\n          *(byte *)(input_data_offset + (ulong)buffer_info[0]) = byte_3;\n          temp_var_2 = buffer_info[0] + 1;\n          buffer_info[0] = buffer_info[0] + 2;\nLAB_00102ff2:\n          *(byte *)(input_data_offset + (ulong)temp_var_2) = byte_2;\n          goto joined_r0x00102f51;\n        }\n        if ((byte_1 & 0x10) != 0) {\n          temp_var_4 = read_byte_from_buffer_0010290e(input_data,input_data_offset,buffer_info,&buffer_length);\n          if (temp_var_4 != -1) {\n            byte_4 = (byte)temp_var_4;\n            if (((byte_4 & 0xc0) == 0x80) && (DAT_00108350 != 5)) goto LAB_0010300e;\n            *(byte *)(input_data_offset + (ulong)buffer_info[0]) = byte_4;\n            *(byte *)(input_data_offset + (ulong)(buffer_info[0] + 1)) = byte_3;\n            temp_var_2 = buffer_info[0] + 2;\n            buffer_info[0] = buffer_info[0] + 3;\n            goto LAB_00102ff2;\n          }\n          break;\n        }\n        if (DAT_00108350 == 5) goto LAB_00102f94;\nLAB_0010300e:\n        display_unicode_0010293a(&byte_1);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010290e",
                "FUN_00102b11",
                "fputs",
                "FUN_0010293a",
                "FUN_00103890",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102b11",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "decode_and_print_data_00102b11"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_0010293a"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00103a10();\n  return;\n}\n\n",
            "called": [
                "FUN_00103a10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a90",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_0010293a": {
            "renaming": {
                "FUN_0010293a": "display_unicode_0010293a",
                "param_1": "inputData",
                "bVar1": "firstNibble",
                "uVar2": "secondByte",
                "iVar3": "isTTY",
                "uVar4": "outputSize",
                "uVar5": "firstByte",
                "pbVar6": "nextByte"
            },
            "code": "\n\n\nuint displayUnicode_0010293a(byte *inputData)\n\n{\n  byte firstNibble;\n  uint secondByte;\n  int isTTY;\n  uint outputSize;\n  uint firstByte;\n  byte *nextByte;\n  \n  outputSize = 2;\n  firstNibble = *inputData & 0x30;\n  if ((firstNibble != 0x10) && (outputSize = 3, firstNibble != 0x20)) {\n    outputSize = (-(uint)(firstNibble == 0) & 0xfffffffe) + 4;\n  }\n  if (DAT_00108350 == 3) {\n    nextByte = inputData + outputSize;\n    putc(0x3c,_stdout);\n    printf(\"0x\");\n    do {\n      firstNibble = *inputData;\n      inputData = inputData + 1;\n      printf(\"%02x\",(ulong)firstNibble);\n    } while (nextByte != inputData);\n    putc(0x3e,_stdout);\n    return outputSize;\n  }\n  if (DAT_00108350 < 4) {\n    if (DAT_00108350 == 1) {\n      printf(\"%.1s\",inputData);\n      return outputSize;\n    }\n    if (DAT_00108350 == 2) {\nLAB_001029cd:\n      secondByte = (uint)inputData[1];\n      firstByte = (uint)*inputData;\n      if (outputSize == 3) {\n        printf(\"\\u%02x%02x\",(ulong)((firstByte & 0xf) << 4 | (int)secondByte >> 2 & 0xfU),\n               (ulong)((secondByte & 3) << 6 | inputData[2] & 0x3f));\n      }\n      else if (outputSize == 4) {\n        printf(\"\\u%02x%02x%02x\",(ulong)((firstByte & 7) << 6 | (int)secondByte >> 2 & 0xfU),\n               (ulong)((secondByte & 3) << 6 | (int)(uint)inputData[2] >> 2 & 0xfU),\n               (ulong)((inputData[2] & 3) << 6 | inputData[3] & 0x3f));\n      }\n      else {\n        printf(\"\\u%02x%02x\",(ulong)((int)(uint)*inputData >> 2 & 7),\n               (ulong)((firstByte & 3) << 6 | inputData[1] & 0x3f));\n      }\n      if (DAT_00108350 != 4) {\n        return outputSize;\n      }\n      isTTY = isatty(1);\n      if (isTTY == 0) {\n        return outputSize;\n      }\n      printf(\"\\x1b[0m\");\n      return outputSize;\n    }\n  }\n  else if (DAT_00108350 == 4) {\n    isTTY = isatty(1);\n    if (isTTY != 0) {\n      printf(\"\\x1b[31;47m\");\n    }\n    goto LAB_001029cd;\n  }\n  fwrite(\"ICE: unexpected unicode display type\\n\",1,0x25,_stderr);\n  return outputSize;\n}\n\n",
            "called": [
                "printf",
                "isatty",
                "fwrite",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010293a",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "display_unicode_0010293a"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103240",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001038b0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103520": {
            "renaming": {
                "FUN_00103520": "read_bytes_from_file_00103520",
                "param_1": "file_ptr",
                "param_2": "byte_counter",
                "param_3": "byte_limit",
                "param_4": "buffer",
                "bVar1": "byte_value",
                "pbVar2": "byte_ptr",
                "uVar3": "uflow_result",
                "uVar4": "read_byte",
                "uVar5": "result",
                "iVar6": "remaining_bytes",
                "iVar7": "bytes_to_read"
            },
            "code": "\nulong read_bytes_from_file_00103520(_IO_FILE *file_ptr,long *byte_counter,int *byte_limit,byte **buffer)\n\n{\n  byte byte_value;\n  byte *byte_ptr;\n  uint uflow_result;\n  ulong read_byte;\n  ulong result;\n  int remaining_bytes;\n  int bytes_to_read;\n  \n  bytes_to_read = DAT_0010834c;\n  if (DAT_0010834c < 1) {\n    result = 0;\n    if (DAT_00108360 == 'L') {\n      result = extract_bits_from_rbx_00102771();\n      return result;\n    }\n    goto LAB_0010361f;\n  }\n  if (file_ptr == (_IO_FILE *)0x0) {\n    result = 0;\n    remaining_bytes = 0;\n    do {\n      if (*byte_limit == 0) {\n        return 0xffffffffffffffff;\n      }\n      remaining_bytes = remaining_bytes + 1;\n      *byte_limit = *byte_limit + -1;\n      byte_ptr = *buffer;\n      *buffer = byte_ptr + 1;\n      byte_value = *byte_ptr;\n      *byte_counter = *byte_counter + 1;\n      result = result << 8 | (ulong)byte_value;\n    } while (remaining_bytes != bytes_to_read);\n  }\n  else if (*byte_limit == 0) {\n    byte_ptr = (byte *)file_ptr->_IO_read_ptr;\n    if (file_ptr->_IO_read_end <= byte_ptr) {\n      uflow_result = __uflow(file_ptr);\n      result = (ulong)(uflow_result & 0xff);\n      if (uflow_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      goto LAB_001036aa;\n    }\n    file_ptr->_IO_read_ptr = (char *)(byte_ptr + 1);\n    result = (ulong)*byte_ptr;\n    *byte_counter = *byte_counter + 1;\n    remaining_bytes = 0;\n    if (bytes_to_read == 1) goto LAB_00103610;\nLAB_00103574:\n    byte_ptr = (byte *)file_ptr->_IO_read_ptr;\n    if (byte_ptr < file_ptr->_IO_read_end) {\n      file_ptr->_IO_read_ptr = (char *)(byte_ptr + 1);\n      byte_value = *byte_ptr;\n      *byte_counter = *byte_counter + 1;\n      result = result << 8 | (ulong)byte_value;\n      if (DAT_0010834c < 3) goto LAB_00103610;\nLAB_001035a1:\n      byte_ptr = (byte *)file_ptr->_IO_read_ptr;\n      if (byte_ptr < file_ptr->_IO_read_end) {\n        file_ptr->_IO_read_ptr = (char *)(byte_ptr + 1);\n        byte_value = *byte_ptr;\n        *byte_counter = *byte_counter + 1;\n        result = result << 8 | (ulong)byte_value;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n      }\n      else {\n        uflow_result = __uflow(file_ptr);\n        if (uflow_result == 0xffffffff) {\n          return 0xffffffffffffffff;\n        }\n        read_byte = (ulong)(uflow_result & 0xff);\nLAB_00103717:\n        *byte_counter = *byte_counter + 1;\n        result = result << 8 | read_byte;\n        if (DAT_0010834c < 4) goto LAB_00103610;\n        remaining_bytes = *byte_limit;\n      }\n      bytes_to_read = 3;\n      while( true ) {\n        if (remaining_bytes == 0) {\n          while (byte_ptr = (byte *)file_ptr->_IO_read_ptr, byte_ptr < file_ptr->_IO_read_end) {\n            bytes_to_read = bytes_to_read + 1;\n            file_ptr->_IO_read_ptr = (char *)(byte_ptr + 1);\n            byte_value = *byte_ptr;\n            *byte_counter = *byte_counter + 1;\n            result = result << 8 | (ulong)byte_value;\n            if (DAT_0010834c <= bytes_to_read) goto LAB_00103610;\n          }\n          uflow_result = __uflow(file_ptr);\n          if (uflow_result == 0xffffffff) {\n            return 0xffffffffffffffff;\n          }\n          read_byte = (ulong)(uflow_result & 0xff);\n        }\n        else {\n          byte_ptr = *buffer;\n          *byte_limit = remaining_bytes + -1;\n          *buffer = byte_ptr + 1;\n          read_byte = (ulong)*byte_ptr;\n        }\n        *byte_counter = *byte_counter + 1;\n        bytes_to_read = bytes_to_read + 1;\n        result = result << 8 | read_byte;\n        if (DAT_0010834c <= bytes_to_read) break;\n        remaining_bytes = *byte_limit;\n      }\n    }\n    else {\n      uflow_result = __uflow(file_ptr);\n      if (uflow_result == 0xffffffff) {\n        return 0xffffffffffffffff;\n      }\n      read_byte = (ulong)(uflow_result & 0xff);\nLAB_001036dd:\n      *byte_counter = *byte_counter + 1;\n      result = result << 8 | read_byte;\n      if (2 < DAT_0010834c) {\n        remaining_bytes = *byte_limit;\n        if (remaining_bytes == 0) goto LAB_001035a1;\n        byte_ptr = *buffer;\n        *byte_limit = remaining_bytes + -1;\n        *buffer = byte_ptr + 1;\n        read_byte = (ulong)*byte_ptr;\n        goto LAB_00103717;\n      }\n    }\n  }\n  else {\n    byte_ptr = *buffer;\n    *byte_limit = *byte_limit + -1;\n    *buffer = byte_ptr + 1;\n    result = (ulong)*byte_ptr;\nLAB_001036aa:\n    *byte_counter = *byte_counter + 1;\n    if (1 < DAT_0010834c) {\n      remaining_bytes = *byte_limit;\n      if (remaining_bytes == 0) goto LAB_00103574;\n      byte_ptr = *buffer;\n      *byte_limit = remaining_bytes + -1;\n      *buffer = byte_ptr + 1;\n      read_byte = (ulong)*byte_ptr;\n      goto LAB_001036dd;\n    }\n  }\nLAB_00103610:\n  if (DAT_00108360 == 'L') {\n    result = extract_bits_from_rbx_00102771();\n    return result;\n  }\nLAB_0010361f:\n  if (DAT_00108360 == 'l') {\n    result = result >> 8 & 0xff | (result & 0xff) << 8;\n  }\n  return result;\n}\n\n",
            "called": [
                "__uflow",
                "FUN_00102771"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103520",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "read_bytes_from_file_00103520"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103240": {
            "renaming": {
                "FUN_00103240": "process_print_output_00103240",
                "param_1": "message",
                "param_2": "filePointer",
                "param_3": "bufferSize",
                "param_4": "printType",
                "param_5": "inputBuffer",
                "pbVar1": "bytePointer",
                "bVar2": "byteValue",
                "cVar3": "charValue",
                "lVar4": "longValue",
                "uVar5": "unsignedValue",
                "iVar6": "intValue",
                "__ptr": "pointer",
                "__s": "string",
                "uVar7": "unsignedValue1",
                "uVar8": "unsignedValue2",
                "uVar9": "unsignedValue3",
                "uVar10": "unsignedValue4",
                "uVar11": "unsignedValue5",
                "bVar12": "boolValue",
                "local_80": "localVariable1",
                "local_60": "localBytePointer",
                "local_54": "localIntValue",
                "local_50": "localLongArray",
                "local_3d": "localUndefinedArray"
            },
            "code": "\n\n\nvoid processPrintOutput_00103240(long message,long filePointer,long bufferSize,int printType,byte *inputBuffer)\n\n{\n  byte *bytePointer;\n  byte byteValue;\n  char charValue;\n  long longValue;\n  uint unsignedValue;\n  int intValue;\n  void *pointer;\n  char *string;\n  ulong unsignedValue1;\n  ulong unsignedValue2;\n  uint unsignedValue3;\n  ulong unsignedValue4;\n  uint unsignedValue5;\n  bool boolValue;\n  long localVariable1;\n  byte *localBytePointer;\n  int localIntValue;\n  long localLongArray [2];\n  undefined localUndefinedArray [13];\n  \n  localBytePointer = inputBuffer;\n  localIntValue = printType;\n  localLongArray[0] = bufferSize;\n  if (DAT_00108350 == 0) {\n    string = (char *)xmalloc(DAT_00108374 + 1);\n    do {\n      while (longValue = localLongArray[0], unsignedValue2 = (ulong)DAT_00108374, DAT_00108374 == 0) {\njoined_r0x001034ef:\n        if (DAT_00108371 != '\\0') {\n          printf(\"%s: \",message);\n        }\n        if (DAT_00108372 == '\\0') {\n          string[unsignedValue2] = '\\0';\n          fputs(string,_stdout);\n        }\n        else {\n          print_formatted_number_0010286f(longValue);\n          string[unsignedValue2] = '\\0';\n          fputs(string,_stdout);\n        }\n        while (unsignedValue2 = read_bytes_from_file_00103520(filePointer,localLongArray,&localIntValue,&localBytePointer),\n              unsignedValue2 != 0xffffffffffffffff) {\n          if (0xff < unsignedValue2) {\nLAB_0010348e:\n            calculate_modified_values_00103810(unsignedValue2,localLongArray,&localIntValue,&localBytePointer);\n            break;\n          }\n          if (unsignedValue2 == 9) {\nLAB_00102438:\n            putc((int)unsignedValue2,_stdout);\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + unsignedValue2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)unsignedValue2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + unsignedValue2 * 2) & 0x40) == 0))))\n              goto LAB_0010348e;\n              goto LAB_00102438;\n            }\n            putc((int)unsignedValue2,_stdout);\n          }\n        }\n        if (DAT_00108358 == (char *)0x0) {\n          putc(10,_stdout);\n        }\n        else {\n          fputs(DAT_00108358,_stdout);\n        }\n      }\n      unsignedValue1 = read_bytes_from_file_00103520(filePointer,localLongArray,&localIntValue,&localBytePointer);\n      unsignedValue3 = DAT_00108374;\n      if (unsignedValue1 == 0xffffffffffffffff) goto LAB_001034be;\n      if (unsignedValue1 < 0x100) {\n        if (unsignedValue1 == 9) {\nLAB_001023f5:\n          *string = (char)unsignedValue1;\n          if (unsignedValue3 < 2) {\n            print_formatted_string_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)unsignedValue1 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *string = (char)unsignedValue1;\n          if (unsignedValue3 < 2) {\n            unsignedValue2 = 1;\n            goto joined_r0x001034ef;\n          }\n        }\n        unsignedValue1 = read_bytes_from_file_00103520(filePointer,localLongArray,&localIntValue,&localBytePointer);\n        unsignedValue3 = DAT_00108374;\n        if (unsignedValue1 == 0xffffffffffffffff) goto LAB_001034be;\n        if (unsignedValue1 < 0x100) {\n          if (unsignedValue1 == 9) {\nLAB_001023bb:\n            string[1] = (char)unsignedValue1;\n            if (unsignedValue3 < 3) {\n              print_formatted_output_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)unsignedValue1 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            string[1] = (char)unsignedValue1;\n            if (unsignedValue3 < 3) {\n              unsignedValue2 = 2;\n              goto joined_r0x001034ef;\n            }\n          }\n          unsignedValue1 = read_bytes_from_file_00103520(filePointer,localLongArray,&localIntValue,&localBytePointer);\n          unsignedValue3 = DAT_00108374;\n          if (unsignedValue1 == 0xffffffffffffffff) {\nLAB_001034be:\n            free(string);\n            return;\n          }\n          if (unsignedValue1 < 0x100) {\n            if (unsignedValue1 == 9) {\nLAB_00102381:\n              string[2] = (char)unsignedValue1;\n            }\n            else {\n              if ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x10) == 0) {\n                if (((DAT_00108360 != 'S') || ((long)unsignedValue1 < 0x80)) &&\n                   ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x40) == 0))\n                   )) goto code_r0x001034d5;\n                goto LAB_00102381;\n              }\n              string[2] = (char)unsignedValue1;\n            }\n            if (unsignedValue3 < 4) {\n              unsignedValue2 = 3;\n            }\n            else {\n              unsignedValue4 = 3;\n              do {\n                unsignedValue1 = read_bytes_from_file_00103520(filePointer,localLongArray,&localIntValue,&localBytePointer);\n                if (unsignedValue1 == 0xffffffffffffffff) goto LAB_001034be;\n                if (0xff < unsignedValue1) goto code_r0x001034d5;\n                if (((unsignedValue1 != 9) && ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x10) == 0)) &&\n                   ((DAT_00108360 != 'S' || ((long)unsignedValue1 < 0x80)))) {\n                  if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                  if ((*(ushort *)(&_sch_istable + unsignedValue1 * 2) & 0x40) == 0) {\n                    process_data_001034d5();\n                    return;\n                  }\n                }\n                unsignedValue3 = (int)unsignedValue4 + 1;\n                unsignedValue2 = (ulong)unsignedValue3;\n                boolValue = unsignedValue3 < DAT_00108374;\n                string[unsignedValue4] = (char)unsignedValue1;\n                unsignedValue4 = unsignedValue2;\n              } while (boolValue);\n            }\n            goto joined_r0x001034ef;\n          }\n        }\n      }\ncode_r0x001034d5:\n      calculate_modified_values_00103810(unsignedValue1,localLongArray,&localIntValue,&localBytePointer);\n    } while( true );\n  }\n  if (inputBuffer != (byte *)0x0) {\n    unsignedValue2 = (ulong)printType;\n    localVariable1 = bufferSize;\n    if (message != 0) {\nLAB_0010249c:\n      unsignedValue3 = DAT_00108374;\n      charValue = DAT_00108373;\n      intValue = DAT_00108350;\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        if (unsignedValue2 != 0) {\n          unsignedValue1 = 0;\n          unsignedValue5 = 0;\n          unsignedValue4 = 0;\n          do {\n            while( true ) {\n              byteValue = inputBuffer[unsignedValue4];\n              if (byteValue != 9) break;\nLAB_0010252e:\n              unsignedValue = 1;\nLAB_00102533:\n              if (unsignedValue5 == 0) {\n                unsignedValue1 = unsignedValue4;\n              }\n              unsignedValue5 = unsignedValue5 + 1;\n              if (unsignedValue3 <= unsignedValue5) goto LAB_001026a9;\n              unsignedValue4 = unsignedValue4 + unsignedValue;\n              if (unsignedValue2 <= unsignedValue4) goto LAB_00102551;\n            }\n            if ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteValue * 2) & 0x10) != 0) {\n              if (0x7e < byteValue) goto LAB_0010264e;\n              goto LAB_0010252e;\n            }\n            if (0x7f < byteValue) {\nLAB_0010264e:\n              if ((byteValue < 0xc0) ||\n                 (unsignedValue = check_byte_sequence_001028b2(inputBuffer + unsignedValue4,unsignedValue2 - unsignedValue4), unsignedValue == 0))\n              goto LAB_0010269a;\n              if (intValue == 5) goto LAB_00102688;\n              goto LAB_00102533;\n            }\n            if (((charValue != '\\0') &&\n                ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteValue * 2) & 0x40) != 0)) &&\n               (byteValue != 0x7f)) goto LAB_0010252e;\nLAB_0010269a:\n            unsignedValue = 1;\nLAB_00102688:\n            unsignedValue4 = unsignedValue4 + unsignedValue;\n            if (unsignedValue2 <= unsignedValue4) goto LAB_001026a1;\n            unsignedValue5 = 0;\n          } while( true );\n        }\n        goto LAB_00102551;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_buffer\\n\",1,0x2b,_stderr);\n  }\n  if (filePointer != 0) {\n    if (message != 0) {\nLAB_0010255f:\n      longValue = localLongArray[0];\n      if (((DAT_00108350 != 0) && (DAT_00108360 == 'S')) && (DAT_0010834c == 1)) {\n        pointer = (void *)xmalloc(DAT_00108374 * 4 + 1);\n        decode_and_print_data_00102b11(message,longValue,filePointer,localUndefinedArray,0,pointer);\n        free(pointer);\n        return;\n      }\n    }\n    fwrite(\"ICE: bad arguments to print_unicode_stream\\n\",1,0x2b,_stderr);\n  }\n  return;\nLAB_001026a1:\n  if (unsignedValue3 != 0) {\nLAB_00102551:\n    if (filePointer == 0) {\n      return;\n    }\n    goto LAB_0010255f;\n  }\nLAB_001026a9:\n  print_if_enabled_00103890(message,localVariable1 + unsignedValue1);\n  for (; bytePointer = inputBuffer + unsignedValue1, unsignedValue1 < unsignedValue2; unsignedValue1 = unsignedValue1 + unsignedValue3) {\n    byteValue = *bytePointer;\n    if (byteValue == 9) {\nLAB_00102708:\n      putc((uint)byteValue,_stdout);\n      unsignedValue3 = 1;\n    }\n    else {\n      if ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteValue * 2) & 0x10) == 0) {\n        if ((DAT_00108360 != 'S') || (byteValue < 0x80)) {\n          if ((DAT_00108373 != '\\0') &&\n             ((*(ushort *)(&_sch_istable + (long)(int)(uint)byteValue * 2) & 0x40) != 0))\n          goto LAB_00102703;\n          break;\n        }\n      }\n      else {\nLAB_00102703:\n        if (byteValue < 0x7f) goto LAB_00102708;\n      }\n      intValue = check_byte_sequence_001028b2(bytePointer,unsignedValue2 - unsignedValue1);\n      if ((intValue == 0) || (DAT_00108350 == 5)) break;\n      unsignedValue3 = display_unicode_0010293a(bytePointer);\n    }\n  }\n  if (DAT_00108358 == (char *)0x0) {\n    putc(10,_stdout);\n  }\n  else {\n    fputs(DAT_00108358,_stdout);\n  }\n  localVariable1 = localVariable1 + unsignedValue1;\n  unsignedValue2 = unsignedValue2 - unsignedValue1;\n  inputBuffer = bytePointer;\n  goto LAB_0010249c;\n}\n\n",
            "called": [
                "FUN_00102b11",
                "FUN_001028b2",
                "fputs",
                "xmalloc",
                "FUN_0010293a",
                "FUN_00103890",
                "fwrite",
                "free",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "process_print_output_00103240"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00104a60": {
            "renaming": {
                "FUN_00104a60": "handle_error_00104a60",
                "param_1": "error_code",
                "param_10": "data_1",
                "param_11": "data_2",
                "param_12": "data_3",
                "param_13": "data_4",
                "param_14": "data_5",
                "in_AL": "flag",
                "local_d8": "length",
                "local_d4": "offset",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "buffer",
                "local_b0": "param_10",
                "local_a8": "param_11",
                "local_a0": "param_12",
                "local_98": "param_13",
                "local_90": "param_14",
                "local_88": "local_var1",
                "local_78": "local_var2",
                "local_68": "local_var3",
                "local_58": "local_var4",
                "local_48": "local_var5",
                "local_38": "local_var6",
                "local_28": "local_var7",
                "local_18": "local_var8"
            },
            "code": "\n\n\nvoid handle_error_00104a60(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 data_1,undefined8 data_2,undefined8 data_3,\n                 undefined8 data_4,undefined8 data_5)\n\n{\n  char flag;\n  undefined4 length;\n  undefined4 offset;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined buffer [8];\n  undefined8 param_10;\n  undefined8 param_11;\n  undefined8 param_12;\n  undefined8 param_13;\n  undefined8 param_14;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  undefined4 local_var7;\n  undefined4 local_var8;\n  \n  if (flag != '\\0') {\n    local_var1 = error_code;\n    local_var2 = param_2;\n    local_var3 = param_3;\n    local_var4 = param_4;\n    local_var5 = param_5;\n    local_var6 = param_6;\n    local_var7 = param_7;\n    local_var8 = param_8;\n  }\n  pointer1 = &stack0x00000008;\n  length = 8;\n  pointer2 = buffer;\n  offset = 0x30;\n  param_10 = data_1;\n  param_11 = data_2;\n  param_12 = data_3;\n  param_13 = data_4;\n  param_14 = data_5;\n  print_error_message_001038b0(param_9,&length);\n  xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n  halt_baddata();\n}\n\n",
            "called": [
                "FUN_001038b0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a60",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "handle_error_00104a60"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104af4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00103a10": {
            "renaming": {
                "FUN_00103a10": "FUNC_00103a10"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00103a34) */\n/* WARNING: Removing unreachable block (ram,0x00103a40) */\n\nvoid FUNC_00103a10(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103a10",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00103a10"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_0010282b": {
            "renaming": {
                "FUN_0010282b": "initialize_data_0010282b",
                "in_RAX": "pointerToData",
                "in_RCX": "pointerToDestination",
                "unaff_RBX": "sourceValue"
            },
            "code": "\nvoid initializeData_0010282b(void)\n\n{\n  undefined4 *pointerToData;\n  undefined8 *pointerToDestination;\n  undefined8 sourceValue;\n  \n  DAT_00108348 = (undefined)((ulong)sourceValue >> 8);\n  DAT_0010834a = (undefined)((ulong)sourceValue >> 0x18);\n  DAT_00108349 = (undefined)((ulong)sourceValue >> 0x10);\n  *pointerToData = 3;\n  *pointerToDestination = &DAT_00108348;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010282b",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "initialize_data_0010282b"
        },
        "FUN_0010286f": {
            "renaming": {
                "FUN_0010286f": "print_formatted_number_0010286f",
                "param_1": "number",
                "printf": "print"
            },
            "code": "\nvoid printFormattedNumber_0010286f(undefined8 number)\n\n{\n  if (DAT_00108354 == 10) {\n    printf(\"%7ld \",number);\n    return;\n  }\n  if (DAT_00108354 != 0x10) {\n    if (DAT_00108354 == 8) {\n      printf(\"%7lo \",number);\n      return;\n    }\n    return;\n  }\n  printf(\"%7lx \",number);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010286f",
            "calling": [
                "FUN_00102853",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_number_0010286f"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(improved_string_processing_00103aa0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00103aa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001039b0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_001038b0": {
            "renaming": {
                "FUN_001038b0": "print_error_message_001038b0",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001038b0(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00108378);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fprintf",
                "fflush",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001038b0",
            "calling": [
                "FUN_00104a60",
                "FUN_00103910"
            ],
            "imported": false,
            "current_name": "print_error_message_001038b0"
        },
        "FUN_0010290e": {
            "renaming": {
                "FUN_0010290e": "read_byte_from_buffer_0010290e",
                "param_1": "file",
                "param_2": "position",
                "param_3": "remainingBytes",
                "param_4": "readCount",
                "pbVar1": "bufferPtr",
                "uVar2": "result"
            },
            "code": "\nuint readByteFromBuffer_0010290e(_IO_FILE *file,long position,uint *remainingBytes,int *readCount)\n\n{\n  byte *bufferPtr;\n  uint result;\n  \n  if (*remainingBytes != 0) {\n    result = *remainingBytes - 1;\n    *remainingBytes = result;\n    return (uint)*(byte *)(position + (ulong)result);\n  }\n  *readCount = *readCount + 1;\n  bufferPtr = (byte *)file->_IO_read_ptr;\n  if (file->_IO_read_end <= bufferPtr) {\n    result = __uflow(file);\n    return result;\n  }\n  file->_IO_read_ptr = (char *)(bufferPtr + 1);\n  return (uint)*bufferPtr;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010290e",
            "calling": [
                "FUN_00102b11"
            ],
            "imported": false,
            "current_name": "read_byte_from_buffer_0010290e"
        },
        "FUN_00103890": {
            "renaming": {
                "FUN_00103890": "print_if_enabled_00103890",
                "param_1": "message",
                "param_2": "number",
                "print_formatted_number_0010286f": "print_formatted_number"
            },
            "code": "\nvoid print_if_enabled_00103890(undefined8 message,undefined8 number)\n\n{\n  if (DAT_00108371 != '\\0') {\n    printf(\"%s: \",message);\n  }\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_formatted_number(number);\n  return;\n}\n\n",
            "called": [
                "FUN_00102853"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103890",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "print_if_enabled_00103890"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103810": {
            "renaming": {
                "FUN_00103810": "calculate_modified_values_00103810",
                "param_1": "function_param",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "iVar1": "newValue1",
                "lVar2": "newValue2",
                "iVar3": "newValue3"
            },
            "code": "\n\n\nvoid calculate_modified_values_00103810(undefined8 function_param,long *value1,int *value2,long *value3)\n\n{\n  int newValue1;\n  long newValue2;\n  int newValue3;\n  \n  newValue2 = (long)DAT_0010834c;\n  if (DAT_0010834c < 2) {\n    return;\n  }\n  newValue3 = DAT_0010834c + -1;\n  *value1 = *value1 - (long)newValue3;\n  newValue1 = *value2;\n  if (newValue1 == 0) {\n    if (DAT_00108360 != 'l') {\n      if (DAT_00108360 < 'm') {\n        if (DAT_00108360 == 'b') {\n          DAT_00108348 = (undefined)function_param;\n          *value2 = 1;\n        }\n        else if (DAT_00108360 < 'c') {\n          if (DAT_00108360 == 'B') {\n            _DAT_00108349 = (ushort)function_param << 8 | (ushort)function_param >> 8;\n            DAT_00108348 = (undefined)((ulong)function_param >> 0x10);\n            *value2 = 3;\n          }\n          else if (DAT_00108360 == 'L') {\n            initialize_data_0010282b();\n            return;\n          }\n        }\n      }\n      *value3 = (long)&DAT_00108348;\n      return;\n    }\n    DAT_00108348 = (undefined)((ulong)function_param >> 8);\n    *value2 = 1;\n    *value3 = (long)&DAT_00108348;\n  }\n  else {\n    *value3 = *value3 + (1 - newValue2);\n    *value2 = newValue3 + newValue1;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_001027e2",
                "FUN_0010282b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103810",
            "calling": [
                "FUN_001034d5",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "calculate_modified_values_00103810"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001030c0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "FUN_001030c0": {
            "renaming": {
                "FUN_001030c0": "print_strings_usage_001030c0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "dataAddress",
                "pcVar2": "localizedString",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printStringsUsage_001030c0(FILE *outputFile,int exitCode)\n\n{\n  long dataAddress;\n  char *localizedString;\n  long *targetList;\n  long *currentTarget;\n  \n  dataAddress = DAT_00108378;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,localizedString,dataAddress);\n  localizedString = (char *)dcgettext(0,\" Display printable strings in [file(s)] (stdin by default)\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -a - --all                Scan the entire file, not just the data section [default]\\n  -d --data                 Only scan the data sections in the file\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -f --print-file-name      Print the name of the file before each string\\n  -n <number>               Locate & print any sequence of at least <number>\\n    --bytes=<number>         displayable characters.  (The default is 4).\\n  -t --radix={o,d,x}        Print the location of the string in base 8, 10 or 16\\n  -w --include-all-whitespace Include all whitespace as valid string characters\\n  -o                        An alias for --radix=o\\n  -T --target=<BFDNAME>     Specify the binary file format\\n  -e --encoding={s,S,b,l,B,L} Select character size and endianness:\\n                            s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit\\n  --unicode={default|show|invalid|hex|escape|highlight}\\n  -U {d|s|i|x|e|h}          Specify how to treat UTF-8 encoded unicode characters\\n  -s --output-separator=<string> String used to separate strings in output.\\n  @<file>                   Read options from <file>\\n  -h --help                 Display this information\\n  -v -V --version           Print the program\\'s version number\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  dataAddress = DAT_00108378;\n  if (DAT_00108378 == 0) {\n    localizedString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,localizedString);\n  }\n  else {\n    localizedString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,localizedString,dataAddress);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    dataAddress = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (dataAddress == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "exit",
                "dcgettext",
                "bfd_target_list",
                "fprintf",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "print_strings_usage_001030c0"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00102853",
                "FUN_0010286f",
                "FUN_0010293a",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_0010259a": {
            "renaming": {
                "FUN_0010259a": "print_input_file_0010259a",
                "in_R8": "index",
                "unaff_R14": "outputString",
                "unaff_R15": "outputFormat",
                "bVar3": "loopCondition",
                "param_7": "inputSize",
                "param_8": "inputFile",
                "param_11": "outputFile"
            },
            "code": "\n\n\nvoid printInputFile_0010259a(void)\n\n{\n  uint uVar1;\n  ulong uVar2;\n  ulong index;\n  char *outputString;\n  undefined8 outputFormat;\n  bool loopCondition;\n  uint inputSize;\n  undefined8 inputFile;\n  undefined8 outputFile;\n  \n  do {\n    inputSize = (uint)index;\n    printf(\"%s: \",inputFile);\n    index = (ulong)inputSize;\n    do {\n      if (DAT_00108372 == '\\0') {\n        outputString[index] = '\\0';\n        fputs(outputString,_stdout);\n      }\n      else {\n        inputSize = (uint)index;\n        print_formatted_number_0010286f(outputFormat);\n        outputString[inputSize] = '\\0';\n        fputs(outputString,_stdout);\n      }\n      while (uVar2 = read_bytes_from_file_00103520(), uVar2 != 0xffffffffffffffff) {\n        if (0xff < uVar2) {\nLAB_0010348e:\n          calculate_modified_values_00103810();\n          break;\n        }\n        if (uVar2 == 9) {\nLAB_00102438:\n          putc((int)uVar2,_stdout);\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)uVar2 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0))))\n            goto LAB_0010348e;\n            goto LAB_00102438;\n          }\n          putc((int)uVar2,_stdout);\n        }\n      }\n      if (DAT_00108358 == (char *)0x0) {\n        putc(10,_stdout);\n      }\n      else {\n        fputs(DAT_00108358,_stdout);\n      }\n      while (index = (ulong)DAT_00108374, DAT_00108374 != 0) {\n        uVar2 = read_bytes_from_file_00103520();\n        uVar1 = DAT_00108374;\n        if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n        if (uVar2 < 0x100) {\n          if (uVar2 == 9) {\nLAB_001023f5:\n            *outputString = (char)uVar2;\n            if (uVar1 < 2) {\n              print_formatted_string_001034fa();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023f5;\n            }\n            *outputString = (char)uVar2;\n            if (uVar1 < 2) {\n              index = 1;\n              break;\n            }\n          }\n          uVar2 = read_bytes_from_file_00103520();\n          uVar1 = DAT_00108374;\n          if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_001023bb:\n            outputString[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              print_formatted_output_00103510();\n              return;\n            }\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_001023bb;\n            }\n            outputString[1] = (char)uVar2;\n            if (uVar1 < 3) {\n              index = 2;\n              break;\n            }\n          }\n          uVar2 = read_bytes_from_file_00103520();\n          uVar1 = DAT_00108374;\n          if (uVar2 == 0xffffffffffffffff) {\nLAB_001034be:\n            free(outputString);\n            return;\n          }\n          if (0xff < uVar2) goto code_r0x001034d5;\n          if (uVar2 == 9) {\nLAB_00102381:\n            outputString[2] = (char)uVar2;\n          }\n          else {\n            if ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0) {\n              if (((DAT_00108360 != 'S') || ((long)uVar2 < 0x80)) &&\n                 ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0))))\n              goto code_r0x001034d5;\n              goto LAB_00102381;\n            }\n            outputString[2] = (char)uVar2;\n          }\n          if (3 < uVar1) {\n            index = 3;\n            do {\n              inputSize = (uint)index;\n              uVar2 = read_bytes_from_file_00103520();\n              if (uVar2 == 0xffffffffffffffff) goto LAB_001034be;\n              if (0xff < uVar2) goto code_r0x001034d5;\n              if (((uVar2 != 9) && ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x10) == 0)) &&\n                 ((DAT_00108360 != 'S' || ((long)uVar2 < 0x80)))) {\n                if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n                if ((*(ushort *)(&_sch_istable + uVar2 * 2) & 0x40) == 0) {\n                  process_data_001034d5();\n                  return;\n                }\n              }\n              index = (ulong)(inputSize + 1);\n              loopCondition = DAT_00108374 <= inputSize + 1;\n              outputString[inputSize] = (char)uVar2;\n              if (loopCondition) goto joined_r0x0010341b;\n            } while( true );\n          }\n          index = 3;\n          break;\n        }\ncode_r0x001034d5:\n        calculate_modified_values_00103810();\n      }\njoined_r0x0010341b:\n      outputFormat = outputFile;\n    } while (DAT_00108371 == '\\0');\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5",
                "fputs",
                "FUN_0010286f",
                "FUN_00103810",
                "FUN_001034fa",
                "printf",
                "FUN_00102330",
                "FUN_00103510",
                "FUN_00103520",
                "FUN_0010259a",
                "free",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010259a",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_input_file_0010259a"
        },
        "FUN_001028b2": {
            "renaming": {
                "FUN_001028b2": "check_byte_sequence_001028b2",
                "param_1": "byteSequence",
                "param_2": "sequenceLength",
                "bVar1": "firstByte",
                "lVar2": "result"
            },
            "code": "\nlong checkByteSequence_001028b2(byte *byteSequence,long sequenceLength)\n\n{\n  byte firstByte;\n  long result;\n  \n  firstByte = *byteSequence;\n  if ((0xbf < firstByte) && (sequenceLength != 1)) {\n    result = 0;\n    if ((byteSequence[1] & 0xc0) == 0x80) {\n      if ((firstByte & 0x20) == 0) {\n        return 2;\n      }\n      if ((sequenceLength != 2) && ((byteSequence[2] & 0xc0) == 0x80)) {\n        if ((firstByte & 0x10) == 0) {\n          result = 3;\n        }\n        else {\n          result = 0;\n          if (sequenceLength != 3) {\n            return (ulong)((byteSequence[3] & 0xc0) == 0x80) << 2;\n          }\n        }\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028b2",
            "calling": [
                "FUN_00103240"
            ],
            "imported": false,
            "current_name": "check_byte_sequence_001028b2"
        },
        "FUN_001039e0": {
            "renaming": {
                "FUN_001039e0": "FUNC_001039e0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001039f3) */\n/* WARNING: Removing unreachable block (ram,0x001039ff) */\n\nvoid FUNC_001039e0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001039e0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_001039e0"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00102330": {
            "renaming": {
                "FUN_00102330": "print_and_modify_data_00102330",
                "param_1": "data",
                "in_AX": "flags",
                "uVar2": "currentIdx",
                "uVar3": "nextIdx",
                "in_R8D": "count",
                "unaff_R14": "buffer",
                "unaff_R15": "formatString",
                "bVar4": "isCountSmaller",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "formattedNumber"
            },
            "code": "\n\n\nvoid printAndModifyData_00102330(ulong data)\n\n{\n  uint uVar1;\n  ushort flags;\n  ulong currentIdx;\n  ulong nextIdx;\n  uint count;\n  char *buffer;\n  undefined8 formatString;\n  bool isCountSmaller;\n  undefined8 filename;\n  undefined8 formattedNumber;\n  \ncode_r0x00102330:\n  if ((DAT_00108360 != 'S') || ((long)data < 0x80)) {\n    if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n    if ((flags & 0x40) == 0) {\n      process_data_001034d5();\n      return;\n    }\n  }\nLAB_00103400:\n  currentIdx = (ulong)count;\n  count = count + 1;\n  nextIdx = (ulong)count;\n  isCountSmaller = count < DAT_00108374;\n  buffer[currentIdx] = (char)data;\n  if (isCountSmaller) goto LAB_001033b3;\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",filename);\n    }\n    if (DAT_00108372 == '\\0') {\n      buffer[nextIdx] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    else {\n      print_formatted_number_0010286f(formatString);\n      buffer[nextIdx] = '\\0';\n      fputs(buffer,_stdout);\n    }\n    while (nextIdx = read_bytes_from_file_00103520(), nextIdx != 0xffffffffffffffff) {\n      if (0xff < nextIdx) {\nLAB_0010348e:\n        calculate_modified_values_00103810();\n        break;\n      }\n      if (nextIdx == 9) {\nLAB_00102438:\n        putc((int)nextIdx,_stdout);\n      }\n      else {\n        if ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)nextIdx < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)nextIdx,_stdout);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,_stdout);\n    }\n    else {\n      fputs(DAT_00108358,_stdout);\n    }\n    while (nextIdx = (ulong)DAT_00108374, formatString = formattedNumber, DAT_00108374 != 0) {\n      nextIdx = read_bytes_from_file_00103520();\n      uVar1 = DAT_00108374;\n      if (nextIdx == 0xffffffffffffffff) goto LAB_001034be;\n      if (nextIdx < 0x100) {\n        if (nextIdx == 9) {\nLAB_001023f5:\n          *buffer = (char)nextIdx;\n          if (uVar1 < 2) {\n            print_formatted_string_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)nextIdx < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *buffer = (char)nextIdx;\n          if (uVar1 < 2) {\n            nextIdx = 1;\n            break;\n          }\n        }\n        nextIdx = read_bytes_from_file_00103520();\n        uVar1 = DAT_00108374;\n        if (nextIdx == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < nextIdx) goto code_r0x001034d5;\n        if (nextIdx == 9) {\nLAB_001023bb:\n          buffer[1] = (char)nextIdx;\n          if (uVar1 < 3) {\n            print_formatted_output_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)nextIdx < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          buffer[1] = (char)nextIdx;\n          if (uVar1 < 3) {\n            nextIdx = 2;\n            break;\n          }\n        }\n        nextIdx = read_bytes_from_file_00103520();\n        uVar1 = DAT_00108374;\n        if (nextIdx == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < nextIdx) goto code_r0x001034d5;\n        if (nextIdx == 9) {\nLAB_00102381:\n          buffer[2] = (char)nextIdx;\n        }\n        else {\n          if ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)nextIdx < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&_sch_istable + nextIdx * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          buffer[2] = (char)nextIdx;\n        }\n        if (uVar1 < 4) {\n          nextIdx = 3;\n          break;\n        }\n        count = 3;\nLAB_001033b3:\n        data = read_bytes_from_file_00103520();\n        if (data == 0xffffffffffffffff) {\nLAB_001034be:\n          free(buffer);\n          return;\n        }\n        if (data < 0x100) {\n          if ((data == 9) ||\n             (flags = *(ushort *)(&_sch_istable + data * 2), (flags & 0x10) != 0))\n          goto LAB_00103400;\n          goto code_r0x00102330;\n        }\n      }\ncode_r0x001034d5:\n      calculate_modified_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001034d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_and_modify_data_00102330"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001030c0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00102771": {
            "renaming": {
                "FUN_00102771": "extract_bits_from_rbx_00102771",
                "unaff_RBX": "rbx"
            },
            "code": "\nulong extractBitsFromRBX_00102771(void)\n\n{\n  ulong rbx;\n  \n  return rbx >> 0x18 & 0xff |\n         (rbx & 0xff) << 0x18 | (ulong)((uint)(rbx << 8) & 0xff0000) |\n         (ulong)((uint)(rbx >> 8) & 0xff00);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102771",
            "calling": [
                "FUN_00103520"
            ],
            "imported": false,
            "current_name": "extract_bits_from_rbx_00102771"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001030c0",
                "FUN_00103240",
                "FUN_0010259a",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00104a60",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_001034fa": {
            "renaming": {
                "FUN_001034fa": "print_formatted_string_001034fa",
                "unaff_R14": "formattedString",
                "unaff_R15": "title",
                "in_stack_00000010": "titleMessage",
                "in_stack_00000038": "tag",
                "_stdout": "outputStream",
                "_sch_istable": "characterTable"
            },
            "code": "\n\n\nvoid printFormattedString_001034fa(void)\n\n{\n  ulong uVar1;\n  uint uVar2;\n  ulong uVar3;\n  ulong uVar4;\n  char *formattedString;\n  undefined8 title;\n  bool bVar5;\n  undefined8 titleMessage;\n  undefined8 tag;\n  \ncode_r0x001034fa:\n  uVar4 = 1;\njoined_r0x0010341b:\n  do {\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",titleMessage);\n    }\n    if (DAT_00108372 == '\\0') {\n      formattedString[uVar4] = '\\0';\n      fputs(formattedString,outputStream);\n    }\n    else {\n      FUN_0010286f(title);\n      formattedString[uVar4] = '\\0';\n      fputs(formattedString,outputStream);\n    }\n    while (uVar4 = read_bytes_from_file_00103520(), uVar4 != 0xffffffffffffffff) {\n      if (0xff < uVar4) {\nLAB_0010348e:\n        calculate_modified_values_00103810();\n        break;\n      }\n      if (uVar4 == 9) {\nLAB_00102438:\n        putc((int)uVar4,outputStream);\n      }\n      else {\n        if ((*(ushort *)(&characterTable + uVar4 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)uVar4 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&characterTable + uVar4 * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)uVar4,outputStream);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,outputStream);\n    }\n    else {\n      fputs(DAT_00108358,outputStream);\n    }\n    while (uVar4 = (ulong)DAT_00108374, title = tag, DAT_00108374 != 0) {\n      uVar4 = read_bytes_from_file_00103520();\n      uVar2 = DAT_00108374;\n      if (uVar4 == 0xffffffffffffffff) goto LAB_001034be;\n      if (uVar4 < 0x100) {\n        if (uVar4 == 9) {\nLAB_001023f5:\n          *formattedString = (char)uVar4;\n          if (uVar2 < 2) {\n            printFormattedString_001034fa();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&characterTable + uVar4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)uVar4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&characterTable + uVar4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023f5;\n          }\n          *formattedString = (char)uVar4;\n          if (uVar2 < 2) goto code_r0x001034fa;\n        }\n        uVar4 = read_bytes_from_file_00103520();\n        uVar2 = DAT_00108374;\n        if (uVar4 == 0xffffffffffffffff) goto LAB_001034be;\n        if (0xff < uVar4) goto code_r0x001034d5;\n        if (uVar4 == 9) {\nLAB_001023bb:\n          formattedString[1] = (char)uVar4;\n          if (uVar2 < 3) {\n            FUN_00103510();\n            return;\n          }\n        }\n        else {\n          if ((*(ushort *)(&characterTable + uVar4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)uVar4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&characterTable + uVar4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_001023bb;\n          }\n          formattedString[1] = (char)uVar4;\n          if (uVar2 < 3) {\n            uVar4 = 2;\n            break;\n          }\n        }\n        uVar4 = read_bytes_from_file_00103520();\n        uVar2 = DAT_00108374;\n        if (uVar4 == 0xffffffffffffffff) {\nLAB_001034be:\n          free(formattedString);\n          return;\n        }\n        if (0xff < uVar4) goto code_r0x001034d5;\n        if (uVar4 == 9) {\nLAB_00102381:\n          formattedString[2] = (char)uVar4;\n        }\n        else {\n          if ((*(ushort *)(&characterTable + uVar4 * 2) & 0x10) == 0) {\n            if (((DAT_00108360 != 'S') || ((long)uVar4 < 0x80)) &&\n               ((DAT_00108373 == '\\0' || ((*(ushort *)(&characterTable + uVar4 * 2) & 0x40) == 0))))\n            goto code_r0x001034d5;\n            goto LAB_00102381;\n          }\n          formattedString[2] = (char)uVar4;\n        }\n        if (3 < uVar2) {\n          uVar3 = 3;\n          do {\n            uVar1 = read_bytes_from_file_00103520();\n            if (uVar1 == 0xffffffffffffffff) goto LAB_001034be;\n            if (0xff < uVar1) goto code_r0x001034d5;\n            if (((uVar1 != 9) && ((*(ushort *)(&characterTable + uVar1 * 2) & 0x10) == 0)) &&\n               ((DAT_00108360 != 'S' || ((long)uVar1 < 0x80)))) {\n              if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n              if ((*(ushort *)(&characterTable + uVar1 * 2) & 0x40) == 0) {\n                process_data_001034d5();\n                return;\n              }\n            }\n            uVar2 = (int)uVar3 + 1;\n            uVar4 = (ulong)uVar2;\n            bVar5 = DAT_00108374 <= uVar2;\n            formattedString[uVar3] = (char)uVar1;\n            uVar3 = uVar4;\n            if (bVar5) goto joined_r0x0010341b;\n          } while( true );\n        }\n        uVar4 = 3;\n        break;\n      }\ncode_r0x001034d5:\n      calculate_modified_values_00103810();\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034fa",
            "calling": [
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "print_formatted_string_001034fa"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_00102853": {
            "renaming": {
                "FUN_00102853": "print_if_data_available_00102853",
                "param_1": "message"
            },
            "code": "\nvoid print_if_data_available_00102853(undefined8 message)\n\n{\n  printf(\"%s: \",message);\n  if (DAT_00108372 == '\\0') {\n    return;\n  }\n  print_formatted_number_0010286f();\n  return;\n}\n\n",
            "called": [
                "FUN_0010286f",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102853",
            "calling": [
                "FUN_00103890"
            ],
            "imported": false,
            "current_name": "print_if_data_available_00102853"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_00103240",
                "FUN_0010293a"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001030c0",
                "FUN_001038b0",
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "__uflow": {
            "renaming": {},
            "code": "\n\n\nint __uflow(_IO_FILE *param_1)\n\n{\n  int iVar1;\n  \n  iVar1 = __uflow(param_1);\n  return iVar1;\n}\n\n",
            "called": [
                "__uflow"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_0010290e",
                "FUN_00103520"
            ],
            "imported": false,
            "current_name": "__uflow"
        },
        "FUN_001027e2": {
            "renaming": {
                "FUN_001027e2": "update_and_add_001027e2",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "count",
                "param_4": "result",
                "in_RAX": "pointer"
            },
            "code": "\nvoid update_and_add_001027e2(int value_1,int value_2,long count,long *result)\n\n{\n  int *pointer;\n  \n  *result = *result + (1 - count);\n  *pointer = value_1 + value_2;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027e2",
            "calling": [
                "FUN_00103810"
            ],
            "imported": false,
            "current_name": "update_and_add_001027e2"
        },
        "FUN_001034d5": {
            "renaming": {
                "FUN_001034d5": "process_data_001034d5",
                "unaff_R14": "outputString",
                "uVar1": "value1",
                "uVar2": "value2",
                "uVar3": "count",
                "uVar4": "index",
                "bVar5": "continueLoop",
                "in_stack_00000010": "filename",
                "in_stack_00000038": "formattedNumber",
                "calculate_modified_values_00103810": "calculateModifiedValues",
                "read_bytes_from_file_00103520": "readBytesFromFile",
                "_sch_istable": "characterTable",
                "print_formatted_string_001034fa": "printFormattedString",
                "print_formatted_output_00103510": "printFormattedOutput",
                "free": "deallocate",
                "printf": "print",
                "_stdout": "standardOutput",
                "print_formatted_number_0010286f": "printFormattedNumber",
                "putc": "putCharacter",
                "fputs": "putString",
                "unaff_R14[uVar1]": "outputString[index]",
                "read_bytes_from_file_00103520()": "readBytesFromFile()"
            },
            "code": "\n\n\nvoid processData_001034d5(void)\n\n{\n  ulong value1;\n  ulong value2;\n  uint count;\n  ulong index;\n  char *outfputs;\n  bool continueLoop;\n  undefined8 filename;\n  undefined8 formattedNumber;\n  \ncode_r0x001034d5:\n  calculateModifiedValues();\n  do {\n    value1 = (ulong)DAT_00108374;\n    if (DAT_00108374 != 0) {\n      value1 = readBytesFromFile();\n      count = DAT_00108374;\n      if (value1 == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < value1) goto code_r0x001034d5;\n      if (value1 == 9) {\nLAB_001023f5:\n        *outfputs = (char)value1;\n        if (count < 2) {\n          printfFormattedString();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&characterTable + value1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&characterTable + value1 * 2) & 0x40) != 0))))\n          goto LAB_001023f5;\n          goto code_r0x001034d5;\n        }\n        *outfputs = (char)value1;\n        if (count < 2) {\n          value1 = 1;\n          goto joined_r0x001034ef;\n        }\n      }\n      value1 = readBytesFromFile();\n      count = DAT_00108374;\n      if (value1 == 0xffffffffffffffff) goto LAB_001034be;\n      if (0xff < value1) goto code_r0x001034d5;\n      if (value1 == 9) {\nLAB_001023bb:\n        outfputs[1] = (char)value1;\n        if (count < 3) {\n          printfFormattedOutput();\n          return;\n        }\n      }\n      else {\n        if ((*(ushort *)(&characterTable + value1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&characterTable + value1 * 2) & 0x40) != 0))))\n          goto LAB_001023bb;\n          goto code_r0x001034d5;\n        }\n        outfputs[1] = (char)value1;\n        if (count < 3) {\n          value1 = 2;\n          goto joined_r0x001034ef;\n        }\n      }\n      value1 = readBytesFromFile();\n      count = DAT_00108374;\n      if (value1 == 0xffffffffffffffff) {\nLAB_001034be:\n        free(outfputs);\n        return;\n      }\n      if (0xff < value1) goto code_r0x001034d5;\n      if (value1 == 9) {\nLAB_00102381:\n        outfputs[2] = (char)value1;\n      }\n      else {\n        if ((*(ushort *)(&characterTable + value1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 == 'S') && (0x7f < (long)value1)) ||\n             ((DAT_00108373 != '\\0' && ((*(ushort *)(&characterTable + value1 * 2) & 0x40) != 0))))\n          goto LAB_00102381;\n          goto code_r0x001034d5;\n        }\n        outfputs[2] = (char)value1;\n      }\n      if (count < 4) {\n        value1 = 3;\n      }\n      else {\n        index = 3;\n        do {\n          value2 = readBytesFromFile();\n          if (value2 == 0xffffffffffffffff) goto LAB_001034be;\n          if (0xff < value2) goto code_r0x001034d5;\n          if (((value2 != 9) && ((*(ushort *)(&characterTable + value2 * 2) & 0x10) == 0)) &&\n             ((DAT_00108360 != 'S' || ((long)value2 < 0x80)))) {\n            if (DAT_00108373 == '\\0') goto code_r0x001034d5;\n            if ((*(ushort *)(&characterTable + value2 * 2) & 0x40) == 0) {\n              processData_001034d5();\n              return;\n            }\n          }\n          count = (int)index + 1;\n          value1 = (ulong)count;\n          continueLoop = count < DAT_00108374;\n          outfputs[index] = (char)value2;\n          index = value1;\n        } while (continueLoop);\n      }\n    }\njoined_r0x001034ef:\n    if (DAT_00108371 != '\\0') {\n      printf(\"%s: \",filename);\n    }\n    if (DAT_00108372 == '\\0') {\n      outfputs[index] = '\\0';\n      fputs(outfputs,standardOutput);\n    }\n    else {\n      printfFormattedNumber(formattedNumber);\n      outfputs[index] = '\\0';\n      fputs(outfputs,standardOutput);\n    }\n    while (value1 = readBytesFromFile(), value1 != 0xffffffffffffffff) {\n      if (0xff < value1) {\nLAB_0010348e:\n        calculateModifiedValues();\n        break;\n      }\n      if (value1 == 9) {\nLAB_00102438:\n        putc((int)value1,standardOutput);\n      }\n      else {\n        if ((*(ushort *)(&characterTable + value1 * 2) & 0x10) == 0) {\n          if (((DAT_00108360 != 'S') || ((long)value1 < 0x80)) &&\n             ((DAT_00108373 == '\\0' || ((*(ushort *)(&characterTable + value1 * 2) & 0x40) == 0))))\n          goto LAB_0010348e;\n          goto LAB_00102438;\n        }\n        putc((int)value1,standardOutput);\n      }\n    }\n    if (DAT_00108358 == (char *)0x0) {\n      putc(10,standardOutput);\n    }\n    else {\n      fputs(DAT_00108358,standardOutput);\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103810"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001034d5",
            "calling": [
                "FUN_00102330",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "process_data_001034d5"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102b11",
                "FUN_00103240",
                "FUN_0010259a"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_00103aa0": {
            "renaming": {
                "FUN_00103aa0": "improved_string_processing_00103aa0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "cVar4": "charVar",
                "iVar5": "intVar",
                "uVar6": "uintVar",
                "iVar7": "loopVar",
                "uVar8": "undefined4Var",
                "__stream": "fileStream",
                "sVar9": "sizeVar1",
                "sVar10": "sizeVar2",
                "__ptr": "bytePtr2",
                "lVar11": "longVar1",
                "plVar12": "param_2_copy",
                "uVar13": "ulongVar",
                "__src": "byteArray",
                "uVar14": "undefined8Var1",
                "__stream_00": "anotherFileStream",
                "piVar15": "intPtr",
                "plVar16": "param_2_copy",
                "uVar17": "undefined8Var2",
                "plVar18": "longPtr",
                "pbVar19": "bytePtr3",
                "pcVar20": "stringVar",
                "ppuVar21": "undefinedPtrPtr",
                "lVar22": "longVar2",
                "pbVar23": "bytePtr4",
                "pcVar24": "stringVar2",
                "bVar25": "boolVar1",
                "puVar26": "undefined8Ptr",
                "bVar27": "boolVar2",
                "bVar28": "boolVar3",
                "local_140": "longPtrArray",
                "local_138": "longVar3",
                "local_128": "bytePtr5",
                "local_120": "ulongVar2",
                "local_118": "sizeVar3",
                "local_110": "longVar4",
                "local_d8": "charPtr1",
                "local_d0": "voidPtr",
                "local_c8": "statVar"
            },
            "code": "\n\n\n\nFILE * improved_string_processing_00103aa0(int argc,long *argv)\n\n{\n  byte *bytePtr1;\n  byte byteVar2;\n  byte byteVar3;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  int loopVar;\n  undefined4 undefined4Var;\n  FILE *fileStream;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *bytePtr2;\n  long longVar1;\n  long *param_2_copy;\n  ulong ulongVar;\n  long *byteArray;\n  undefined8 undefined8Var1;\n  FILE *anotherFileStream;\n  int *intPtr;\n  long *param_2_copy;\n  undefined8 undefined8Var2;\n  long *longPtr;\n  byte *bytePtr3;\n  char *stringVar;\n  undefined **undefinedPtrPtr;\n  long longVar2;\n  byte *bytePtr4;\n  char *stringVar2;\n  bool boolVar1;\n  long *unaff_R12;\n  undefined8 *undefined8Ptr;\n  bool boolVar2;\n  bool boolVar3;\n  long *longPtrArray;\n  undefined8 longVar3;\n  undefined8 bytePtr5;\n  ulong ulongVar2;\n  size_t sizeVar3;\n  long longVar4;\n  char *charPtr1;\n  void *voidPtr;\n  stat statVar;\n  \n  setlocale(6,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00108378 = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00108378);\n  param_2_copy = argv;\n  if (argc < 2) goto LAB_00103fa6;\n  ulongVar2 = 2000;\n  unaff_R12 = (long *)0x1;\n  longVar3 = (long *)0x0;\n  param_2_copy = argv;\n  do {\n    loopVar = (int)unaff_R12;\n    undefinedPtrPtr = (undefined **)(long)loopVar;\n    longPtrArray = (long *)((long)undefinedPtrPtr * 8);\n    param_2_copy = param_2_copy;\n    if (*(char *)param_2_copy[(long)undefinedPtrPtr] == '@') {\n      uintVar = (int)ulongVar2 - 1;\n      ulongVar2 = (ulong)uintVar;\n      if (uintVar == 0) {\n        longVar1 = *param_2_copy;\n        stringVar = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_001044b1;\n      }\n      stringVar = (char *)param_2_copy[(long)undefinedPtrPtr] + 1;\n      intVar = stat(stringVar,&statVar);\n      if (-1 < intVar) {\n        if ((statVar.st_mode & 0xf000) == 0x4000) {\n          do {\n            longVar1 = *param_2_copy;\n            stringVar = \"%s: error: @-file refers to a directory\\n\";\nLAB_001044b1:\n            fprintf(_stderr,stringVar,longVar1);\n            xexit(1);\n          } while( true );\n        }\n        fileStream = fopen(stringVar,\"r\");\n        if (fileStream != (FILE *)0x0) {\n          intVar = fseek(fileStream,0,2);\n          if (((intVar != -1) && (sizeVar1 = ftell(fileStream), sizeVar1 != 0xffffffffffffffff)) &&\n             (intVar = fseek(fileStream,0,0), intVar != -1)) {\n            bytePtr5 = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = fread(bytePtr5,1,sizeVar1,fileStream);\n            if ((sizeVar1 == sizeVar2) || (intVar = ferror(fileStream), intVar == 0)) {\n              bytePtr5[sizeVar2] = 0;\n              byteVar3 = *bytePtr5;\n              bytePtr3 = bytePtr5;\n              while( true ) {\n                if (byteVar3 == 0) goto LAB_001040fd;\n                if (((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) == 0) break;\n                byteVar3 = bytePtr3[1];\n                bytePtr3 = bytePtr3 + 1;\n              }\n              sizeVar1 = strlen((char *)bytePtr5);\n              bytePtr2 = (byte *)xmalloc(sizeVar1 + 1);\n              byteArray = (long *)0x0;\n              intVar = 0;\n              longVar4 = 0;\n              boolVar1 = false;\n              boolVar3 = false;\n              boolVar2 = false;\n              bytePtr3 = bytePtr5;\n              do {\n                while (((&_sch_istable)[(ulong)*bytePtr3 * 2] & 0x40) != 0) {\n                  bytePtr3 = bytePtr3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)longVar4)) {\n                  if (byteArray == (long *)0x0) {\n                    intVar = 8;\n                    byteArray = (long *)xmalloc(0x40);\n                    longPtr = byteArray + longVar4;\n                    *longPtr = 0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    byteArray = (long *)xrealloc(byteArray,(long)intVar << 3);\n                    longPtr = byteArray + longVar4;\n                    *longPtr = 0;\n                  }\n                }\n                else {\n                  longPtr = byteArray + longVar4;\n                }\n                byteVar3 = *bytePtr3;\n                bytePtr4 = bytePtr2;\n                while (byteVar3 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar3 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                      boolVar2 = false;\n                      boolVar1 = false;\n                      boolVar3 = false;\n                      goto LAB_00103d4f;\n                    }\n                    if (!boolVar2) break;\n                    bytePtr3 = bytePtr3 + 1;\n                    *bytePtr4 = byteVar3;\n                    bytePtr4 = bytePtr4 + 1;\n                    boolVar2 = false;\n                    byteVar3 = *bytePtr3;\n                    if (byteVar3 == 0) goto LAB_00103d4f;\n                  }\n                  if (byteVar3 == 0x5c) {\n                    boolVar2 = true;\n                  }\n                  else if (boolVar3) {\n                    if (byteVar3 == 0x27) {\n                      boolVar3 = false;\n                    }\n                    else {\nLAB_00103ec8:\n                      *bytePtr4 = byteVar3;\n                      bytePtr4 = bytePtr4 + 1;\n                    }\n                  }\n                  else if (boolVar1) {\n                    if (byteVar3 != 0x22) goto LAB_00103ec8;\n                    boolVar1 = false;\n                  }\n                  else if (byteVar3 == 0x27) {\n                    boolVar3 = true;\n                  }\n                  else {\n                    if (byteVar3 != 0x22) goto LAB_00103ec8;\n                    boolVar1 = true;\n                  }\n                  bytePtr1 = bytePtr3 + 1;\n                  bytePtr3 = bytePtr3 + 1;\n                  byteVar3 = *bytePtr1;\n                }\nLAB_00103d4f:\n                *bytePtr4 = 0;\n                longVar1 = xstrdup(bytePtr2);\n                *longPtr = longVar1;\n                byteArray[longVar4 + 1] = 0;\n                byteVar3 = *bytePtr3;\n                byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n                while ((byteVar2 & 0x40) != 0) {\n                  byteVar3 = bytePtr3[1];\n                  bytePtr3 = bytePtr3 + 1;\n                  byteVar2 = (&_sch_istable)[(ulong)byteVar3 * 2];\n                }\n                longVar4 = longVar4 + 1;\n                if (byteVar3 == 0) {\n                  free(bytePtr2);\n                  if (param_2_copy == argv) goto LAB_0010411e;\n                  goto LAB_00103dea;\n                }\n              } while( true );\n            }\n            free(bytePtr5);\n          }\n          fclose(fileStream);\n        }\n      }\n    }\n    if (argc <= loopVar + 1) {\nLAB_00103fa6:\n      DAT_00108373 = 0;\n      fileStream = (FILE *)0x0;\n      DAT_00108372 = 0;\n      undefinedPtrPtr = &PTR_DAT_001081a0;\n      DAT_00108374 = 4;\n      DAT_00108371 = 0;\n      DAT_00108370 = '\\0';\n      DAT_00108368 = (long *)0x0;\n      DAT_00108360 = 's';\n      DAT_00108358 = (long *)0x0;\n      stringVar = \"adfhHn:wot:e:T:s:U:Vv0123456789\";\nLAB_00103ff6:\n      while( true ) {\n        loopVar = (int)unaff_R12;\n        intVar = getopt_long(argc,param_2_copy,stringVar);\n        if (intVar == -1) break;\n        param_2_copy = (long *)stringVar;\n        switch(intVar) {\n        case 0x3f:\n          goto switchD_00104029_caseD_3f;\n        case 0x48:\n        case 0x68:\nswitchD_00104029_caseD_48:\n          print_strings_usage_001030c0(_stdout,0);\n          goto LAB_001044f5;\n        case 0x54:\nswitchD_00104201_caseD_54:\n          unaff_R12 = (long *)&optarg;\n          DAT_00108368 = _optarg;\n          break;\n        case 0x55:\nswitchD_00104201_caseD_55:\n          unaff_R12 = _optarg;\n          loopVar = strcmp((char *)_optarg,\"default\");\n          if ((loopVar == 0) || (loopVar = strcmp((char *)unaff_R12,\"d\"), loopVar == 0)) {\n            DAT_00108350 = 0;\n          }\n          else {\n            loopVar = strcmp((char *)unaff_R12,\"locale\");\n            if ((loopVar == 0) || (loopVar = strcmp((char *)unaff_R12,\"l\"), loopVar == 0)) {\n              DAT_00108350 = 1;\n            }\n            else {\n              loopVar = strcmp((char *)unaff_R12,\"escape\");\n              if ((loopVar == 0) || (loopVar = strcmp((char *)unaff_R12,\"e\"), loopVar == 0)) {\n                DAT_00108350 = 2;\n              }\n              else {\n                loopVar = strcmp((char *)unaff_R12,\"invalid\");\n                if ((loopVar == 0) || (loopVar = strcmp((char *)unaff_R12,\"i\"), loopVar == 0)) {\n                  DAT_00108350 = 5;\n                }\n                else {\n                  loopVar = strcmp((char *)unaff_R12,\"hex\");\n                  if ((loopVar == 0) || (loopVar = strcmp((char *)unaff_R12,\"x\"), loopVar == 0)) {\n                    DAT_00108350 = 3;\n                  }\n                  else {\n                    loopVar = strcmp((char *)unaff_R12,\"highlight\");\n                    if ((loopVar != 0) && (loopVar = strcmp((char *)unaff_R12,\"h\"), loopVar != 0)) {\n                      undefined8Var1 = dcgettext(0,\"invalid argument to -U/--unicode: %s\",5);\n                      handle_error_00104a60(undefined8Var1);\n                      print_error_message_001038b0();\n                      xexit(1);\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                      halt_baddata();\n                    }\n                    DAT_00108350 = 4;\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case 0x56:\n        case 0x76:\nswitchD_00104029_caseD_56:\n          printf(\"GNU %s %s\\n\",\"strings\",\"(GNU Binutils for Debian) 2.40\");\n          stringVar = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n          printf(stringVar);\n          stringVar = (char *)dcgettext(0,\n                                      \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                      ,5);\n          printf(stringVar);\n                    \n          exit(0);\n        case 0x61:\n          goto switchD_00104029_caseD_61;\n        case 100:\nswitchD_00104029_caseD_64:\n          DAT_00108370 = '\\x01';\n          break;\n        case 0x65:\n          unaff_R12 = (long *)&optarg;\n          loopVar = 0x109108;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          DAT_00108360 = *(char *)_optarg;\n          intVar = getopt_long(argc,param_2_copy,stringVar);\n          if (intVar == -1) goto LAB_0010407f;\n          switch(intVar) {\n          case 0x3f:\n            goto switchD_00104029_caseD_3f;\n          case 0x48:\n          case 0x68:\n            goto switchD_00104029_caseD_48;\n          case 0x54:\n            goto switchD_00104201_caseD_54;\n          case 0x55:\n            goto switchD_00104201_caseD_55;\n          case 0x56:\n          case 0x76:\n            goto switchD_00104029_caseD_56;\n          case 0x61:\n            goto switchD_00104029_caseD_61;\n          case 100:\n            goto switchD_00104029_caseD_64;\n          case 0x65:\nswitchD_00104201_caseD_65:\n            if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n            DAT_00108360 = *(char *)_optarg;\n            intVar = getopt_long(argc,param_2_copy,stringVar);\n            if (intVar == -1) goto LAB_0010407f;\n            switch(intVar) {\n            case 0x3f:\n              goto switchD_00104029_caseD_3f;\n            default:\n              break;\n            case 0x48:\n            case 0x68:\n              goto switchD_00104029_caseD_48;\n            case 0x54:\n              goto switchD_00104201_caseD_54;\n            case 0x55:\n              goto switchD_00104201_caseD_55;\n            case 0x56:\n            case 0x76:\n              goto switchD_00104029_caseD_56;\n            case 0x61:\n              goto switchD_00104029_caseD_61;\n            case 100:\n              goto switchD_00104029_caseD_64;\n            case 0x65:\n              goto switchD_00104201_caseD_65;\n            case 0x66:\n              goto switchD_00104029_caseD_66;\n            case 0x6e:\n              goto switchD_00104201_caseD_6e;\n            case 0x6f:\n              goto switchD_00104029_caseD_6f;\n            case 0x73:\n              goto switchD_00104201_caseD_73;\n            case 0x74:\n              goto switchD_00104201_caseD_74;\n            case 0x77:\n              goto switchD_00104029_caseD_77;\n            }\n          case 0x66:\n            goto switchD_00104029_caseD_66;\n          case 0x6e:\n            goto switchD_00104201_caseD_6e;\n          case 0x6f:\n            goto switchD_00104029_caseD_6f;\n          case 0x73:\n            goto switchD_00104201_caseD_73;\n          case 0x74:\n            goto switchD_00104201_caseD_74;\n          case 0x77:\n            goto switchD_00104029_caseD_77;\n          }\n        default:\n          fileStream = (FILE *)(ulong)_optind;\n          break;\n        case 0x66:\nswitchD_00104029_caseD_66:\n          DAT_00108371 = 1;\n          break;\n        case 0x6e:\nswitchD_00104201_caseD_6e:\n          unaff_R12 = (long *)&optarg;\n          ulongVar = strtoul((char *)_optarg,&charPtr1,0);\n          DAT_00108374 = (int)ulongVar;\n          if ((charPtr1 != (char *)0x0) && (param_2_copy = _optarg, *charPtr1 != '\\0')) {\nLAB_001042e6:\n            undefined8Var1 = dcgettext(0,\"invalid integer argument %s\",5);\n            handle_error_00104a60(undefined8Var1,param_2_copy);\n            goto switchD_00104201_caseD_73;\n          }\n          break;\n        case 0x6f:\nswitchD_00104029_caseD_6f:\n          DAT_00108372 = 1;\n          DAT_00108354 = 8;\n          break;\n        case 0x73:\nswitchD_00104201_caseD_73:\n          unaff_R12 = (long *)&optarg;\n          DAT_00108358 = _optarg;\n          stringVar = (char *)param_2_copy;\n          break;\n        case 0x74:\nswitchD_00104201_caseD_74:\n          unaff_R12 = (long *)&optarg;\n          loopVar = 0x109108;\n          DAT_00108372 = 1;\n          if (*(char *)((long)_optarg + 1) != '\\0') goto switchD_00104029_caseD_3f;\n          charVar = *(char *)_optarg;\n          if (charVar == 'o') {\n            DAT_00108354 = 8;\n          }\n          else if (charVar == 'x') {\n            DAT_00108354 = 0x10;\n          }\n          else {\n            if (charVar != 'd') goto switchD_00104029_caseD_3f;\n            DAT_00108354 = 10;\n          }\n          break;\n        case 0x77:\n          goto switchD_00104029_caseD_77;\n        }\n      }\nLAB_0010407f:\n      if (DAT_00108350 != 0) {\n        DAT_00108360 = 'S';\n      }\n      if ((int)fileStream != 0) {\nLAB_001044f5:\n        stringVar = (char *)(param_2_copy + (long)(int)fileStream + -1);\n        ulongVar = strtoul((char *)(*(long *)stringVar + 1),&charPtr1,0);\n        DAT_00108374 = (int)ulongVar;\n        if ((charPtr1 != (char *)0x0) && (*charPtr1 != '\\0')) {\n          param_2_copy = (long *)(*(long *)stringVar + 1);\n          goto LAB_001042e6;\n        }\n      }\n      loopVar = (int)unaff_R12;\n      if (DAT_00108374 == 0) {\n        undefined8Var1 = dcgettext(0,\"invalid minimum string length %d\",5);\n        handle_error_00104a60(undefined8Var1,0);\nswitchD_00104029_caseD_61:\n        DAT_00108370 = '\\0';\n        goto LAB_00103ff6;\n      }\n      if (0x31 < (byte)(DAT_00108360 + 0xbeU)) goto switchD_00104029_caseD_3f;\n      ulongVar = 1L << (DAT_00108360 + 0xbeU & 0x3f);\n      if ((ulongVar & 0x2000000020000) == 0) {\n        if ((ulongVar & 0x401) == 0) {\n          if ((ulongVar & 0x40100000000) == 0) goto switchD_00104029_caseD_3f;\n          DAT_0010834c = 2;\n        }\n        else {\n          DAT_0010834c = 4;\n        }\n      }\n      else {\n        DAT_0010834c = 1;\n      }\n      loopVar = bfd_init();\n      if (loopVar == 0x118) {\n        stringVar = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\");\n        if ((char)uintVar != '\\0') {\n          undefinedPtrPtr = (undefined **)&optind;\n          if (argc <= (int)_optind) {\n            DAT_00108370 = 0;\n            process_print_output_00103240(\"{standard input}\",_stdin,0,0,0);\n            return (FILE *)0x0;\n          }\n          ulongVar = 0;\n          fileStream = (FILE *)0x0;\n          param_2_copy = (long *)(ulong)uintVar;\n          uintVar = _optind;\n          longPtrArray = param_2_copy;\n          goto LAB_001043b8;\n        }\n        undefined4Var = bfd_get_error();\n        undefinedPtrPtr = (undefined **)bfd_errmsg(undefined4Var);\n        undefined8Var1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        handle_error_00104a60(undefined8Var1,\"x86_64-pc-linux-gnu\",undefinedPtrPtr);\n      }\n      undefined8Var1 = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n      handle_error_00104a60(undefined8Var1);\n      param_2_copy = param_2_copy;\nLAB_0010462b:\n      stringVar2 = \"Warning: \\'%s\\' is a directory\";\nLAB_00104637:\n      undefined8Var1 = dcgettext(0,stringVar2,5);\n      print_error_message_00103910(undefined8Var1,stringVar);\n      uintVar = 0;\n      do {\n        while( true ) {\n          ulongVar = (ulong)param_2_copy & 0xffffffff;\n          fileStream = (FILE *)(ulong)((uint)fileStream | (uintVar ^ 1) & 0xff);\n          while( true ) {\n            loopVar = (int)ulongVar;\n            uintVar = *(uint *)undefinedPtrPtr + 1;\n            *(uint *)undefinedPtrPtr = uintVar;\n            if (argc <= (int)uintVar) {\n              param_2_copy = param_2_copy;\n              if ((char)ulongVar != '\\0') {\n                return fileStream;\n              }\n              goto switchD_00104029_caseD_3f;\n            }\nLAB_001043b8:\n            stringVar = (char *)longPtrArray[(int)uintVar];\n            loopVar = strcmp(stringVar,\"-\");\n            if (loopVar != 0) break;\n            DAT_00108370 = '\\0';\n          }\n          loopVar = stat(stringVar,&statVar);\n          if (loopVar < 0) break;\n          if ((statVar.st_mode & 0xf000) == 0x4000) goto LAB_0010462b;\n          if ((DAT_00108370 == '\\0') ||\n             (param_2_copy = (long *)bfd_openr(stringVar,DAT_00108368), param_2_copy == (long *)0x0)) {\nLAB_00104416:\n            anotherFileStream = fopen(stringVar,\"r\");\n            if (anotherFileStream != (FILE *)0x0) {\n              process_print_output_00103240(stringVar,anotherFileStream,0,0,0);\n              loopVar = fclose(anotherFileStream);\n              if (loopVar != -1) goto LAB_00104454;\n            }\n            fprintf(_stderr,\"%s: \",DAT_00108378);\n            perror(stringVar);\n            uintVar = 0;\n          }\n          else {\n            charVar = bfd_check_format(param_2_copy,1);\n            if (charVar == '\\0') {\n              bfd_close();\n              longVar3 = param_2_copy;\n              goto LAB_00104416;\n            }\n            undefined8Ptr = (undefined8 *)param_2_copy[0x12];\n            longVar3 = (long *)((ulong)param_2_copy & 0xffffffffffffff00);\n            bytePtr5 = (byte *)CONCAT44(bytePtr5._4_4_,argc);\n            for (; undefined8Ptr != (undefined8 *)0x0; undefined8Ptr = (undefined8 *)undefined8Ptr[1]) {\n              charVar = (char)longVar3;\n              if (((*(uint *)((long)undefined8Ptr + 0x24) & 0x103) == 0x103) &&\n                 (ulongVar2 = undefined8Ptr[8], ulongVar2 != 0)) {\n                charVar = bfd_malloc_and_get_section(param_2_copy,undefined8Ptr,&voidPtr);\n                if (charVar == '\\0') {\n                  undefined4Var = bfd_get_error();\n                  ulongVar2 = bfd_errmsg(undefined4Var);\n                  undefined8Var1 = *undefined8Ptr;\n                  undefined8Var2 = dcgettext(0,\"%s: Reading section %s failed: %s\",5);\n                  print_error_message_00103910(undefined8Var2,stringVar,undefined8Var1);\n                  charVar = (char)longVar3;\n                }\n                else {\n                  process_print_output_00103240(stringVar,0,undefined8Ptr[0x10],ulongVar2,voidPtr);\n                  free(voidPtr);\n                }\n              }\n              longVar3 = (long *)CONCAT71(longVar3._1_7_,charVar);\n            }\n            param_2_copy = (long *)((ulong)param_2_copy & 0xff);\n            charVar = bfd_close(param_2_copy);\n            if (charVar == '\\0') {\n              loopVar = bfd_get_error();\n              if (loopVar == 0) {\n                undefined8Var1 = dcgettext(0,\"cause of error unknown\",5);\n                fflush(_stdout);\n              }\n              else {\n                undefined8Var1 = bfd_errmsg();\n                fflush(_stdout);\n              }\n              fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00108378,stringVar,undefined8Var1);\n              goto LAB_00104416;\n            }\n            boolVar3 = (char)longVar3 == '\\0';\n            if (boolVar3) goto LAB_00104416;\nLAB_00104454:\n            uintVar = (uint)param_2_copy;\n          }\n        }\n        intPtr = __errno_location();\n        stringVar2 = \"\\'%s\\': No such file\";\n        if (*intPtr == 2) goto LAB_00104637;\n        stringVar2 = strerror(*intPtr);\n        undefined8Var1 = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00103910(undefined8Var1,stringVar,stringVar2);\n        uintVar = 0;\n      } while( true );\n    }\n    uintVar = loopVar + 1;\n    longVar3 = unaff_R12;\nLAB_00103eac:\n    unaff_R12 = (long *)(ulong)uintVar;\n  } while( true );\nswitchD_00104029_caseD_77:\n  DAT_00108373 = 1;\n  goto LAB_00103ff6;\nswitchD_00104029_caseD_3f:\n  print_strings_usage_001030c0(_stderr);\nLAB_001040fd:\n  byteArray = (long *)xmalloc(8);\n  *byteArray = 0;\n  if (param_2_copy == argv) {\nLAB_0010411e:\n    if (*param_2_copy == 0) {\n      intVar = 0;\n    }\n    else {\n      longVar1 = 1;\n      do {\n        intVar = (int)longVar1;\n        param_2_copy = param_2_copy + longVar1;\n        longVar1 = longVar1 + 1;\n      } while (*param_2_copy != 0);\n    }\n    longVar2 = 0;\n    param_2_copy = (long *)xmalloc((long)(intVar + 1) << 3);\n    longVar1 = *param_2_copy;\n    while (longVar1 != 0) {\n      undefined8Var1 = xstrdup();\n      *(undefined8 *)((long)param_2_copy + longVar2) = undefined8Var1;\n      longVar2 = longVar2 + 8;\n      longVar1 = *(long *)((long)param_2_copy + longVar2);\n    }\n    *(undefined8 *)((long)param_2_copy + longVar2) = 0;\nLAB_00103dea:\n    param_2_copy = param_2_copy;\n    if (*byteArray != 0) {\n      longVar1 = 0;\n      do {\n        longVar1 = longVar1 + 1;\n      } while (byteArray[longVar1] != 0);\n      sizeVar3 = longVar1 * 8;\n      intVar = argc;\n      goto LAB_00103e18;\n    }\n  }\n  longVar1 = 0;\n  sizeVar3 = 0;\n  intVar = argc;\nLAB_00103e18:\n  free((void *)param_2_copy[(long)undefinedPtrPtr]);\n  param_2_copy = (long *)xrealloc(param_2_copy,(longVar1 + 1 + (long)intVar) * 8);\n  argc = intVar + -1 + (int)longVar1;\n  memmove(param_2_copy + (long)((long)undefinedPtrPtr + longVar1),(void *)((long)(param_2_copy + 1) + (long)longPtrArray),\n          (long)(intVar - loopVar) << 3);\n  memcpy((void *)((long)param_2_copy + (long)longPtrArray),byteArray,sizeVar3);\n  free(byteArray);\n  free(bytePtr5);\n  fclose(fileStream);\n  uintVar = (int)longVar3 + 1;\n  unaff_R12 = longPtrArray;\n  param_2_copy = param_2_copy;\n  longPtrArray = byteArray;\n  if ((int)uintVar < argc) goto LAB_00103eac;\n  goto LAB_00103fa6;\n}\n\n",
            "called": [
                "getopt_long",
                "xstrdup",
                "bfd_openr",
                "bfd_errmsg",
                "FUN_001030c0",
                "FUN_00103240",
                "xmalloc",
                "bfd_malloc_and_get_section",
                "xrealloc",
                "bindtextdomain",
                "fseek",
                "fclose",
                "free",
                "fflush",
                "strtoul",
                "__errno_location",
                "xmalloc_set_program_name",
                "dcgettext",
                "bfd_get_error",
                "fopen",
                "FUN_00104a60",
                "strerror",
                "setlocale",
                "textdomain",
                "memcpy",
                "xexit",
                "perror",
                "exit",
                "bfd_check_format",
                "ferror",
                "ftell",
                "FUN_00103910",
                "bfd_init",
                "strcmp",
                "stat",
                "fprintf",
                "printf",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "bfd_set_error_program_name",
                "bfd_close",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103aa0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "improved_string_processing_00103aa0"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00103aa0"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_function_call_00102020"
            },
            "code": "\nvoid executeIndirectFunctionCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_call_00102020"
        }
    },
    "used_tokens": 33785,
    "layers": [
        [
            "FUN_00103510",
            "FUN_0010293a",
            "FUN_0010282b",
            "FUN_0010286f",
            "FUN_001038b0",
            "FUN_0010290e",
            "FUN_001030c0",
            "FUN_001028b2",
            "FUN_00102771",
            "FUN_001034fa",
            "FUN_001027e2",
            "FUN_00102020"
        ],
        [
            "FUN_00103910",
            "FUN_00103520",
            "FUN_00104a60",
            "FUN_00103890",
            "FUN_00103810",
            "FUN_00102853"
        ],
        [
            "FUN_00102b11",
            "FUN_001034d5"
        ],
        [
            "FUN_00103240",
            "FUN_0010259a",
            "FUN_00102330"
        ],
        [
            "FUN_00103aa0"
        ]
    ],
    "locked_functions": []
}