{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "store_parameter_value_00113dfe",
                "param_1": "type",
                "param_2": "value",
                "lVar1": "typeReference"
            },
            "code": "\nvoid storeParameterValue_00113dfe(undefined4 type,undefined value)\n\n{\n  long typeReference;\n  \n  typeReference = debug_make_type_constprop_0(3,type);\n  if (typeReference != 0) {\n    *(undefined *)(typeReference + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "store_parameter_value_00113dfe"
        },
        "FUN_001045d0": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001045d0"
        },
        "FUN_001044b0": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "stab_demangle_v3_arg",
                "bfd_nonfatal.cold",
                "debug_record_line",
                "list_matching_formats",
                "list_supported_targets",
                "FUN_0010554f",
                "debug_record_variable",
                "finish_stab",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "copy_usage",
                "stab_demangle_v3_arglist",
                "main",
                "stab_bad_demangle",
                "debug_name_type",
                "debug_write_type.constprop.0",
                "bfd_nonfatal_message",
                "display_info.isra.0",
                "debug_end_block",
                "stab_find_slot",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "stab_find_type",
                "report",
                "debug_end_function",
                "debug_start_block",
                "parse_stab",
                "stab_context",
                "parse_stab_type",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_001044b0"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_to_variable_0010ab4d",
                "param_1": "base_address",
                "param_2": "string_to_append",
                "param_3": "unused_parameter",
                "param_4": "additional_data",
                "uVar1": "struct_address",
                "lVar2": "struct_base_address",
                "auVar3": "result",
                "sVar4": "input_length",
                "pcVar5": "existing_string",
                "sVar6": "existing_string_length",
                "auVar7": "new_string_result"
            },
            "code": "\nundefined  [16] append_string_to_variable_0010ab4d(long base_address,char *string_to_append,undefined8 unused_parameter,undefined8 additional_data)\n\n{\n  ulong struct_address;\n  long struct_base_address;\n  undefined result [16];\n  size_t input_length;\n  char *existing_string;\n  size_t existing_string_length;\n  undefined new_string_result [16];\n  \n  struct_address = *(ulong *)(base_address + 0x60);\n  if ((struct_address != 0) && (*(long *)(struct_address + 0x20) != 0)) {\n    existing_string = *(char **)(struct_address + 0x30);\n    input_length = strlen(string_to_append);\n    if (existing_string == (char *)0x0) {\n      existing_string = (char *)xmalloc(input_length + 3);\n      *existing_string = '\\0';\n    }\n    else {\n      existing_string_length = strlen(existing_string);\n      existing_string = (char *)xrealloc(existing_string,input_length + 4 + existing_string_length);\n    }\n    input_length = strlen(existing_string);\n    sprintf(existing_string + input_length,\"%s::\",string_to_append);\n    struct_base_address = *(long *)(base_address + 0x60);\n    *(char **)(struct_base_address + 0x30) = existing_string;\n    new_string_result._1_7_ = (undefined7)((ulong)struct_base_address >> 8);\n    new_string_result[0] = 1;\n    new_string_result._8_8_ = additional_data;\n    return new_string_result;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = struct_address;\n  return result << 0x40;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "xrealloc",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "append_string_to_variable_0010ab4d"
        },
        "FUN_001046f0": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046f0"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "add_type_to_namespace_0010c218",
                "param_1": "file",
                "param_2": "typeSize",
                "param_3": "dataType",
                "uVar1": "errorMessage",
                "lVar2": "type",
                "pauVar3": "typePtr",
                "lVar4": "namespaceEntry"
            },
            "code": "\n\n\nlong addTypeToNamespace_0010c218(long file,long typeSize,long dataType)\n\n{\n  undefined8 errorMessage;\n  long type;\n  undefined (*typePtr) [16];\n  long namespaceEntry;\n  \n  if ((typeSize != 0) && (dataType != 0)) {\n    if ((*(long *)(file + 8) == 0) || (*(long *)(file + 0x10) == 0)) {\n      errorMessage = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      type = debug_make_type_constprop_0(0x16,0);\n      if (type != 0) {\n        typePtr = (undefined (*) [16])xmalloc(0x10);\n        namespaceEntry = *(long *)(file + 0x10);\n        *typePtr = ZEXT816(0);\n        *(long *)(*typePtr + 8) = dataType;\n        *(undefined (**) [16])(type + 0x10) = typePtr;\n        namespaceEntry = debug_add_to_namespace_constprop_0(namespaceEntry + 0x10,typeSize,0,3);\n        if (namespaceEntry != 0) {\n          *(long *)(namespaceEntry + 0x20) = type;\n          *(long *)*typePtr = namespaceEntry;\n          return type;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "stab_find_type",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "add_type_to_namespace_0010c218"
        },
        "FUN_00128060": {
            "renaming": {},
            "code": "\n\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128060",
            "calling": [
                "strncpy"
            ],
            "imported": false,
            "current_name": "FUN_00128060"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  strip_symbols = 0;\n  discard_locals = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    fatal(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = program_name;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    fatal(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = is_strip;\n  if ((int)is_strip < 0) {\n    sVar15 = strlen(program_name);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  is_strip = uVar10;\n  strip_specific_htab = create_symbol_htab();\n  strip_unneeded_htab = create_symbol_htab();\n  keep_specific_htab = create_symbol_htab();\n  localize_specific_htab = create_symbol_htab();\n  globalize_specific_htab = create_symbol_htab();\n  keepglobal_specific_htab = create_symbol_htab();\n  weaken_specific_htab = create_symbol_htab();\n  redefine_specific_htab = htab_create_alloc(0x10,htab_hash_redefnode,eq_string_redefnode);\n  redefine_specific_reverse_htab = create_symbol_htab();\n  puVar6 = xatexit_head_lto_priv_0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = xatexit_cleanup_lto_priv_0;\n  }\n  if (0x1f < *(int *)(xatexit_head_lto_priv_0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    xatexit_head_lto_priv_0 = (undefined *)puVar20;\n  }\n  puVar6 = xatexit_head_lto_priv_0;\n  iVar11 = *(int *)(xatexit_head_lto_priv_0 + 8);\n  *(int *)(xatexit_head_lto_priv_0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = delete_symbol_htabs;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (is_strip != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",strip_options);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        deterministic = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        strip_usage(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        merge_notes = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        handle_remove_section_option(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        strip_symbols = 2;\n        break;\n      case 0x55:\n        deterministic = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        discard_locals = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        preserve_dates = 1;\n        break;\n      case 0x73:\n        strip_symbols = 7;\n        break;\n      case 0x76:\n        verbose = 1;\n        break;\n      case 0x77:\n        wildcard = 1;\n        break;\n      case 0x78:\n        discard_locals = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        keep_file_symbols = 1;\n        break;\n      case 0xb3:\n        find_section_list(_optarg,1,4);\n        break;\n      case 0xb5:\n        keep_section_symbols = 1;\n        break;\n      case 0xba:\n        merge_notes = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        strip_symbols = 4;\n        break;\n      case 0xc6:\n        find_section_list(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        strip_symbols = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (strip_symbols < 8)) &&\n           ((-0xdaL >> ((byte)strip_symbols & 0x3f) & 1U) == 0)) {\n          merge_notes = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (deterministic < 0) {\n          deterministic = 1;\n        }\n        if (((strip_symbols | discard_locals) == 0) &&\n           (lVar30 = htab_elements(strip_specific_htab), lVar30 == 0)) {\n          strip_symbols = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        strip_usage(_stderr,1);\n        unaff_R13 = strip_options;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",copy_options);\n  pFVar14 = _optarg;\n  uVar10 = reverse_bytes;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    display_info_isra_0();\n    return status;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((interleave != 0) && (copy_byte == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (interleave <= copy_byte) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (interleave - copy_byte < copy_width) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (deterministic < 0) {\n    deterministic = 1;\n  }\n  if ((strip_symbols | discard_locals) == 0) {\n    strip_symbols = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = startswith_lto_priv_0_lto_priv_0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = convert_efi_target(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = startswith_lto_priv_0_lto_priv_0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = convert_efi_target(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (pe_subsystem == -1) {\n        pe_subsystem = (short)iVar11;\n      }\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)template_in_dir(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  copy_file(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (status == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = smart_rename(__template,pcVar32,pcVar26,local_c8,preserve_dates);\n    status = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = change_sections;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-vma\",uVar3,\n                    (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          non_fatal(uVar22,\"--change-section-lma\",uVar3,\n                    (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(strip_specific_buffer);\n  free(strip_unneeded_buffer);\n  free(keep_specific_buffer);\n  free(localize_specific_buffer);\n  free(globalize_specific_buffer);\n  free(keepglobal_specific_buffer);\n  free(weaken_specific_buffer);\n  return status;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = status;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return status;\n  }\n  lVar30 = get_file_size(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    status = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)template_in_dir(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        bfd_nonfatal_message(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    status = 0;\n    copy_file(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (status == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = smart_rename(pFVar21,pFVar33,iVar13,local_c8,preserve_dates);\n      status = uVar10;\n      if (iVar11 != 0) {\n        status = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  strip_symbols = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        add_redefine_and_check\n                  (pFVar14,unaff_R13,\n                   (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      fatal(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    add_redefine_and_check\n              (pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_flags(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)section_rename_list;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    copy_usage(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          fatal(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)section_rename_list;\n    section_rename_list = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    deterministic = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(keepglobal_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    copy_usage(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(keep_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(localize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    merge_notes = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(strip_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    handle_remove_section_option(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    strip_symbols = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    deterministic = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(weaken_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    discard_locals = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_byte = (int)lVar30;\n    if (copy_byte < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    strip_symbols = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      interleave = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      interleave = (int)lVar30;\n      if (interleave < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    find_section_list(_optarg,1,2);\n    sections_copied = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    preserve_dates = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    verbose = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    wildcard = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    discard_locals = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    add_sections = init_section_add(_optarg,add_sections,\"--add-section\");\n    section_add_load_file(add_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    long_section_names = 1;\n    gnu_debuglink_filename = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = xstrndup(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = xstrndup(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            non_fatal(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            fatal(uVar24,\n                  \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                 );\n          }\n          uVar24 = xstrndup(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = add_sym_list;\n        bVar39 = add_sym_list == (undefined8 *)0x0;\n        add_sym_list = puVar20;\n        if (bVar39) {\n          add_sym_tail = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)add_sym_tail = puVar20;\n    add_sym_tail = (undefined *)puVar20;\nLAB_00117e65:\n    add_symbols = add_symbols + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    use_alt_mach_code = strtoul((char *)_optarg,(char **)0x0,0);\n    if (use_alt_mach_code == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    change_section_address = parse_vma(_optarg,\"--change-addresses\");\n    change_start = change_section_address;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    change_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,uVar12);\n    lVar17 = parse_vma((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    change_start = parse_vma(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      do_debug_sections = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      do_debug_sections = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      do_debug_sections = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      do_debug_sections = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      do_debug_sections = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    convert_debugging = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    do_debug_sections = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    dump_sections = init_section_add(_optarg,dump_sections,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      do_elf_stt_common = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    strip_symbols = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    extract_symbol = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    pe_file_alignment = parse_vma(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)parse_vma(_optarg,\"--gap-fill\");\n    gap_fill = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      non_fatal(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    gap_fill_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(globalize_specific_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    add_specific_symbols(_optarg,globalize_specific_htab,&globalize_specific_buffer);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    pe_heap_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_heap_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    pe_image_base = parse_vma(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x100;\n    bfd_flags_to_set = bfd_flags_to_set & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    copy_width = (int)lVar30;\n    if (copy_width < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    add_specific_symbols(_optarg,keepglobal_specific_htab,&keepglobal_specific_buffer);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    keep_file_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    find_section_list(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    add_specific_symbols(_optarg,keep_specific_htab,&keep_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    keep_section_symbols = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    localize_hidden = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    add_specific_symbols(_optarg,localize_specific_htab,&localize_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      long_section_names = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      long_section_names = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    merge_notes = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    strip_symbols = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    pad_to = parse_vma(_optarg,\"--pad-to\");\n    pad_to_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    prefix_alloc_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    prefix_sections_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    prefix_symbols_string = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    bfd_flags_to_set = bfd_flags_to_set | 0x100;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    bfd_flags_to_set = bfd_flags_to_set | 0x80;\n    bfd_flags_to_clear = bfd_flags_to_clear & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    add_redefine_and_check(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      fatal(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    remove_leading_char = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    find_section_list(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)reverse_bytes;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    reverse_bytes = (uint)uVar27;\n    if (((int)reverse_bytes < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != reverse_bytes) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      non_fatal(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    pe_section_alignment = parse_vma(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      fatal(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)find_section_list(pcVar32,1,0x80);\n    uVar12 = parse_flags((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = find_section_list(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    set_start = parse_vma(_optarg,\"--set-start\");\n    set_start_set = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = parse_vma(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    pe_stack_reserve = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        pe_stack_commit =\n             strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0);\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          non_fatal(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    non_fatal(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    strip_symbols = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    add_specific_symbols(_optarg,strip_specific_htab,&strip_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    strip_symbols = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(strip_unneeded_htab,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    add_specific_symbols(_optarg,strip_unneeded_htab,&strip_unneeded_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      pe_major_subsystem_version = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        pe_minor_subsystem_version = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        non_fatal(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      pe_subsystem = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&v_0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &v_0 + (long)unaff_R13 * 2;\n      pe_subsystem = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      fatal(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (pe_file_alignment == -1) {\n        pe_file_alignment = 0x200;\n      }\n      if (pe_section_alignment == -1) {\n        pe_section_alignment = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    update_sections = init_section_add(_optarg,update_sections,\"--update-section\");\n    section_add_load_file(update_sections);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = parse_vma(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    weaken = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    add_specific_symbols(_optarg,weaken_specific_htab,&weaken_specific_buffer);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    bfd_flags_to_clear = bfd_flags_to_clear | 0x80;\n    bfd_flags_to_set = bfd_flags_to_set & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  fatal(uVar24,pFVar14);\n}\n\n",
            "called": [
                "add_redefine_and_check",
                "strchr",
                "bfd_set_error_program_name",
                "memmove",
                "find_section_list",
                "filename_cmp",
                "xstrndup",
                "strtoul",
                "fatal",
                "copy_usage",
                "dup",
                "strlen",
                "strncpy",
                "bfd_init",
                "dcgettext",
                "htab_create_alloc",
                "xrealloc",
                "ftell",
                "bfd_nonfatal_message",
                "convert_efi_target",
                "display_info.isra.0",
                "strtol",
                "add_specific_symbols",
                "strcmp",
                "mkstemp",
                "non_fatal",
                "template_in_dir",
                "free",
                "getc",
                "bindtextdomain",
                "bfd_set_default_target",
                "eq_string_redefnode",
                "fprintf",
                "strcpy",
                "handle_remove_section_option",
                "delete_symbol_htabs",
                "print_version",
                "fseek",
                "getopt_long",
                "copy_file",
                "setlocale",
                "fopen",
                "__errno_location",
                "htab_hash_redefnode",
                "stat",
                "free",
                "strerror",
                "section_add_load_file",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "parse_flags",
                "close",
                "startswith.lto_priv.0.lto_priv.0",
                "strip_usage",
                "init_section_add",
                "xcalloc",
                "htab_elements",
                "strncasecmp",
                "malloc",
                "get_file_size",
                "bfd_scan_arch",
                "unlink_if_ordinary",
                "memcpy",
                "strcasecmp",
                "xexit",
                "htab_find_slot",
                "ferror",
                "fread",
                "create_symbol_htab",
                "xatexit_cleanup.lto_priv.0",
                "bfd_get_error",
                "xstrdup",
                "fclose",
                "parse_vma",
                "smart_rename",
                "xmalloc",
                "textdomain"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_00128180": {
            "renaming": {},
            "code": "\n\n\n\nint dup(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128180",
            "calling": [
                "dup"
            ],
            "imported": false,
            "current_name": "FUN_00128180"
        },
        "FUN_00104090": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "delete_symbol_htabs"
            ],
            "imported": false,
            "current_name": "FUN_00104090"
        },
        "FUN_00128068": {
            "renaming": {},
            "code": "\n\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128068",
            "calling": [
                "strncmp"
            ],
            "imported": false,
            "current_name": "FUN_00128068"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "blockPtr",
                "param_2": "startAddress",
                "puVar1": "currentPtr",
                "uVar2": "isSuccess",
                "puVar3": "newBlockPtr",
                "puVar4": "traversePtr",
                "lVar5": "blockAddress",
                "puVar6": "previousPtr",
                "puVar7": "tempPtr",
                "bVar8": "counter",
                "auVar9": "result"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long blockPtr,undefined8 startAddress,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 *currentPtr;\n  undefined8 isSuccess;\n  undefined4 *newBlockPtr;\n  undefined8 *traversePtr;\n  long blockAddress;\n  undefined8 *previousPtr;\n  undefined4 *tempPtr;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  if ((*(long *)(blockPtr + 8) == 0) || (*(long *)(blockPtr + 0x20) == 0)) {\n    isSuccess = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",isSuccess);\n    isSuccess = 0;\n  }\n  else {\n    newBlockPtr = (undefined4 *)xmalloc(0x30);\n    tempPtr = newBlockPtr;\n    for (blockAddress = 0xc; blockAddress != 0; blockAddress = blockAddress + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)counter * -2 + 1;\n    }\n    blockAddress = *(long *)(blockPtr + 0x20);\n    *(undefined8 *)(newBlockPtr + 6) = startAddress;\n    *(undefined8 *)(newBlockPtr + 8) = 0xffffffffffffffff;\n    *(long *)(newBlockPtr + 2) = blockAddress;\n    currentPtr = *(undefined8 **)(blockAddress + 0x10);\n    previousPtr = (undefined8 *)(blockAddress + 0x10);\n    while (traversePtr = currentPtr, traversePtr != (undefined8 *)0x0) {\n      previousPtr = traversePtr;\n      currentPtr = (undefined8 *)*traversePtr;\n    }\n    *previousPtr = newBlockPtr;\n    isSuccess = 1;\n    *(undefined4 **)(blockPtr + 0x20) = newBlockPtr;\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = isSuccess;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_field_string_0010ba08",
                "param_1": "fieldArray",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "fieldSize",
                "param_5": "param5",
                "cVar1": "flag",
                "iVar2": "size",
                "lVar3": "fieldIndex",
                "__s": "structName",
                "sVar4": "structNameLength",
                "sVar5": "fieldNameLength",
                "sVar6": "param3Length",
                "__s_00": "outputString",
                "uVar7": "errorString",
                "uVar8": "returnValue",
                "pcVar9": "paramString"
            },
            "code": "\nundefined8\ngenerateFieldString_0010ba08(undefined8 *fieldArray,char *fieldName,undefined8 param3,ulong fieldSize,int param5)\n\n{\n  char flag;\n  int size;\n  long fieldIndex;\n  char *structName;\n  size_t structNameLength;\n  size_t fieldNameLength;\n  size_t param3Length;\n  char *outputString;\n  undefined8 errorString;\n  undefined8 returnValue;\n  char *paramString;\n  \n  flag = *(char *)(fieldArray[0xc] + 0x1c);\n  size = *(int *)(fieldArray[0xc] + 0x18);\n  structName = (char *)stab_pop_type();\n  if (*(char **)(fieldArray[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    structNameLength = strlen(*(char **)(fieldArray[0xc] + 0x20));\n    fieldNameLength = strlen(fieldName);\n    param3Length = strlen(structName);\n    outputString = (char *)xmalloc(structNameLength + 0x32 + fieldNameLength + param3Length);\n    if (param5 == 1) {\n      paramString = \"/1\";\n    }\n    else {\n      paramString = \"/0\";\n      if ((param5 != 2) && (paramString = \"\", param5 != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(size * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*fieldArray;\n      errorString = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      non_fatal(errorString,returnValue,fieldName);\n    }\n    sprintf(outputString,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(fieldArray[0xc] + 0x20),fieldName,paramString,structName,\n            param3,fieldSize);\n    free(*(void **)(fieldArray[0xc] + 0x20));\n    fieldIndex = fieldArray[0xc];\n    *(char **)(fieldIndex + 0x20) = outputString;\n    if (flag != '\\0') {\n      *(undefined *)(fieldIndex + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)fieldIndex >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_field_string_0010ba08"
        },
        "FUN_00128188": {
            "renaming": {},
            "code": "\n\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* lseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128188",
            "calling": [
                "lseek"
            ],
            "imported": false,
            "current_name": "FUN_00128188"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "generate_formatted_string_0010aa53",
                "param_1": "input",
                "param_2": "value",
                "param_3": "prefix",
                "param_4": "flag",
                "cVar1": "typeChar",
                "__s": "poppedString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "lVar2": "structPointer",
                "uVar8": "success",
                "uVar9": "index",
                "uVar10": "count",
                "cVar3": "digit",
                "lVar7": "reallocResult"
            },
            "code": "\nundefined8 generateFormattedString_0010aa53(long input,undefined8 value,char prefix,int flag)\n\n{\n  char typeChar;\n  long structPointer;\n  char digit;\n  uint uVar4;\n  char *poppedString;\n  size_t stringLength;\n  char *formattedString;\n  long reallocResult;\n  undefined8 success;\n  ulong index;\n  ulong count;\n  \n  typeChar = *(char *)(*(long *)(input + 0x60) + 0x1c);\n  poppedString = (char *)stab_pop_type();\n  stringLength = strlen(poppedString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = prefix + '0';\n  if (flag == 1) {\n    digit = '1';\n  }\n  else {\n    digit = '0';\n    if ((flag != 2) && (digit = '2', flag != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = digit;\n  sprintf(formattedString + 2,\"%ld,%s;\",value);\n  free(poppedString);\n  structPointer = *(long *)(input + 0x60);\n  success = 0;\n  if ((structPointer != 0) && (*(long *)(structPointer + 0x20) != 0)) {\n    structPointer = *(long *)(structPointer + 0x28);\n    count = 0;\n    if (structPointer != 0) {\n      uVar4 = 0;\n      do {\n        index = (ulong)uVar4;\n        count = (ulong)uVar4;\n        uVar4 = uVar4 + 1;\n      } while (*(long *)(structPointer + index * 8) != 0);\n    }\n    reallocResult = xrealloc(structPointer,(ulong)((int)count + 2) << 3);\n    *(char **)(reallocResult + count * 8) = formattedString;\n    *(undefined8 *)(reallocResult + (ulong)((int)count + 1) * 8) = 0;\n    structPointer = *(long *)(input + 0x60);\n    *(long *)(structPointer + 0x28) = reallocResult;\n    if (typeChar != '\\0') {\n      *(undefined *)(structPointer + 0x1c) = 1;\n    }\n    success = 1;\n  }\n  return success;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "improved_stab_record_0011173a",
                "param_1": "paramPtr",
                "param_2": "paramArray",
                "param_3": "paramType",
                "param_4": "paramValue",
                "param_5": "paramAddr",
                "param_6": "paramString",
                "cVar1": "var1",
                "bVar2": "var2",
                "__ptr": "ptr",
                "cVar3": "var3",
                "uVar4": "var4",
                "iVar5": "var5",
                "puVar6": "var6",
                "plVar7": "var7",
                "pcVar8": "var8",
                "uVar9": "var9",
                "lVar10": "var10",
                "lVar11": "var11",
                "lVar12": "var12",
                "lVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "pcVar16": "var16",
                "uVar17": "var17",
                "pplVar18": "var18",
                "dVar19": "var19",
                "local_48": "localString",
                "local_40": "localArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined improvedStabRecord_0011173a(undefined8 paramPtr,long *paramArray,int paramType,int paramValue,ulong paramAddr,\n                      char *paramString)\n\n{\n  char var1;\n  byte var2;\n  void *ptr;\n  char var3;\n  undefined var4;\n  int var5;\n  undefined8 *var6;\n  long *var7;\n  char *var8;\n  undefined8 var9;\n  long var10;\n  long var11;\n  long var12;\n  long **ppvar13;\n  ulong var14;\n  ulong var15;\n  char *var16;\n  uint var17;\n  long **var18;\n  double var19;\n  char *localString;\n  long **localArray [2];\n  \n  if (paramArray[4] != 0) {\n    if (((paramType == 100) && (*paramString != '\\0')) && (paramArray[5] == paramAddr)) goto LAB_00111a06;\n    var3 = debug_set_filename(paramPtr);\n    if (var3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)paramArray + 0x44) = 0;\n    *(undefined4 *)(paramArray + 8) = 0;\n    paramArray[9] = paramArray[4];\n    if (*(char *)(paramArray + 1) == '\\0') {\n      paramArray[6] = paramArray[5];\n    }\n    *(undefined4 *)(paramArray + 0x10) = 1;\n    var6 = (undefined8 *)xmalloc(8);\n    paramArray[0x11] = (long)var6;\n    *var6 = 0;\n    paramArray[4] = 0;\n  }\n  strlen(paramString);\n  if (paramType == 0x84) {\nLAB_00111ab7:\n    var4 = debug_start_source(paramPtr,paramString);\n    return var4;\n  }\n  if (paramType < 0x85) {\n    if (paramType == 0x3c) {\n      var5 = strcmp(paramString,\"gcc2_compiled.\");\n      if (var5 == 0) {\n        *(undefined4 *)(paramArray + 8) = 2;\n        return 1;\n      }\n      var5 = strcmp(paramString,\"gcc_compiled.\");\n      if (var5 == 0) {\n        *(undefined4 *)(paramArray + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)paramArray + 0x44) = 1;\n      return 1;\n    }\n    if (paramType < 0x3d) {\n      if (paramType == 0x24) {\n        if (*paramString == '\\0') {\n          if (*(char *)(paramArray + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(paramArray + 1) != '\\0') {\n            paramAddr = paramAddr + paramArray[7];\n          }\n          var3 = stab_emit_pending_vars(paramPtr,paramArray);\n          if (var3 != '\\0') {\n            var3 = debug_end_function(paramPtr,paramAddr);\n            if (var3 != '\\0') {\n              *(undefined *)(paramArray + 0xc) = 0;\n              paramArray[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(paramArray + 0xc) != '\\0') &&\n           ((paramAddr < (ulong)paramArray[0xd] || (paramArray[0xd] == 0xffffffffffffffff)))) {\n          paramArray[0xd] = paramAddr;\n        }\n      }\n      else if (paramType < 0x25) {\n        if (paramType == 0xc) {\n          return 1;\n        }\n        if (paramType - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (paramType == 0x2a) {\n          return 1;\n        }\n        if (paramType == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (paramType == 100) {\nLAB_00111a06:\n        if (*(char *)(paramArray + 0xc) != '\\0') {\n          var14 = paramAddr;\n          if (((*paramString != '\\0') && (var15 = paramArray[0xd], var15 != 0xffffffffffffffff)) &&\n             (var14 = var15, paramAddr < var15)) {\n            var14 = paramAddr;\n          }\n          var3 = stab_emit_pending_vars(paramPtr,paramArray);\n          if (var3 == '\\0') {\n            return 0;\n          }\n          var3 = debug_end_function(paramPtr,var14);\n          if (var3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(paramArray + 0xc) = 0;\n          paramArray[0xd] = -1;\n        }\n        if (*paramString == '\\0') {\n          return 1;\n        }\n        ptr = (void *)paramArray[4];\n        if (ptr == (void *)0x0) {\n          var12 = xstrdup(paramString);\n          paramArray[4] = var12;\n        }\n        else {\n          if (*paramString == '/') {\n            var12 = xstrdup(paramString);\n          }\n          else {\n            var12 = concat(ptr,paramString,0);\n          }\n          paramArray[4] = var12;\n          free(ptr);\n        }\n        paramArray[5] = paramAddr;\n        return 1;\n      }\n      if (paramType < 0x65) {\n        if (paramType == 0x44) {\n          var12 = 0;\n          if (*(char *)(paramArray + 0xc) != '\\0') {\n            var12 = paramArray[7];\n          }\n          var4 = debug_record_line(paramPtr,(long)paramValue,var12 + paramAddr);\n          return var4;\n        }\n        if (paramType == 0x62) {\n          return 1;\n        }\n      }\n      else if (paramType == 0x82) {\n        var7 = (long *)xmalloc();\n        var5 = *(int *)(paramArray + 0x10);\n        var10 = paramArray[10];\n        var11 = paramArray[0xb];\n        var7[5] = 0;\n        var12 = paramArray[0x11];\n        *(int *)(var7 + 4) = var5;\n        var17 = var5 + 1;\n        *(uint *)(paramArray + 0x10) = var17;\n        *var7 = var11;\n        var7[1] = var10;\n        var7[2] = (long)paramString;\n        var7[3] = paramAddr;\n        paramArray[10] = (long)var7;\n        paramArray[0xb] = (long)var7;\n        var12 = xrealloc(var12,(ulong)var17 << 3);\n        var17 = *(uint *)(var7 + 4);\n        paramArray[0x11] = var12;\n        *(undefined8 *)(var12 + (ulong)var17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    var8 = strchr(paramString,0x3a);\n    if ((var8 != (char *)0x0) && ((var8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(paramArray + 0xc) != '\\0') {\n        var14 = paramArray[0xd];\n        var15 = paramAddr;\n        if ((var14 != 0xffffffffffffffff) && (var15 = var14, paramAddr < var14)) {\n          var15 = paramAddr;\n        }\n        var3 = stab_emit_pending_vars(paramPtr,paramArray);\n        if (var3 == '\\0') {\n          return 0;\n        }\n        var3 = debug_end_function(paramPtr,var15);\n        if (var3 == '\\0') {\n          return 0;\n        }\n        paramArray[0xd] = -1;\n      }\n      if (*(char *)(paramArray + 1) != '\\0') {\n        paramArray[7] = paramAddr;\n      }\n      *(undefined *)(paramArray + 0xc) = 1;\n    }\n    localString = strchr(paramString,0x3a);\n    if (localString == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localString[1] == ':') goto code_r0x00111cc7;\n    if (*paramString == '$') {\n      var3 = paramString[1];\n      var16 = \"eh_throw\";\n      if (var3 != 'e') {\n        if (var3 < 'f') {\n          if ((var3 != 'X') && (var3 != '_')) {\nLAB_00111d1a:\n            var9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            warn_stab(paramString,var9);\n          }\n        }\n        else {\n          var16 = \"this\";\n          if (var3 == 't') goto LAB_00111d62;\n          if (var3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      var16 = (char *)0x0;\n      if ((paramString != localString) && ((*paramString != ' ' || (localString != paramString + 1)))) {\n        var16 = (char *)savestring(paramString,(int)localString - (int)paramString);\n      }\n    }\nLAB_00111d62:\n    var2 = localString[1];\n    var8 = localString + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)var2 * 2) >> 2) & 1 |\n        (var2 == 0x2d || var2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 4;\n      goto LAB_001123e8;\n    }\n    if (var2 == 0) goto switchD_00111de5_caseD_44;\n    var8 = localString + 2;\n    var3 = localString[1];\n    switch(var3) {\n    case 'C':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      var8 = \"debug_record_label: not implemented\";\n      if (var12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var3 = debug_record_function(paramPtr,var16,var12,var3 == 'F',paramAddr);\n      if (var3 != '\\0') {\n        do {\n          if (*localString != ';') {\n            return 1;\n          }\n          localString = localString + 1;\n          var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n        } while (var12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      if (var16 == (char *)0x0) goto LAB_0011208f;\n      var10 = paramArray[3];\n      var7 = (long *)paramArray[2];\n      var3 = *(char *)(*(long *)(*paramArray + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (paramType == 0x24) {\n        localString = var8;\n        do {\n          if (*localString != ';') {\n            return 1;\n          }\n          localString = localString + 1;\n          var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n        } while (var12 != 0);\n        return 0;\n      }\n    case 'R':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 2;\n      break;\n    case 'S':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      var3 = localString[2];\n      if (var3 == 't') {\n        var8 = localString + 3;\n      }\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,var16,&localString,localArray);\n      if (var12 == 0) {\n        return 0;\n      }\n      if (var16 == (char *)0x0) {\n        return 1;\n      }\n      var1 = *(char *)(paramArray + 0x35);\n      var7 = (long *)debug_tag_type(paramPtr,var16,var12);\n      if (var7 == (long *)0x0) {\n        return 0;\n      }\n      if (localArray[0] != (long **)0x0) {\n        *localArray[0] = var7;\n      }\n      if (var1 != '\\0') goto LAB_001122f0;\n      ppvar13 = (long **)(paramArray + 0x34);\n      var18 = (long **)paramArray[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      var8 = localString + 3;\n      if (((localString[2] != '\\0') && (var8 = localString + 4, localString[3] == 'n')) &&\n         (var8 = localString + 5, var16 = localString + 4, localString = var8, *var16 == '0')) {\n        for (; var8 = localString, *localString != '\\0'; localString = localString + 1) {\n          if (*localString == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 4;\n      break;\n    case 'c':\n      if (localString[2] == '=') {\n        var8 = localString + 4;\n        var3 = localString[3];\n        localString = var8;\n        if (var3 == 'i') {\n          var12 = strtol(var8,(char **)0x0,10);\n          if (var16 == (char *)0x0) {\n            return 0;\n          }\n          var10 = debug_add_to_current_namespace_constprop_0(paramPtr,var16,4);\n          if (var10 != 0) {\n            *(long *)(var10 + 0x20) = (long)(int)var12;\n            return 1;\n          }\n          return 0;\n        }\n        if (var3 == 'r') {\n          var19 = strtod(var8,(char **)0x0);\n          if (var16 == (char *)0x0) {\n            return 0;\n          }\n          var12 = debug_add_to_current_namespace_constprop_0(paramPtr,var16,5);\n          if (var12 != 0) {\n            *(double *)(var12 + 0x20) = var19;\n            return 1;\n          }\n          return 0;\n        }\n        if (var3 == 'e') {\n          var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n          if (var12 == 0) {\n            return 0;\n          }\n          var8 = localString;\n          if (*localString == ',') {\n            var10 = strtol(localString,(char **)0x0,10);\n            if (var16 == (char *)0x0) {\n              return 0;\n            }\n            var11 = debug_add_to_current_namespace_constprop_0(paramPtr,var16,6);\n            if (var11 != 0) {\n              var7 = (long *)xmalloc(0x10);\n              *var7 = var12;\n              var7[1] = (long)(int)var10;\n              *(long **)(var11 + 0x20) = var7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localString[2] == 'F') {\n        localString = localString + 3;\n        var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n        if (var12 == 0) {\n          return 0;\n        }\n        var9 = debug_make_function_type_isra_0(var12,0,0);\n        var12 = debug_make_pointer_type_isra_0(var9);\n      }\n      else {\n        localString = var8;\n        var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      }\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 1;\n      break;\n    case 'r':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 5;\nLAB_001123e8:\n      var3 = stab_record_variable(paramPtr,paramArray,var16,var12,var9,paramAddr);\n      goto joined_r0x001123f8;\n    case 't':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,var16,&localString,localArray);\n      if (var12 == 0) {\n        return 0;\n      }\n      if (var16 == (char *)0x0) {\n        return 1;\n      }\n      var7 = (long *)debug_name_type(paramPtr,var16,var12);\n      if (var7 == (long *)0x0) {\n        return 0;\n      }\n      if (localArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localArray[0] = var7;\n      return 1;\n    case 'v':\n      localString = var8;\n      var12 = parse_stab_type(paramPtr,paramArray,0,&localString,0);\n      if (var12 == 0) {\n        return 0;\n      }\n      var9 = 3;\n    }\n    var3 = debug_record_parameter(paramPtr,var16,var12,var9,paramAddr);\n    goto joined_r0x001123f8;\n  }\n  if (paramType == 0xe0) {\n    if ((*(char *)((long)paramArray + 0x44) != '\\0') && (paramValue == 1)) {\n      return 1;\n    }\n    var3 = stab_emit_pending_vars(paramPtr,paramArray);\n    if (var3 == '\\0') {\n      return 0;\n    }\n    var3 = debug_end_block(paramPtr,paramArray[7] + paramArray[6] + paramAddr);\n    if (var3 == '\\0') {\n      return 0;\n    }\n    paramArray = paramArray + 0xe;\n    *(int *)paramArray = *(int *)paramArray + -1;\n    var8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)paramArray) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < paramType) {\n      if (paramType == 0xe2) {\n        var8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        var8 = \"debug_end_common_block: not implemented\";\n        if (paramType != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      var9 = dcgettext(0,var8,5);\n      fprintf(_stderr,\"%s\\n\",var9);\n      return 0;\n    }\n    if (paramType != 0xc0) {\n      if (paramType == 0xc2) {\n        var5 = *(int *)(paramArray + 0x10);\n        *(uint *)(paramArray + 0x10) = var5 + 1U;\n        var12 = xrealloc(paramArray[0x11],(ulong)(var5 + 1U) << 3);\n        var6 = (undefined8 *)paramArray[0xb];\n        paramArray[0x11] = var12;\n        while( true ) {\n          if (var6 == (undefined8 *)0x0) {\n            var9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            warn_stab(paramString,var9);\n            *(undefined8 *)(paramArray[0x11] + (ulong)(*(int *)(paramArray + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((paramAddr == var6[3]) && (var5 = strcmp((char *)var6[2],paramString), var5 == 0))\n          break;\n          var6 = (undefined8 *)*var6;\n        }\n        *(undefined8 *)(var12 + (ulong)(*(int *)(paramArray + 0x10) - 1) * 8) = var6[5];\n        return 1;\n      }\n      if (paramType == 0xa2) {\n        var12 = paramArray[10];\n        if (var12 != 0) {\n          var10 = *(long *)(var12 + 8);\n          var17 = *(uint *)(var12 + 0x20);\n          paramArray[10] = var10;\n          if ((var17 < *(uint *)(paramArray + 0x10)) &&\n             (*(undefined8 *)(var12 + 0x28) = *(undefined8 *)(paramArray[0x11] + (ulong)var17 * 8),\n             var10 != 0)) {\n            paramString = *(char **)(var10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        paramString = (char *)paramArray[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)paramArray + 0x44) != '\\0') && (paramValue == 1)) {\n      return 1;\n    }\n    if (*(char *)(paramArray + 0xc) != '\\0') {\n      var3 = debug_start_block(paramPtr,paramArray[7] + paramArray[6] + paramAddr);\n      if (var3 == '\\0') {\n        return 0;\n      }\n      var3 = stab_emit_pending_vars(paramPtr,paramArray);\n      if (var3 != '\\0') {\n        *(int *)(paramArray + 0xe) = *(int *)(paramArray + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    var8 = \"N_LBRAC not within function\\n\";\n  }\n  var8 = (char *)dcgettext(0,var8,5);\n  fprintf(_stderr,var8);\n  return 0;\ncode_r0x00111cc7:\n  localString = localString + 2;\n  localString = strchr(localString,0x3a);\n  if (localString == (char *)0x0) {\n    var8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localString = var8;\n    bad_stab(paramString);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (var18 == (long **)0x0) {\nLAB_001122f0:\n    if (var3 != 't') {\n      return 1;\n    }\n    var7 = (long *)debug_name_type(paramPtr,var16,var7);\n    if (var7 != (long *)0x0) {\n      if (localArray[0] == (long **)0x0) {\n        return 1;\n      }\n      *localArray[0] = var7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)var18[1] == *var16) &&\n     (var5 = strcmp((char *)var18[1],var16), var5 == 0)) {\n    var18[3] = var7;\n    *ppvar13 = *var18;\n    goto LAB_001122f0;\n  }\n  ppvar13 = var18;\n  var18 = (long **)*var18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (var10 < 1) {\nLAB_0011208f:\n    var9 = 1;\nLAB_001121c4:\n    var3 = debug_record_variable(paramPtr,var16,var12,var9,paramAddr);\njoined_r0x001123f8:\n    if (var3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  var8 = *(char **)(*var7 + 8);\n  if ((var3 != '\\0') && (var3 == *var8)) {\n    var8 = var8 + 1;\n  }\n  if ((*var8 == *var16) && (var5 = strcmp(var8,var16), var5 == 0)) {\n    paramAddr = *(long *)(*var7 + 0x10) + *(long *)(*(long *)(*var7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  var10 = var10 + -1;\n  var7 = var7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "strchr",
                "debug_record_line",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0",
                "bad_stab",
                "savestring",
                "debug_name_type",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_emit_pending_vars",
                "debug_end_block",
                "strtol",
                "strcmp",
                "debug_record_function",
                "free",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "xstrdup",
                "stab_record_variable",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "debug_tag_type",
                "debug_start_source",
                "xmalloc",
                "warn_stab",
                "strtod",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "improved_stab_record_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_binary_00115dc0",
                "param_1": "binaryFile",
                "param_2": "sectionList",
                "param_3": "sectionListSize",
                "cVar1": "skipSuccess",
                "iVar2": "bfdError",
                "uVar3": "errorString",
                "lVar4": "relocSize",
                "puVar5": "relocTable",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "puVar7": "filteredRelocTable",
                "puVar8": "filteredRelocTablePtr",
                "uVar9": "index",
                "uStack_38": "undefinedValue"
            },
            "code": "\nvoid processBinary_00115dc0(undefined8 binaryFile,undefined8 *sectionList,long sectionListSize)\n\n{\n  char skipSuccess;\n  int bfdError;\n  undefined8 errorString;\n  long relocSize;\n  undefined8 *relocTable;\n  ulong relocCount;\n  code *jumptable;\n  undefined8 *filteredRelocTable;\n  undefined8 *filteredRelocTablePtr;\n  ulong index;\n  undefined8 undefinedValue;\n  \n  skipSuccess = skip_section(binaryFile,sectionList,0);\n  if (skipSuccess != '\\0') {\n    return;\n  }\n  errorString = sectionList[0xc];\n  if ((((*(byte *)(sectionListSize + 0x48) & 7) != 3) && (strip_symbols != 6)) &&\n     (relocSize = find_section_list(*sectionList,0,0x100), relocSize == 0)) {\n    relocSize = bfd_get_reloc_upper_bound(binaryFile,sectionList);\n    if (relocSize < 0) {\n      if ((relocSize != -1) || (bfdError = bfd_get_error(), bfdError != 5)) {\n        status = 1;\n        errorString = 0;\nLAB_00108315:\n        bfd_nonfatal_message(0,binaryFile,sectionList,errorString,undefinedValue);\n        return;\n      }\n    }\n    else if (relocSize != 0) {\n      relocTable = (undefined8 *)sectionList[0xe];\n      if (relocTable == (undefined8 *)0x0) {\n        relocTable = (undefined8 *)bfd_alloc(sectionListSize);\n        if (relocTable == (undefined8 *)0x0) {\n          bfd_nonfatal(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(binaryFile,sectionList,relocTable,isympp);\n        if ((long)relocCount < 0) {\n          status = 1;\n          errorString = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(sectionList + 0xf);\n      }\n      if (strip_symbols == 7) {\n        filteredRelocTable = relocTable;\n        for (index = 0; index != relocCount; index = index + 1) {\n          filteredRelocTablePtr = filteredRelocTable;\n          if (((*(long **)relocTable[index] != (long *)0x0) &&\n              (relocSize = **(long **)relocTable[index], relocSize != 0)) &&\n             (skipSuccess = is_specified_symbol(*(undefined8 *)(relocSize + 8),keep_specific_htab),\n             skipSuccess != '\\0')) {\n            filteredRelocTablePtr = filteredRelocTable + 1;\n            *filteredRelocTable = relocTable[index];\n          }\n          filteredRelocTable = filteredRelocTablePtr;\n        }\n        *filteredRelocTable = 0;\n        relocCount = (long)filteredRelocTable - (long)relocTable >> 3;\n      }\n      jumptable = *(code **)(*(long *)(sectionListSize + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocTable = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocTable = (undefined8 *)0x0;\n  jumptable = *(code **)(*(long *)(sectionListSize + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumptable)(sectionListSize,errorString,relocTable,relocCount);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "bfd_canonicalize_reloc",
                "xexit",
                "find_section_list",
                "bfd_nonfatal_message",
                "bfd_get_reloc_upper_bound",
                "copy_relocations_in_section.cold",
                "skip_section",
                "bfd_nonfatal",
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_00115dc0"
        },
        "FUN_001044c0": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001044c0"
        },
        "FUN_001043a0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001043a0"
        },
        "FUN_001045e0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "bfd_nonfatal.cold",
                "list_matching_formats",
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_001045e0"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "reverse_demangle_and_find_tagged_type_0010d559",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "bVar1": "byteValue",
                "pbVar2": "bytePtr",
                "cVar3": "charValue",
                "uVar4": "uintValue",
                "iVar5": "intValue",
                "ppcVar6": "charPtrPtr",
                "sVar7": "sizeValue",
                "lVar8": "longValue",
                "plVar9": "longPtr",
                "pcVar10": "charPtr",
                "__s1": "string1",
                "__ptr": "voidPtr",
                "pbVar11": "bytePtr2",
                "uVar12": "undefined8Value",
                "__nptr": "bytePtr3",
                "local_64": "localCounter",
                "local_40": "localStrings"
            },
            "code": "\nundefined8 reverseDemangleAndFindTaggedType_0010d559(undefined8 *arg1,byte **arg2,long *arg3)\n\n{\n  byte byteValue;\n  byte *bytePtr;\n  char charValue;\n  uint uintValue;\n  int intValue;\n  char **charPtrPtr;\n  size_t sizeValue;\n  long longValue;\n  long *longPtr;\n  char *charPtr;\n  char *string1;\n  void *voidPtr;\n  byte *bytePtr2;\n  undefined8 undefined8Value;\n  byte *bytePtr3;\n  int localCounter;\n  char *localStrings [2];\n  \n  bytePtr = *arg2;\n  byteValue = bytePtr[1];\n  if ((char)byteValue < ':') {\n    if ((char)byteValue < '1') goto LAB_0010d5d8;\n    localCounter = (char)byteValue + -0x30;\n    if (bytePtr[2] == 0x5f) {\n      *arg2 = bytePtr + 1;\n    }\n    bytePtr2 = *arg2 + 2;\n  }\n  else {\n    if (((byteValue != 0x5f) || (((&_sch_istable)[(ulong)bytePtr[2] * 2] & 4) == 0)) ||\n       (bytePtr[2] == 0x30)) goto LAB_0010d5d8;\n    bytePtr3 = bytePtr + 2;\n    longValue = strtol((char *)bytePtr3,(char **)0x0,10);\n    localCounter = (int)longValue;\n    while (((&_sch_istable)[(ulong)*bytePtr3 * 2] & 4) != 0) {\n      bytePtr3 = bytePtr3 + 1;\n    }\n    bytePtr2 = bytePtr3 + 1;\n    if (*bytePtr3 != 0x5f) goto LAB_0010d5d8;\n  }\n  *arg2 = bytePtr2;\n  charPtrPtr = (char **)0x0;\n  if (arg3 != (long *)0x0) {\n    charPtrPtr = localStrings;\n  }\n  longValue = 0;\n  while( true ) {\n    while( true ) {\n      localCounter = localCounter + -1;\n      if (localCounter == -1) {\n        if (arg3 != (long *)0x0) {\n          *arg3 = longValue;\n        }\n        return 1;\n      }\n      if (**arg2 == 0x5f) {\n        *arg2 = *arg2 + 1;\n      }\n      if (**arg2 != 0x74) break;\n      charValue = stab_demangle_template(arg1,arg2,charPtrPtr);\n      charPtr = localStrings[0];\n      if (charValue == '\\0') {\n        return 0;\n      }\n      if (arg3 != (long *)0x0) {\n        sizeValue = strlen(localStrings[0]);\n        longValue = stab_find_tagged_type(*arg1,arg1[1],charPtr,sizeValue & 0xffffffff,9);\n        free(charPtr);\n        if (longValue == 0) {\n          return 0;\n        }\n      }\n    }\n    uintValue = stab_demangle_count(arg2);\n    sizeValue = strlen((char *)*arg2);\n    if (sizeValue < uintValue) break;\n    if (arg3 != (long *)0x0) {\n      if ((longValue != 0) && (longPtr = (long *)debug_get_fields_isra_0(longValue), longPtr != (long *)0x0))\n      {\n        charPtr = (char *)savestring(*arg2,uintValue);\n        for (; longValue = *longPtr, longValue != 0; longPtr = longPtr + 1) {\n          longValue = *(long *)(longValue + 8);\n          if (longValue == 0) {\n            free(charPtr);\n            return 0;\n          }\n          string1 = (char *)debug_get_type_name_constprop_0(longValue);\n          if ((string1 != (char *)0x0) && (intValue = strcmp(string1,charPtr), intValue == 0)) break;\n        }\n        free(charPtr);\n        if (longValue != 0) goto LAB_0010d7ad;\n      }\n      undefined8Value = 9;\n      if (localCounter == 0) {\n        voidPtr = (void *)savestring(*arg2,uintValue);\n        longValue = debug_find_named_type(*arg1,voidPtr);\n        free(voidPtr);\n        if (longValue != 0) goto LAB_0010d7ad;\n        undefined8Value = 0;\n      }\n      longValue = stab_find_tagged_type(*arg1,arg1[1],*arg2,uintValue,undefined8Value);\n      if (longValue == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *arg2 = *arg2 + uintValue;\n  }\nLAB_0010d5d8:\n  stab_bad_demangle(bytePtr);\n  return 0;\n}\n\n",
            "called": [
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "debug_get_fields.isra.0",
                "debug_find_named_type",
                "free",
                "stab_demangle_template",
                "savestring",
                "debug_get_type_name.constprop.0",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "reverse_demangle_and_find_tagged_type_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "errorMessage",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *errorMessage,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,errorMessage,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "vfprintf",
                "putc",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "non_fatal",
                "fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00128290": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128290",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_00128290"
        },
        "FUN_00128050": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128050",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_00128050"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_free_memory_00108466",
                "param_7": "memory_to_free",
                "status": "success_status"
            },
            "code": "\nvoid cleanup_and_free_memory_00108466(void)\n\n{\n  void *memory_to_free;\n  \n  success_status = 1;\n  bfd_nonfatal_message(0);\n  free(memory_to_free);\n  return;\n}\n\n",
            "called": [
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "cleanup_and_free_memory_00108466"
        },
        "FUN_00128298": {
            "renaming": {},
            "code": "\n\n\n\nint feof(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* feof@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128298",
            "calling": [
                "feof"
            ],
            "imported": false,
            "current_name": "FUN_00128298"
        },
        "FUN_00128058": {
            "renaming": {},
            "code": "\n\n\n\nint unlink(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* unlink@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128058",
            "calling": [
                "unlink"
            ],
            "imported": false,
            "current_name": "FUN_00128058"
        },
        "FUN_00128178": {
            "renaming": {},
            "code": "\n\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strrchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128178",
            "calling": [
                "strrchr"
            ],
            "imported": false,
            "current_name": "FUN_00128178"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "extract_number_from_string_00108e76",
                "param_1": "string",
                "bVar1": "current_char",
                "iVar2": "number"
            },
            "code": "\nint extract_number_from_string_00108e76(byte **string)\n\n{\n  byte current_char;\n  int number;\n  \n  number = 0;\n  while( true ) {\n    current_char = **string;\n    if (((&_sch_istable)[(ulong)current_char * 2] & 4) == 0) break;\n    *string = *string + 1;\n    number = number * 10 + -0x30 + (int)(char)current_char;\n  }\n  return number;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "extract_number_from_string_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_param",
                "param_2": "allocation_param",
                "param_3": "initialization_param",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_param,undefined8 allocation_param,undefined8 initialization_param)\n\n{\n  long hash_ptr;\n  \n  if (((input_param != 0) || (input_param = bfd_hash_allocate(allocation_param,0x30), input_param != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_param,allocation_param,initialization_param), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "FUN_001043b0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001043b0"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_0011283f",
                "param_1": "directory_path",
                "param_2": "default_directory",
                "iVar1": "access_result",
                "sStack_a8": "file_stat"
            },
            "code": "\nchar * check_directory_0011283f(char *directory_path,char *default_directory)\n\n{\n  int access_result;\n  stat file_stat;\n  \n  if ((default_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&file_stat);\n      if ((access_result == 0) && ((file_stat.st_mode & 0xf000) == 0x4000)) {\n        default_directory = directory_path;\n      }\n    }\n  }\n  return default_directory;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "check_directory_0011283f"
        },
        "FUN_001045f0": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001045f0"
        },
        "FUN_001044d0": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "FUN_001044d0"
        },
        "FUN_001284a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284a8",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_001284a8"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_and_set_errno_00108237",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoAddress",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeFileAndSetErrno_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoAddress;\n  int fileDescriptor;\n  \n  errnoAddress = __errno_location();\n  errnoValue = *errnoAddress;\n  close(fileDescriptor);\n  *errnoAddress = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "close_file_and_set_errno_00108237"
        },
        "FUN_00128088": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcpy@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128088",
            "calling": [
                "strcpy"
            ],
            "imported": false,
            "current_name": "FUN_00128088"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "debug_record_function_0010bc80",
                "param_1": "file_info",
                "param_2": "filename",
                "param_3": "line",
                "param_4": "char_flag",
                "uVar1": "error_message",
                "plVar2": "debug_info",
                "puVar3": "memory_block",
                "lVar4": "loop_counter",
                "pcVar6": "filename",
                "auVar8": "result"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_function_0010bc80(long file_info,char *filename,long line,uint char_flag,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_info;\n  undefined4 *memory_block;\n  long loop_counter;\n  undefined4 *puVar5;\n  char *filename;\n  byte bVar7;\n  undefined result [16];\n  \n  bVar7 = 0;\n  filename = \"\";\n  if (filename != (char *)0x0) {\n    filename = filename;\n  }\n  if (line != 0) {\n    if (*(long *)(file_info + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function_0010bc80: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_info = (long *)xmalloc(0x18);\n      *debug_info = line;\n      *(undefined (*) [16])(debug_info + 1) = ZEXT816(0);\n      memory_block = (undefined4 *)xmalloc(0x30);\n      *(long **)(file_info + 0x18) = debug_info;\n      debug_info[2] = (long)memory_block;\n      puVar5 = memory_block;\n      for (loop_counter = 0xc; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + (ulong)bVar7 * -2 + 1;\n      }\n      *(undefined4 **)(file_info + 0x20) = memory_block;\n      loop_counter = *(long *)(file_info + 0x10);\n      *(undefined8 *)(memory_block + 6) = param_5;\n      *(undefined8 *)(memory_block + 8) = 0xffffffffffffffff;\n      loop_counter = debug_add_to_namespace_constprop_0(loop_counter + 0x10,filename,3,(char_flag & 0xff) + 1);\n      if (loop_counter != 0) {\n        *(long **)(loop_counter + 0x20) = debug_info;\n        error_message = CONCAT71((int7)((ulong)loop_counter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  result._8_8_ = param_6;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_record_function_0010bc80"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = bfd_get_archive_filename();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = improve_and_readability_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = isympp + uStack0000000000000010;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal",
                "FUN_00107880",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_001042a0": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "display_info.isra.0.cold",
                "FUN_00107976",
                "print_version",
                "FUN_00104ea2",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042a0"
        },
        "FUN_001044e0": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "main",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001044e0"
        },
        "FUN_001043c0": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "main",
                "simple_copy.cold",
                "copy_file",
                "display_info.isra.0",
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001043c0"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_path_with_trailing_slash_00114cf0",
                "param_1": "path",
                "pcVar1": "lastSlash",
                "lVar2": "length",
                "lVar3": "pathLength",
                "lVar4": "slashPosition",
                "pcVar5": "dest",
                "bVar6": "hasSlash"
            },
            "code": "\nvoid allocatePathWithTrailingSlash_00114cf0(char *path)\n\n{\n  char *lastSlash;\n  long length;\n  long pathLength;\n  long slashPosition;\n  char *dest;\n  byte hasSlash;\n  \n  hasSlash = 0;\n  lastSlash = strrchr(path,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    pathLength = 0;\n  }\n  else {\n    slashPosition = (long)lastSlash - (long)path;\n    lastSlash = (char *)xmalloc(slashPosition + 0xb);\n    pathLength = slashPosition + 1;\n    dest = lastSlash;\n    for (length = slashPosition; length != 0; length = length + -1) {\n      *dest = *path;\n      path = path + (ulong)hasSlash * -2 + 1;\n      dest = dest + (ulong)hasSlash * -2 + 1;\n    }\n    lastSlash[slashPosition] = '/';\n  }\n  *(undefined8 *)(lastSlash + pathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + pathLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "strrchr",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "main",
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "allocate_path_with_trailing_slash_00114cf0"
        },
        "FUN_0011a4b4": {
            "renaming": {
                "FUN_0011a4b4": "FUNC_0011a4b4"
            },
            "code": "\nvoid FUNC_0011a4b4(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_0011a4b4"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_string_0010a181",
                "param_1": "binary_offset",
                "param_2": "start_index",
                "param_3": "end_index",
                "param_4": "flag",
                "cVar1": "byteValue",
                "__s": "string1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "local_41": "defaultFlag",
                "iVar2": "value1",
                "lVar7": "counter",
                "iVar3": "returnValue",
                "uVar4": "success",
                "free": "releaseMemory",
                "sprintf": "formatString",
                "strlen": "getStringLength"
            },
            "code": "\nundefined4 generateString_0010a181(long binary_offset,long start_index,long end_index,byte flag)\n\n{\n  char byteValue;\n  int value1;\n  int returnValue;\n  undefined4 success;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long counter;\n  byte defaultFlag;\n  \n  byteValue = *(char *)(*(long *)(binary_offset + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  defaultFlag = 1;\n  if (byteValue == '\\0') {\n    defaultFlag = *(byte *)(*(long *)(binary_offset + 0x60) + 0x1c);\n  }\n  value1 = *(int *)(*(long *)(binary_offset + 0x60) + 0x18);\n  string2 = (char *)stab_pop_type(binary_offset);\n  length1 = getStringLength(string1);\n  length2 = getStringLength(string2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    defaultFlag = defaultFlag & 1;\n  }\n  else {\n    counter = *(long *)(binary_offset + 0x68);\n    *(long *)(binary_offset + 0x68) = counter + 1;\n    formatString(resultString,\"%ld=@S;\",counter);\n    defaultFlag = flag;\n  }\n  length1 = getStringLength(resultString);\n  formatString(resultString + length1,\"ar%s;%ld;%ld;%s\",string1,start_index,end_index,string2);\n  releaseMemory(string1);\n  releaseMemory(string2);\n  returnValue = 0;\n  if (start_index <= end_index) {\n    returnValue = value1 * (((int)end_index - (int)start_index) + 1);\n  }\n  success = stab_push_string(binary_offset,resultString,counter,defaultFlag,returnValue);\n  if ((char)success != '\\0') {\n    releaseMemory(resultString);\n  }\n  return success;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_string_0010a181"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_target_info_001199d0",
                "iVar1": "maxColumnWidth",
                "iVar2": "archIndex",
                "iVar3": "comparisonResult",
                "pcVar4": "headerVersion",
                "sVar5": "stringLength",
                "pcVar6": "tempFilePath",
                "uVar7": "tryDirResult",
                "piVar8": "errorNumPtr",
                "iVar9": "targetIndex",
                "lVar10": "length",
                "lVar11": "iteration",
                "ppcVar12": "traitsArray",
                "uVar13": "maxStringLength",
                "uVar14": "loopCount",
                "local_70": "errorValue"
            },
            "code": "\n\n\nvoid printTargetInfo_001199d0(void)\n\n{\n  int maxColumnWidth;\n  int archIndex;\n  int comparisonResult;\n  char *headerVersion;\n  size_t stringLength;\n  char *tempFilePath;\n  undefined8 tryDirResult;\n  int *errorNumPtr;\n  int targetIndex;\n  long length;\n  long iteration;\n  char **traitsArray;\n  uint maxStringLength;\n  ulong loopCount;\n  int errorValue;\n  \n  headerVersion = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(headerVersion,\"(GNU Binutils for Debian) 2.40\");\n  if (memoized_tmpdir == (char *)0x0) {\n    headerVersion = getenv(\"TMPDIR\");\n    tryDirResult = try_dir_lto_priv_0(headerVersion,0);\n    headerVersion = getenv(\"TMP\");\n    tryDirResult = try_dir_lto_priv_0(headerVersion,tryDirResult);\n    headerVersion = getenv(\"TEMP\");\n    tryDirResult = try_dir_lto_priv_0(headerVersion,tryDirResult);\n    tryDirResult = try_dir_lto_priv_0(&DAT_0011b39a,tryDirResult);\n    tryDirResult = try_dir_lto_priv_0(vartmp,tryDirResult);\n    headerVersion = (char *)try_dir_lto_priv_0(&tmp,tryDirResult);\n    if (headerVersion == (char *)0x0) {\n      headerVersion = \".\";\n    }\n    stringLength = strlen(headerVersion);\n    tempFilePath = (char *)xmalloc((int)stringLength + 2);\n    memoized_tmpdir = strcpy(tempFilePath,headerVersion);\n    memoized_tmpdir[stringLength & 0xffffffff] = '/';\n    memoized_tmpdir[(int)stringLength + 1] = '\\0';\n  }\n  headerVersion = memoized_tmpdir;\n  stringLength = strlen(memoized_tmpdir);\n  length = (long)(int)stringLength;\n  tempFilePath = (char *)xmalloc(length + 9);\n  strcpy(tempFilePath,headerVersion);\n  *(undefined2 *)(tempFilePath + length) = 0x6363;\n  *(undefined4 *)(tempFilePath + length + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempFilePath + length + 2) + 3) = 0x585858;\n  tempFilePath[length + 8] = '\\0';\n  archIndex = mkstemps(tempFilePath,0);\n  if (archIndex == -1) {\n    errorNumPtr = __errno_location();\n    tempFilePath = strerror(*errorNumPtr);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",headerVersion,tempFilePath);\n                    \n    abort();\n  }\n  archIndex = close(archIndex);\n  if (archIndex != 0) {\n                    \n    abort();\n  }\n  maxStringLength = 0;\n  archIndex = 2;\n  bfd_iterate_over_targets(do_display_target);\n  unlink(tempFilePath);\n  free(tempFilePath);\n  errorValue = 0;\n  do {\n    headerVersion = (char *)bfd_printable_arch_mach(archIndex);\n    stringLength = strlen(headerVersion);\n    if ((int)maxStringLength < (int)(uint)stringLength) {\n      maxStringLength = (uint)stringLength;\n    }\n    archIndex = archIndex + 1;\n  } while (archIndex != 0x57);\n  headerVersion = getenv(\"COLUMNS\");\n  archIndex = errorValue;\n  if (headerVersion != (char *)0x0) {\n    length = strtol(headerVersion,(char **)0x0,10);\n    maxColumnWidth = (int)length;\n    if (maxColumnWidth != 0) goto LAB_00119b11;\n  }\n  maxColumnWidth = 0x50;\nLAB_00119b11:\n  do {\n    errorValue = archIndex;\n    if (-1 < errorValue) {\n      return;\n    }\n    iteration = (long)errorValue;\n    targetIndex = (maxColumnWidth - maxStringLength) + -1;\n    length = iteration;\n    do {\n      archIndex = (int)length;\n      if (-1 < archIndex) break;\n      stringLength = strlen(*(char **)(length * 0x60));\n      length = length + 1;\n      targetIndex = (targetIndex - (int)stringLength) + -1;\n    } while (-1 < targetIndex);\n    printf(\"\\n%*s\",(ulong)(maxStringLength + 1),&DAT_0011b4a1);\n    for (traitsArray = (char **)(iteration * 0x60);\n        ((ulong)(uint)(archIndex - errorValue) + iteration) * 0x60 - (long)traitsArray != 0;\n        traitsArray = traitsArray + 0xc) {\n      printf(\"%s \",*traitsArray);\n    }\n    targetIndex = 2;\n    putc(10,_stdout);\n    do {\n      headerVersion = (char *)bfd_printable_arch_mach(targetIndex,0);\n      comparisonResult = strcmp(headerVersion,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        tryDirResult = bfd_printable_arch_mach(targetIndex,0);\n        printf(\"%*s \",(ulong)maxStringLength,tryDirResult);\n        traitsArray = (char **)(iteration * 0x60);\n        comparisonResult = errorValue;\n        while (archIndex != comparisonResult) {\n          if (*(char *)((long)traitsArray + (ulong)(targetIndex - 2) + 8) == '\\0') {\n            stringLength = strlen(*traitsArray);\n            for (loopCount = stringLength & 0xffffffff; (int)loopCount != 0; loopCount = (ulong)((int)loopCount - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*traitsArray,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (archIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          traitsArray = traitsArray + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      targetIndex = targetIndex + 1;\n    } while (targetIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "display_info.isra.0.cold",
                "strerror",
                "bfd_printable_arch_mach",
                "close",
                "abort",
                "mkstemps",
                "free",
                "bfd_iterate_over_targets",
                "getenv",
                "fprintf",
                "strcpy",
                "strlen",
                "dcgettext",
                "printf",
                "try_dir.lto_priv.0",
                "xmalloc",
                "do_display_target",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_target_info_001199d0"
        },
        "FUN_00128198": {
            "renaming": {},
            "code": "\n\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __assert_fail@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128198",
            "calling": [
                "__assert_fail"
            ],
            "imported": false,
            "current_name": "FUN_00128198"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_build_attributes_0010847a",
                "extract_gnu_build_attributes_00116490": "extract_gnu_build_attributes"
            },
            "code": "\nvoid initialize_build_attributes_0010847a(void)\n\n{\n  extract_gnu_build_attributes();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_build_attributes_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "input",
                "param_2": "bytePtr",
                "param_3": "output",
                "bVar1": "byte1",
                "pbVar2": "bytePtr1",
                "bVar3": "byte2",
                "cVar4": "char1",
                "bVar5": "byte3",
                "uVar6": "result",
                "iVar7": "index",
                "uVar8": "count",
                "sVar9": "length",
                "pbVar10": "bytePtr2",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "str1",
                "pcVar11": "strPtr1",
                "uVar12": "strPtr2",
                "pcVar13": "strPtr3",
                "bVar14": "byte4",
                "pcVar15": "strPtr4",
                "bVar16": "byte5",
                "bVar17": "byte6",
                "bVar18": "byte7",
                "bVar19": "byte8",
                "uVar20": "counter",
                "uVar21": "ulongCount",
                "local_3c": "uintArray"
            },
            "code": "\nundefined4 reverseAndImprove_0010d21c(undefined8 input,byte **bytePtr,undefined8 *output)\n\n{\n  byte byte1;\n  byte *bytePtr1;\n  byte byte2;\n  char char1;\n  byte byte3;\n  undefined4 result;\n  int index;\n  uint count;\n  size_t length;\n  byte *bytePtr2;\n  void *ptr1;\n  void *ptr2;\n  char *str1;\n  char *strPtr1;\n  undefined8 strPtr2;\n  char *strPtr3;\n  byte byte4;\n  char *strPtr4;\n  byte byte5;\n  byte byte6;\n  byte byte7;\n  byte byte8;\n  uint counter;\n  ulong ulongCount;\n  uint uintArray [3];\n  \n  bytePtr1 = *bytePtr;\n  *bytePtr = bytePtr1 + 1;\n  uintArray[0] = stab_demangle_count(bytePtr);\n  ulongCount = (ulong)uintArray[0];\n  if (uintArray[0] != 0) {\n    bytePtr2 = *bytePtr;\n    length = strlen((char *)bytePtr2);\n    if (ulongCount <= length) {\n      *bytePtr = bytePtr2 + ulongCount;\n      counter = 0;\n      result = stab_demangle_get_count(bytePtr,uintArray);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (uintArray[0] <= counter) {\n          if (output == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)savestring(bytePtr1,(int)*bytePtr - (int)bytePtr1);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          str1 = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((str1 != (char *)0x0) &&\n             (strPtr1 = strstr(str1,\"::NoSuchStrinG\"), strPtr3 = str1,\n             strPtr4 = str1, strPtr1 != (char *)0x0)) {\n            for (; strPtr3 != strPtr1; strPtr3 = strPtr3 + 1) {\n              if ((*strPtr3 != ' ') ||\n                 (((strPtr3[1] == '>' && (str1 < strPtr3)) && (strPtr3[-1] == '>')))) {\n                *strPtr4 = *strPtr3;\n                strPtr4 = strPtr4 + 1;\n              }\n            }\n            strPtr2 = savestring(str1,(int)strPtr4 - (int)str1);\n            *output = strPtr2;\n            free(str1);\n            return result;\n          }\n          stab_bad_demangle(bytePtr1);\n          free(str1);\n          return 0;\n        }\n        bytePtr2 = *bytePtr;\n        if (*bytePtr2 != 0x5a) {\n          byte3 = stab_demangle_type_lto_priv_0(input,bytePtr,0);\n          if (byte3 == 0) {\n            return 0;\n          }\n          byte2 = 0;\n          byte4 = 0;\n          byte7 = 0;\n          byte6 = 0;\n          byte8 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byte5 = byte2;\n              byte1 = *bytePtr2;\n              if ((byte4 | byte1 == 0) != 0) {\n                byte3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byte2 = byte3;\n              byte4 = byte3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                ulongCount = 1L << (byte1 + 0xbd & 0x3f);\n                if ((ulongCount & 0x11409) == 0) {\n                  if ((ulongCount & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              bytePtr2 = bytePtr2 + 1;\n              byte2 = byte5;\n              byte4 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              byte2 = byte5;\n              byte7 = byte3;\n              break;\n            case 99:\n              byte2 = byte5;\n              byte8 = byte3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byte2 = byte5;\n              byte6 = byte3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *bytePtr = bytePtr2 + 1;\n        char1 = stab_demangle_type_lto_priv_0(input,bytePtr,0);\n        if (char1 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  stab_bad_demangle(bytePtr1);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byte5 == 0) {\n    if (byte8 == 0) {\n      if (byte7 == 0) {\n        if (byte6 == 0) {\n          if (byte3 != 0) {\n            count = stab_demangle_count(bytePtr);\n            if (count == 0) goto LAB_0010d280;\n            *bytePtr = *bytePtr + count;\n          }\n        }\n        else {\n          if (**bytePtr == 0x6d) {\n            *bytePtr = *bytePtr + 1;\n          }\n          while( true ) {\n            bytePtr2 = *bytePtr;\n            if (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) == 0) break;\n            *bytePtr = bytePtr2 + 1;\n          }\n          if (*bytePtr2 == 0x2e) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *bytePtr = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n          bytePtr2 = *bytePtr;\n          if (*bytePtr2 == 0x65) {\n            do {\n              bytePtr2 = bytePtr2 + 1;\n              *bytePtr = bytePtr2;\n            } while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        count = stab_demangle_count(bytePtr);\n        if (1 < count) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**bytePtr == 0x6d) {\n        *bytePtr = *bytePtr + 1;\n      }\n      index = stab_demangle_count(bytePtr);\n      if (index == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**bytePtr == 0x6d) {\n      *bytePtr = *bytePtr + 1;\n    }\n    while (((&_sch_istable)[(ulong)**bytePtr * 2] & 4) != 0) {\n      *bytePtr = *bytePtr + 1;\n    }\n  }\nLAB_0010d2b1:\n  counter = counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "cplus_demangle",
                "stab_bad_demangle",
                "strlen",
                "stab_demangle_get_count",
                "concat",
                "stab_demangle_count",
                "abort",
                "strstr",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_resources_001054af",
                "param_1": "unused_param",
                "param_2": "unused_param_2",
                "strip_specific_htab": "htab_1",
                "strip_unneeded_htab": "htab_2",
                "keep_specific_htab": "htab_3",
                "localize_specific_htab": "htab_4",
                "globalize_specific_htab": "htab_5",
                "keepglobal_specific_htab": "htab_6",
                "weaken_specific_htab": "htab_7",
                "redefine_specific_htab": "htab_8",
                "redefine_specific_reverse_htab": "htab_9"
            },
            "code": "\nvoid cleanup_resources_001054af(undefined8 unused_param,undefined8 unused_param_2)\n\n{\n  undefined8 in_RAX;\n  \n  htab_delete(htab_1);\n  htab_delete(htab_2);\n  htab_delete(htab_3);\n  htab_delete(htab_4);\n  htab_delete(htab_5);\n  htab_delete(htab_6);\n  htab_delete(htab_7);\n  htab_delete(htab_8);\n  htab_delete(htab_9,unused_param_2,in_RAX);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "cleanup_resources_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "update_record_0010c139",
                "param_1": "record",
                "param_2": "base_addr",
                "param_3": "new_param_3",
                "param_4": "new_param_4",
                "param_5": "new_param_5",
                "param_6": "new_param_6",
                "uVar1": "old_value",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "new_record",
                "in_R10": "reg_10",
                "unaff_R15": "reg_15"
            },
            "code": "\nulong updateRecord_0010c139(undefined8 record,long base_addr,undefined8 new_param_3,undefined8 new_param_4,\n                  undefined4 new_param_5,undefined8 new_param_6)\n\n{\n  undefined8 old_value;\n  char flag;\n  ulong result;\n  undefined8 *new_record;\n  undefined8 reg_10;\n  undefined8 reg_15;\n  \n  flag = *(char *)(base_addr + 0x60);\n  if ((flag != '\\0') && ((*(int *)(base_addr + 0x40) != 0 || (*(char *)(base_addr + 0x44) == '\\0')))) {\n    new_record = (undefined8 *)xmalloc(0x28);\n    old_value = *(undefined8 *)(base_addr + 0x78);\n    *(undefined8 *)((long)new_record + 0x1c) = 0;\n    new_record[2] = new_param_4;\n    *(undefined4 *)(new_record + 3) = new_param_5;\n    new_record[4] = new_param_6;\n    *(undefined8 **)(base_addr + 0x78) = new_record;\n    *new_record = old_value;\n    new_record[1] = new_param_3;\n    return CONCAT71((int7)((ulong)reg_15 >> 8),flag) & 0xffffffff;\n  }\n  result = debug_record_variable(record,new_param_3,new_param_4,new_param_5,new_param_6,reg_10);\n  return result;\n}\n\n",
            "called": [
                "debug_record_variable",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "update_record_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_symbol_0010e439",
                "param_1": "baseAddress",
                "param_2": "symbolValue"
            },
            "code": "\nvoid setSymbol_0010e439(long baseAddress,undefined8 symbolValue)\n\n{\n  *(undefined8 *)(baseAddress + 0x210) = symbolValue;\n  stab_write_symbol_lto_priv_0(baseAddress,0x84,0,0,symbolValue);\n  return;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "stab_start_compilation_unit.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "set_symbol_0010e439"
        },
        "FUN_001043d0": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main",
                "parse_stab",
                "stab_push_string",
                "save_stab",
                "FUN_0010554f",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001043d0"
        },
        "FUN_001042b0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "parse_coff_struct_type",
                "stab_demangle_v3_arglist",
                "stab_demangle_arg",
                "stab_class_method_var",
                "main",
                "parse_stab",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_remember_type",
                "stab_modify_type",
                "stab_class_start_method.lto_priv.0",
                "FUN_00114dc7",
                "stab_get_struct_index",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001042b0"
        },
        "FUN_001284c0": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284c0",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_001284c0"
        },
        "FUN_001044f0": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "main",
                "get_file_size",
                "try_dir.lto_priv.0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001044f0"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "push_defined_type_00109d3e",
                "param_1": "paramOne",
                "param_2": "paramTwo",
                "uVar1": "defaultValue"
            },
            "code": "\nvoid pushDefinedType_00109d3e(undefined8 paramOne,int paramTwo)\n\n{\n  undefined8 defaultValue;\n  \n  defaultValue = 0xfffffffffffffff0;\n  if (paramTwo - 1U < 8) {\n    defaultValue = *(undefined8 *)(CSWTCH_58 + (ulong)(paramTwo - 1U) * 8);\n  }\n  stab_push_defined_type(paramOne,defaultValue,paramTwo);\n  return;\n}\n\n",
            "called": [
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_line_number_validity_00112502",
                "param_1": "data",
                "param_2": "param",
                "param_3": "value",
                "uVar1": "iterator",
                "puVar2": "arrayPtr",
                "uVar3": "tempValue",
                "cVar4": "isValid"
            },
            "code": "\nundefined checkLineNumberValidity_00112502(long data,undefined8 param,ulong value)\n\n{\n  uint iterator;\n  undefined8 *arrayPtr;\n  undefined8 tempValue;\n  char isValid;\n  \n  do {\n    arrayPtr = *(undefined8 **)(data + 0x40);\n    if (arrayPtr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((iterator = *(uint *)(data + 0x48), iterator < 10 && (arrayPtr[(ulong)iterator + 2] != -1))) {\n      if (value <= (ulong)arrayPtr[(ulong)iterator + 0xc]) {\n        return 1;\n      }\n      isValid = stab_lineno_lto_priv_0(param,*(undefined8 *)(arrayPtr[1] + 8));\n      if (isValid == '\\0') {\n        return 0;\n      }\n      *(int *)(data + 0x48) = *(int *)(data + 0x48) + 1;\n    }\n    tempValue = *arrayPtr;\n    *(undefined4 *)(data + 0x48) = 0;\n    *(undefined8 *)(data + 0x40) = tempValue;\n  } while( true );\n}\n\n",
            "called": [
                "stab_lineno.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "debug_write_name.constprop.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "check_line_number_validity_00112502"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_and_ignore_lines_00104cc1",
                "unaff_RBX": "currentLine",
                "pbVar5": "startOfLine",
                "unaff_EBP": "lineNumber",
                "in_R10": "currentCharacter",
                "unaff_R13": "param_7",
                "unaff_R14": "nextDelim",
                "unaff_R15": "endOfFile",
                "param_7": "errorMessage",
                "param_8": "output",
                "param_9": "input"
            },
            "code": "\nvoid processAndIgnoreLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *pbVar3;\n  byte bVar4;\n  byte *currentLine;\n  byte *startOfLine;\n  int lineNumber;\n  byte *currentCharacter;\n  undefined8 param_7;\n  byte *nextDelim;\n  byte *endOfFile;\n  undefined8 errorMessage;\n  undefined8 *output;\n  byte *input;\n  \ncode_r0x00104cc1:\n  input = currentCharacter;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  non_fatal(uVar1,errorMessage,lineNumber);\n  startOfLine = currentLine;\n  currentCharacter = input;\nLAB_00114599:\n  do {\n    *currentCharacter = 0;\n    if (endOfFile < currentCharacter) {\n      ppbVar2 = (byte **)htab_find_slot();\n      *ppbVar2 = endOfFile;\n    }\n    lineNumber = lineNumber + 1;\n    pbVar3 = startOfLine;\n    if (nextDelim[1] == 0) {\n      *output = param_7;\n      return;\n    }\n    for (; bVar4 = *pbVar3, nextDelim = pbVar3, bVar4 != 10; pbVar3 = pbVar3 + 1) {\n      if ((char)bVar4 < '\\v') {\n        if (bVar4 == 0) {\n          currentLine = pbVar3 + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (bVar4 == 0xd) {\n          *pbVar3 = 0;\n          currentLine = pbVar3 + 1;\n          if (pbVar3[1] == 10) {\n            currentLine = pbVar3 + 2;\n            nextDelim = pbVar3 + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (bVar4 == 0x23) {\n          process_lines_00104d1c();\n          return;\n        }\n      }\n    }\n    *pbVar3 = 0;\n    if (pbVar3[1] == 0xd) {\n      nextDelim = pbVar3 + 1;\n      currentLine = pbVar3 + 2;\n    }\n    else {\n      currentLine = pbVar3 + 1;\n    }\nLAB_00114553:\n    bVar4 = *startOfLine;\n    endOfFile = startOfLine;\n    while ((bVar4 == 0x20 || (currentCharacter = endOfFile, bVar4 == 9))) {\n      startOfLine = endOfFile + 1;\n      endOfFile = endOfFile + 1;\n      bVar4 = *startOfLine;\n    }\n    do {\n      startOfLine = currentLine;\n      if ((bVar4 == 10) || (bVar4 == 0xd)) goto LAB_00114676;\n      if (bVar4 == 0) goto LAB_00114599;\n      bVar4 = currentCharacter[1];\n      currentCharacter = currentCharacter + 1;\n    } while ((bVar4 != 0x20) && (bVar4 != 9));\n    if ((char)bVar4 < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (bVar4 & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    bVar4 = currentCharacter[1];\n    if ((((((bVar4 == 9) || (bVar4 == 0x20)) && ((bVar4 = currentCharacter[2], bVar4 == 9 || (bVar4 == 0x20)))\n          ) && ((bVar4 = currentCharacter[3], bVar4 == 9 || (bVar4 == 0x20)))) &&\n        ((bVar4 = currentCharacter[4], bVar4 == 9 || (bVar4 == 0x20)))) &&\n       ((bVar4 = currentCharacter[5], bVar4 == 9 || (bVar4 == 0x20)))) {\n      bVar4 = currentCharacter[6];\n      pbVar3 = currentCharacter + 6;\n      if ((bVar4 == 9) || (bVar4 == 0x20)) {\n        do {\n          do {\n            bVar4 = pbVar3[1];\n            pbVar3 = pbVar3 + 1;\n          } while (bVar4 == 0x20);\n        } while (bVar4 == 9);\n      }\n    }\n    if ((0xd < bVar4) || ((-0x2402L >> (bVar4 & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00104cc1",
                "FUN_00104d1c",
                "dcgettext",
                "non_fatal",
                "htab_find_slot",
                "add_specific_symbols.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_and_ignore_lines_00104cc1"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_debug_instance_00113bfa",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "debug_instance",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong create_debug_instance_00113bfa(long data1,long data2)\n\n{\n  long debug_instance;\n  long *allocated_memory;\n  \n  if (((data1 != 0) && (data2 != 0)) &&\n     (debug_instance = debug_make_type_constprop_0(0x12,0), debug_instance != 0)) {\n    allocated_memory = (long *)xmalloc(0x10);\n    *allocated_memory = data1;\n    allocated_memory[1] = data2;\n    *(long **)(debug_instance + 0x10) = allocated_memory;\n    return debug_instance;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_debug_instance_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_and_drop_share_flag_00108375",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uVar1": "value1",
                "uVar2": "value2",
                "unaff_EBX": "ebxValue"
            },
            "code": "\nuint checkAndDropShareFlag_00108375(undefined8 arg1,undefined8 *arg2,undefined8 arg3)\n\n{\n  undefined8 value1;\n  undefined8 value2;\n  uint ebxValue;\n  \n  if (*(int *)(arg2[1] + 8) != 2) {\n    value1 = *arg2;\n    ebxValue = ebxValue & 0xf7ffffff;\n    value2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(value2,value1,arg3);\n  }\n  return ebxValue;\n}\n\n",
            "called": [
                "dcgettext",
                "non_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "check_new_section_flags"
            ],
            "imported": false,
            "current_name": "check_and_drop_share_flag_00108375"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "write_to_stab_00109e76",
                "param_1": "baseAddress",
                "param_2": "value",
                "lVar1": "count",
                "local_5a": "buffer"
            },
            "code": "\nvoid writeToStab_00109e76(long baseAddress,uint value)\n\n{\n  long count;\n  char buffer [58];\n  \n  count = *(long *)(baseAddress + 0x68);\n  *(long *)(baseAddress + 0x68) = count + 1;\n  sprintf(buffer,\"%ld=r%ld;%u;0;\",count,count,(ulong)value);\n  stab_push_string(baseAddress,buffer,count,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "write_to_stab_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_stabs_entry_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "saved_stabs_index": "stabsIndex",
                "saved_stabs": "stabsData",
                "iVar1": "updatedIndex",
                "lVar2": "indexOffset",
                "uVar3": "duplicatedString"
            },
            "code": "\nulong updateStabsEntry_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int updatedIndex;\n  long indexOffset;\n  undefined8 duplicatedString;\n  \n  indexOffset = (long)stabsIndex * 0x18;\n  free(*(void **)(stabsData + indexOffset + 0x10));\n  *(undefined4 *)(stabsData + indexOffset) = newValue1;\n  *(undefined4 *)(stabsData + indexOffset + 4) = newValue2;\n  *(undefined8 *)(stabsData + indexOffset + 8) = newValue3;\n  duplicatedString = xstrdup(newValue4);\n  *(undefined8 *)(stabsData + indexOffset + 0x10) = duplicatedString;\n  updatedIndex = stabsIndex + 1;\n  stabsIndex = updatedIndex % 0x10;\n  return (long)updatedIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_stabs_entry_001088ae"
        },
        "FUN_001042c0": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "template_in_dir"
            ],
            "imported": false,
            "current_name": "FUN_001042c0"
        },
        "FUN_001041a0": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "main",
                "debug_start_source",
                "stab_lineno.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001041a0"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_string_in_nested_structs_0010afd5",
                "param_1": "param_array",
                "param_2": "struct_ptr",
                "param_3": "str_to_find",
                "param_4": "size_of_str",
                "param_5": "new_value",
                "param_6": "return_value",
                "__s2": "str",
                "puVar2": "current_ptr",
                "uVar3": "result",
                "lVar4": "temp_val",
                "puVar5": "inner_ptr",
                "puVar6": "inner_ptr",
                "bVar7": "flag",
                "auVar8": "return_result"
            },
            "code": "\nundefined  [16]\nfindStringInNestedStructs_0010afd5(undefined8 *param_array,long struct_ptr,undefined8 str_to_find,undefined4 size_of_str,\n            undefined4 new_value,undefined8 return_value)\n\n{\n  int iVar1;\n  char *str;\n  undefined8 *current_ptr;\n  undefined8 result;\n  long temp_val;\n  undefined8 *inner_ptr;\n  undefined4 *inner_ptr;\n  byte flag;\n  undefined return_result [16];\n  \n  flag = 0;\n  str = (char *)savestring(str_to_find,size_of_str);\n  for (param_array = (undefined8 *)*param_array; param_array != (undefined8 *)0x0;\n      param_array = (undefined8 *)*param_array) {\n    for (current_ptr = (undefined8 *)param_array[1]; current_ptr != (undefined8 *)0x0;\n        current_ptr = (undefined8 *)*current_ptr) {\n      if ((undefined8 *)current_ptr[2] != (undefined8 *)0x0) {\n        for (inner_ptr = *(undefined8 **)(undefined8 *)current_ptr[2]; inner_ptr != (undefined8 *)0x0;\n            inner_ptr = (undefined8 *)*inner_ptr) {\n          if ((*(int *)((long)inner_ptr + 0x14) == 1) && (*(char *)inner_ptr[1] == *str)) {\n            iVar1 = strcmp((char *)inner_ptr[1],str);\n            if (iVar1 == 0) {\n              temp_val = inner_ptr[4];\n              if (temp_val == 0) goto LAB_0010b05b;\n              free(str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_ptr = *(undefined8 **)(struct_ptr + 0x1a0);\n  do {\n    if (current_ptr == (undefined8 *)0x0) {\n      current_ptr = (undefined8 *)xmalloc(0x28);\n      result = *(undefined8 *)(struct_ptr + 0x1a0);\n      inner_ptr = (undefined4 *)((long)current_ptr + 0x14);\n      for (temp_val = 5; temp_val != 0; temp_val = temp_val + -1) {\n        *inner_ptr = 0;\n        inner_ptr = inner_ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(current_ptr + 2) = new_value;\n      *current_ptr = result;\n      current_ptr[1] = str;\n      result = debug_make_indirect_type_isra_0(current_ptr + 3,str);\n      *(undefined8 **)(struct_ptr + 0x1a0) = current_ptr;\n      current_ptr[4] = result;\nLAB_0010b0e7:\n      temp_val = current_ptr[4];\nLAB_0010b0eb:\n      return_result._8_8_ = return_value;\n      return_result._0_8_ = temp_val;\n      return return_result;\n    }\n    if (*(char *)current_ptr[1] == *str) {\n      iVar1 = strcmp((char *)current_ptr[1],str);\n      if (iVar1 == 0) {\n        if (*(int *)(current_ptr + 2) == 0) {\n          *(undefined4 *)(current_ptr + 2) = new_value;\n        }\n        free(str);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_ptr = (undefined8 *)*current_ptr;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "debug_make_indirect_type.isra.0",
                "savestring",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_string_in_nested_structs_0010afd5"
        },
        "FUN_001043e0": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001043e0"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_type_number(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)stab_find_type(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = stab_find_slot(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)debug_make_offset_type_isra_0(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)debug_make_void_type_isra_0();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              bad_stab(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)debug_get_real_type_isra_0(lVar4,0,0x3b,1), piVar21 == (int *)0x0)\n                ) || (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)debug_make_method_type_isra_0(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_reference_type_isra_0(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)debug_make_pointer_type_isra_0(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_number(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_number(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)debug_make_type_constprop_0(5);\n      }\n      else {\n        pvVar17 = (void *)debug_make_float_type_isra_0(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)debug_make_type_constprop_0(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_volatile_type_isra_0(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_type_number(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = debug_find_named_type(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = debug_make_int_type_isra_0(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        bad_stab(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)debug_make_array_type_isra_0(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_number(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_number(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)debug_make_int_type_isra_0(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)debug_make_void_type_isra_0();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            bad_stab(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)savestring(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_number(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          bad_stab(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)debug_make_enum_type_isra_0(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_function_type_isra_0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)debug_make_const_type_isra_0(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_number(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_number(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)debug_make_int_type_isra_0(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)debug_make_int_type_isra_0(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)debug_make_float_type_isra_0(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                bad_stab(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = stab_find_type(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                warn_stab(pbVar27,uVar15);\n                lVar38 = debug_make_int_type_isra_0(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)debug_make_type_constprop_0(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)debug_make_type_constprop_0(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)debug_make_int_type_isra_0(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)debug_make_int_type_isra_0(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)debug_make_int_type_isra_0(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)debug_make_int_type_isra_0(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          warn_stab(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"0777777777777777777777;\"),\n           cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar50,\"01777777777777777777777;\"),\n              cVar6 == '\\0')))) goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)debug_make_int_type_isra_0(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_number(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_number(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            bad_stab(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  warn_stab(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                warn_stab(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_number(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)debug_get_type_name_constprop_0();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        warn_stab(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        warn_stab(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_number(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                bad_stab(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              bad_stab(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)savestring(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  bad_stab(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  warn_stab(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_number(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_number(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              bad_stab(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)savestring(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)savestring(pbVar28);\n            }\n            else {\n              local_150 = (char *)savestring(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)savestring(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              warn_stab(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = stab_find_type(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)debug_get_real_type_isra_0(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = stab_demangle_v3_arglist\n                                               (param_1,param_2,\n                                                *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    stab_bad_demangle(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          stab_bad_demangle(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = stab_demangle_qualified(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = stab_demangle_remember_type\n                                                  (&local_98,pbVar42,(int)local_a0 - (int)pbVar42);\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                stab_bad_demangle(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = stab_demangle_template(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = stab_demangle_remember_type\n                                                    (&local_98,pbVar28,(int)local_a0 - (int)pbVar28)\n                                  ;\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = stab_demangle_count(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = stab_demangle_remember_type\n                                                      (&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  stab_bad_demangle(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = stab_demangle_args(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)debug_make_method_type_isra_0\n                                                      (lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pcVar40)\n                        ;\n                        goto LAB_00110d7e;\n                      }\n                      stab_bad_demangle(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      stab_bad_demangle(local_a0);\n                    }\n                    else {\n                      cVar6 = stab_demangle_function_name_constprop_0(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = startswith_lto_priv_0_lto_priv_0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)debug_make_method_type_isra_0(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                warn_stab(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_number(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_type_number(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  bad_stab(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)debug_make_struct_type_isra_0(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)debug_make_type_constprop_0((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          warn_stab(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        bad_stab(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)stab_find_tagged_type(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)stab_find_slot(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  bad_stab(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "strchr",
                "bad_stab",
                "savestring",
                "concat",
                "strlen",
                "dcgettext",
                "debug_make_array_type.isra.0",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "stab_demangle_args",
                "strtol",
                "debug_make_enum_type.isra.0",
                "strcmp",
                "debug_get_real_type.isra.0",
                "stab_demangle_count",
                "free",
                "fprintf",
                "strcpy",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "parse_number",
                "strstr",
                "cplus_demangle_init_info",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "cplus_demangle_mangled_name",
                "sprintf",
                "startswith.lto_priv.0.lto_priv.0",
                "strncmp",
                "debug_get_type_name.constprop.0",
                "stab_demangle_v3_arglist",
                "debug_make_void_type.isra.0",
                "strcat",
                "stab_bad_demangle",
                "debug_make_volatile_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_method_type.isra.0",
                "malloc",
                "stab_demangle_remember_type",
                "debug_make_struct_type.isra.0",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "parse_stab_type_number",
                "stab_find_slot",
                "debug_make_const_type.isra.0",
                "stab_demangle_function_name.constprop.0",
                "stab_find_type",
                "stab_find_tagged_type",
                "strspn",
                "debug_make_type.constprop.0",
                "debug_make_int_type.isra.0",
                "debug_find_named_type",
                "warn_stab",
                "xmalloc"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "parse_stab",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_stabs_entries_00108b3e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "stabOffset",
                "piVar3": "stabEntry",
                "iVar4": "index"
            },
            "code": "\n\n\nundefined8 printStabsEntries_00108b3e(undefined8 arg1,undefined8 arg2,undefined8 arg3)\n\n{\n  char *formatString;\n  long stabName;\n  long stabOffset;\n  int *stabEntry;\n  int index;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  index = saved_stabs_index;\n  do {\n    stabOffset = (long)index * 0x18;\n    stabEntry = (int *)(saved_stabs + stabOffset);\n    if (*(long *)(saved_stabs + stabOffset + 0x10) != 0) {\n      stabName = bfd_get_stab_name(*stabEntry);\n      if (stabName == 0) {\n        if (*stabEntry == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(saved_stabs + stabOffset + 4));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(saved_stabs + stabOffset + 8));\n      if (*stabEntry != 0) {\n        fprintf(_stderr,\" %s\",*(undefined8 *)(saved_stabs + stabOffset + 0x10));\n      }\n      fputc(10,_stderr);\n    }\n    index = (index + 1) % 0x10;\n  } while (saved_stabs_index != index);\n  return arg3;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_stabs_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "modify_stab_type_0010a083",
                "param_1": "input_address",
                "stab_modify_type": "update_stab_type"
            },
            "code": "\nvoid modify_stab_type_0010a083(long input_address)\n\n{\n  update_stab_type(input_address,0x2a,4,input_address + 0x178,input_address + 0x180);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a083"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "expand_and_copy_data_00109c2e",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "info",
                "lVar1": "newPtr",
                "plVar2": "dataPtr",
                "lVar3": "count",
                "puVar4": "dest",
                "uVar5": "limit",
                "bVar6": "false",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nexpandAndCopyData_00109c2e(long data,long value,ulong size,int flag,undefined4 *result,\n            undefined8 info)\n\n{\n  long newPtr;\n  long *dataPtr;\n  long count;\n  undefined *dest;\n  ulong limit;\n  byte false;\n  undefined returnValue [16];\n  \n  false = 0;\n  size = size & 0xffffffff;\n  limit = *(ulong *)(data + 0x1b0);\n  if (limit <= size) {\n    if (limit == 0) {\n      limit = 10;\n    }\n    for (; limit <= size; limit = limit * 2) {\n    }\n    newPtr = xrealloc(*(undefined8 *)(data + 0x1a8),limit * 0x18);\n    *(long *)(data + 0x1a8) = newPtr;\n    dest = (undefined *)(*(long *)(data + 0x1b0) * 0x18 + newPtr);\n    for (count = (limit - *(long *)(data + 0x1b0)) * 0x18; count != 0; count = count + -1) {\n      *dest = 0;\n      dest = dest + (ulong)false * -2 + 1;\n    }\n    *(ulong *)(data + 0x1b0) = limit;\n  }\n  dataPtr = (long *)(size * 0x18 + *(long *)(data + 0x1a8));\n  if (*dataPtr == 0) {\n    newPtr = *(long *)(data + 0x68);\n    *dataPtr = newPtr;\n    *(long *)(data + 0x68) = newPtr + 1;\n    dataPtr[1] = value;\n    *(int *)(dataPtr + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(dataPtr + 2) = 0;\n    *(undefined4 *)((long)dataPtr + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)dataPtr + 0x14);\n  }\n  returnValue._8_8_ = info;\n  returnValue._0_8_ = *dataPtr;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "stab_tag_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "expand_and_copy_data_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_001053b5",
                "uVar1": "errorString"
            },
            "code": "\nvoid printBadFormatError_001053b5(void)\n\n{\n  undefined8 errorString;\n  \n  errorString = dcgettext(0,\"bad format for %s\",5);\n                    \n  fatal(errorString);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "init_section_add"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "debug_add_to_current_namespace_00112996",
                "param_1": "file_info_ptr",
                "uVar1": "result",
                "lVar2": "current_ptr"
            },
            "code": "\n\n\nundefined8 debug_add_to_current_namespace_00112996(long file_info_ptr,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long current_ptr;\n  \n  if ((*(long *)(file_info_ptr + 8) != 0) && (*(long *)(file_info_ptr + 0x10) != 0)) {\n    current_ptr = *(long *)(file_info_ptr + 0x10) + 0x10;\n    if (*(long *)(file_info_ptr + 0x20) != 0) {\n      current_ptr = *(long *)(file_info_ptr + 0x20) + 0x28;\n    }\n    result = debug_add_to_namespace_constprop_0(current_ptr,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_add_to_namespace.constprop.0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "debug_add_to_current_namespace_00112996"
        },
        "FUN_001284b8": {
            "renaming": {},
            "code": "\n\n\n\nint getc(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284b8",
            "calling": [
                "getc"
            ],
            "imported": false,
            "current_name": "FUN_001284b8"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "type_ptr",
                "param_2": "name",
                "param_3": "type_kind",
                "uVar1": "result",
                "uVar2": "type_id",
                "lVar3": "type_ptr_offset",
                "piVar4": "type_ptr_kind",
                "__s1": "type_ptr_name",
                "cVar5": "is_same_type",
                "iVar6": "class_id",
                "puVar7": "new_entry",
                "auVar8": "result_array"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long type_ptr,char *name,int *type_kind,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint type_id;\n  long type_ptr_offset;\n  int *type_ptr_kind;\n  char *type_ptr_name;\n  char is_same_type;\n  int class_id;\n  undefined8 *new_entry;\n  undefined result_array [16];\n  \n  if (3 < *type_kind - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  type_ptr_offset = *(long *)(type_kind + 4);\n  new_entry = (undefined8 *)(ulong)*(uint *)(type_ptr_offset + 0xc);\n  if (*(uint *)(type_ptr_offset + 0xc) <= *(uint *)(type_ptr + 0x38)) {\n    for (new_entry = *(undefined8 **)(type_ptr + 0x50); new_entry != (undefined8 *)0x0;\n        new_entry = (undefined8 *)*new_entry) {\n      type_ptr_kind = (int *)new_entry[1];\n      if (*type_ptr_kind == *type_kind) {\n        type_ptr_name = (char *)new_entry[2];\n        if (name == (char *)0x0) {\n          if (type_ptr_name == (char *)0x0) {\nLAB_0010c82c:\n            is_same_type = debug_type_samep(type_ptr,type_ptr_kind,type_kind);\n            if (is_same_type != '\\0') {\n              type_id = *(uint *)(*(long *)(new_entry[1] + 0x10) + 0xc);\n              new_entry = (undefined8 *)(ulong)type_id;\n              *(uint *)(type_ptr_offset + 0xc) = type_id;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((type_ptr_name != (char *)0x0) && (*type_ptr_name == *name)) &&\n                (class_id = strcmp(type_ptr_name,name), class_id == 0)) goto LAB_0010c82c;\n      }\n    }\n    class_id = *(int *)(type_ptr + 0x34) + 1;\n    *(int *)(type_ptr + 0x34) = class_id;\n    *(int *)(type_ptr_offset + 0xc) = class_id;\n    new_entry = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(type_ptr + 0x50);\n    new_entry[2] = name;\n    *(undefined8 **)(type_ptr + 0x50) = new_entry;\n    *new_entry = result;\n    new_entry[1] = type_kind;\n  }\nLAB_0010c884:\n  result_array._1_7_ = (undefined7)((ulong)new_entry >> 8);\n  result_array[0] = 1;\n  result_array._8_8_ = param_4;\n  return result_array;\n}\n\n",
            "called": [
                "debug_type_samep",
                "__assert_fail",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "compare_and_check_0010922b",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uVar1": "value1",
                "uVar2": "value2",
                "pplVar3": "array_ptr1",
                "ppcVar4": "array_ptr2",
                "ppcVar5": "array_ptr3",
                "lVar6": "temp_var1",
                "lVar7": "temp_var2",
                "lVar8": "temp_var3",
                "pcVar9": "char_ptr1",
                "pcVar10": "char_ptr2",
                "cVar11": "comparison_result",
                "bVar12": "result",
                "iVar13": "comparison_result2",
                "uVar14": "type1",
                "uVar15": "type2",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "long_ptr1",
                "lVar19": "offset",
                "plVar20": "long_ptr2",
                "plVar21": "long_ptr3",
                "lVar22": "offset2",
                "local_70": "local_array_ptr",
                "local_58": "local_ptr",
                "plStack_50": "stack_ptr",
                "local_48": "local_ptr",
                "LAB_00109241": "label1",
                "joined_r0x00109255": "loop_label",
                "LAB_001092cb": "label2",
                "LAB_00109382": "label3",
                "LAB_001093fd": "label4",
                "LAB_00109540": "label5",
                "LAB_001095f1": "label6",
                "LAB_00109480": "label7",
                "LAB_001097af": "label8",
                "LAB_00109862": "label9",
                "LAB_00109964": "label10",
                "LAB_0010995d": "label11",
                "LAB_001099c4": "label12",
                "abort": "abort_func"
            },
            "code": "\nbyte compare_and_check_0010922b(long arg1,long *arg2,long *arg3)\n\n{\n  uint value1;\n  uint value2;\n  long **array_ptr1;\n  char **array_ptr2;\n  char **array_ptr3;\n  long temp_var1;\n  long temp_var2;\n  long temp_var3;\n  char *char_ptr1;\n  char *char_ptr2;\n  char comparison_result;\n  byte result;\n  int comparison_result2;\n  undefined8 type1;\n  undefined8 type2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *long_ptr1;\n  long offset;\n  long *long_ptr2;\n  long *long_ptr3;\n  long offset2;\n  long *local_array_ptr;\n  undefined8 *local_ptr;\n  long *stack_ptr;\n  long *local_ptr;\n  \n  long_ptr1 = arg3;\n  if (arg2 == (long *)0x0) {\nlabel1:\n    return arg3 == (long *)0x0;\n  }\nloop_label:\n  if (long_ptr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    value1 = *(uint *)arg2;\n    if (value1 == 1) goto code_r0x00109263;\n    while (value2 = *(uint *)arg3, value2 == 1) {\n      arg3 = **(long ***)arg3[2];\n      if (arg3 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (arg2 == arg3) {\n      return true;\n    }\n    if (value1 != 0x16) break;\n    if (value2 != 0x17) goto label2;\n    arg2 = *(long **)(arg2[2] + 8);\n    if (arg2 == (long *)0x0) goto label1;\n  }\n  if ((value1 == 0x17) && (value2 == 0x16)) {\n    arg3 = *(long **)(arg3[2] + 8);\n    long_ptr1 = arg3;\n    goto loop_label;\n  }\nlabel2:\n  if (*arg2 != *arg3) {\n    return false;\n  }\n  if (value1 == 3) {\n    return *(char *)(arg2 + 2) == *(char *)(arg3 + 2);\n  }\n  if (value1 < 4) {\n    if (value1 == 2) {\n      return true;\n    }\n  }\n  else if (value1 - 4 < 3) {\n    return true;\n  }\n  local_ptr = *(undefined8 **)(arg1 + 0x58);\n  for (ptr2 = local_ptr; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == arg2) && ((long *)ptr2[2] == arg3)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(arg1 + 0x58) = &local_ptr;\n  stack_ptr = arg2;\n  local_ptr = arg3;\n  switch(value1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    long_ptr1 = (long *)arg2[2];\n    array_ptr1 = (long **)arg3[2];\n    if (long_ptr1 == (long *)0x0) {\n      result = array_ptr1 == (long **)0x0;\n      goto label12;\n    }\n    if (array_ptr1 == (long **)0x0) goto label3;\n    if ((*(uint *)(arg1 + 0x38) < *(uint *)((long)long_ptr1 + 0xc)) &&\n       (*(uint *)((long)long_ptr1 + 0xc) == *(uint *)((long)array_ptr1 + 0xc))) goto label8;\n    ptr2 = (undefined8 *)*long_ptr1;\n    local_array_ptr = *array_ptr1;\n    if (((ptr2 == (undefined8 *)0x0) == (local_array_ptr == (long *)0x0)) &&\n       ((((long_ptr1[2] == 0) == (array_ptr1[2] == (long *)0x0) &&\n         ((long_ptr1[3] == 0) == (array_ptr1[3] == (long *)0x0))) &&\n        ((long_ptr1[4] == 0) == (array_ptr1[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nlabel4:\n        if ((long_ptr1[4] != 0) &&\n           (comparison_result = compare_and_check_0010922b(arg1,long_ptr1[4],array_ptr1[4]), comparison_result == '\\0'))\n        goto label3;\n        long_ptr3 = (long *)long_ptr1[2];\n        if (long_ptr3 == (long *)0x0) {\nlabel5:\n          ptr2 = (undefined8 *)long_ptr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto label8;\n          long_ptr1 = array_ptr1[3];\n          while( true ) {\n            array_ptr3 = (char **)*ptr2;\n            if (array_ptr3 == (char **)0x0) {\n              result = *long_ptr1 == 0;\n              goto label12;\n            }\n            array_ptr2 = (char **)*long_ptr1;\n            if (array_ptr2 == (char **)0x0) break;\n            if ((**array_ptr3 != **array_ptr2) || (comparison_result2 = strcmp(*array_ptr3,*array_ptr2), comparison_result2 != 0))\n            break;\n            char_ptr1 = array_ptr3[1];\n            char_ptr2 = array_ptr2[1];\n            if ((char_ptr1 == (char *)0x0) != (char_ptr2 == (char *)0x0)) break;\n            if (char_ptr1 != (char *)0x0) {\n              offset2 = 0;\n              while( true ) {\n                array_ptr3 = *(char ***)(char_ptr1 + offset2);\n                array_ptr2 = *(char ***)(char_ptr2 + offset2);\n                if (array_ptr3 == (char **)0x0) break;\n                if (array_ptr2 == (char **)0x0) goto label3;\n                if ((((**array_ptr3 != **array_ptr2) ||\n                     ((((ulong)array_ptr3[2] ^ (ulong)array_ptr2[2]) & 0xffffffffffff) != 0)) ||\n                    ((array_ptr3[3] != array_ptr2[3] ||\n                     ((((array_ptr3[4] == (char *)0x0) != (array_ptr2[4] == (char *)0x0) ||\n                       (comparison_result2 = strcmp(*array_ptr3,*array_ptr2), comparison_result2 != 0)) ||\n                      (comparison_result = compare_and_check_0010922b(arg1,array_ptr3[1],array_ptr2[1]), comparison_result == '\\0')))))) ||\n                   ((array_ptr3[4] != (char *)0x0 &&\n                    (comparison_result = compare_and_check_0010922b(arg1,array_ptr3[4],array_ptr2[4]), comparison_result == '\\0'))))\n                goto label3;\n                offset2 = offset2 + 8;\n              }\n              if (array_ptr2 == (char **)0x0) goto label6;\n              break;\n            }\nlabel6:\n            ptr2 = ptr2 + 1;\n            long_ptr1 = long_ptr1 + 1;\n          }\n        }\n        else {\n          long_ptr2 = array_ptr1[2];\n          for (; ptr2 = (undefined8 *)*long_ptr3, ptr2 != (undefined8 *)0x0;\n              long_ptr3 = long_ptr3 + 1) {\n            ptr1 = (undefined8 *)*long_ptr2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (comparison_result = compare_and_check_0010922b(arg1,*ptr2,*ptr1), comparison_result == '\\0'))\n            goto label3;\n            long_ptr2 = long_ptr2 + 1;\n          }\n          if (*long_ptr2 == 0) goto label5;\n        }\n      }\n      else {\n        for (; array_ptr3 = (char **)*ptr2, array_ptr3 != (char **)0x0; ptr2 = ptr2 + 1) {\n          array_ptr2 = (char **)*local_array_ptr;\n          if (array_ptr2 == (char **)0x0) goto label3;\n          char_ptr1 = *array_ptr2;\n          char_ptr2 = *array_ptr3;\n          if ((*char_ptr2 != *char_ptr1) ||\n             ((((ulong)array_ptr3[2] ^ (ulong)array_ptr2[2]) & 0xffffffffff) != 0)) goto label3;\n          if (*(char *)((long)array_ptr3 + 0x14) == '\\0') {\n            if (array_ptr3[3] == array_ptr2[3]) goto label7;\n            goto label3;\n          }\n          comparison_result2 = strcmp(array_ptr3[3],array_ptr2[3]);\n          if (comparison_result2 != 0) goto label3;\nlabel7:\n          comparison_result2 = strcmp(char_ptr2,char_ptr1);\n          if (((comparison_result2 != 0) || (array_ptr3[1] == (char *)0x0)) || (array_ptr2[1] == (char *)0x0))\n          goto label3;\n          type1 = debug_get_real_type_isra_0(array_ptr2[1],0);\n          type2 = debug_get_real_type_isra_0(array_ptr3[1],0);\n          comparison_result = compare_and_check_0010922b(arg1,type2,type1);\n          if (comparison_result == '\\0') goto label3;\n          local_array_ptr = local_array_ptr + 1;\n        }\n        if (*local_array_ptr == 0) goto label4;\n      }\n    }\n    goto label3;\n  case 0xb:\n    long_ptr1 = (long *)arg2[2];\n    long_ptr3 = (long *)arg3[2];\n    if (long_ptr1 == (long *)0x0) {\n      result = long_ptr3 == (long *)0x0;\n      goto label12;\n    }\n    if (long_ptr3 == (long *)0x0) goto label3;\n    offset2 = *long_ptr1;\n    temp_var1 = *long_ptr3;\n    offset = 0;\n    temp_var2 = long_ptr1[1];\n    temp_var3 = long_ptr3[1];\n    do {\n      char_ptr1 = *(char **)(offset2 + offset);\n      if (char_ptr1 == (char *)0x0) {\n        result = *(long *)(temp_var1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      char_ptr2 = *(char **)(temp_var1 + offset);\n      if (((char_ptr2 == (char *)0x0) || (*char_ptr1 != *char_ptr2)) ||\n         (*(long *)(temp_var2 + offset) != *(long *)(temp_var3 + offset))) break;\n      comparison_result2 = strcmp(char_ptr1,char_ptr2);\n      offset = offset + 8;\n    } while (comparison_result2 == 0);\nlabel10:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = compare_and_check_0010922b(arg1,arg2[2],arg3[2]);\n    goto label12;\n  case 0xd:\n    if ((*(char *)((undefined8 *)arg2[2] + 2) == *(char *)((undefined8 *)arg3[2] + 2)) &&\n       (comparison_result = compare_and_check_0010922b(arg1,*(undefined8 *)arg2[2],*(undefined8 *)arg3[2]),\n       comparison_result != '\\0')) {\n      long_ptr1 = *(long **)(arg2[2] + 8);\n      long_ptr3 = *(long **)(arg3[2] + 8);\n      if ((long_ptr1 == (long *)0x0) == (long_ptr3 == (long *)0x0)) {\n        if (long_ptr1 == (long *)0x0) goto label8;\n        while (((*long_ptr1 != 0 && (*long_ptr3 != 0)) &&\n               (comparison_result = compare_and_check_0010922b(arg1), comparison_result != '\\0'))) {\n          long_ptr1 = long_ptr1 + 1;\n          long_ptr3 = long_ptr3 + 1;\n        }\nlabel11:\n        if (*long_ptr1 != 0) goto label10;\n        result = *long_ptr3 == 0;\n        break;\n      }\n    }\n    goto label3;\n  case 0xf:\n    ptr2 = (undefined8 *)arg3[2];\n    ptr1 = (undefined8 *)arg2[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nlabel9:\n      result = compare_and_check_0010922b(arg1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)arg3[2];\n    ptr1 = (undefined8 *)arg2[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto label9;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)arg3[2];\n    ptr1 = (undefined8 *)arg2[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto label9;\n    break;\n  case 0x12:\n    comparison_result = compare_and_check_0010922b(arg1,*(undefined8 *)arg2[2],*(undefined8 *)arg3[2]);\n    result = 0;\n    if (comparison_result != '\\0') {\n      result = compare_and_check_0010922b(arg1,*(undefined8 *)(arg2[2] + 8),*(undefined8 *)(arg3[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)arg2[2] + 3) == *(char *)((undefined8 *)arg3[2] + 3)) &&\n        (comparison_result = compare_and_check_0010922b(arg1,*(undefined8 *)arg2[2],*(undefined8 *)arg3[2]),\n        comparison_result != '\\0')) &&\n       (comparison_result = compare_and_check_0010922b(arg1,*(undefined8 *)(arg2[2] + 8),\n                              *(undefined8 *)(arg3[2] + 8)), comparison_result != '\\0')) {\n      long_ptr1 = *(long **)(arg2[2] + 0x10);\n      long_ptr3 = *(long **)(arg3[2] + 0x10);\n      if ((long_ptr1 == (long *)0x0) == (long_ptr3 == (long *)0x0)) {\n        if (long_ptr1 != (long *)0x0) {\n          while (((*long_ptr1 != 0 && (*long_ptr3 != 0)) &&\n                 (comparison_result = compare_and_check_0010922b(arg1), comparison_result != '\\0'))) {\n            long_ptr1 = long_ptr1 + 1;\n            long_ptr3 = long_ptr3 + 1;\n          }\n          goto label11;\n        }\nlabel8:\n        result = 1;\n        goto label12;\n      }\n    }\nlabel3:\n    result = 0;\n    goto label12;\n  case 0x16:\n  case 0x17:\n    long_ptr1 = (long *)arg3[2];\n    long_ptr3 = (long *)arg2[2];\n    comparison_result2 = strcmp(*(char **)(*long_ptr3 + 8),*(char **)(*long_ptr1 + 8));\n    result = 0;\n    if (comparison_result2 == 0) {\n      result = compare_and_check_0010922b(arg1,long_ptr3[1],long_ptr1[1]);\n    }\n    break;\n  default:\n                    \n    abort_func();\n  }\nLAB_001099c1:\n  result = result & 1;\nlabel12:\n  *(undefined8 **)(arg1 + 0x58) = local_ptr;\n  return result;\ncode_r0x00109263:\n  arg2 = **(long ***)arg2[2];\n  long_ptr1 = arg2;\n  goto loop_label;\n}\n\n",
            "called": [
                "debug_type_samep",
                "debug_get_real_type.isra.0",
                "abort",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "debug_type_samep",
                "debug_set_class_id.lto_priv.0"
            ],
            "imported": false,
            "current_name": "compare_and_check_0010922b"
        },
        "FUN_00104900": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "copy_file",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104900"
        },
        "FUN_00104908": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104908"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_and_check_archive_file_001052a2",
                "param_3": "source_path",
                "cVar1": "format_valid",
                "iVar2": "arch_type",
                "iVar3": "stat_result",
                "ppcVar4": "arch_files",
                "lVar5": "bytes_read",
                "uVar6": "dcgettext_result",
                "__format": "print_format",
                "puVar7": "tempdir_info",
                "piVar8": "errno_location",
                "uVar9": "error_string",
                "in_RAX": "archive_fd",
                "pcVar10": "current_char",
                "ppcVar11": "arch_file_ptr",
                "lVar12": "archive_size",
                "pvVar13": "buffer",
                "pcVar14": "close_function",
                "lVar15": "remaining_bytes",
                "pcVar16": "next_char",
                "psVar17": "file_stat",
                "unaff_R14": "temp_dir_list",
                "unaff_R15": "archive_files_list",
                "bVar18": "byte_value",
                "unaff_retaddr": "return_address",
                "in_stack_00000008": "archive_fd_ptr",
                "in_stack_00000010": "current_file_ptr",
                "in_stack_00000018": "temp_dir",
                "in_stack_00000020": "dest_file_ptr",
                "in_stack_00000028": "dest_path",
                "in_stack_00000030": "format_specified",
                "in_stack_000000f8": "preserve_file_permissions",
                "in_stack_00000110": "source_file_size"
            },
            "code": "\nvoid copyAndCheckArchiveFile_001052a2(undefined8 param_1,undefined8 param_2,char *source_path)\n\n{\n  char format_valid;\n  int arch_type;\n  int stat_result;\n  char **arch_files;\n  long bytes_read;\n  undefined8 dcgettext_result;\n  char *print_format;\n  undefined8 *tempdir_info;\n  int *errno_location;\n  undefined8 error_string;\n  long archive_fd;\n  char *current_char;\n  char **arch_file_ptr;\n  long archive_size;\n  void *buffer;\n  code *close_function;\n  long remaining_bytes;\n  char *next_char;\n  stat *file_stat;\n  undefined8 *temp_dir_list;\n  char **archive_files_list;\n  byte byte_value;\n  undefined8 return_address;\n  undefined8 *archive_fd_ptr;\n  long *current_file_ptr;\n  char *temp_dir;\n  undefined8 *dest_file_ptr;\n  undefined8 dest_path;\n  undefined8 format_specified;\n  uint preserve_file_permissions;\n  long source_file_size;\n  \n  byte_value = 0;\n  current_char = (char *)(archive_fd + 1);\n  do {\n    if (*current_char == '/') {\n      copyAndCheckArchiveFile_001052a2();\n      return;\n    }\n    while (*current_char == '\\0') {\n      current_char = (char *)concat(temp_dir,&DAT_0011b47d);\n      stat_result = stat(current_char,(stat *)&stack0x00000050);\n      tempdir_info = temp_dir_list;\n      if (-1 < stat_result) {\n        archive_size = make_tempdir(current_char);\n        free(current_char);\n        if (archive_size == 0) {\n          errno_location = __errno_location();\n          current_char = strerror(*errno_location);\n          error_string = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(error_string,current_char);\n          goto LAB_00104e93;\n        }\n        tempdir_info = (undefined8 *)xmalloc(0x18);\n        current_char = *archive_files_list;\n        *tempdir_info = temp_dir_list;\n        tempdir_info[2] = 0;\n        tempdir_info[1] = archive_size;\n        current_char = (char *)concat(archive_size,&DAT_0011b47d,current_char);\n      }\n      stat_result = 0;\n      if (preserve_dates != '\\0') {\n        file_stat = (stat *)&stack0x00000050;\n        for (archive_size = 0x24; archive_size != 0; archive_size = archive_size + -1) {\n          *(undefined4 *)&file_stat->st_dev = 0;\n          file_stat = (stat *)((long)file_stat + (ulong)byte_value * -8 + 4);\n        }\n        arch_file_ptr = (char **)archive_files_list[0x1d];\n        if ((char **)archive_files_list[0x1d] == (char **)0x0) {\n          arch_file_ptr = archive_files_list;\n        }\n        stat_result = (**(code **)(arch_file_ptr[1] + 0x1e8))(archive_files_list,(stat *)&stack0x00000050);\n        if (stat_result != 0) {\n          next_char = *archive_files_list;\n          error_string = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(error_string,next_char);\n        }\n      }\n      temp_dir_list = (undefined8 *)xmalloc(0x18);\n      temp_dir_list[1] = current_char;\n      *temp_dir_list = tempdir_info;\n      temp_dir_list[2] = 0;\n      format_valid = bfd_check_format(archive_files_list,1);\n      if (format_valid == '\\0') {\n        error_string = dcgettext(0,\"Unable to recognise the format of file\",5);\n        bfd_nonfatal_message(0,archive_files_list,0,error_string);\n        arch_file_ptr = (char **)bfd_openw(current_char,dest_path);\n        if (arch_file_ptr == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        arch_files = (char **)archive_files_list[0x1d];\n        if ((char **)archive_files_list[0x1d] == (char **)0x0) {\n          arch_files = archive_files_list;\n        }\n        arch_type = (**(code **)(arch_files[1] + 0x1e8))(archive_files_list,&stack0x000000e0);\n        archive_size = source_file_size;\n        if (arch_type == 0) {\n          if (source_file_size < 0) {\n            error_string = bfd_get_archive_filename(archive_files_list);\n            dcgettext_result = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            non_fatal(dcgettext_result,error_string);\n          }\n          else {\n            arch_type = bfd_seek(archive_files_list,0,0);\n            if (arch_type == 0) {\n              if (verbose != '\\0') {\n                next_char = *arch_file_ptr;\n                error_string = bfd_get_archive_filename(archive_files_list);\n                print_format = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(print_format,error_string,next_char);\n              }\n              buffer = (void *)xmalloc(0x2000);\n              for (; archive_size != 0; archive_size = archive_size - remaining_bytes) {\n                remaining_bytes = 0x2000;\n                if (archive_size < 0x2001) {\n                  remaining_bytes = archive_size;\n                }\n                bytes_read = bfd_bread(buffer,remaining_bytes,archive_files_list);\n                arch_files = archive_files_list;\n                if ((remaining_bytes != bytes_read) ||\n                   (bytes_read = bfd_bwrite(buffer,remaining_bytes,arch_file_ptr), arch_files = arch_file_ptr, remaining_bytes != bytes_read\n                   )) {\n                  bfd_nonfatal_message(0,arch_files,0,0);\n                  free(buffer);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*arch_file_ptr,preserve_file_permissions | 0x100);\n              free(buffer);\n              format_valid = bfd_close_all_done(arch_file_ptr);\n              if (format_valid == '\\0') {\n                bfd_nonfatal_message(current_char,0,0,0);\n                status = 1;\n              }\n              goto LAB_00114a86;\n            }\n            error_string = bfd_get_archive_filename(archive_files_list);\n            bfd_nonfatal(error_string);\n          }\n        }\n        else {\n          bfd_nonfatal_message(0,archive_files_list,0,0);\n        }\nLAB_00104f00:\n        format_valid = bfd_close_all_done(arch_file_ptr);\n        if (format_valid == '\\0') {\n          bfd_nonfatal_message(current_char,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(current_char);\n        status = 1;\n      }\n      else {\n        if (format_specified._7_1_ == '\\0') {\n          arch_file_ptr = (char **)bfd_openw(current_char,*(undefined8 *)archive_files_list[1]);\n        }\n        else {\n          arch_file_ptr = (char **)bfd_openw(current_char,dest_path);\n        }\n        if (arch_file_ptr == (char **)0x0) {\nLAB_00104e80:\n          bfd_nonfatal_message(current_char,0,0,0);\n          goto LAB_00104e93;\n        }\n        format_valid = copy_object(archive_files_list,arch_file_ptr,return_address);\n        if (format_valid == '\\0') {\n          arch_type = bfd_get_arch(archive_files_list);\n          if (arch_type == 0) goto LAB_00104d75;\n          format_valid = bfd_close_all_done(arch_file_ptr);\n          if (format_valid == '\\0') {\n            bfd_nonfatal_message(current_char,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        format_valid = bfd_close(arch_file_ptr);\n        if (format_valid == '\\0') {\n          bfd_nonfatal_message(current_char,0,0,0);\n          status = 1;\n        }\nLAB_00114a86:\n        if ((preserve_dates != '\\0') && (stat_result == 0)) {\n          set_times(current_char,(stat *)&stack0x00000050);\n        }\n        archive_size = bfd_openr(current_char,dest_path);\n        temp_dir_list[2] = archive_size;\n        *current_file_ptr = archive_size;\n        current_file_ptr = (long *)(archive_size + 0xf0);\n        arch_file_ptr = (char **)bfd_openr_next_archived_file(dest_file_ptr,archive_files_list);\n        bfd_close(archive_files_list);\n        archive_files_list = arch_file_ptr;\n      }\n      if ((status != 0) || (archive_files_list == (char **)0x0)) {\n        *current_file_ptr = 0;\n        buffer = (void *)xstrdup(*archive_fd_ptr);\n        if (status == 0) {\n          close_function = bfd_close;\n        }\n        else {\n          close_function = bfd_close_all_done;\n        }\n        format_valid = (*close_function)(archive_fd_ptr);\n        if (format_valid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        buffer = (void *)xstrdup(*dest_file_ptr);\n        format_valid = bfd_close(dest_file_ptr);\n        if (format_valid == '\\0') {\n          status = 1;\n          bfd_nonfatal_message(buffer,0,0,0);\n        }\n        free(buffer);\n        goto LAB_00114b4b;\n      }\n      current_char = *archive_files_list;\n      source_path = current_char;\n      if (*current_char == '/') goto LAB_0010527d;\n    }\n    next_char = current_char;\n    if ((*current_char == '.') && (next_char = current_char + 1, current_char[1] == '.')) {\n      next_char = current_char + 2;\n      if ((current_char[2] == '\\0') || (current_char[2] == '/')) {\nLAB_0010527d:\n        error_string = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(error_string,source_path);\nLAB_00104e93:\n        status = 1;\nLAB_00114b4b:\n        while (temp_dir_list != (undefined8 *)0x0) {\n          if (temp_dir_list[2] == 0) {\n            rmdir((char *)temp_dir_list[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)temp_dir_list[1]);\n          }\n          free((void *)temp_dir_list[1]);\n          tempdir_info = (undefined8 *)*temp_dir_list;\n          free(temp_dir_list);\n          temp_dir_list = tempdir_info;\n        }\n        rmdir(temp_dir);\n        free(temp_dir);\n        return;\n      }\n    }\n    for (; (current_char = next_char, *next_char != '\\0' && (*next_char != '/')); next_char = next_char + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_and_check_archive_file_001052a2"
        },
        "FUN_001041b0": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001041b0"
        },
        "FUN_001043f0": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "stab_context",
                "list_matching_formats",
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_001043f0"
        },
        "FUN_001042d0": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001042d0"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "generate_symbol_0010e453",
                "param_1": "symbolTableAddress",
                "param_2": "inputString",
                "param_3": "inputArray",
                "lVar1": "arrayElement",
                "cVar2": "status",
                "sVar3": "stringLength",
                "__s": "symbolString",
                "uVar4": "result",
                "lVar5": "counter",
                "ppcVar6": "currentElement",
                "lVar7": "offset"
            },
            "code": "\nundefined8 generateSymbol_0010e453(long symbolTableAddress,char *inputString,char **inputArray)\n\n{\n  long arrayElement;\n  char status;\n  size_t stringLength;\n  undefined2 *symbolString;\n  undefined8 result;\n  long counter;\n  char **currentElement;\n  long offset;\n  \n  if (inputArray == (char **)0x0) {\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      symbolString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)symbolString,\"xe%s:\",inputString);\nLAB_0010e578:\n      status = stab_push_string(symbolTableAddress,symbolString,0,0,4);\n      if (status != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    result = 0;\n  }\n  else {\n    counter = 10;\n    currentElement = inputArray;\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      counter = stringLength + 10;\n    }\n    for (; *currentElement != (char *)0x0; currentElement = currentElement + 1) {\n      stringLength = strlen(*currentElement);\n      counter = counter + 0x14 + stringLength;\n    }\n    symbolString = (undefined2 *)xmalloc(counter);\n    if (inputString == (char *)0x0) {\n      *symbolString = 0x65;\n      counter = 0;\n    }\n    else {\n      counter = *(long *)(symbolTableAddress + 0x68);\n      *(long *)(symbolTableAddress + 0x68) = counter + 1;\n      sprintf((char *)symbolString,\"%s:T%ld=e\",inputString,counter);\n    }\n    offset = 0;\n    while( true ) {\n      arrayElement = *(long *)((long)inputArray + offset);\n      stringLength = strlen((char *)symbolString);\n      if (arrayElement == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)symbolString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)symbolString + stringLength) = 0x3b;\n    if (inputString == (char *)0x0) goto LAB_0010e578;\n    status = stab_write_symbol_lto_priv_0(symbolTableAddress,0x80,0,0,symbolString);\n    if ((status == '\\0') || (status = stab_push_defined_type(symbolTableAddress,counter,4), status == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(symbolString);\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_push_defined_type",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_symbol_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "push_defined_type_00109d5c",
                "param_1": "input",
                "lVar1": "structIndex",
                "uVar2": "result"
            },
            "code": "\nundefined8 pushDefinedType_00109d5c(undefined8 input)\n\n{\n  long structIndex;\n  undefined8 result;\n  \n  structIndex = stab_get_struct_index();\n  if (-1 < structIndex) {\n    result = stab_push_defined_type(input,structIndex,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_push_defined_type",
                "stab_get_struct_index"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_symbol_information_0010ed2c",
                "param_1": "symbol_info",
                "param_2": "new_size",
                "param_3": "data",
                "in_R10": "extra_data",
                "extraout_RDX": "result",
                "cVar1": "success",
                "iVar2": "count",
                "uVar3": "flag",
                "auVar4": "result_data"
            },
            "code": "\nundefined  [16] update_symbol_information_0010ed2c(long symbol_info,ulong new_size,undefined8 data)\n\n{\n  char success;\n  int count;\n  undefined8 result;\n  ulong flag;\n  undefined8 extra_data;\n  undefined result_data [16];\n  \n  if (*(ulong *)(symbol_info + 0x1f0) < new_size) {\n    *(ulong *)(symbol_info + 0x1f0) = new_size;\n  }\n  if (*(long *)(symbol_info + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(symbol_info + 0x1f8) != 0) {\n      count = *(int *)(symbol_info + 0x1f8) + -1;\n      flag = CONCAT71((int7)((ulong)data >> 8),1);\n      *(int *)(symbol_info + 0x1f8) = count;\n      if (count != 0) {\n        result_data = stab_write_symbol_lto_priv_0\n                           (symbol_info,0xe0,0,new_size - *(long *)(symbol_info + 0x200),0,extra_data);\n        return result_data;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    success = stab_write_symbol_lto_priv_0(symbol_info,0xc0,0,*(long *)(symbol_info + 0x208),0);\n    if (success != '\\0') {\n      *(undefined8 *)(symbol_info + 0x208) = 0xffffffffffffffff;\n      data = result;\n      goto LAB_0010ed78;\n    }\n  }\n  flag = 0;\nLAB_0010edae:\n  result_data._0_8_ = flag & 0xffffffff;\n  result_data._8_8_ = extra_data;\n  return result_data;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "update_symbol_information_0010ed2c"
        },
        "FUN_001284e8": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284e8",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_001284e8"
        },
        "FUN_001283c8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283c8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_001283c8"
        },
        "FUN_0010e451": {
            "renaming": {},
            "code": "\nvoid stab_start_source_lto_priv_0(long param_1,undefined8 param_2)\n\n{\n  *(undefined8 *)(param_1 + 0x210) = param_2;\n  stab_write_symbol_lto_priv_0(param_1,0x84,0,0,param_2);\n  return;\n}\n\n",
            "called": [
                "stab_start_source.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_0010e451"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_and_select_0011a1b0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused1",
                "param_4": "unused2",
                "uVar1": "input1EndIndex",
                "uVar2": "input2EndIndex",
                "iVar3": "result",
                "extraout_var": "comparisonResult",
                "uVar4": "combinedResult",
                "auVar5": "finalResult"
            },
            "code": "\nundefined  [16] compareAndSelect_0011a1b0(ulong *input1,ulong *input2,undefined8 unused1,undefined8 unused2)\n\n{\n  ulong input1EndIndex;\n  ulong input2EndIndex;\n  int result;\n  undefined4 comparisonResult;\n  ulong combinedResult;\n  undefined finalResult [16];\n  \n  combinedResult = *input1;\n  if (*input2 <= *input1) {\n    combinedResult = *input2;\n  }\n  result = memcmp((void *)(input1[3] + 3),(void *)(input2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(comparisonResult,result);\n  if (result == 0) {\n    input1EndIndex = input1[8];\n    if (input1EndIndex < input2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      input2EndIndex = input2[8];\n      if (input2EndIndex < input1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (input2[7] <= input1[7]) {\n          if (input2EndIndex < input1EndIndex) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (input2EndIndex <= input1EndIndex) {\n              if (input1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(input2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(input2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  finalResult._8_8_ = unused2;\n  finalResult._0_8_ = combinedResult;\n  return finalResult;\n}\n\n",
            "called": [
                "memcmp",
                "compare_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_and_select_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "extract_gnu_build_attributes_001163d0",
                "param_1": "param_section",
                "param_2": "param_symbols",
                "param_3": "param_size",
                "param_4": "param_output",
                "uVar1": "reloc_size",
                "uVar2": "section_name",
                "uVar3": "symbol_name",
                "uVar7": "warning_message",
                "bVar4": "compare_result",
                "puVar5": "prev_attributes",
                "iVar6": "memcmp_result",
                "lVar8": "gettext_result",
                "__ptr": "reloc_buffer",
                "uVar9": "attr_length",
                "uVar10": "attr_type",
                "uVar11": "note_type",
                "uVar12": "attr_size",
                "uVar13": "attr_name_size",
                "__ptr_00": "note_buffer",
                "uVar14": "offset",
                "uVar15": "attr_value_size",
                "uVar16": "remaining_size",
                "puVar17": "current_attributes",
                "puVar18": "note_name",
                "puVar20": "note_value",
                "iVar21": "loop_counter",
                "puVar22": "input_ptr",
                "puVar23": "attribute_ptr",
                "puVar25": "compare_attributes",
                "uVar24": "attr_value",
                "__nmemb": "num_attributes",
                "bVar26": "byte_flag",
                "local_88": "attr_value_1",
                "uStack_80": "attr_value_2",
                "local_70": "attr_value_3",
                "local_68": "output_size",
                "local_60": "attributes_array",
                "cVar19": "note_version"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\nulong extract_gnu_build_attributes_001163d0(undefined8 *param_section,undefined8 *param_symbols,ulong param_size,undefined *param_output)\n\n{\n  ulong reloc_size;\n  undefined8 section_name;\n  undefined8 symbol_name;\n  bool compare_result;\n  ulong *prev_attributes;\n  int memcmp_result;\n  undefined8 warning_message;\n  long gettext_result;\n  void *reloc_buffer;\n  ulong attr_length;\n  ulong attr_type;\n  ulong note_type;\n  ulong attr_size;\n  undefined *note_buffer;\n  ulong attr_name_size;\n  ulong offset;\n  ulong attr_value_size;\n  ulong remaining_size;\n  ulong *current_attributes;\n  undefined *note_name;\n  char note_version;\n  undefined *note_value;\n  int loop_counter;\n  undefined *input_ptr;\n  ulong *attribute_ptr;\n  ulong attr_value;\n  size_t num_attributes;\n  ulong *compare_attributes;\n  byte byte_flag;\n  ulong attr_value_1;\n  ulong attr_value_2;\n  ulong attr_value_3;\n  ulong output_size;\n  ulong *attributes_array;\n  \n  byte_flag = 0;\n  gettext_result = bfd_get_reloc_upper_bound();\n  output_size = param_size;\n  if (0 < gettext_result) {\n    reloc_buffer = (void *)xmalloc(gettext_result);\n    gettext_result = bfd_canonicalize_reloc(param_section,param_symbols,reloc_buffer,isympp);\n    free(reloc_buffer);\n    if (gettext_result != 0) {\n      if (is_strip == 0) {\n        section_name = *param_section;\n        symbol_name = *param_symbols;\n        warning_message = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        non_fatal(warning_message,section_name,symbol_name);\n      }\n      attributes_array = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  attributes_array = (ulong *)xcalloc(param_size / 0xc,0x48,param_size % 0xc);\n  attr_value_1 = 0;\n  attr_value_3 = 0;\n  remaining_size = param_size;\n  attr_value_size = 0;\n  attribute_ptr = attributes_array;\n  offset = 0;\n  input_ptr = param_output;\n  while (0xb < remaining_size) {\n    attr_type = (**(code **)(param_section[1] + 0x40))(input_ptr);\n    *attribute_ptr = attr_type;\n    attr_type = (**(code **)(param_section[1] + 0x40))(input_ptr + 4);\n    attribute_ptr[1] = attr_type;\n    note_type = (**(code **)(param_section[1] + 0x40))(input_ptr + 8);\n    attr_type = *attribute_ptr;\n    attribute_ptr[2] = note_type;\n    attr_size = attribute_ptr[1];\n    attr_name_size = attr_type + 3 & 0xfffffffffffffffc;\n    attribute_ptr[6] = attr_name_size;\n    if (attr_size != (attr_size + 3 & 0xfffffffffffffffc)) {\n      gettext_result = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < note_type - 0x100) {\n      gettext_result = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    reloc_size = attr_name_size + attr_size + 0xc;\n    if (remaining_size < reloc_size) {\n      gettext_result = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (attr_type < 2) {\n      gettext_result = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    attribute_ptr[3] = (ulong)(input_ptr + 0xc);\n    attribute_ptr[4] = (ulong)(input_ptr + attr_name_size + 0xc);\n    remaining_size = remaining_size + (-0xc - (attr_name_size + attr_size));\n    if (attr_type != 2) {\n      if (input_ptr[0xc] == '$') {\n        if ((input_ptr[0xd] == '\\x01') && (input_ptr[0xe] == '1')) {\n          remaining_size = extract_gnu_build_attributes_001163d0_00116490();\n          return remaining_size;\n        }\n      }\n      else if ((((4 < attr_type) && (input_ptr[0xc] == 'G')) && (input_ptr[0xd] == 'A')) &&\n              ((input_ptr[0xe] == '$' && (input_ptr[0xf] == '\\x01')))) {\n        if (input_ptr[0x10] == '2') {\n          remaining_size = extract_gnu_build_attributes_001163d0_00116490();\n          return remaining_size;\n        }\n        if (input_ptr[0x10] == '3') {\n          remaining_size = extract_gnu_build_attributes_001163d0_00116490();\n          return remaining_size;\n        }\n        gettext_result = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    attr_length = attr_value_size;\n    attr_value = offset;\n    if (attr_size == 0) {\n      if (note_type == 0x100) {\n        attribute_ptr[7] = attr_value_1;\nLAB_001164af:\n        attr_size = offset;\n        attr_value = offset;\n      }\n      else {\n        attribute_ptr[7] = attr_value_3;\nLAB_0011669e:\n        attr_length = attr_value_size;\n        attr_size = attr_value_size;\n      }\n    }\n    else {\n      if (attr_size != 0x10) {\n        if (attr_size < 0x11) {\n          if (attr_size == 4) {\n            note_type = (**(code **)(param_section[1] + 0x40))();\n            attr_size = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (attr_size == 8) {\n            remaining_size = FUNC_001086af();\n            return remaining_size;\n          }\n        }\n        gettext_result = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      note_type = (**(code **)(param_section[1] + 0x28))(input_ptr + attr_name_size + 0xc);\n      attr_size = (**(code **)(param_section[1] + 0x28))();\n      if (attr_size < note_type) {\n        note_type = attr_size;\n      }\nLAB_00116631:\n      if (attribute_ptr[2] == 0x100) {\n        if (note_type == 0) {\n          note_type = attr_value_1;\n        }\n        attr_type = *attribute_ptr;\n        attribute_ptr[7] = note_type;\n        attr_value = attr_size;\n        attr_value_1 = note_type;\n        if (attr_size == 0) goto LAB_001164af;\n      }\n      else {\n        if (note_type == 0) {\n          note_type = attr_value_3;\n        }\n        attr_type = *attribute_ptr;\n        attribute_ptr[7] = note_type;\n        attr_length = attr_size;\n        attr_value_3 = note_type;\n        if (attr_size == 0) goto LAB_0011669e;\n      }\n    }\n    attribute_ptr[8] = attr_size;\n    if (*(char *)((attribute_ptr[3] - 1) + attr_type) != '\\0') {\n      gettext_result = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    attribute_ptr = attribute_ptr + 9;\n    attr_value_size = attr_length;\n    offset = attr_value;\n    input_ptr = input_ptr + reloc_size;\n  }\n  if (remaining_size == 0) {\n    section_name = *param_section;\n    symbol_name = *param_symbols;\n    warning_message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    non_fatal(warning_message,section_name,symbol_name);\n    num_attributes = ((long)attribute_ptr - (long)attributes_array >> 3) * -0x71c71c71c71c71c7;\n    qsort(attributes_array,num_attributes,0x48,compare_gnu_build_notes);\n    for (current_attributes = attributes_array; current_attributes < attribute_ptr; current_attributes = current_attributes + 9) {\n      remaining_size = current_attributes[2];\n      if (remaining_size != 0) {\n        attr_value_size = current_attributes[7];\n        offset = current_attributes[8];\n        compare_attributes = current_attributes;\n        loop_counter = 0;\n        if (attr_value_size == offset) {\n          current_attributes[2] = 0;\n        }\n        else {\n          do {\n            do {\n              prev_attributes = compare_attributes;\n              compare_attributes = prev_attributes + -9;\n              if (compare_attributes < attributes_array) goto LAB_001167f5;\n              attr_type = prev_attributes[-7];\n            } while (attr_type == 0);\n            if ((*compare_attributes != *current_attributes) ||\n               (memcmp_result = memcmp((void *)prev_attributes[-6],(void *)current_attributes[3],*current_attributes), memcmp_result != 0)) break;\n            attr_size = prev_attributes[-2];\n            note_type = prev_attributes[-1];\n            if (attr_value_size == attr_size) {\n              if (offset == note_type) {\n                current_attributes[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (offset <= note_type) {\n                current_attributes[2] = 0;\n                break;\n              }\n              if (note_type < attr_value_size) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < note_type) || (attr_value_size <= (note_type + 0xf & 0xfffffffffffffff0))\n                   ) goto process_notes_00116852;\n              }\nLAB_001167b8:\n              if ((remaining_size == 0x101) == (attr_type == 0x101)) {\n                if (note_type <= offset) {\n                  note_type = offset;\n                }\n                if (attr_size < attr_value_size) {\n                  attr_value_size = attr_size;\n                }\n                prev_attributes[-1] = note_type;\n                prev_attributes[-2] = attr_value_size;\n                current_attributes[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (attr_size <= attr_value_size) goto LAB_001167a6;\n              if (note_type < attr_value_size) goto LAB_0010852c;\n              if (offset < attr_value_size) {\n                if ((0xfffffffffffffff0 < offset) || (attr_size <= (offset + 0xf & 0xfffffffffffffff0))\n                   ) goto process_notes_00116852;\n                goto LAB_001167b8;\n              }\n              if (offset != note_type) goto LAB_001167b8;\n            }\nprocess_notes_00116852:\n            compare_result = loop_counter < 0x11;\n            loop_counter = loop_counter + 1;\n          } while (compare_result);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(attributes_array,num_attributes,0x48,sort_gnu_build_notes);\n    note_buffer = (undefined *)xmalloc(param_size * 2);\n    attr_value_2 = 0;\n    attr_value_3 = 0;\n    input_ptr = note_buffer;\n    for (current_attributes = attributes_array; current_attributes < attribute_ptr; current_attributes = current_attributes + 9) {\n      if (current_attributes[2] != 0) {\n        note_name = input_ptr + 0xc;\n        if ((current_attributes[7] == attr_value_3) && (current_attributes[8] == attr_value_2)) {\n          (**(code **)(param_section[1] + 0x50))(*current_attributes,input_ptr);\n          (**(code **)(param_section[1] + 0x50))(0,input_ptr + 4);\n          (**(code **)(param_section[1] + 0x50))(current_attributes[2],input_ptr + 8);\n          attr_value_size = current_attributes[6];\n          remaining_size = *current_attributes;\n          input_ptr = (undefined *)current_attributes[3];\n          note_value = note_name;\n          for (offset = remaining_size; offset != 0; offset = offset - 1) {\n            *note_value = *input_ptr;\n            input_ptr = input_ptr + (ulong)byte_flag * -2 + 1;\n            note_value = note_value + (ulong)byte_flag * -2 + 1;\n          }\n          if (remaining_size < attr_value_size) {\n            for (gettext_result = attr_value_size - remaining_size; gettext_result != 0; gettext_result = gettext_result + -1) {\n              *note_value = 0;\n              note_value = note_value + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          input_ptr = note_name + attr_value_size;\n        }\n        else {\n          (**(code **)(param_section[1] + 0x50))();\n          if (*(int *)(param_section[1] + 8) == 5) {\n            note_version = (*(char *)(param_section[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            note_version = '\\b';\n          }\n          (**(code **)(param_section[1] + 0x50))(note_version,input_ptr + 4);\n          (**(code **)(param_section[1] + 0x50))(current_attributes[2],input_ptr + 8);\n          remaining_size = *current_attributes;\n          input_ptr = (undefined *)current_attributes[3];\n          note_value = note_name;\n          for (attr_value_size = remaining_size; attr_value_size != 0; attr_value_size = attr_value_size - 1) {\n            *note_value = *input_ptr;\n            input_ptr = input_ptr + (ulong)byte_flag * -2 + 1;\n            note_value = note_value + (ulong)byte_flag * -2 + 1;\n          }\n          attr_value_size = current_attributes[6];\n          if (remaining_size < attr_value_size) {\n            for (gettext_result = attr_value_size - remaining_size; gettext_result != 0; gettext_result = gettext_result + -1) {\n              *note_value = 0;\n              note_value = note_value + (ulong)byte_flag * -2 + 1;\n            }\n          }\n          gettext_result = param_section[1];\n          note_name = note_name + attr_value_size;\n          input_ptr = note_name + 8;\n          if ((*(int *)(gettext_result + 8) == 5) && (*(char *)(param_section[0x22] + 4) == '\\x02')) {\n            (**(code **)(gettext_result + 0x38))(current_attributes[7],note_name);\n            (**(code **)(param_section[1] + 0x38))(current_attributes[8],input_ptr);\n            input_ptr = note_name + 0x10;\n          }\n          else {\n            (**(code **)(gettext_result + 0x50))(current_attributes[7],note_name);\n            (**(code **)(param_section[1] + 0x50))(current_attributes[8],note_name + 4);\n          }\n          attr_value_3 = current_attributes[7];\n          attr_value_2 = current_attributes[8];\n        }\n      }\n    }\n    attr_value_size = (long)input_ptr - (long)note_buffer;\n    remaining_size = attr_value_size;\n    input_ptr = note_buffer;\n    output_size = param_size;\n    if (attr_value_size < param_size) {\n      for (; output_size = attr_value_size, remaining_size != 0; remaining_size = remaining_size - 1) {\n        *param_output = *input_ptr;\n        input_ptr = input_ptr + (ulong)byte_flag * -2 + 1;\n        param_output = param_output + (ulong)byte_flag * -2 + 1;\n      }\n    }\n    free(note_buffer);\n  }\n  else {\n    gettext_result = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (gettext_result != 0) {\n      bfd_set_error(0x11);\n      bfd_nonfatal_message(0,param_section,param_symbols,gettext_result);\n      status = 1;\n    }\n  }\nLAB_001166f8:\n  free(attributes_array);\n  return output_size;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "extract_gnu_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "programName",
                "pcVar2": "translation"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 programName;\n  char *translation;\n  \n  programName = program_name;\n  translation = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,translation,programName);\n  translation = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,translation);\n  translation = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,translation);\n  list_supported_targets(program_name,outputFile);\n  if (exitCode == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "extract_binary_info_00108c86",
                "param_1": "binary_ptr",
                "cVar1": "startswith_lto_priv_0",
                "iVar2": "comparison_result",
                "sVar3": "string_length",
                "puVar4": "extracted_info_ptr",
                "lVar5": "offset",
                "__s": "string_ptr",
                "__s1": "platform_ptr",
                "puVar6": "info_ptr",
                "uVar7": "result",
                "bVar8": "flag"
            },
            "code": "\nundefined8 extract_binary_info_00108c86(long *binary_ptr)\n\n{\n  char startswith_lto_priv_0;\n  int comparison_result;\n  size_t string_length;\n  undefined2 *extracted_info_ptr;\n  long offset;\n  char *string_ptr;\n  char *platform_ptr;\n  undefined2 *info_ptr;\n  undefined8 result;\n  byte flag;\n  \n  flag = 0;\n  offset = *binary_ptr;\n  string_ptr = (char *)(offset + 4);\n  startswith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(string_ptr,&DAT_0011b73b);\n  if (startswith_lto_priv_0 == '\\0') {\n    startswith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(string_ptr,\"bsdrv-\");\n    if (startswith_lto_priv_0 == '\\0') {\n      startswith_lto_priv_0 = startswith_lto_priv_0_lto_priv_0(string_ptr,\"rtdrv-\");\n      if (startswith_lto_priv_0 == '\\0') {\n        return 0xffffffff;\n      }\n      string_ptr = (char *)(offset + 6);\n      result = 0xc;\n    }\n    else {\n      string_ptr = (char *)(offset + 6);\n      result = 0xb;\n    }\n  }\n  else {\n    result = 10;\n  }\n  string_length = strlen(string_ptr);\n  extracted_info_ptr = (undefined2 *)xmalloc(string_length + 8);\n  platform_ptr = string_ptr + 4;\n  info_ptr = extracted_info_ptr;\n  for (offset = string_length + 1; offset != 0; offset = offset + -1) {\n    *(char *)info_ptr = *string_ptr;\n    string_ptr = string_ptr + (ulong)flag * -2 + 1;\n    info_ptr = (undefined2 *)((long)info_ptr + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(extracted_info_ptr + 1) = 0x69;\n  *extracted_info_ptr = 0x6570;\n  comparison_result = strcmp(platform_ptr,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)extracted_info_ptr + 7) = 0x36;\n    *(undefined2 *)((long)extracted_info_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(platform_ptr,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)extracted_info_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(platform_ptr,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)extracted_info_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *binary_ptr = (long)extracted_info_ptr;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_binary_info_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "message",
                "__format": "errorFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 message)\n\n{\n  char *errorFormat;\n  \n  errorFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,errorFormat,message);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_args",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "FUN_00104910": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00104910"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "close_bfd_and_return_status_001053d5",
                "unaff_R12": "filePointer",
                "unaff_R14": "handlePointer"
            },
            "code": "\nundefined4 closeBfdAndReturnStatus_001053d5(void)\n\n{\n  long filePointer;\n  undefined8 *handlePointer;\n  \n  bfd_nonfatal(*handlePointer);\n  *(undefined4 *)(filePointer + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(filePointer + 8);\n}\n\n",
            "called": [
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "close_bfd_and_return_status_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_set_flags_00104bba",
                "in_EAX": "eaxValue",
                "uVar1": "errorMessage",
                "unaff_EBP": "ebpValue",
                "unaff_R14": "r14Value"
            },
            "code": "\nvoid checkAndSetFlags_00104bba(void)\n\n{\n  uint eaxValue;\n  undefined8 errorMessage;\n  uint ebpValue;\n  long r14Value;\n  \n  if ((eaxValue & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    fatal(errorMessage);\n  }\n  if ((((eaxValue & 8) == 0) || ((ebpValue & 0x10) == 0)) && ((ebpValue & 0x18) != 0x18)) {\n    if ((((eaxValue & 0x20) == 0) || ((ebpValue & 0x40) == 0)) && ((ebpValue & 0x60) != 0x60)) {\n      *(uint *)(r14Value + 0x14) = eaxValue | ebpValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    fatal(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "find_section_list"
            ],
            "imported": false,
            "current_name": "check_and_set_flags_00104bba"
        },
        "FUN_001040a0": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "stab_class_method_var",
                "stab_variable.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0",
                "stab_struct_field.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040a0"
        },
        "FUN_00104918": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "merge_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104918"
        },
        "FUN_001042e0": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001042e0"
        },
        "FUN_001283b0": {
            "renaming": {},
            "code": "\n\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fchmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b0",
            "calling": [
                "fchmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b0"
        },
        "FUN_001041c0": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001041c0"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "i",
                "puVar3": "destPtr",
                "bVar4": "reverseFlag"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *destPtr;\n  byte reverseFlag;\n  \n  reverseFlag = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  destPtr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *destPtr = *source;\n    source = source + (ulong)reverseFlag * -2 + 1;\n    destPtr = destPtr + (ulong)reverseFlag * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slot_0010da0b",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "uVar1": "error_msg",
                "plVar2": "slot_ptr",
                "lVar3": "index_offset",
                "lVar4": "loop_counter",
                "uVar5": "temp",
                "bVar6": "flag",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slot_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_msg;\n  long *slot_ptr;\n  long index_offset;\n  long loop_counter;\n  ulong temp;\n  byte flag;\n  undefined result [16];\n  \n  flag = 0;\n  temp = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)temp; temp = temp - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        slot_ptr = (long *)xmalloc(0x88);\n        *slot_ptr = slot_ptr;\n        for (index_offset = 0x22; index_offset != 0; index_offset = index_offset + -1) {\n          *(undefined4 *)slot_ptr = 0;\n          slot_ptr = (long *)((long)slot_ptr + (ulong)flag * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    index_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      index_offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      slot_ptr = (long *)xmalloc(0x88);\n      *slot_ptr = slot_ptr;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)slot_ptr = 0;\n        slot_ptr = (long *)((long)slot_ptr + (ulong)flag * -8 + 4);\n      }\n    }\n    result._8_8_ = param_4;\n    result._0_8_ = *slot_ptr + slot_index + index_offset + 1;\n    return result;\n  }\n  error_msg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  fatal(error_msg,slot_index);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slot_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "puVar1": "memoryBlock",
                "puVar2": "dynamicMemory",
                "lVar3": "loopCounter",
                "bVar4": "byteFlag"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 value1,undefined value2,undefined8 value3,undefined8 value4)\n\n{\n  undefined8 *memoryBlock;\n  undefined8 *dynamicMemory;\n  long loopCounter;\n  byte byteFlag;\n  \n  byteFlag = 0;\n  memoryBlock = (undefined8 *)xmalloc(0x1b0);\n  dynamicMemory = memoryBlock;\n  for (loopCounter = 0x6c; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *(undefined4 *)dynamicMemory = 0;\n    dynamicMemory = (undefined8 *)((long)dynamicMemory + (ulong)byteFlag * -8 + 4);\n  }\n  *memoryBlock = value1;\n  *(undefined *)(memoryBlock + 1) = value2;\n  memoryBlock[2] = value3;\n  memoryBlock[3] = value4;\n  *(undefined4 *)(memoryBlock + 0x10) = 1;\n  dynamicMemory = (undefined8 *)xmalloc(8);\n  memoryBlock[0xd] = 0xffffffffffffffff;\n  memoryBlock[0x11] = dynamicMemory;\n  *dynamicMemory = 0;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_00109b2f",
                "param_1": "address",
                "__ptr": "ptr",
                "puVar1": "nextPtr"
            },
            "code": "\nundefined8 * extractAndFree_00109b2f(long address)\n\n{\n  undefined8 *ptr;\n  undefined8 *nextPtr;\n  \n  ptr = *(undefined8 **)(address + 0x60);\n  if (ptr != (undefined8 *)0x0) {\n    nextPtr = (undefined8 *)ptr[1];\n    *(undefined8 *)(address + 0x60) = *ptr;\n    free(ptr);\n    return nextPtr;\n  }\n  return ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "stab_class_baseclass.lto_priv.0",
                "stab_modify_type",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extract_and_free_00109b2f"
        },
        "FUN_001283b8": {
            "renaming": {},
            "code": "\n\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* chmod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283b8",
            "calling": [
                "chmod"
            ],
            "imported": false,
            "current_name": "FUN_001283b8"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_redefinition_00108d9a",
                "param_1": "msg",
                "param_2": "symbol_name_1",
                "param_3": "symbol_name_2",
                "param_4": "result",
                "ppcVar1": "string_ptrs",
                "pcVar2": "duplicated_symbol",
                "lVar3": "lookup_result",
                "uVar4": "error_message",
                "plVar5": "htab_slot"
            },
            "code": "\nundefined8 check_redefinition_00108d9a(undefined8 msg,char *symbol_name_1,char *symbol_name_2,undefined8 result)\n\n{\n  char **string_ptrs;\n  char *duplicated_symbol;\n  long lookup_result;\n  undefined8 error_message;\n  long *htab_slot;\n  \n  string_ptrs = (char **)xmalloc(0x10);\n  duplicated_symbol = strdup(symbol_name_1);\n  *string_ptrs = duplicated_symbol;\n  duplicated_symbol = strdup(symbol_name_2);\n  error_message = redefine_specific_htab;\n  string_ptrs[1] = duplicated_symbol;\n  lookup_result = htab_find(error_message,string_ptrs);\n  if (lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    fatal(error_message,msg,symbol_name_1);\n  }\n  lookup_result = htab_find(redefine_specific_reverse_htab,symbol_name_2);\n  if (lookup_result != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    fatal(error_message,msg,symbol_name_2);\n  }\n  htab_slot = (long *)htab_find_slot(redefine_specific_htab,string_ptrs,1);\n  error_message = redefine_specific_reverse_htab;\n  *htab_slot = (long)string_ptrs;\n  duplicated_symbol = string_ptrs[1];\n  string_ptrs = (char **)htab_find_slot(error_message,duplicated_symbol,1);\n  *string_ptrs = duplicated_symbol;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "strdup",
                "htab_find_slot",
                "htab_find",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_redefinition_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "write_symbol_0010e9a0",
                "param_1": "dataAddress",
                "param_2": "symbolName",
                "param_3": "symbolType",
                "__s": "symbolValue",
                "__s_00": "newSymbolValue",
                "__s_01": "formattedSymbol",
                "pcVar5": "symbolCode",
                "uVar2": "result",
                "lVar1": "symbolCount",
                "sVar3": "symbolNameLength",
                "sVar4": "symbolValueLength",
                "uVar6": "symbolAttribute"
            },
            "code": "\nundefined4 writeSymbol_0010e9a0(long dataAddress,char *symbolName,undefined4 symbolType,undefined8 param_4)\n\n{\n  long symbolCount;\n  undefined4 result;\n  byte *symbolValue;\n  byte *newSymbolValue;\n  size_t symbolNameLength;\n  size_t symbolValueLength;\n  char *formattedSymbol;\n  char *symbolCode;\n  undefined8 symbolAttribute;\n  \n  symbolValue = (byte *)stab_pop_type();\n  switch(symbolType) {\n  case 1:\n    symbolCode = \"G\";\n    symbolAttribute = 0x20;\n    break;\n  case 2:\n    symbolCode = \"S\";\n    symbolAttribute = 0x26;\n    break;\n  case 3:\n    symbolCode = \"V\";\n    symbolAttribute = 0x26;\n    break;\n  case 4:\n    symbolCode = \"\";\n    symbolAttribute = 0x80;\n    if (((&_sch_istable)[(ulong)*symbolValue * 2] & 4) == 0) {\n      symbolCount = *(long *)(dataAddress + 0x68);\n      *(long *)(dataAddress + 0x68) = symbolCount + 1;\n      symbolNameLength = strlen((char *)symbolValue);\n      newSymbolValue = (byte *)xmalloc(symbolNameLength + 0x14);\n      sprintf((char *)newSymbolValue,\"%ld=%s\",symbolCount,symbolValue);\n      free(symbolValue);\n      symbolValue = newSymbolValue;\n    }\n    break;\n  case 5:\n    symbolCode = \"r\";\n    symbolAttribute = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  symbolNameLength = strlen(symbolName);\n  symbolValueLength = strlen((char *)symbolValue);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 3 + symbolValueLength);\n  sprintf(formattedSymbol,\"%s:%s%s\",symbolName,symbolCode,symbolValue);\n  free(symbolValue);\n  result = stab_write_symbol_lto_priv_0(dataAddress,symbolAttribute,0,param_4,formattedSymbol);\n  if ((char)result != '\\0') {\n    free(formattedSymbol);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_0010e9a0"
        },
        "FUN_001042f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_001042f0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_match_error_0010827b",
                "unaff_RBX": "sectionPointer",
                "uVar1": "sectionValue",
                "uVar2": "errorString",
                "dcgettext": "getErrorMessage",
                "fatal": "displayFatalError"
            },
            "code": "\nvoid handleSectionMatchError_0010827b(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorString;\n  undefined8 *sectionPointer;\n  \n  sectionValue = *sectionPointer;\n  errorString = getErrorMessage(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  displayFatalError(errorString,sectionValue);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "handle_section_match_error_0010827b"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "print_error_message_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid printErrorMessage_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = getLocalizedString(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "print_error_message_00104920"
        },
        "FUN_00104800": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "stab_context",
                "bfd_nonfatal_message",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104800"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTable",
                "htab_hash_string": "hashString",
                "htab_eq_string": "isEqualString",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  createHashTable(0x10,hashString,isEqualString,0,allocateMemory,deallocateMemory);\n  return;\n}\n\n",
            "called": [
                "free",
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "FUN_001283e8": {
            "renaming": {},
            "code": "\n\n\n\nint open(char *__file,int __oflag,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* open@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283e8",
            "calling": [
                "open"
            ],
            "imported": false,
            "current_name": "FUN_001283e8"
        },
        "FUN_001282c0": {
            "renaming": {},
            "code": "\n\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtol@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282c0",
            "calling": [
                "strtol"
            ],
            "imported": false,
            "current_name": "FUN_001282c0"
        },
        "FUN_001281a0": {
            "renaming": {},
            "code": "\n\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputs@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281a0",
            "calling": [
                "fputs"
            ],
            "imported": false,
            "current_name": "FUN_001281a0"
        },
        "FUN_001041d0": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001041d0"
        },
        "FUN_001040b0": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "set_times.cold",
                "simple_copy.cold",
                "smart_rename.cold",
                "main",
                "parse_number",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "simple_copy",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_001040b0"
        },
        "FUN_00116aa0": {
            "renaming": {
                "FUN_00116aa0": "start_program_00116aa0",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stack",
                "__libc_start_main": "initialize",
                "main": "entryPoint",
                "stack0x00000008": "stackParam"
            },
            "code": "\nvoid processEntry startProgram_00116aa0(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stack [8];\n  \n  initialize(entryPoint,arg2,&stackParam,0,0,arg1,stack);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "main",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "start_program_00116aa0"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_and_group_signature_00108179",
                "lVar1": "alignment",
                "lVar2": "groupSignature",
                "cVar3": "returnValue",
                "lVar4": "errorString",
                "lVar5": "signatureCheckResult",
                "unaff_RBX": "RBX",
                "unaff_RBP": "RBP",
                "unaff_R12": "R12",
                "unaff_R14B": "R14B",
                "unaff_R15": "R15"
            },
            "code": "\nvoid setAlignmentAndGroupSignature_00108179(void)\n\n{\n  long alignment;\n  long groupSignature;\n  char returnValue;\n  long errorString;\n  long signatureCheckResult;\n  long RBX;\n  long RBP;\n  long R12;\n  char R14B;\n  long R15;\n  \n  errorString = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(R15 + 0xb4) = *(undefined4 *)(RBX + 0xb4);\n  *(byte *)(R15 + 0x28) =\n       *(byte *)(R15 + 0x28) & 0xcf | *(byte *)(RBX + 0x28) & 0x30;\n  *(long *)(RBX + 0x60) = R15;\n  *(undefined8 *)(RBX + 0x58) = 0;\n  if ((*(byte *)(RBX + 0x27) & 2) != 0) {\n    alignment = *(long *)(RBX + 0xd0);\n    signatureCheckResult = group_signature_isra_0(alignment,*(undefined8 *)(RBX + 0xe0));\n    if ((signatureCheckResult != 0) &&\n       (groupSignature = *(long *)(R12 + 8), *(uint *)(signatureCheckResult + 0x18) = *(uint *)(signatureCheckResult + 0x18) | 0x20,\n       *(int *)(groupSignature + 8) == 5)) {\n      *(long *)(alignment + 0xb0) = signatureCheckResult;\n      returnValue = (**(code **)(*(long *)(RBP + 8) + 0x158))();\n      if (returnValue == '\\0') {\n        update_status_and_message_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  returnValue = (**(code **)(*(long *)(RBP + 8) + 0x158))();\n  if (returnValue == '\\0') {\n    update_status_and_message_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (R14B != '\\0') {\n    *(undefined4 *)(*(long *)(R15 + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    status = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010808f",
                "dcgettext",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "setup_section.cold"
            ],
            "imported": false,
            "current_name": "set_alignment_and_group_signature_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "extract_file_info_00109022",
                "param_1": "fileCount",
                "param_2": "fileIndices",
                "uVar1": "fileIndex",
                "pcVar2": "errorMsg",
                "plVar3": "fileInfo",
                "lVar4": "loopCounter",
                "uVar5": "fileNumber",
                "pplVar6": "fileList",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] extractFileInfo_00109022(long fileCount,uint *fileIndices,undefined8 param_3,undefined8 param_4)\n\n{\n  uint fileIndex;\n  char *errorMsg;\n  long *fileInfo;\n  long loopCounter;\n  uint fileNumber;\n  long **fileList;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  fileNumber = *fileIndices;\n  fileIndex = fileIndices[1];\n  if (((int)fileNumber < 0) || (*(uint *)(fileCount + 0x80) <= fileNumber)) {\n    errorMsg = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)fileNumber);\n  }\n  else {\n    if (-1 < (int)fileIndex) {\n      fileList = (long **)(*(long *)(fileCount + 0x88) + (long)(int)fileNumber * 8);\n      for (fileNumber = fileIndex; 0xf < (int)fileNumber; fileNumber = fileNumber - 0x10) {\n        if (*fileList == (long *)0x0) {\n          fileInfo = (long *)xmalloc(0x88);\n          *fileList = fileInfo;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileInfo = 0;\n            fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileList = (long **)*fileList;\n      }\n      if (*fileList == (long *)0x0) {\n        fileInfo = (long *)xmalloc(0x88);\n        *fileList = fileInfo;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileInfo = 0;\n          fileInfo = (long *)((long)fileInfo + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileInfo = *fileList + (long)(int)((fileIndex >> 4) * -0x10 + fileIndex) + 1;\n      goto LAB_00109117;\n    }\n    errorMsg = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorMsg,(ulong)fileIndex);\n  }\n  fileInfo = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = param_4;\n  returnValue._0_8_ = fileInfo;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "parse_stab_type",
                "stab_find_type"
            ],
            "imported": false,
            "current_name": "extract_file_info_00109022"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file",
                "param_2": "variable",
                "param_3": "namespace",
                "param_4": "index",
                "param_5": "value",
                "param_6": "result",
                "auVar1": "temp1",
                "auVar9": "temp2",
                "uVar2": "returnValue",
                "piVar3": "ptr",
                "piVar7": "ptr2",
                "cVar4": "flag",
                "lVar5": "counter",
                "lVar6": "currentFile",
                "bVar8": "byteFlag"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file,long variable,ulong namespace,int index,undefined8 value,\n            undefined8 result)\n\n{\n  undefined temp1 [16];\n  undefined8 returnValue;\n  int *ptr;\n  char flag;\n  long counter;\n  long currentFile;\n  int *ptr2;\n  byte byteFlag;\n  undefined temp2 [16];\n  \n  byteFlag = 0;\n  if (variable == 0) {\n    temp1._8_8_ = 0;\n    temp1._0_8_ = namespace;\n    return temp1 << 0x40;\n  }\n  if (namespace != 0) {\n    if ((*(long *)(file + 8) == 0) || (currentFile = *(long *)(file + 0x10), currentFile == 0)) {\n      returnValue = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",returnValue);\n    }\n    else {\n      if (index - 1U < 2) {\n        currentFile = currentFile + 0x10;\n        flag = (index == 1) + '\\x01';\n      }\n      else if (*(long *)(file + 0x20) == 0) {\n        currentFile = currentFile + 0x10;\n        flag = '\\0';\n      }\n      else {\n        currentFile = *(long *)(file + 0x20) + 0x28;\n        flag = '\\0';\n      }\n      currentFile = debug_add_to_namespace_constprop_0(currentFile,variable,2,flag);\n      if (currentFile != 0) {\n        ptr = (int *)xmalloc(0x18);\n        ptr2 = ptr + 1;\n        for (counter = 5; counter != 0; counter = counter + -1) {\n          *ptr2 = 0;\n          ptr2 = ptr2 + (ulong)byteFlag * -2 + 1;\n        }\n        *ptr = index;\n        returnValue = 1;\n        *(ulong *)(ptr + 2) = namespace;\n        *(undefined8 *)(ptr + 4) = value;\n        *(int **)(currentFile + 0x20) = ptr;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  returnValue = 0;\nLAB_0010c12e:\n  temp2._8_8_ = result;\n  temp2._0_8_ = returnValue;\n  return temp2;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "stab_record_variable",
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "stab_emit_pending_vars"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_001041e0": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_001041e0"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "push_defined_type_or_string_00109d97",
                "param_1": "functionPointer",
                "lVar1": "value",
                "local_40": "buffer"
            },
            "code": "\nvoid pushDefinedTypeOrString_00109d97(long functionPointer)\n\n{\n  long value;\n  char buffer [40];\n  \n  if (*(long *)(functionPointer + 0x70) != 0) {\n    stab_push_defined_type(functionPointer,*(long *)(functionPointer + 0x70),0);\n    return;\n  }\n  value = *(long *)(functionPointer + 0x68);\n  *(long *)(functionPointer + 0x68) = value + 1;\n  sprintf(buffer,\"%ld=%ld\",value,value);\n  stab_push_string(functionPointer,buffer,value,0,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_or_string_00109d97"
        },
        "FUN_001284f0": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001284f0",
            "calling": [
                "main",
                "create_symbol_htab",
                "free"
            ],
            "imported": false,
            "current_name": "FUN_001284f0"
        },
        "FUN_00104810": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104810"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "FUNC_001086af"
            },
            "code": "\nulong FUNC_001086af(void)\n\n{\n  ulong uVar1;\n  undefined8 uVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  undefined *__ptr;\n  ulong in_RCX;\n  ulong uVar12;\n  ulong uVar13;\n  ulong uVar14;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar15;\n  undefined *puVar16;\n  char cVar17;\n  undefined *puVar18;\n  undefined *puVar19;\n  ulong *unaff_R12;\n  ulong unaff_R13;\n  ulong uVar20;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar21;\n  byte bVar22;\n  int iVar23;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong param_10;\n  ulong *param_11;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint param_13;\n  undefined8 *param_14;\n  \n  bVar22 = 0;\n  param_7 = in_RCX;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n  uVar10 = (**(code **)(unaff_R14[1] + 0x40))(unaff_R12[4] + 4);\nLAB_0011662a:\n  uVar13 = unaff_RBP;\n  uVar20 = unaff_R13;\n  if (uVar10 < uVar9) {\n    uVar9 = uVar10;\n  }\n  do {\n    uVar11 = param_7;\n    uVar12 = param_7;\n    puVar15 = unaff_R12;\n    if (unaff_R12[2] == 0x100) {\n      if (uVar9 == 0) {\n        uVar9 = unaff_retaddr;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar13;\n      unaff_R13 = uVar10;\n      unaff_retaddr = uVar9;\n      if (uVar10 == 0) goto LAB_001164af;\n    }\n    else {\n      if (uVar9 == 0) {\n        uVar9 = param_9;\n      }\n      uVar14 = *unaff_R12;\n      unaff_R12[7] = uVar9;\n      unaff_RBP = uVar10;\n      unaff_R13 = uVar20;\n      param_9 = uVar9;\n      if (uVar10 == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    puVar15[8] = uVar10;\n    if (*(char *)((puVar15[3] - 1) + uVar14) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    unaff_R12 = puVar15 + 9;\n    if (unaff_RBX < 0xc) {\n      if (unaff_RBX != 0) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((in_stack_00000038 | param_13 | param_8) != 0) {\n        if (((param_13 | param_8) == 0) || (in_stack_00000038 == 0)) {\n          if (param_13 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      uVar2 = *unaff_R14;\n      uVar3 = *param_14;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar2,uVar3);\nLAB_0011671b:\n      __nmemb = ((long)unaff_R12 - (long)param_11 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param_11,__nmemb,0x48,compare_gnu_build_notes);\n      puVar15 = param_11;\n      goto LAB_001167f9;\n    }\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12);\n    *unaff_R12 = uVar10;\n    uVar10 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 4);\n    puVar15[10] = uVar10;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))(uVar12 + 8);\n    uVar14 = *unaff_R12;\n    puVar15[0xb] = uVar9;\n    uVar10 = puVar15[10];\n    uVar13 = uVar14 + 3 & 0xfffffffffffffffc;\n    puVar15[0xf] = uVar13;\n    if (uVar10 != (uVar10 + 3 & 0xfffffffffffffffc)) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < uVar9 - 0x100) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    uVar11 = uVar13 + uVar10 + 0xc;\n    if (unaff_RBX < uVar11) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (uVar14 < 2) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    puVar15[0xc] = uVar12 + 0xc;\n    uVar1 = uVar12 + 0xc + uVar13;\n    puVar15[0xd] = uVar1;\n    unaff_RBX = unaff_RBX + (-0xc - (uVar13 + uVar10));\n    uVar11 = uVar12 + uVar11;\n    if (uVar14 != 2) {\n      if (*(char *)(uVar12 + 0xc) == '$') {\n        if ((*(char *)(uVar12 + 0xd) == '\\x01') && (*(char *)(uVar12 + 0xe) == '1')) {\n          uVar10 = extract_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n      }\n      else if ((((4 < uVar14) && (*(char *)(uVar12 + 0xc) == 'G')) &&\n               (*(char *)(uVar12 + 0xd) == 'A')) &&\n              ((*(char *)(uVar12 + 0xe) == '$' && (*(char *)(uVar12 + 0xf) == '\\x01')))) {\n        if (*(char *)(uVar12 + 0x10) == '2') {\n          uVar10 = extract_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        if (*(char *)(uVar12 + 0x10) == '3') {\n          uVar10 = extract_gnu_build_attributes_00116490();\n          return uVar10;\n        }\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    uVar13 = unaff_RBP;\n    uVar20 = unaff_R13;\n    if (uVar10 == 0) {\n      if (uVar9 == 0x100) {\n        puVar15[0x10] = unaff_retaddr;\nLAB_001164af:\n        uVar12 = uVar11;\n        uVar10 = uVar20;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      else {\n        puVar15[0x10] = param_9;\nLAB_0011669e:\n        unaff_RBP = uVar13;\n        uVar12 = uVar11;\n        uVar10 = uVar13;\n        puVar15 = unaff_R12;\n        unaff_R13 = uVar20;\n      }\n      goto LAB_001164bb;\n    }\n    if (uVar10 == 0x10) break;\n    if (0x10 < uVar10) {\nLAB_00116679:\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (lVar7 != 0) {\n        bfd_set_error(0x11);\n        bfd_nonfatal_message(0,unaff_R14,param_14,lVar7);\n        status = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (uVar10 != 4) {\n      if (uVar10 == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n      goto LAB_00116679;\n    }\n    param_7 = uVar11;\n    uVar9 = (**(code **)(unaff_R14[1] + 0x40))();\n    uVar10 = 0xffffffffffffffff;\n  } while( true );\n  param_7 = uVar11;\n  uVar9 = (**(code **)(unaff_R14[1] + 0x28))(uVar1);\n  uVar10 = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (unaff_R12 <= puVar15) {\n    qsort(param_11,__nmemb,0x48,sort_gnu_build_notes);\n    __ptr = (undefined *)xmalloc(param_10 * 2);\n    param_7 = 0;\n    param_9 = 0;\n    puVar19 = __ptr;\n    for (puVar15 = param_11; puVar15 < unaff_R12; puVar15 = puVar15 + 9) {\n      if (puVar15[2] != 0) {\n        puVar18 = puVar19 + 4;\n        puVar16 = puVar19 + 0xc;\n        if ((puVar15[7] == param_9) && (puVar15[8] == param_7)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*puVar15,puVar19);\n          (**(code **)(unaff_R14[1] + 0x50))(0,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar9 = puVar15[6];\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          puVar19 = puVar16 + uVar9;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            cVar17 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            cVar17 = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(cVar17,puVar18);\n          (**(code **)(unaff_R14[1] + 0x50))(puVar15[2],puVar19 + 8);\n          uVar10 = *puVar15;\n          puVar19 = (undefined *)puVar15[3];\n          puVar18 = puVar16;\n          for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n            *puVar18 = *puVar19;\n            puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n            puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n          }\n          uVar9 = puVar15[6];\n          if (uVar10 < uVar9) {\n            for (lVar7 = uVar9 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n              *puVar18 = 0;\n              puVar18 = puVar18 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          lVar7 = unaff_R14[1];\n          puVar16 = puVar16 + uVar9;\n          puVar19 = puVar16 + 8;\n          if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(lVar7 + 0x38))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x38))(puVar15[8],puVar19);\n            puVar19 = puVar16 + 0x10;\n          }\n          else {\n            (**(code **)(lVar7 + 0x50))(puVar15[7],puVar16);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar15[8],puVar16 + 4);\n          }\n          param_9 = puVar15[7];\n          param_7 = puVar15[8];\n        }\n      }\n    }\n    uVar9 = (long)puVar19 - (long)__ptr;\n    uVar10 = uVar9;\n    puVar19 = __ptr;\n    if (uVar9 < param_10) {\n      for (; param_10 = uVar9, uVar10 != 0; uVar10 = uVar10 - 1) {\n        *in_stack_00000030 = *puVar19;\n        puVar19 = puVar19 + (ulong)bVar22 * -2 + 1;\n        in_stack_00000030 = in_stack_00000030 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(__ptr);\nLAB_001166f8:\n    free(param_11);\n    return param_10;\n  }\n  if (puVar15[2] != 0) {\n    uVar10 = puVar15[7];\n    uVar9 = puVar15[8];\n    uVar13 = puVar15[2];\n    puVar21 = puVar15;\n    iVar23 = 0;\n    if (uVar10 == uVar9) {\n      puVar15[2] = 0;\n    }\n    else {\n      do {\n        do {\n          puVar5 = puVar21;\n          puVar21 = puVar5 + -9;\n          if (puVar21 < param_11) goto LAB_001167f5;\n          uVar20 = puVar5[-7];\n        } while (uVar20 == 0);\n        param_7 = uVar13;\n        if ((*puVar21 != *puVar15) ||\n           (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar15[3],*puVar15), iVar6 != 0)) break;\n        uVar13 = puVar5[-2];\n        uVar11 = puVar5[-1];\n        if (uVar10 == uVar13) {\n          if (uVar9 == uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (uVar9 <= uVar11) {\n            puVar15[2] = 0;\n            break;\n          }\n          if (uVar11 < uVar10) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < uVar11) || (uVar10 <= (uVar11 + 0xf & 0xfffffffffffffff0)))\n            goto process_notes_00116852;\n          }\nLAB_001167b8:\n          if ((param_7 == 0x101) == (uVar20 == 0x101)) {\n            if (uVar11 <= uVar9) {\n              uVar11 = uVar9;\n            }\n            if (uVar13 < uVar10) {\n              uVar10 = uVar13;\n            }\n            puVar5[-1] = uVar11;\n            puVar5[-2] = uVar10;\n            puVar15[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (uVar13 <= uVar10) goto LAB_001167a6;\n          if (uVar11 < uVar10) goto LAB_0010852c;\n          if (uVar9 < uVar10) {\n            if ((0xfffffffffffffff0 < uVar9) || (uVar13 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n            goto process_notes_00116852;\n            goto LAB_001167b8;\n          }\n          if (uVar9 != uVar11) goto LAB_001167b8;\n        }\nprocess_notes_00116852:\n        bVar4 = iVar23 < 0x11;\n        uVar13 = param_7;\n        iVar23 = iVar23 + 1;\n      } while (bVar4);\n    }\n  }\nLAB_001167f5:\n  puVar15 = puVar15 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "bfd_set_error",
                "dcgettext",
                "non_fatal",
                "qsort",
                "compare_gnu_build_notes",
                "bfd_nonfatal_message",
                "merge_gnu_build_notes.cold",
                "FUN_00116490"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "FUNC_001086af"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "initialize_stab_class_method_var_0010add5"
            },
            "code": "\nvoid initialize_stab_class_method_var_0010add5(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_stab_class_method_var_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_debug_info_00113e17"
            },
            "code": "\nvoid initializeDebugInfo_00113e17(void)\n\n{\n  debug_make_type_constprop_0(2,0);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "create_and_initialize_object_00109b52",
                "param_1": "objectIndex",
                "param_2": "sourceString",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "uVar1": "prevObjectPtr",
                "puVar2": "newObject",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined createAndInitializeObject_00109b52(long objectIndex,undefined8 sourceString,undefined8 param3,undefined param4,\n                      undefined4 param5)\n\n{\n  undefined8 prevObjectPtr;\n  undefined8 *newObject;\n  undefined8 duplicatedString;\n  \n  newObject = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(sourceString);\n  newObject[2] = param3;\n  *(undefined (*) [16])(newObject + 4) = ZEXT816(0);\n  *(undefined (*) [16])(newObject + 6) = ZEXT816(0);\n  prevObjectPtr = *(undefined8 *)(objectIndex + 0x60);\n  *(undefined *)((long)newObject + 0x1c) = param4;\n  *(undefined4 *)(newObject + 3) = param5;\n  *(undefined8 **)(objectIndex + 0x60) = newObject;\n  *newObject = prevObjectPtr;\n  newObject[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xstrdup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_method_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_and_initialize_object_00109b52"
        },
        "FUN_001282b0": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282b0",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_001282b0"
        },
        "FUN_001040c0": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00104ea2",
                "display_info.isra.0",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040c0"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_unsigned_long_00109a32",
                "param_1": "string",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "unused_param_4",
                "param_5": "unused_param_5",
                "__nptr": "number_string",
                "piVar1": "errno_ptr",
                "uVar2": "result",
                "uVar3": "error_string",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_unsigned_long_00109a32(char **string,undefined *error_flag,char *end_of_string,undefined8 unused_param_4,undefined8 unused_param_5)\n\n{\n  char *number_string;\n  int *errno_ptr;\n  ulong result;\n  undefined8 error_string;\n  undefined return_value [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  number_string = *string;\n  if ((number_string < end_of_string) && (*number_string != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    result = strtoul(number_string,string,0);\n    if ((result != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_string = dcgettext(0,\"numeric overflow\",5);\n      warn_stab(number_string,error_string);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  result = 0;\nLAB_00109aa9:\n  return_value._8_8_ = unused_param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "strtoul",
                "warn_stab",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "parse_unsigned_long_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "process_debug_tag_type_0010c6be",
                "param_1": "fileOffset",
                "param_2": "tagName",
                "param_3": "tagPointer",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTagPointer",
                "pauVar4": "newPointerArray",
                "lVar5": "offset",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * processDebugTagType_0010c6be(long fileOffset,char *tagName,int *tagPointer)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTagPointer;\n  undefined (*newPointerArray) [16];\n  long offset;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (tagPointer != (int *)0x0)) {\n    if (*(long *)(fileOffset + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*tagPointer != 0x17) {\n        newTagPointer = (int *)debug_make_type_constprop_0(0x17,0);\n        if (newTagPointer == (int *)0x0) {\n          return (int *)0x0;\n        }\n        newPointerArray = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(fileOffset + 0x10);\n        *newPointerArray = ZEXT816(0);\n        *(int **)(*newPointerArray + 8) = tagPointer;\n        *(undefined (**) [16])(newTagPointer + 4) = newPointerArray;\n        offset = debug_add_to_namespace_constprop_0(offset + 0x10,tagName,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = newTagPointer;\n        *(long *)*newPointerArray = offset;\n        return newTagPointer;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(tagPointer + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return tagPointer;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_add_to_namespace.constprop.0",
                "debug_make_type.constprop.0",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "process_debug_tag_type_0010c6be"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arglist",
                "param_4": "error_flag",
                "__ptr": "result",
                "__format": "error_message",
                "lVar1": "demangled_value",
                "uVar2": "index",
                "uVar3": "capacity",
                "uVar4": "count",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 arg1,undefined8 arg2,int *arglist,undefined *error_flag)\n\n{\n  void *result;\n  char *error_message;\n  long demangled_value;\n  ulong index;\n  ulong capacity;\n  uint count;\n  char temp_buffer [9];\n  \n  capacity = 10;\n  index = 0;\n  result = (void *)xmalloc(0x50);\n  *error_flag = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    demangled_value = stab_demangle_v3_arg(arg1,arg2,*(long *)(arglist + 4),0,temp_buffer);\n    if (demangled_value == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result);\n        return (void *)0x0;\n      }\n      *error_flag = 1;\n    }\n    else {\n      count = (int)index + 1;\n      if ((uint)capacity <= count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result = (void *)xrealloc(result,capacity << 3);\n      }\n      *(long *)((long)result + index * 8) = demangled_value;\n      index = (ulong)count;\n    }\n  }\n  *(undefined8 *)((long)result + index * 8) = 0;\n  return result;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_data_0011a2e0",
                "param_1": "section_data",
                "param_2": "binary_data",
                "uVar1": "section_address",
                "uVar2": "section_error_msg",
                "lVar3": "extracted_data",
                "lVar4": "section_ptr"
            },
            "code": "\nlong extract_section_data_0011a2e0(long section_data,long binary_data)\n\n{\n  undefined8 section_address;\n  undefined8 section_error_msg;\n  long extracted_data;\n  long section_ptr;\n  \n  extracted_data = (**(code **)(*(long *)(binary_data + 8) + 0x208))(binary_data);\n  section_ptr = *(long *)(section_data + 0x20);\n  *(undefined8 *)(extracted_data + 8) = *(undefined8 *)(section_data + 8);\n  *(undefined8 *)(extracted_data + 0x10) = *(undefined8 *)(section_data + 0x10);\n  *(undefined4 *)(extracted_data + 0x18) = *(undefined4 *)(section_data + 0x18);\n  if (section_ptr == 0) {\n    section_ptr = 0x128598;\n  }\n  else {\n    section_ptr = bfd_get_section_by_name(binary_data);\n    if (section_ptr == 0) {\n      section_address = *(undefined8 *)(section_data + 0x20);\n      section_error_msg = dcgettext(0,\"Section %s not found\",5);\n                    \n      fatal(section_error_msg,section_address);\n    }\n  }\n  *(long *)(extracted_data + 0x20) = section_ptr;\n  return extracted_data;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "create_new_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_data_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "write_lto_symbol_0010e8a9",
                "param_1": "symbol_name",
                "param_3": "input_string",
                "uVar1": "result",
                "sVar2": "input_length",
                "__s": "formatted_string"
            },
            "code": "\nundefined4 write_lto_symbol_0010e8a9(undefined8 symbol_name,undefined8 param_2,char *input_string)\n\n{\n  undefined4 result;\n  size_t input_length;\n  char *formatted_string;\n  \n  input_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(input_length + 0x14);\n  sprintf(formatted_string,\"%s:c=f%g\",symbol_name,input_string);\n  result = stab_write_symbol_lto_priv_0(param_2,0x80,0,0,formatted_string);\n  if ((char)result != '\\0') {\n    free(formatted_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_lto_symbol_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "parse_section_flags_00104ad6",
                "unaff_RBP": "currentSection",
                "__s": "remainingString",
                "sVar4": "remainingLength",
                "iVar5": "currentLength",
                "unaff_R14D": "sectionFlags",
                "unaff_R15": "section",
                "auVar6": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] parseSectionFlags_00104ad6(void)\n\n{\n  int iVar1;\n  undefined8 uVar2;\n  char *pcVar3;\n  char *currentSection;\n  char *remainingString;\n  size_t remainingLength;\n  int currentLength;\n  uint sectionFlags;\n  char *section;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  do {\n    sectionFlags = sectionFlags | 0x2000;\n    remainingString = currentSection;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (remainingString == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = sectionFlags;\n                result._8_8_ = returnAddress;\n                return result;\n              }\n              pcVar3 = strchr(remainingString,0x2c);\n              if (pcVar3 == (char *)0x0) {\n                remainingLength = strlen(remainingString);\n                currentLength = (int)remainingLength;\n                currentSection = (char *)0x0;\n              }\n              else {\n                currentSection = pcVar3 + 1;\n                currentLength = (int)pcVar3 - (int)remainingString;\n              }\n              remainingLength = (size_t)currentLength;\n              iVar1 = strncasecmp(section,remainingString,remainingLength);\n              if (iVar1 != 0) break;\n              sectionFlags = sectionFlags | 1;\n              remainingString = currentSection;\n            }\n            iVar1 = strncasecmp(\"load\",remainingString,remainingLength);\n            if (iVar1 != 0) break;\n            sectionFlags = sectionFlags | 2;\n            remainingString = currentSection;\n          }\n          iVar1 = strncasecmp(\"noload\",remainingString,remainingLength);\n          if (iVar1 != 0) break;\n          sectionFlags = sectionFlags | 0x200;\n          remainingString = currentSection;\n        }\n        iVar1 = strncasecmp(\"readonly\",remainingString,remainingLength);\n        if (iVar1 != 0) break;\n        sectionFlags = sectionFlags | 8;\n        remainingString = currentSection;\n      }\n      iVar1 = strncasecmp(\"debug\",remainingString,remainingLength);\n      if (iVar1 == 0) break;\n      iVar1 = strncasecmp(\"code\",remainingString,remainingLength);\n      if (iVar1 == 0) {\n        sectionFlags = sectionFlags | 0x10;\n        remainingString = currentSection;\n      }\n      else {\n        iVar1 = strncasecmp(\"data\",remainingString,remainingLength);\n        if (iVar1 == 0) {\n          sectionFlags = sectionFlags | 0x20;\n          remainingString = currentSection;\n        }\n        else {\n          iVar1 = strncasecmp(\"rom\",remainingString,remainingLength);\n          if (iVar1 == 0) {\n            sectionFlags = sectionFlags | 0x40;\n            remainingString = currentSection;\n          }\n          else {\n            iVar1 = strncasecmp(\"exclude\",remainingString,remainingLength);\n            if (iVar1 == 0) {\n              sectionFlags = sectionFlags | 0x8000;\n              remainingString = currentSection;\n            }\n            else {\n              iVar1 = strncasecmp(\"share\",remainingString,remainingLength);\n              if (iVar1 == 0) {\n                sectionFlags = sectionFlags | 0x8000000;\n                remainingString = currentSection;\n              }\n              else {\n                iVar1 = strncasecmp(\"contents\",remainingString,remainingLength);\n                if (iVar1 == 0) {\n                  sectionFlags = sectionFlags | 0x100;\n                  remainingString = currentSection;\n                }\n                else {\n                  iVar1 = strncasecmp(\"merge\",remainingString,remainingLength);\n                  if (iVar1 == 0) {\n                    sectionFlags = sectionFlags | 0x800000;\n                    remainingString = currentSection;\n                  }\n                  else {\n                    iVar1 = strncasecmp(\"strings\",remainingString,remainingLength);\n                    if (iVar1 != 0) {\n                      pcVar3 = (char *)xmalloc((long)(currentLength + 1));\n                      strncpy(pcVar3,remainingString,remainingLength);\n                      pcVar3[remainingLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      non_fatal(uVar2,pcVar3);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      fatal(uVar2,\n                            \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                           );\n                    }\n                    sectionFlags = sectionFlags | 0x1000000;\n                    remainingString = currentSection;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "parse_flags.cold",
                "strlen",
                "strchr",
                "strncpy",
                "dcgettext",
                "non_fatal",
                "strncasecmp",
                "xmalloc",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00104ad6"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "is_rax_equal_to_one_hundred_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] isRAXEqualToOneHundred_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "is_rax_equal_to_one_hundred_001087da"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "message_catalog",
                "param_4": "default_value",
                "lVar1": "current_compilation_unit",
                "iVar2": "comparison_result",
                "uVar3": "error_message",
                "puVar4": "current_element",
                "lVar5": "current_element_address",
                "puVar6": "current_compilation_unit_element",
                "auVar7": "result"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 message_catalog,undefined8 default_value)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 error_message;\n  undefined8 *current_element;\n  long current_element_address;\n  undefined8 *current_compilation_unit_element;\n  undefined result [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    error_message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  else {\n    for (current_element_address = *(long *)(compilation_unit + 0x20); current_element_address != 0; current_element_address = *(long *)(current_element_address + 8)) {\n      if (*(undefined8 **)(current_element_address + 0x28) != (undefined8 *)0x0) {\n        for (current_element = (undefined8 *)**(undefined8 **)(current_element_address + 0x28); current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (current_compilation_unit_element = *(undefined8 **)(current_compilation_unit + 8); current_compilation_unit_element != (undefined8 *)0x0;\n        current_compilation_unit_element = (undefined8 *)*current_compilation_unit_element) {\n      if ((undefined8 *)current_compilation_unit_element[2] != (undefined8 *)0x0) {\n        for (current_element = *(undefined8 **)(undefined8 *)current_compilation_unit_element[2]; current_element != (undefined8 *)0x0;\n            current_element = (undefined8 *)*current_element) {\n          if (*(int *)((long)current_element + 0x14) == 0) {\n            if (*(char *)current_element[1] == *type_name) {\n              comparison_result = strcmp((char *)current_element[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  error_message = 0;\nLAB_00109223:\n  result._8_8_ = default_value;\n  result._0_8_ = error_message;\n  return result;\nLAB_00109216:\n  error_message = current_element[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "parse_stab_type",
                "stab_demangle_qualified",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_001041f0": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001041f0"
        },
        "FUN_001040d0": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "main",
                "parse_flags.cold"
            ],
            "imported": false,
            "current_name": "FUN_001040d0"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_dwo_section_0010829e",
                "unaff_EBP": "section_id",
                "uVar1": "result"
            },
            "code": "\nundefined8 check_dwo_section_0010829e(void)\n\n{\n  undefined8 result;\n  int section_id;\n  \n  if (section_id == 5) {\n    result = is_dwo_section_constprop_0();\n    return result;\n  }\n  if ((section_id != 4) && (section_id == 6)) {\n    result = check_dwo_section_0010829e_constprop_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "is_strip_section_1.isra.0"
            ],
            "imported": false,
            "current_name": "check_dwo_section_0010829e"
        },
        "FUN_001281c0": {
            "renaming": {},
            "code": "\n\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fnmatch@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281c0",
            "calling": [
                "fnmatch"
            ],
            "imported": false,
            "current_name": "FUN_001281c0"
        },
        "FUN_00104700": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104700"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_list_00104943",
                "in_RAX": "inputString",
                "lVar3": "convertedValue",
                "iVar1": "defaultSize",
                "iVar2": "comparisonResult",
                "pcVar5": "printableArchMach",
                "sVar4": "stringLength",
                "iVar7": "archMachIndex",
                "lVar8": "paramIndex",
                "iVar9": "maxIndex",
                "unaff_R15D": "stackValue",
                "uVar10": "loopCounter",
                "uVar11": "archMachOffset",
                "param_7": "initialIndex",
                "uStack000000000000000c": "padding",
                "param_11": "archMachData",
                "param_13": "archMachList"
            },
            "code": "\n\n\nvoid printReverseArchMachList_00104943(void)\n\n{\n  int defaultSize;\n  int comparisonResult;\n  char *inputString;\n  long convertedValue;\n  size_t stringLength;\n  char *printableArchMach;\n  undefined8 uVar6;\n  int archMachIndex;\n  long paramIndex;\n  int maxIndex;\n  uint stackValue;\n  ulong loopCounter;\n  uint archMachOffset;\n  int initialIndex;\n  uint padding;\n  undefined8 archMachData;\n  long archMachList;\n  \n  convertedValue = strtol(inputString,(char **)0x0,10);\n  defaultSize = (int)convertedValue;\n  maxIndex = initialIndex;\n  padding = stackValue;\n  if (defaultSize == 0) {\n    defaultSize = 0x50;\n  }\n  do {\n    initialIndex = maxIndex;\n    if (archMachData._4_4_ <= initialIndex) {\n      return;\n    }\n    paramIndex = (long)initialIndex;\n    archMachIndex = (defaultSize - padding) + -1;\n    convertedValue = paramIndex;\n    do {\n      maxIndex = (int)convertedValue;\n      if (archMachData._4_4_ <= maxIndex) break;\n      stringLength = strlen(*(char **)(archMachList + convertedValue * 0x60));\n      convertedValue = convertedValue + 1;\n      archMachIndex = (archMachIndex - (int)stringLength) + -1;\n    } while (-1 < archMachIndex);\n    printf(\"\\n%*s\",(ulong)(padding + 1),&DAT_0011b4a1);\n    for (convertedValue = paramIndex * 0x60; ((ulong)(uint)(maxIndex - initialIndex) + paramIndex) * 0x60 - convertedValue != 0;\n        convertedValue = convertedValue + 0x60) {\n      printf(\"%s \",*(undefined8 *)(archMachList + convertedValue));\n    }\n    archMachIndex = 2;\n    putc(10,_stdout);\n    do {\n      printableArchMach = (char *)bfd_printable_arch_mach(archMachIndex,0);\n      comparisonResult = strcmp(printableArchMach,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        uVar6 = bfd_printable_arch_mach(archMachIndex,0);\n        printf(\"%*s \",(ulong)padding,uVar6);\n        archMachOffset = archMachIndex - 2;\n        convertedValue = paramIndex * 0x60;\n        comparisonResult = initialIndex;\n        while (maxIndex != comparisonResult) {\n          printableArchMach = *(char **)(archMachList + convertedValue);\n          if (*(char *)((long)(char **)(archMachList + convertedValue) + (ulong)archMachOffset + 8) == '\\0') {\n            stringLength = strlen(printableArchMach);\n            for (loopCounter = stringLength & 0xffffffff; (int)loopCounter != 0; loopCounter = (ulong)((int)loopCounter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableArchMach,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (maxIndex != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          convertedValue = convertedValue + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archMachIndex = archMachIndex + 1;\n    } while (archMachIndex != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "fputs",
                "printf",
                "putc",
                "bfd_printable_arch_mach",
                "strtol",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_mach_list_00104943"
        },
        "FUN_00104820": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104820"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "create_type_constprop_00113e23",
                "param_1": "type",
                "param_2": "value",
                "lVar1": "type_constprop",
                "puVar2": "allocated_ptr"
            },
            "code": "\nlong create_type_constprop_00113e23(undefined8 type,undefined8 value)\n\n{\n  long type_constprop;\n  undefined8 *allocated_ptr;\n  \n  type_constprop = debug_make_type_constprop_0(1,0);\n  if (type_constprop != 0) {\n    allocated_ptr = (undefined8 *)xmalloc(0x10);\n    *allocated_ptr = type;\n    allocated_ptr[1] = value;\n    *(undefined8 **)(type_constprop + 0x10) = allocated_ptr;\n  }\n  return type_constprop;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "stab_find_type",
                "stab_find_tagged_type"
            ],
            "imported": false,
            "current_name": "create_type_constprop_00113e23"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_message_00108fb9",
                "param_1": "stabMessage",
                "__format": "errorMessage",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printBadStabMessage_00108fb9(undefined8 stabMessage)\n\n{\n  char *errorMessage;\n  \n  errorMessage = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(standardError,errorMessage,stabMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_stab_type_number"
            ],
            "imported": false,
            "current_name": "print_bad_stab_message_00108fb9"
        },
        "FUN_001280a0": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a0",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_001280a0"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input",
                "param_2": "output",
                "iVar1": "parsed_value",
                "pbVar2": "current_char",
                "pbVar3": "next_char",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input,int *output)\n\n{\n  int parsed_value;\n  byte *current_char;\n  byte *next_char;\n  ulong result;\n  \n  current_char = *input;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_char * 2] & 4) != 0) {\n    next_char = current_char + 1;\n    parsed_value = (char)*current_char + -0x30;\n    *output = parsed_value;\n    *input = next_char;\n    if (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0) {\n      do {\n        current_char = next_char;\n        parsed_value = parsed_value * 10 + -0x30 + (int)(char)*current_char;\n        next_char = current_char + 1;\n      } while (((&_sch_istable)[(ulong)current_char[1] * 2] & 4) != 0);\n      if (current_char[1] == 0x5f) {\n        next_char = current_char + 2;\n        *input = next_char;\n        *output = parsed_value;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_char >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "stab_demangle_args",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_001280a8": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280a8",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_001280a8"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_section_attributes_00108072",
                "unaff_RBX": "sectionAttributes",
                "unaff_RBP": "changeSectionAddress",
                "unaff_R12": "searchSection",
                "unaff_R14B": "isGroupSignature",
                "unaff_R15": "newSectionAttributes",
                "bVar1": "byteValue",
                "uVar2": "var2",
                "cVar3": "charValue",
                "uVar4": "uintValue",
                "lVar5": "errorMessage",
                "lVar6": "sectionList1",
                "lVar7": "sectionList2",
                "lVar8": "sectionList3",
                "change_section_address": "changeSectionAddressValue",
                "dcgettext": "getString",
                "find_section_list": "sectionListFinder",
                "set_alignment_and_group_signature_00108179": "setAlignmentAndGroupSignature",
                "group_signature_isra_0": "groupSignatureIsra",
                "update_status_and_message_0010808f": "updateStatusAndMessage",
                "bfd_nonfatal_message": "nonFatalMessage"
            },
            "code": "\nvoid setSectionAttributes_00108072(void)\n\n{\n  byte byteValue;\n  undefined8 var2;\n  char charValue;\n  uint uintValue;\n  long errorMessage;\n  long sectionList1;\n  long sectionList2;\n  undefined8 *sectionAttributes;\n  long changeSectionAddress;\n  long searchSection;\n  long sectionList3;\n  char isGroupSignature;\n  long newSectionAttributes;\n  \n  errorMessage = getString(0,\"failed to set size\",5);\n  sectionList3 = sectionAttributes[6];\n  sectionList1 = sectionListFinder(*sectionAttributes,0,0x18);\n  if (sectionList1 == 0) {\n    *(byte *)(newSectionAttributes + 0x28) = *(byte *)(newSectionAttributes + 0x28) | 1;\n    var2 = *sectionAttributes;\n    sectionList3 = sectionList3 + changeSectionAddressValue;\n    *(long *)(newSectionAttributes + 0x30) = sectionList3;\n    *(long *)(newSectionAttributes + 0x38) = sectionList3;\n    sectionList3 = sectionAttributes[7];\n    sectionList1 = sectionListFinder(var2,0,0x60);\n    if (sectionList1 == 0) goto LAB_00115695;\nLAB_00115860:\n    sectionList2 = *(long *)(sectionList1 + 0x20);\n    if ((*(byte *)(sectionList1 + 0x14) & 0x40) != 0) {\n      sectionList2 = sectionList2 + sectionList3;\n    }\n    *(long *)(newSectionAttributes + 0x38) = sectionList2;\n    sectionList3 = sectionListFinder(*sectionAttributes,0,0x200);\n    if (sectionList3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintValue = *(uint *)((long)sectionAttributes + 0x7c);\n    if (uintValue < 0x3f) goto LAB_001156c4;\n    errorMessage = getString(0,\"failed to set alignment\",5);\n    *(undefined4 *)(newSectionAttributes + 0xb4) = *(undefined4 *)((long)sectionAttributes + 0xb4);\n    *(byte *)(newSectionAttributes + 0x28) =\n         *(byte *)(newSectionAttributes + 0x28) & 0xcf | *(byte *)(sectionAttributes + 5) & 0x30;\n    sectionAttributes[0xc] = newSectionAttributes;\n    sectionAttributes[0xb] = 0;\n    byteValue = *(byte *)((long)sectionAttributes + 0x27);\n  }\n  else {\n    sectionList2 = *(long *)(sectionList1 + 0x18);\n    if ((*(byte *)(sectionList1 + 0x14) & 8) == 0) {\n      sectionList2 = sectionList2 + sectionList3;\n    }\n    *(byte *)(newSectionAttributes + 0x28) = *(byte *)(newSectionAttributes + 0x28) | 1;\n    var2 = *sectionAttributes;\n    *(long *)(newSectionAttributes + 0x30) = sectionList2;\n    *(long *)(newSectionAttributes + 0x38) = sectionList2;\n    sectionList3 = sectionAttributes[7];\n    sectionList1 = sectionListFinder(var2,0,0x60);\n    if (sectionList1 != 0) goto LAB_00115860;\nLAB_00115695:\n    var2 = *sectionAttributes;\n    *(long *)(newSectionAttributes + 0x38) = sectionList3 + changeSectionAddressValue;\n    sectionList3 = sectionListFinder(var2,0,0x200);\n    if (sectionList3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintValue = *(uint *)(sectionList3 + 0x2c);\n    if (0x3e < uintValue) {\n      setAlignmentAndGroupSignature();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(newSectionAttributes + 0x7c) = uintValue;\n    *(undefined4 *)(newSectionAttributes + 0xb4) = *(undefined4 *)((long)sectionAttributes + 0xb4);\n    *(byte *)(newSectionAttributes + 0x28) =\n         *(byte *)(newSectionAttributes + 0x28) & 0xcf | *(byte *)(sectionAttributes + 5) & 0x30;\n    sectionAttributes[0xc] = newSectionAttributes;\n    sectionAttributes[0xb] = 0;\n    byteValue = *(byte *)((long)sectionAttributes + 0x27);\n  }\n  if ((byteValue & 2) != 0) {\n    sectionList3 = sectionAttributes[0x1a];\n    sectionList1 = groupSignatureIsra(sectionList3,sectionAttributes[0x1c]);\n    if ((sectionList1 != 0) &&\n       (sectionList2 = *(long *)(searchSection + 8), *(uint *)(sectionList1 + 0x18) = *(uint *)(sectionList1 + 0x18) | 0x20,\n       *(int *)(sectionList2 + 8) == 5)) {\n      *(long *)(sectionList3 + 0xb0) = sectionList1;\n      charValue = (**(code **)(*(long *)(changeSectionAddress + 8) + 0x158))();\n      if (charValue == '\\0') {\n        updateStatusAndMessage();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  charValue = (**(code **)(*(long *)(changeSectionAddress + 8) + 0x158))();\n  if (charValue == '\\0') {\n    updateStatusAndMessage();\n    return;\n  }\nLAB_0011571e:\n  if (isGroupSignature != '\\0') {\n    *(undefined4 *)(*(long *)(newSectionAttributes + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    status = 1;\n    nonFatalMessage(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "find_section_list",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "set_section_attributes_00108072"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "generate_stab_entry_0010a2b9",
                "param_1": "ptr_1",
                "param_2": "char_1",
                "param_3": "ptr_3",
                "param_4": "ptr_4",
                "cVar1": "charVar1",
                "__s": "string1",
                "sVar2": "stringLength",
                "__s_00": "string2",
                "lVar3": "longVar3",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] generateStabEntry_0010a2b9(long ptr_1,char char_1,undefined8 ptr_3,undefined8 ptr_4)\n\n{\n  char charVar1;\n  char *string1;\n  size_t stringLength;\n  char *string2;\n  long longVar3;\n  undefined returnValue [16];\n  \n  charVar1 = *(char *)(*(long *)(ptr_1 + 0x60) + 0x1c);\n  string1 = (char *)stab_pop_type();\n  stringLength = strlen(string1);\n  string2 = (char *)xmalloc(stringLength + 0x1e);\n  if (char_1 == '\\0') {\n    *string2 = '\\0';\n    longVar3 = 0;\n    char_1 = charVar1;\n  }\n  else {\n    longVar3 = *(long *)(ptr_1 + 0x68);\n    *(long *)(ptr_1 + 0x68) = longVar3 + 1;\n    sprintf(string2,\"%ld=@S;\",longVar3);\n  }\n  stringLength = strlen(string2);\n  sprintf(string2 + stringLength,\"S%s\",string1);\n  free(string1);\n  returnValue._0_4_ = stab_push_string(ptr_1,string2,longVar3,char_1,0);\n  returnValue._4_4_ = 0;\n  if ((char)returnValue._0_4_ != '\\0') {\n    free(string2);\n  }\n  returnValue._8_8_ = ptr_4;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_entry_0010a2b9"
        },
        "FUN_001040e0": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001040e0"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_001283f0": {
            "renaming": {},
            "code": "\n\n\n\nint access(char *__name,int __type)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* access@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f0",
            "calling": [
                "access"
            ],
            "imported": false,
            "current_name": "FUN_001283f0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "ptrArray",
                "param_2": "paramValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "param_5": "unused3",
                "param_6": "paramFlag",
                "iVar1": "counter",
                "cVar2": "writeSuccess"
            },
            "code": "\nundefined processData_0010ec73(long *ptrArray,long paramValue,undefined8 unused1,undefined8 unused2,\n                      undefined8 unused3,undefined8 paramFlag)\n\n{\n  int counter;\n  char writeSuccess;\n  \n  if (ptrArray[0x3c] != -1) {\n    (**(code **)(*(long *)(*ptrArray + 8) + 0x50))(paramValue,ptrArray[1] + 8 + ptrArray[0x3c]);\n    ptrArray[0x3c] = -1;\n  }\n  if (ptrArray[0x3d] != -1) {\n    (**(code **)(*(long *)(*ptrArray + 8) + 0x50))(paramValue,ptrArray[1] + 8 + ptrArray[0x3d]);\n    ptrArray[0x3d] = -1;\n  }\n  counter = *(int *)(ptrArray + 0x3f);\n  *(int *)(ptrArray + 0x3f) = counter + 1;\n  if (counter == 0) {\n    ptrArray[0x40] = paramValue;\n  }\n  else {\n    if ((ptrArray[0x41] != -1) &&\n       (writeSuccess = stab_write_symbol_lto_priv_0(ptrArray,0xc0,0,ptrArray[0x41],0,paramFlag,unused2),\n       writeSuccess == '\\0')) {\n      return 0;\n    }\n    ptrArray[0x41] = paramValue - ptrArray[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessType",
                "dcgettext": "translate"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessType)\n\n{\n  if (endiannessType == 0) {\n    translate(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessType == 1) {\n    translate(0,\"little endian\",5);\n    return;\n  }\n  translate(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00104830": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104830"
        },
        "FUN_00104710": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104710"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_times_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "bufferSize",
                "param_4": "sourceFileTimestamp",
                "param_5": "shouldSetTimes",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoPointer",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndSetTimes_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 bufferSize,undefined8 sourceFileTimestamp,char shouldSetTimes,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoPointer;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined returnValue [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = simple_copy(bufferSize,destinationFilePath,sourceFileTimestamp);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoPointer = __errno_location();\n      errorString = strerror(*errnoPointer);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      non_fatal(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetTimes != '\\0') {\n    set_times(destinationFilePath,sourceFileTimestamp);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = unlinkResult;\n  return returnValue;\n}\n\n",
            "called": [
                "simple_copy",
                "smart_rename.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "copy_and_set_times_00115970"
        },
        "FUN_001283f8": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001283f8",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_001283f8"
        },
        "FUN_001282d8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001282d8",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_001282d8"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_class_method_var_0010adf2"
            },
            "code": "\nvoid initialize_class_method_var_0010adf2(void)\n\n{\n  stab_class_method_var();\n  return;\n}\n\n",
            "called": [
                "stab_class_method_var"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_class_method_var_0010adf2"
        },
        "FUN_00104840": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00104840"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "demangle_and_remember_type_0010d7d4",
                "param_1": "input_type",
                "param_2": "input_data",
                "param_3": "output_arr",
                "param_4": "count_ptr",
                "param_5": "capacity_ptr",
                "uVar1": "input_value",
                "cVar2": "result",
                "uVar3": "return_value",
                "lVar4": "output_data",
                "plVar5": "output_data_ptr",
                "uVar6": "new_count",
                "local_40": "temp_arr"
            },
            "code": "\nundefined4\ndemangle_and_remember_type_0010d7d4(undefined8 input_type,undefined8 *input_data,long *output_arr,uint *count_ptr,uint *capacity_ptr)\n\n{\n  undefined8 input_value;\n  char result;\n  undefined4 return_value;\n  long output_data;\n  long *output_data_ptr;\n  uint new_count;\n  long temp_arr [2];\n  \n  input_value = *input_data;\n  output_data_ptr = temp_arr;\n  if (output_arr == (long *)0x0) {\n    output_data_ptr = (long *)0x0;\n  }\n  result = stab_demangle_type_lto_priv_0(input_type,input_data,output_data_ptr);\n  if ((result != '\\0') &&\n     (return_value = stab_demangle_remember_type(input_type,input_value,(int)*input_data - (int)input_value),\n     (char)return_value != '\\0')) {\n    if (output_arr == (long *)0x0) {\n      return return_value;\n    }\n    if (temp_arr[0] != 0) {\n      if (*capacity_ptr <= *count_ptr + 1) {\n        new_count = *capacity_ptr + 10;\n        output_data = *output_arr;\n        *capacity_ptr = new_count;\n        output_data = xrealloc(output_data,(ulong)new_count << 3);\n        *output_arr = output_data;\n      }\n      new_count = *count_ptr;\n      *(long *)(*output_arr + (ulong)new_count * 8) = temp_arr[0];\n      *count_ptr = new_count + 1;\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_remember_type",
                "xrealloc",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "stab_demangle_args"
            ],
            "imported": false,
            "current_name": "demangle_and_remember_type_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorDescription",
                "sStack_a8": "fileStats"
            },
            "code": "\nlong checkFile_00113f50(char *filePath)\n\n{\n  int status;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorDescription;\n  stat fileStats;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStats);\n    if (status < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(errorMessage,filePath);\n      }\n      else {\n        errorDescription = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(errorMessage,filePath,errorDescription);\n      }\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(errorMessage,filePath);\n    }\n    else if ((fileStats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStats.st_size) {\n        return fileStats.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      non_fatal(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "dcgettext",
                "non_fatal",
                "get_file_size.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "main",
                "copy_file",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_variable_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_variable_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "sort_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "initialize_variable_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "programName"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formatList)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,programName);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "extract_and_write_debug_symbols_0011378f",
                "param_1": "symbolTable",
                "param_2": "debugInfo",
                "param_3": "outParam1",
                "param_4": "outParam2",
                "param_5": "outParam3",
                "param_6": "outParam4",
                "auVar1": "tempVar",
                "cVar2": "flag",
                "uVar3": "error",
                "uVar4": "errorMessage",
                "puVar5": "ptr1",
                "sVar6": "strLength",
                "lVar7": "loopVar",
                "puVar8": "ptr2",
                "puVar9": "ptr3",
                "__dest": "dest",
                "puVar10": "ptr4",
                "plVar11": "ptr5",
                "bVar12": "byteVar",
                "local_258": "symbolTablePtr",
                "local_250": "buffer",
                "local_248": "var1",
                "uStack_244": "var2",
                "uStack_240": "var3",
                "uStack_23c": "var4",
                "local_238": "var5",
                "local_228": "var6",
                "local_220": "hashTable1",
                "local_1f8": "var7",
                "local_1f0": "var8",
                "local_1e8": "array1",
                "local_a0": "hashTable2",
                "local_78": "var9",
                "uStack_70": "tempVar2",
                "local_68": "var10",
                "local_60": "var11",
                "local_58": "var12",
                "uStack_54": "var13",
                "uStack_50": "var14",
                "uStack_4c": "var15"
            },
            "code": "\nundefined4\nextractAndWriteDebugSymbols_0011378f(undefined8 *symbolTable,undefined8 *debugInfo,long *outParam1,undefined8 *outParam2,\n            undefined8 *outParam3,undefined8 *outParam4)\n\n{\n  undefined tempVar [16];\n  char flag;\n  undefined4 error;\n  undefined8 errorMessage;\n  undefined *ptr1;\n  size_t strLength;\n  long loopVar;\n  undefined8 *ptr2;\n  undefined4 *ptr3;\n  char *dest;\n  undefined8 *ptr4;\n  long *ptr5;\n  byte byteVar;\n  undefined8 *symbolTablePtr;\n  long buffer;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined var5 [16];\n  undefined8 var6;\n  undefined hashTable1 [40];\n  undefined8 var7;\n  undefined8 var8;\n  undefined4 array1 [82];\n  undefined hashTable2 [40];\n  undefined var9 [8];\n  undefined8 tempVar2;\n  undefined8 var10;\n  undefined4 var11;\n  undefined4 var12;\n  undefined4 var13;\n  undefined4 var14;\n  undefined4 var15;\n  \n  byteVar = 0;\n  var1 = 0;\n  var2 = 0;\n  var3 = 500;\n  var4 = 0;\n  symbolTablePtr = symbolTable;\n  buffer = xmalloc(500);\n  var6 = 1;\n  var5 = ZEXT816(0);\n  flag = bfd_hash_table_init(hashTable1,string_hash_newfunc_lto_priv_0,0x30);\n  if ((flag == '\\0') ||\n     (flag = bfd_hash_table_init(hashTable2,string_hash_newfunc_lto_priv_0,0x30), flag == '\\0')) {\n    error = bfd_get_error();\n    errorMessage = bfd_errmsg(error);\n    non_fatal(\"bfd_hash_table_init_failed: %s\",errorMessage);\n  }\n  else {\n    var7 = 0;\n    unique0x100000e9 = 0xffffffff;\n    var9 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    ptr3 = array1;\n    for (loopVar = 0x52; loopVar != 0; loopVar = loopVar + -1) {\n      *ptr3 = 0;\n      ptr3 = ptr3 + (ulong)byteVar * -2 + 1;\n    }\n    var10 = 0;\n    var11 = 0;\n    var8 = 1;\n    var12 = 0;\n    var13 = 0;\n    var14 = 0xffffffff;\n    var15 = 0xffffffff;\n    flag = stab_write_symbol_lto_priv_0(&symbolTablePtr,0,0,0,0);\n    tempVar = _var9;\n    if (flag != '\\0') {\n      var9._4_4_ = var2;\n      var9._0_4_ = var1;\n      tempVar2 = tempVar._8_8_;\n      flag = stab_write_symbol_lto_priv_0(&symbolTablePtr,100,0,0,*symbolTable);\n      if (flag != '\\0') {\n        *(int *)(debugInfo + 6) = *(int *)(debugInfo + 6) + 1;\n        debugInfo[10] = 0;\n        ptr4 = (undefined8 *)*debugInfo;\n        *(undefined4 *)(debugInfo + 7) = *(undefined4 *)((long)debugInfo + 0x34);\n        for (; ptr4 != (undefined8 *)0x0; ptr4 = (undefined8 *)*ptr4) {\n          debugInfo[8] = ptr4[2];\n          *(undefined4 *)(debugInfo + 9) = 0;\n          flag = stab_start_compilation_unit_lto_priv_0(&symbolTablePtr,*(undefined8 *)(ptr4[1] + 8))\n          ;\n          if (flag == '\\0') {\n            return 0;\n          }\n          ptr5 = (long *)ptr4[1];\n          if (ptr5 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)ptr5[2] != (undefined8 *)0x0) {\n                for (ptr2 = *(undefined8 **)(undefined8 *)ptr5[2]; ptr2 != (undefined8 *)0x0;\n                    ptr2 = (undefined8 *)*ptr2) {\n                  flag = debug_write_name_constprop_0(debugInfo,&symbolTablePtr);\n                  if (flag == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              ptr5 = (long *)*ptr5;\n              if (ptr5 == (long *)0x0) break;\n              flag = stab_start_source_lto_priv_0(&symbolTablePtr,ptr5[1]);\n              if (flag == '\\0') {\n                return 0;\n              }\n            }\n          }\n          flag = debug_write_linenos_constprop_0(debugInfo,&symbolTablePtr,0xffffffffffffffff);\n          if (flag == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(var15,var14) == -1) &&\n           (error = stab_write_symbol_lto_priv_0(&symbolTablePtr,100,0,var10,0), (char)error != '\\0'))\n        {\n          (**(code **)(symbolTable[1] + 0x50))(var6,buffer + 8);\n          *outParam1 = buffer;\n          *outParam2 = CONCAT44(var2,var1);\n          *outParam4 = var6;\n          ptr1 = (undefined *)xmalloc();\n          *ptr1 = 0;\n          dest = ptr1 + 1;\n          *outParam3 = ptr1;\n          for (loopVar = var5._0_8_; loopVar != 0; loopVar = *(long *)(loopVar + 0x18)) {\n            strcpy(dest,*(char **)(loopVar + 8));\n            strLength = strlen(dest);\n            dest = dest + strLength + 1;\n          }\n          return error;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_write_linenos.constprop.0",
                "bfd_errmsg",
                "non_fatal",
                "stab_start_compilation_unit.lto_priv.0",
                "debug_write_name.constprop.0",
                "bfd_get_error",
                "strcpy",
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "string_hash_newfunc.lto_priv.0",
                "bfd_hash_table_init",
                "stab_start_source.lto_priv.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_and_write_debug_symbols_0011378f"
        },
        "FUN_001281e0": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strnlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281e0",
            "calling": [
                "strnlen"
            ],
            "imported": false,
            "current_name": "FUN_001281e0"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errorCode",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_00104966(void)\n\n{\n  int *errorCode;\n  undefined8 errorMessage;\n  \n  errorCode = __errno_location();\n  if (*errorCode == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    non_fatal(errorMessage);\n  }\n  else {\n    strerror(*errorCode);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    non_fatal(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "get_file_size"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_001280c0": {
            "renaming": {},
            "code": "\n\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtod@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280c0",
            "calling": [
                "strtod"
            ],
            "imported": false,
            "current_name": "FUN_001280c0"
        },
        "FUN_001040f0": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_001040f0"
        },
        "FUN_00104720": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "main",
                "create_symbol_htab"
            ],
            "imported": false,
            "current_name": "FUN_00104720"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "modify_stab_type_0010a0a0",
                "param_1": "input",
                "stab_modify_type": "modify_stab_type"
            },
            "code": "\nvoid modify_stab_type_0010a0a0(long input)\n\n{\n  modify_stab_type_0010a0a0(input,0x26,4,input + 0x198,input + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0a0"
        },
        "FUN_00104600": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104600"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "report_function_00119ed0",
                "param_1": "reportParam1",
                "param_2": "reportParam2",
                "param_3": "reportParam3",
                "param_4": "reportParam4",
                "param_5": "reportParam5",
                "param_6": "reportParam6",
                "param_7": "reportParam7",
                "param_8": "reportParam8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "localData1",
                "local_d4": "localData2",
                "local_d0": "localArray1",
                "local_c8": "localArray2",
                "local_b8": "localBuffer",
                "local_b0": "localParam10",
                "local_a8": "localParam11",
                "local_a0": "localParam12",
                "local_98": "localParam13",
                "local_90": "localParam14",
                "local_88": "localParam1",
                "local_78": "localParam2",
                "local_68": "localParam3",
                "local_58": "localParam4",
                "local_48": "localParam5",
                "local_38": "localParam6",
                "local_28": "localParam7",
                "local_18": "localParam8"
            },
            "code": "\nvoid reportFunction_00119ed0(undefined4 reportParam1,undefined4 reportParam2,undefined4 reportParam3,undefined4 reportParam4,\n                 undefined4 reportParam5,undefined4 reportParam6,undefined4 reportParam7,undefined4 reportParam8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 localData1;\n  undefined4 localData2;\n  undefined *localArray1;\n  undefined *localArray2;\n  undefined localBuffer [8];\n  undefined8 localParam10;\n  undefined8 localParam11;\n  undefined8 localParam12;\n  undefined8 localParam13;\n  undefined8 localParam14;\n  undefined4 localParam1;\n  undefined4 localParam2;\n  undefined4 localParam3;\n  undefined4 localParam4;\n  undefined4 localParam5;\n  undefined4 localParam6;\n  undefined4 localParam7;\n  undefined4 localParam8;\n  \n  if (flag != '\\0') {\n    localParam1 = reportParam1;\n    localParam2 = reportParam2;\n    localParam3 = reportParam3;\n    localParam4 = reportParam4;\n    localParam5 = reportParam5;\n    localParam6 = reportParam6;\n    localParam7 = reportParam7;\n    localParam8 = reportParam8;\n  }\n  localArray1 = &stack0x00000008;\n  localData1 = 8;\n  localArray2 = localBuffer;\n  localData2 = 0x30;\n  localParam10 = param10;\n  localParam11 = param11;\n  localParam12 = param12;\n  localParam13 = param13;\n  localParam14 = param14;\n  report(param9,&localData1);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00105828",
                "merge_gnu_build_notes",
                "set_times.cold",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "FUN_001152b6",
                "stab_struct_field.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00104cc1",
                "copy_object",
                "main",
                "parse_flags.cold",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_001086af",
                "check_new_section_flags.cold",
                "get_file_size.cold",
                "get_file_size",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "report_function_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "FUNC_00112c1f"
            },
            "code": "\n\n\nundefined8 FUNC_00112c1f(ulong param_1,undefined8 param_2,int *param_3,long param_4)\n\n{\n  long *plVar1;\n  long lVar2;\n  undefined8 *puVar3;\n  undefined8 *puVar4;\n  char cVar5;\n  int *piVar6;\n  undefined8 uVar7;\n  undefined8 uVar8;\n  int iVar9;\n  undefined4 uVar10;\n  undefined8 uVar11;\n  ulong uVar12;\n  uint uVar13;\n  bool bVar14;\n  uint local_3c;\n  \n  uVar12 = param_1;\nLAB_00112c39:\n  if (param_3 != (int *)0x0) {\n    iVar9 = *param_3;\n    if (iVar9 - 0x16U < 2) {\n      do {\n        plVar1 = *(long **)(param_3 + 4);\n        uVar13 = *(uint *)(param_1 + 0x30);\n        uVar12 = (ulong)uVar13;\n        lVar2 = *plVar1;\n        if (*(uint *)(lVar2 + 0x10) == uVar13) {\n          if (iVar9 == 0x16) {\n            uVar7 = stab_typedef_type_lto_priv_0(param_2,*(undefined8 *)(lVar2 + 8));\n            return uVar7;\n          }\nLAB_00112c94:\n          piVar6 = (int *)debug_get_real_type_isra_0(param_3,0);\n          if (piVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*piVar6 - 7U < 4) && (*(long *)(piVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(piVar6 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n               (cVar5 = debug_set_class_id_lto_priv_0\n                                  (param_1,*(undefined8 *)(**(long **)(param_3 + 4) + 8),piVar6),\n               cVar5 == '\\0')) {\n              return 0;\n            }\n            uVar13 = *(uint *)(*(long *)(piVar6 + 4) + 0xc);\n          }\n          else {\n            uVar13 = 0;\n          }\n          iVar9 = *piVar6;\n          uVar7 = *(undefined8 *)(**(long **)(param_3 + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (iVar9 == 0x17) {\n          if (lVar2 != param_4) goto LAB_00112c94;\n          *(uint *)(param_4 + 0x10) = uVar13;\n          param_4 = *plVar1;\n          param_3 = (int *)plVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param_4 != 0) {\n          *(uint *)(param_4 + 0x10) = uVar13;\n        }\n        param_3 = (int *)plVar1[1];\n        if (param_3 == (int *)0x0) goto LAB_00112dd6;\n        iVar9 = *param_3;\n        param_4 = 0;\n      } while (iVar9 - 0x16U < 2);\nLAB_00112d74:\n      uVar7 = 0;\n    }\n    else {\n      if (param_4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param_4 + 0x10) = *(undefined4 *)(param_1 + 0x30);\n      if (*(int *)(param_4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      uVar7 = *(undefined8 *)(param_4 + 8);\n    }\n    switch(iVar9) {\n    case 0:\n      uVar7 = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",uVar7);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      uVar7 = stab_void_type_lto_priv_0(param_2);\n      return uVar7;\n    case 3:\n      uVar7 = stab_int_type_lto_priv_0(param_2,param_3[1],*(undefined *)(param_3 + 4));\n      return uVar7;\n    case 4:\n      uVar7 = stab_float_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 5:\n      uVar7 = stab_complex_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 6:\n      uVar7 = stab_bool_type_lto_priv_0(param_2,param_3[1]);\n      return uVar7;\n    case 7:\n    case 8:\n      if (*(long *)(param_3 + 4) != 0) {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3), cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          uVar13 = *(uint *)(lVar2 + 0xc);\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          iVar9 = *param_3;\nLAB_00112ed2:\n          uVar7 = stab_tag_type_lto_priv_0(param_2,uVar7,uVar13,iVar9);\n          return uVar7;\n        }\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n      }\n      uVar10 = 0;\n      if (*(long *)(param_3 + 4) != 0) {\n        uVar10 = *(undefined4 *)(*(long *)(param_3 + 4) + 0xc);\n      }\n      cVar5 = stab_start_struct_type_lto_priv_0(param_2,uVar7,uVar10,*param_3 == 7,param_3[1]);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(param_3 + 4) != (long *)0x0) && (uVar12 = 0, **(long **)(param_3 + 4) != 0)) {\n        while( true ) {\n          puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + uVar12 * 8);\n          if (puVar4 == (undefined8 *)0x0) break;\n          cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          cVar5 = stab_struct_field_lto_priv_0\n                            (param_2,*puVar4,*(undefined4 *)(puVar4 + 3),\n                             *(undefined4 *)((long)puVar4 + 0x1c),*(undefined4 *)(puVar4 + 2));\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n          uVar12 = (ulong)((int)uVar12 + 1);\n        }\n      }\n      uVar7 = stab_end_struct_type_lto_priv_0(param_2);\n      return uVar7;\n    case 9:\n    case 10:\n      if (*(long *)(param_3 + 4) == 0) {\n        uVar13 = 0;\n        piVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(param_3 + 4) + 0xc) <= *(uint *)(param_1 + 0x38)) &&\n           (uVar12 = param_1, cVar5 = debug_set_class_id_lto_priv_0(param_1,uVar7,param_3),\n           cVar5 == '\\0')) {\n          return 0;\n        }\n        lVar2 = *(long *)(param_3 + 4);\n        uVar13 = *(uint *)(lVar2 + 0xc);\n        if (*(int *)(param_1 + 0x30) == *(int *)(lVar2 + 8)) {\n          if (uVar13 <= *(uint *)(param_1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          iVar9 = *param_3;\n          goto LAB_00112ed2;\n        }\n        piVar6 = *(int **)(lVar2 + 0x20);\n        *(int *)(lVar2 + 8) = *(int *)(param_1 + 0x30);\n        if (((piVar6 != (int *)0x0) && (param_3 != piVar6)) &&\n           (uVar12 = param_1, cVar5 = FUNC_00112c1f(param_1,param_2,piVar6,0), cVar5 == '\\0')) {\n          return 0;\n        }\n      }\n      cVar5 = stab_start_class_type_lto_priv_0\n                        (param_2,uVar7,uVar13,*param_3 == 9,param_3[1],piVar6 != (int *)0x0,\n                         param_3 == piVar6,uVar12);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      if (*(long **)(param_3 + 4) != (long *)0x0) {\n        uVar13 = 0;\n        if (**(long **)(param_3 + 4) != 0) {\n          while (puVar4 = *(undefined8 **)(**(long **)(param_3 + 4) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,puVar4[1],0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)puVar4 + 0x14) == '\\0') {\n              cVar5 = stab_struct_field_lto_priv_0(param_2,*puVar4,*(undefined4 *)(puVar4 + 3));\n            }\n            else {\n              cVar5 = stab_class_static_member_lto_priv_0(param_2,*puVar4,puVar4[3]);\n            }\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        uVar13 = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x10) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x10) + (ulong)uVar13 * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = FUNC_00112c1f(param_1,param_2,*puVar4,0);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            cVar5 = stab_class_baseclass_lto_priv_0\n                              (param_2,*(undefined4 *)(puVar4 + 1),\n                               *(undefined *)((long)puVar4 + 0xc));\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = uVar13 + 1;\n          }\n        }\n        local_3c = 0;\n        if (*(long *)(*(long *)(param_3 + 4) + 0x18) != 0) {\n          while (puVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(param_3 + 4) + 0x18) + (ulong)local_3c * 8),\n                puVar4 != (undefined8 *)0x0) {\n            cVar5 = stab_class_start_method_lto_priv_0(param_2,*puVar4);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            uVar13 = 0;\n            while (puVar3 = *(undefined8 **)(puVar4[1] + (ulong)uVar13 * 8),\n                  puVar3 != (undefined8 *)0x0) {\n              if ((puVar3[4] != 0) &&\n                 (cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[4],0), cVar5 == '\\0')) {\n                return 0;\n              }\n              cVar5 = FUNC_00112c1f(param_1,param_2,puVar3[1],0);\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              if (puVar3[3] == -1) {\n                cVar5 = stab_class_static_method_variant_lto_priv_0\n                                  (param_2,*puVar3,*(undefined4 *)(puVar3 + 2),\n                                   *(undefined *)((long)puVar3 + 0x14),\n                                   *(undefined *)((long)puVar3 + 0x15));\n              }\n              else {\n                cVar5 = stab_class_method_variant_lto_priv_0(param_2);\n              }\n              if (cVar5 == '\\0') {\n                return 0;\n              }\n              uVar13 = uVar13 + 1;\n            }\n            cVar5 = stab_class_end_method_lto_priv_0(param_2);\n            if (cVar5 == '\\0') {\n              return 0;\n            }\n            local_3c = local_3c + 1;\n          }\n        }\n      }\n      uVar7 = stab_end_class_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xb:\n      puVar4 = *(undefined8 **)(param_3 + 4);\n      if (puVar4 == (undefined8 *)0x0) {\n        uVar8 = 0;\n        uVar11 = 0;\n      }\n      else {\n        uVar8 = puVar4[1];\n        uVar11 = *puVar4;\n      }\n      uVar7 = stab_enum_type_lto_priv_0(param_2,uVar7,uVar11,uVar8);\n      return uVar7;\n    case 0xc:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_pointer_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xd:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 8) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 8) + uVar12 * 8), lVar2 != 0) {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n        uVar12 = uVar12 & 0xffffffff;\n      }\n      uVar7 = stab_function_type_lto_priv_0\n                        (param_2,uVar12,*(undefined *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0xe:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_reference_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0xf:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_range_type_lto_priv_0\n                        (param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),\n                         *(undefined8 *)(*(long *)(param_3 + 4) + 0x10));\n      return uVar7;\n    case 0x10:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      lVar2 = *(long *)(param_3 + 4);\n      uVar7 = stab_array_type_lto_priv_0\n                        (param_2,*(undefined8 *)(lVar2 + 0x10),*(undefined8 *)(lVar2 + 0x18),\n                         *(undefined *)(lVar2 + 0x20));\n      return uVar7;\n    case 0x11:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_set_type_lto_priv_0(param_2,*(undefined *)(*(long *)(param_3 + 4) + 8));\n      return uVar7;\n    case 0x12:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 4) + 8),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_offset_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x13:\n      cVar5 = FUNC_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar12 = 0;\n      if (*(long *)(*(long *)(param_3 + 4) + 0x10) == 0) {\n        uVar12 = 0xffffffff;\n      }\n      else {\n        while (lVar2 = *(long *)(*(long *)(*(long *)(param_3 + 4) + 0x10) + uVar12 * 8), lVar2 != 0)\n        {\n          uVar12 = uVar12 + 1;\n          cVar5 = FUNC_00112c1f(param_1,param_2,lVar2,0);\n          if (cVar5 == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(param_3 + 4) + 8) != 0) &&\n         (cVar5 = FUNC_00112c1f(param_1,param_2,*(long *)(*(long *)(param_3 + 4) + 8),0),\n         cVar5 == '\\0')) {\n        return 0;\n      }\n      uVar7 = stab_method_type_lto_priv_0\n                        (param_2,*(long *)(*(long *)(param_3 + 4) + 8) != 0,uVar12 & 0xffffffff,\n                         *(undefined *)(*(long *)(param_3 + 4) + 0x18));\n      return uVar7;\n    case 0x14:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_const_type_lto_priv_0(param_2);\n      return uVar7;\n    case 0x15:\n      cVar5 = FUNC_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 4),0);\n      if (cVar5 == '\\0') {\n        return 0;\n      }\n      uVar7 = stab_volatile_type_lto_priv_0(param_2);\n      return uVar7;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  bVar14 = *(int **)**(undefined8 **)(param_3 + 4) == param_3;\n  param_3 = *(int **)**(undefined8 **)(param_3 + 4);\n  if (bVar14) {\nLAB_00112dd6:\n    uVar7 = stab_empty_type_lto_priv_0(param_2);\n    return uVar7;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "stab_typedef_type.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "debug_set_class_id.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_class_baseclass.lto_priv.0",
                "dcgettext",
                "stab_bool_type.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "__assert_fail",
                "stab_class_method_variant.lto_priv.0",
                "debug_get_real_type.isra.0",
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "abort",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_reference_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "fprintf",
                "stab_class_static_method_variant.lto_priv.0",
                "stab_empty_type.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00112c1f",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "FUNC_00112c1f"
        },
        "FUN_00104850": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104850"
        },
        "FUN_00104730": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104730"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "update_status_and_message_0010808f",
                "unaff_R14B": "characterFlag",
                "unaff_R15": "dataOffset",
                "lVar1": "errorString",
                "status": "programStatus"
            },
            "code": "\nvoid updateStatusAndMessage_0010808f(void)\n\n{\n  long errorString;\n  char characterFlag;\n  long dataOffset;\n  \n  errorString = dcgettext(0,\"failed to copy private data\",5);\n  if (characterFlag != '\\0') {\n    *(undefined4 *)(*(long *)(dataOffset + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    programStatus = 1;\n    bfd_nonfatal_message(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "update_status_and_message_0010808f"
        },
        "FUN_001281d0": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memset@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001281d0",
            "calling": [
                "memset"
            ],
            "imported": false,
            "current_name": "FUN_001281d0"
        },
        "FUN_00104610": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104610"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "fileName",
                "param_2": "errorMessage",
                "in_RAX": "returnValue",
                "__format": "warningFormat"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 fileName,undefined8 errorMessage)\n\n{\n  undefined8 returnValue;\n  char *warningFormat;\n  \n  warningFormat = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,warningFormat,errorMessage,fileName,returnValue);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "parse_number"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "FUN_001280b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280b8",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_001280b8"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_file_format_00105828",
                "iVar1": "architecture",
                "uVar2": "outputArch",
                "uVar3": "filename",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkFileFormat_00105828(void)\n\n{\n  int architecture;\n  undefined4 outputArch;\n  undefined8 filename;\n  undefined8 errorMessage;\n  \n  architecture = bfd_get_arch();\n  if (architecture == 0) {\n    filename = bfd_get_archive_filename();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  else {\n    filename = bfd_get_mach();\n    outputArch = bfd_get_arch();\n    filename = bfd_printable_arch_mach(outputArch,filename);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    non_fatal(errorMessage,filename);\n  }\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "bfd_printable_arch_mach",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_file_format_00105828"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_unique_directory_0011a0e0",
                "__template": "directory_path",
                "pcVar1": "result",
                "template_in_dir": "get_template_in_directory",
                "mkdtemp": "make_temporary_directory"
            },
            "code": "\nchar * create_unique_directory_0011a0e0(void)\n\n{\n  char *directory_path;\n  char *result;\n  \n  directory_path = (char *)get_template_in_directory();\n  result = make_temporary_directory(directory_path);\n  if (result == (char *)0x0) {\n    free(directory_path);\n  }\n  return result;\n}\n\n",
            "called": [
                "template_in_dir",
                "mkdtemp",
                "make_tempdir.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_unique_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "find_defined_type_0010bba1",
                "param_1": "hash_table",
                "param_2": "type",
                "lVar1": "hash_entry",
                "uVar2": "result"
            },
            "code": "\nundefined8 find_defined_type_0010bba1(long hash_table,undefined8 type)\n\n{\n  long hash_entry;\n  undefined8 result;\n  \n  hash_entry = bfd_hash_lookup(hash_table + 0x1b8,type,0,0);\n  if ((hash_entry != 0) && (0 < *(long *)(hash_entry + 0x20))) {\n    result = stab_push_defined_type(hash_table,*(long *)(hash_entry + 0x20),*(undefined4 *)(hash_entry + 0x28));\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "find_defined_type_0010bba1"
        },
        "FUN_00104740": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "try_dir.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104740"
        },
        "FUN_00104620": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104620"
        },
        "FUN_00104860": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104860"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_symbol_0010e6a8",
                "param_2": "symbolName",
                "param_3": "arg3",
                "param_4": "arg4",
                "__s": "type",
                "sVar3": "symbolNameLength",
                "sVar4": "typeLength",
                "__s_00": "formattedString",
                "lVar8": "typeNumber",
                "uVar1": "writeResult",
                "uVar2": "symbolType",
                "uVar6": "errorMsg",
                "uVar7": "errorString",
                "lVar5": "hashLookupResult",
                "uVar9": "returnValue",
                "auVar10": "result"
            },
            "code": "\nundefined  [16] processSymbol_0010e6a8(long param_1,char *symbolName,undefined8 arg3,undefined8 arg4)\n\n{\n  uint writeResult;\n  undefined4 symbolType;\n  char *type;\n  size_t symbolNameLength;\n  size_t typeLength;\n  char *formattedString;\n  long hashLookupResult;\n  undefined8 errorMsg;\n  undefined8 errorString;\n  long typeNumber;\n  ulong returnValue;\n  undefined result [16];\n  \n  typeNumber = *(long *)(*(long *)(param_1 + 0x60) + 0x10);\n  symbolType = *(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18);\n  type = (char *)stab_pop_type();\n  symbolNameLength = strlen(symbolName);\n  typeLength = strlen(type);\n  formattedString = (char *)xmalloc(symbolNameLength + 0x14 + typeLength);\n  if (typeNumber < 1) {\n    typeNumber = *(long *)(param_1 + 0x68);\n    *(long *)(param_1 + 0x68) = typeNumber + 1;\n    sprintf(formattedString,\"%s:t%ld=%s\",symbolName,typeNumber,type);\n  }\n  else {\n    sprintf(formattedString,\"%s:t%s\",symbolName,type);\n  }\n  free(type);\n  writeResult = stab_write_symbol_lto_priv_0(param_1,0x80,0,0,formattedString);\n  returnValue = (ulong)writeResult;\n  if ((char)writeResult != '\\0') {\n    free(formattedString);\n    hashLookupResult = bfd_hash_lookup(param_1 + 0x1b8,symbolName,1,0);\n    if (hashLookupResult != 0) {\n      *(long *)(hashLookupResult + 0x20) = typeNumber;\n      *(undefined4 *)(hashLookupResult + 0x28) = symbolType;\n      goto LAB_0010e7b3;\n    }\n    symbolType = bfd_get_error();\n    errorMsg = bfd_errmsg(symbolType);\n    errorString = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    non_fatal(errorString,errorMsg);\n  }\n  returnValue = 0;\nLAB_0010e7b3:\n  result._8_8_ = arg4;\n  result._0_8_ = returnValue;\n  return result;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "stab_write_symbol.lto_priv.0",
                "non_fatal",
                "dcgettext",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "process_symbol_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "generate_symbol_with_prefix_0010e7c2",
                "param_1": "symbolType",
                "param_2": "symbolName",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "poppedString",
                "sVar1": "symbolNameLength",
                "sVar2": "poppedStringLength",
                "__s_00": "concatenatedString",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] generateSymbolWithPrefix_0010e7c2(undefined8 symbolType,char *symbolName,undefined8 param3,undefined8 param4)\n\n{\n  char *poppedString;\n  size_t symbolNameLength;\n  size_t poppedStringLength;\n  char *concatenatedString;\n  undefined result [16];\n  \n  poppedString = (char *)stab_pop_type();\n  symbolNameLength = strlen(symbolName);\n  poppedStringLength = strlen(poppedString);\n  concatenatedString = (char *)xmalloc(symbolNameLength + 3 + poppedStringLength);\n  sprintf(concatenatedString,\"%s:T%s\",symbolName,poppedString);\n  free(poppedString);\n  result._0_4_ = stab_write_symbol_lto_priv_0(symbolType,0x80,0,0,concatenatedString);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(concatenatedString);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_symbol_with_prefix_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "report_and_exit_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "isConditionTrue",
                "local_d8": "localVariable1",
                "local_d4": "localVariable2",
                "local_d0": "pointerToLocalVariable1",
                "local_c8": "pointerToLocalVariable2",
                "local_b8": "localArray",
                "local_b0": "param2Copy",
                "local_a8": "param3Copy",
                "local_a0": "param4Copy",
                "local_98": "param5Copy",
                "local_90": "param6Copy",
                "local_88": "input1Copy",
                "local_78": "input2Copy",
                "local_68": "input3Copy",
                "local_58": "input4Copy",
                "local_48": "input5Copy",
                "local_38": "input6Copy",
                "local_28": "input7Copy",
                "local_18": "input8Copy"
            },
            "code": "\nvoid reportAndExit_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char isConditionTrue;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined *pointerToLocalVariable1;\n  undefined *pointerToLocalVariable2;\n  undefined localArray [8];\n  undefined8 param2Copy;\n  undefined8 param3Copy;\n  undefined8 param4Copy;\n  undefined8 param5Copy;\n  undefined8 param6Copy;\n  undefined4 input1Copy;\n  undefined4 input2Copy;\n  undefined4 input3Copy;\n  undefined4 input4Copy;\n  undefined4 input5Copy;\n  undefined4 input6Copy;\n  undefined4 input7Copy;\n  undefined4 input8Copy;\n  \n  if (isConditionTrue != '\\0') {\n    input1Copy = input1;\n    input2Copy = input2;\n    input3Copy = input3;\n    input4Copy = input4;\n    input5Copy = input5;\n    input6Copy = input6;\n    input7Copy = input7;\n    input8Copy = input8;\n  }\n  pointerToLocalVariable1 = &stack0x00000008;\n  localVariable1 = 8;\n  pointerToLocalVariable2 = localArray;\n  localVariable2 = 0x30;\n  param2Copy = param2;\n  param3Copy = param3;\n  param4Copy = param4;\n  param5Copy = param5;\n  param6Copy = param6;\n  report(param1,&localVariable1);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "init_section_add.cold",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "copy_section.cold",
                "main",
                "parse_vma.cold",
                "parse_flags.cold",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "create_new_symbol.cold",
                "copy_file",
                "FUN_00114dc7",
                "section_add_load_file.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "report_and_exit_00119dd0"
        },
        "FUN_00104500": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "copy_object",
                "copy_file",
                "FUN_00107880",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104500"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "unaff_RBP": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int bfdError;\n  undefined8 *returnValue;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    bfdError = bfd_get_error();\n    if (bfdError == 5) {\n      return returnAddress;\n    }\n  }\n  bfd_nonfatal(*returnValue);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_001280e8": {
            "renaming": {},
            "code": "\n\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* write@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280e8",
            "calling": [
                "write"
            ],
            "imported": false,
            "current_name": "FUN_001280e8"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_notes_00116852",
                "in_RCX": "noteArray",
                "in_R10": "noteIndex",
                "unaff_RBP": "sortedNotes",
                "unaff_R13": "currentNote",
                "unaff_R14": "currentComparisonNote",
                "unaff_R15": "maxSize",
                "unaff_RBX": "maxIndex",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "resultSize",
                "param_11": "originalNoteArray",
                "param_12": "resultArray",
                "param_13": "paramStruct",
                "param_14": "originalNoteArraySize",
                "bVar14": "byteVar",
                "sVar1": "sizeVar",
                "uVar4": "intVar",
                "iVar3": "compareResult",
                "uVar5": "minSize",
                "uVar6": "currentSize",
                "lVar7": "loopVar",
                "puVar9": "ptrVar1",
                "cVar10": "charVar",
                "puVar11": "ptrVar2",
                "puVar12": "ptrVar3",
                "__ptr": "allocPtr",
                "pcVar2": "functionPtr",
                "psVar13": "notePtr",
                "uVar8": "noteId"
            },
            "code": "\nulong processNotes_00116852(void)\n\n{\n  size_t sizeVar;\n  code *functionPtr;\n  int compareResult;\n  uint intVar;\n  undefined *allocPtr;\n  size_t *noteArray;\n  ulong minSize;\n  ulong currentSize;\n  long loopVar;\n  ulong noteId;\n  size_t maxIndex;\n  size_t *sortedNotes;\n  undefined *ptrVar1;\n  char charVar;\n  undefined *ptrVar2;\n  ulong noteIndex;\n  undefined *ptrVar3;\n  size_t in_R11;\n  size_t *currentNote;\n  size_t *currentComparisonNote;\n  size_t maxSize;\n  size_t *notePtr;\n  byte byteVar;\n  size_t param1;\n  size_t param2;\n  ulong resultSize;\n  size_t *originalNoteArray;\n  undefined *resultArray;\n  long paramStruct;\n  size_t originalNoteArraySize;\n  \n  byteVar = 0;\ncode_r0x00116852:\n  intVar = (int)noteIndex + 1;\n  if (0x10 < (int)noteIndex) goto LAB_001167f5;\nLAB_00116863:\n  currentComparisonNote = currentComparisonNote + -9;\n  do {\n    if (currentNote <= currentComparisonNote) {\n      sizeVar = currentComparisonNote[2];\n      if (sizeVar == 0) goto LAB_00116863;\n      noteId = (ulong)intVar;\n      if ((*currentComparisonNote == *sortedNotes) &&\n         (compareResult = memcmp((void *)currentComparisonNote[3],(void *)sortedNotes[3],*sortedNotes), compareResult == 0)) {\n        currentSize = currentComparisonNote[7];\n        minSize = currentComparisonNote[8];\n        noteIndex = noteId & 0xffffffff;\n        if (maxSize == currentSize) {\n          if (maxIndex != minSize) goto LAB_001167a6;\n          sortedNotes[2] = 0;\n        }\n        else {\n          if (maxSize < currentSize) {\n            if (minSize < maxSize) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < minSize) || (maxSize <= (minSize + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (maxIndex < maxSize) {\n              if ((0xfffffffffffffff0 < maxIndex) ||\n                 (currentSize <= (maxIndex + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (maxIndex == minSize) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (maxIndex <= minSize) {\n              sortedNotes[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (minSize < maxSize) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (sizeVar == 0x101)) goto code_r0x00116852;\n          if (minSize <= maxIndex) {\n            minSize = maxIndex;\n          }\n          if (currentSize < maxSize) {\n            maxSize = currentSize;\n          }\n          currentComparisonNote[8] = minSize;\n          currentComparisonNote[7] = maxSize;\n          sortedNotes[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        currentComparisonNote = sortedNotes;\n        sortedNotes = currentComparisonNote + 9;\n        if (noteArray <= sortedNotes) {\n          qsort(originalNoteArray,originalNoteArraySize,0x48,sort_gnu_build_notes);\n          allocPtr = (undefined *)xmalloc(resultSize * 2);\n          param1 = 0;\n          ptrVar3 = allocPtr;\n          for (notePtr = originalNoteArray; notePtr < noteArray; notePtr = notePtr + 9) {\n            if (notePtr[2] != 0) {\n              ptrVar2 = ptrVar3 + 4;\n              ptrVar1 = ptrVar3 + 0xc;\n              functionPtr = *(code **)(*(long *)(paramStruct + 8) + 0x50);\n              if ((notePtr[7] == param2) && (notePtr[8] == param1)) {\n                (*functionPtr)(*notePtr,ptrVar3);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(0,ptrVar2);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(notePtr[2],ptrVar3 + 8);\n                currentSize = notePtr[6];\n                noteId = *notePtr;\n                ptrVar3 = (undefined *)notePtr[3];\n                ptrVar2 = ptrVar1;\n                for (minSize = noteId; minSize != 0; minSize = minSize - 1) {\n                  *ptrVar2 = *ptrVar3;\n                  ptrVar3 = ptrVar3 + (ulong)byteVar * -2 + 1;\n                  ptrVar2 = ptrVar2 + (ulong)byteVar * -2 + 1;\n                }\n                if (noteId < currentSize) {\n                  for (loopVar = currentSize - noteId; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptrVar2 = 0;\n                    ptrVar2 = ptrVar2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                ptrVar3 = ptrVar1 + currentSize;\n              }\n              else {\n                (*functionPtr)();\n                if (*(int *)(*(long *)(paramStruct + 8) + 8) == 5) {\n                  charVar = (*(char *)(*(long *)(paramStruct + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charVar = '\\b';\n                }\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(charVar,ptrVar2);\n                (**(code **)(*(long *)(paramStruct + 8) + 0x50))(notePtr[2],ptrVar3 + 8);\n                noteId = *notePtr;\n                ptrVar3 = (undefined *)notePtr[3];\n                ptrVar2 = ptrVar1;\n                for (currentSize = noteId; currentSize != 0; currentSize = currentSize - 1) {\n                  *ptrVar2 = *ptrVar3;\n                  ptrVar3 = ptrVar3 + (ulong)byteVar * -2 + 1;\n                  ptrVar2 = ptrVar2 + (ulong)byteVar * -2 + 1;\n                }\n                currentSize = notePtr[6];\n                if (noteId < currentSize) {\n                  for (loopVar = currentSize - noteId; loopVar != 0; loopVar = loopVar + -1) {\n                    *ptrVar2 = 0;\n                    ptrVar2 = ptrVar2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                loopVar = *(long *)(paramStruct + 8);\n                ptrVar1 = ptrVar1 + currentSize;\n                ptrVar3 = ptrVar1 + 8;\n                if ((*(int *)(loopVar + 8) == 5) &&\n                   (*(char *)(*(long *)(paramStruct + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(notePtr[7],ptrVar1);\n                  (**(code **)(*(long *)(paramStruct + 8) + 0x38))(notePtr[8],ptrVar3);\n                  ptrVar3 = ptrVar1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(notePtr[7],ptrVar1);\n                  (**(code **)(*(long *)(paramStruct + 8) + 0x50))(notePtr[8],ptrVar1 + 4);\n                }\n                param2 = notePtr[7];\n                param1 = notePtr[8];\n              }\n            }\n          }\n          currentSize = (long)ptrVar3 - (long)allocPtr;\n          noteId = currentSize;\n          ptrVar3 = allocPtr;\n          if (currentSize < resultSize) {\n            for (; resultSize = currentSize, noteId != 0; noteId = noteId - 1) {\n              *resultArray = *ptrVar3;\n              ptrVar3 = ptrVar3 + (ulong)byteVar * -2 + 1;\n              resultArray = resultArray + (ulong)byteVar * -2 + 1;\n            }\n          }\n          free(allocPtr);\n          free(originalNoteArray);\n          return resultSize;\n        }\n        in_R11 = currentComparisonNote[0xb];\n      } while (in_R11 == 0);\n      maxSize = currentComparisonNote[0x10];\n      maxIndex = currentComparisonNote[0x11];\n      intVar = 0;\n      if (maxSize != maxIndex) break;\n      currentComparisonNote[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "memcmp",
                "FUN_00116852",
                "qsort",
                "free",
                "sort_gnu_build_notes",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_notes_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_type_00113d3a",
                "param_1": "input",
                "lVar1": "typePtr"
            },
            "code": "\nlong initializeType_00113d3a(long input)\n\n{\n  long typePtr;\n  \n  if (input != 0) {\n    typePtr = *(long *)(input + 8);\n    if (typePtr == 0) {\n      typePtr = debug_make_type_constprop_0(0xc,0);\n      if (typePtr == 0) {\n        typePtr = 0;\n      }\n      else {\n        *(long *)(typePtr + 0x10) = input;\n        *(long *)(input + 8) = typePtr;\n      }\n    }\n    return typePtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_type_00113d3a"
        },
        "FUN_00104630": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104630"
        },
        "FUN_00104510": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "display_info.isra.0.cold",
                "main",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "FUN_00104510"
        },
        "FUN_00104870": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104870"
        },
        "FUN_00104750": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "main",
                "section_add_load_file",
                "FUN_00107880",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104750"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "modify_stab_type_0010a0d3",
                "param_1": "input",
                "stab_modify_type": "modifyType"
            },
            "code": "\nvoid modifyStabType_0010a0d3(long input)\n\n{\n  modifyType(input,0x42,*(undefined4 *)(*(long *)(input + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "modify_stab_type_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_sections_00115530",
                "param_1": "binaryFile",
                "param_2": "sectionNames",
                "param_3": "outputFile",
                "lVar1": "tempVar1",
                "pcVar2": "tempVar2",
                "ppcVar3": "tempVar3",
                "cVar4": "tempVar4",
                "iVar5": "tempVar5",
                "uVar6": "tempVar6",
                "sVar7": "tempVar7",
                "sVar8": "tempVar8",
                "lVar9": "tempVar9",
                "pcVar10": "sectionName",
                "pcVar11": "tempVar11",
                "pcVar12": "tempVar12",
                "uVar13": "sectionFlags",
                "bVar14": "isAligned",
                "local_50": "errorMessage",
                "local_48": "updatedSectionName",
                "local_40": "sectionFlagsArray",
                "prefix_alloc_sections_string": "allocSectionsString",
                "prefix_sections_string": "sectionsString",
                "strip_symbols": "symbolStripping",
                "copy_byte": "copyBytes",
                "interleave": "interLeave",
                "copy_width": "copyWidth",
                "change_section_address": "sectionAddressChange",
                "extract_symbol": "extractSymbols",
                "status": "executionStatus"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nvoid processSections_00115530(long binaryFile,char **sectionNames,long outputFile)\n\n{\n  long tempVar1;\n  char *tempVar2;\n  char **tempVar3;\n  char tempVar4;\n  int tempVar5;\n  uint tempVar6;\n  size_t tempVar7;\n  size_t tempVar8;\n  long tempVar9;\n  char *sectionName;\n  char *tempVar11;\n  char *tempVar12;\n  uint sectionFlags;\n  bool isAligned;\n  long errorMessage;\n  char *updatedSectionName;\n  long sectionFlagsArray [2];\n  \n  tempVar4 = is_strip_section_isra_0(sectionNames);\n  if (tempVar4 != '\\0') {\n    return;\n  }\n  sectionName = *sectionNames;\n  sectionFlags = *(uint *)((long)sectionNames + 0x24);\n  updatedSectionName = sectionName;\n  tempVar3 = section_rename_list;\n  if (*(int *)(*(long *)(binaryFile + 8) + 8) != *(int *)(*(long *)(outputFile + 8) + 8)) {\n    sectionFlags = sectionFlags & *(uint *)(*(long *)(binaryFile + 8) + 0x18) &\n             *(uint *)(*(long *)(outputFile + 8) + 0x18);\n  }\n  for (; tempVar3 != (char **)0x0; tempVar3 = (char **)tempVar3[3]) {\n    tempVar5 = strcmp(*tempVar3,sectionName);\n    if (tempVar5 == 0) {\n      if (*(uint *)(tempVar3 + 2) != 0xffffffff) {\n        sectionFlags = *(uint *)(tempVar3 + 2);\n      }\n      if (sectionName != tempVar3[1]) {\n        updatedSectionName = tempVar3[1];\n        sectionFlags = check_new_section_flags(sectionFlags,outputFile);\n      }\n      break;\n    }\n  }\n  if (((allocSectionsString != (char *)0x0) &&\n      (sectionName = allocSectionsString, (*(byte *)((long)sectionNames + 0x24) & 1) != 0)) ||\n     (sectionName = sectionsString, sectionsString != (char *)0x0)) {\n    tempVar7 = strlen(sectionName);\n    tempVar8 = strlen(updatedSectionName);\n    tempVar12 = (char *)xmalloc(tempVar7 + 1 + tempVar8);\n    sectionName = strcpy(tempVar12,sectionName);\n    updatedSectionName = strcat(sectionName,updatedSectionName);\n  }\n  tempVar9 = find_section_list(*sectionNames,0,0x80);\n  isAligned = false;\n  if (tempVar9 == 0) {\n    if ((symbolStripping == 4) && ((sectionFlags & 0x2000001) != 0)) {\n      tempVar5 = *(int *)(*(long *)(binaryFile + 8) + 8);\n      if (tempVar5 == 5) {\n        if (*(int *)(sectionNames[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(outputFile + 8) + 8) == 5) {\n            isAligned = (sectionFlags & 0x2000000) == 0;\n            tempVar6 = ~((-(uint)((sectionFlags & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)sectionNames + 0x24) = *(uint *)((long)sectionNames + 0x24) & tempVar6;\n          }\n          else {\n            tempVar6 = 0xfdfffefd;\n          }\n          sectionFlags = sectionFlags & tempVar6;\n        }\n      }\n      else if ((tempVar5 != 2) || (tempVar5 = strcmp(*sectionNames,\".buildid\"), tempVar5 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    sectionFlags = check_new_section_flags(sectionFlags & 0x104 | *(uint *)(tempVar9 + 0x28),outputFile,*sectionNames);\n  }\n  tempVar4 = bfd_convert_section_setup(binaryFile,sectionNames,outputFile,&updatedSectionName,sectionFlagsArray);\n  if (tempVar4 == '\\0') {\n    sectionName = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  sectionName = (char *)bfd_make_section_anyway_with_flags(outputFile,updatedSectionName,sectionFlags);\n  if (sectionName == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (copyBytes < 0) {\n    if (extractSymbols != '\\0') {\n      sectionFlagsArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    tempVar4 = bfd_set_section_size(sectionName,sectionFlagsArray[0]);\n    if (tempVar4 == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  else {\n    sectionFlagsArray[0] = ((((long)interLeave - 1U) + sectionFlagsArray[0]) / (ulong)(long)interLeave) *\n                  (long)copyWidth;\nLAB_001158e7:\n    tempVar4 = bfd_set_section_size(sectionName);\n    if (tempVar4 == '\\0') {\n      setup_section_cold();\n      return;\n    }\n  }\n  errorMessage = 0;\n  tempVar12 = sectionNames[6];\n  tempVar9 = find_section_list(*sectionNames,0,0x18);\n  if (tempVar9 == 0) {\n    sectionName[0x28] = sectionName[0x28] | 1;\n    tempVar11 = *sectionNames;\n    tempVar12 = tempVar12 + sectionAddressChange;\n    *(char **)(sectionName + 0x30) = tempVar12;\n    *(char **)(sectionName + 0x38) = tempVar12;\n    tempVar12 = sectionNames[7];\n    tempVar9 = find_section_list(tempVar11,0,0x60);\n    if (tempVar9 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar11 = *(char **)(tempVar9 + 0x20);\n    if ((*(byte *)(tempVar9 + 0x14) & 0x40) != 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    *(char **)(sectionName + 0x38) = tempVar11;\n    tempVar9 = find_section_list(*sectionNames,0,0x200);\n    if (tempVar9 != 0) goto LAB_00115889;\nLAB_001156b8:\n    sectionFlags = *(uint *)((long)sectionNames + 0x7c);\n    if (sectionFlags < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(sectionName + 0xb4) = *(undefined4 *)((long)sectionNames + 0xb4);\n    sectionName[0x28] = sectionName[0x28] & 0xcfU | *(byte *)(sectionNames + 5) & 0x30;\n    sectionNames[0xc] = sectionName;\n    sectionNames[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sectionNames + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    tempVar4 = (**(code **)(*(long *)(outputFile + 8) + 0x158))(binaryFile,sectionNames,outputFile,sectionName);\n    if (tempVar4 == '\\0') {\n      update_executionStatus_and_message_0010808f();\n      return;\n    }\n  }\n  else {\n    tempVar11 = *(char **)(tempVar9 + 0x18);\n    if ((*(byte *)(tempVar9 + 0x14) & 8) == 0) {\n      tempVar11 = tempVar11 + (long)tempVar12;\n    }\n    sectionName[0x28] = sectionName[0x28] | 1;\n    tempVar2 = *sectionNames;\n    *(char **)(sectionName + 0x30) = tempVar11;\n    *(char **)(sectionName + 0x38) = tempVar11;\n    tempVar12 = sectionNames[7];\n    tempVar9 = find_section_list(tempVar2,0,0x60);\n    if (tempVar9 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempVar11 = *sectionNames;\n    *(char **)(sectionName + 0x38) = tempVar12 + sectionAddressChange;\n    tempVar9 = find_section_list(tempVar11,0,0x200);\n    if (tempVar9 == 0) goto LAB_001156b8;\nLAB_00115889:\n    sectionFlags = *(uint *)(tempVar9 + 0x2c);\n    if (0x3e < sectionFlags) {\n      set_alignment_and_group_signature_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(sectionName + 0x7c) = sectionFlags;\n    *(undefined4 *)(sectionName + 0xb4) = *(undefined4 *)((long)sectionNames + 0xb4);\n    sectionName[0x28] = sectionName[0x28] & 0xcfU | *(byte *)(sectionNames + 5) & 0x30;\n    sectionNames[0xc] = sectionName;\n    sectionNames[0xb] = (char *)0x0;\n    if ((*(byte *)((long)sectionNames + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempVar12 = sectionNames[0x1a];\n    tempVar9 = group_signature_isra_0(tempVar12,sectionNames[0x1c]);\n    if ((tempVar9 == 0) ||\n       (tempVar1 = *(long *)(binaryFile + 8), *(uint *)(tempVar9 + 0x18) = *(uint *)(tempVar9 + 0x18) | 0x20,\n       *(int *)(tempVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempVar12 + 0xb0) = tempVar9;\n    tempVar4 = (**(code **)(*(long *)(outputFile + 8) + 0x158))(binaryFile,sectionNames,outputFile,sectionName);\n    if (tempVar4 == '\\0') {\n      update_executionStatus_and_message_0010808f();\n      return;\n    }\n  }\n  if (isAligned) {\n    *(undefined4 *)(*(long *)(sectionName + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  executionStatus = 1;\n  bfd_nonfatal_message(0,outputFile,sectionName,errorMessage);\n  return;\n}\n\n",
            "called": [
                "check_new_section_flags",
                "is_strip_section.isra.0",
                "find_section_list",
                "setup_section.cold",
                "strcpy",
                "strcat",
                "strlen",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_convert_section_setup",
                "bfd_make_section_anyway_with_flags",
                "xmalloc",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_sections_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "update_and_modify_type_0010a0bd",
                "param_1": "inputParam",
                "stab_modify_type": "modifyTypeInStab"
            },
            "code": "\nvoid updateAndModifyType_0010a0bd(long inputParam)\n\n{\n  modifyTypeInStab(inputParam,0x6b,*(undefined4 *)(*(long *)(inputParam + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "stab_modify_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "update_and_modify_type_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "check_and_demangle_type_00113e5e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "cVar1": "result",
                "local_20": "temp"
            },
            "code": "\nundefined8 check_and_demangle_type_00113e5e(undefined8 arg1,char **arg2,long arg3)\n\n{\n  char result;\n  char *temp [2];\n  \n  temp[0] = *arg2;\n  *arg2 = (char *)(arg3 + 2);\n  if ((((long)(char *)(arg3 + 2) - (long)temp[0] < 5) ||\n      (result = startswith_lto_priv_0_lto_priv_0(temp[0],\"type\"), result == '\\0')) ||\n     ((temp[0][4] != '$' && (temp[0][4] != '.')))) {\n    if (*temp[0] != '_') {\n      return 1;\n    }\n    if (temp[0][1] != '_') {\n      return 1;\n    }\n    if (temp[0][2] != 'o') {\n      return 1;\n    }\n    if (temp[0][3] != 'p') {\n      return 1;\n    }\n    temp[0] = temp[0] + 4;\n  }\n  else {\n    temp[0] = temp[0] + 5;\n  }\n  result = stab_demangle_type_lto_priv_0(arg1,temp,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "stab_demangle_type.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "check_and_demangle_type_00113e5e"
        },
        "FUN_00104520": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104520"
        },
        "FUN_00104400": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "create_new_symbol",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104400"
        },
        "FUN_00104760": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "main",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "fatal"
            ],
            "imported": false,
            "current_name": "FUN_00104760"
        },
        "FUN_00104640": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104640"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "generate_report_0010abdd",
                "param_1": "data",
                "param_2": "username",
                "param_3": "reportType",
                "param_4": "isUserAdmin",
                "param_5": "isPremiumUser",
                "param_6": "isVerifiedUser",
                "param_7": "timestamp",
                "param_8": "hasCustomSettings",
                "lVar1": "structPointer",
                "pcVar2": "report",
                "bVar3": "flag",
                "pcVar4": "usernameCopy",
                "__s": "customSettings",
                "sVar5": "reportLength",
                "sVar6": "usernameCopyLength",
                "sVar7": "param2Length",
                "sVar8": "customSettingsLength",
                "uVar9": "result",
                "cVar10": "flagChar",
                "cVar11": "typeChar",
                "local_52": "localFlag"
            },
            "code": "\nundefined8\ngenerateReport_0010abdd(long data,char *username,uint reportType,char isUserAdmin,char isPremiumUser,char isVerifiedUser,\n            undefined8 timestamp,char hasCustomSettings)\n\n{\n  long structPointer;\n  char *report;\n  byte flag;\n  char *usernameCopy;\n  char *customSettings;\n  size_t reportLength;\n  size_t usernameCopyLength;\n  size_t param2Length;\n  size_t customSettingsLength;\n  undefined8 result;\n  char flagChar;\n  char typeChar;\n  byte localFlag;\n  \n  customSettings = (char *)0x0;\n  localFlag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  usernameCopy = (char *)stab_pop_type();\n  if (hasCustomSettings != '\\0') {\n    flag = 1;\n    if (localFlag == 0) {\n      flag = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n    }\n    localFlag = flag & 1;\n    customSettings = (char *)stab_pop_type(data);\n  }\n  structPointer = *(long *)(data + 0x60);\n  if ((structPointer == 0) || (report = *(char **)(structPointer + 0x30), report == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < reportType) {\n                    \n      abort();\n    }\n    if (isPremiumUser == '\\0') {\n      typeChar = (-(isVerifiedUser == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      typeChar = (-(isVerifiedUser == '\\0') & 0xfeU) + 0x44;\n    }\n    flagChar = '?';\n    if (isUserAdmin == '\\0') {\n      flagChar = (-(hasCustomSettings == '\\0') & 4U) + 0x2a;\n    }\n    reportLength = strlen(report);\n    usernameCopyLength = strlen(usernameCopy);\n    param2Length = strlen(username);\n    customSettingsLength = 0;\n    if (hasCustomSettings != '\\0') {\n      customSettingsLength = strlen(customSettings);\n    }\n    result = xrealloc(report,param2Length + reportLength + 0x28 + usernameCopyLength + customSettingsLength);\n    *(undefined8 *)(structPointer + 0x30) = result;\n    report = *(char **)(*(long *)(data + 0x60) + 0x30);\n    reportLength = strlen(report);\n    sprintf(report + reportLength,\"%s:%s;%c%c%c\",usernameCopy,username,(ulong)(byte)(0x32 - (char)reportType),\n            (ulong)(uint)(int)typeChar,(ulong)(uint)(int)flagChar,reportLength);\n    free(usernameCopy);\n    if (hasCustomSettings != '\\0') {\n      usernameCopy = *(char **)(*(long *)(data + 0x60) + 0x30);\n      reportLength = strlen(usernameCopy);\n      sprintf(usernameCopy + reportLength,\"%ld;%s;\",timestamp,customSettings);\n      free(customSettings);\n    }\n    if (localFlag != 0) {\n      *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "xrealloc",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "stab_class_static_method_variant.lto_priv.0",
                "stab_class_method_variant.lto_priv.0"
            ],
            "imported": false,
            "current_name": "generate_report_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flag",
                "param_2": "parameters",
                "param_3": "outputFormat",
                "uVar1": "value",
                "uVar2": "message"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flag,undefined8 *parameters,undefined8 outputFormat)\n\n{\n  undefined8 value;\n  undefined8 message;\n  \n  if (((flag & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    value = *parameters;\n    flag = flag & 0xf7ffffff;\n    message = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    non_fatal(message,value,outputFormat);\n  }\n  return flag;\n}\n\n",
            "called": [
                "check_new_section_flags.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "setup_section",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "FUN_00104880": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_00104880"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "decode_and_extract_001129f4",
                "param_1": "input",
                "puVar1": "param_ptr",
                "piVar2": "curr_ptr"
            },
            "code": "\nundefined8 decode_and_extract_001129f4(int *input)\n\n{\n  undefined8 *param_ptr;\n  int *curr_ptr;\n  \n  do {\n    if (*input != 1) {\n      if (1 < *input - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(input + 4) + 8);\n    }\n    param_ptr = (undefined8 *)(input + 4);\n    curr_ptr = **(int ***)(undefined8 *)*param_ptr;\n  } while ((input != curr_ptr) && (input = curr_ptr, curr_ptr != (int *)0x0));\n  return ((undefined8 *)*param_ptr)[1];\n}\n\n",
            "called": [
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "debug_get_real_type.isra.0",
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_get_type_name.constprop.0"
            ],
            "imported": false,
            "current_name": "decode_and_extract_001129f4"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "check_dwo_section_constprop_001082b3",
                "uVar1": "is_constprop_section",
                "is_dwo_section_constprop_0": "check_if_section_is_constprop"
            },
            "code": "\nuint check_dwo_section_constprop_001082b3(void)\n\n{\n  uint is_constprop_section;\n  \n  is_constprop_section = check_if_section_is_constprop();\n  return is_constprop_section ^ 1;\n}\n\n",
            "called": [
                "is_dwo_section.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_dwo_section_constprop_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "process_archive_file_00114690",
                "param_1": "inputFileName",
                "param_2": "outputFileName",
                "param_3": "fileDescriptor",
                "param_4": "bfdFileStats",
                "param_5": "bfdOpenMode",
                "param_6": "tempFileName",
                "param_7": "copyFlags",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerPointerCharVar1",
                "pvVar7": "pointerVoidVar1",
                "lVar8": "longVar1",
                "puVar9": "pointerUndef8Var2",
                "piVar10": "intPtr1",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "tempDir",
                "puVar14": "bfdFilePtr",
                "pcVar15": "tempDirName",
                "ppcVar16": "pointerPointerCharVar2",
                "pcVar17": "pointerCharVar1",
                "pcVar18": "pointerCharVar2",
                "pcVar23": "pointerCharVar3",
                "ppcVar19": "pointerPointerCharVar3",
                "pcVar20": "pointerCodeVar1",
                "lVar21": "longVar2",
                "uVar22": "uintVar1",
                "psVar24": "statPtr1",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localVar1",
                "local_198": "localVar2",
                "uStack_b0": "uStackVar1",
                "lStack_98": "lStackVar1",
                "dcgettext": "dcGetText",
                "non_fatal": "nonFatal",
                "bfd_openr": "bfdOpenRead",
                "bfd_stat": "bfdStat",
                "bfd_nonfatal_message": "bfdNonFatalMessage",
                "do_debug_sections": "debugSectionsFlag",
                "bfd_check_format": "bfdCheckFormat",
                "do_elf_stt_common": "elfSTTCommon",
                "preserve_dates": "preserveDates",
                "stat": "fileStats",
                "make_tempdir": "makeTempDir",
                "strip_symbols": "stripSymbols",
                "concat": "concatStrings",
                "copy_and_check_archive_file_001052a2": "copyAndCheckArchiveFile",
                "copy_object": "copyObject",
                "chmod": "changeFileMode",
                "xmalloc": "xMalloc",
                "set_long_section_mode": "setLongSectionMode",
                "verbose": "verboseFlag",
                "printf": "printFormattedText",
                "bfd_bread": "bfdBread",
                "bfd_bwrite": "bfdBwrite",
                "bfd_get_archive_filename": "bfdGetArchiveFilename",
                "set_times": "setFileTimes",
                "bfd_close_all_done": "bfdCloseAllDone",
                "unlink": "removeFile",
                "rmdir": "removeDir",
                "fatal": "unsupportedOperationFatal",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString"
            },
            "code": "\nvoid processArchiveFile_00114690(undefined8 inputFileName,undefined8 outputFileName,int fileDescriptor,undefined8 bfdFileStats,\n                 undefined8 bfdOpenMode,long tempFileName,undefined8 copyFlags)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **pointerPointerCharVar1;\n  void *pointerVoidVar1;\n  long longVar1;\n  undefined8 *pointerUndef8Var2;\n  int *intPtr1;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long tempDir;\n  undefined8 *bfdFilePtr;\n  char *tempDirName;\n  char **pointerPointerCharVar2;\n  char *pointerCharVar1;\n  char *pointerCharVar2;\n  undefined8 *__ptr;\n  char **pointerPointerCharVar3;\n  code *pointerCodeVar1;\n  long longVar2;\n  uint uintVar1;\n  char *pointerCharVar3;\n  fileStats *statPtr1;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localVar1;\n  long *localVar2;\n  fileStats local_158;\n  void *local_c8 [3];\n  uint uStackVar1;\n  long lStackVar1;\n  \n  byteVar2 = 0;\n  tempDir = get_file_size();\n  if (tempDir < 1) {\n    if (tempDir == 0) {\n      undefined8Var2 = dcGetText(0,\"error: the input file \\'%s\\' is empty\",5);\n      nonFatal(undefined8Var2,inputFileName);\n    }\n    fileStatsus = 1;\n    return;\n  }\n  bfdFilePtr = (undefined8 *)bfdOpenRead(inputFileName,bfdOpenMode);\n  if ((bfdFilePtr == (undefined8 *)0x0) || (intVar2 = bfdStat(bfdFilePtr,bfdFileStats), intVar2 != 0)) {\n    bfdNonFatalMessage(inputFileName,0,0,0);\n    fileStatsus = 1;\n    return;\n  }\n  switch(debugSectionsFlag) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x8000;\n  }\n  if (elfSTTCommon == 1) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0xc0000;\n  }\n  else if (elfSTTCommon == 2) {\n    *(uint *)((long)bfdFilePtr + 0x44) = *(uint *)((long)bfdFilePtr + 0x44) | 0x40000;\n  }\n  charVar1 = bfdCheckFormat(bfdFilePtr,2);\n  if (charVar1 != '\\0') {\n    if (tempFileName == 0) {\n      charVar1 = '\\0';\n      tempFileName = *(long *)bfdFilePtr[1];\n    }\n    if (fileDescriptor < 0) {\n      localVar1 = (undefined8 *)bfd_openw(outputFileName,tempFileName);\n    }\n    else {\n      localVar1 = (undefined8 *)bfd_fdopenw(outputFileName,tempFileName,fileDescriptor);\n    }\n    if (localVar1 != (undefined8 *)0x0) {\n      if (gnu_debuglink_filename != 0) {\n        undefined8Var2 = *bfdFilePtr;\n        undefined8Var1 = dcGetText(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        nonFatal(undefined8Var1,undefined8Var2);\n        gnu_debuglink_filename = 0;\n      }\n      setLongSectionMode(localVar1,bfdFilePtr,long_section_names);\n      localVar2 = localVar1 + 0x1f;\n      if ((*(byte *)((long)bfdFilePtr + 0x49) & 0x10) != 0) {\n        fileStatsus = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcGetText(0,\"sorry: copying thin archives is not currently supported\",5);\n        bfdNonFatalMessage(0,bfdFilePtr,0,undefined8Var2);\n        return;\n      }\n      tempDirName = (char *)makeTempDir(*localVar1);\n      if (tempDirName == (char *)0x0) {\n        intPtr1 = getErrnoLocation();\n        tempDirName = getErrorString(*intPtr1);\n        undefined8Var2 = dcGetText(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        unsupportedOperationFatal(undefined8Var2,tempDirName);\n      }\n      if (stripSymbols == 7) {\n        byteVar1 = *(byte *)((long)bfdFilePtr + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)bfdFilePtr + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = deterministic != 0;\n      *(byte *)((long)localVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)localVar1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localVar1 + 0x44) = *(uint *)((long)localVar1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointerPointerCharVar2 = (char **)bfdOpenRead_next_archived_file(bfdFilePtr,0);\n      charVar2 = bfd_set_format(localVar1,*(byte *)(bfdFilePtr + 9) & 7);\n      if (charVar2 == '\\0') {\n        fileStatsus = 1;\n        bfdNonFatalMessage(0,localVar1,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((fileStatsus == 0 && (pointerPointerCharVar2 != (char **)0x0))) {\n        pointerCharVar2 = *pointerPointerCharVar2;\n        pointerCharVar1 = pointerCharVar2;\n        if (*pointerCharVar2 == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcGetText(0,\"illegal pathname found in archive member: %s\",5);\n          nonFatal(undefined8Var2,pointerCharVar2);\nLAB_00104e93:\n          fileStatsus = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointerCharVar1 != '\\0') {\n          pointerCharVar3 = pointerCharVar1;\n          if ((*pointerCharVar1 == '.') && (pointerCharVar3 = pointerCharVar1 + 1, pointerCharVar1[1] == '.')) {\n            pointerCharVar3 = pointerCharVar1 + 2;\n            if ((pointerCharVar1[2] == '\\0') || (pointerCharVar1[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerCharVar3 != '\\0' && (*pointerCharVar3 != '/')); pointerCharVar3 = pointerCharVar3 + 1) {\n          }\n          pointerCharVar1 = pointerCharVar3;\n          if (*pointerCharVar3 == '/') {\n            copyAndCheckArchiveFile();\n            return;\n          }\n        }\n        pointerCharVar2 = (char *)concatStrings(tempDirName,&DAT_0011b47d);\n        intVar2 = fileStats(pointerCharVar2,&local_158);\n        pointerUndef8Var2 = __ptr;\n        if (-1 < intVar2) {\n          tempDir = makeTempDir(pointerCharVar2);\n          free(pointerCharVar2);\n          if (tempDir == 0) {\n            intPtr1 = getErrnoLocation();\n            pointerCharVar2 = getErrorString(*intPtr1);\n            undefined8Var2 = dcGetText(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            nonFatal(undefined8Var2,pointerCharVar2);\n            goto LAB_00104e93;\n          }\n          pointerUndef8Var2 = (undefined8 *)xMalloc(0x18);\n          pointerCharVar2 = *pointerPointerCharVar2;\n          *pointerUndef8Var2 = __ptr;\n          pointerUndef8Var2[2] = 0;\n          pointerUndef8Var2[1] = tempDir;\n          pointerCharVar2 = (char *)concatStrings(tempDir,&DAT_0011b47d,pointerCharVar2);\n        }\n        intVar2 = 0;\n        if (preserveDates != '\\0') {\n          statPtr1 = &local_158;\n          for (tempDir = 0x24; tempDir != 0; tempDir = tempDir + -1) {\n            *(undefined4 *)&statPtr1->st_dev = 0;\n            statPtr1 = (fileStats *)((long)statPtr1 + (ulong)byteVar2 * -8 + 4);\n          }\n          pointerPointerCharVar3 = (char **)pointerPointerCharVar2[0x1d];\n          if ((char **)pointerPointerCharVar2[0x1d] == (char **)0x0) {\n            pointerPointerCharVar3 = pointerPointerCharVar2;\n          }\n          intVar2 = (**(code **)(pointerPointerCharVar3[1] + 0x1e8))(pointerPointerCharVar2,&local_158);\n          if (intVar2 != 0) {\n            pointerCharVar1 = *pointerPointerCharVar2;\n            undefined8Var2 = dcGetText(0,\"internal fileStats error on %s\",5);\n            nonFatal(undefined8Var2,pointerCharVar1);\n          }\n        }\n        __ptr = (undefined8 *)xMalloc(0x18);\n        __ptr[1] = pointerCharVar2;\n        *__ptr = pointerUndef8Var2;\n        __ptr[2] = 0;\n        charVar2 = bfdCheckFormat(pointerPointerCharVar2,1);\n        if (charVar2 == '\\0') {\n          undefined8Var2 = dcGetText(0,\"Unable to recognise the format of file\",5);\n          bfdNonFatalMessage(0,pointerPointerCharVar2,0,undefined8Var2);\n          pointerPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,tempFileName);\n          if (pointerPointerCharVar3 == (char **)0x0) {\nLAB_00104e80:\n            bfdNonFatalMessage(pointerCharVar2,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerPointerCharVar1 = (char **)pointerPointerCharVar2[0x1d];\n          if ((char **)pointerPointerCharVar2[0x1d] == (char **)0x0) {\n            pointerPointerCharVar1 = pointerPointerCharVar2;\n          }\n          intVar1 = (**(code **)(pointerPointerCharVar1[1] + 0x1e8))(pointerPointerCharVar2);\n          tempDir = lStackVar1;\n          if (intVar1 == 0) {\n            if (lStackVar1 < 0) {\n              bfdGetArchiveFilename(pointerPointerCharVar2);\n              undefined8Var2 = dcGetText(0,\"fileStats returns negative size for `%s\\'\",5);\n              nonFatal(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(pointerPointerCharVar2,0,0);\n              if (intVar1 == 0) {\n                if (verboseFlag != '\\0') {\n                  pointerCharVar1 = *pointerPointerCharVar3;\n                  undefined8Var2 = bfdGetArchiveFilename(pointerPointerCharVar2);\n                  pointerCharVar3 = (char *)dcGetText(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printFormattedText(pointerCharVar3,undefined8Var2,pointerCharVar1);\n                }\n                pointerVoidVar1 = (void *)xMalloc(0x2000);\n                for (; tempDir != 0; tempDir = tempDir - longVar2) {\n                  longVar2 = 0x2000;\n                  if (tempDir < 0x2001) {\n                    longVar2 = tempDir;\n                  }\n                  longVar1 = bfdBread(pointerVoidVar1,longVar2,pointerPointerCharVar2);\n                  pointerPointerCharVar1 = pointerPointerCharVar2;\n                  if ((longVar2 != longVar1) ||\n                     (longVar1 = bfdBwrite(pointerVoidVar1,longVar2,pointerPointerCharVar3), pointerPointerCharVar1 = pointerPointerCharVar3,\n                     longVar2 != longVar1)) {\n                    bfdNonFatalMessage(0,pointerPointerCharVar1,0,0);\n                    free(pointerVoidVar1);\n                    goto LAB_00104f00;\n                  }\n                }\n                changeFileMode(*pointerPointerCharVar3,uStackVar1 | 0x100);\n                free(pointerVoidVar1);\n                charVar2 = bfdCloseAllDone(pointerPointerCharVar3);\n                if (charVar2 == '\\0') {\n                  bfdNonFatalMessage(pointerCharVar2,0,0,0);\n                  fileStatsus = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = bfdGetArchiveFilename(pointerPointerCharVar2);\n              bfd_nonunsupportedOperationFatal(undefined8Var2);\n            }\n          }\n          else {\n            bfdNonFatalMessage(0,pointerPointerCharVar2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfdCloseAllDone(pointerPointerCharVar3);\n          if (charVar2 == '\\0') {\n            bfdNonFatalMessage(pointerCharVar2,0,0,0);\n          }\nLAB_00104ec9:\n          removeFile(pointerCharVar2);\n          fileStatsus = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pointerPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,*(undefined8 *)pointerPointerCharVar2[1]);\n          }\n          else {\n            pointerPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,tempFileName);\n          }\n          if (pointerPointerCharVar3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = copyObject(pointerPointerCharVar2,pointerPointerCharVar3,copyFlags);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(pointerPointerCharVar2);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfdCloseAllDone(pointerPointerCharVar3);\n            if (charVar2 == '\\0') {\n              bfdNonFatalMessage(pointerCharVar2,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pointerPointerCharVar3);\n          if (charVar2 == '\\0') {\n            bfdNonFatalMessage(pointerCharVar2,0,0,0);\n            fileStatsus = 1;\n          }\nLAB_00114a86:\n          if ((preserveDates != '\\0') && (intVar2 == 0)) {\n            setFileTimes(pointerCharVar2,&local_158);\n          }\n          tempDir = bfdOpenRead(pointerCharVar2,tempFileName);\n          __ptr[2] = tempDir;\n          *localVar2 = tempDir;\n          localVar2 = (long *)(tempDir + 0xf0);\n          pointerPointerCharVar3 = (char **)bfdOpenRead_next_archived_file(bfdFilePtr);\n          bfd_close(pointerPointerCharVar2);\n          pointerPointerCharVar2 = pointerPointerCharVar3;\n        }\n      }\n      *localVar2 = 0;\n      pointerVoidVar1 = (void *)xstrdup(*localVar1);\n      if (fileStatsus == 0) {\n        pointerCodeVar1 = bfd_close;\n      }\n      else {\n        pointerCodeVar1 = bfdCloseAllDone;\n      }\n      charVar1 = (*pointerCodeVar1)(localVar1);\n      if (charVar1 == '\\0') {\n        fileStatsus = 1;\n        bfdNonFatalMessage(pointerVoidVar1,0,0,0);\n      }\n      free(pointerVoidVar1);\n      pointerVoidVar1 = (void *)xstrdup(*bfdFilePtr);\n      charVar1 = bfd_close(bfdFilePtr);\n      if (charVar1 == '\\0') {\n        fileStatsus = 1;\n        bfdNonFatalMessage(pointerVoidVar1,0,0,0);\n      }\n      free(pointerVoidVar1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          removeDir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          removeFile((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        bfdFilePtr = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = bfdFilePtr;\n      }\n      removeDir(tempDirName);\n      free(tempDirName);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    bfdNonFatalMessage(outputFileName,0,0,0);\n    fileStatsus = 1;\n    return;\n  }\n  charVar1 = bfdCheckFormat_matches(bfdFilePtr,1,local_c8);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfdCheckFormat_matches(bfdFilePtr,3,&local_158);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      bfdNonFatalMessage(inputFileName,0,0,0);\n      if (intVar2 == 0xd) {\n        list_matching_formats(local_c8[0]);\n      }\n      if (intVar1 != 0xd) {\n        fileStatsus = 1;\n        return;\n      }\n      list_matching_formats(local_158.st_dev);\n      fileStatsus = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(local_c8[0]);\n    }\n  }\n  if (tempFileName == 0) {\n    tempFileName = *(long *)bfdFilePtr[1];\n  }\n  if (fileDescriptor < 0) {\n    tempDir = bfd_openw(outputFileName,tempFileName);\n  }\n  else {\n    tempDir = bfd_fdopenw(outputFileName,tempFileName,fileDescriptor);\n  }\n  if (tempDir == 0) goto LAB_00105231;\n  setLongSectionMode(tempDir,bfdFilePtr,long_section_names);\n  charVar1 = copyObject(bfdFilePtr,tempDir,copyFlags);\n  if (charVar1 == '\\0') {\n    fileStatsus = 1;\n  }\n  else if (fileStatsus == 0) {\n    charVar1 = bfd_close(tempDir);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfdCloseAllDone(tempDir);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    fileStatsus = 1;\n    bfdNonFatalMessage(outputFileName,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(bfdFilePtr);\n  if (charVar1 == '\\0') {\n    fileStatsus = 1;\n    bfdNonFatalMessage(inputFileName,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_set_error",
                "bfd_check_format_matches",
                "strerror",
                "list_matching_formats",
                "bfd_openr",
                "close",
                "bfd_stat",
                "fatal",
                "dcgettext",
                "get_file_size",
                "bfd_nonfatal_message",
                "bfd_close_all_done",
                "copy_file.cold",
                "non_fatal",
                "bfd_set_format",
                "free",
                "bfd_get_error",
                "copy_object",
                "bfd_fdopenw",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "__errno_location",
                "set_long_section_mode"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_archive_file_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "push_defined_type_0010b800",
                "param_1": "base_address",
                "param_2": "type_size",
                "param_3": "flag",
                "plVar1": "ptr",
                "uVar2": "result",
                "sVar3": "str_length",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "local_8c": "str_buffer",
                "auStack_8a": "int_arr"
            },
            "code": "\nundefined8 push_defined_type_0010b800(long base_address,int type_size,char flag)\n\n{\n  long *ptr;\n  undefined8 result;\n  size_t str_length;\n  long temp1;\n  long temp2;\n  undefined2 str_buffer;\n  undefined4 int_arr [24];\n  \n  if (type_size - 1U < 8) {\n    temp1 = base_address + 0xb8;\n    if (flag != '\\0') {\n      temp1 = base_address + 0x78;\n    }\n    ptr = (long *)(temp1 + (ulong)(type_size - 1U) * 8);\n    temp1 = *ptr;\n    if (temp1 != 0) {\n      result = stab_push_defined_type_0010b800(base_address,temp1,type_size);\n      return result;\n    }\n    temp1 = *(long *)(base_address + 0x68);\n    *(long *)(base_address + 0x68) = temp1 + 1;\n    *ptr = temp1;\n    sprintf((char *)&str_buffer,\"%ld=r%ld;\",temp1,temp1);\n    if (flag == '\\0') {\n      temp2 = 1L << ((char)type_size * '\\b' - 1U & 0x3f);\n      str_length = strlen((char *)&str_buffer);\n      sprintf((char *)((long)&str_buffer + str_length),\"%ld;%ld;\",-temp2,temp2 + -1);\n    }\n    else {\n      str_length = strlen((char *)&str_buffer);\n      *(undefined2 *)((long)&str_buffer + str_length) = 0x3b30;\n      *(undefined *)((long)&str_buffer + str_length + 2) = 0;\n      if (type_size == 8) {\n        *(undefined4 *)((long)&str_buffer + str_length + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&str_buffer + str_length + 2),\"%ld;\",\n                (1L << ((char)type_size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = stab_push_string(base_address,&str_buffer,temp1,1,type_size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    non_fatal(result,type_size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "dcgettext",
                "non_fatal",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "debug_write_type.constprop.0",
                "stab_float_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "reverse_and_improve_00109ed3",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "memoryBlock",
                "param_5": "blockSize",
                "uVar1": "size",
                "uVar2": "newSize",
                "cVar3": "status",
                "pcVar4": "stringValue",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "count",
                "__ptr": "tempPointer",
                "uVar7": "returnValue",
                "uVar8": "flag",
                "lVar9": "remainingSize",
                "uVar10": "currentSize",
                "puVar11": "pointer",
                "bVar12": "byteFlag"
            },
            "code": "\nundefined8 reverseAndImprove_00109ed3(long input1,uint input2,undefined4 input3,long *memoryBlock,ulong *blockSize)\n\n{\n  ulong size;\n  ulong newSize;\n  char status;\n  char *stringValue;\n  size_t stringLength;\n  char *formattedString;\n  long count;\n  void *tempPointer;\n  undefined8 returnValue;\n  undefined flag;\n  long remainingSize;\n  ulong currentSize;\n  undefined *pointer;\n  byte byteFlag;\n  \n  byteFlag = 0;\n  count = *(long *)(input1 + 0x60);\n  if (count != 0) {\n    size = *(ulong *)(count + 0x10);\n    if (((long)size < 1) || (memoryBlock == (long *)0x0)) {\n      flag = *(undefined *)(count + 0x1c);\n      stringValue = (char *)stab_pop_type(input1);\n      stringLength = strlen(stringValue);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)input2,stringValue);\n      free(stringValue);\n      count = 0;\n    }\n    else {\n      currentSize = *blockSize;\n      if (currentSize <= size) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= size; currentSize = currentSize * 2) {\n        }\n        count = xrealloc(*memoryBlock,currentSize * 8);\n        newSize = *blockSize;\n        *memoryBlock = count;\n        pointer = (undefined *)(count + newSize * 8);\n        for (remainingSize = (currentSize - newSize) * 8; remainingSize != 0; remainingSize = remainingSize + -1) {\n          *pointer = 0;\n          pointer = pointer + (ulong)byteFlag * -2 + 1;\n        }\n        *blockSize = currentSize;\n      }\n      count = *(long *)(*memoryBlock + size * 8);\n      if ((count != 0) && (*(char *)(*(long *)(input1 + 0x60) + 0x1c) == '\\0')) {\n        tempPointer = (void *)stab_pop_type(input1);\n        free(tempPointer);\n        returnValue = stab_push_defined_type(input1,count,input3);\n        return returnValue;\n      }\n      count = *(long *)(input1 + 0x68);\n      *(long *)(input1 + 0x68) = count + 1;\n      stringValue = (char *)stab_pop_type(input1);\n      stringLength = strlen(stringValue);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",count,(ulong)input2,stringValue);\n      free(stringValue);\n      flag = 1;\n      *(long *)(*memoryBlock + size * 8) = count;\n    }\n    status = stab_push_string(input1,formattedString,count,flag,input3);\n    if (status != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "xrealloc",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_volatile_type.lto_priv.0",
                "stab_const_type.lto_priv.0",
                "stab_pointer_type.lto_priv.0",
                "stab_reference_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_00109ed3"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_data_0010bbd3",
                "param_1": "debugData",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "counter",
                "puVar5": "ptr4",
                "pcVar6": "emptyString",
                "bVar7": "zeroByte",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugData_0010bbd3(long *debugData,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long counter;\n  undefined4 *ptr4;\n  char *emptyString;\n  byte zeroByte;\n  undefined returnValue [16];\n  \n  zeroByte = 0;\n  emptyString = \"\";\n  if (filename != (char *)0x0) {\n    emptyString = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr4 = ptr2;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)zeroByte * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = emptyString;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugData[2] = (long)ptr2;\n  ptr4 = ptr3;\n  for (counter = 6; counter != 0; counter = counter + -1) {\n    *ptr4 = 0;\n    ptr4 = ptr4 + (ulong)zeroByte * -2 + 1;\n  }\n  ptr = (undefined8 *)debugData[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr == (undefined8 *)0x0) {\n    if (*debugData != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugData = (long)ptr3;\n  }\n  else {\n    *ptr = ptr3;\n  }\n  debugData[1] = (long)ptr3;\n  debugData[5] = 0;\n  *(undefined (*) [16])(debugData + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_data_0010bbd3"
        },
        "FUN_00104410": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_00104410"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    bfd_nonfatal_message(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    non_fatal(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((do_debug_sections != 1) && ((do_debug_sections & 1) != 0)) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (do_elf_stt_common != 0) {\n      uVar18 = bfd_get_archive_filename(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    if (verbose != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (extract_symbol == '\\0') {\n    if (set_start_set == '\\0') {\n      lVar35 = change_start + param_1[0x17];\n    }\n    else {\n      lVar35 = change_start + set_start;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~bfd_flags_to_clear & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)param_1 + 0x44));\n  if (strip_symbols == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_file_format_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_2 + 8),&DAT_0011b503),\n     cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_1[1],&DAT_0011b503),\n       cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = preserve_dates == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar35 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar35 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar35 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar35 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar35 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,osympp);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,setup_section,param_2);\n  puVar30 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = add_sections,\n     cVar11 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0,param_1,0);\n    puVar30 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30)\n  {\n    uVar28 = 0x128;\n    lVar35 = find_section_list(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = check_new_section_flags(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = find_section_list(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      bfd_nonfatal_message(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = gnu_debuglink_filename;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = isympp;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = improve_and_readability_0010554f();\n    return uVar26;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &names_0;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)start_stab_constprop_0(param_1,1,plVar6),\n               pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = parse_stab(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = finish_stab(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = start_stab_constprop_0(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          save_stab(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = parse_stab(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar35 != 0) && (cVar11 = finish_stab(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = debug_set_filename(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = debug_set_filename(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = parse_coff_symbol_constprop_0_isra_0(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = debug_start_block(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_coff_type_lto_priv_0\n                                     (param_1,&plStack_148,&pcStack_c8,lVar16,\n                                      uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38),\n                                      puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = debug_record_function(puStack_1e8), cVar11 == '\\0')\n                     ) goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = debug_record_line(puStack_1e8,iVar13 + iVar32,\n                                                 *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = debug_end_function(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = isympp + uStack_1f8;\n        plVar15 = isympp;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = add_sym_list;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = create_new_symbol(puVar30);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(redefine_specific_htab);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = section_rename_list, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0'))\n            {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = prefix_symbols_string;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = prefix_symbols_string;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = is_specified_symbol(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 == 0 ||\n                      (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar11 = is_specified_symbol(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar30 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = create_new_symbol(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = convert_debugging == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,mark_symbols_used_in_relocations,isympp);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(strip_specific_htab);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(keep_specific_htab), lVar35 != 0 ||\n              (lVar35 = htab_elements(localize_specific_htab), lVar35 != 0)) ||\n             (lVar35 = htab_elements(globalize_specific_htab), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(keepglobal_specific_htab), lVar35 != 0 ||\n             (lVar35 = htab_elements(weaken_specific_htab), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(redefine_specific_htab), lVar35 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,osympp,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,copy_relocations_in_section,param_2);\n    bfd_map_over_sections(param_1,copy_section,param_2);\n    for (puVar30 = add_sections; puVar38 = update_sections, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        bfd_nonfatal_message(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = startswith_lto_priv_0_lto_priv_0(*puVar30,\".gnu.build.attributes\"),\n            cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          bfd_nonfatal_message(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190),\n       lVar35 = gnu_debuglink_filename, cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = startswith_lto_priv_0_lto_priv_0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = dump_sections;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext",
                "FUN_00107976",
                "bfd_set_format",
                "bfd_nonfatal_message",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "copy_file",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00104650": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUN_00104650"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_symmetry_00115d00",
                "param_1": "inputParam",
                "param_2": "binaryParam",
                "uVar1": "uintVar",
                "lVar2": "result",
                "isympp": "symmetryPtr"
            },
            "code": "\nlong findSymmetry_00115d00(long inputParam,long binaryParam)\n\n{\n  uint uintVar;\n  long result;\n  \n  result = symmetryPtr;\n  if (symmetryPtr != 0) {\n    if (*(int *)(*(long *)(binaryParam + 8) + 8) == 5) {\n      if (*(int *)(inputParam + 0x28) == *(int *)(*(long *)(binaryParam + 0x110) + 0xd40)) {\n        uintVar = *(uint *)(inputParam + 0x2c);\n        if (uintVar == 0) {\n          result = 0;\n        }\n        else if ((ulong)uintVar <\n                 *(ulong *)(*(long *)(binaryParam + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryParam + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(symmetryPtr + (ulong)(uintVar - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "group_signature.isra.0.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_symmetry_00115d00"
        },
        "FUN_00104530": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104530"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "allocate_memory_and_initialize_00113c43",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_memory_and_initialize_00113c43(long input_1,long input_2,long input_3,long input_4,undefined input_5,\n            undefined8 input_6)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if ((input_1 != 0) && (input_2 != 0)) {\n    result = debug_make_type_constprop_0(0x10,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocated_memory + 0x21) = 0;\n      *allocated_memory = input_1;\n      *(undefined4 *)((long)allocated_memory + 0x24) = 0;\n      allocated_memory[1] = input_2;\n      allocated_memory[2] = input_3;\n      allocated_memory[3] = input_4;\n      *(undefined *)(allocated_memory + 4) = input_5;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113caa;\n    }\n  }\n  result = 0;\nLAB_00113caa:\n  return_value._8_8_ = input_6;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "allocate_memory_and_initialize_00113c43"
        },
        "FUN_00104890": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "main",
                "set_times.cold",
                "get_file_size.cold",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "display_info.isra.0",
                "section_add_load_file.cold",
                "smart_rename.cold",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104890"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "record_debug_info_00112a33",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "uVar1": "returnValue",
                "lVar2": "typeValue",
                "plVar3": "slotPointer"
            },
            "code": "\nbool recordDebugInfo_00112a33(undefined8 param1,long param2,undefined8 param3,byte param4,undefined8 param5\n                 ,undefined8 param6,uint param7)\n\n{\n  undefined returnValue;\n  long typeValue;\n  long *slotPointer;\n  \n  if (param4 < 0x12) {\n    if (param4 != 0) {\n      switch(param4) {\n      case 1:\n        returnValue = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,4,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        returnValue = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,(param7 & 0xff) + 2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 4:\n        returnValue = debug_record_variable\n                          (param5,*(undefined8 *)(param2 + 8),param6,5,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 9:\n        returnValue = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,1,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      case 10:\n      case 0xc:\n      case 0xf:\n        typeValue = debug_tag_type(param5,*(undefined8 *)(param2 + 8));\n        if (typeValue == 0) {\n          return false;\n        }\n        slotPointer = (long *)coff_get_slot_lto_priv_0(param1,param3);\n        *slotPointer = typeValue;\n        break;\n      case 0xd:\n        typeValue = debug_name_type(param5,*(undefined8 *)(param2 + 8));\n        return typeValue != 0;\n      case 0x11:\n        returnValue = debug_record_parameter\n                          (param5,*(undefined8 *)(param2 + 8),param6,2,\n                           *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n        return (bool)returnValue;\n      }\n    }\n  }\n  else if (param4 == 0x7f) {\nswitchD_00112a73_caseD_2:\n    returnValue = debug_record_variable\n                      (param5,*(undefined8 *)(param2 + 8),param6,1,\n                       *(long *)(param2 + 0x10) + *(long *)(*(long *)(param2 + 0x20) + 0x30));\n    return (bool)returnValue;\n  }\n  return true;\n}\n\n",
            "called": [
                "debug_name_type",
                "debug_tag_type",
                "coff_get_slot.lto_priv.0",
                "debug_record_variable",
                "debug_record_parameter"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_debug_info_00112a33"
        },
        "FUN_00104770": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "report",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104770"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_type_info_0010c2d2",
                "uVar1": "typeIndex",
                "pcVar2": "typeString",
                "uVar3": "typeInfo",
                "lVar4": "result",
                "plVar5": "stabPtr",
                "uVar6": "absTypeIndex"
            },
            "code": "\n\n\nlong getTypeInfo_0010c2d2(undefined8 param_1,long param_2,int *param_3)\n\n{\n  uint typeIndex;\n  char *typeString;\n  undefined8 typeInfo;\n  long result;\n  long *stabPtr;\n  uint absTypeIndex;\n  \n  if ((*param_3 == 0) && (typeIndex = param_3[1], (int)typeIndex < 0)) {\n    absTypeIndex = ~typeIndex;\n    if (absTypeIndex < 0x22) {\n      result = *(long *)(param_2 + 0x90 + (ulong)absTypeIndex * 8);\n      if (result == 0) {\n        switch(absTypeIndex) {\n        case 1:\n          typeInfo = debug_make_int_type_isra_0(1,0);\n          typeString = \"char\";\n          break;\n        case 2:\n          typeInfo = debug_make_int_type_isra_0(2,0);\n          typeString = \"short\";\n          break;\n        case 3:\n          typeInfo = debug_make_int_type_isra_0(4,0);\n          typeString = \"long\";\n          break;\n        case 4:\n          typeInfo = debug_make_int_type_isra_0(1,1);\n          typeString = \"unsigned char\";\n          break;\n        case 5:\n          typeInfo = debug_make_int_type_isra_0(1,0);\n          typeString = \"signed char\";\n          break;\n        case 6:\n          typeInfo = debug_make_int_type_isra_0(2,1);\n          typeString = \"unsigned short\";\n          break;\n        case 7:\n          typeInfo = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned int\";\n          break;\n        case 8:\n          typeInfo = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned\";\n          break;\n        case 9:\n          typeInfo = debug_make_int_type_isra_0(4,1);\n          typeString = \"unsigned long\";\n          break;\n        case 10:\n          typeInfo = debug_make_void_type_isra_0();\n          typeString = \"void\";\n          break;\n        case 0xb:\n          typeInfo = debug_make_float_type_isra_0(4);\n          typeString = \"float\";\n          break;\n        case 0xc:\n          typeInfo = debug_make_float_type_isra_0(8);\n          typeString = \"double\";\n          break;\n        case 0xd:\n          typeInfo = debug_make_float_type_isra_0(8);\n          typeString = \"long double\";\n          break;\n        case 0xe:\n          typeInfo = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer\";\n          break;\n        case 0xf:\n          typeInfo = debug_make_type_constprop_0(6,4);\n          typeString = \"boolean\";\n          break;\n        case 0x10:\n          typeInfo = debug_make_float_type_isra_0(4);\n          typeString = \"short real\";\n          break;\n        case 0x11:\n          typeInfo = debug_make_float_type_isra_0(8);\n          typeString = \"real\";\n          break;\n        case 0x12:\n          typeString = \"stringptr\";\n          typeInfo = 0;\n          break;\n        case 0x13:\n          typeInfo = debug_make_int_type_isra_0(1,1);\n          typeString = \"character\";\n          break;\n        case 0x14:\n          typeInfo = debug_make_type_constprop_0(6,1);\n          typeString = \"logical*1\";\n          break;\n        case 0x15:\n          typeInfo = debug_make_type_constprop_0(6,2);\n          typeString = \"logical*2\";\n          break;\n        case 0x16:\n          typeInfo = debug_make_type_constprop_0(6,4);\n          typeString = \"logical*4\";\n          break;\n        case 0x17:\n          typeInfo = debug_make_type_constprop_0(6,4);\n          typeString = \"logical\";\n          break;\n        case 0x18:\n          typeInfo = debug_make_type_constprop_0(5,8);\n          typeString = \"complex\";\n          break;\n        case 0x19:\n          typeInfo = debug_make_type_constprop_0(5,0x10);\n          typeString = \"double complex\";\n          break;\n        case 0x1a:\n          typeInfo = debug_make_int_type_isra_0(1,0);\n          typeString = \"integer*1\";\n          break;\n        case 0x1b:\n          typeInfo = debug_make_int_type_isra_0(2,0);\n          typeString = \"integer*2\";\n          break;\n        case 0x1c:\n          typeInfo = debug_make_int_type_isra_0(4,0);\n          typeString = \"integer*4\";\n          break;\n        case 0x1d:\n          typeInfo = debug_make_int_type_isra_0(2,0);\n          typeString = \"wchar\";\n          break;\n        case 0x1e:\n          typeInfo = debug_make_int_type_isra_0(8,0);\n          typeString = \"long long\";\n          break;\n        case 0x1f:\n          typeInfo = debug_make_int_type_isra_0(8,1);\n          typeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          typeInfo = debug_make_type_constprop_0(6,8);\n          typeString = \"logical*8\";\n          break;\n        case 0x21:\n          typeInfo = debug_make_int_type_isra_0(8,0);\n          typeString = \"integer*8\";\n          break;\n        default:\n          typeInfo = debug_make_int_type_isra_0(4,0);\n          typeString = \"int\";\n        }\n        result = debug_name_type(param_1,typeString,typeInfo);\n        *(long *)(param_2 + 0x90 + (ulong)absTypeIndex * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    typeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,typeString,(ulong)typeIndex);\n  }\n  else {\n    stabPtr = (long *)stab_find_slot(param_2);\n    if (stabPtr != (long *)0x0) {\n      if (*stabPtr == 0) {\n        result = debug_make_indirect_type_isra_0(stabPtr,0);\n        return result;\n      }\n      return *stabPtr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "dcgettext",
                "debug_make_indirect_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_type.constprop.0",
                "stab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "get_type_info_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "parse_coff_symbols_0010e07c",
                "param_1": "file_handle",
                "param_2": "symbol_table",
                "param_3": "type_table",
                "param_4": "pointer_size",
                "param_5": "coff_header",
                "param_6": "memory_manager",
                "lVar1": "coff_section_header",
                "lVar2": "symbol_address",
                "lVar3": "symbol_count",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "symbol_data",
                "uVar6": "symbol_value",
                "uVar7": "type_value",
                "puVar8": "new_symbol",
                "pcVar9": "error_message",
                "puVar10": "aux_data",
                "uVar11": "size",
                "lVar12": "symbol_index",
                "iVar13": "offset",
                "iVar14": "symbol_capacity",
                "local_a8": "symbol_value_gp",
                "uStack_a4": "symbol_value_gp_upper",
                "uStack_a0": "type_index",
                "uStack_9c": "type_index_gp",
                "local_88": "symbol_name",
                "local_6a": "symbol_attributes",
                "local_68": "symbol_type",
                "local_67": "symbol_aux_valid",
                "local_60": "symbol_aux_data",
                "local_56": "symbol_misc"
            },
            "code": "\nundefined8\nparse_coff_symbols_0010e07c(undefined8 file_handle,long *symbol_table,undefined8 type_table,int pointer_size,long coff_header,\n            undefined8 memory_manager)\n\n{\n  long coff_section_header;\n  long symbol_address;\n  long symbol_count;\n  char result;\n  undefined4 error_code;\n  void *symbol_data;\n  undefined8 symbol_value;\n  undefined8 type_value;\n  undefined4 *new_symbol;\n  char *error_message;\n  undefined *aux_data;\n  uint size;\n  long symbol_index;\n  int offset;\n  int symbol_capacity;\n  undefined4 symbol_value_gp;\n  undefined4 symbol_value_gp_upper;\n  undefined4 type_index;\n  undefined4 type_index_gp;\n  undefined symbol_name [30];\n  undefined2 symbol_attributes;\n  byte symbol_type;\n  byte symbol_aux_valid;\n  undefined symbol_aux_data [10];\n  ushort symbol_misc;\n  \n  symbol_capacity = 10;\n  symbol_index = 0;\n  coff_section_header = *(long *)(coff_header + 0x18);\n  symbol_data = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < coff_section_header && (symbol_table[2] < symbol_table[1]))) {\n    symbol_address = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(file_handle,symbol_address,symbol_name);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      symbol_value = bfd_errmsg(error_code);\n      error_message = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      type_value = dcgettext(0,error_message,5);\n      non_fatal(type_value,symbol_value);\n      free(symbol_data);\n      return 0;\n    }\n    symbol_count = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_count + 1 + (ulong)symbol_aux_valid;\n    if (symbol_aux_valid != 0) {\n      aux_data = symbol_aux_data;\n      result = bfd_coff_get_auxent(file_handle,symbol_address,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        symbol_value = bfd_errmsg(error_code);\n        error_message = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbol_type == 0x12) {\n      size = (uint)symbol_misc;\n      offset = (int)*(undefined8 *)(symbol_address + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30);\n    }\n    else {\n      if (symbol_type < 0x13) {\n        if ((symbol_type == 8) || (symbol_type == 0xb)) {\n          size = 0;\n          offset = ((int)*(undefined8 *)(symbol_address + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_address + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbol_type == 0x66) break;\n      size = 0;\n      offset = 0;\n    }\nLAB_0010e214:\n    type_value = parse_coff_type_lto_priv_0(file_handle,symbol_table,type_table,symbol_count,symbol_attributes,aux_data,1);\n    symbol_value = *(undefined8 *)(symbol_address + 8);\n    new_symbol = (undefined4 *)xmalloc(0x20);\n    symbol_value_gp = (undefined4)symbol_value;\n    symbol_value_gp_upper = (undefined4)((ulong)symbol_value >> 0x20);\n    type_index = (undefined4)type_value;\n    type_index_gp = (undefined4)((ulong)type_value >> 0x20);\n    *(undefined8 *)(new_symbol + 5) = 0;\n    new_symbol[6] = offset;\n    new_symbol[7] = size;\n    new_symbol[4] = 0;\n    *new_symbol = symbol_value_gp;\n    new_symbol[1] = symbol_value_gp_upper;\n    new_symbol[2] = type_index;\n    new_symbol[3] = type_index_gp;\n    if (symbol_capacity <= (int)symbol_index + 1) {\n      symbol_capacity = symbol_capacity + 10;\n      symbol_data = (void *)xrealloc(symbol_data,(long)symbol_capacity << 3,new_symbol,0,memory_manager);\n    }\n    *(undefined4 **)((long)symbol_data + symbol_index * 8) = new_symbol;\n    symbol_index = symbol_index + 1;\n  }\n  *(undefined8 *)((long)symbol_data + (long)(int)symbol_index * 8) = 0;\n  symbol_value = debug_make_struct_type_isra_0(pointer_size == 8,*(undefined2 *)(coff_header + 10),symbol_data);\n  return symbol_value;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_coff_get_auxent",
                "parse_coff_type.lto_priv.0",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc",
                "free",
                "debug_make_struct_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "parse_coff_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "parse_coff_symbols_0010e07c"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_default_value_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getDefaultValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "group_signature.isra.0"
            ],
            "imported": false,
            "current_name": "get_default_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "process_file_input_00114460",
                "param_1": "inputFileName",
                "param_2": "hashTable",
                "param_3": "outputData",
                "iVar1": "lineCount",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorString",
                "uVar4": "translatedString",
                "__n": "fileSize",
                "__ptr": "fileBuffer",
                "__stream": "fileStream",
                "sVar5": "bytesRead",
                "ppbVar6": "hashSlot",
                "pbVar7": "currentChar",
                "bVar8": "currentByte",
                "pbVar9": "nextByte",
                "pbVar10": "currentPos",
                "pbVar11": "lineStart",
                "pbVar12": "lineEnd"
            },
            "code": "\nvoid processFileInput_00114460(char *inputFileName,undefined8 hashTable,byte **outputData)\n\n{\n  int lineCount;\n  int *errorCodePtr;\n  char *errorString;\n  undefined8 translatedString;\n  size_t fileSize;\n  byte *fileBuffer;\n  FILE *fileStream;\n  size_t bytesRead;\n  byte **hashSlot;\n  byte *currentChar;\n  byte currentByte;\n  byte *nextByte;\n  byte *currentPos;\n  byte *lineStart;\n  byte *lineEnd;\n  \n  fileSize = get_file_size();\n  if (fileSize == 0) {\n    status = 1;\n  }\n  else {\n    fileBuffer = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(inputFileName,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errorCodePtr = __errno_location();\n      errorString = strerror(*errorCodePtr);\n      translatedString = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      fatal(translatedString,inputFileName,errorString);\n    }\n    bytesRead = fread(fileBuffer,1,fileSize,fileStream);\n    if ((bytesRead == 0) || (lineCount = ferror(fileStream), lineCount != 0)) {\n      translatedString = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(translatedString,inputFileName);\n    }\n    lineCount = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileBuffer + fileSize) = 10;\n    currentByte = *fileBuffer;\n    lineEnd = fileBuffer;\n    while (currentPos = lineEnd, currentByte != 0) {\n      for (; currentByte = *currentPos, lineStart = currentPos, currentByte != 10; currentPos = currentPos + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextByte = currentPos + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *currentPos = 0;\n            nextByte = currentPos + 1;\n            if (currentPos[1] == 10) {\n              nextByte = currentPos + 2;\n              lineStart = currentPos + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentPos = 0;\n      if (currentPos[1] == 0xd) {\n        lineStart = currentPos + 1;\n        nextByte = currentPos + 2;\n      }\n      else {\n        nextByte = currentPos + 1;\n      }\nLAB_00114553:\n      currentByte = *lineEnd;\n      while ((currentByte == 0x20 || (currentPos = lineEnd, currentByte == 9))) {\n        currentPos = lineEnd + 1;\n        lineEnd = lineEnd + 1;\n        currentByte = *currentPos;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = currentPos[1];\n        currentPos = currentPos + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = currentPos[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = currentPos[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = currentPos[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = currentPos[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = currentPos[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = currentPos[6];\n          currentChar = currentPos + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentChar[1];\n                currentChar = currentChar + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedString = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          non_fatal(translatedString,inputFileName,lineCount);\n        }\n      }\nLAB_00114599:\n      *currentPos = 0;\n      if (lineEnd < currentPos) {\n        hashSlot = (byte **)htab_find_slot(hashTable,lineEnd,1);\n        *hashSlot = lineEnd;\n      }\n      lineCount = lineCount + 1;\n      lineEnd = nextByte;\n      currentByte = lineStart[1];\n    }\n    *outputData = fileBuffer;\n  }\n  return;\n}\n\n",
            "called": [
                "strerror",
                "fclose",
                "dcgettext",
                "ferror",
                "get_file_size",
                "fread",
                "xmalloc",
                "fopen",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "process_file_input_00114460"
        },
        "FUN_001280f8": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001280f8",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_001280f8"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "process_data_0010a94e",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "flag",
                "cVar1": "flagChar",
                "lVar2": "dataPtr",
                "__s": "type",
                "sVar3": "len1",
                "sVar4": "len2",
                "sVar5": "len3",
                "sVar6": "len4",
                "pcVar7": "result",
                "uVar8": "returnValue",
                "pcVar9": "extraInfo"
            },
            "code": "\nundefined8 processData_0010a94e(long data,char *string1,char *string2,int flag)\n\n{\n  char flagChar;\n  long dataPtr;\n  char *type;\n  size_t len1;\n  size_t len2;\n  size_t len3;\n  size_t len4;\n  char *result;\n  undefined8 returnValue;\n  char *extraInfo;\n  \n  flagChar = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  type = (char *)stab_pop_type();\n  result = *(char **)(*(long *)(data + 0x60) + 0x20);\n  if (result == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    len1 = strlen(result);\n    len2 = strlen(string1);\n    len3 = strlen(type);\n    len4 = strlen(string2);\n    result = (char *)xmalloc(len1 + 10 + len2 + len3 + len4);\n    if (flag == 1) {\n      extraInfo = \"/1\";\n    }\n    else {\n      extraInfo = \"/0\";\n      if ((flag != 2) && (extraInfo = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(result,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(data + 0x60) + 0x20),string1,extraInfo,\n            type,string2,*(long *)(data + 0x60));\n    free(*(void **)(*(long *)(data + 0x60) + 0x20));\n    dataPtr = *(long *)(data + 0x60);\n    *(char **)(dataPtr + 0x20) = result;\n    if (flagChar != '\\0') {\n      *(undefined *)(dataPtr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a94e"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_real_type_data_00113b1e",
                "param_1": "input_address",
                "param_2": "unknown_param",
                "param_3": "output_value",
                "param_4": "unknown_value",
                "auVar1": "output_data",
                "piVar2": "type_info",
                "uVar3": "real_type_info",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] extract_real_type_data_00113b1e(long input_address,undefined8 unknown_param,ulong output_value,undefined8 unknown_value)\n\n{\n  undefined output_data [16];\n  int *type_info;\n  undefined8 real_type_info;\n  undefined result [16];\n  \n  if (input_address != 0) {\n    type_info = (int *)debug_get_real_type_isra_0(input_address,0);\n    if ((type_info == (int *)0x0) || (3 < *type_info - 7U)) {\n      real_type_info = 0;\n    }\n    else {\n      real_type_info = **(undefined8 **)(type_info + 4);\n    }\n    result._8_8_ = unknown_value;\n    result._0_8_ = real_type_info;\n    return result;\n  }\n  output_data._8_8_ = 0;\n  output_data._0_8_ = output_value;\n  return output_data << 0x40;\n}\n\n",
            "called": [
                "debug_get_real_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_qualified"
            ],
            "imported": false,
            "current_name": "extract_real_type_data_00113b1e"
        },
        "FUN_00104300": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "debug_write_type.constprop.0",
                "debug_set_filename",
                "debug_set_class_id.lto_priv.0",
                "bfd_get_archive_filename"
            ],
            "imported": false,
            "current_name": "FUN_00104300"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "generate_stab_string_0010a0e9",
                "param_1": "inputPointer",
                "param_2": "value1",
                "param_3": "value2",
                "__s": "str",
                "sVar3": "strLength",
                "__s_00": "modifiedStr",
                "uVar1": "firstByte",
                "uVar2": "returnValue"
            },
            "code": "\nundefined4 generateStabString_0010a0e9(long inputPointer,undefined8 value1,undefined8 value2)\n\n{\n  undefined firstByte;\n  undefined4 returnValue;\n  char *str;\n  size_t strLength;\n  char *modifiedStr;\n  \n  firstByte = *(undefined *)(*(long *)(inputPointer + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(inputPointer + 0x60) + 0x18);\n  str = (char *)stab_pop_type();\n  strLength = strlen(str);\n  modifiedStr = (char *)xmalloc(strLength + 100);\n  sprintf(modifiedStr,\"r%s;%ld;%ld;\",str,value1,value2);\n  free(str);\n  returnValue = stab_push_string(inputPointer,modifiedStr,0,firstByte,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(modifiedStr);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "generate_stab_string_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "remove_unused_sections_00114c20",
                "param_1": "binaryAddress",
                "pcVar2": "pointerToChar",
                "sections_removed": "numSectionsRemoved"
            },
            "code": "\nvoid removeUnusedSections_00114c20(long binaryAddress)\n\n{\n  char cVar1;\n  char *pointerToChar;\n  \n  find_section_list(binaryAddress,1,1);\n  cVar1 = startswith_lto_priv_0_lto_priv_0(binaryAddress,&DAT_0011b499);\n  if (cVar1 != '\\0') {\n    pointerToChar = (char *)(binaryAddress + 5);\n    if (*(char *)(binaryAddress + 4) != 'a') {\n      pointerToChar = (char *)(binaryAddress + 4);\n    }\n    if (*pointerToChar != '\\0') {\n      find_section_list(pointerToChar,1,0x100);\n    }\n  }\n  numSectionsRemoved = 1;\n  return;\n}\n\n",
            "called": [
                "startswith.lto_priv.0.lto_priv.0",
                "find_section_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "remove_unused_sections_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_update_sections_00115f50",
                "param_1": "status",
                "param_2": "sections",
                "param_3": "should_merge",
                "__s1": "section",
                "uVar1": "comparison_result",
                "uVar2": "temp_var",
                "extraout_EDX": "extra_var",
                "plVar3": "current_section",
                "auVar4": "section_info"
            },
            "code": "\nuint check_update_sections_00115f50(long status,char **sections,char should_merge)\n\n{\n  char *section;\n  uint comparison_result;\n  undefined4 temp_var;\n  undefined4 extra_var;\n  long *current_section;\n  undefined section_info [12];\n  \n  if ((status != 0) || (extract_symbol != '\\0')) {\n    return 1;\n  }\n  section_info = is_strip_section_isra_0(sections);\n  if (section_info[0] == '\\0') {\n    if (update_sections != (long *)0x0) {\n      section = *sections;\n      current_section = update_sections;\n      do {\n        comparison_result = strcmp(section,(char *)current_section[1]);\n        section_info._4_4_ = 0;\n        section_info._0_4_ = comparison_result;\n        section_info._8_4_ = extra_var;\n        if (comparison_result == 0) {\n          return 1;\n        }\n        current_section = (long *)*current_section;\n      } while (current_section != (long *)0x0);\n    }\n    temp_var = section_info._8_4_;\n    if (((((should_merge == '\\0') || (merge_notes == '\\0')) ||\n         (section_info._8_4_ = temp_var, section_info._0_8_ = *(long *)(status + 8),\n         *(int *)(*(long *)(status + 8) + 8) != 5)) ||\n        ((section_info._0_8_ = (ulong)sections[0x1a], *(int *)(sections[0x1a] + 4) != 7 ||\n         (section_info = startswith_lto_priv_0_lto_priv_0(*sections,\".gnu.build.attributes\"),\n         section_info[0] == '\\0')))) && ((*(byte *)((long)sections + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(section_info._1_7_,sections[8] == (char *)0x0) |\n             CONCAT31(section_info._9_3_,sections[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section.isra.0",
                "startswith.lto_priv.0.lto_priv.0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "copy_relocations_in_section",
                "copy_section"
            ],
            "imported": false,
            "current_name": "check_update_sections_00115f50"
        },
        "FUN_00104540": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "main",
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104540"
        },
        "FUN_00104420": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_00116852",
                "compare_gnu_build_notes"
            ],
            "imported": false,
            "current_name": "FUN_00104420"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "handle_section_byte_reversal_001083de",
                "unaff_RBX": "sectionPointer",
                "unaff_EBP": "length",
                "uVar1": "sectionValue",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionByteReversal_001083de(void)\n\n{\n  undefined8 sectionValue;\n  undefined8 errorMessage;\n  undefined8 *sectionPointer;\n  undefined4 length;\n  \n  sectionValue = *sectionPointer;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  fatal(errorMessage,sectionValue,length);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "copy_section"
            ],
            "imported": false,
            "current_name": "handle_section_byte_reversal_001083de"
        },
        "FUN_00104780": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_00104780"
        },
        "FUN_00104660": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104660"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "lVar1": "ptrToData",
                "cVar2": "isIntegerType",
                "__ptr": "poppedType",
                "uVar3": "ulongDataSize",
                "uVar4": "reducedDataSize",
                "local_5a": "formattedString"
            },
            "code": "\nvoid processData_0010b948(long dataAddress,uint dataSize)\n\n{\n  long ptrToData;\n  char isIntegerType;\n  void *poppedType;\n  ulong ulongDataSize;\n  uint reducedDataSize;\n  char formattedString [50];\n  \n  reducedDataSize = dataSize - 1;\n  ulongDataSize = (ulong)dataSize;\n  if ((reducedDataSize < 0x10) && (ptrToData = *(long *)(dataAddress + 0xf8 + (ulong)reducedDataSize * 8), ptrToData != 0)) {\n    stab_push_defined_type(dataAddress,ptrToData,ulongDataSize);\n    return;\n  }\n  isIntegerType = stab_int_type_lto_priv_0(dataAddress,4,0);\n  if (isIntegerType != '\\0') {\n    poppedType = (void *)stab_pop_type(dataAddress);\n    ptrToData = *(long *)(dataAddress + 0x68);\n    *(long *)(dataAddress + 0x68) = ptrToData + 1;\n    if (reducedDataSize < 0x10) {\n      *(long *)(dataAddress + 0xf8 + (ulong)reducedDataSize * 8) = ptrToData;\n    }\n    sprintf(formattedString,\"%ld=r%s;%u;0;\",ptrToData,poppedType,ulongDataSize);\n    free(poppedType);\n    stab_push_string(dataAddress,formattedString,ptrToData,1,ulongDataSize);\n  }\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type",
                "stab_int_type.lto_priv.0",
                "free",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "check_real_type_circular_debug_information_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info_array",
                "iVar1": "array_length",
                "uVar2": "type_name",
                "__format": "format_string",
                "piVar3": "result_array",
                "plVar4": "debug_info",
                "bVar5": "is_circular",
                "local_18": "debug_info_array_tmp",
                "local_10": "input_array_tmp"
            },
            "code": "\n\n\nint * check_real_type_circular_debug_information_00112b6e(int *input_array,long *debug_info_array)\n\n{\n  int array_length;\n  undefined8 type_name;\n  char *format_string;\n  int *result_array;\n  long *debug_info;\n  bool is_circular;\n  long *debug_info_array_tmp;\n  int *input_array_tmp;\n  \n  array_length = *input_array;\n  if ((array_length != 1) && (1 < array_length - 0x16U)) {\n    return input_array;\n  }\n  debug_info = debug_info_array;\n  while (debug_info != (long *)0x0) {\n    if ((input_array == (int *)debug_info[1]) ||\n       (is_circular = debug_info == (long *)*debug_info, debug_info = (long *)*debug_info, is_circular)) {\n      type_name = debug_get_type_name_constprop_0\n                        (input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      format_string = (char *)dcgettext(0);\n      fprintf(_stderr,format_string,type_name);\n      return (int *)0x0;\n    }\n  }\n  debug_info_array_tmp = debug_info_array;\n  input_array_tmp = input_array;\n  if (array_length - 0x16U < 2) {\n    result_array = (int *)check_real_type_circular_debug_information_00112b6e((*(undefined8 **)(input_array + 4))[1],&debug_info_array_tmp);\n    return result_array;\n  }\n  result_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array) {\n    return input_array;\n  }\n  if (result_array == (int *)0x0) {\n    return input_array;\n  }\n  result_array = (int *)check_real_type_circular_debug_information_00112b6e(result_array,&debug_info_array_tmp);\n  return result_array;\n}\n\n",
            "called": [
                "fprintf",
                "debug_get_real_type.isra.0",
                "dcgettext",
                "debug_get_type_name.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "debug_get_real_type.isra.0",
                "debug_type_samep",
                "debug_write_type.constprop.0",
                "parse_stab_type",
                "debug_get_fields.isra.0"
            ],
            "imported": false,
            "current_name": "check_real_type_circular_debug_information_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_struct_type_0010a83e",
                "param_1": "inputPtr",
                "param_2": "paramPtr",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "flag1",
                "param_7": "flag2",
                "uVar1": "result",
                "__s": "string1",
                "__s_00": "string2",
                "sVar2": "stringLen",
                "cVar3": "charVar"
            },
            "code": "\nundefined4\nprocessStructType_0010a83e(long inputPtr,undefined8 paramPtr,ulong param3,undefined param4,ulong param5,\n            byte flag1,byte flag2)\n\n{\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t stringLen;\n  char charVar;\n  \n  if (((flag2 ^ 1) & flag1) == 0) {\n    string1 = (char *)0x0;\n    charVar = '\\0';\n  }\n  else {\n    charVar = *(char *)(*(long *)(inputPtr + 0x60) + 0x1c);\n    string1 = (char *)stab_pop_type();\n    param5 = param5 & 0xffffffff;\n    param3 = param3 & 0xffffffff;\n  }\n  result = stab_start_struct_type_lto_priv_0(inputPtr,paramPtr,param3,param4,param5);\n  if ((char)result != '\\0') {\n    if (flag1 == 0) {\n      return result;\n    }\n    if (flag2 == 0) {\n      if (string1 == (char *)0x0) {\n        return 0;\n      }\n      stringLen = strlen(string1);\n      string2 = (char *)xmalloc(stringLen + 3);\n      sprintf(string2,\"~%%%s\",string1);\n      free(string1);\n      if (charVar != '\\0') {\n        *(undefined *)(*(long *)(inputPtr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(inputPtr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string2 = (char *)xmalloc(0x14);\n      sprintf(string2,\"~%%%ld\",*(undefined8 *)(*(long *)(inputPtr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(inputPtr + 0x60) + 0x38) = string2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "xmalloc",
                "stab_start_struct_type.lto_priv.0",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_struct_type_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_and_store_type_object_00113d6e",
                "param_1": "object_1",
                "param_2": "object_2",
                "lVar1": "typeObject",
                "puVar2": "objectArray"
            },
            "code": "\nlong createAndStoreTypeObject_00113d6e(undefined8 object_1,undefined8 object_2)\n\n{\n  long typeObject;\n  undefined8 *objectArray;\n  \n  typeObject = debug_make_type_constprop_0(0xb,0);\n  if (typeObject != 0) {\n    objectArray = (undefined8 *)xmalloc(0x10);\n    *objectArray = object_1;\n    objectArray[1] = object_2;\n    *(undefined8 **)(typeObject + 0x10) = objectArray;\n  }\n  return typeObject;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "create_and_store_type_object_00113d6e"
        },
        "FUN_00104430": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104430"
        },
        "FUN_00104310": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "display_info.isra.0.cold",
                "bfd_nonfatal_message"
            ],
            "imported": false,
            "current_name": "FUN_00104310"
        },
        "FUN_00104670": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "FUN_00104670"
        },
        "FUN_00104550": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_00104550"
        },
        "FUN_00104790": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "main",
                "parse_number"
            ],
            "imported": false,
            "current_name": "FUN_00104790"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "validate_and_execute_function_00114d50",
                "param_1": "ptr_struct_1",
                "param_2": "ptr_struct_2",
                "param_3": "flags"
            },
            "code": "\nvoid validate_and_execute_function_00114d50(long ptr_struct_1,long ptr_struct_2,uint flags)\n\n{\n  if (*(int *)(*(long *)(ptr_struct_1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((flags == 2) && (*(int *)(*(long *)(ptr_struct_2 + 8) + 8) == 2)) {\n    flags = (uint)*(byte *)(*(long *)(*(long *)(ptr_struct_2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(ptr_struct_1 + 8) + 0x380) + 0x78))(ptr_struct_1,flags != 0);\n  return;\n}\n\n",
            "called": [
                "set_long_section_mode.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "validate_and_execute_function_00114d50"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "errorCode",
                "uVar1": "programName",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int errorCode)\n\n{\n  undefined8 programName;\n  char *message;\n  \n  programName = program_name;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,programName);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  list_supported_targets(program_name,outputFile);\n  if (errorCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "list_supported_targets",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorType",
                "param_2": "errorCode",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "param_6": "arg6",
                "param_7": "arg7",
                "param_8": "arg8",
                "param_9": "archiveFilename",
                "param_10": "archiveHandle",
                "param_11": "errorFlag",
                "param_12": "errorMessageFormat",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "someFlag",
                "iVar1": "bfdError",
                "uVar2": "errorDetails",
                "local_100": "localVar1",
                "local_fc": "localVar2",
                "local_f8": "localVar3",
                "local_f0": "localVar4",
                "local_e8": "localBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "arg1Copy",
                "local_a8": "arg2Copy",
                "local_98": "arg3Copy",
                "local_88": "arg4Copy",
                "local_78": "arg5Copy",
                "local_68": "arg6Copy",
                "local_58": "arg7Copy",
                "local_48": "arg8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorType,undefined4 errorCode,undefined4 arg3,undefined4 arg4,\n                 undefined4 arg5,undefined4 arg6,undefined4 arg7,undefined4 arg8,\n                 long archiveFilename,long archiveHandle,long *errorFlag,char *errorMessageFormat,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char someFlag;\n  int bfdError;\n  undefined8 errorDetails;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined *localVar3;\n  undefined *localVar4;\n  undefined localBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 arg1Copy;\n  undefined4 arg2Copy;\n  undefined4 arg3Copy;\n  undefined4 arg4Copy;\n  undefined4 arg5Copy;\n  undefined4 arg6Copy;\n  undefined4 arg7Copy;\n  undefined4 arg8Copy;\n  \n  if (someFlag != '\\0') {\n    arg1Copy = errorType;\n    arg2Copy = errorCode;\n    arg3Copy = arg3;\n    arg4Copy = arg4;\n    arg5Copy = arg5;\n    arg6Copy = arg6;\n    arg7Copy = arg7;\n    arg8Copy = arg8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorDetails = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorDetails = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(program_name,_stderr);\n  if (archiveHandle != 0) {\n    if (archiveFilename == 0) {\n      archiveFilename = bfd_get_archive_filename(archiveHandle);\n    }\n    if ((errorFlag != (long *)0x0) && (*errorFlag != 0)) {\n      fprintf(_stderr,\": %s[%s]\",archiveFilename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",archiveFilename);\nLAB_001127c1:\n  if (errorMessageFormat != (char *)0x0) {\n    localVar3 = &stack0x00000008;\n    localVar4 = localBuffer;\n    localVar1 = 0x20;\n    localVar2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorMessageFormat,&localVar1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorDetails);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "bfd_get_error",
                "vfprintf",
                "bfd_errmsg",
                "fputs",
                "dcgettext",
                "fwrite",
                "fflush",
                "bfd_get_archive_filename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "copy_object.cold",
                "FUN_0010808f",
                "copy_file.cold",
                "FUN_0010554f",
                "copy_object",
                "main",
                "FUN_001086af",
                "FUN_00108466",
                "copy_relocations_in_section",
                "FUN_00107880",
                "copy_file",
                "FUN_00104ea2",
                "copy_section"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_type_00113b4a",
                "param_1": "input",
                "lVar1": "result"
            },
            "code": "\nlong initializeType_00113b4a(long input)\n\n{\n  long result;\n  \n  if (input != 0) {\n    result = debug_make_type_constprop_0(0x15,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_type_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_stab_symbol_0010edb4",
                "param_1": "ptr",
                "param_2": "symbol",
                "param_3": "type",
                "param_4": "size",
                "cVar1": "success",
                "iVar2": "cmpResult",
                "uVar3": "result",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateStabSymbol_0010edb4(long ptr,undefined8 symbol,undefined4 type,ulong size)\n\n{\n  char success;\n  int cmpResult;\n  undefined8 result;\n  undefined8 additionalParam;\n  \n  if (*(long *)(ptr + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(ptr + 0x1f0) < size) {\n    *(ulong *)(ptr + 0x1f0) = size;\n  }\n  cmpResult = filename_cmp(symbol);\n  if (cmpResult != 0) {\n    success = stab_write_symbol_lto_priv_0(ptr,0x84,0,size,symbol);\n    if (success == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(ptr + 0x210) = symbol;\n  }\n  result = stab_write_symbol_lto_priv_0\n                    (ptr,0x44,type,size - *(long *)(ptr + 0x200),0,additionalParam);\n  return result;\n}\n\n",
            "called": [
                "stab_write_symbol.lto_priv.0",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "debug_write_linenos.constprop.0"
            ],
            "imported": false,
            "current_name": "update_stab_symbol_0010edb4"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "reverse_and_modify_0010e5db",
                "param_1": "input",
                "param_2": "limit",
                "__ptr": "ptr",
                "__s": "str",
                "sVar2": "strLen",
                "__s_00": "newStr",
                "in_R10": "result",
                "iVar3": "count",
                "cVar1": "returnValue"
            },
            "code": "\nundefined  [16] reverseAndModify_0010e5db(long input,int limit)\n\n{\n  char returnValue;\n  void *ptr;\n  char *str;\n  size_t strLen;\n  char *newStr;\n  ulong result;\n  int count;\n  undefined auVar4 [16];\n  \n  count = 0;\n  do {\n    if (limit <= count) {\n      auVar4 = stab_modify_type(input,0x66,0,input + 0x188,input + 400,result);\n      return auVar4;\n    }\n    if (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0') {\n      ptr = (void *)stab_pop_type(input);\n      free(ptr);\n    }\n    else {\n      str = (char *)stab_pop_type(input);\n      strLen = strlen(str);\n      newStr = (char *)xmalloc(strLen + 3);\n      sprintf(newStr,\":t%s\",str);\n      free(str);\n      returnValue = stab_write_symbol_lto_priv_0(input,0x80,0,0,newStr);\n      if (returnValue == '\\0') {\n        auVar4._8_8_ = 0;\n        auVar4._0_8_ = result;\n        return auVar4 << 0x40;\n      }\n      free(newStr);\n    }\n    count = count + 1;\n  } while( true );\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "stab_modify_type",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "reverse_and_modify_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_remove_directory_00104d25",
                "status": "currentStatus",
                "param_7": "errorMessage",
                "bfd_nonfatal_message": "displayErrorMessage",
                "remove_directory_00114b84": "removeDirectory"
            },
            "code": "\nvoid cleanupAndRemoveDirectory_00104d25(void)\n\n{\n  undefined8 errorMessage;\n  \n  currentStatus = 1;\n  displayErrorMessage(0,errorMessage,0,0);\n  removeDirectory();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "bfd_nonfatal_message"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_directory_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "FUNC_0010551d"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_0010551d(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  code *pcVar4;\n  undefined8 *puVar5;\n  ulong uVar6;\n  ulong uVar7;\n  char *__s;\n  char cVar8;\n  char cVar9;\n  uint uVar10;\n  int iVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t sVar18;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *__s_00;\n  size_t sVar26;\n  long lVar27;\n  long *unaff_RBX;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int iVar31;\n  long unaff_RBP;\n  long *plVar32;\n  char *pcVar33;\n  undefined4 *puVar34;\n  char **ppcVar35;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppuVar37;\n  bool bVar38;\n  byte bVar39;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  bfd_nonfatal_message(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = dump_sections;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (merge_notes != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (cVar9 = startswith_lto_priv_0_lto_priv_0(), cVar9 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    cVar9 = bfd_get_full_section_contents();\n    if (cVar9 != '\\0') {\n      lVar27 = merge_gnu_build_notes();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (cVar9 = bfd_set_section_size(), cVar9 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar18 = *(size_t *)(lVar25 + 0x40);\n      __s_00 = fopen((char *)puVar29[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar29[2],0,0);\n      }\n      else {\n        cVar9 = bfd_malloc_and_get_section();\n        if (cVar9 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar18 != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,sVar18,__s_00), sVar26 != sVar18)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar17);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        uVar6 = uVar24;\n        uVar7 = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = uVar6, uVar7 != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            uVar6 = uVar20;\n            uVar7 = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = isympp;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = improve_and_readability_0010554f();\n    return uVar24;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar37 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *puVar34 = 0;\n      puVar34 = puVar34 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        cVar9 = bfd_get_section_contents();\n        if (cVar9 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                bVar2 = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar33);\n                      if (((sVar18 == 0) || (pcVar28 = pcVar33 + (sVar18 - 1), *pcVar28 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      iVar11 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(iVar11 + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar13,lVar27,pcVar33);\n                    cVar9 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar9 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,puVar3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)bVar2,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppuVar37 = ppuVar37 + 2;\n    } while (ppuVar37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar9 = finish_stab(), cVar9 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (plVar15 = plVar32; plVar15 < plVar32 + in_stack_00000010; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = start_stab_constprop_0(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (sVar18 = strlen(pcVar28), pcVar28[sVar18 - 1] == '\\\\')) &&\n                   (plVar15 + 1 < plVar32 + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              sVar18 = strlen(pcVar19);\n              pcVar19[sVar18 - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(plVar15[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              plVar15 = plVar15 + 1;\n              pcVar33 = pcVar28;\n            }\n            save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar28);\n            in_stack_00000018 = parse_stab(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            stab_context();\n            free_saved_stabs();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_saved_stabs();\n      if ((lVar25 != 0) && (cVar9 = finish_stab(), cVar9 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      cVar9 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        cVar8 = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (cVar8 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          non_fatal(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (cVar8 = bfd_coff_get_auxent(), cVar8 == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            cVar8 = debug_set_filename(puStack0000000000000020);\n            if (cVar8 == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          cVar8 = debug_set_filename(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar11 = strcmp(pcVar33,\".bb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_start_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              iVar11 = strcmp(pcVar33,\".eb\");\n              if (iVar11 == 0) {\n                cVar8 = debug_end_block(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              iVar11 = strcmp(pcVar33,\".bf\");\n              if (iVar11 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_coff_type_lto_priv_0();\n                  if ((lVar27 == 0) ||\n                     (cVar9 = debug_record_function(puStack0000000000000020), cVar9 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar11 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar11 = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar31 = _uStack0000000000000048[4];\n                      if (iVar31 == 0) break;\n                      cVar8 = debug_record_line(puStack0000000000000020,iVar11 + iVar31,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar11 = strcmp(pcVar33,\".ef\");\n                if (iVar11 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar9 != '\\0') {\n                  cVar9 = debug_end_function(puStack0000000000000020);\n                  if (cVar9 == '\\0') goto LAB_00105981;\n                  cVar9 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              non_fatal(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_coff_type_lto_priv_0();\n          if (lVar21 == 0) goto LAB_00105981;\n          cVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (cVar8 == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') &&\n       (keep_section_symbols == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = isympp + in_stack_00000010;\n        plVar15 = isympp;\n        do {\n          uVar10 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar10 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar10 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar32 != plVar15);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar11 = bfd_get_error();\n      if (iVar11 != 0) {\n        status = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = isympp;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    osympp = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        iVar11 = add_symbols;\n        plVar15 = (long *)plVar32[_in_stack_00000018];\n        pcVar4 = (code *)plVar15[4];\n        uVar10 = *(uint *)(plVar15 + 3);\n        pcVar33 = (char *)plVar15[1];\n        pcVar28 = pcVar33;\n        if (add_sym_list != (undefined8 *)0x0) {\n          iVar31 = 0;\n          puVar29 = add_sym_list;\n          while( true ) {\n            if ((iVar11 <= iVar31) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            iVar31 = iVar31 + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = create_new_symbol(puVar29);\n          uVar17 = redefine_specific_htab;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          cVar9 = *pcVar33;\n          if (cVar9 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = prefix_symbols_string;\n          if ((change_leading_char != '\\0') &&\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')) {\n            lVar27 = unaff_R14[1];\n            cVar9 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(redefine_specific_htab);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (section_rename_list == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (iVar11 = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), iVar11 == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            fatal(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(redefine_specific_htab);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, ppcVar35 = section_rename_list, (uVar10 & 0x100) != 0)) {\n          for (; ppcVar35 != (char **)0x0; ppcVar35 = (char **)ppcVar35[3]) {\n            iVar11 = strcmp(*ppcVar35,pcVar33);\n            if (iVar11 == 0) {\n              pcVar28 = ppcVar35[1];\n              break;\n            }\n          }\n        }\n        plVar15[1] = (long)pcVar28;\n        cVar9 = *pcVar28;\n        if (cVar9 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = prefix_symbols_string;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == cVar9) {\n          if (change_leading_char == '\\0') {\n            if ((remove_leading_char == '\\0') ||\n               ((((uVar10 & 0x82) == 0 && (pcVar4 != bfd_map_over_sections)) &&\n                ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          cVar9 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (cVar9 == '\\0') goto LAB_0010677d;\n          if (prefix_symbols_string != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            plVar15[1] = (long)pcVar28;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = cVar9;\n          plVar15[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((change_leading_char == '\\0') ||\n             (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            sVar18 = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + sVar18 + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = prefix_symbols_string;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar9 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sVar18 = strlen(pcVar28);\n            lVar27 = sVar18 + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sVar18 = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(sVar18 + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          __s = prefix_symbols_string;\n          if (prefix_symbols_string != (char *)0x0) {\n            strcpy(pcVar33,prefix_symbols_string);\n            sVar18 = strlen(__s);\n            pcVar33 = pcVar33 + sVar18;\n          }\n          strcpy(pcVar33,pcVar28);\n          plVar15[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (strip_symbols == 7) goto LAB_001067a8;\n        if (((uVar10 & 0x20) == 0) &&\n           (((uVar10 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((uVar10 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n             (iVar11 = bfd_decode_symclass(plVar15), iVar11 == 0x49)) {\nLAB_00105be2:\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((uVar10 & 0x82) == 0) && (pcVar4 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n            if ((uVar10 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(plVar15[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                if (discard_locals == 1) {\n                  cVar9 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            cVar9 = convert_debugging;\n            if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n              if (cVar9 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (strip_symbols != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (wildcard == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            non_fatal(uVar17);\n            status = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((uVar10 & 0x20) == 0) {\nLAB_00105c07:\n          if (wildcard != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((keep_file_symbols != '\\0') && ((uVar10 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          cVar9 = is_strip_section_isra_0(plVar15[4]);\n          if (cVar9 == '\\0') {\n            if (((uVar10 & 0x800002) == 0) && (pcVar4 != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((uVar10 & 0x82) != 0) {\n                cVar9 = is_specified_symbol(pcVar28);\n                if ((cVar9 == '\\0') &&\n                   ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                    (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')))) {\n                  if (((((localize_hidden == '\\0') ||\n                        (uVar12 = *(uint *)(plVar15 + 3), (uVar12 & 0x200000) != 0)) ||\n                       (lVar27 = *plVar15, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  uVar12 = *(uint *)(plVar15 + 3);\n                }\n                *(uint *)(plVar15 + 3) = uVar12 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((uVar10 & 1) != 0) && (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((weaken != '\\0') || (cVar9 = is_specified_symbol(pcVar28), cVar9 != '\\0')) {\n                *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pcVar4 != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = plVar15;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (add_sym_list != (undefined8 *)0x0) {\n      puVar29 = add_sym_list;\n      iVar11 = add_symbols;\n      for (lVar27 = 0; lVar27 < iVar11; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = create_new_symbol(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          iVar11 = add_symbols;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          fatal(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    bVar38 = convert_debugging != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((bVar38) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      iVar11 = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((iVar11 != 5) && (iVar11 != 2)) {\n        uVar17 = **(undefined8 **)(in_stack_00000008 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      cVar9 = write_stabs_in_sections_debugging_info_constprop_0\n                        (in_stack_00000008,puStack0000000000000020,&stack0x000000c0,&stack0x00000110\n                         ,&stack0x000000e0,&stack0x00000140);\n      if (cVar9 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (cVar9 = bfd_set_section_size(lVar25,in_stack_00000110), cVar9 == '\\0')) ||\n         (cVar9 = bfd_set_section_size(lVar27,in_stack_00000140), cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        status = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      cVar9 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((cVar9 == '\\0') ||\n         (cVar9 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         cVar9 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(strip_specific_htab);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(keep_specific_htab), lVar25 != 0 ||\n              (lVar25 = htab_elements(localize_specific_htab), lVar25 != 0)) ||\n             (lVar25 = htab_elements(globalize_specific_htab), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(keepglobal_specific_htab), lVar25 != 0 ||\n             (lVar25 = htab_elements(weaken_specific_htab), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(redefine_specific_htab), lVar25 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,osympp,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,copy_relocations_in_section,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,copy_section,in_stack_00000008);\n  for (puVar29 = add_sections; puVar5 = update_sections, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; puVar5 != (undefined8 *)0x0; puVar5 = (undefined8 *)*puVar5) {\n    uVar17 = *(undefined8 *)(puVar5[5] + 0x60);\n    cVar9 = bfd_set_section_contents(in_stack_00000008,uVar17,puVar5[4],0,puVar5[3]);\n    if (cVar9 == '\\0') {\n      bfd_nonfatal_message(0,in_stack_00000008,uVar17,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((merge_notes != '\\0') && (is_strip == 0)) {\n      uVar17 = *unaff_R14;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      non_fatal(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar9 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = gnu_debuglink_filename, cVar9 != '\\0')) {\n      uVar10 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)uVar10;\n      if ((char)uVar10 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar24;\n        }\n        cVar9 = bfd_alt_mach_code(in_stack_00000008,use_alt_mach_code & 0xffffffff);\n        uVar20 = use_alt_mach_code;\n        if (cVar9 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        non_fatal(uVar17,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        non_fatal(uVar17);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,in_stack_00000008,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((merge_notes != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (cVar9 = startswith_lto_priv_0_lto_priv_0(*puVar29,\".gnu.build.attributes\"), cVar9 != '\\0'))\n    {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      plVar15 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          cVar9 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (cVar9 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = plVar15;\n          if (*(undefined8 **)(*plVar15 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)plVar15[3];\n          plVar15 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      bfd_nonfatal_message(0,in_stack_00000008,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_nonfatal_message",
                "free"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010551d"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "compute_hash_00108800",
                "param_1": "inputString"
            },
            "code": "\nvoid computeHash_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compute_hash_00108800"
        },
        "FUN_00104320": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "parse_stab",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_demangle_template",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104320"
        },
        "FUN_00104200": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104200"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "record_and_free_variables_0010c1c6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextPtr",
                "cVar2": "charVar",
                "__ptr": "currentPtr"
            },
            "code": "\nundefined recordAndFreeVariables_0010c1c6(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextPtr;\n  char charVar;\n  undefined8 *currentPtr;\n  \n  currentPtr = *(undefined8 **)(param2 + 0x78);\n  while( true ) {\n    if (currentPtr == (undefined8 *)0x0) {\n      *(undefined8 *)(param2 + 0x78) = 0;\n      return 1;\n    }\n    charVar = debug_record_variable\n                      (param1,currentPtr[1],currentPtr[2],*(undefined4 *)(currentPtr + 3),currentPtr[4],param6,param5\n                      );\n    if (charVar == '\\0') break;\n    nextPtr = (undefined8 *)*currentPtr;\n    free(currentPtr);\n    currentPtr = nextPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_record_variable",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "parse_stab",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "record_and_free_variables_0010c1c6"
        },
        "FUN_00104560": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "stab_typedef_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104560"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_symbols_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "framePointer",
                "unaff_R13": "symbolTable",
                "uVar1": "symbolCount",
                "lVar2": "symbolValue",
                "cVar3": "isSpecifiedSymbol",
                "puVar4": "symbolList",
                "puVar5": "nextSymbol",
                "uVar6": "index"
            },
            "code": "\nvoid processSymbols_001082df(void)\n\n{\n  uint symbolCount;\n  long symbolValue;\n  char isSpecifiedSymbol;\n  long baseAddress;\n  undefined8 *symbolList;\n  undefined8 *nextSymbol;\n  long framePointer;\n  ulong index;\n  undefined8 *symbolTable;\n  \n  symbolCount = *(uint *)(baseAddress + 0x78);\n  if (strip_symbols == 7) {\n    symbolList = symbolTable;\n    for (index = 0; index != symbolCount; index = index + 1) {\n      nextSymbol = symbolList;\n      if (((*(long **)symbolTable[index] != (long *)0x0) &&\n          (symbolValue = **(long **)symbolTable[index], symbolValue != 0)) &&\n         (isSpecifiedSymbol = is_specified_symbol(*(undefined8 *)(symbolValue + 8),keep_specific_htab), isSpecifiedSymbol != '\\0')\n         ) {\n        nextSymbol = symbolList + 1;\n        *symbolList = symbolTable[index];\n      }\n      symbolList = nextSymbol;\n    }\n    *symbolList = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(framePointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "is_specified_symbol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "process_symbols_001082df"
        },
        "FUN_00104440": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00107880",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104440"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_file_and_store_data_00114d60",
                "param_1": "fileInfo",
                "iVar1": "eofIndicator",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "__stream": "filePointer",
                "uVar4": "errorMessage",
                "__errno_location": "getErrnoLocation",
                "uVar5": "bufferPointer",
                "sVar6": "bytesRead",
                "lVar7": "totalBytesRead",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readFileAndStoreData_00114d60(long fileInfo)\n\n{\n  int eofIndicator;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 errorMessage;\n  FILE *filePointer;\n  undefined8 bufferPointer;\n  size_t bytesRead;\n  long totalBytesRead;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errnoPtr = getErrnoLocation();\n    errorString = strerror(*errnoPtr);\n    bufferPointer = *(undefined8 *)(fileInfo + 0x10);\n    errorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    fatal(errorMessage,bufferPointer,errorString);\n  }\n  bufferSize = 0x1000;\n  totalBytesRead = 0;\n  bufferPointer = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = bufferPointer;\n  while( true ) {\n    eofIndicator = feof(filePointer);\n    if (eofIndicator != 0) {\n      *(long *)(fileInfo + 0x18) = totalBytesRead;\n      fclose(filePointer);\n      return;\n    }\n    if (totalBytesRead == bufferSize) {\n      bufferSize = totalBytesRead * 2;\n      bufferPointer = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = bufferPointer;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + totalBytesRead),1,bufferSize - totalBytesRead,filePointer);\n    eofIndicator = ferror(filePointer);\n    if (eofIndicator != 0) break;\n    totalBytesRead = totalBytesRead + bytesRead;\n  }\n  bufferPointer = *(undefined8 *)(fileInfo + 0x10);\n  errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n  fatal(errorMessage,bufferPointer);\n}\n\n",
            "called": [
                "section_add_load_file.cold",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "read_file_and_store_data_00114d60"
        },
        "FUN_00104680": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104680"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "handle_section_not_found_00108808",
                "unaff_RBP": "stackBase",
                "uVar1": "sectionPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionNotFound_00108808(void)\n\n{\n  undefined8 sectionPtr;\n  undefined8 errorMessage;\n  long stackBase;\n  \n  sectionPtr = *(undefined8 *)(stackBase + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  fatal(errorMessage,sectionPtr);\n}\n\n",
            "called": [
                "dcgettext",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "create_new_symbol"
            ],
            "imported": false,
            "current_name": "handle_section_not_found_00108808"
        },
        "FUN_00128418": {
            "renaming": {},
            "code": "\n\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strtoul@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128418",
            "calling": [
                "strtoul"
            ],
            "imported": false,
            "current_name": "FUN_00128418"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "uVar1": "message",
                "ppbVar2": "slot",
                "pbVar3": "ptr",
                "bVar4": "byteVal",
                "pbVar5": "nextLine",
                "unaff_EBP": "counter",
                "pbVar6": "line",
                "unaff_R13": "filename",
                "pbVar7": "nextChar",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "formatString",
                "in_stack_00000010": "callbackArg"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *ptr;\n  byte byteVal;\n  byte *nextLine;\n  int counter;\n  byte *line;\n  undefined8 filename;\n  byte *nextChar;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 formatString;\n  undefined8 *callbackArg;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    byteVal = *currentLine;\n    nextChar = currentLine;\n    if (byteVal == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        nextChar = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)byteVal < '\\v') {\n      if (byteVal != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (byteVal != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        nextChar = currentLine + 1;\n      }\n    }\n    byteVal = *currentChar;\n    while ((byteVal == 0x20 || (line = currentChar, byteVal == 9))) {\n      line = currentChar + 1;\n      currentChar = currentChar + 1;\n      byteVal = *line;\n    }\n    do {\n      if ((byteVal == 10) || (byteVal == 0xd)) goto LAB_00114676;\n      if (byteVal == 0) goto LAB_00114599;\n      byteVal = line[1];\n      line = line + 1;\n    } while ((byteVal != 0x20) && (byteVal != 9));\n    if ((char)byteVal < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (byteVal & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      byteVal = line[1];\n      if ((((((byteVal == 9) || (byteVal == 0x20)) &&\n            ((byteVal = line[2], byteVal == 9 || (byteVal == 0x20)))) &&\n           ((byteVal = line[3], byteVal == 9 || (byteVal == 0x20)))) &&\n          ((byteVal = line[4], byteVal == 9 || (byteVal == 0x20)))) &&\n         ((byteVal = line[5], byteVal == 9 || (byteVal == 0x20)))) {\n        byteVal = line[6];\n        ptr = line + 6;\n        if ((byteVal == 9) || (byteVal == 0x20)) {\n          do {\n            do {\n              byteVal = ptr[1];\n              ptr = ptr + 1;\n            } while (byteVal == 0x20);\n          } while (byteVal == 9);\n        }\n      }\n      if ((0xd < byteVal) || ((-0x2402L >> (byteVal & 0x3f) & 1U) != 0)) {\n        message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(message,formatString,counter);\n      }\n    }\nLAB_00114599:\n    *line = 0;\n    if (currentChar < line) {\n      slot = (byte **)htab_find_slot();\n      *slot = currentChar;\n    }\n    counter = counter + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (nextChar[1] == 0) {\n      *callbackArg = filename;\n      return;\n    }\n  } while( true );\n  if (byteVal == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "check_and_print_error_message_00119940",
                "param_1": "memoryAddress",
                "param_2": "inputValue",
                "uVar1": "errorMessage",
                "local_20": "scannedValue"
            },
            "code": "\nvoid checkAndPrintErrorMessage_00119940(undefined8 memoryAddress,undefined8 inputValue)\n\n{\n  undefined8 errorMessage;\n  char *scannedValue [2];\n  \n  bfd_scan_vma(memoryAddress,scannedValue,0);\n  if (*scannedValue[0] == '\\0') {\n    return;\n  }\n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  fatal(errorMessage,inputValue,memoryAddress);\n}\n\n",
            "called": [
                "parse_vma.cold",
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_and_print_error_message_00119940"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "process_data_0010540e",
                "param_1": "input",
                "param_2": "dataPtr",
                "param_3": "flag",
                "in_RAX": "tempPtr"
            },
            "code": "\nvoid processData_0010540e(undefined8 input,long dataPtr,uint flag)\n\n{\n  long tempPtr;\n  \n  if ((flag == 2) && (*(int *)(*(long *)(dataPtr + 8) + 8) == 2)) {\n    flag = (uint)*(byte *)(*(long *)(*(long *)(dataPtr + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(tempPtr + 0x380) + 0x78))(input,flag != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "set_long_section_mode"
            ],
            "imported": false,
            "current_name": "process_data_0010540e"
        },
        "FUN_00104210": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "main",
                "FUN_00107880",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104210"
        },
        "FUN_00104450": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "string_hash_newfunc.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_00104450"
        },
        "FUN_00104330": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "copy_section"
            ],
            "imported": false,
            "current_name": "FUN_00104330"
        },
        "FUN_00104690": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "copy_file",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104690"
        },
        "FUN_00104570": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00104ea2",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104570"
        },
        "FUN_00128408": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128408",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128408"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_function_00113a4d",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "param3",
                "param_4": "arg4",
                "param_5": "arg5",
                "cVar1": "flag",
                "uVar2": "returnValue",
                "puVar3": "listPtr",
                "auVar4": "result"
            },
            "code": "\nundefined8\nprocessFunction_00113a4d(undefined8 arg1,undefined8 arg2,long param3,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  char flag;\n  undefined8 returnValue;\n  undefined8 *listPtr;\n  undefined result [16];\n  \n  flag = debug_write_linenos_constprop_0(arg1,arg2,*(undefined8 *)(param3 + 0x18));\n  if ((flag != '\\0') &&\n     (((*(long *)(param3 + 0x28) == 0 && (*(long *)(param3 + 8) != 0)) ||\n      (flag = stab_start_block_lto_priv_0(arg2,*(undefined8 *)(param3 + 0x18)), flag != '\\0'))\n     )) {\n    if (*(undefined8 **)(param3 + 0x28) != (undefined8 *)0x0) {\n      for (listPtr = (undefined8 *)**(undefined8 **)(param3 + 0x28); listPtr != (undefined8 *)0x0;\n          listPtr = (undefined8 *)*listPtr) {\n        flag = debug_write_name_constprop_0(arg1,arg2,listPtr);\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (listPtr = *(undefined8 **)(param3 + 0x10); listPtr != (undefined8 *)0x0;\n        listPtr = (undefined8 *)*listPtr) {\n      flag = processFunction_00113a4d(arg1,arg2,listPtr);\n      if (flag == '\\0') {\n        return 0;\n      }\n    }\n    result = debug_write_linenos_constprop_0(arg1,arg2,*(undefined8 *)(param3 + 0x20));\n    if (result[0] != '\\0') {\n      if ((*(long *)(param3 + 0x28) == 0) && (*(long *)(param3 + 8) != 0)) {\n        return result._0_8_;\n      }\n      returnValue = stab_end_block_lto_priv_0\n                        (arg2,*(undefined8 *)(param3 + 0x20),result._8_8_,arg5);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_start_block.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "debug_write_name.constprop.0",
                "stab_end_block.lto_priv.0",
                "debug_write_block.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "debug_write_name.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_function_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "return_and_free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToFree",
                "param_7": "returnParam"
            },
            "code": "\nundefined8 returnAndFreeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToFree;\n  undefined8 returnParam;\n  \n  returnParam = returnValue;\n  free(memoryToFree);\n  return returnParam;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "make_tempdir"
            ],
            "imported": false,
            "current_name": "return_and_free_memory_001081e9"
        },
        "FUN_00104100": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "main",
                "setup_section",
                "parse_stab_type",
                "FUN_0010554f",
                "stab_method_type.lto_priv.0",
                "display_info.isra.0",
                "stab_end_class_type.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104100"
        },
        "FUN_00104340": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "find_section_list",
                "is_specified_symbol_predicate"
            ],
            "imported": false,
            "current_name": "FUN_00104340"
        },
        "FUN_00104220": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104220"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_variable_00113b71",
                "param_1": "input_value",
                "lVar1": "result",
                "debug_make_type_constprop_0": "create_constant_value"
            },
            "code": "\nlong initialize_variable_00113b71(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_constant_value(0x14,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_variable_00113b71"
        },
        "FUN_00104580": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_00104580"
        },
        "FUN_00104460": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104460"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "push_defined_type_or_value_00109dfe",
                "param_1": "functionContext",
                "lVar1": "currentValue",
                "local_40": "formattedString"
            },
            "code": "\nvoid pushDefinedTypeOrValue_00109dfe(long functionContext)\n\n{\n  long currentValue;\n  char formattedString [40];\n  \n  if (*(long *)(functionContext + 0x70) != 0) {\n    stab_push_defined_type(functionContext,*(long *)(functionContext + 0x70),0);\n    return;\n  }\n  currentValue = *(long *)(functionContext + 0x68);\n  *(long *)(functionContext + 0x68) = currentValue + 1;\n  *(long *)(functionContext + 0x70) = currentValue;\n  sprintf(formattedString,\"%ld=%ld\",currentValue,currentValue);\n  stab_push_string(functionContext,formattedString,currentValue,1,0);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf",
                "stab_push_defined_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "push_defined_type_or_value_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "check_and_append_semicolon_00109bbb",
                "param_1": "input",
                "__s": "string",
                "sVar1": "length"
            },
            "code": "\nbool checkAndAppendSemicolon_00109bbb(long input)\n\n{\n  char *string;\n  size_t length;\n  \n  if (*(long *)(input + 0x60) != 0) {\n    string = *(char **)(*(long *)(input + 0x60) + 0x30);\n    if (string != (char *)0x0) {\n      length = strlen(string);\n      *(undefined2 *)(string + length) = 0x3b;\n    }\n    return string != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "check_and_append_semicolon_00109bbb"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "extract_data_0010ae0e",
                "param_1": "input",
                "lVar1": "dataPtr",
                "lVar2": "ptr",
                "__ptr": "ptr2",
                "pcVar3": "strPtr",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "result",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "count",
                "uVar10": "index"
            },
            "code": "\nundefined8 extractData_0010ae0e(long input)\n\n{\n  long dataPtr;\n  long ptr;\n  void *ptr2;\n  char *strPtr;\n  size_t len1;\n  size_t len2;\n  char *result;\n  undefined8 returnValue;\n  long totalLen;\n  uint count;\n  ulong index;\n  \n  returnValue = 0;\n  dataPtr = *(long *)(input + 0x60);\n  if (((dataPtr != 0) && (*(char **)(dataPtr + 8) != (char *)0x0)) &&\n     (result = *(char **)(dataPtr + 0x20), result != (char *)0x0)) {\n    len1 = strlen(*(char **)(dataPtr + 8));\n    len2 = strlen(result);\n    ptr = *(long *)(dataPtr + 0x28);\n    if (ptr == 0) {\n      totalLen = len1 + len2 + 10;\n      index = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      index = 0;\n      while( true ) {\n        result = *(char **)(ptr + index * 8);\n        if (result == (char *)0x0) break;\n        len1 = strlen(result);\n        index = (ulong)((int)index + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(dataPtr + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(dataPtr + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(dataPtr + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(dataPtr + 0x38));\n      totalLen = totalLen + len1;\n    }\n    result = (char *)xmalloc(totalLen);\n    dataPtr = *(long *)(input + 0x60);\n    strcpy(result,*(char **)(dataPtr + 8));\n    if (*(long *)(dataPtr + 0x28) != 0) {\n      count = 0;\n      len1 = strlen(result);\n      sprintf(result + len1,\"!%u,\",index);\n      while( true ) {\n        dataPtr = *(long *)(input + 0x60);\n        index = (ulong)count;\n        ptr2 = *(void **)(dataPtr + 0x28);\n        strPtr = *(char **)((long)ptr2 + index * 8);\n        if (strPtr == (char *)0x0) break;\n        count = count + 1;\n        strcat(result,strPtr);\n        free(*(void **)(*(long *)(dataPtr + 0x28) + index * 8));\n      }\n      free(ptr2);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    dataPtr = *(long *)(input + 0x60);\n    strcat(result,*(char **)(dataPtr + 0x20));\n    free(*(void **)(dataPtr + 0x20));\n    dataPtr = *(long *)(input + 0x60);\n    *(undefined8 *)(dataPtr + 0x20) = 0;\n    if (*(char **)(dataPtr + 0x30) != (char *)0x0) {\n      strcat(result,*(char **)(dataPtr + 0x30));\n      free(*(void **)(dataPtr + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(result);\n    dataPtr = *(long *)(input + 0x60);\n    *(undefined2 *)(result + len1) = 0x3b;\n    strPtr = *(char **)(dataPtr + 0x38);\n    if (strPtr != (char *)0x0) {\n      strcpy(result + len1 + 1,strPtr);\n      free(*(void **)(dataPtr + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    dataPtr = *(long *)(input + 0x60);\n    *(char **)(dataPtr + 8) = result;\n    returnValue = CONCAT71((int7)((ulong)dataPtr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcat",
                "strcpy",
                "strlen",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "extract_data_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_debug_info_001135a5",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "debugInfo",
                "iVar1": "caseValue",
                "cVar2": "successFlag",
                "uVar3": "result",
                "puVar4": "parameterList",
                "puVar5": "functionList"
            },
            "code": "\nundefined8 processDebugInfo_001135a5(undefined8 outputFile,undefined8 inputFile,long debugInfo)\n\n{\n  int caseValue;\n  char successFlag;\n  undefined8 result;\n  undefined8 *parameterList;\n  undefined8 *functionList;\n  \n  if (6 < *(uint *)(debugInfo + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(debugInfo + 0x14)) {\n  case 0:\n    successFlag = debug_write_type_constprop_0(outputFile,inputFile,*(undefined8 *)(debugInfo + 0x20),debugInfo);\n    if (successFlag != '\\0') {\n      result = stab_typdef_lto_priv_0(inputFile,*(undefined8 *)(debugInfo + 8));\n      return result;\n    }\n    break;\n  case 1:\n    successFlag = debug_write_type_constprop_0(outputFile,inputFile,*(undefined8 *)(debugInfo + 0x20),debugInfo);\n    if (successFlag != '\\0') {\n      result = stab_tag_lto_priv_0(inputFile,*(undefined8 *)(debugInfo + 8));\n      return result;\n    }\n    break;\n  case 2:\n    successFlag = debug_write_type_constprop_0\n                      (outputFile,inputFile,*(undefined8 *)(*(long *)(debugInfo + 0x20) + 8),0);\n    if (successFlag != '\\0') {\n      result = stab_variable_lto_priv_0\n                        (inputFile,*(undefined8 *)(debugInfo + 8),**(undefined4 **)(debugInfo + 0x20),\n                         *(undefined8 *)(*(undefined4 **)(debugInfo + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    functionList = *(undefined8 **)(debugInfo + 0x20);\n    caseValue = *(int *)(debugInfo + 0x18);\n    result = *(undefined8 *)(debugInfo + 8);\n    successFlag = debug_write_linenos_constprop_0(outputFile,inputFile,*(undefined8 *)(functionList[2] + 0x18));\n    if (((successFlag != '\\0') &&\n        (successFlag = debug_write_type_constprop_0(outputFile,inputFile,*functionList,0), successFlag != '\\0')) &&\n       (successFlag = stab_start_function_lto_priv_0(inputFile,result,caseValue == 2), successFlag != '\\0')) {\n      for (parameterList = (undefined8 *)functionList[1]; parameterList != (undefined8 *)0x0;\n          parameterList = (undefined8 *)*parameterList) {\n        successFlag = debug_write_type_constprop_0(outputFile,inputFile,parameterList[2],0);\n        if (successFlag == '\\0') {\n          return 0;\n        }\n        successFlag = stab_function_parameter_lto_priv_0(inputFile,parameterList[1],*(undefined4 *)(parameterList + 3));\n        if (successFlag == '\\0') {\n          return 0;\n        }\n      }\n      functionList = (undefined8 *)functionList[2];\n      while( true ) {\n        if (functionList == (undefined8 *)0x0) {\n          result = stab_end_function_lto_priv_0(inputFile);\n          return result;\n        }\n        successFlag = debug_write_block_constprop_0(outputFile,inputFile,functionList);\n        if (successFlag == '\\0') break;\n        functionList = (undefined8 *)*functionList;\n      }\n    }\n    break;\n  case 4:\n    result = stab_int_constant_lto_priv_0\n                      (inputFile,*(undefined8 *)(debugInfo + 8),*(undefined8 *)(debugInfo + 0x20));\n    return result;\n  case 5:\n    result = stab_float_constant_lto_priv_0\n                      (*(undefined8 *)(debugInfo + 0x20),inputFile,*(undefined8 *)(debugInfo + 8));\n    return result;\n  case 6:\n    successFlag = debug_write_type_constprop_0(outputFile,inputFile,**(undefined8 **)(debugInfo + 0x20),0);\n    if (successFlag != '\\0') {\n      result = stab_typed_constant_lto_priv_0\n                        (inputFile,*(undefined8 *)(debugInfo + 8),\n                         *(undefined8 *)(*(long *)(debugInfo + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "stab_end_function.lto_priv.0",
                "stab_variable.lto_priv.0",
                "debug_write_linenos.constprop.0",
                "abort",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "debug_write_block.constprop.0",
                "stab_int_constant.lto_priv.0",
                "debug_write_type.constprop.0",
                "stab_float_constant.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "write_stabs_in_sections_debugging_info.constprop.0",
                "debug_write_block.constprop.0"
            ],
            "imported": false,
            "current_name": "process_debug_info_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = bfd_get_archive_filename();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~bfd_flags_to_clear & *(uint *)(param_7[1] + 0x14) &\n           (bfd_flags_to_set | *(uint *)((long)unaff_R14 + 0x44));\n  if (strip_symbols == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = bfd_get_archive_filename();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    non_fatal(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = bfd_get_archive_filename();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_file_format_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)param_7[1],&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = preserve_dates == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar28 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar28 + 0x100) = pe_image_base;\n    }\n    uVar22 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar28 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar28 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar28 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = add_sections, cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar33 = add_sections;\n  }\n  for (; puVar38 = update_sections, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33)\n  {\n    uVar31 = 0x128;\n    lVar28 = find_section_list(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = check_new_section_flags(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = find_section_list(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar18);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = gnu_debuglink_filename;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = isympp;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = improve_and_readability_0010554f();\n    return uVar29;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &names_0;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = parse_stab(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = start_stab_constprop_0(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32);\n          in_stack_00000018 = parse_stab(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar28 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_coff_type_lto_priv_0();\n            if (lVar23 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = debug_start_block(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_coff_type_lto_priv_0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = debug_record_function(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = debug_record_line(puStack0000000000000020,iVar13 + iVar35,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              non_fatal(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        non_fatal(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar15 = isympp;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = add_symbols;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = add_sym_list;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = create_new_symbol(puVar33);\n                  uVar18 = redefine_specific_htab;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(redefine_specific_htab);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (section_rename_list == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              fatal(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(redefine_specific_htab);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = section_rename_list, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = prefix_symbols_string;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = prefix_symbols_string;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar21,prefix_symbols_string);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar18);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar33 = add_sym_list;\n        iVar13 = add_symbols;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = create_new_symbol(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = add_symbols;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = convert_debugging == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                            &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(strip_specific_htab);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(keep_specific_htab), lVar28 != 0 ||\n              (lVar28 = htab_elements(localize_specific_htab), lVar28 != 0)) ||\n             (lVar28 = htab_elements(globalize_specific_htab), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(keepglobal_specific_htab), lVar28 != 0 ||\n             (lVar28 = htab_elements(weaken_specific_htab), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(redefine_specific_htab), lVar28 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar33 = add_sections; puVar38 = update_sections, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar33,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          bfd_nonfatal_message(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar22 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)use_alt_mach_code;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_gnu_build_notes();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = dump_sections;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_set_file_flags",
                "dcgettext",
                "printf",
                "FUN_001152b6",
                "bfd_set_start_address",
                "bfd_get_mach",
                "bfd_get_arch",
                "bfd_get_archive_filename"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "copy_object"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "FUN_00128318": {
            "renaming": {},
            "code": "\n\n\n\nvoid * malloc(size_t __size)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* malloc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128318",
            "calling": [
                "malloc"
            ],
            "imported": false,
            "current_name": "FUN_00128318"
        },
        "FUN_00104590": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104590"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "FUNC_0010b0fa"
            },
            "code": "\n\n\nchar * FUNC_0010b0fa(undefined8 param_1,undefined8 param_2,uint *param_3,long param_4,\n                   undefined *param_5)\n\n{\n  uint uVar1;\n  int iVar2;\n  char *pcVar3;\n  long *plVar4;\n  char *pcVar5;\n  size_t sVar6;\n  void *__ptr;\n  long lVar7;\n  undefined local_40 [16];\n  \n  if (param_5 != (undefined *)0x0) {\n    *param_5 = 0;\n  }\n  while( true ) {\n    uVar1 = *param_3;\n    if (0x29 < uVar1) break;\n    if (0x17 < uVar1) {\n      switch(uVar1) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        pcVar3 = (char *)FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),0,0);\n        if (pcVar3 != (char *)0x0) {\n          switch(*param_3) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            pcVar3 = (char *)debug_make_volatile_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x1b:\n            pcVar3 = (char *)debug_make_const_type_isra_0(pcVar3);\n            return pcVar3;\n          default:\n                    \n            abort();\n          case 0x22:\n            pcVar3 = (char *)debug_make_pointer_type_isra_0(pcVar3);\n            return pcVar3;\n          case 0x23:\n            pcVar3 = (char *)debug_make_reference_type_isra_0(pcVar3);\n            return pcVar3;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        if (pcVar3 == (char *)0x0) {\n          pcVar5 = \"Couldn\\'t get demangled builtin type\\n\";\n          pcVar3 = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        iVar2 = strcmp(pcVar3,\"signed char\");\n        if (iVar2 == 0) {\nLAB_0010b406:\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"bool\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_type_constprop_0(6,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"char\");\n        if (iVar2 == 0) goto LAB_0010b406;\n        iVar2 = strcmp(pcVar3,\"double\");\n        if ((iVar2 == 0) || (iVar2 = strcmp(pcVar3,\"long double\"), iVar2 == 0)) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(8);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"float\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(4);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"__float128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_float_type_isra_0(0x10);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned char\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(1,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"int\");\n        if (iVar2 == 0) {\nLAB_0010b504:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned int\");\n        if (iVar2 == 0) {\nLAB_0010b528:\n          pcVar5 = (char *)debug_make_int_type_isra_0(4,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"long\");\n        if (iVar2 == 0) goto LAB_0010b504;\n        iVar2 = strcmp(pcVar3,\"unsigned long\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"__int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned __int128\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned short\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(2,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"void\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_void_type_isra_0();\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"wchar_t\");\n        if (iVar2 == 0) goto LAB_0010b528;\n        iVar2 = strcmp(pcVar3,\"long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,0);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"unsigned long long\");\n        if (iVar2 == 0) {\n          pcVar5 = (char *)debug_make_int_type_isra_0(8,1);\n          goto LAB_0010b6c6;\n        }\n        iVar2 = strcmp(pcVar3,\"...\");\n        if (iVar2 == 0) {\n          pcVar5 = \"Unexpected demangled varargs\\n\";\n          if (param_5 == (undefined *)0x0) goto LAB_0010b6a9;\n          *param_5 = 1;\n        }\n        else {\n          pcVar5 = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          pcVar5 = (char *)dcgettext(0,pcVar5,5);\n          fprintf(_stderr,pcVar5);\n        }\n        pcVar5 = (char *)0x0;\nLAB_0010b6c6:\n        free(pcVar3);\n        return pcVar5;\n      case 0x29:\n        if (*(long *)(param_3 + 4) == 0) {\n          __ptr = (void *)debug_make_void_type_isra_0();\n        }\n        else {\n          __ptr = (void *)FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,0);\n        }\n        if (__ptr != (void *)0x0) {\n          lVar7 = stab_demangle_v3_arglist(param_1,param_2,*(undefined8 *)(param_3 + 6),local_40);\n          if (lVar7 != 0) {\n            pcVar3 = (char *)debug_make_function_type_isra_0(__ptr,lVar7,local_40[0]);\n            return pcVar3;\n          }\n          free(__ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (uVar1 != 1) {\n      if (uVar1 == 4) {\n        pcVar3 = (char *)cplus_demangle_print(3,param_3,0x14,local_40);\n        pcVar5 = \"Failed to print demangled template\\n\";\n        if (pcVar3 != (char *)0x0) {\n          sVar6 = strlen(pcVar3);\n          pcVar5 = (char *)stab_find_tagged_type(param_1,param_2,pcVar3,sVar6 & 0xffffffff,9);\n          free(pcVar3);\n          return pcVar5;\n        }\nLAB_0010b3d3:\n        pcVar5 = (char *)dcgettext(0,pcVar5,5);\n        fprintf(_stderr,pcVar5);\n        return pcVar3;\n      }\n      if (uVar1 == 0) {\n        if ((param_4 == 0) ||\n           (plVar4 = (long *)debug_get_fields_isra_0(param_4), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    param_4 = FUNC_0010b0fa(param_1,param_2,*(undefined8 *)(param_3 + 4),param_4,0);\n    if (param_4 == 0) goto LAB_0010b38c;\n    param_3 = *(uint **)(param_3 + 6);\n    param_5 = (undefined *)0x0;\n  }\n  pcVar3 = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,pcVar3,(ulong)uVar1);\nLAB_0010b38c:\n  pcVar3 = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return pcVar3;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    pcVar3 = (char *)stab_find_tagged_type\n                               (param_1,param_2,*(undefined8 *)(param_3 + 4),param_3[6],0);\n    return pcVar3;\n  }\n  pcVar3 = *(char **)(*plVar4 + 8);\n  if (pcVar3 == (char *)0x0) goto LAB_0010b38c;\n  pcVar5 = (char *)debug_get_type_name_constprop_0(pcVar3);\n  if (pcVar5 != (char *)0x0) {\n    sVar6 = strlen(pcVar5);\n    if ((param_3[6] == (uint)sVar6) &&\n       (iVar2 = strncmp(pcVar5,*(char **)(param_3 + 4),(long)(int)param_3[6]), iVar2 == 0)) {\n      return pcVar3;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "stab_demangle_v3_arg",
                "stab_find_tagged_type",
                "strncmp",
                "abort",
                "free",
                "debug_get_type_name.constprop.0",
                "debug_make_type.constprop.0",
                "stab_demangle_v3_arglist",
                "fprintf",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "cplus_demangle_print",
                "debug_get_fields.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "strcmp",
                "debug_make_reference_type.isra.0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_demangle_v3_arglist"
            ],
            "imported": false,
            "current_name": "FUNC_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_and_store_lines_00104c36",
                "unaff_RBX": "current_line",
                "unaff_EBP": "line_count",
                "pbVar5": "current_char",
                "in_CL": "current_char_value",
                "unaff_R15": "start_of_line",
                "bVar4": "next_char_value",
                "pbVar3": "next_char",
                "unaff_R13": "file_path",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_address",
                "ppbVar2": "slot_ptr",
                "uVar1": "error_message",
                "pbVar2": "line_ptr"
            },
            "code": "\nvoid parse_and_store_lines_00104c36(void)\n\n{\n  undefined8 error_message;\n  byte **slot_ptr;\n  byte *next_char;\n  byte current_char_value;\n  byte next_char_value;\n  byte *current_line;\n  int line_count;\n  byte *current_char;\n  undefined8 file_path;\n  byte *unaff_R14;\n  byte *start_of_line;\n  undefined8 format_string;\n  undefined8 *return_address;\n  \n  do {\n    current_char = start_of_line;\n    if (current_char_value == 9) goto LAB_00104c3f;\n    do {\n      if ((current_char_value == 10) || (current_char_value == 0xd)) goto LAB_00114676;\n      if (current_char_value == 0) goto LAB_00114599;\n      current_char_value = current_char[1];\n      current_char = current_char + 1;\n    } while ((current_char_value != 0x20) && (current_char_value != 9));\n    if ((char)current_char_value < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_char_value & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      next_char_value = current_char[1];\n      if ((((((next_char_value == 9) || (next_char_value == 0x20)) &&\n            ((next_char_value = current_char[2], next_char_value == 9 || (next_char_value == 0x20)))) &&\n           ((next_char_value = current_char[3], next_char_value == 9 || (next_char_value == 0x20)))) &&\n          ((next_char_value = current_char[4], next_char_value == 9 || (next_char_value == 0x20)))) &&\n         ((next_char_value = current_char[5], next_char_value == 9 || (next_char_value == 0x20)))) {\n        next_char_value = current_char[6];\n        next_char = current_char + 6;\n        if ((next_char_value == 9) || (next_char_value == 0x20)) {\n          do {\n            do {\n              next_char_value = next_char[1];\n              next_char = next_char + 1;\n            } while (next_char_value == 0x20);\n          } while (next_char_value == 9);\n        }\n      }\n      if ((0xd < next_char_value) || ((-0x2402L >> (next_char_value & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        non_fatal(error_message,format_string,line_count);\n      }\n    }\nLAB_00114599:\n    *current_char = 0;\n    if (start_of_line < current_char) {\n      slot_ptr = (byte **)htab_find_slot();\n      *slot_ptr = start_of_line;\n    }\n    line_count = line_count + 1;\n    current_char = current_line;\n    if (unaff_R14[1] == 0) {\n      *return_address = file_path;\n      return;\n    }\n    for (; next_char_value = *current_char, unaff_R14 = current_char, next_char_value != 10; current_char = current_char + 1) {\n      if ((char)next_char_value < '\\v') {\n        if (next_char_value == 0) {\n          next_char = current_char + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (next_char_value == 0xd) {\n          *current_char = 0;\n          next_char = current_char + 1;\n          if (current_char[1] == 10) {\n            next_char = current_char + 2;\n            unaff_R14 = current_char + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (next_char_value == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *current_char = 0;\n    if (current_char[1] == 0xd) {\n      unaff_R14 = current_char + 1;\n      next_char = current_char + 2;\n    }\n    else {\n      next_char = current_char + 1;\n    }\nLAB_00114553:\n    current_char_value = *current_line;\n    start_of_line = current_line;\n    while (current_line = next_char, current_char_value == 0x20) {\nLAB_00104c3f:\n      current_char = start_of_line + 1;\n      start_of_line = start_of_line + 1;\n      next_char = current_line;\n      current_char_value = *current_char;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_and_store_lines_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "improve_and_readability_0010554f",
                "param_7": "param_elf_file",
                "param_12": "param_gap_fill_size",
                "param_14": "param_gap_fill_buffer",
                "param_17": "param_section_map",
                "param_30": "longPointerVar30",
                "param_31": "param_num_sections",
                "param_40": "param_gap_fill_offsets",
                "param_41": "byteVar41",
                "param_42": "param_strip_symbols_str",
                "param_43": "param_strip_symbols_char",
                "param_44": "shortVar44",
                "bVar2": "byteVar2",
                "cVar7": "charVar7",
                "cVar8": "charVar8",
                "uVar5": "undefinedVar5",
                "uVar6": "ushortVar6",
                "uVar9": "undefined4Var9",
                "iVar10": "intVar10",
                "iVar11": "intVar11",
                "iVar27": "intVar27",
                "lVar14": "longVar14",
                "lVar23": "longVar23",
                "lVar37": "longVar37",
                "in_stack_00000068": "longTupleVar1",
                "in_stack_000000d8": "longVar2",
                "in_stack_000000f8": "longTupleVar2",
                "puVar33": "pointerVar33",
                "puVar26": "undefined8PointerVar26",
                "puVar30": "ulongPointerVar30",
                "plVar28": "longPointerVar28",
                "plVar15": "longPointerVar15",
                "plVar20": "longPointerVar20",
                "plVar25": "longPointerVar25",
                "puVar4": "undefined8PointerVar4",
                "puVar1": "uintPointerVar1",
                "puVar32": "undefined4PointerVar32",
                "ppcVar34": "charPointerPointerVar34",
                "ppuVar36": "undefinedPointerPointerVar36",
                "__ptr_02": "sectionNamesArray",
                "__ptr": "undefinedPointer",
                "sympp": "symbolPointersArray",
                "isympp": "inputSymbolPointersArray",
                "_param_9": "intVar9",
                "_param_41": "byteVar41",
                "_param_15": "intPointerVar15",
                "param_15": "intPointerVar15",
                "add_sym_list": "addSymbolList",
                "add_symbols": "addSymbols",
                "merge_notes": "mergeNotes",
                "discard_locals": "discardLocals",
                "localize_hidden": "localizeHidden",
                "change_leading_char": "changeLeadingChar",
                "remove_leading_char": "removeLeadingChar",
                "keep_section_symbols": "keepSectionSymbols",
                "strip_symbols": "stripSymbols",
                "strip_specific_htab": "stripSpecificHashtable",
                "keep_specific_htab": "keepSpecificHashtable",
                "localize_specific_htab": "localizeSpecificHashtable",
                "globalize_specific_htab": "globalizeSpecificHashtable",
                "keepglobal_specific_htab": "keepGlobalSpecificHashtable",
                "weaken_specific_htab": "weakenSpecificHashtable",
                "strip_unneeded_htab": "stripUnneededHashtable",
                "uVar16": "undefined8Var16",
                "uVar17": "undefined8Var17",
                "uVar21": "ulongVar21",
                "uVar29": "ulongVar29",
                "unaff_R14": "unaffectedRegister14",
                "pcVar31": "charPointerVar31"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 improveAndReadability_0010554f(void)\n\n{\n  uint *uintPointerVar1;\n  byte byteVar2;\n  code *pcVar3;\n  undefined8 *undefined8PointerVar4;\n  undefined undefinedVar5;\n  ushort ushortVar6;\n  char charVar7;\n  char charVar8;\n  undefined4 undefined4Var9;\n  int intVar10;\n  int intVar11;\n  uint uVar12;\n  uint uVar13;\n  long longVar14;\n  long *longPointerVar15;\n  undefined8 undefined8Var16;\n  undefined *undefinedPointer;\n  undefined8 undefined8Var17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *longPointerVar20;\n  void *undefinedPointer_00;\n  void *undefinedPointer_01;\n  ulong ulongVar21;\n  char *__s;\n  char *pcVar22;\n  long longVar23;\n  ulong uVar24;\n  long *longPointerVar25;\n  undefined8 *undefined8PointerVar26;\n  int intVar27;\n  long *longPointerVar28;\n  ulong ulongVar29;\n  ulong *ulongPointerVar30;\n  char *charPointerVar31;\n  undefined4 *undefined4PointerVar32;\n  undefined *pointerVar33;\n  long *in_R10;\n  char **charPointerPointerVar34;\n  void *pvVar35;\n  undefined8 *unaffectedRegister14;\n  undefined **undefinedPointerPointerVar36;\n  long longVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_elf_file;\n  ulong param_8;\n  char param_9;\n  undefined4 *sectionNamesArray;\n  ulong param_gap_fill_size;\n  char *param_13;\n  undefined *param_gap_fill_buffer;\n  uint intPointerVar15;\n  long *param_section_map;\n  undefined8 longTupleVar1;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *longPointerVar30;\n  ulong param_num_sections;\n  long param_32;\n  long longVar2;\n  void *param_33;\n  long param_34;\n  undefined8 longTupleVar2;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_gap_fill_offsets;\n  char byteVar41;\n  char *param_strip_symbols_str;\n  undefined param_strip_symbols_char;\n  short shortVar44;\n  \n  bVar39 = 0;\n  if ((gap_fill_set == '\\0') && (pad_to_set == '\\0')) {\n    param_gap_fill_size = 0;\n    param_gap_fill_buffer = (undefined *)0x0;\n    param_section_map = (long *)0x0;\n    ulongVar29 = param_gap_fill_size;\n  }\n  else {\n    longVar14 = (ulong)longTupleVar1._4_4_ * 8;\n    param_section_map = (long *)xmalloc(longVar14);\n    param_gap_fill_offsets = param_section_map;\n    bfd_map_over_sections(param_elf_file,get_sections,&stack0x00000140);\n    qsort(param_section_map,(ulong)longTupleVar1._4_4_,8,compare_section_lma);\n    param_gap_fill_buffer = (undefined *)xmalloc(longVar14);\n    bVar38 = gap_fill_set != '\\0';\n    pointerVar33 = param_gap_fill_buffer;\n    for (; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *pointerVar33 = 0;\n      pointerVar33 = pointerVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      ulongVar29 = 0;\n      param_gap_fill_size = 0;\n      do {\n        ulongPointerVar30 = (ulong *)(param_gap_fill_buffer + ulongVar29 * 8);\n        longPointerVar28 = param_section_map + ulongVar29;\n        ulongVar21 = param_gap_fill_size;\n        do {\n          param_gap_fill_size = ulongVar21;\n          if (longTupleVar1._4_4_ - 1 <= (uint)ulongVar29) goto LAB_00107cd1;\n          ulongVar29 = (ulong)((uint)ulongVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_elf_file,*longPointerVar28);\n          uVar13 = bfd_octets_per_byte(param_elf_file);\n          longVar14 = *longPointerVar28;\n          if ((*(uint *)(longVar14 + 0x24) & 0x102) != 0x102) break;\n          ulongVar21 = (ulong)uVar13 * *(long *)(longPointerVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(longVar14 + 0x38) + *(long *)(longVar14 + 0x40);\n          if (ulongVar21 <= uVar24) break;\n          ulongVar21 = ulongVar21 - uVar24;\n          charVar7 = bfd_set_section_size();\n          if (charVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            bfd_nonfatal_message(0,param_elf_file,*longPointerVar28);\n            status = 1;\n            goto LAB_00107cd1;\n          }\n          *ulongPointerVar30 = ulongVar21;\n          longPointerVar28 = longPointerVar28 + 1;\n          ulongPointerVar30 = ulongPointerVar30 + 1;\n        } while (param_gap_fill_size < ulongVar21);\n      } while( true );\n    }\n    param_gap_fill_size = 0;\nLAB_00107cd1:\n    ulongVar29 = param_gap_fill_size;\n    if (pad_to_set != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_elf_file);\n      longVar14 = param_section_map[longTupleVar1._4_4_ - 1];\n      ulongVar21 = pad_to * (ulong)uVar12;\n      uVar24 = *(long *)(longVar14 + 0x40) + (ulong)uVar12 * *(long *)(longVar14 + 0x38);\n      if (uVar24 < ulongVar21) {\n        charVar7 = bfd_set_section_size();\n        if (charVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          bfd_nonfatal_message(0,param_elf_file,param_section_map[longTupleVar1._4_4_ - 1]);\n          status = 1;\n        }\n        else {\n          ulongVar29 = ulongVar21 - uVar24;\n          *(ulong *)(param_gap_fill_buffer + (ulong)(longTupleVar1._4_4_ - 1) * 8) = ulongVar29;\n          if (ulongVar29 <= param_gap_fill_size) {\n            ulongVar29 = param_gap_fill_size;\n          }\n        }\n      }\n    }\n  }\n  param_gap_fill_size = ulongVar29;\n  longPointerVar28 = inputSymbolPointersArray;\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    sectionNamesArray = (undefined4 *)0x0;\n  }\n  else {\n    undefinedPointerPointerVar36 = &names_0;\n    sectionNamesArray = (undefined4 *)xmalloc(0x60);\n    undefined4PointerVar32 = sectionNamesArray;\n    for (longVar14 = 0x18; longVar14 != 0; longVar14 = longVar14 + -1) {\n      *undefined4PointerVar32 = 0;\n      undefined4PointerVar32 = undefined4PointerVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      pointerVar33 = *undefinedPointerPointerVar36;\n      longVar14 = bfd_get_section_by_name(unaffectedRegister14,pointerVar33);\n      longVar37 = bfd_get_section_by_name();\n      if ((longVar14 != 0) && (longVar37 != 0)) {\n        longVar23 = *(long *)(longVar14 + 0x40);\n        undefinedPointer_00 = (void *)xmalloc(longVar23);\n        charVar7 = bfd_get_section_contents(unaffectedRegister14,longVar14,undefinedPointer_00,0,longVar23);\n        if (charVar7 == '\\0') {\n          undefined4Var9 = bfd_get_error();\n          bfd_errmsg(undefined4Var9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n          free(param_13);\n          free(undefinedPointer_00);\n        }\n        else {\n          ulongVar29 = *(ulong *)(longVar37 + 0x40);\n          undefinedPointer_01 = (void *)xmalloc(ulongVar29 + 1);\n          param_9 = bfd_get_section_contents(unaffectedRegister14,longVar37,undefinedPointer_01,0);\n          if (param_9 == '\\0') {\n            undefined4Var9 = bfd_get_error();\n            bfd_errmsg(undefined4Var9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaffectedRegister14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)undefinedPointer_01 + ulongVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)start_stab_constprop_0(unaffectedRegister14,1,longPointerVar28),\n               param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = undefinedPointer_00; pvVar35 <= (void *)((long)undefinedPointer_00 + longVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                ulongVar21 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar35);\n                byteVar2 = *(byte *)((long)pvVar35 + 4);\n                undefined4Var9 = (**(code **)(unaffectedRegister14[1] + 0x58))((long)pvVar35 + 6);\n                longVar14 = (**(code **)(unaffectedRegister14[1] + 0x40))((long)pvVar35 + 8);\n                if (byteVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + longVar14;\n                }\n                else {\n                  uVar24 = (ulongVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < ulongVar29) {\n                    charPointerVar31 = (char *)((long)undefinedPointer_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(charPointerVar31);\n                      if (((sVar18 == 0) || (pcVar22 = charPointerVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)undefinedPointer_00 + longVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      intVar10 = (**(code **)(unaffectedRegister14[1] + 0x40))(pvVar35);\n                      ulongVar21 = (ulong)(uint)(intVar10 + (int)param_23);\n                      if (ulongVar29 <= ulongVar21) break;\n                      charPointerVar31 = (char *)concat(charPointerVar31,(long)undefinedPointer_01 + ulongVar21,0);\n                      *pcVar22 = '\\';\n                      free(param_24);\n                      param_24 = charPointerVar31;\n                    }\n                    undefined8Var17 = *unaffectedRegister14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,undefined8Var17,pointerVar33,((long)pvVar35 - (long)undefinedPointer_00) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)byteVar2,undefined4Var9,longVar14,charPointerVar31);\n                    charVar7 = parse_stab(sectionNamesArray,param_13,byteVar2);\n                    if (charVar7 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(param_24);\n                      free(param_13);\n                      free(undefinedPointer_00);\n                      free(undefinedPointer_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    undefined8Var17 = *unaffectedRegister14;\n                    charPointerVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,charPointerVar31,undefined8Var17,pointerVar33,((long)pvVar35 - (long)undefinedPointer_00) / 0xc,\n                            ulongVar21 & 0xffffffff,(ulong)byteVar2,((long)pvVar35 - (long)undefinedPointer_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(undefinedPointer_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(undefinedPointer_01);\n          free(undefinedPointer_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      undefinedPointerPointerVar36 = undefinedPointerPointerVar36 + 2;\n    } while (undefinedPointerPointerVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (charVar7 = finish_stab(), charVar7 == '\\0')) {\nLAB_00105981:\n      free(sectionNamesArray);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaffectedRegister14[1] + 8) == 1) {\n      longVar14 = 0;\n      for (longPointerVar15 = longPointerVar28; longPointerVar15 < longPointerVar28 + param_8; longPointerVar15 = longPointerVar15 + 1) {\n        (**(code **)(unaffectedRegister14[1] + 0x218))(unaffectedRegister14,*longPointerVar15,&stack0x00000140);\n        if (byteVar41 == '-') {\n          if (((longVar14 == 0) && (longVar14 = start_stab_constprop_0(unaffectedRegister14,0,longPointerVar28), longVar14 == 0))\n             || ((param_strip_symbols_str == (char *)0x0 || (*param_strip_symbols_str == '\\0')))) goto LAB_00105981;\n          charPointerVar31 = (char *)0x0;\n          pcVar22 = param_strip_symbols_str;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (longPointerVar15 + 1 < longPointerVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(longPointerVar15[1] + 8),0);\n            free(__s);\n            free(charPointerVar31);\n            longPointerVar15 = longPointerVar15 + 1;\n            charPointerVar31 = pcVar22;\n          }\n          save_stab(param_strip_symbols_char,(int)shortVar44,param_gap_fill_offsets,pcVar22);\n          param_9 = parse_stab(sectionNamesArray,longVar14,param_strip_symbols_char);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((longVar14 != 0) && (charVar7 = finish_stab(), charVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaffectedRegister14[1] + 8) == 2) && (param_8 != 0)) {\n        param_gap_fill_offsets = (long *)0x0;\n        longPointerVar30 = longPointerVar28;\n        param_32 = 0;\n        param_num_sections = param_8;\n        longVar2 = 0;\n        undefined8PointerVar26 = (undefined8 *)&stack0x00000148;\n        for (longVar14 = 0x22; longVar14 != 0; longVar14 = longVar14 + -1) {\n          *(undefined4 *)undefined8PointerVar26 = 0;\n          undefined8PointerVar26 = (undefined8 *)((long)undefined8PointerVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        charVar7 = '\\0';\n        intPointerVar15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            longVar14 = longPointerVar28[param_32];\n            charVar8 = bfd_coff_get_syment(unaffectedRegister14,longVar14,&stack0x000000e0);\n            longVar37 = longVar2;\n            if (charVar8 == '\\0') {\n              undefined4Var9 = bfd_get_error();\n              bfd_errmsg(undefined4Var9);\n              charPointerVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            charPointerVar31 = *(char **)(longVar14 + 8);\n            undefined8PointerVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            longVar2 = (ulong)param_37 + 1 + longVar2;\n            if (param_37 != 0) {\n              undefined8PointerVar26 = &stack0x00000110;\n              charVar8 = bfd_coff_get_auxent(unaffectedRegister14,longVar14,0);\n              if (charVar8 == '\\0') {\n                undefined4Var9 = bfd_get_error();\n                bfd_errmsg(undefined4Var9);\n                charPointerVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)longVar37) break;\n            if (param_36 != 0x67) {\n              charVar8 = debug_set_filename(sectionNamesArray);\n              if (charVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            charVar8 = debug_set_filename(sectionNamesArray);\n            if (charVar8 == '\\0') goto LAB_00105981;\n          }\n          ushortVar6 = longTupleVar2._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            longVar23 = parse_coff_type_lto_priv_0(unaffectedRegister14,&stack0x000000c0,&stack0x00000140);\n            if (longVar23 == 0) break;\n            charVar8 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,longVar14,longVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (longTupleVar2._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)longTupleVar2._6_2_ & *(uint *)(unaffectedRegister14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaffectedRegister14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                intPointerVar15 = (int *)(**(code **)(unaffectedRegister14[1] + 0x238))(unaffectedRegister14);\n                uVar12 = (uint)ushortVar6;\n                param_13 = charPointerVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              intVar10 = strcmp(charPointerVar31,\".bb\");\n              if (intVar10 == 0) {\n                charVar8 = debug_start_block(sectionNamesArray);\n              }\n              else {\n                intVar10 = strcmp(charPointerVar31,\".eb\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                charVar8 = debug_end_block(sectionNamesArray);\n              }\n              break;\n            case 0x65:\n              intVar10 = strcmp(charPointerVar31,\".bf\");\n              if (intVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaffectedRegister14[0x22] + 0x44) & 0x1f);\n                  longVar37 = parse_coff_type_lto_priv_0\n                                     (unaffectedRegister14,&stack0x000000c0,&stack0x00000140,longVar37,\n                                      uVar13 ^ (uVar12 ^ uVar13) & *(uint *)(unaffectedRegister14[0x22] + 0x38)\n                                      ,undefined8PointerVar26,0,sectionNamesArray);\n                  if ((longVar37 == 0) || (charVar7 = debug_record_function(sectionNamesArray), charVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (intPointerVar15 != (int *)0x0) {\n                    intVar10 = 0;\n                    if (param_37 != 0) {\n                      intVar10 = param_39 - 1;\n                    }\n                    longVar14 = *(long *)(*(long *)(longVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      intVar27 = intPointerVar15[4];\n                      if (intVar27 == 0) break;\n                      charVar8 = debug_record_line(sectionNamesArray,intVar10 + intVar27,\n                                                *(long *)(intPointerVar15 + 6) + longVar14);\n                      intPointerVar15 = intPointerVar15 + 4;\n                      if (charVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  intPointerVar15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charPointerVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                intVar10 = strcmp(charPointerVar31,\".ef\");\n                if (intVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar7 != '\\0') {\n                  charVar7 = debug_end_function(sectionNamesArray);\n                  if (charVar7 == '\\0') goto LAB_00105981;\n                  charVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                charPointerVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              undefined8Var17 = dcgettext(0,charPointerVar31,5);\n              non_fatal(undefined8Var17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (charVar8 != '\\0');\n      }\n      else {\n        charPointerVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        undefined8Var17 = dcgettext(0,charPointerVar31,5);\n        non_fatal(undefined8Var17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_elf_file + 0x44) & 0x42) != 0) && ((*(uint *)(param_elf_file + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_elf_file + 8) + 0x20) == '\\0') && (keepSectionSymbols == '\\0')) {\n      if (param_8 != 0) {\n        longPointerVar28 = inputSymbolPointersArray + param_8;\n        longPointerVar15 = inputSymbolPointersArray;\n        do {\n          uVar12 = *(uint *)(*longPointerVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*longPointerVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          longPointerVar15 = longPointerVar15 + 1;\n        } while (longPointerVar28 != longPointerVar15);\n      }\n    }\n    else {\n      for (longVar14 = *(long *)(param_elf_file + 0x90); longVar14 != 0; longVar14 = *(long *)(longVar14 + 8)) {\n        if (*(long *)(longVar14 + 0xe8) != 0) {\n          uintPointerVar1 = (uint *)(*(long *)(longVar14 + 0xe8) + 0x18);\n          *uintPointerVar1 = *uintPointerVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((stripSymbols == 2) || (stripSymbols == 7)) {\nLAB_001059fe:\n    if (stripSymbols == 7) {\nLAB_00105a3b:\n      longVar14 = xmalloc();\n      longPointerVar28 = inputSymbolPointersArray;\n      intPointerVar15 = *(uint *)((long)unaffectedRegister14 + 0x44) & 0x42;\n      osymbolPointersArray = longVar14;\n      if (param_8 == 0) {\n        ulongVar29 = 0;\n      }\n      else {\n        ulongVar29 = 0;\n        intVar9 = 0;\n        do {\n          intVar10 = addSymbols;\n          longPointerVar15 = (long *)longPointerVar28[intVar9];\n          pcVar3 = (code *)longPointerVar15[4];\n          uVar12 = *(uint *)(longPointerVar15 + 3);\n          longPointerVar20 = (long *)longPointerVar15[1];\n          longPointerVar25 = longPointerVar20;\n          if (addSymbolList != (undefined8 *)0x0) {\n            intVar27 = 0;\n            undefined8PointerVar26 = addSymbolList;\n            while ((intVar27 < intVar10 && (charPointerVar31 = (char *)undefined8PointerVar26[5], charPointerVar31 != (char *)0x0))) {\n              if (charPointerVar31 != \"\") {\n                intVar11 = strcmp(charPointerVar31,(char *)longPointerVar20);\n                if (intVar11 == 0) {\n                  free(charPointerVar31);\n                  ulongVar21 = ulongVar29 + 1;\n                  undefined8PointerVar26[5] = \"\";\n                  undefined8Var16 = create_new_symbol(undefined8PointerVar26);\n                  undefined8Var17 = redefine_specific_htab;\n                  *(undefined8 *)(longVar14 + ulongVar29 * 8) = undefined8Var16;\n                  longVar37 = htab_elements(undefined8Var17);\n                  if ((longVar37 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                undefined8PointerVar26 = (undefined8 *)*undefined8PointerVar26;\n              }\n              intVar27 = intVar27 + 1;\n            }\n          }\n          longVar37 = htab_elements(redefine_specific_htab);\n          ulongVar21 = ulongVar29;\n          if ((longVar37 != 0) || (section_rename_list != (char **)0x0)) {\n            if (longPointerVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)longPointerVar20 == '_') && (*(char *)((long)longPointerVar20 + 1) == '_')) &&\n                 (intVar10 = strcmp((char *)((ulong)(*(char *)((long)longPointerVar20 + 2) == '_') +\n                                          (long)longPointerVar20),\"__gnu_lto_slim\"), intVar10 == 0)) {\n                undefined8Var17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(undefined8Var17);\n              }\n            }\n            byteVar41 = 0;\n            param_gap_fill_offsets = longPointerVar20;\n            longVar37 = htab_find(redefine_specific_htab);\n            if (((longVar37 == 0) || (longPointerVar25 = *(long **)(longVar37 + 8), longPointerVar20 == longPointerVar25)) &&\n               (longPointerVar25 = longPointerVar20, charPointerPointerVar34 = section_rename_list, (uVar12 & 0x100) != 0)) {\n              for (; charPointerPointerVar34 != (char **)0x0; charPointerPointerVar34 = (char **)charPointerPointerVar34[3]) {\n                intVar10 = strcmp(*charPointerPointerVar34,(char *)longPointerVar20);\n                if (intVar10 == 0) {\n                  longPointerVar25 = (long *)charPointerPointerVar34[1];\n                  break;\n                }\n              }\n            }\n            longPointerVar15[1] = (long)longPointerVar25;\n            charVar7 = *(char *)longPointerVar25;\n            if (charVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            charPointerVar31 = prefix_symbols_string;\n            if ((changeLeadingChar != '\\0') && (*(char *)(*(long *)(param_elf_file + 8) + 0x1c) != '\\0'))\n            {\n              longVar37 = unaffectedRegister14[1];\n              charVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          charVar7 = *(char *)longPointerVar20;\n          if (charVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          charPointerVar31 = prefix_symbols_string;\n          longVar37 = unaffectedRegister14[1];\n          if (*(char *)(longVar37 + 0x1c) == charVar7) {\n            if (changeLeadingChar == '\\0') {\n              if ((removeLeadingChar == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(longPointerVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              longPointerVar25 = (long *)((long)longPointerVar25 + 1);\n              longPointerVar15[1] = (long)longPointerVar25;\n              goto joined_r0x00106565;\n            }\n            charVar7 = *(char *)(*(long *)(param_elf_file + 8) + 0x1c);\n            if (charVar7 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              longPointerVar25 = (long *)((long)longPointerVar25 + 1);\n              longPointerVar15[1] = (long)longPointerVar25;\n              sVar18 = strlen((char *)longPointerVar25);\n              longVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(charPointerVar31);\n              longPointerVar20 = (long *)xmalloc(sVar18 + longVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)longPointerVar25 = charVar7;\n            longPointerVar15[1] = (long)longPointerVar25;\n            ulongVar29 = ulongVar21;\n          }\n          else {\n            if ((changeLeadingChar == '\\0') || (*(char *)(*(long *)(param_elf_file + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              ulongVar29 = ulongVar21;\n              if (charPointerVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)longPointerVar25);\n              sVar19 = strlen(charPointerVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              longPointerVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              charPointerVar31 = prefix_symbols_string;\n              if ((*(char *)(longVar37 + 0x1c) != '\\0') && (charVar7 != *(char *)(longVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)longPointerVar25);\n              longVar37 = sVar18 + 2;\n              if (charPointerVar31 != (char *)0x0) goto LAB_001066bc;\n              longPointerVar20 = (long *)xmalloc(longVar37);\nLAB_001066d0:\n              __dest = (long *)((long)longPointerVar20 + 1);\n              *(char *)longPointerVar20 = *(char *)(*(long *)(param_elf_file + 8) + 0x1c);\n            }\n            charPointerVar31 = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy((char *)__dest,prefix_symbols_string);\n              sVar18 = strlen(charPointerVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)longPointerVar25);\n            longPointerVar15[1] = (long)longPointerVar20;\n            longPointerVar25 = longPointerVar20;\n            ulongVar29 = ulongVar21;\n          }\nLAB_00105b32:\n          if (stripSymbols == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(longPointerVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((intPointerVar15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(longPointerVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (intVar10 = bfd_decode_symclass(longPointerVar15), intVar10 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                longVar37 = htab_find();\n                if (longVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                byteVar41 = byteVar41 & 0xffffffffffffff00;\n                param_gap_fill_offsets = longPointerVar25;\n                htab_traverse(stripSpecificHashtable,is_specified_symbol_predicate,&stack0x00000140);\n                if (byteVar41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(longPointerVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaffectedRegister14[1] + 8) != 2) ||\n                    (longVar37 = *(long *)(longPointerVar15[4] + 0xd0), longVar37 == 0)) ||\n                   (*(long *)(longVar37 + 0x40) == 0)) {\n                  if ((stripSymbols == 3) || (discardLocals == 2)) goto LAB_001067a8;\n                  if (discardLocals == 1) {\n                    charVar7 = bfd_is_local_label(unaffectedRegister14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              charVar7 = convert_debugging;\n              if (1 < stripSymbols - 2U) {\njoined_r0x00106a11:\n                if (charVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (stripSymbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            longVar37 = htab_find();\n            if (longVar37 != 0) {\nLAB_0010687f:\n              undefined8Var17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(undefined8Var17);\n              status = 1;\n            }\n          }\n          else {\n            byteVar41 = byteVar41 & 0xffffffffffffff00;\n            param_gap_fill_offsets = longPointerVar25;\n            htab_traverse(stripSpecificHashtable,is_specified_symbol_predicate,&stack0x00000140);\n            if (byteVar41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              byteVar41 = byteVar41 & 0xffffffffffffff00;\n              param_gap_fill_offsets = longPointerVar25;\n              htab_traverse(stripUnneededHashtable,is_specified_symbol_predicate,&stack0x00000140);\n              if (byteVar41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            longVar37 = htab_find();\n            if (longVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              longVar37 = htab_find();\n              if (longVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              byteVar41 = byteVar41 & 0xffffffffffffff00;\n              param_gap_fill_offsets = longPointerVar25;\n              htab_traverse(keepSpecificHashtable,is_specified_symbol_predicate,&stack0x00000140);\n              if (byteVar41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            charVar7 = is_strip_section_isra_0(longPointerVar15[4]);\n            if (charVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  charVar7 = is_specified_symbol(longPointerVar25);\n                  if ((charVar7 == '\\0') &&\n                     ((longVar37 = htab_elements(keepGlobalSpecificHashtable), longVar37 == 0 ||\n                      (charVar7 = is_specified_symbol(longPointerVar25), charVar7 != '\\0')))) {\n                    if (((((localizeHidden == '\\0') ||\n                          (uVar13 = *(uint *)(longPointerVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (longVar37 = *longPointerVar15, longVar37 == 0)) ||\n                        ((*(int *)(*(long *)(longVar37 + 8) + 8) != 5 ||\n                         (*(long *)(longVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)longPointerVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(longPointerVar15 + 3);\n                  }\n                  *(uint *)(longPointerVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (charVar7 = is_specified_symbol(longPointerVar25), charVar7 != '\\0')) {\n                  *(uint *)(longPointerVar15 + 3) = *(uint *)(longPointerVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (charVar7 = is_specified_symbol(longPointerVar25), charVar7 != '\\0')) {\n                  *(uint *)(longPointerVar15 + 3) = *(uint *)(longPointerVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(longVar14 + ulongVar29 * 8) = longPointerVar15;\n              ulongVar29 = ulongVar29 + 1;\n            }\n          }\n          intVar9 = intVar9 + 1;\n        } while (param_8 != intVar9);\n      }\n      if (addSymbolList != (undefined8 *)0x0) {\n        undefined8PointerVar26 = addSymbolList;\n        intVar10 = addSymbols;\n        for (longVar37 = 0; longVar37 < intVar10; longVar37 = longVar37 + 1) {\n          charPointerVar31 = (char *)undefined8PointerVar26[5];\n          if (charPointerVar31 == (char *)0x0) {\n            longVar23 = ulongVar29 * 8;\n            ulongVar29 = ulongVar29 + 1;\n            undefined8Var17 = create_new_symbol(undefined8PointerVar26,param_elf_file);\n            *(undefined8 *)(longVar14 + longVar23) = undefined8Var17;\n            intVar10 = addSymbols;\n          }\n          else if (charPointerVar31 != \"\") {\n            undefined8Var17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(undefined8Var17,charPointerVar31);\n          }\n          undefined8PointerVar26 = (undefined8 *)*undefined8PointerVar26;\n        }\n      }\n      bVar38 = convert_debugging == '\\0';\n      *(undefined8 *)(longVar14 + ulongVar29 * 8) = 0;\n      if ((bVar38) || (sectionNamesArray == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = ulongVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      intVar10 = *(int *)(*(undefined8 **)(param_elf_file + 8) + 1);\n      if ((intVar10 == 5) || (intVar10 == 2)) {\n        param_33 = (void *)0x0;\n        charVar7 = write_stabs_in_sections_debugging_info_constprop_0\n                          (param_elf_file,sectionNamesArray,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                           &stack0x00000140);\n        if (charVar7 != '\\0') {\n          longVar14 = bfd_make_section_with_flags(param_elf_file,\".stab\",0x2108);\n          longVar37 = bfd_make_section_with_flags(param_elf_file,\".stabstr\",0x2108);\n          if ((((longVar14 == 0) || (longVar37 == 0)) ||\n              (charVar7 = bfd_set_section_size(longVar14,param_38), charVar7 == '\\0')) ||\n             (charVar7 = bfd_set_section_size(longVar37,param_gap_fill_offsets), charVar7 == '\\0')) {\n            charPointerVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(longVar14 + 0x7c) = 2;\n            *(undefined4 *)(longVar37 + 0x7c) = 0;\n            charVar7 = bfd_set_section_contents(param_elf_file,longVar14,longPointerVar30,0,param_38);\n            if ((charVar7 != '\\0') &&\n               (charVar7 = bfd_set_section_contents(param_elf_file,longVar37,param_33,0,param_gap_fill_offsets), charVar7 != '\\0')\n               ) {\n              free(sectionNamesArray);\n              goto LAB_00105cfa;\n            }\n            charPointerVar31 = \"can\\'t set debugging section contents\";\n          }\n          undefined8Var17 = dcgettext(0,charPointerVar31,5);\n          bfd_nonfatal_message(0,param_elf_file,0,undefined8Var17);\n          free(param_33);\n          free(sectionNamesArray);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        undefined8Var17 = **(undefined8 **)(param_elf_file + 8);\n        undefined8Var16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_elf_file,0,undefined8Var16,undefined8Var17);\n      }\n      free(sectionNamesArray);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaffectedRegister14,mark_symbols_used_in_relocations,inputSymbolPointersArray);\n      intVar10 = bfd_get_error();\n      if (intVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((stripSymbols - 3U < 4) || ((discardLocals != 0 || (localizeHidden != '\\0'))))\n    goto LAB_00105a07;\n    longVar14 = htab_elements(stripSpecificHashtable);\n    if (((longVar14 != 0) ||\n        ((((longVar14 = htab_elements(keepSpecificHashtable), longVar14 != 0 ||\n           (longVar14 = htab_elements(localizeSpecificHashtable), longVar14 != 0)) ||\n          (longVar14 = htab_elements(globalizeSpecificHashtable), longVar14 != 0)) ||\n         ((longVar14 = htab_elements(keepGlobalSpecificHashtable), longVar14 != 0 ||\n          (longVar14 = htab_elements(weakenSpecificHashtable), longVar14 != 0)))))) ||\n       ((((longVar14 = htab_elements(redefine_specific_htab), longVar14 != 0 ||\n          ((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')))) ||\n         (sections_copied != '\\0')) ||\n        ((((convert_debugging != '\\0' || (changeLeadingChar != '\\0')) ||\n          (removeLeadingChar != '\\0')) ||\n         (((section_rename_list != (char **)0x0 || (weaken != '\\0')) || (addSymbols != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_elf_file,osymbolPointersArray,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaffectedRegister14,copy_relocations_in_section,param_elf_file);\n    bfd_map_over_sections(unaffectedRegister14,copy_section,param_elf_file);\n    for (undefined8PointerVar26 = add_sections; undefined8PointerVar4 = update_sections, undefined8PointerVar26 != (undefined8 *)0x0;\n        undefined8PointerVar26 = (undefined8 *)*undefined8PointerVar26) {\n      charVar7 = bfd_set_section_contents(param_elf_file,undefined8PointerVar26[5],undefined8PointerVar26[4],0,undefined8PointerVar26[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_elf_file,undefined8PointerVar26[5],0);\n        return 0;\n      }\n    }\n    for (; undefined8PointerVar4 != (undefined8 *)0x0; undefined8PointerVar4 = (undefined8 *)*undefined8PointerVar4) {\n      undefined8Var17 = *(undefined8 *)(undefined8PointerVar4[5] + 0x60);\n      charVar7 = bfd_set_section_contents(param_elf_file,undefined8Var17,undefined8PointerVar4[4],0,undefined8PointerVar4[3]);\n      if (charVar7 == '\\0') {\n        bfd_nonfatal_message(0,param_elf_file,undefined8Var17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((mergeNotes != '\\0') && (is_strip == 0)) {\n        undefined8Var17 = *unaffectedRegister14;\n        undefined8Var16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(undefined8Var16,undefined8Var17);\n      }\n    }\n    else {\n      longPointerVar28 = (long *)0x0;\n      for (undefined8PointerVar26 = *(undefined8 **)(param_elf_file + 0x90); undefined8PointerVar26 != (undefined8 *)0x0;\n          undefined8PointerVar26 = (undefined8 *)undefined8PointerVar26[1]) {\n        if (((mergeNotes != '\\0') && (*(int *)(*(long *)(param_elf_file + 8) + 8) == 5)) &&\n           ((*(int *)(undefined8PointerVar26[0x1a] + 4) == 7 &&\n            (charVar7 = startswith_lto_priv_0_lto_priv_0(*undefined8PointerVar26,\".gnu.build.attributes\"),\n            charVar7 != '\\0')))) {\n          if (longPointerVar28 == (long *)0x0) {\n            longPointerVar28 = in_R10;\n          }\n          longPointerVar15 = in_R10;\n          if (*(undefined8 **)(*longPointerVar28 + 0x60) == undefined8PointerVar26) {\nLAB_0010625f:\n            charPointerVar31 = \"error: failed to merge notes\";\n            if (longPointerVar28[1] != 0) {\n              charVar7 = bfd_set_section_contents(param_elf_file,undefined8PointerVar26,longPointerVar28[1],0,longPointerVar28[2]);\n              if (charVar7 == '\\0') {\n                undefined8Var17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_elf_file,undefined8PointerVar26,undefined8Var17);\n                return 0;\n              }\n              longPointerVar28 = (long *)longPointerVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              longPointerVar28 = longPointerVar15;\n              if (*(undefined8 **)(*longPointerVar15 + 0x60) == undefined8PointerVar26) goto LAB_0010625f;\n              longPointerVar28 = (long *)longPointerVar15[3];\n              longPointerVar15 = longPointerVar28;\n            } while (longPointerVar28 != (long *)0x0);\n            charPointerVar31 = \"error: failed to locate merged notes\";\n          }\n          undefined8Var17 = dcgettext(0,charPointerVar31,5);\n          bfd_nonfatal_message(0,param_elf_file,undefined8PointerVar26,undefined8Var17);\n        }\nLAB_001061be:\n      }\n      do {\n        longPointerVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = longPointerVar28;\n      } while (longPointerVar28 != (long *)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (charVar7 = bfd_fill_in_gnu_debuglink_section(param_elf_file,param_21), longVar14 = gnu_debuglink_filename\n       , charVar7 != '\\0')) {\n      if (param_gap_fill_buffer != (undefined *)0x0) {\n        if (0x2000 < param_gap_fill_size) {\n          param_gap_fill_size = 0x2000;\n        }\n        longVar14 = 0;\n        undefinedPointer = (undefined *)xmalloc(param_gap_fill_size);\n        undefinedVar5 = gap_fill;\n        pointerVar33 = undefinedPointer;\n        for (param_gap_fill_size = param_gap_fill_size & 0xffffffff; param_gap_fill_size != 0; param_gap_fill_size = param_gap_fill_size - 1) {\n          *pointerVar33 = undefinedVar5;\n          pointerVar33 = pointerVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)longVar14 < longTupleVar1._4_4_; longVar14 = longVar14 + 1) {\n          ulongVar29 = *(ulong *)(param_gap_fill_buffer + longVar14 * 8);\n          if (ulongVar29 != 0) {\n            longVar37 = *(long *)(*param_section_map + 0x40) - ulongVar29;\n            do {\n              ulongVar21 = 0x2000;\n              if (ulongVar29 < 0x2001) {\n                ulongVar21 = ulongVar29;\n              }\n              charVar7 = bfd_set_section_contents(param_elf_file,*param_section_map,undefinedPointer,longVar37,ulongVar21);\n              if (charVar7 == '\\0') {\n                bfd_nonfatal_message(0,param_elf_file,*param_section_map,0);\n                free(undefinedPointer);\n                return 0;\n              }\n              longVar37 = longVar37 + ulongVar21;\n              ulongVar29 = ulongVar29 - ulongVar21;\n            } while (ulongVar29 != 0);\n          }\n          param_section_map = param_section_map + 1;\n        }\n        free(undefinedPointer);\n        free(param_gap_fill_buffer);\n      }\n      undefined4Var9 = (**(code **)(*(long *)(param_elf_file + 8) + 0x140))(unaffectedRegister14);\n      if ((char)undefined4Var9 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return undefined4Var9;\n        }\n        charVar7 = bfd_alt_mach_code(param_elf_file,use_alt_mach_code & 0xffffffff);\n        ulongVar29 = use_alt_mach_code;\n        if (charVar7 == '\\0') {\n          undefined8Var17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(undefined8Var17,ulongVar29);\n          if (*(int *)(*(long *)(param_elf_file + 8) + 8) == 5) {\n            undefined8Var17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(undefined8Var17);\n            *(short *)(*(long *)(param_elf_file + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return undefined4Var9;\n          }\n          undefined8Var17 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(undefined8Var17);\n          return undefined4Var9;\n        }\n        return undefined4Var9;\n      }\n      undefined8Var17 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_elf_file,0,undefined8Var17);\n    }\n    else {\n      undefined8Var17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_elf_file,0,undefined8Var17,longVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "is_strip_section.isra.0",
                "is_specified_symbol",
                "finish_stab",
                "bfd_is_local_label",
                "fatal",
                "bfd_map_over_sections",
                "strlen",
                "concat",
                "dcgettext",
                "bfd_set_section_size",
                "create_new_symbol",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "bfd_set_symtab",
                "htab_find",
                "debug_end_block",
                "copy_section",
                "bfd_coff_get_syment",
                "strcmp",
                "debug_record_function",
                "non_fatal",
                "htab_traverse",
                "free",
                "bfd_map_over_sections",
                "debug_end_function",
                "fprintf",
                "debug_start_block",
                "free_saved_stabs",
                "strcpy",
                "parse_stab",
                "bfd_alt_mach_code",
                "bfd_decode_symclass",
                "debug_set_filename",
                "bfd_make_section_with_flags",
                "bfd_set_error",
                "bfd_errmsg",
                "debug_record_line",
                "save_stab",
                "startswith.lto_priv.0.lto_priv.0",
                "htab_elements",
                "bfd_fill_in_gnu_debuglink_section",
                "qsort",
                "mark_symbols_used_in_relocations",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_coff_get_auxent",
                "start_stab.constprop.0",
                "bfd_octets_per_byte",
                "get_sections",
                "bfd_set_section_contents",
                "bfd_get_error",
                "xstrdup",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "compare_section_lma",
                "bfd_get_section_contents",
                "parse_coff_symbol.constprop.0.isra.0",
                "is_specified_symbol_predicate",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "improve_and_readability_0010554f"
        },
        "FUN_00104230": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_00104230"
        },
        "FUN_00104110": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "stab_context"
            ],
            "imported": false,
            "current_name": "FUN_00104110"
        },
        "FUN_00128440": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128440",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128440"
        },
        "FUN_00104470": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "debug_type_samep",
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "FUN_0010554f",
                "stab_find_tagged_type",
                "find_section_list",
                "debug_set_class_id.lto_priv.0",
                "eq_string_redefnode",
                "main",
                "parse_stab",
                "setup_section",
                "is_strip_section_1.isra.0",
                "parse_stab_type",
                "stab_demangle_qualified",
                "debug_tag_type",
                "convert_efi_target",
                "debug_find_named_type",
                "skip_section"
            ],
            "imported": false,
            "current_name": "FUN_00104470"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_and_push_string_00109cf4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "formatSpecifier",
                "local_3c": "convertedString"
            },
            "code": "\nvoid convertAndPushString_00109cf4(undefined8 outputBuffer,undefined8 inputNumber,undefined4 formatSpecifier)\n\n{\n  char convertedString [28];\n  \n  sprintf(convertedString,\"%ld\",inputNumber);\n  stab_push_string(outputBuffer,convertedString,inputNumber,0,formatSpecifier);\n  return;\n}\n\n",
            "called": [
                "stab_push_string",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "stab_void_type.lto_priv.0",
                "stab_typedef_type.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_tag_type.lto_priv.0",
                "stab_bool_type.lto_priv.0",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_int_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "convert_and_push_string_00109cf4"
        },
        "FUN_00128320": {
            "renaming": {},
            "code": "\n\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strncasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128320",
            "calling": [
                "strncasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128320"
        },
        "FUN_00104350": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "list_supported_targets"
            ],
            "imported": false,
            "current_name": "FUN_00104350"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_entry_00109ab1",
                "param_1": "stab_string",
                "param_2": "parsed_numbers",
                "uVar1": "parsed_number",
                "pcVar2": "current_char",
                "uVar3": "result",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_stab_entry_00109ab1(char **stab_string,undefined4 *parsed_numbers,undefined8 param_3,undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined4 parsed_number;\n  char *current_char;\n  undefined8 result;\n  undefined return_value [16];\n  \n  current_char = *stab_string;\n  if (*current_char == '(') {\n    *stab_string = current_char + 1;\n    parsed_number = parse_number(stab_string,0);\n    *parsed_numbers = parsed_number;\n    if (**stab_string == ',') {\n      *stab_string = *stab_string + 1;\n      parsed_number = parse_number(stab_string,0,param_3);\n      parsed_numbers[1] = parsed_number;\n      if (**stab_string == ')') {\n        current_char = *stab_string + 1;\n        *stab_string = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    bad_stab(current_char);\n    result = 0;\n  }\n  else {\n    *parsed_numbers = 0;\n    current_char = (char *)parse_number(stab_string,0);\n    parsed_numbers[1] = (int)current_char;\nLAB_00109b25:\n    result = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  return_value._8_8_ = param_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "parse_number",
                "bad_stab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "parse_stab_entry_00109ab1"
        },
        "FUN_00128200": {
            "renaming": {},
            "code": "\n\n\n\nint close(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* close@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128200",
            "calling": [
                "close"
            ],
            "imported": false,
            "current_name": "FUN_00128200"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_and_strip_section_001159d0",
                "param_1": "address",
                "uVar1": "temp_result",
                "cVar2": "temp_char",
                "uVar3": "result",
                "lVar4": "group_signature",
                "lVar5": "current_signature"
            },
            "code": "\nundefined4 check_and_strip_section_001159d0(long address)\n\n{\n  undefined8 temp_result;\n  char temp_char;\n  undefined4 result;\n  long group_signature;\n  long current_signature;\n  \n  result = is_strip_section_1_isra_0();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(address + 0x27) & 2) == 0) {\n      return result;\n    }\n    group_signature = group_signature_isra_0(*(undefined8 *)(address + 0xd0),*(undefined8 *)(address + 0xe0));\n    if ((group_signature != 0) &&\n       (((temp_result = *(undefined8 *)(group_signature + 8), strip_symbols != 7 ||\n         (temp_char = is_specified_symbol(temp_result,keep_specific_htab), temp_char != '\\0')) &&\n        (temp_char = is_specified_symbol(temp_result,strip_specific_htab), temp_char == '\\0')))) {\n      group_signature = *(long *)(*(long *)(address + 0xd0) + 0xc0);\n      current_signature = group_signature;\n      do {\n        if (current_signature == 0) {\n          return 1;\n        }\n        temp_char = is_strip_section_1_isra_0(current_signature);\n        if (temp_char == '\\0') {\n          return result;\n        }\n        current_signature = *(long *)(*(long *)(current_signature + 0xd0) + 0xc0);\n      } while (group_signature != current_signature);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0",
                "is_specified_symbol",
                "group_signature.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "setup_section",
                "FUN_0010554f",
                "skip_section"
            ],
            "imported": false,
            "current_name": "check_and_strip_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "combine_strings_0010a77a",
                "param_1": "input",
                "__s": "string1",
                "lVar2": "ptr1",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "combinedString",
                "uVar1": "char1",
                "uVar3": "address1",
                "uVar4": "result"
            },
            "code": "\nundefined4 combineStrings_0010a77a(long input)\n\n{\n  undefined char1;\n  long ptr1;\n  char *string1;\n  undefined8 address1;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  \n  ptr1 = *(long *)(input + 0x60);\n  if ((ptr1 != 0) && (string1 = *(char **)(ptr1 + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(ptr1 + 0x18);\n    char1 = *(undefined *)(ptr1 + 0x1c);\n    address1 = *(undefined8 *)(ptr1 + 0x10);\n    string2 = (char *)stab_pop_type();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    combinedString = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(combinedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = stab_push_string(input,combinedString,address1,char1,result);\n    if ((char)result != '\\0') {\n      free(combinedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_0010a77a"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "handle_file_open_error_0010543c",
                "uVar1": "filePointer",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "unaff_RBP": "stackFramePointer"
            },
            "code": "\nvoid handleFileOpenError_0010543c(void)\n\n{\n  undefined8 filePointer;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  long stackFramePointer;\n  \n  errorNumber = __errno_location();\n  errorMessage = strerror(*errorNumber);\n  filePointer = *(undefined8 *)(stackFramePointer + 0x10);\n  translatedErrorMessage = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  fatal(translatedErrorMessage,filePointer,errorMessage);\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "__errno_location",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "section_add_load_file"
            ],
            "imported": false,
            "current_name": "handle_file_open_error_0010543c"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "retyped_function_0010a424",
                "param_1": "input_data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "condition",
                "cVar1": "result_char",
                "bVar2": "result_byte",
                "iVar3": "result_int",
                "uVar4": "result",
                "pcVar5": "str_data",
                "__ptr": "dynamic_array",
                "uVar6": "temp_result",
                "__s": "str",
                "sVar7": "size1",
                "sVar8": "size2",
                "__s_00": "new_str",
                "lVar9": "index",
                "bVar10": "temp_byte",
                "lVar11": "counter",
                "uVar12": "undefined_var"
            },
            "code": "\nundefined4 retyped_function_0010a424(long input_data,char flag,int count,char condition)\n\n{\n  char result_char;\n  byte result_byte;\n  int result_int;\n  undefined4 result;\n  char *str_data;\n  undefined8 *dynamic_array;\n  undefined8 temp_result;\n  char *str;\n  size_t size1;\n  size_t size2;\n  char *new_str;\n  long index;\n  byte temp_byte;\n  long counter;\n  undefined undefined_var;\n  \n  if ((flag == '\\0') && (result_char = stab_empty_type_lto_priv_0(), result_char == '\\0')) {\n    return 0;\n  }\n  temp_byte = *(byte *)(*(long *)(input_data + 0x60) + 0x1c);\n  str_data = (char *)stab_pop_type(input_data);\n  if (count < 0) {\n    dynamic_array = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    undefined_var = 1;\n    if (temp_byte != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      result_int = count + 1;\n      dynamic_array = (undefined8 *)xmalloc((long)result_int * 8);\n      index = (long)(count + -1);\n      do {\n        result_byte = 1;\n        if (temp_byte == 0) {\n          result_byte = *(byte *)(*(long *)(input_data + 0x60) + 0x1c);\n        }\n        temp_result = stab_pop_type(input_data);\n        temp_byte = result_byte & 1;\n        dynamic_array[index] = temp_result;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (condition == '\\0') {\n        result_char = stab_empty_type_lto_priv_0(input_data);\n        if (result_char == '\\0') {\n          return 0;\n        }\n        result_byte = 1;\n        if (temp_byte == 0) {\n          result_byte = *(byte *)(*(long *)(input_data + 0x60) + 0x1c);\n        }\n        temp_byte = result_byte & 1;\n        temp_result = stab_pop_type(input_data);\n        dynamic_array[(long)result_int + -1] = temp_result;\n        count = result_int;\n      }\n      goto LAB_0010a582;\n    }\n    dynamic_array = (undefined8 *)0x0;\n    if (condition != '\\0') goto LAB_0010a582;\n    dynamic_array = (undefined8 *)xmalloc(8);\n    result_char = stab_empty_type_lto_priv_0(input_data);\n    if (result_char == '\\0') {\n      return 0;\n    }\n    if ((temp_byte != 0) || (*(char *)(*(long *)(input_data + 0x60) + 0x1c) != '\\0')) {\n      temp_result = stab_pop_type(input_data);\n      count = 1;\n      undefined_var = 1;\n      *dynamic_array = temp_result;\n      goto LAB_0010a596;\n    }\n    temp_result = stab_pop_type(input_data);\n    count = 1;\n    *dynamic_array = temp_result;\n  }\n  undefined_var = *(undefined *)(*(long *)(input_data + 0x60) + 0x1c);\nLAB_0010a596:\n  str = (char *)stab_pop_type(input_data);\n  size1 = strlen(str_data);\n  size2 = strlen(str);\n  index = size1 + 10 + size2;\n  for (counter = 0; (int)counter < count; counter = counter + 1) {\n    size1 = strlen((char *)dynamic_array[counter]);\n    index = index + size1;\n  }\n  new_str = (char *)xmalloc(index);\n  sprintf(new_str,\"#%s,%s\",str_data,str);\n  index = 0;\n  free(str_data);\n  free(str);\n  while( true ) {\n    size1 = strlen(new_str);\n    if (count <= (int)index) break;\n    *(undefined2 *)(new_str + size1) = 0x2c;\n    str_data = (char *)dynamic_array[index];\n    index = index + 1;\n    strcpy(new_str + size1 + 1,str_data);\n    free(str_data);\n  }\n  *(undefined2 *)(new_str + size1) = 0x3b;\n  free(dynamic_array);\n  result = stab_push_string(input_data,new_str,0,undefined_var,0);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  free(new_str);\n  return result;\n}\n\n",
            "called": [
                "strcpy",
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_empty_type.lto_priv.0",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "retyped_function_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "display_copy_right_info_00119970",
                "param_1": "toolName",
                "pcVar1": "copyRightMsg"
            },
            "code": "\nvoid displayCopyRightInfo_00119970(undefined8 toolName)\n\n{\n  char *copyRightMsg;\n  \n  printf(\"GNU %s %s\\n\",toolName,\"(GNU Binutils for Debian) 2.40\");\n  copyRightMsg = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightMsg);\n  copyRightMsg = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightMsg);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "display_copy_right_info_00119970"
        },
        "FUN_00104480": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "display_info.isra.0.cold",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00104480"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "extract_value_pair_00114c80",
                "param_1": "inputString",
                "param_2": "value",
                "param_3": "errorMsg",
                "param_4": "param4",
                "pcVar1": "equalSignPos",
                "uVar2": "subString",
                "auVar3": "result",
                "dcgettext": "getErrorMessage",
                "fatal": "abortProgram"
            },
            "code": "\nundefined  [16] extractValuePair_00114c80(char *inputString,undefined8 value,undefined8 errorMsg,undefined8 param4)\n\n{\n  char *equalSignPos;\n  undefined8 subString;\n  undefined result [16];\n  \n  equalSignPos = strchr(inputString,0x3d);\n  if (equalSignPos != (char *)0x0) {\n    result._0_8_ = (undefined8 *)xmalloc(0x30);\n    subString = xstrndup(inputString,(long)equalSignPos - (long)inputString);\n    result._0_8_[2] = equalSignPos + 1;\n    result._0_8_[1] = subString;\n    result._0_8_[4] = 0;\n    result._0_8_[3] = 0;\n    *result._0_8_ = value;\n    result._8_8_ = param4;\n    return result;\n  }\n  subString = getErrorMessage(0,\"bad format for %s\",5);\n                    \n  abortProgram(subString,errorMsg);\n}\n\n",
            "called": [
                "strchr",
                "init_section_add.cold",
                "xstrndup",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "extract_value_pair_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_value_and_increment_pointer_0010870e",
                "param_1": "valueToStore",
                "param_2": "newValue",
                "param_3": "ptrToValue",
                "puVar1": "ptrToValueCast"
            },
            "code": "\nvoid storeValueAndIncrementPointer_0010870e(undefined8 valueToStore,undefined8 newValue,long *ptrToValue)\n\n{\n  undefined8 *ptrToValueCast;\n  \n  ptrToValueCast = (undefined8 *)*ptrToValue;\n  *ptrToValueCast = newValue;\n  *ptrToValue = (long)(ptrToValueCast + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_value_and_increment_pointer_0010870e"
        },
        "FUN_001048a0": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_001048a0"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "improve_coff_type_parsing_0010dac0",
                "param_1": "coff_data",
                "param_2": "coff_symtab",
                "param_3": "debug_data",
                "param_5": "type_code",
                "param_6": "type_attributes",
                "param_7": "is_indirect",
                "param_8": "name_param",
                "lVar1": "loop_var_1",
                "cVar2": "char_var_2",
                "uVar3": "uint_var_3",
                "uVar4": "return_value",
                "lVar5": "result",
                "uVar6": "uint_var_6",
                "plVar7": "param_6_new",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "byte_var_8",
                "iVar9": "int_var_9",
                "pcVar10": "char_ptr_var_10",
                "uVar11": "ulong_var_11",
                "lVar12": "loop_var_2",
                "uVar13": "type_code_var_13",
                "uVar14": "uint_var_14",
                "uVar15": "ulong_var_15",
                "local_68": "local_buffer",
                "local_48": "char_buffer",
                "local_47": "byte_buffer"
            },
            "code": "\nlong improve_coff_type_parsing_0010dac0(long coff_data,long *coff_symtab,long debug_data,undefined8 param_4,uint type_code,\n                 long *type_attributes,char is_indirect,undefined8 name_param)\n\n{\n  long loop_var_1;\n  char char_var_2;\n  undefined4 uint_var_3;\n  undefined8 return_value;\n  long result;\n  undefined8 uint_var_6;\n  long *param_6_new;\n  void *ptr_1;\n  void *ptr_2;\n  byte byte_var_8;\n  int int_var_9;\n  char *char_ptr_var_10;\n  ulong ulong_var_11;\n  long loop_var_2;\n  uint type_code_var_13;\n  uint uint_var_14;\n  undefined8 ulong_var_15;\n  undefined local_buffer [32];\n  char char_buffer;\n  byte byte_buffer;\n  \n  result = *(long *)(coff_data + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    type_code_var_13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    ulong_var_11 = (ulong)(type_code & *(uint *)(result + 0x40));\n    byte_var_8 = (byte)*(undefined4 *)(result + 0x3c);\n    type_code_var_13 = (type_code_var_13 ^ type_code) & *(uint *)(result + 0x38) ^ type_code_var_13;\n    if (ulong_var_11 == 1L << (byte_var_8 & 0x3f)) {\n      return_value = improve_coff_type_parsing_0010dac0(coff_data,coff_symtab,debug_data,param_4,type_code_var_13,type_attributes,is_indirect,name_param);\n      result = debug_make_pointer_type_isra_0(return_value);\n      return result;\n    }\n    if (ulong_var_11 != 2L << (byte_var_8 & 0x3f)) {\n      if (ulong_var_11 != 3L << (byte_var_8 & 0x3f)) {\n        return_value = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          type_code_var_13);\n        non_fatal(return_value,type_code);\n        return 0;\n      }\n      uint_var_14 = 0;\n      if (type_attributes != (long *)0x0) {\n        uint_var_14 = (uint)*(ushort *)(type_attributes + 2);\n        param_6_new = type_attributes + 2;\n        for (int_var_9 = 0; (*(short *)param_6_new != 0 && (int_var_9 != 3)); int_var_9 = int_var_9 + 1) {\n          *(short *)param_6_new = *(short *)((long)param_6_new + 2);\n          param_6_new = (long *)((long)param_6_new + 2);\n        }\n        *(short *)param_6_new = 0;\n      }\n      ulong_var_15 = 0;\n      return_value = name_param;\n      uint_var_6 = improve_coff_type_parsing_0010dac0(coff_data,coff_symtab,debug_data,param_4,type_code_var_13,type_attributes,0);\n      result = *(long *)(debug_data + 0x28);\n      if (result == 0) {\n        return_value = debug_make_int_type_isra_0(4,0,ulong_var_15,return_value);\n        result = debug_name_type(name_param,\"int\",return_value);\n        *(long *)(debug_data + 0x28) = result;\n      }\n      result = debug_make_array_type_isra_0(uint_var_6,result,0,(long)(int)(uint_var_14 - 1),0);\n      return result;\n    }\n    return_value = improve_coff_type_parsing_0010dac0(coff_data,coff_symtab,debug_data,param_4,type_code_var_13,type_attributes,is_indirect,name_param);\n    result = debug_make_function_type_isra_0(return_value,0,0);\n    return result;\n  }\n  if ((type_attributes != (long *)0x0) && (0 < *type_attributes)) {\n    param_6_new = (long *)coff_get_slot_lto_priv_0(debug_data);\n    if (*param_6_new != 0) {\n      return *param_6_new;\n    }\n    result = debug_make_indirect_type_isra_0(param_6_new,0);\n    return result;\n  }\n  if (is_indirect == '\\0') {\n    type_attributes = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = debug_make_void_type_isra_0();\n    return result;\n  }\n  result = *(long *)(debug_data + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    return_value = debug_make_void_type_isra_0();\n    char_ptr_var_10 = \"void\";\n    break;\n  case 2:\n    return_value = debug_make_int_type_isra_0(1,0);\n    char_ptr_var_10 = \"char\";\n    break;\n  case 3:\n    return_value = debug_make_int_type_isra_0(2,0);\n    char_ptr_var_10 = \"short\";\n    break;\n  case 4:\n    return_value = debug_make_int_type_isra_0(4,0);\n    char_ptr_var_10 = \"int\";\n    break;\n  case 5:\n    return_value = debug_make_int_type_isra_0(4,0);\n    char_ptr_var_10 = \"long\";\n    break;\n  case 6:\n    return_value = debug_make_float_type_isra_0(4);\n    char_ptr_var_10 = \"float\";\n    break;\n  case 7:\n    return_value = debug_make_float_type_isra_0(8);\n    char_ptr_var_10 = \"double\";\n    break;\n  case 8:\n    if (type_attributes == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(1,0,0);\n      goto LAB_0010e046;\n    }\n    return_value = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (type_attributes == (long *)0x0) {\n      result = debug_make_struct_type_isra_0(0,0,0);\n      goto LAB_0010e046;\n    }\n    return_value = 9;\nLAB_0010de7a:\n    result = parse_coff_struct_type(coff_data,coff_symtab,debug_data,return_value,type_attributes,name_param);\nLAB_0010e046:\n    param_6_new = (long *)coff_get_slot_lto_priv_0(debug_data,param_4);\n    *param_6_new = result;\n    return result;\n  case 10:\n    if (type_attributes == (long *)0x0) {\n      result = debug_make_enum_type_isra_0(0,0);\n    }\n    else {\n      result = type_attributes[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      loop_var_2 = 0;\n      do {\n        while( true ) {\n          if ((result <= coff_symtab[3]) || (coff_symtab[1] <= coff_symtab[2])) goto LAB_0010e032;\n          int_var_9 = (int)loop_var_2;\n          loop_var_1 = *(long *)(*coff_symtab + coff_symtab[2] * 8);\n          char_var_2 = bfd_coff_get_syment(coff_data,loop_var_1,local_buffer);\n          loop_var_2 = (long)int_var_9;\n          if (char_var_2 == '\\0') {\n            uint_var_3 = bfd_get_error();\n            return_value = bfd_errmsg(uint_var_3);\n            uint_var_6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            non_fatal(uint_var_6,return_value);\n            free(ptr_1);\n            free(ptr_2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          coff_symtab[2] = coff_symtab[2] + 1;\n          coff_symtab[3] = (ulong)byte_buffer + 1 + coff_symtab[3];\n          if (char_buffer != '\\x10') break;\n          if ((int)type_code <= int_var_9 + 1) {\n            type_code = type_code + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)type_code << 3);\n          }\n          loop_var_2 = *(long *)(loop_var_1 + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)int_var_9 * 8) = *(undefined8 *)(loop_var_1 + 8);\n          *(long *)((long)ptr_2 + (long)int_var_9 * 8) =\n               *(long *)(loop_var_1 + 0x10) + *(long *)(loop_var_2 + 0x30);\n          loop_var_2 = (long)(int_var_9 + 1);\n        }\n      } while (char_buffer != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + loop_var_2 * 8) = 0;\n      result = debug_make_enum_type_isra_0(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = debug_make_void_type_isra_0();\n    goto LAB_0010e065;\n  case 0xc:\n    return_value = debug_make_int_type_isra_0(1,1);\n    char_ptr_var_10 = \"unsigned char\";\n    break;\n  case 0xd:\n    return_value = debug_make_int_type_isra_0(2,1);\n    char_ptr_var_10 = \"unsigned short\";\n    break;\n  case 0xe:\n    return_value = debug_make_int_type_isra_0(4,1);\n    char_ptr_var_10 = \"unsigned int\";\n    break;\n  case 0xf:\n    return_value = debug_make_int_type_isra_0(4,1);\n    char_ptr_var_10 = \"unsigned long\";\n    break;\n  case 0x10:\n    return_value = debug_make_float_type_isra_0(0xc);\n    char_ptr_var_10 = \"long double\";\n  }\n  result = debug_name_type(name_param,char_ptr_var_10,return_value);\nLAB_0010e065:\n  *(long *)(debug_data + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "non_fatal",
                "parse_coff_struct_type",
                "coff_get_slot.lto_priv.0",
                "free",
                "debug_make_indirect_type.isra.0",
                "bfd_get_error",
                "debug_make_void_type.isra.0",
                "debug_make_int_type.isra.0",
                "parse_coff_type.lto_priv.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_array_type.isra.0",
                "dcgettext",
                "debug_make_pointer_type.isra.0",
                "xrealloc",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "xmalloc",
                "bfd_coff_get_syment",
                "debug_make_enum_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "improve_coff_type_parsing_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "result",
                "__n": "length",
                "extraout_var": "extra_var",
                "auVar2": "comparisonResult"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int result;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extra_var;\n  undefined comparisonResult [16];\n  \n  length = strlen(string2);\n  result = strncmp(string1,string2,length);\n  comparisonResult._1_7_ = (undefined7)(CONCAT44(extra_var,result) >> 8);\n  comparisonResult[0] = result == 0;\n  comparisonResult._8_8_ = in_RAX;\n  return comparisonResult;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "main",
                "stab_demangle_function_name.constprop.0",
                "handle_remove_section_option",
                "parse_stab_type",
                "FUN_0010554f",
                "convert_efi_target",
                "FUN_00107880",
                "skip_section",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_and_exit_if_set_time_fails_0010882c",
                "piVar1": "errorLocationPtr",
                "uVar2": "errorMessage",
                "__errno_location": "__getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getFormattedMessage",
                "non_fatal": "reportError"
            },
            "code": "\nvoid printErrorAndExitIfSetTimeFails_0010882c(void)\n\n{\n  int *errorLocationPtr;\n  undefined8 errorMessage;\n  \n  errorLocationPtr = __getErrnoLocation();\n  getErrorString(*errorLocationPtr);\n  errorMessage = getFormattedMessage(0,\"%s: cannot set time: %s\",5);\n  reportError(errorMessage);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_if_set_time_fails_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "write_symbol_to_stab_table_0010ebb0",
                "param_1": "symbolTable",
                "param_2": "sourceFile",
                "param_3": "symbolIndex",
                "cVar1": "symbolChar",
                "__s": "symbolName",
                "sVar4": "sourceFileLength",
                "sVar5": "symbolNameLength",
                "__s_00": "formattedString",
                "uVar2": "symbolIndexMinusOne",
                "uVar3": "writeResult"
            },
            "code": "\nundefined4 writeSymbolToStabTable_0010ebb0(undefined8 symbolTable,char *sourceFile,int symbolIndex,undefined8 param_4)\n\n{\n  char symbolChar;\n  uint symbolIndexMinusOne;\n  undefined4 writeResult;\n  char *symbolName;\n  size_t sourceFileLength;\n  size_t symbolNameLength;\n  char *formattedString;\n  \n  symbolName = (char *)stab_pop_type();\n  symbolIndexMinusOne = symbolIndex - 1;\n  if (symbolIndexMinusOne < 4) {\n    writeResult = *(undefined4 *)(CSWTCH_42 + (ulong)symbolIndexMinusOne * 4);\n    symbolChar = *(char *)((long)&CSWTCH_43 + (ulong)symbolIndexMinusOne);\n    sourceFileLength = strlen(sourceFile);\n    symbolNameLength = strlen(symbolName);\n    formattedString = (char *)xmalloc(sourceFileLength + 3 + symbolNameLength);\n    sprintf(formattedString,\"%s:%c%s\",sourceFile,(ulong)(uint)(int)symbolChar,symbolName);\n    free(symbolName);\n    writeResult = stab_write_symbol_lto_priv_0(symbolTable,writeResult,0,param_4,formattedString);\n    if ((char)writeResult != '\\0') {\n      free(formattedString);\n    }\n    return writeResult;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "abort",
                "free",
                "xmalloc",
                "stab_pop_type"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_to_stab_table_0010ebb0"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_debug_type_00113b98",
                "param_1": "inputValue1",
                "param_2": "inputValue2",
                "param_3": "inputValue3",
                "param_4": "inputValue4",
                "lVar1": "debugType",
                "plVar2": "debugData"
            },
            "code": "\nlong initializeDebugType_00113b98(long inputValue1,long inputValue2,long inputValue3,undefined inputValue4)\n\n{\n  long debugType;\n  long *debugData;\n  \n  if ((inputValue1 != 0) && (debugType = debug_make_type_constprop_0(0x13,0), debugType != 0)) {\n    debugData = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)debugData + 0x19) = 0;\n    *debugData = inputValue1;\n    *(undefined4 *)((long)debugData + 0x1c) = 0;\n    debugData[1] = inputValue2;\n    debugData[2] = inputValue3;\n    *(undefined *)(debugData + 3) = inputValue4;\n    *(long **)(debugType + 0x10) = debugData;\n    return debugType;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113b98"
        },
        "FUN_00104120": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104120"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "find_or_traverse_00115d70",
                "param_1": "symbol",
                "param_2": "table",
                "lVar1": "result",
                "local_18": "specific_symbol",
                "local_10": "is_found"
            },
            "code": "\nundefined find_or_traverse_00115d70(undefined8 symbol,undefined8 table)\n\n{\n  long result;\n  undefined8 specific_symbol;\n  undefined is_found;\n  \n  if (wildcard == '\\0') {\n    result = htab_find(table,symbol);\n    is_found = result != 0;\n  }\n  else {\n    is_found = 0;\n    specific_symbol = symbol;\n    htab_traverse(table,is_specified_symbol_predicate,&specific_symbol);\n  }\n  return is_found;\n}\n\n",
            "called": [
                "is_specified_symbol_predicate",
                "htab_traverse",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "is_strip_section.isra.0",
                "FUN_0010554f",
                "copy_relocations_in_section.cold"
            ],
            "imported": false,
            "current_name": "find_or_traverse_00115d70"
        },
        "FUN_00104000": {
            "renaming": {
                "FUN_00104000": "start_gmon_00104000",
                "ctx": "context"
            },
            "code": "\nint start_gmon_00104000(EVP_PKEY_CTX *context)\n\n{\n  int iVar1;\n  \n  iVar1 = __gmon_start__();\n  return iVar1;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "start_gmon_00104000"
        },
        "FUN_00104360": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104360"
        },
        "FUN_00128430": {
            "renaming": {},
            "code": "\n\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcat@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128430",
            "calling": [
                "strcat"
            ],
            "imported": false,
            "current_name": "FUN_00128430"
        },
        "FUN_00104240": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "bfd_nonfatal.cold",
                "merge_gnu_build_notes",
                "add_redefine_and_check",
                "list_matching_formats",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "finish_stab",
                "stab_struct_field.lto_priv.0",
                "bad_stab",
                "copy_usage",
                "main",
                "debug_name_type",
                "is_strip_section_1.isra.0.cold",
                "is_strip_section_1.isra.0",
                "stab_write_symbol.lto_priv.0",
                "debug_write_type.constprop.0",
                "get_file_size.cold",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "display_info.isra.0",
                "debug_end_block",
                "add_specific_symbols",
                "debug_get_real_type.isra.0",
                "debug_record_function",
                "parse_coff_struct_type",
                "endian_string",
                "debug_end_function",
                "copy_section.cold",
                "debug_start_block",
                "copy_object",
                "parse_vma.cold",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "parse_number",
                "print_version",
                "create_new_symbol.cold",
                "FUN_00107880",
                "copy_file",
                "do_display_target",
                "stab_demangle_v3_arg",
                "debug_record_line",
                "list_supported_targets",
                "FUN_0010554f",
                "init_section_add.cold",
                "debug_record_variable",
                "strip_usage",
                "debug_add_to_current_namespace.constprop.0",
                "FUN_00116490",
                "setup_section.cold",
                "smart_rename.cold",
                "stab_typdef.lto_priv.0",
                "FUN_00108179",
                "stab_demangle_v3_arglist",
                "FUN_00104cc1",
                "stab_bad_demangle",
                "setup_section",
                "get_file_size",
                "section_add_load_file.cold",
                "stab_find_slot",
                "FUN_00105828",
                "copy_object.cold",
                "set_times.cold",
                "FUN_0010808f",
                "stab_find_type",
                "FUN_001152b6",
                "stab_int_type.lto_priv.0",
                "parse_coff_type.lto_priv.0",
                "stab_context",
                "FUN_001086af",
                "FUN_00107976",
                "check_new_section_flags.cold",
                "debug_tag_type",
                "debug_start_source",
                "debug_find_named_type",
                "FUN_00114dc7",
                "warn_stab",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104240"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "dataStruct",
                "param_2": "value",
                "param_3": "flag",
                "uVar1": "reallocResult",
                "puVar2": "ptrToData",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long dataStruct,undefined8 value,undefined4 flag)\n\n{\n  undefined8 reallocResult;\n  undefined8 *ptrToData;\n  uint currentSize;\n  \n  if (*(uint *)(dataStruct + 0x2c) <= *(uint *)(dataStruct + 0x28)) {\n    currentSize = *(uint *)(dataStruct + 0x2c) + 10;\n    *(uint *)(dataStruct + 0x2c) = currentSize;\n    reallocResult = xrealloc(*(undefined8 *)(dataStruct + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStruct + 0x20) = reallocResult;\n  }\n  currentSize = *(uint *)(dataStruct + 0x28);\n  ptrToData = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStruct + 0x20));\n  *ptrToData = value;\n  *(undefined4 *)(ptrToData + 1) = flag;\n  *(uint *)(dataStruct + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)ptrToData >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "stab_demangle_arg",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_and_null_terminate_string_0011a480",
                "param_1": "inputString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "newString"
            },
            "code": "\nvoid copyAndNullTerminateString_0011a480(char *inputString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *newString;\n  \n  stringLength = strnlen(inputString,maxLength);\n  newString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)newString + stringLength) = 0;\n  memcpy(newString,inputString,stringLength);\n  return;\n}\n\n",
            "called": [
                "memcpy",
                "xmalloc",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "main",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "write_symbol_with_parameters_0010e918",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "__s": "symbol",
                "sVar2": "param2Length",
                "sVar3": "symbolLength",
                "__s_00": "modifiedSymbol",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 writeSymbolWithParameters_0010e918(undefined8 param1,char *param2,undefined8 param3)\n\n{\n  undefined4 returnValue;\n  char *symbol;\n  size_t param2Length;\n  size_t symbolLength;\n  char *modifiedSymbol;\n  \n  symbol = (char *)stab_pop_type();\n  param2Length = strlen(param2);\n  symbolLength = strlen(symbol);\n  modifiedSymbol = (char *)xmalloc(param2Length + 0x14 + symbolLength);\n  sprintf(modifiedSymbol,\"%s:c=e%s,%ld\",param2,symbol,param3);\n  free(symbol);\n  returnValue = stab_write_symbol_lto_priv_0(param1,0x80,0,0,modifiedSymbol);\n  if ((char)returnValue != '\\0') {\n    free(modifiedSymbol);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_parameters_0010e918"
        },
        "FUN_00128218": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128218",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_00128218"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "decompile_and_improve_00116110",
                "param_1": "input_file",
                "param_2": "section_header",
                "param_3": "output_file",
                "uVar1": "temp_1",
                "uVar2": "temp_2",
                "lVar3": "section_header_offset",
                "iVar4": "copy_width",
                "iVar5": "copy_byte",
                "cVar6": "result",
                "uVar7": "error_message",
                "__ptr": "allocated_buffer",
                "lVar8": "loop_variable_1",
                "uVar9": "loop_variable_2",
                "iVar10": "reverse_bytes",
                "uVar11": "start_index",
                "puVar12": "temp_ptr",
                "lVar13": "loop_variable_3",
                "puVar14": "ptr_1",
                "puVar15": "ptr_2",
                "pvVar16": "current_ptr",
                "uVar17": "temp_3",
                "uVar18": "block_size",
                "uVar19": "temp_4",
                "bVar20": "flag",
                "local_38": "section_size",
                "local_30": "section_data"
            },
            "code": "\nvoid decompileAndImprove_00116110(undefined8 input_file,undefined8 *section_header,undefined8 output_file)\n\n{\n  undefined temp_1;\n  undefined8 temp_2;\n  long section_header_offset;\n  int copy_width;\n  int copy_byte;\n  char result;\n  undefined8 error_message;\n  undefined8 *allocated_buffer;\n  long loop_variable_1;\n  ulong loop_variable_2;\n  int reverse_bytes;\n  ulong start_index;\n  undefined *temp_ptr;\n  long loop_variable_3;\n  undefined8 *ptr_1;\n  undefined8 *ptr_2;\n  void *current_ptr;\n  ulong temp_3;\n  ulong block_size;\n  ulong temp_4;\n  byte flag;\n  ulong section_size;\n  void *section_data;\n  \n  flag = 0;\n  result = skip_section(input_file,section_header,1);\n  if (result != '\\0') {\n    return;\n  }\n  section_size = section_header[8];\n  section_header_offset = section_header[0xc];\n  if (((*(byte *)((long)section_header + 0x25) & 1) == 0) || ((*(byte *)(section_header_offset + 0x25) & 1) == 0)) {\n    loop_variable_3 = find_section_list(*section_header,0,0x80);\n    if (loop_variable_3 == 0) {\n      return;\n    }\n    if ((*(byte *)(loop_variable_3 + 0x29) & 1) == 0) {\n      return;\n    }\n    allocated_buffer = (undefined8 *)xmalloc(section_size);\n    ptr_2 = allocated_buffer;\n    if (7 < section_size) {\n      for (block_size = section_size >> 3; block_size != 0; block_size = block_size - 1) {\n        *ptr_2 = 0;\n        ptr_2 = ptr_2 + (ulong)flag * -2 + 1;\n      }\n    }\n    ptr_1 = ptr_2;\n    if ((section_size & 4) != 0) {\n      ptr_1 = (undefined8 *)((long)ptr_2 + (ulong)flag * -8 + 4);\n      *(undefined4 *)ptr_2 = 0;\n    }\n    ptr_2 = ptr_1;\n    if ((section_size & 2) != 0) {\n      ptr_2 = (undefined8 *)((long)ptr_1 + (ulong)flag * -4 + 2);\n      *(undefined2 *)ptr_1 = 0;\n    }\n    if ((section_size & 1) != 0) {\n      *(undefined *)ptr_2 = 0;\n    }\n    result = bfd_set_section_contents(output_file,section_header_offset,allocated_buffer,0);\n    if (result != '\\0') {\n      free(allocated_buffer);\n      return;\n    }\n    status = 1;\n    bfd_nonfatal_message(0,output_file,section_header_offset,0);\n    free(allocated_buffer);\n    return;\n  }\n  section_data = (void *)0x0;\n  result = bfd_get_full_section_contents(input_file,section_header,&section_data);\n  if ((result == '\\0') ||\n     (result = bfd_convert_section_contents(input_file,section_header,output_file,&section_data,&section_size),\n     reverse_bytes = reverse_bytes, result == '\\0')) {\n    bfd_set_section_size(section_header_offset,0);\n    status = 1;\n    bfd_nonfatal_message(0,input_file,section_header,0);\n    free(section_data);\n    return;\n  }\n  copy_width = copy_width;\n  copy_byte = copy_byte;\n  if (reverse_bytes != 0) {\n    block_size = (ulong)reverse_bytes;\n    if (section_size % block_size != 0) {\n      temp_2 = *section_header;\n      error_message = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      fatal(error_message,temp_2,reverse_bytes);\n    }\n    reverse_bytes = reverse_bytes / 2;\n    start_index = 0;\n    while (temp_4 = start_index, copy_width = copy_width, copy_byte = copy_byte, temp_4 < section_size) {\n      start_index = block_size + temp_4;\n      temp_3 = start_index;\n      for (loop_variable_2 = 0; loop_variable_2 < (ulong)(long)reverse_bytes; loop_variable_2 = loop_variable_2 + 1) {\n        temp_3 = temp_3 - 1;\n        temp_ptr = (undefined *)(temp_4 + loop_variable_2 + (long)section_data);\n        temp_1 = *temp_ptr;\n        *temp_ptr = *(undefined *)((long)section_data + temp_3);\n        *(undefined *)((long)section_data + temp_3) = temp_1;\n      }\n    }\n  }\n  copy_width = copy_width;\n  copy_byte = copy_byte;\n  if (-1 < copy_byte) {\n    block_size = (ulong)interleave;\n    reverse_bytes = (int)((ulong)section_header[7] % block_size);\n    start_index = ((long)copy_byte - (long)reverse_bytes) + (long)section_data;\n    if (copy_byte < reverse_bytes) {\n      start_index = start_index + block_size;\n    }\n    loop_variable_3 = (section_size + (long)section_data) - start_index;\n    current_ptr = section_data;\n    for (; start_index < section_size + (long)section_data; start_index = start_index + block_size) {\n      for (loop_variable_1 = 0; ((int)loop_variable_1 < copy_width && (loop_variable_1 != loop_variable_3)); loop_variable_1 = loop_variable_1 + 1) {\n        *(undefined *)((long)current_ptr + loop_variable_1) = *(undefined *)(start_index + loop_variable_1);\n      }\n      current_ptr = (void *)((long)current_ptr + loop_variable_1);\n      loop_variable_3 = loop_variable_3 - block_size;\n    }\n    section_size = ((((block_size - 1) + section_size) - (long)copy_byte) / block_size) * (long)copy_width;\n    block_size = *(ulong *)(section_header_offset + 0x38) / block_size;\n    *(ulong *)(section_header_offset + 0x38) = block_size;\n    if (copy_byte < reverse_bytes) {\n      *(ulong *)(section_header_offset + 0x38) = block_size + 1;\n      result = bfd_set_section_contents(output_file,section_header_offset,section_data,0,section_size);\n      if (result == '\\0') {\n        cleanup_and_free_memory_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  result = bfd_set_section_contents(output_file,section_header_offset,section_data,0,section_size);\n  if (result == '\\0') {\n    cleanup_and_free_memory_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(section_data);\n  return;\n}\n\n",
            "called": [
                "FUN_00108466",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_nonfatal_message",
                "find_section_list",
                "free",
                "bfd_get_full_section_contents",
                "skip_section",
                "xmalloc",
                "bfd_set_section_contents",
                "copy_section.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00116110"
        },
        "FUN_00104490": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104490"
        },
        "FUN_00104370": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type",
                "mark_symbols_used_in_relocations.cold",
                "stab_typdef.lto_priv.0",
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "copy_relocations_in_section",
                "bfd_nonfatal_message",
                "copy_file",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_00104370"
        },
        "FUN_001048b0": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001048b0"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorStatus",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errorMessage;\n  long errorStatus;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorStatus != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "end_address",
                "param_3": "unused_1",
                "param_4": "unused_2",
                "lVar1": "current_block_ptr",
                "uVar2": "error_message",
                "pcVar3": "error_string",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 end_address,undefined8 unused_1,undefined8 unused_2)\n\n{\n  long current_block_ptr;\n  undefined8 error_message;\n  char *error_string;\n  undefined result [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block_ptr = *(long *)(block_ptr + 0x20), current_block_ptr == 0)) {\n    error_string = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) != 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = end_address;\n      error_message = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block_ptr + 8);\n      goto LAB_0010bf84;\n    }\n    error_string = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_message = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_message);\n  error_message = 0;\nLAB_0010bf84:\n  result._8_8_ = unused_2;\n  result._0_8_ = error_message;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "FUN_00104250": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "copy_relocations_in_section"
            ],
            "imported": false,
            "current_name": "FUN_00104250"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "reverse_demangle_function_0010c95e",
                "param_1": "parameter_1",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "bVar1": "byteVar1",
                "bVar2": "byteVar2",
                "pbVar3": "bytePtr3",
                "bVar4": "boolVar1",
                "bVar5": "boolVar2",
                "bVar6": "boolVar3",
                "cVar7": "charVar",
                "uVar8": "uintVar",
                "pbVar9": "bytePtr9",
                "lVar10": "longVar1",
                "uVar11": "uintVar1",
                "pcVar12": "charPtr1",
                "sVar13": "sizeVar",
                "uVar14": "ulongVar",
                "__ptr": "ptr",
                "lVar15": "longVar2",
                "puVar16": "ulongPtr",
                "puVar17": "undefinedPtr",
                "ppcVar18": "charPtrPtr1",
                "pcVar19": "charPtr1",
                "pbVar20": "bytePtr20",
                "local_49": "undefinedVar",
                "local_48": "ulongVar1",
                "local_40": "charPtrArray"
            },
            "code": "\nundefined8 reverseDemangleFunction_0010c95e(undefined8 *parameter_1,byte **parameter_2,long *parameter_3)\n\n{\n  byte byteVar1;\n  byte byteVar2;\n  byte *bytePtr3;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  char charVar;\n  uint uintVar;\n  byte *bytePtr9;\n  long longVar1;\n  undefined8 uintVar1;\n  char *charPtr1;\n  size_t sizeVar;\n  ulong ulongVar;\n  void *ptr;\n  long longVar2;\n  ulong *ulongPtr;\n  undefined *undefinedPtr;\n  char **charPtrPtr1;\n  char *charPtr1;\n  byte *bytePtr20;\n  undefined undefinedVar;\n  ulong ulongVar1;\n  char *charPtrArray [2];\n  \n  while( true ) {\n    bytePtr20 = *parameter_2;\n    byteVar1 = *bytePtr20;\n    if ('T' < (char)byteVar1) break;\n    if ((char)byteVar1 < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byteVar1) {\n    case 0x41:\n      longVar2 = 0;\n      bytePtr3 = bytePtr20;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *parameter_2 = bytePtr20 + 1;\n      charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (parameter_3 == (long *)0x0) {\n        return 1;\n      }\n      longVar2 = debug_make_const_type_isra_0(*parameter_3);\n      *parameter_3 = longVar2;\n      return 1;\n    case 0x46:\n      *parameter_2 = bytePtr20 + 1;\n      if (parameter_3 == (long *)0x0) {\n        ulongPtr = (ulong *)0x0;\n        charPtrPtr1 = (char **)0x0;\n      }\n      else {\n        ulongPtr = &ulongVar1;\n        charPtrPtr1 = charPtrArray;\n      }\n      charVar = stab_demangle_args(parameter_1,parameter_2,charPtrPtr1,ulongPtr);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (**parameter_2 == 0x5f) {\n        *parameter_2 = *parameter_2 + 1;\n        charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        if (parameter_3 == (long *)0x0) {\n          return 1;\n        }\n        longVar2 = debug_make_function_type_isra_0(*parameter_3,charPtrArray[0],ulongVar1 & 0xff);\n        *parameter_3 = longVar2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *parameter_2 = bytePtr20 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      undefinedVar = 0;\n      charPtrArray[0] = (char *)0x0;\n      ulongVar1 = 0;\n      *parameter_2 = bytePtr20 + 1;\n      if (((&_sch_istable)[(ulong)bytePtr20[1] * 2] & 4) == 0) {\n        if (bytePtr20[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        charPtrPtr1 = charPtrArray;\n        if (parameter_3 == (long *)0x0) {\n          charPtrPtr1 = (char **)0x0;\n        }\n        charVar = stab_demangle_qualified(parameter_1,parameter_2,charPtrPtr1);\n        if (charVar == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uintVar = stab_demangle_count(parameter_2);\n        bytePtr3 = *parameter_2;\n        sizeVar = strlen((char *)bytePtr3);\n        if (sizeVar < uintVar) goto switchD_0010cdf9_caseD_60;\n        *parameter_2 = bytePtr3 + uintVar;\n        if ((parameter_3 != (long *)0x0) &&\n           (charPtrArray[0] = (char *)stab_find_tagged_type(*parameter_1,parameter_1[1],bytePtr3,uintVar,9),\n           charPtrArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      byteVar2 = **parameter_2;\n      if (byteVar1 == 0x4d) {\n        if ((byteVar2 == 0x43) || (byteVar2 == 0x56)) {\n          *parameter_2 = *parameter_2 + 1;\n        }\n        if (**parameter_2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *parameter_2 = *parameter_2 + 1;\n        if (parameter_3 == (long *)0x0) {\n          undefinedPtr = (undefined *)0x0;\n          ulongPtr = (ulong *)0x0;\n        }\n        else {\n          undefinedPtr = &undefinedVar;\n          ulongPtr = &ulongVar1;\n        }\n        charVar = stab_demangle_args(parameter_1,parameter_2,ulongPtr,undefinedPtr);\n        if (charVar == '\\0') {\n          return 0;\n        }\n      }\n      if (**parameter_2 == 0x5f) {\n        *parameter_2 = *parameter_2 + 1;\n        charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        if (parameter_3 == (long *)0x0) {\n          return 1;\n        }\n        if (byteVar1 != 0x4d) {\n          longVar2 = debug_make_offset_type_isra_0(charPtrArray[0],*parameter_3);\n          *parameter_3 = longVar2;\n          return 1;\n        }\n        longVar2 = debug_make_method_type_isra_0(*parameter_3,charPtrArray[0],ulongVar1,undefinedVar);\n        *parameter_3 = longVar2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      uintVar1 = stab_demangle_qualified(parameter_1,parameter_2,parameter_3);\n      return uintVar1;\n    case 0x52:\n      *parameter_2 = bytePtr20 + 1;\n      charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (parameter_3 == (long *)0x0) {\n        return 1;\n      }\n      longVar2 = debug_make_reference_type_isra_0(*parameter_3);\n      *parameter_3 = longVar2;\n      return 1;\n    case 0x54:\n      *parameter_2 = bytePtr20 + 1;\n      charVar = stab_demangle_get_count(parameter_2,&ulongVar1);\n      if (charVar != '\\0') {\n        if ((uint)ulongVar1 < *(uint *)(parameter_1 + 5)) {\n          charPtrArray[0] = *(char **)((ulongVar1 & 0xffffffff) * 0x10 + parameter_1[4]);\n          charVar = reverseDemangleFunction_0010c95e(parameter_1,charPtrArray,parameter_3);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byteVar1 == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *parameter_2 = bytePtr20 + 1;\n    charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n    if (charVar == '\\0') {\n      return 0;\n    }\n    if (parameter_3 == (long *)0x0) {\n      return 1;\n    }\n    longVar2 = debug_make_pointer_type_isra_0(*parameter_3);\n    *parameter_3 = longVar2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  boolVar3 = false;\n  boolVar1 = false;\n  charVar = '\\0';\n  boolVar2 = false;\n  do {\n    bytePtr3 = *parameter_2;\n    byteVar1 = *bytePtr3;\n    if (byteVar1 == 0x55) {\n      charVar = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byteVar1) {\n      if (byteVar1 == 0x56) {\n        boolVar3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byteVar1) goto switchD_0010cdf9_caseD_60;\n      if ((char)byteVar1 < '_') goto LAB_0010cdfb;\n      switch(byteVar1) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (parameter_3 == (long *)0x0) {\nLAB_0010d0aa:\n          *parameter_2 = bytePtr3 + 1;\n          return 1;\n        }\n        longVar2 = debug_find_named_type(*parameter_1,&DAT_00120436);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_type_constprop_0(6,4);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"unsigned char\";\n        if ((charVar == '\\0') && (charPtr1 = \"char\", boolVar1)) {\n          charPtr1 = \"signed char\";\n        }\n        longVar2 = debug_find_named_type(*parameter_1,charPtr1);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_int_type_isra_0(1,charVar);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = debug_find_named_type(*parameter_1,\"float\");\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_float_type_isra_0(4);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"unsigned int\";\n        charPtr1 = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"long unsigned int\";\n        charPtr1 = \"long int\";\nLAB_0010ced2:\n        if (charVar == '\\0') {\n          charPtr1 = charPtr1;\n        }\n        longVar2 = debug_find_named_type(*parameter_1,charPtr1);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_int_type_isra_0(4,charVar);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        charPtr1 = \"long double\";\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        longVar2 = debug_find_named_type(*parameter_1,charPtr1);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_float_type_isra_0(8);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"short unsigned int\";\n        if (charVar == '\\0') {\n          charPtr1 = \"short int\";\n        }\n        longVar2 = debug_find_named_type(*parameter_1,charPtr1);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_int_type_isra_0(2,charVar);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        charPtrPtr1 = charPtrArray;\n        if (parameter_3 == (long *)0x0) {\n          charPtrPtr1 = (char **)0x0;\n        }\n        charVar = stab_demangle_template(parameter_1,parameter_2,charPtrPtr1);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        if (parameter_3 == (long *)0x0) {\n          return 1;\n        }\n        sizeVar = strlen(charPtrArray[0]);\n        longVar2 = stab_find_tagged_type(*parameter_1,parameter_1[1],charPtrArray[0],sizeVar & 0xffffffff,9);\n        *parameter_3 = longVar2;\n        free(charPtrArray[0]);\n        longVar2 = *parameter_3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = debug_find_named_type(*parameter_1,&DAT_00120495);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_void_type_isra_0();\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        longVar2 = debug_find_named_type(*parameter_1,\"__wchar_t\");\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_int_type_isra_0(2,1);\n          *parameter_3 = longVar2;\n          *parameter_2 = *parameter_2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (parameter_3 == (long *)0x0) goto LAB_0010d0aa;\n        charPtr1 = \"long long unsigned int\";\n        if (charVar == '\\0') {\n          charPtr1 = \"long long int\";\n        }\n        longVar2 = debug_find_named_type(*parameter_1,charPtr1);\n        *parameter_3 = longVar2;\n        if (longVar2 == 0) {\n          longVar2 = debug_make_int_type_isra_0(8,charVar);\n          *parameter_3 = longVar2;\n        }\n      }\n      *parameter_2 = *parameter_2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (byteVar1 == 0x43) {\n      boolVar2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byteVar1 != 0x53) goto LAB_0010cdc5;\n    boolVar1 = true;\nLAB_0010cd84:\n    *parameter_2 = bytePtr3 + 1;\n  } while( true );\nLAB_0010ca26:\n  bytePtr9 = bytePtr3 + 1;\n  *parameter_2 = bytePtr9;\n  byteVar1 = *bytePtr9;\n  if (byteVar1 == 0) goto switchD_0010cdf9_caseD_60;\n  if (byteVar1 == 0x5f) {\n    *parameter_2 = bytePtr3 + 2;\n    charVar = reverseDemangleFunction_0010c95e(parameter_1,parameter_2,parameter_3);\n    if (charVar == '\\0') {\n      return 0;\n    }\n    if (parameter_3 == (long *)0x0) {\n      return 1;\n    }\n    longVar1 = debug_find_named_type(*parameter_1,\"int\");\n    if (longVar1 == 0) {\n      longVar1 = debug_make_int_type_isra_0(4,0);\n    }\n    longVar2 = debug_make_array_type_isra_0(*parameter_3,longVar1,0,longVar2,0);\n    *parameter_3 = longVar2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byteVar1 * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  longVar2 = longVar2 * 10 + (long)((char)byteVar1 + -0x30);\n  bytePtr3 = bytePtr9;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byteVar1 < ':') {\n    if ((char)byteVar1 < '0') {\n      if (byteVar1 != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      stab_bad_demangle(bytePtr20);\n      if (parameter_3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byteVar1 != 0x47) || (*parameter_2 = bytePtr3 + 1, ((&_sch_istable)[(ulong)bytePtr3[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  bytePtr20 = *parameter_2;\n  uintVar = stab_demangle_count(parameter_2);\n  bytePtr3 = *parameter_2;\n  sizeVar = strlen((char *)bytePtr3);\n  ulongVar = (ulong)uintVar;\n  if (ulongVar <= sizeVar) {\n    *parameter_2 = bytePtr3 + ulongVar;\n    if (parameter_3 == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)savestring(bytePtr3,ulongVar);\n    longVar2 = debug_find_named_type(*parameter_1,ptr);\n    *parameter_3 = longVar2;\n    free(ptr);\n    if (*parameter_3 == 0) {\n      longVar2 = stab_find_tagged_type(*parameter_1,parameter_1[1],bytePtr3,(int)*parameter_2 - (int)bytePtr3,0);\n      *parameter_3 = longVar2;\njoined_r0x0010d1d8:\n      if (longVar2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (boolVar2) {\n      longVar2 = debug_make_const_type_isra_0(*parameter_3);\n      *parameter_3 = longVar2;\n    }\n    if (boolVar3) {\n      longVar2 = debug_make_volatile_type_isra_0(*parameter_3);\n      *parameter_3 = longVar2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  stab_bad_demangle(bytePtr20);\n  return 0;\n}\n\n",
            "called": [
                "stab_demangle_get_count",
                "stab_demangle_count",
                "stab_find_tagged_type",
                "stab_demangle_type.lto_priv.0",
                "free",
                "savestring",
                "debug_make_type.constprop.0",
                "stab_bad_demangle",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "strlen",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "stab_demangle_qualified",
                "debug_make_pointer_type.isra.0",
                "debug_make_method_type.isra.0",
                "debug_find_named_type",
                "stab_demangle_args",
                "debug_make_offset_type.isra.0",
                "stab_demangle_template",
                "debug_make_float_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_const_type.isra.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "stab_demangle_arg",
                "stab_demangle_function_name.constprop.0",
                "stab_demangle_type.lto_priv.0",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "reverse_demangle_function_0010c95e"
        },
        "FUN_00104130": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104130"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = bfd_get_archive_filename();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        non_fatal(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_file_format_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    bfd_nonfatal_message(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = startswith_lto_priv_0_lto_priv_0(**(undefined8 **)(param_7 + 8),&DAT_0011b503),\n     cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = startswith_lto_priv_0_lto_priv_0(*(undefined8 *)unaff_R14[1],&DAT_0011b503),\n       cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = preserve_dates == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = pe_file_alignment;\n    if (pe_file_alignment == 0xffffffffffffffff) {\n      pe_file_alignment = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)pe_file_alignment;\n    }\n    if (pe_heap_commit != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_commit;\n    }\n    if (pe_heap_reserve != -1) {\n      *(long *)(lVar27 + 0x148) = pe_heap_reserve;\n    }\n    if (pe_image_base != -1) {\n      *(long *)(lVar27 + 0x100) = pe_image_base;\n    }\n    uVar23 = pe_section_alignment;\n    if (pe_section_alignment == 0xffffffffffffffff) {\n      pe_section_alignment = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)pe_section_alignment;\n    }\n    if (pe_stack_commit != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_commit;\n    }\n    if (pe_stack_reserve != -1) {\n      *(long *)(lVar27 + 0x138) = pe_stack_reserve;\n    }\n    if (pe_subsystem != -1) {\n      *(short *)(lVar27 + 300) = pe_subsystem;\n    }\n    if (pe_major_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x118) = pe_major_subsystem_version;\n    }\n    if (pe_minor_subsystem_version != -1) {\n      *(short *)(lVar27 + 0x11a) = pe_minor_subsystem_version;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      non_fatal(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = isympp;\n  free(isympp);\n  if (plVar6 == osympp) {\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(osympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  osympp = (long *)xmalloc();\n  isympp = osympp;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(isympp);\n    isympp = (long *)0x0;\n    osympp = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = add_sections;\n  if ((extract_symbol == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = add_sections,\n     cVar10 == '\\0')) {\n    status = 1;\n    dcgettext(0,\"error in private header data\",5);\n    bfd_nonfatal_message(0);\n    puVar31 = add_sections;\n  }\n  for (; puVar37 = update_sections, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31)\n  {\n    uVar11 = 0x128;\n    lVar27 = find_section_list(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = check_new_section_flags(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = find_section_list(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        bfd_nonfatal_message(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      non_fatal(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      bfd_nonfatal_message(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = dump_sections;\n  if (merge_notes == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (merge_notes != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = dump_sections, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      bfd_nonfatal_message(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      bfd_nonfatal_message(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        bfd_nonfatal_message(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          bfd_nonfatal_message(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          non_fatal(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (gnu_debuglink_filename == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      non_fatal(uVar19);\n      gnu_debuglink_filename = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = gnu_debuglink_filename;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = isympp;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = improve_and_readability_0010554f();\n    return uVar28;\n  }\n  if (convert_debugging == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &names_0;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)start_stab_constprop_0(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    save_stab((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = parse_stab(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      stab_context();\n                      free_saved_stabs();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_saved_stabs();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = finish_stab(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = start_stab_constprop_0(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          save_stab(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = parse_stab(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            stab_context();\n            free_saved_stabs();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_saved_stabs();\n      if ((lVar27 != 0) && (cVar10 = finish_stab(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = debug_set_filename(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = debug_set_filename(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_coff_type_lto_priv_0();\n            if (lVar24 == 0) break;\n            cVar9 = parse_coff_symbol_constprop_0_isra_0(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = debug_start_block(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_coff_type_lto_priv_0();\n                  if ((lVar17 == 0) || (cVar10 = debug_record_function(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = debug_record_line(param_10,iVar12 + iVar33,\n                                                *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = debug_end_function(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              non_fatal(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        non_fatal(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (keep_section_symbols == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = isympp + param_8;\n        plVar16 = isympp;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((strip_symbols == 2) || (strip_symbols == 7)) {\nLAB_001059fe:\n    if (strip_symbols == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = isympp;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      osympp = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = add_symbols;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (add_sym_list != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = add_sym_list;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = create_new_symbol(puVar31);\n                  uVar19 = redefine_specific_htab;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(redefine_specific_htab);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (section_rename_list != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                fatal(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(redefine_specific_htab);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = section_rename_list, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = prefix_symbols_string;\n            if ((change_leading_char != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0'))\n            {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = prefix_symbols_string;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (change_leading_char == '\\0') {\n              if ((remove_leading_char == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (prefix_symbols_string != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((change_leading_char == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0'))\n            {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = prefix_symbols_string;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = prefix_symbols_string;\n            if (prefix_symbols_string != (char *)0x0) {\n              strcpy(pcVar22,prefix_symbols_string);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (strip_symbols == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (wildcard == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((strip_symbols == 3) || (discard_locals == 2)) goto LAB_001067a8;\n                  if (discard_locals == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = convert_debugging;\n              if (1 < strip_symbols - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (strip_symbols != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (wildcard == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              non_fatal(uVar19);\n              status = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(strip_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (wildcard != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(strip_unneeded_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((keep_file_symbols != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (wildcard == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(keep_specific_htab,is_specified_symbol_predicate,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = is_strip_section_isra_0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = is_specified_symbol(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 == 0 ||\n                      (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')))) {\n                    if (((((localize_hidden == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0'))\n                {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((weaken != '\\0') || (cVar10 = is_specified_symbol(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (add_sym_list != (undefined8 *)0x0) {\n        puVar31 = add_sym_list;\n        iVar12 = add_symbols;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = create_new_symbol(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = add_symbols;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            fatal(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = convert_debugging == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = write_stabs_in_sections_debugging_info_constprop_0\n                           (param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                            &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        bfd_nonfatal_message(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    status = 1;\n  }\n  else {\n    if ((strip_symbols - 3U < 4) || ((discard_locals != 0 || (localize_hidden != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(strip_specific_htab);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(keep_specific_htab), lVar27 != 0 ||\n              (lVar27 = htab_elements(localize_specific_htab), lVar27 != 0)) ||\n             (lVar27 = htab_elements(globalize_specific_htab), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(keepglobal_specific_htab), lVar27 != 0 ||\n             (lVar27 = htab_elements(weaken_specific_htab), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(redefine_specific_htab), lVar27 != 0)) ||\n          (((prefix_symbols_string != (char *)0x0 || (sections_removed != '\\0')) ||\n           ((sections_copied != '\\0' ||\n            (((convert_debugging != '\\0' || (change_leading_char != '\\0')) ||\n             (remove_leading_char != '\\0')))))))) ||\n         ((section_rename_list != (char **)0x0 || (weaken != '\\0')))))) || (add_symbols != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,osympp,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,copy_relocations_in_section,param_7);\n    bfd_map_over_sections(unaff_R14,copy_section,param_7);\n    for (puVar31 = add_sections; puVar37 = update_sections, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        bfd_nonfatal_message(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((merge_notes != '\\0') && (is_strip == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        non_fatal(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((merge_notes != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = startswith_lto_priv_0_lto_priv_0(*puVar31,\".gnu.build.attributes\"),\n            cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          bfd_nonfatal_message(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((gnu_debuglink_filename == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12),\n       lVar27 = gnu_debuglink_filename, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (use_alt_mach_code == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,use_alt_mach_code & 0xffffffff);\n        uVar23 = use_alt_mach_code;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          non_fatal(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            non_fatal(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)use_alt_mach_code;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          non_fatal(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      bfd_nonfatal_message(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = startswith_lto_priv_0_lto_priv_0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      bfd_nonfatal_message(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_gnu_build_notes();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        bfd_nonfatal_message(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = dump_sections;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "strerror",
                "merge_gnu_build_notes",
                "check_new_section_flags",
                "startswith.lto_priv.0.lto_priv.0",
                "FUN_0010554f",
                "find_section_list",
                "bfd_get_arch",
                "setup_section",
                "bfd_create_gnu_debuglink_section",
                "dcgettext",
                "bfd_set_section_size",
                "bfd_nonfatal_message",
                "bfd_get_full_section_contents",
                "FUN_00105828",
                "copy_object.cold",
                "bfd_malloc_and_get_section",
                "non_fatal",
                "fwrite",
                "bfd_set_format",
                "free",
                "bfd_map_over_sections",
                "fclose",
                "bfd_make_section_with_flags",
                "xmalloc",
                "fopen",
                "__errno_location"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorDescription",
                "uVar4": "message",
                "local_38": "timespecPtr",
                "uStack_34": "tmp1",
                "uStack_30": "tmp2",
                "uStack_2c": "tmp3"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorDescription;\n  undefined8 message;\n  undefined4 timespecPtr;\n  undefined4 tmp1;\n  undefined4 tmp2;\n  undefined4 tmp3;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  timespecPtr = *(undefined4 *)(fileInfo + 0x48);\n  tmp1 = *(undefined4 *)(fileInfo + 0x4c);\n  tmp2 = *(undefined4 *)(fileInfo + 0x50);\n  tmp3 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timespecPtr,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorDescription = strerror(*error);\n    message = dcgettext(0,\"%s: cannot set time: %s\",5);\n    non_fatal(message,filePath,errorDescription);\n  }\n  return;\n}\n\n",
            "called": [
                "set_times.cold",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00104ea2",
                "smart_rename.cold"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_00128448": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128448",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_00128448"
        },
        "FUN_00128328": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128328",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_00128328"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "handle_error_0011a110",
                "param_1": "errorDescription",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid handleError_0011a110(long errorDescription)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorCode = bfd_get_error();\n  if (errorCode == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorCode);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_nonfatal.cold",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "do_display_target.cold",
                "mark_symbols_used_in_relocations.cold",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations",
                "FUN_00104ea2",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "handle_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "extracted_function_0010e2f0",
                "param_1": "paramArray",
                "param_2": "defaultValue",
                "param_3": "index",
                "param_4": "string",
                "param_5": "lookupString",
                "lVar1": "temp1",
                "lVar3": "lookupResult",
                "lVar7": "foundAddress",
                "uVar2": "errorValue",
                "uVar4": "errorMessage",
                "uVar5": "localizedErrorMessage",
                "sVar6": "stringLength",
                "local_44": "tempValue",
                "local_3c": "tempArray",
                "uStack_40": "defaultVar",
                "uStack_3f": "undefinedVar",
                "uStack_3e": "tempValue2"
            },
            "code": "\nundefined8\nextractedFunction_0010e2f0(long *paramArray,undefined defaultValue,int index,undefined8 string,char *lookupString)\n\n{\n  long temp1;\n  undefined4 errorValue;\n  long lookupResult;\n  undefined8 errorMessage;\n  undefined8 localizedErrorMessage;\n  size_t stringLength;\n  long foundAddress;\n  undefined4 tempValue;\n  undefined defaultVar;\n  undefined undefinedVar;\n  undefined2 tempValue2;\n  undefined4 tempArray [3];\n  \n  if (lookupString == (char *)0x0) {\n    foundAddress = 0;\n  }\n  else {\n    lookupResult = bfd_hash_lookup(paramArray + 7,lookupString,1,1);\n    if (lookupResult == 0) {\n      errorValue = bfd_get_error();\n      errorMessage = bfd_errmsg(errorValue);\n      localizedErrorMessage = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      non_fatal(localizedErrorMessage,errorMessage);\n      return 0;\n    }\n    foundAddress = *(long *)(lookupResult + 0x20);\n    if (foundAddress == -1) {\n      foundAddress = paramArray[6];\n      temp1 = paramArray[5];\n      *(long *)(lookupResult + 0x20) = foundAddress;\n      if (temp1 == 0) {\n        paramArray[4] = lookupResult;\n      }\n      else {\n        *(long *)(temp1 + 0x18) = lookupResult;\n      }\n      paramArray[5] = lookupResult;\n      stringLength = strlen(lookupString);\n      paramArray[6] = foundAddress + 1 + stringLength;\n    }\n  }\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(foundAddress,&tempValue);\n  undefinedVar = 0;\n  defaultVar = defaultValue;\n  (**(code **)(*(long *)(*paramArray + 8) + 0x68))((long)index,&tempValue2);\n  (**(code **)(*(long *)(*paramArray + 8) + 0x50))(string,tempArray);\n  if ((ulong)paramArray[3] < paramArray[2] + 0xcU) {\n    paramArray[3] = paramArray[3] * 2;\n    foundAddress = xrealloc(paramArray[1]);\n    paramArray[1] = foundAddress;\n  }\n  foundAddress = paramArray[2];\n  lookupResult = paramArray[1];\n  *(ulong *)(lookupResult + foundAddress) = CONCAT26(tempValue2,CONCAT15(undefinedVar,CONCAT14(defaultVar,tempValue)));\n  *(undefined4 *)(lookupResult + 8 + foundAddress) = tempArray[0];\n  paramArray[2] = paramArray[2] + 0xc;\n  return CONCAT71((int7)((ulong)foundAddress >> 8),1);\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "bfd_errmsg",
                "dcgettext",
                "non_fatal",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "stab_function_type.lto_priv.0",
                "stab_variable.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_lineno.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_start_block.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_start_source.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_end_block.lto_priv.0",
                "stab_function_parameter.lto_priv.0"
            ],
            "imported": false,
            "current_name": "extracted_function_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "find_section_flags_00113fe0",
                "param_1": "sectionName",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "errorMessage",
                "pcVar3": "commaIndex",
                "pcVar4": "nextSectionName",
                "sVar5": "sectionNameLength",
                "iVar6": "sectionNameDifference",
                "uVar7": "flags",
                "auVar8": "resultStruct"
            },
            "code": "\nundefined  [16] findSectionFlags_00113fe0(char *sectionName,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 errorMessage;\n  char *commaIndex;\n  char *nextSectionName;\n  size_t sectionNameLength;\n  int sectionNameDifference;\n  uint flags;\n  undefined resultStruct [16];\n  \n  flags = 0;\n  do {\n    commaIndex = strchr(sectionName,0x2c);\n    if (commaIndex == (char *)0x0) {\n      sectionNameLength = strlen(sectionName);\n      sectionNameDifference = (int)sectionNameLength;\n      nextSectionName = (char *)0x0;\n    }\n    else {\n      nextSectionName = commaIndex + 1;\n      sectionNameDifference = (int)commaIndex - (int)sectionName;\n    }\n    sectionNameLength = (size_t)sectionNameDifference;\n    result = strncasecmp(\"alloc\",sectionName,sectionNameLength);\n    if (result == 0) {\n      flags = flags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionName,sectionNameLength);\n      if (result == 0) {\n        flags = flags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionName,sectionNameLength);\n        if (result == 0) {\n          flags = flags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionName,sectionNameLength);\n          if (result == 0) {\n            flags = flags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionName,sectionNameLength);\n            if (result == 0) {\n              flags = flags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionName,sectionNameLength);\n              if (result == 0) {\n                flags = flags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionName,sectionNameLength);\n                if (result == 0) {\n                  flags = flags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionName,sectionNameLength);\n                  if (result == 0) {\n                    flags = flags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionName,sectionNameLength);\n                    if (result == 0) {\n                      flags = flags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionName,sectionNameLength);\n                      if (result == 0) {\n                        flags = flags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionName,sectionNameLength);\n                        if (result == 0) {\n                          flags = flags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionName,sectionNameLength);\n                          if (result == 0) {\n                            flags = flags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionName,sectionNameLength);\n                            if (result != 0) {\n                              commaIndex = (char *)xmalloc((long)(sectionNameDifference + 1));\n                              strncpy(commaIndex,sectionName,sectionNameLength);\n                              commaIndex[sectionNameLength] = '\\0';\n                              errorMessage = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              non_fatal(errorMessage,commaIndex);\n                              errorMessage = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              fatal(errorMessage,\n                                    \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                   );\n                            }\n                            flags = flags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionName = nextSectionName;\n  } while (nextSectionName != (char *)0x0);\n  resultStruct._4_4_ = 0;\n  resultStruct._0_4_ = flags;\n  resultStruct._8_8_ = param4;\n  return resultStruct;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "find_section_flags_00113fe0"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_modified_string_001125fa",
                "param_1": "inputArray",
                "uVar1": "totalStringLength",
                "ppcVar2": "secondElement",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s": "resultString"
            },
            "code": "\nchar * generateModifiedString_001125fa(char **inputArray)\n\n{\n  ulong totalStringLength;\n  char **secondElement;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  \n  if (inputArray == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  secondElement = (char **)inputArray[0x1d];\n  resultString = *inputArray;\n  if ((secondElement != (char **)0x0) && ((*(byte *)((long)secondElement + 0x49) & 0x10) == 0)) {\n    length1 = strlen(*secondElement);\n    length2 = strlen(resultString);\n    totalStringLength = length1 + 3 + length2;\n    if (curr_1 < totalStringLength) {\n      if (curr_1 != 0) {\n        free(buf_0);\n      }\n      curr_1 = (totalStringLength >> 1) + totalStringLength;\n      buf_0 = (char *)xmalloc();\n    }\n    sprintf(buf_0,\"%s(%s)\",*(undefined8 *)inputArray[0x1d],*inputArray);\n    resultString = buf_0;\n  }\n  return resultString;\n}\n\n",
            "called": [
                "strlen",
                "sprintf",
                "free",
                "__assert_fail",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "copy_object",
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "bfd_nonfatal_message",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "generate_modified_string_001125fa"
        },
        "FUN_00104380": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "xstrndup"
            ],
            "imported": false,
            "current_name": "FUN_00104380"
        },
        "FUN_00104260": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104260"
        },
        "FUN_001048c0": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "parse_stab_type",
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001048c0"
        },
        "FUN_001047a0": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "main",
                "parse_coff_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type",
                "bfd_nonfatal_message",
                "bfd_nonfatal",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_typdef.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047a0"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "get_one_00108f05"
            },
            "code": "\nundefined get_one_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "get_one_00108f05"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_stabs_memory_00108863",
                "puVar1": "currentStabsEntry",
                "puVar2": "nextStabsEntry"
            },
            "code": "\nvoid freeStabsMemory_00108863(void)\n\n{\n  undefined4 *currentStabsEntry;\n  undefined4 *nextStabsEntry;\n  \n  currentStabsEntry = (undefined4 *)saved_stabs;\n  do {\n    nextStabsEntry = currentStabsEntry + 6;\n    free(*(void **)(currentStabsEntry + 4));\n    *(undefined8 *)(currentStabsEntry + 4) = 0;\n    currentStabsEntry = nextStabsEntry;\n  } while (nextStabsEntry != &saved_stabs_index);\n  saved_stabs_index = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_stabs_memory_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "_": "undefinedValue"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00128450": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fwrite@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128450",
            "calling": [
                "fwrite",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_00128450"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_start_source_00108f08",
                "param_1": "source_file_handle",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "return_value",
                "puVar3": "debug_file_entry",
                "puVar4": "current_entry",
                "lVar5": "loop_counter",
                "puVar6": "source_files_list",
                "pcVar7": "current_filename",
                "puVar8": "previous_entry",
                "bVar9": "dummy_byte"
            },
            "code": "\n\n\nundefined8 debug_start_source_00108f08(long source_file_handle,char *filename)\n\n{\n  int comparison_result;\n  undefined8 return_value;\n  undefined8 *debug_file_entry;\n  undefined8 *current_entry;\n  long loop_counter;\n  undefined8 *source_files_list;\n  char *current_filename;\n  undefined8 *previous_entry;\n  byte dummy_byte;\n  \n  dummy_byte = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_file_handle + 8) == 0) {\n    return_value = dcgettext(0,\"debug_start_source_00108f08: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",return_value);\n    return_value = 0;\n  }\n  else {\n    for (debug_file_entry = *(undefined8 **)(*(long *)(source_file_handle + 8) + 8); debug_file_entry != (undefined8 *)0x0;\n        debug_file_entry = (undefined8 *)*debug_file_entry) {\n      comparison_result = filename_cmp(debug_file_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    debug_file_entry = (undefined8 *)xmalloc(0x18);\n    source_files_list = *(undefined8 **)(source_file_handle + 0x10);\n    previous_entry = debug_file_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)previous_entry = 0;\n      previous_entry = (undefined8 *)((long)previous_entry + (ulong)dummy_byte * -8 + 4);\n    }\n    debug_file_entry[1] = current_filename;\n    previous_entry = (undefined8 *)*source_files_list;\n    while (current_entry = previous_entry, current_entry != (undefined8 *)0x0) {\n      source_files_list = current_entry;\n      previous_entry = (undefined8 *)*current_entry;\n    }\n    *source_files_list = debug_file_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_file_handle + 0x10) = debug_file_entry;\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "filename_cmp",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "debug_start_source_00108f08"
        },
        "FUN_00104140": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_00116852",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUN_00104140"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "copy_file.cold",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "FUN_00128210": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strspn@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128210",
            "calling": [
                "strspn"
            ],
            "imported": false,
            "current_name": "FUN_00128210"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "update_change_sections_00114190",
                "param_1": "sections",
                "param_2": "is_match",
                "param_3": "flags",
                "uVar1": "flags_check",
                "plVar2": "section_name",
                "pplVar3": "current_section",
                "iVar4": "result",
                "uVar5": "error_message",
                "pplVar6": "current_match",
                "pplVar7": "previous_match",
                "pplVar8": "next_match"
            },
            "code": "\nlong ** update_change_sections_00114190(long *sections,char is_match,uint flags)\n\n{\n  uint flags_check;\n  long *section_name;\n  long **current_section;\n  int result;\n  undefined8 error_message;\n  long **current_match;\n  long **previous_match;\n  long **next_match;\n  \n  previous_match = change_sections;\n  if (change_sections == (long **)0x0) {\n    if (is_match == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (is_match == '\\0') {\n    if ((flags & *(uint *)((long)change_sections + 0x14)) == 0) {\nLAB_001141e5:\n      current_match = (long **)*previous_match;\n      if (current_match == (long **)0x0) {\n        return (long **)0x0;\n      }\n      previous_match = (long **)0x0;\n    }\n    else {\n      section_name = change_sections[1];\n      if (*(char *)section_name == '!') {\n        result = fnmatch((char *)((long)section_name + 1),(char *)sections,0);\n        current_match = previous_match;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)section_name,(char *)sections,0);\n      if (result != 0) goto LAB_001141e5;\n      current_match = (long **)*previous_match;\n      if (current_match == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_match + 0x14)) != 0) {\n      section_name = current_match[1];\n      if (*(char *)section_name == '!') {\n        result = fnmatch((char *)((long)section_name + 1),(char *)sections,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_match + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)section_name,(char *)sections,0);\n        if ((previous_match == (long **)0x0) && (result == 0)) {\n          next_match = (long **)*current_match;\n          previous_match = current_match;\n          if (next_match == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_match = (long **)*current_match;\n    current_match = previous_match;\n    if (next_match != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)change_sections[1],(char *)sections);\n    if (result == 0) {\nLAB_001143cd:\n      flags_check = *(uint *)((long)previous_match + 0x14);\n      if ((((flags_check & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((flags_check & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        fatal(error_message,sections);\n      }\n      if ((((flags_check & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        fatal(error_message,sections);\n      }\n      if ((((flags_check & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)previous_match + 0x14) = flags_check | flags;\n        return previous_match;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      fatal(error_message,sections);\n    }\n    previous_match = (long **)*previous_match;\n    if (previous_match == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)previous_match[1],(char *)sections);\n    if (result == 0) goto LAB_001143cd;\n    next_match = (long **)*previous_match;\n    current_match = (long **)0x0;\n    if (next_match == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      previous_match = current_match;\n      if (is_match == '\\0') {\n        while (current_match = next_match, current_section = previous_match, next_match = current_match,\n              (flags & *(uint *)((long)current_match + 0x14)) != 0) {\n          section_name = current_match[1];\n          if (*(char *)section_name == '!') {\n            result = fnmatch((char *)((long)section_name + 1),(char *)sections,0);\n            if (result == 0) goto LAB_0011438e;\n            next_match = (long **)*current_match;\n            if ((long **)*current_match == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)section_name,(char *)sections,0);\n            if ((previous_match == (long **)0x0) && (result == 0)) {\n              previous_match = current_match;\n              next_match = (long **)*current_match;\n              if ((long **)*current_match == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_match = (long **)*current_match;\n              if ((long **)*current_match == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)next_match[1],(char *)sections);\n        current_section = current_match;\n        previous_match = next_match;\n        if (result == 0) goto LAB_001143cd;\n      }\n      current_match = current_section;\n      next_match = (long **)*next_match;\n      previous_match = current_match;\n    } while (next_match != (long **)0x0);\nLAB_001142a1:\n    if (is_match != '\\0') {\nLAB_001142a9:\n      current_match = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_match + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_match + 2) = 0;\n      *(uint *)((long)current_match + 0x14) = flags;\n      current_match[5] = (long *)0x0;\n      previous_match = current_match;\n      *current_match = (long *)change_sections;\n      change_sections = previous_match;\n      current_match[1] = sections;\n      return current_match;\n    }\n  }\nLAB_00114212:\n  if (previous_match == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(previous_match + 2) = 1;\n  return previous_match;\n}\n\n",
            "called": [
                "dcgettext",
                "fnmatch",
                "find_section_list.cold",
                "xmalloc",
                "fatal",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "main",
                "setup_section",
                "is_strip_section_1.isra.0",
                "handle_remove_section_option",
                "copy_relocations_in_section",
                "FUN_00107880",
                "setup_section.cold",
                "copy_section"
            ],
            "imported": false,
            "current_name": "update_change_sections_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "extract_gnu_build_attributes_00116490",
                "param_1": "param_ptr",
                "param_2": "param_size",
                "param_3": "param_name",
                "param_4": "param_data",
                "uVar1": "result",
                "uVar2": "value1",
                "uVar3": "value2",
                "bVar4": "flag",
                "puVar5": "ptr",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "message",
                "in_RAX": "note_type",
                "uVar9": "value3",
                "uVar10": "value4",
                "uVar11": "value5",
                "uVar12": "value6",
                "__ptr": "data_ptr",
                "uVar13": "size",
                "unaff_RBX": "remaining_data",
                "unaff_RBP": "previous_value",
                "puVar14": "note_ptr",
                "puVar15": "name_ptr",
                "cVar16": "char_value",
                "puVar17": "ptr1",
                "puVar18": "ptr2",
                "in_R11": "data_offset",
                "unaff_R12": "note_array",
                "puVar19": "current_note",
                "unaff_R13": "note_offset",
                "__nmemb": "num_notes",
                "unaff_R14": "message_ptr",
                "puVar20": "ptr3",
                "bVar21": "bool_value",
                "iVar22": "loop_var",
                "unaff_retaddr": "return_addr",
                "param_7": "param_value",
                "param_8": "param_flag",
                "param_9": "param_previous_value",
                "in_stack_00000020": "total_size",
                "in_stack_00000028": "note_data_ptr",
                "in_stack_00000030": "ptr_name",
                "in_stack_00000038": "flag1",
                "in_stack_00000040": "flag2",
                "in_stack_00000048": "ptr_message"
            },
            "code": "\nulong extract_gnu_build_attributes_00116490(undefined8 param_ptr,ulong param_size,ulong param_name,long param_data)\n\n{\n  undefined8 result;\n  undefined8 value1;\n  ulong value2;\n  bool flag;\n  ulong *ptr;\n  int index;\n  long length;\n  undefined8 message;\n  ulong note_type;\n  ulong value3;\n  ulong value4;\n  ulong value5;\n  ulong value6;\n  undefined *data_ptr;\n  ulong size;\n  ulong remaining_data;\n  ulong previous_value;\n  ulong *note_ptr;\n  undefined *name_ptr;\n  char char_value;\n  undefined *ptr1;\n  undefined *ptr2;\n  ulong data_offset;\n  ulong *note_array;\n  ulong *current_note;\n  ulong note_offset;\n  size_t num_notes;\n  undefined8 *message_ptr;\n  ulong *ptr3;\n  byte bool_value;\n  int loop_var;\n  ulong return_addr;\n  ulong param_value;\n  uint param_flag;\n  ulong param_previous_value;\n  ulong total_size;\n  ulong *note_data_ptr;\n  undefined *ptr_name;\n  uint flag1;\n  uint flag2;\n  undefined8 *ptr_message;\n  \n  bool_value = 0;\ncode_r0x00116490:\n  length = param_data;\n  value4 = previous_value;\n  size = note_offset;\n  if (note_type == 0) {\n    if (param_size == 0x100) {\n      note_array[7] = return_addr;\n      value5 = return_addr;\nLAB_001164af:\n      value3 = note_offset;\n      size = note_offset;\n      return_addr = value5;\n    }\n    else {\n      note_array[7] = param_previous_value;\nLAB_0011669e:\n      value4 = previous_value;\n      value3 = previous_value;\n    }\nLAB_001164bb:\n    note_array[8] = value3;\n    if (*(char *)((note_array[3] - 1) + param_name) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    current_note = note_array + 9;\n    if (0xb < remaining_data) {\n      value3 = (**(code **)(message_ptr[1] + 0x40))(length);\n      *current_note = value3;\n      value3 = (**(code **)(message_ptr[1] + 0x40))(length + 4);\n      note_array[10] = value3;\n      param_size = (**(code **)(message_ptr[1] + 0x40))(length + 8);\n      param_name = *current_note;\n      note_array[0xb] = param_size;\n      note_type = note_array[10];\n      value3 = param_name + 3 & 0xfffffffffffffffc;\n      note_array[0xf] = value3;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_size - 0x100) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      value5 = value3 + note_type + 0xc;\n      if (remaining_data < value5) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_name < 2) {\n        length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      note_array[0xc] = length + 0xc;\n      data_offset = length + 0xc + value3;\n      note_array[0xd] = data_offset;\n      remaining_data = remaining_data + (-0xc - (value3 + note_type));\n      param_data = length + value5;\n      previous_value = value4;\n      note_array = current_note;\n      note_offset = size;\n      if (param_name != 2) {\n        if (*(char *)(length + 0xc) == '$') {\n          if ((*(char *)(length + 0xd) == '\\x01') && (*(char *)(length + 0xe) == '1')) {\n            value4 = extract_gnu_build_attributes_00116490();\n            return value4;\n          }\n        }\n        else if ((((4 < param_name) && (*(char *)(length + 0xc) == 'G')) &&\n                 (*(char *)(length + 0xd) == 'A')) &&\n                ((*(char *)(length + 0xe) == '$' && (*(char *)(length + 0xf) == '\\x01')))) {\n          if (*(char *)(length + 0x10) == '2') {\n            value4 = extract_gnu_build_attributes_00116490();\n            return value4;\n          }\n          if (*(char *)(length + 0x10) == '3') {\n            value4 = extract_gnu_build_attributes_00116490();\n            return value4;\n          }\n          length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_data != 0) {\n      length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((flag1 | flag2 | param_flag) == 0) {\n      result = *message_ptr;\n      value1 = *ptr_message;\n      message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(message,result,value1);\nLAB_0011671b:\n      num_notes = ((long)current_note - (long)note_data_ptr >> 3) * -0x71c71c71c71c71c7;\n      qsort(note_data_ptr,num_notes,0x48,compare_gnu_build_notes);\n      for (note_ptr = note_data_ptr; note_ptr < current_note; note_ptr = note_ptr + 9) {\n        value4 = note_ptr[2];\n        if (value4 != 0) {\n          size = note_ptr[7];\n          value3 = note_ptr[8];\n          ptr3 = note_ptr;\n          loop_var = 0;\n          if (size == value3) {\n            note_ptr[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptr = ptr3;\n                ptr3 = ptr + -9;\n                if (ptr3 < note_data_ptr) goto LAB_001167f5;\n                value5 = ptr[-7];\n              } while (value5 == 0);\n              if ((*ptr3 != *note_ptr) ||\n                 (index = memcmp((void *)ptr[-6],(void *)note_ptr[3],*note_ptr), index != 0))\n              break;\n              value2 = ptr[-2];\n              value6 = ptr[-1];\n              if (size == value2) {\n                if (value3 == value6) {\n                  note_ptr[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (value3 <= value6) {\n                  note_ptr[2] = 0;\n                  break;\n                }\n                if (value6 < size) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < value6) ||\n                     (size <= (value6 + 0xf & 0xfffffffffffffff0))) goto process_notes_00116852;\n                }\nLAB_001167b8:\n                if ((value4 == 0x101) == (value5 == 0x101)) {\n                  if (value6 <= value3) {\n                    value6 = value3;\n                  }\n                  if (value2 < size) {\n                    size = value2;\n                  }\n                  ptr[-1] = value6;\n                  ptr[-2] = size;\n                  note_ptr[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (value2 <= size) goto LAB_001167a6;\n                if (value6 < size) goto LAB_0010852c;\n                if (value3 < size) {\n                  if ((0xfffffffffffffff0 < value3) || (value2 <= (value3 + 0xf & 0xfffffffffffffff0)))\n                  goto process_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (value3 != value6) goto LAB_001167b8;\n              }\nprocess_notes_00116852:\n              flag = loop_var < 0x11;\n              loop_var = loop_var + 1;\n            } while (flag);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(note_data_ptr,num_notes,0x48,sort_gnu_build_notes);\n      data_ptr = (undefined *)xmalloc(total_size * 2);\n      param_value = 0;\n      param_previous_value = 0;\n      ptr2 = data_ptr;\n      for (note_ptr = note_data_ptr; note_ptr < current_note; note_ptr = note_ptr + 9) {\n        if (note_ptr[2] != 0) {\n          ptr1 = ptr2 + 4;\n          name_ptr = ptr2 + 0xc;\n          if ((note_ptr[7] == param_previous_value) && (note_ptr[8] == param_value)) {\n            (**(code **)(message_ptr[1] + 0x50))(*note_ptr,ptr2);\n            (**(code **)(message_ptr[1] + 0x50))(0,ptr1);\n            (**(code **)(message_ptr[1] + 0x50))(note_ptr[2],ptr2 + 8);\n            size = note_ptr[6];\n            value4 = *note_ptr;\n            ptr2 = (undefined *)note_ptr[3];\n            ptr1 = name_ptr;\n            for (value3 = value4; value3 != 0; value3 = value3 - 1) {\n              *ptr1 = *ptr2;\n              ptr2 = ptr2 + (ulong)bool_value * -2 + 1;\n              ptr1 = ptr1 + (ulong)bool_value * -2 + 1;\n            }\n            if (value4 < size) {\n              for (length = size - value4; length != 0; length = length + -1) {\n                *ptr1 = 0;\n                ptr1 = ptr1 + (ulong)bool_value * -2 + 1;\n              }\n            }\n            ptr2 = name_ptr + size;\n          }\n          else {\n            (**(code **)(message_ptr[1] + 0x50))();\n            if (*(int *)(message_ptr[1] + 8) == 5) {\n              char_value = (*(char *)(message_ptr[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              char_value = '\\b';\n            }\n            (**(code **)(message_ptr[1] + 0x50))(char_value,ptr1);\n            (**(code **)(message_ptr[1] + 0x50))(note_ptr[2],ptr2 + 8);\n            value4 = *note_ptr;\n            ptr2 = (undefined *)note_ptr[3];\n            ptr1 = name_ptr;\n            for (size = value4; size != 0; size = size - 1) {\n              *ptr1 = *ptr2;\n              ptr2 = ptr2 + (ulong)bool_value * -2 + 1;\n              ptr1 = ptr1 + (ulong)bool_value * -2 + 1;\n            }\n            size = note_ptr[6];\n            if (value4 < size) {\n              for (length = size - value4; length != 0; length = length + -1) {\n                *ptr1 = 0;\n                ptr1 = ptr1 + (ulong)bool_value * -2 + 1;\n              }\n            }\n            length = message_ptr[1];\n            name_ptr = name_ptr + size;\n            ptr2 = name_ptr + 8;\n            if ((*(int *)(length + 8) == 5) && (*(char *)(message_ptr[0x22] + 4) == '\\x02')) {\n              (**(code **)(length + 0x38))(note_ptr[7],name_ptr);\n              (**(code **)(message_ptr[1] + 0x38))(note_ptr[8],ptr2);\n              ptr2 = name_ptr + 0x10;\n            }\n            else {\n              (**(code **)(length + 0x50))(note_ptr[7],name_ptr);\n              (**(code **)(message_ptr[1] + 0x50))(note_ptr[8],name_ptr + 4);\n            }\n            param_previous_value = note_ptr[7];\n            param_value = note_ptr[8];\n          }\n        }\n      }\n      size = (long)ptr2 - (long)data_ptr;\n      value4 = size;\n      ptr2 = data_ptr;\n      if (size < total_size) {\n        for (; total_size = size, value4 != 0; value4 = value4 - 1) {\n          *ptr_name = *ptr2;\n          ptr2 = ptr2 + (ulong)bool_value * -2 + 1;\n          ptr_name = ptr_name + (ulong)bool_value * -2 + 1;\n        }\n      }\n      free(data_ptr);\nLAB_001166f8:\n      free(note_data_ptr);\n      return total_size;\n    }\n    if (((flag2 | param_flag) == 0) || (flag1 == 0)) {\n      if (flag2 == 0) {\n        if (param_flag != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_flag == 0) goto LAB_001166f8;\n    }\n    length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      value5 = (**(code **)(message_ptr[1] + 0x28))(data_offset);\n      value3 = (**(code **)(message_ptr[1] + 0x28))(note_array[4] + 8);\n      if (value3 < value5) {\n        value5 = value3;\n      }\nLAB_00116631:\n      if (note_array[2] == 0x100) {\n        if (value5 == 0) {\n          value5 = return_addr;\n        }\n        param_name = *note_array;\n        note_array[7] = value5;\n        size = value3;\n        return_addr = value5;\n        if (value3 == 0) goto LAB_001164af;\n      }\n      else {\n        if (value5 == 0) {\n          value5 = param_previous_value;\n        }\n        param_name = *note_array;\n        note_array[7] = value5;\n        value4 = value3;\n        param_previous_value = value5;\n        if (value3 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        value5 = (**(code **)(message_ptr[1] + 0x40))(data_offset);\n        value3 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        value4 = FUNC_001086af();\n        return value4;\n      }\n    }\n    length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (length != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,message_ptr,ptr_message,length);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "merge_gnu_build_notes.cold"
            ],
            "imported": false,
            "current_name": "extract_gnu_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      non_fatal(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_gnu_build_notes);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto process_notes_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto process_notes_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nprocess_notes_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,sort_gnu_build_notes);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    bfd_nonfatal_message(0,unaff_R14,in_stack_00000048,lVar7);\n    status = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "FUN_00128118": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128118",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_00128118"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fputc",
                "dcgettext",
                "bfd_target_list",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_001048d0": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "copy_file"
            ],
            "imported": false,
            "current_name": "FUN_001048d0"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionDataPtr",
                "param_2": "debugMessagePtr",
                "param_3": "unusedPtr",
                "param_4": "returnValue",
                "lVar1": "currentFunctionPtr",
                "uVar2": "errorMessagePtr",
                "pcVar3": "errorMessage",
                "auVar4": "returnValueArray"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionDataPtr,undefined8 debugMessagePtr,undefined8 unusedPtr,undefined8 returnValue)\n\n{\n  long currentFunctionPtr;\n  undefined8 errorMessagePtr;\n  char *errorMessage;\n  undefined returnValueArray [16];\n  \n  if (((*(long *)(functionDataPtr + 8) == 0) || (currentFunctionPtr = *(long *)(functionDataPtr + 0x20), currentFunctionPtr == 0)) ||\n     (*(long *)(functionDataPtr + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentFunctionPtr + 8) == 0) {\n      *(undefined8 *)(currentFunctionPtr + 0x20) = debugMessagePtr;\n      errorMessagePtr = CONCAT71((int7)((ulong)currentFunctionPtr >> 8),1);\n      *(undefined (*) [16])(functionDataPtr + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessagePtr = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorMessagePtr);\n  errorMessagePtr = 0;\nLAB_0010be86:\n  returnValueArray._8_8_ = returnValue;\n  returnValueArray._0_8_ = errorMessagePtr;\n  return returnValueArray;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "parse_stab",
                "FUN_0010554f",
                "finish_stab"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "FUN_00104270": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "stab_demangle_v3_arg",
                "display_info.isra.0.cold",
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "startswith.lto_priv.0.lto_priv.0",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_write_symbol.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "stab_class_start_method.lto_priv.0",
                "convert_efi_target",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "display_info.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_class_end_method.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "is_dwo_section.constprop.0"
            ],
            "imported": false,
            "current_name": "FUN_00104270"
        },
        "FUN_00104150": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104150"
        },
        "FUN_00104390": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "add_redefine_and_check",
                "coff_get_slot.lto_priv.0",
                "find_section_list",
                "stab_struct_field.lto_priv.0",
                "savestring",
                "debug_set_class_id.lto_priv.0",
                "xstrndup",
                "stab_start_struct_type.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "main",
                "debug_name_type",
                "debug_make_array_type.isra.0",
                "convert_efi_target",
                "stab_demangle_args",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "copy_section",
                "add_specific_symbols",
                "bfd_get_archive_filename",
                "debug_make_enum_type.isra.0",
                "stab_function_type.lto_priv.0",
                "debug_record_function",
                "debug_add_to_namespace.constprop.0",
                "stab_range_type.lto_priv.0",
                "template_in_dir",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "debug_start_block",
                "parse_flags.cold",
                "parse_stab",
                "debug_make_function_type.isra.0",
                "parse_stab_type",
                "debug_set_filename",
                "stab_modify_type",
                "FUN_00107880",
                "section_add_load_file",
                "debug_record_line",
                "stab_end_struct_type.lto_priv.0",
                "FUN_0010554f",
                "debug_record_variable",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "stab_set_type.lto_priv.0",
                "init_section_add",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "setup_section",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "debug_make_method_type.isra.0",
                "stab_class_start_method.lto_priv.0",
                "mark_symbols_used_in_relocations",
                "debug_make_offset_type.isra.0",
                "stab_class_static_member.lto_priv.0",
                "debug_make_struct_type.isra.0",
                "write_stabs_in_sections_debugging_info.constprop.0",
                "stab_find_slot",
                "stab_function_parameter.lto_priv.0",
                "stab_push_string",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "start_stab.constprop.0",
                "stab_find_tagged_type",
                "debug_make_type.constprop.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_record_variable",
                "parse_coff_type.lto_priv.0",
                "debug_tag_type",
                "debug_start_source",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0",
                "debug_record_parameter"
            ],
            "imported": false,
            "current_name": "FUN_00104390"
        },
        "FUN_001047b0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "merge_gnu_build_notes",
                "copy_relocations_in_section",
                "mark_symbols_used_in_relocations"
            ],
            "imported": false,
            "current_name": "FUN_001047b0"
        },
        "FUN_00128000": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemps@GLIBC_2.11 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128000",
            "calling": [
                "mkstemps"
            ],
            "imported": false,
            "current_name": "FUN_00128000"
        },
        "FUN_00104030": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104030"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_debug_type_00113da9",
                "param_1": "byteOffset",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "debugTypeStruct",
                "lVar2": "loopCounter",
                "puVar3": "currentPointer",
                "bVar4": "tempByte",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeDebugType_00113da9(byte byteOffset,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *debugTypeStruct;\n  long loopCounter;\n  undefined8 *currentPointer;\n  byte tempByte;\n  undefined result [16];\n  \n  tempByte = 0;\n  result._0_8_ = debug_make_type_constprop_0(8 - (uint)byteOffset);\n  if (result._0_8_ != 0) {\n    debugTypeStruct = (undefined8 *)xmalloc(0x28);\n    currentPointer = debugTypeStruct + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)currentPointer = 0;\n      currentPointer = (undefined8 *)((long)currentPointer + (ulong)tempByte * -8 + 4);\n    }\n    *debugTypeStruct = param3;\n    *(undefined8 **)(result._0_8_ + 0x10) = debugTypeStruct;\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1Field2"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1Field2;\n  \n  record1Field2 = record1[2];\n  if (record1Field2 == record2[2]) {\n    if (record2[7] <= record1[7]) {\n      if (record1[7] <= record2[7]) {\n        if (record2[8] < record1[8]) {\n          return -1;\n        }\n        if (record2[8] <= record1[8]) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1Field2 == 0) || ((record1Field2 != 0x100 && (record2[2] != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "sort_gnu_build_notes.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "FUN_00128228": {
            "renaming": {},
            "code": "\n\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* read@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128228",
            "calling": [
                "read"
            ],
            "imported": false,
            "current_name": "FUN_00128228"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "process_data_0010a69a",
                "param_1": "data",
                "param_2": "ptr",
                "param_3": "count",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "index",
                "sVar3": "strLen",
                "uVar4": "allocatedMem",
                "uVar5": "isValid",
                "local_60": "buffer"
            },
            "code": "\nundefined4 processData_0010a69a(long data,undefined8 ptr,int count,char flag,uint value)\n\n{\n  undefined4 result;\n  long index;\n  size_t strLen;\n  undefined8 allocatedMem;\n  undefined isValid;\n  char buffer [48];\n  \n  if (count == 0) {\n    buffer[0] = '\\0';\n    isValid = 0;\n    index = 0;\n  }\n  else {\n    index = stab_get_struct_index();\n    if (index < 0) {\n      return 0;\n    }\n    isValid = 1;\n    sprintf(buffer,\"%ld=\",index);\n  }\n  strLen = strlen(buffer);\n  sprintf(buffer + strLen,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = stab_push_string(data,buffer,index,isValid,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  index = *(long *)(data + 0x60);\n  allocatedMem = xmalloc(1);\n  *(undefined8 *)(index + 0x20) = allocatedMem;\n  **(undefined **)(*(long *)(data + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "stab_get_struct_index",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "stab_start_class_type.lto_priv.0",
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "process_data_0010a69a"
        },
        "FUN_001048e0": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001048e0"
        },
        "FUN_001047c0": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "setup_section",
                "parse_stab_type",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047c0"
        },
        "FUN_00104160": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "main",
                "FUN_00114dc7",
                "add_specific_symbols"
            ],
            "imported": false,
            "current_name": "FUN_00104160"
        },
        "FUN_00104040": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "FUN_00104040"
        },
        "FUN_00104280": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104280"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_validity_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "strip_symbols_value",
                "lVar4": "section_list_1",
                "lVar5": "section_list_2",
                "uVar6": "result",
                "plVar7": "update_sections"
            },
            "code": "\nundefined8 check_section_validity_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int strip_symbols_value;\n  long section_list_1;\n  long section_list_2;\n  undefined8 result;\n  long *update_sections;\n  \n  section_list_1 = find_section_list(*section_names,0,4);\n  if (section_list_1 == 0) {\n    if ((sections_removed != '\\0') || (sections_copied != '\\0')) {\n      section_list_1 = find_section_list(*section_names,0,1);\n      section_list_2 = find_section_list(*section_names,0,2);\n      if (section_list_1 != 0) {\n        if (section_list_2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          fatal(result,current_section);\n        }\n        if (section_list_1 != 0) {\n          if (update_sections == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          update_sections = update_sections;\n          do {\n            strip_symbols_value = strcmp(current_section,(char *)update_sections[1]);\n            if (strip_symbols_value == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              fatal(result,current_section);\n            }\n            update_sections = (long *)*update_sections;\n          } while (update_sections != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((sections_copied != '\\0') && (section_list_2 == 0)) {\n        return 1;\n      }\n    }\n    strip_symbols_value = strip_symbols;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((strip_symbols - 2U < 2) || (strip_symbols == 7)) || (discard_locals == 2)) ||\n         (convert_debugging != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          strip_symbols_value = strcmp(current_section,\".reloc\");\n          if (strip_symbols_value != 0) {\n            return 1;\n          }\n          result = check_dwo_section_0010829e();\n          return result;\n        }\n      }\n      if (strip_symbols_value == 5) {\n        result = is_dwo_section_constprop_0(section_names);\n        return result;\n      }\n      if (strip_symbols_value == 4) {\n        return 0;\n      }\n    }\n    if (strip_symbols_value == 6) {\n      result = check_dwo_section_constprop_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "is_strip_section_1.isra.0.cold",
                "dcgettext",
                "find_section_list",
                "FUN_0010829e",
                "strcmp",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "is_strip_section.isra.0"
            ],
            "imported": false,
            "current_name": "check_section_validity_00115b70"
        },
        "FUN_001046a0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "parse_coff_type.lto_priv.0",
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001046a0"
        },
        "FUN_00128358": {
            "renaming": {},
            "code": "\n\n\n\nint mkstemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkstemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128358",
            "calling": [
                "mkstemp"
            ],
            "imported": false,
            "current_name": "FUN_00128358"
        },
        "FUN_00128230": {
            "renaming": {},
            "code": "\n\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128230",
            "calling": [
                "memcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128230"
        },
        "FUN_00116b40": {
            "renaming": {
                "FUN_00116b40": "initialize_00116b40",
                "completed_0": "is_initialized"
            },
            "code": "\nvoid initialize_00116b40(void)\n\n{\n  if (is_initialize_00116b40d != '\\0') {\n    return;\n  }\n  __cxa_finalize(__dso_handle);\n  deregister_tm_clones();\n  is_initialize_00116b40d = 1;\n  return;\n}\n\n",
            "called": [
                "deregister_tm_clones",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00116b40"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_reloc_00116030",
                "param_1": "bfd_handle",
                "param_2": "reloc_section",
                "plVar1": "reloc_entry",
                "lVar2": "reloc_address",
                "lVar3": "first_reloc",
                "lVar4": "second_reloc",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_function",
                "lVar7": "num_relocs",
                "__ptr": "reloc_buffer",
                "lVar8": "reloc_index",
                "uStack_28": "default_return"
            },
            "code": "\n\n\nundefined8 process_reloc_00116030(undefined8 *bfd_handle,long reloc_section)\n\n{\n  long *reloc_entry;\n  long reloc_address;\n  long first_reloc;\n  long second_reloc;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_function;\n  void *reloc_buffer;\n  long num_relocs;\n  undefined8 extraout_RAX;\n  long reloc_index;\n  undefined8 default_return;\n  \n  if (*(long *)(reloc_section + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_function = bfd_get_reloc_upper_bound();\n  if (fwrite_function < 0) {\n    if ((fwrite_function != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      bfd_nonfatal(*bfd_handle);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_function != 0) {\n    reloc_buffer = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(bfd_handle,reloc_section,reloc_buffer);\n    second_reloc = _DAT_00128680;\n    first_reloc = _DAT_00128568;\n    fwrite_function = _fwrite;\n    if (num_relocs < 0) {\n      bfd_nonfatal(*bfd_handle);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      reloc_index = 0;\n      do {\n        reloc_entry = **(long ***)((long)reloc_buffer + reloc_index * 8);\n        if ((((reloc_entry != (long *)0x0) && (reloc_address = *reloc_entry, reloc_address != 0)) && (reloc_address != fwrite_function)) &&\n           ((reloc_address != second_reloc && (reloc_address != first_reloc)))) {\n          *(uint *)(reloc_address + 0x18) = *(uint *)(reloc_address + 0x18) | 0x20;\n        }\n        reloc_index = reloc_index + 1;\n      } while (num_relocs != reloc_index);\n    }\n    free(reloc_buffer);\n    return extraout_RAX;\n  }\n  return default_return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc",
                "xexit",
                "mark_symbols_used_in_relocations.cold",
                "fwrite",
                "bfd_get_reloc_upper_bound",
                "free",
                "xmalloc",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_reloc_00116030"
        },
        "FUN_00128018": {
            "renaming": {},
            "code": "\n\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* utimensat@GLIBC_2.6 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128018",
            "calling": [
                "utimensat"
            ],
            "imported": false,
            "current_name": "FUN_00128018"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_starts_with_00113ede",
                "param_1": "strings",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_starts_with_00113ede(char **strings)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  string = *strings;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = startswith_lto_priv_0_lto_priv_0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "startswith.lto_priv.0.lto_priv.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "check_string_starts_with_00113ede"
        },
        "FUN_001047d0": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "add_redefine_and_check",
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "FUN_001047d0"
        },
        "FUN_001046b0": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "stab_demangle_template"
            ],
            "imported": false,
            "current_name": "FUN_001046b0"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "FUN_001048f0": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "merge_gnu_build_notes",
                "stab_variable.lto_priv.0",
                "list_matching_formats",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_demangle_type.lto_priv.0",
                "stab_pop_type",
                "stab_int_constant.lto_priv.0",
                "main",
                "stab_method_type.lto_priv.0",
                "FUN_00104ea2",
                "display_info.isra.0",
                "stab_emit_pending_vars",
                "copy_section",
                "bfd_get_archive_filename",
                "stab_function_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "parse_coff_struct_type",
                "stab_start_function.lto_priv.0",
                "free_saved_stabs",
                "parse_stab",
                "parse_stab_type",
                "stab_modify_type",
                "FUN_00107880",
                "copy_file",
                "stab_demangle_v3_arg",
                "stab_end_struct_type.lto_priv.0",
                "save_stab",
                "FUN_0010554f",
                "list_supported_targets",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_demangle_v3_arglist",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_demangle_qualified",
                "FUN_00114b84",
                "make_tempdir.cold",
                "mark_symbols_used_in_relocations",
                "stab_class_static_member.lto_priv.0",
                "stab_demangle_template",
                "stab_function_parameter.lto_priv.0",
                "copy_object.cold",
                "stab_start_class_type.lto_priv.0",
                "FUN_00116852",
                "stab_find_tagged_type",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_class_method_var",
                "parse_coff_type.lto_priv.0",
                "FUN_00108466",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001048f0"
        },
        "FUN_00128260": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128260",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_00128260"
        },
        "FUN_00104290": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "main",
                "parse_flags.cold",
                "parse_stab",
                "parse_stab_type",
                "init_section_add"
            ],
            "imported": false,
            "current_name": "FUN_00104290"
        },
        "FUN_00104050": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "stab_demangle_v3_arg"
            ],
            "imported": false,
            "current_name": "FUN_00104050"
        },
        "FUN_00104170": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "parse_stab"
            ],
            "imported": false,
            "current_name": "FUN_00104170"
        },
        "FUN_001048f8": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "htab_hash_redefnode"
            ],
            "imported": false,
            "current_name": "FUN_001048f8"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_type_data_0010c892",
                "param_1": "function_context",
                "param_2": "data_addr",
                "cVar1": "emit_success",
                "lVar2": "type_data",
                "lVar3": "tagged_type",
                "uVar4": "result",
                "puVar5": "type_ptr",
                "iVar6": "kind"
            },
            "code": "\n\n\nundefined8 process_type_data_0010c892(undefined8 function_context,long data_addr)\n\n{\n  char emit_success;\n  long type_data;\n  long tagged_type;\n  undefined8 result;\n  undefined8 *type_ptr;\n  int kind;\n  \n  if (*(char *)(data_addr + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (type_ptr = *(undefined8 **)(data_addr + 0x1a0); type_ptr != (undefined8 *)0x0;\n        type_ptr = (undefined8 *)*type_ptr) {\n      kind = *(int *)(type_ptr + 2);\n      tagged_type = type_ptr[1];\n      if (kind != 0) {\n        if (tagged_type != 0) {\n          if (kind - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        type_ptr[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagged_type == 0) goto LAB_0010c910;\n      kind = 7;\nLAB_0010c8d5:\n      type_data = debug_make_type_constprop_0(kind,0);\n      if (type_data == 0) goto LAB_0010c910;\n      tagged_type = debug_tag_type(function_context,tagged_type,type_data);\n      type_ptr[3] = tagged_type;\n      if (tagged_type == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    emit_success = stab_emit_pending_vars();\n    if (emit_success != '\\0') {\n      emit_success = debug_end_function(function_context,*(undefined8 *)(data_addr + 0x68));\n      if (emit_success != '\\0') {\n        *(undefined *)(data_addr + 0x60) = 0;\n        *(undefined8 *)(data_addr + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "debug_tag_type",
                "stab_emit_pending_vars",
                "debug_make_type.constprop.0",
                "debug_end_function"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_type_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_data_structure_00112904",
                "param_1": "value1",
                "param_2": "value2",
                "puVar1": "allocatedMemory"
            },
            "code": "\nvoid initializeDataStructure_00112904(undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *allocatedMemory;\n  \n  allocatedMemory = (undefined4 *)xmalloc(0x18);\n  *allocatedMemory = value1;\n  allocatedMemory[1] = value2;\n  *(undefined (*) [16])(allocatedMemory + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "stab_demangle_v3_arg",
                "stab_find_type",
                "finish_stab",
                "stab_demangle_type.lto_priv.0",
                "debug_make_indirect_type.isra.0",
                "debug_make_int_type.isra.0",
                "debug_make_void_type.isra.0",
                "debug_name_type",
                "debug_make_function_type.isra.0",
                "debug_make_volatile_type.isra.0",
                "debug_make_array_type.isra.0",
                "parse_stab_type",
                "debug_make_pointer_type.isra.0",
                "debug_tag_type",
                "debug_make_method_type.isra.0",
                "debug_make_offset_type.isra.0",
                "debug_make_struct_type.isra.0",
                "debug_make_float_type.isra.0",
                "debug_make_const_type.isra.0",
                "debug_make_reference_type.isra.0",
                "debug_make_enum_type.isra.0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00112904"
        },
        "FUN_00128388": {
            "renaming": {},
            "code": "\n\n\n\nchar * mkdtemp(char *__template)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* mkdtemp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128388",
            "calling": [
                "mkdtemp"
            ],
            "imported": false,
            "current_name": "FUN_00128388"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "unusedVar",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 unusedVar;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = unusedVar;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_exit_handlers_0011a390",
                "xatexit_head_lto_priv_0": "exitHandlersList",
                "lVar1": "index",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "currentHandler",
                "uVar5": "count"
            },
            "code": "\nvoid executeExitHandlers_0011a390(void)\n\n{\n  long index;\n  long previousIndex;\n  long tempIndex;\n  long *currentHandler;\n  uint count;\n  \n  currentHandler = (long *)exitHandlersList;\n  if (exitHandlersList != (undefined *)0x0) {\n    do {\n      count = *(int *)(currentHandler + 1) - 1;\n      if (-1 < (int)count) {\n        index = (long)(int)count;\n        count = count & 7;\n        (*(code *)currentHandler[index + 2])();\n        previousIndex = index + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)currentHandler[index + 1])();\n                        previousIndex = index + -2;\n                      }\n                      (*(code *)currentHandler[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)currentHandler[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)currentHandler[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)currentHandler[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)currentHandler[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)currentHandler[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)currentHandler[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)currentHandler[tempIndex + 1])();\n            (*(code *)currentHandler[tempIndex])();\n            (*(code *)currentHandler[index])();\n            (*(code *)currentHandler[tempIndex + -2])();\n            (*(code *)currentHandler[tempIndex + -3])();\n            (*(code *)currentHandler[tempIndex + -4])();\n            (*(code *)currentHandler[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      currentHandler = (long *)*currentHandler;\n    } while (currentHandler != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "execute_exit_handlers_0011a390"
        },
        "FUN_00128008": {
            "renaming": {},
            "code": "\n\n\n\nchar * getenv(char *__name)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getenv@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128008",
            "calling": [
                "getenv"
            ],
            "imported": false,
            "current_name": "FUN_00128008"
        },
        "FUN_00128128": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128128",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_00128128"
        },
        "FUN_001046c0": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "simple_copy"
            ],
            "imported": false,
            "current_name": "FUN_001046c0"
        },
        "FUN_001045a0": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "display_info.isra.0.cold",
                "display_info.isra.0",
                "do_display_target"
            ],
            "imported": false,
            "current_name": "FUN_001045a0"
        },
        "FUN_001047e0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "stab_variable.lto_priv.0",
                "stab_end_struct_type.lto_priv.0",
                "stab_push_defined_type",
                "stab_tag.lto_priv.0",
                "stab_typed_constant.lto_priv.0",
                "stab_float_type.lto_priv.0",
                "stab_struct_field.lto_priv.0",
                "stab_set_type.lto_priv.0",
                "stab_start_struct_type.lto_priv.0",
                "stab_typdef.lto_priv.0",
                "stab_int_constant.lto_priv.0",
                "stab_enum_type.lto_priv.0",
                "stab_class_baseclass.lto_priv.0",
                "stab_class_start_method.lto_priv.0",
                "stab_method_type.lto_priv.0",
                "stab_class_static_member.lto_priv.0",
                "bfd_get_archive_filename",
                "stab_function_parameter.lto_priv.0",
                "stab_function_type.lto_priv.0",
                "stab_void_type.lto_priv.0",
                "stab_complex_type.lto_priv.0",
                "stab_start_class_type.lto_priv.0",
                "stab_range_type.lto_priv.0",
                "stab_int_type.lto_priv.0",
                "stab_array_type.lto_priv.0",
                "stab_offset_type.lto_priv.0",
                "stab_start_function.lto_priv.0",
                "stab_class_method_var",
                "parse_stab_type",
                "stab_modify_type",
                "stab_empty_type.lto_priv.0",
                "stab_float_constant.lto_priv.0",
                "stab_end_class_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "FUN_001047e0"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "write_stab_symbol_0010e842",
                "param_1": "param1",
                "param_2": "symbolName",
                "param_3": "value",
                "param_4": "param4",
                "__s": "formattedSymbol",
                "auVar2": "result",
                "sVar1": "symbolNameLength"
            },
            "code": "\nundefined  [16] writeStabSymbol_0010e842(undefined8 param1,char *symbolName,undefined8 value,undefined8 param4)\n\n{\n  size_t symbolNameLength;\n  char *formattedSymbol;\n  undefined result [16];\n  \n  symbolNameLength = strlen(symbolName);\n  formattedSymbol = (char *)xmalloc(symbolNameLength + 0x14);\n  sprintf(formattedSymbol,\"%s:c=i%ld\",symbolName,value);\n  result._0_4_ = stab_write_symbol_lto_priv_0(param1,0x80,0,0,formattedSymbol);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedSymbol);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_stab_symbol_0010e842"
        },
        "FUN_00104060": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "set_times"
            ],
            "imported": false,
            "current_name": "FUN_00104060"
        },
        "FUN_00128370": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128370",
            "calling": [
                "fseek"
            ],
            "imported": false,
            "current_name": "FUN_00128370"
        },
        "FUN_00104180": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUN_00104180"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "make_constprop_0_00113cb9",
                "param_1": "input_value",
                "lVar1": "result",
                "debug_make_type_constprop_0": "create_constprop_0"
            },
            "code": "\nlong make_constprop_0_00113cb9(long input_value)\n\n{\n  long result;\n  \n  if (input_value != 0) {\n    result = create_constprop_0(0xe,0);\n    if (result == 0) {\n      result = 0;\n    }\n    else {\n      *(long *)(result + 0x10) = input_value;\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "make_constprop_0_00113cb9"
        },
        "FUN_00128130": {
            "renaming": {},
            "code": "\n\n\n\nint rmdir(char *__path)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* rmdir@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128130",
            "calling": [
                "rmdir"
            ],
            "imported": false,
            "current_name": "FUN_00128130"
        },
        "FUN_00128498": {
            "renaming": {},
            "code": "\n\n\n\nchar * strdup(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strdup@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128498",
            "calling": [
                "strdup"
            ],
            "imported": false,
            "current_name": "FUN_00128498"
        },
        "FUN_00128258": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128258",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_00128258"
        },
        "FUN_00128138": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128138",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_00128138"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "write_symbol_with_validation_0010eafe",
                "param_1": "symbolTable",
                "param_2": "symbolName",
                "param_3": "symbolType",
                "__s": "poppedSymbol",
                "sVar2": "nameLength",
                "sVar3": "symbolLength",
                "__s_00": "formattedSymbol",
                "uVar1": "result"
            },
            "code": "\nundefined4 writeSymbolWithValidation_0010eafe(long symbolTable,char *symbolName,char symbolType)\n\n{\n  undefined4 result;\n  char *poppedSymbol;\n  size_t nameLength;\n  size_t symbolLength;\n  char *formattedSymbol;\n  \n  if ((*(int *)(symbolTable + 0x1f8) == 0) && (*(long *)(symbolTable + 0x1e8) == -1)) {\n    poppedSymbol = (char *)stab_pop_type();\n    nameLength = strlen(symbolName);\n    symbolLength = strlen(poppedSymbol);\n    formattedSymbol = (char *)xmalloc(nameLength + 3 + symbolLength);\n    sprintf(formattedSymbol,\"%s:%c%s\",symbolName,(ulong)((-(uint)(symbolType == '\\0') & 0x20) + 0x46),poppedSymbol);\n    *(undefined8 *)(symbolTable + 0x1e8) = *(undefined8 *)(symbolTable + 0x10);\n    result = stab_write_symbol_lto_priv_0(symbolTable,0x24,0,0,formattedSymbol);\n    if ((char)result != '\\0') {\n      free(formattedSymbol);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "stab_write_symbol.lto_priv.0",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "debug_write_name.constprop.0"
            ],
            "imported": false,
            "current_name": "write_symbol_with_validation_0010eafe"
        },
        "FUN_001045b0": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010554f",
                "parse_coff_struct_type"
            ],
            "imported": false,
            "current_name": "FUN_001045b0"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_debug_type_00113df2",
                "param_1": "inputData"
            },
            "code": "\nvoid initializeDebugType_00113df2(undefined4 inputData)\n\n{\n  debug_make_type_constprop_0(4,inputData);\n  return;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab_type",
                "stab_find_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "initialize_debug_type_00113df2"
        },
        "FUN_001047f0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "print_version",
                "strip_usage",
                "copy_usage"
            ],
            "imported": false,
            "current_name": "FUN_001047f0"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "combine_strings_and_push_0010a377",
                "param_1": "inputValue",
                "cVar1": "flagChar",
                "__s": "firstString",
                "__s_00": "secondString",
                "sVar3": "firstStringLength",
                "sVar4": "secondStringLength",
                "__s_01": "combinedString",
                "uVar2": "returnValue"
            },
            "code": "\nundefined4 combineStringsAndPush_0010a377(long inputValue)\n\n{\n  char flagChar;\n  undefined4 returnValue;\n  char *firstString;\n  char *secondString;\n  size_t firstStringLength;\n  size_t secondStringLength;\n  char *combinedString;\n  undefined uVar5;\n  \n  uVar5 = 1;\n  flagChar = *(char *)(*(long *)(inputValue + 0x60) + 0x1c);\n  firstString = (char *)stab_pop_type();\n  if (flagChar == '\\0') {\n    uVar5 = *(undefined *)(*(long *)(inputValue + 0x60) + 0x1c);\n  }\n  secondString = (char *)stab_pop_type(inputValue);\n  firstStringLength = strlen(firstString);\n  secondStringLength = strlen(secondString);\n  combinedString = (char *)xmalloc(firstStringLength + 3 + secondStringLength);\n  sprintf(combinedString,\"@%s,%s\",secondString,firstString);\n  free(secondString);\n  free(firstString);\n  returnValue = stab_push_string(inputValue,combinedString,0,uVar5,0);\n  if ((char)returnValue != '\\0') {\n    free(combinedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "stab_push_string",
                "sprintf",
                "free",
                "stab_pop_type",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "debug_write_type.constprop.0"
            ],
            "imported": false,
            "current_name": "combine_strings_and_push_0010a377"
        },
        "FUN_001046d0": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUN_001046d0"
        },
        "FUN_00128160": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128160",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_00128160"
        },
        "FUN_00104070": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "parse_vma"
            ],
            "imported": false,
            "current_name": "FUN_00104070"
        },
        "FUN_00104190": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "setup_section"
            ],
            "imported": false,
            "current_name": "FUN_00104190"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "demangle_function_name_0010d882",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "outputParam1",
                "param_4": "outputParam2",
                "iVar1": "loopCounter",
                "pcVar2": "currentCharPtr",
                "cVar3": "currentChar",
                "lVar4": "allocatedMemory",
                "pcVar5": "currentCharPtr2",
                "uVar6": "local48",
                "bVar7": "isLooping",
                "local_50": "localVar1",
                "local_4c": "localVar2",
                "local_48": "localVar3",
                "local_44": "localVar4",
                "local_40": "localArray"
            },
            "code": "\nundefined8 demangleFunctionName_0010d882(long inputParam1,char **inputParam2,long *outputParam1,undefined *outputParam2)\n\n{\n  int loopCounter;\n  char *currentCharPtr;\n  char currentChar;\n  long allocatedMemory;\n  char *currentCharPtr2;\n  ulong local48;\n  bool isLooping;\n  uint localVar1;\n  undefined4 localVar2;\n  uint localVar3;\n  int localVar4;\n  undefined8 localArray [2];\n  \n  currentCharPtr = *inputParam2;\n  localVar2 = 10;\n  if (outputParam1 != (long *)0x0) {\n    allocatedMemory = xmalloc();\n    *outputParam1 = allocatedMemory;\n    *outputParam2 = 0;\n  }\n  localVar1 = 0;\n  while( true ) {\n    currentCharPtr2 = *inputParam2;\n    currentChar = *currentCharPtr2;\n    if ((currentChar == '_' || currentChar == '\\0') || (currentChar == 'e')) break;\n    if ((currentChar == 'N') || (currentChar == 'T')) {\n      *inputParam2 = currentCharPtr2 + 1;\n      if (currentChar == 'T') {\n        localVar4 = 1;\n      }\n      else {\n        currentChar = stab_demangle_get_count(inputParam2,&localVar4);\n        if (currentChar == '\\0') goto LAB_0010d958;\n      }\n      currentChar = stab_demangle_get_count(inputParam2,&localVar3);\n      if ((currentChar == '\\0') || (*(uint *)(inputParam1 + 0x28) <= localVar3)) {\nLAB_0010d958:\n        stab_bad_demangle(currentCharPtr);\n        return 0;\n      }\n      local48 = (ulong)localVar3;\n      while (loopCounter = localVar4 + -1, isLooping = localVar4 != 0, localVar4 = loopCounter, isLooping) {\n        localArray[0] = *(undefined8 *)(*(long *)(inputParam1 + 0x20) + local48 * 0x10);\n        currentChar = stab_demangle_arg(inputParam1,localArray,outputParam1,&localVar1,&localVar2);\n        if (currentChar == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      currentChar = stab_demangle_arg(inputParam1,inputParam2,outputParam1,&localVar1,&localVar2);\n      if (currentChar == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (outputParam1 == (long *)0x0) {\n    if (currentChar != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*outputParam1 + (ulong)localVar1 * 8) = 0;\n    if (*currentCharPtr2 != 'e') goto LAB_0010d9fa;\n    *outputParam2 = 1;\n  }\n  currentCharPtr2 = currentCharPtr2 + 1;\n  *inputParam2 = currentCharPtr2;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)currentCharPtr2 >> 8),1);\n}\n\n",
            "called": [
                "stab_demangle_arg",
                "stab_bad_demangle",
                "stab_demangle_get_count",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "demangle_function_name_0010d882"
        },
        "FUN_00128040": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128040",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_00128040"
        },
        "FUN_00128168": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128168",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_00128168"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "outputData",
                "param_2": "paramValue",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "memoryBlock",
                "pauVar2": "existingData",
                "lVar3": "loopCounter",
                "puVar4": "tempPointer",
                "bVar5": "condition"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**outputData) [16],undefined8 paramValue,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *memoryBlock;\n  undefined (*existingData) [16];\n  long loopCounter;\n  undefined4 *tempPointer;\n  byte condition;\n  \n  condition = 0;\n  memoryBlock = (undefined4 *)xmalloc(0x28);\n  tempPointer = memoryBlock;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *tempPointer = 0;\n    tempPointer = tempPointer + (ulong)condition * -2 + 1;\n  }\n  existingData = *outputData;\n  *(undefined8 *)(memoryBlock + 2) = paramValue;\n  memoryBlock[5] = param3;\n  memoryBlock[6] = param4;\n  if (existingData == (undefined (*) [16])0x0) {\n    existingData = (undefined (*) [16])xmalloc(0x10);\n    *existingData = ZEXT816(0);\n    *outputData = existingData;\n    *(undefined (**) [16])(*existingData + 8) = existingData;\n  }\n  **(undefined8 **)(*existingData + 8) = memoryBlock;\n  *(undefined4 **)(*existingData + 8) = memoryBlock;\n  return memoryBlock;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "debug_name_type",
                "debug_record_function",
                "debug_tag_type",
                "debug_record_variable",
                "debug_add_to_current_namespace.constprop.0"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_record_line_0010bf86",
                "param_1": "record_ptr",
                "param_2": "line_ptr",
                "param_3": "unit_ptr",
                "uVar1": "error_message",
                "puVar2": "empty_slot_ptr",
                "uVar3": "loop_counter",
                "puVar4": "new_record_ptr",
                "lVar5": "iterator",
                "puVar6": "ptr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 updateRecordLine_0010bf86(long record_ptr,undefined8 line_ptr,undefined8 unit_ptr)\n\n{\n  undefined8 error_message;\n  undefined8 *empty_slot_ptr;\n  ulong loop_counter;\n  undefined4 *new_record_ptr;\n  long iterator;\n  undefined4 *ptr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(record_ptr + 8) == 0) {\n    error_message = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n    error_message = 0;\n  }\n  else {\n    iterator = *(long *)(record_ptr + 0x28);\n    if ((iterator != 0) && (*(long *)(iterator + 8) == *(long *)(record_ptr + 0x10))) {\n      loop_counter = 0;\n      do {\n        if (*(long *)(iterator + 0x10 + loop_counter * 8) == -1) {\n          empty_slot_ptr = (undefined8 *)(loop_counter & 0xffffffff);\n          *(undefined8 *)(iterator + 0x10 + (long)empty_slot_ptr * 8) = line_ptr;\n          *(undefined8 *)(iterator + 0x60 + (long)empty_slot_ptr * 8) = unit_ptr;\n          goto LAB_0010c056;\n        }\n        loop_counter = loop_counter + 1;\n      } while (loop_counter != 10);\n    }\n    new_record_ptr = (undefined4 *)xmalloc(0xb0);\n    ptr = new_record_ptr;\n    for (iterator = 0x2c; iterator != 0; iterator = iterator + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)flag * -2 + 1;\n    }\n    error_message = *(undefined8 *)(record_ptr + 0x10);\n    *(undefined8 *)(new_record_ptr + 4) = line_ptr;\n    *(undefined8 *)(new_record_ptr + 2) = error_message;\n    *(undefined8 *)(new_record_ptr + 0x18) = unit_ptr;\n    ptr = new_record_ptr + 6;\n    for (iterator = 0x48; iterator != 0; iterator = iterator + -1) {\n      *(undefined *)ptr = 0xff;\n      ptr = (undefined4 *)((long)ptr + (ulong)flag * -2 + 1);\n    }\n    empty_slot_ptr = *(undefined8 **)(record_ptr + 0x28);\n    if (empty_slot_ptr == (undefined8 *)0x0) {\n      empty_slot_ptr = *(undefined8 **)(record_ptr + 8);\n      empty_slot_ptr[2] = new_record_ptr;\n    }\n    else {\n      *empty_slot_ptr = new_record_ptr;\n    }\n    *(undefined4 **)(record_ptr + 0x28) = new_record_ptr;\nLAB_0010c056:\n    error_message = CONCAT71((int7)((ulong)empty_slot_ptr >> 8),1);\n  }\n  return error_message;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "parse_stab",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_record_line_0010bf86"
        },
        "FUN_00128048": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128048",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_00128048"
        },
        "FUN_00128288": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128288",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_00128288"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "check_pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "target",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint checkPatternMatch_0011a170(char **pattern,char **target)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*target,0);\n    if (matchResult == 0) {\n      *(undefined *)(target + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*target,0);\n    if (matchResult == 0) {\n      *(undefined *)(target + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "is_specified_symbol"
            ],
            "imported": false,
            "current_name": "check_pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionPointer",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "puVar1": "current",
                "uVar2": "errorMessage",
                "puVar3": "newMemoryBlock",
                "puVar7": "temp_ptr",
                "bVar8": "flag",
                "lVar5": "count",
                "puVar6": "previous",
                "puVar4": "temp"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionPointer,long param1,long param2,undefined4 param3,undefined8 param4)\n\n{\n  undefined8 *current;\n  undefined8 errorMessage;\n  undefined4 *newMemoryBlock;\n  undefined8 *temp;\n  long count;\n  undefined8 *previous;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param1 == 0) {\n    return 0;\n  }\n  if (param2 != 0) {\n    if ((*(long *)(functionPointer + 8) != 0) && (*(long *)(functionPointer + 0x18) != 0)) {\n      newMemoryBlock = (undefined4 *)xmalloc(0x28);\n      temp_ptr = newMemoryBlock;\n      for (count = 10; count != 0; count = count + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      count = *(long *)(functionPointer + 0x18);\n      *(long *)(newMemoryBlock + 2) = param1;\n      *(long *)(newMemoryBlock + 4) = param2;\n      newMemoryBlock[6] = param3;\n      current = *(undefined8 **)(count + 8);\n      *(undefined8 *)(newMemoryBlock + 8) = param4;\n      previous = (undefined8 *)(count + 8);\n      while (temp = current, temp != (undefined8 *)0x0) {\n        previous = temp;\n        current = (undefined8 *)*temp;\n      }\n      *previous = newMemoryBlock;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "parse_stab",
                "parse_coff_symbol.constprop.0.isra.0"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_files_00104ea2",
                "unaff_retaddr": "return_address",
                "param_7": "outputFile",
                "param_8": "lSize",
                "param_9": "tempDir",
                "param_10": "archiveFile",
                "param_11": "mode",
                "param_18": "permissions",
                "param_19": "fileSize",
                "unaff_RBP": "statStruct",
                "unaff_R12": "tempFilePath",
                "unaff_R13": "tempDirStruct",
                "unaff_R15": "archiveFilePaths",
                "unaff_EBX": "preserve_dates",
                "preserve_dates": "shouldPreserveDates",
                "status": "errorCode",
                "lVar12": "remainingFileSize",
                "ppcVar6": "outputBFD",
                "cVar1": "result",
                "iVar2": "archType",
                "pcVar10": "archiveFileName",
                "pcVar7": "currentChar",
                "uVar11": "errorMessage",
                "lVar5": "bytesRead",
                "pvVar4": "buffer",
                "pcVar15": "endPath",
                "pcVar13": "closeFunction",
                "lVar14": "bytesToWrite",
                "ppcVar3": "nextArchiveFile",
                "psVar16": "currentStatStruct",
                "bVar17": "byteVariable"
            },
            "code": "\nvoid copyArchiveFiles_00104ea2(void)\n\n{\n  char result;\n  int archType;\n  char **nextArchiveFile;\n  void *buffer;\n  long bytesRead;\n  char **outputBFD;\n  char *currentChar;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *archiveFileName;\n  undefined8 errorMessage;\n  long remainingFileSize;\n  code *closeFunction;\n  long bytesToWrite;\n  int preserve_dates;\n  stat *statStruct;\n  char *endPath;\n  stat *currentStatStruct;\n  char *tempFilePath;\n  undefined8 *tempDirStruct;\n  char **archiveFilePaths;\n  byte byteVariable;\n  undefined8 return_address;\n  undefined8 *outputFile;\n  long *lSize;\n  char *tempDir;\n  undefined8 *archiveFile;\n  undefined8 mode;\n  undefined8 in_stack_00000030;\n  uint permissions;\n  long fileSize;\n  \n  byteVariable = 0;\ncode_r0x00104ea2:\n  outputBFD = (char **)bfd_openw(tempFilePath,mode);\n  if (outputBFD == (char **)0x0) {\nLAB_00104e80:\n    bfd_nonfatal_message(tempFilePath,0,0,0);\nLAB_00104e93:\n    errorCode = 1;\n  }\n  else {\nLAB_00114a5f:\n    result = copy_object(archiveFilePaths,outputBFD,return_address);\n    if (result == '\\0') {\n      archType = bfd_get_arch(archiveFilePaths);\n      if (archType == 0) goto LAB_00104d75;\n      result = bfd_close_all_done(outputBFD);\n      if (result != '\\0') goto LAB_00104ec9;\n      bfd_nonfatal_message(tempFilePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    result = bfd_close(outputBFD);\n    outputBFD = archiveFilePaths;\n    if (result == '\\0') {\n      bfd_nonfatal_message(tempFilePath,0,0,0);\n      errorCode = 1;\n    }\nLAB_00114a86:\n    if ((shouldPreserveDates != '\\0') && (preserve_dates == 0)) {\n      set_times(tempFilePath,statStruct);\n    }\n    remainingFileSize = bfd_openr(tempFilePath,mode);\n    tempDirStruct[2] = remainingFileSize;\n    *lSize = remainingFileSize;\n    lSize = (long *)(remainingFileSize + 0xf0);\n    archiveFilePaths = (char **)bfd_openr_next_archived_file(archiveFile,outputBFD);\n    bfd_close(outputBFD);\n    while ((errorCode == 0 && (archiveFilePaths != (char **)0x0))) {\n      archiveFileName = *archiveFilePaths;\n      currentChar = archiveFileName;\n      if (*archiveFileName == '/') {\nLAB_0010527d:\n        errorMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        non_fatal(errorMessage,archiveFileName);\n        goto LAB_00104e93;\n      }\n      while (*currentChar != '\\0') {\n        endPath = currentChar;\n        if ((*currentChar == '.') && (endPath = currentChar + 1, currentChar[1] == '.')) {\n          endPath = currentChar + 2;\n          if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*endPath != '\\0' && (*endPath != '/')); endPath = endPath + 1) {\n        }\n        currentChar = endPath;\n        if (*endPath == '/') {\n          copy_and_check_archive_file_001052a2();\n          return;\n        }\n      }\n      statStruct = (stat *)&stack0x00000050;\n      tempFilePath = (char *)concat(tempDir,&DAT_0011b47d);\n      archType = stat(tempFilePath,statStruct);\n      puVar8 = tempDirStruct;\n      if (-1 < archType) {\n        remainingFileSize = make_tempdir(tempFilePath);\n        free(tempFilePath);\n        if (remainingFileSize == 0) {\n          piVar9 = __errno_location();\n          archiveFileName = strerror(*piVar9);\n          errorMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          non_fatal(errorMessage,archiveFileName);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        archiveFileName = *archiveFilePaths;\n        *puVar8 = tempDirStruct;\n        puVar8[2] = 0;\n        puVar8[1] = remainingFileSize;\n        tempFilePath = (char *)concat(remainingFileSize,&DAT_0011b47d,archiveFileName);\n      }\n      preserve_dates = 0;\n      if (shouldPreserveDates != '\\0') {\n        currentStatStruct = statStruct;\n        for (remainingFileSize = 0x24; remainingFileSize != 0; remainingFileSize = remainingFileSize + -1) {\n          *(undefined4 *)&currentStatStruct->st_dev = 0;\n          currentStatStruct = (stat *)((long)currentStatStruct + (ulong)byteVariable * -8 + 4);\n        }\n        outputBFD = (char **)archiveFilePaths[0x1d];\n        if ((char **)archiveFilePaths[0x1d] == (char **)0x0) {\n          outputBFD = archiveFilePaths;\n        }\n        preserve_dates = (**(code **)(outputBFD[1] + 0x1e8))(archiveFilePaths,statStruct);\n        if (preserve_dates != 0) {\n          archiveFileName = *archiveFilePaths;\n          errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n          non_fatal(errorMessage,archiveFileName);\n        }\n      }\n      tempDirStruct = (undefined8 *)xmalloc(0x18);\n      tempDirStruct[1] = tempFilePath;\n      *tempDirStruct = puVar8;\n      tempDirStruct[2] = 0;\n      result = bfd_check_format(archiveFilePaths,1);\n      if (result != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        outputBFD = (char **)bfd_openw(tempFilePath,*(undefined8 *)archiveFilePaths[1]);\n        if (outputBFD == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      errorMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      bfd_nonfatal_message(0,archiveFilePaths,0,errorMessage);\n      outputBFD = (char **)bfd_openw(tempFilePath,mode);\n      if (outputBFD == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      nextArchiveFile = (char **)archiveFilePaths[0x1d];\n      if ((char **)archiveFilePaths[0x1d] == (char **)0x0) {\n        nextArchiveFile = archiveFilePaths;\n      }\n      archType = (**(code **)(nextArchiveFile[1] + 0x1e8))(archiveFilePaths);\n      remainingFileSize = fileSize;\n      if (archType == 0) {\n        if (fileSize < 0) {\n          bfd_get_archive_filename(archiveFilePaths);\n          errorMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          non_fatal(errorMessage);\n        }\n        else {\n          archType = bfd_seek(archiveFilePaths,0,0);\n          if (archType == 0) {\n            if (verbose != '\\0') {\n              archiveFileName = *outputBFD;\n              errorMessage = bfd_get_archive_filename(archiveFilePaths);\n              currentChar = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(currentChar,errorMessage,archiveFileName);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (remainingFileSize == 0) {\n                chmod(*outputBFD,permissions | 0x100);\n                free(buffer);\n                result = bfd_close_all_done(outputBFD);\n                outputBFD = archiveFilePaths;\n                if (result == '\\0') {\n                  bfd_nonfatal_message(tempFilePath,0,0,0);\n                  errorCode = 1;\n                }\n                goto LAB_00114a86;\n              }\n              bytesToWrite = 0x2000;\n              if (remainingFileSize < 0x2001) {\n                bytesToWrite = remainingFileSize;\n              }\n              bytesRead = bfd_bread(buffer,bytesToWrite,archiveFilePaths);\n              nextArchiveFile = archiveFilePaths;\n              if ((bytesToWrite != bytesRead) ||\n                 (bytesRead = bfd_bwrite(buffer,bytesToWrite,outputBFD), nextArchiveFile = outputBFD, bytesToWrite != bytesRead))\n              break;\n              remainingFileSize = remainingFileSize - bytesToWrite;\n            }\n            bfd_nonfatal_message(0,nextArchiveFile,0,0);\n            free(buffer);\n          }\n          else {\n            errorMessage = bfd_get_archive_filename(archiveFilePaths);\n            bfd_nonfatal(errorMessage);\n          }\n        }\n      }\n      else {\n        bfd_nonfatal_message(0,archiveFilePaths,0,0);\n      }\n      result = bfd_close_all_done(outputBFD);\n      if (result == '\\0') {\n        bfd_nonfatal_message(tempFilePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(tempFilePath);\n      errorCode = 1;\n    }\n    *lSize = 0;\n    buffer = (void *)xstrdup(*outputFile);\n    if (errorCode == 0) {\n      closeFunction = bfd_close;\n    }\n    else {\n      closeFunction = bfd_close_all_done;\n    }\n    result = (*closeFunction)(outputFile);\n    if (result == '\\0') {\n      errorCode = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*archiveFile);\n    result = bfd_close(archiveFile);\n    if (result == '\\0') {\n      errorCode = 1;\n      bfd_nonfatal_message(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (tempDirStruct != (undefined8 *)0x0) {\n    if (tempDirStruct[2] == 0) {\n      rmdir((char *)tempDirStruct[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempDirStruct[1]);\n    }\n    free((void *)tempDirStruct[1]);\n    puVar8 = (undefined8 *)*tempDirStruct;\n    free(tempDirStruct);\n    tempDirStruct = puVar8;\n  }\n  rmdir(tempDir);\n  free(tempDir);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "stat",
                "strerror",
                "bfd_openr",
                "FUN_001052a2",
                "bfd_get_arch",
                "bfd_close_all_done",
                "concat",
                "dcgettext",
                "printf",
                "bfd_bread",
                "FUN_00114b84",
                "bfd_nonfatal_message",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_get_archive_filename",
                "non_fatal",
                "chmod",
                "free",
                "bfd_seek",
                "copy_object",
                "xstrdup",
                "bfd_bwrite",
                "bfd_check_format",
                "bfd_openw",
                "bfd_openr_next_archived_file",
                "bfd_close",
                "make_tempdir",
                "xmalloc",
                "bfd_nonfatal",
                "set_times",
                "bfd_close",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00104ea2"
        },
        "FUN_001044a0": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "main",
                "add_redefine_and_check"
            ],
            "imported": false,
            "current_name": "FUN_001044a0"
        },
        "FUN_001046e0": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001046e0"
        },
        "FUN_001045c0": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "main",
                "parse_stab_type"
            ],
            "imported": false,
            "current_name": "FUN_001045c0"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "create_debug_type_00113ce0",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "lVar1": "debugType",
                "plVar2": "debugTypePointer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateDebugType_00113ce0(long inputParam1,long inputParam2,undefined inputParam3,undefined8 inputParam4,undefined8 inputParam5)\n\n{\n  long debugType;\n  long *debugTypePointer;\n  undefined result [16];\n  \n  if (inputParam1 != 0) {\n    debugType = debug_make_type_constprop_0(0xd,0);\n    if (debugType != 0) {\n      debugTypePointer = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)debugTypePointer + 0x11) = 0;\n      *debugTypePointer = inputParam1;\n      *(undefined4 *)((long)debugTypePointer + 0x14) = 0;\n      debugTypePointer[1] = inputParam2;\n      *(undefined *)(debugTypePointer + 2) = inputParam3;\n      *(long **)(debugType + 0x10) = debugTypePointer;\n      goto LAB_00113d2f;\n    }\n  }\n  debugType = 0;\nLAB_00113d2f:\n  result._8_8_ = inputParam5;\n  result._0_8_ = debugType;\n  return result;\n}\n\n",
            "called": [
                "debug_make_type.constprop.0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "stab_demangle_v3_arg",
                "parse_coff_type.lto_priv.0",
                "parse_stab",
                "parse_stab_type",
                "stab_demangle_type.lto_priv.0"
            ],
            "imported": false,
            "current_name": "create_debug_type_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startPos",
                "unaff_R14": "endPos",
                "iVar1": "readError",
                "uVar2": "errorMessage",
                "uVar3": "translatedMessage",
                "sVar4": "bytesRead"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int readError;\n  undefined8 errorMessage;\n  undefined8 translatedMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long startPos;\n  long endPos;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + startPos),1,endPos - startPos,\n                  file);\n    readError = ferror(file);\n    if (readError != 0) {\n      translatedMessage = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      fatal(errorMessage,translatedMessage);\n    }\n    startPos = startPos + bytesRead;\n    readError = feof(file);\n    if (readError != 0) break;\n    if (startPos == endPos) {\n      endPos = startPos * 2;\n      translatedMessage = xrealloc(*(undefined8 *)(buffer + 0x20),endPos);\n      *(undefined8 *)(buffer + 0x20) = translatedMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = startPos;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "fclose",
                "dcgettext",
                "ferror",
                "xrealloc",
                "feof",
                "fread",
                "FUN_00114dc7",
                "fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00116b80": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "FUN_00116b80"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "reconstruct_binary_00119f70",
                "param_1": "headerData",
                "param_2": "binaryInfo",
                "uVar1": "errorStatus",
                "cVar2": "charFlag",
                "iVar3": "counter",
                "uVar4": "endianString1",
                "uVar5": "endianString2",
                "__format": "formatString",
                "lVar6": "size",
                "uVar7": "headerValue",
                "lVar8": "allocatedMemory"
            },
            "code": "\nundefined4 reconstructBinary_00119f70(undefined8 *headerData,undefined8 *binaryInfo)\n\n{\n  undefined4 errorStatus;\n  char charFlag;\n  int counter;\n  undefined8 endianString1;\n  undefined8 endianString2;\n  char *formatString;\n  long size;\n  undefined8 headerValue;\n  long allocatedMemory;\n  \n  counter = *(int *)((long)binaryInfo + 0xc) + 1;\n  *(int *)((long)binaryInfo + 0xc) = counter;\n  if ((ulong)binaryInfo[2] < (ulong)((long)counter * 0x60)) {\n    size = 0x3000;\n    if (0x3f < counter) {\n      size = (long)counter * 0xc0;\n    }\n    allocatedMemory = xrealloc(binaryInfo[3]);\n    binaryInfo[3] = allocatedMemory;\n    memset((void *)(allocatedMemory + binaryInfo[2]),0,size - binaryInfo[2]);\n    binaryInfo[2] = size;\n  }\n  errorStatus = *(undefined4 *)((long)headerData + 0xc);\n  *(undefined8 *)((long)*(int *)((long)binaryInfo + 0xc) * 0x60 + binaryInfo[3] + -0x60) = *headerData;\n  endianString1 = endian_string(errorStatus);\n  endianString2 = endian_string(*(undefined4 *)(headerData + 2));\n  headerValue = *headerData;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,endianString2,endianString1);\n  size = bfd_openw(*binaryInfo,*headerData);\n  if (size == 0) {\n    bfd_nonfatal(*binaryInfo);\n    *(undefined4 *)(binaryInfo + 1) = 1;\n  }\n  else {\n    counter = 2;\n    charFlag = bfd_set_format(size,1);\n    if (charFlag == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        bfd_nonfatal(*headerData);\n        *(undefined4 *)(binaryInfo + 1) = 1;\n      }\n    }\n    else {\n      do {\n        charFlag = (**(code **)(*(long *)(size + 8) + 0x2a0))(size,counter,0);\n        if (charFlag != '\\0') {\n          headerValue = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)binaryInfo + 0xc) * 0x60 + binaryInfo[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(size);\n  }\n  return *(undefined4 *)(binaryInfo + 1);\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "printf",
                "bfd_openw",
                "bfd_printable_arch_mach",
                "endian_string",
                "do_display_target.cold",
                "bfd_set_format",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "display_info.isra.0"
            ],
            "imported": false,
            "current_name": "reconstruct_binary_00119f70"
        },
        "FUN_00128150": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128150",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_00128150"
        },
        "FUN_00128030": {
            "renaming": {},
            "code": "\n\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcasecmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128030",
            "calling": [
                "strcasecmp"
            ],
            "imported": false,
            "current_name": "FUN_00128030"
        },
        "FUN_00104080": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00104080"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "source_fd",
                "param_2": "destination_path",
                "param_3": "file_stat_ptr",
                "iVar1": "old_errno",
                "__fd": "dest_fd",
                "iVar2": "read_result",
                "_Var3": "seek_result",
                "uVar4": "total_bytes_copied",
                "sVar5": "write_result",
                "piVar6": "errno_ptr",
                "local_2038": "buffer"
            },
            "code": "\nulong copy_file_00115a90(int source_fd,char *destination_path,long file_stat_ptr)\n\n{\n  int old_errno;\n  int dest_fd;\n  int read_result;\n  __off_t seek_result;\n  ulong total_bytes_copied;\n  size_t write_result;\n  int *errno_ptr;\n  undefined buffer [8200];\n  \n  if ((-1 < source_fd) && (seek_result = lseek(source_fd,0,0), seek_result == 0)) {\n    dest_fd = open(destination_path,0x201);\n    if (dest_fd < 0) {\n      total_bytes_copied = simple_copy_cold();\n      return total_bytes_copied;\n    }\n    do {\n      total_bytes_copied = read(source_fd,buffer,0x2000);\n      read_result = (int)total_bytes_copied;\n      if (read_result < 1) {\n        errno_ptr = __errno_location();\n        old_errno = *errno_ptr;\n        fchmod(dest_fd,*(__mode_t *)(file_stat_ptr + 0x18));\n        close(source_fd);\n        close(dest_fd);\n        if (read_result != 0) {\n          *errno_ptr = old_errno;\n          return 0xffffffff;\n        }\n        return total_bytes_copied & 0xffffffff;\n      }\n      write_result = write(dest_fd,buffer,(long)read_result);\n    } while (write_result == (long)read_result);\n    errno_ptr = __errno_location();\n    read_result = *errno_ptr;\n    close(source_fd);\n    close(dest_fd);\n    *errno_ptr = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "lseek",
                "fchmod",
                "write",
                "simple_copy.cold",
                "open",
                "read",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "FUN_00128390": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128390",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_00128390"
        },
        "FUN_00128158": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00128158",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_00128158"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "unaff_RBP": "filePath",
                "unaff_R12B": "shouldSetTimes",
                "unaff_R13": "fileAttributes",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorPointer",
                "uVar2": "errorMessage",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errorPointer;\n  undefined8 errorMessage;\n  char *filePath;\n  char shouldSetTimes;\n  ulong fileAttributes;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  non_fatal(errorMessage);\n  unlink(filePath);\n  if (shouldSetTimes != '\\0') {\n    set_times();\n  }\n  result._0_8_ = fileAttributes & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strerror",
                "dcgettext",
                "non_fatal",
                "set_times",
                "__errno_location",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "smart_rename"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        }
    },
    "used_tokens": 247224,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00116aa0",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00104000",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00116b40",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ],
        [
            "FUN_00104cc1",
            "FUN_00108179",
            "FUN_0010829e",
            "FUN_00114690",
            "FUN_00114460",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00116110",
            "FUN_00104ea2"
        ],
        [
            "FUN_00108072",
            "FUN_00115530",
            "FUN_00115b70"
        ],
        [
            "FUN_0010922b",
            "FUN_00112c1f",
            "FUN_00112b6e",
            "FUN_00113a4d",
            "FUN_0010b0fa",
            "FUN_0010dac0",
            "FUN_0010c95e"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_0010847a",
            "FUN_001163d0"
        ]
    ],
    "locked_functions": []
}