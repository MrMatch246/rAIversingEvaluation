{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_data_00113dfe",
                "param_1": "input",
                "param_2": "valueToUpdate",
                "lVar1": "initializedAddress"
            },
            "code": "\nvoid updateData_00113dfe(undefined4 input,undefined valueToUpdate)\n\n{\n  long initializedAddress;\n  \n  initializedAddress = initialize_function_00112904(3,input);\n  if (initializedAddress != 0) {\n    *(undefined *)(initializedAddress + 0x10) = valueToUpdate;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "update_data_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_to_log_0010ab4d",
                "param_1": "objectAddress",
                "param_2": "text",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "objBaseAddress",
                "lVar2": "objPointer",
                "auVar3": "returnVal",
                "sVar4": "textLength",
                "pcVar5": "existingText",
                "sVar6": "existingTextLength",
                "auVar7": "newReturnVal"
            },
            "code": "\nundefined  [16] appendToLog_0010ab4d(long objectAddress,char *text,undefined8 param3,undefined8 param4)\n\n{\n  ulong objBaseAddress;\n  long objPointer;\n  undefined returnVal [16];\n  size_t textLength;\n  char *existingText;\n  size_t existingTextLength;\n  undefined newReturnVal [16];\n  \n  objBaseAddress = *(ulong *)(objectAddress + 0x60);\n  if ((objBaseAddress != 0) && (*(long *)(objBaseAddress + 0x20) != 0)) {\n    existingText = *(char **)(objBaseAddress + 0x30);\n    textLength = strlen(text);\n    if (existingText == (char *)0x0) {\n      existingText = (char *)xmalloc(textLength + 3);\n      *existingText = '\\0';\n    }\n    else {\n      existingTextLength = strlen(existingText);\n      existingText = (char *)xrealloc(existingText,textLength + 4 + existingTextLength);\n    }\n    textLength = strlen(existingText);\n    sprintf(existingText + textLength,\"%s::\",text);\n    objPointer = *(long *)(objectAddress + 0x60);\n    *(char **)(objPointer + 0x30) = existingText;\n    newReturnVal._1_7_ = (undefined7)((ulong)objPointer >> 8);\n    newReturnVal[0] = 1;\n    newReturnVal._8_8_ = param4;\n    return newReturnVal;\n  }\n  returnVal._8_8_ = 0;\n  returnVal._0_8_ = objBaseAddress;\n  return returnVal << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_to_log_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "initialize_and_allocate_memory_0010c218",
                "param_1": "file_ptr",
                "param_2": "size",
                "param_3": "type",
                "uVar1": "error_message",
                "lVar2": "function_ptr",
                "pauVar3": "pointer_to_array",
                "lVar4": "memory_block_ptr"
            },
            "code": "\n\n\nlong initialize_and_allocate_memory_0010c218(long file_ptr,long size,long type)\n\n{\n  undefined8 error_message;\n  long function_ptr;\n  undefined (*pointer_to_array) [16];\n  long memory_block_ptr;\n  \n  if ((size != 0) && (type != 0)) {\n    if ((*(long *)(file_ptr + 8) == 0) || (*(long *)(file_ptr + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      function_ptr = initialize_function_00112904(0x16,0);\n      if (function_ptr != 0) {\n        pointer_to_array = (undefined (*) [16])xmalloc(0x10);\n        memory_block_ptr = *(long *)(file_ptr + 0x10);\n        *pointer_to_array = ZEXT816(0);\n        *(long *)(*pointer_to_array + 8) = type;\n        *(undefined (**) [16])(function_ptr + 0x10) = pointer_to_array;\n        memory_block_ptr = initialize_memory_00112925(memory_block_ptr + 0x10,size,0,3);\n        if (memory_block_ptr != 0) {\n          *(long *)(memory_block_ptr + 0x20) = function_ptr;\n          *(long *)*pointer_to_array = memory_block_ptr;\n          return function_ptr;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_00113fb0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    print_error_and_exit_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    print_error_and_exit_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a10 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a28 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a08 = create_and_initialize_hash_table_00113f20();\n  DAT_00127a00 = create_and_initialize_hash_table_00113f20();\n  DAT_001279f8 = create_and_initialize_hash_table_00113f20();\n  DAT_001279f0 = create_and_initialize_hash_table_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,calculate_hash_00108800,compare_strings_00108898);\n  DAT_001278e8 = create_and_initialize_hash_table_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = process_function_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = cleanup_hash_table_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        print_usage_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        process_data_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        process_data_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        process_data_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          print_version_info_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        print_usage_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    print_formatted_arch_machine_info_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    print_version_info_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = string_comparison_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = parse_driver_name_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = string_comparison_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = parse_driver_name_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)allocate_file_path_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  extract_and_copy_archive_files_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = copy_and_set_file_time_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          print_error_message_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = check_file_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)allocate_file_path_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        print_error_info_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    extract_and_copy_archive_files_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = copy_and_set_file_time_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        check_symbol_redefinitions_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    check_symbol_redefinitions_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = parse_section_flags_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    print_usage_message_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          print_error_and_exit_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    print_usage_message_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    process_data_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    process_data_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = parse_url_parameters_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    read_and_store_file_contents_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = duplicate_string_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = duplicate_string_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            print_error_message_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            print_error_and_exit_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = duplicate_string_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = validate_and_print_error_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,uVar12);\n    lVar17 = validate_and_print_error_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = validate_and_print_error_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = parse_url_parameters_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = validate_and_print_error_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)validate_and_print_error_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      print_error_message_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    read_and_process_file_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = validate_and_print_error_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    read_and_process_file_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    process_data_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    read_and_process_file_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    read_and_process_file_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = validate_and_print_error_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    check_symbol_redefinitions_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    process_data_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      print_error_message_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = validate_and_print_error_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)process_data_00114190(pcVar32,1,0x80);\n    uVar12 = parse_section_flags_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = process_data_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = validate_and_print_error_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = validate_and_print_error_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          print_error_message_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    print_error_message_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    read_and_process_file_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    read_and_process_file_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        print_error_message_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      print_error_and_exit_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = parse_url_parameters_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    read_and_store_file_contents_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = validate_and_print_error_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    read_and_process_file_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  print_error_and_exit_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "FUN_00114c20",
                "FUN_00119ed0",
                "FUN_00119970",
                "ftell",
                "FUN_00114690",
                "getc",
                "dcgettext",
                "FUN_001054af",
                "malloc",
                "FUN_00113f50",
                "htab_create_alloc",
                "FUN_00114d60",
                "filename_cmp",
                "FUN_00108d9a",
                "strerror",
                "FUN_00108898",
                "htab_find_slot",
                "FUN_00113fb0",
                "bfd_set_default_target",
                "xrealloc",
                "fread",
                "strchr",
                "FUN_00108800",
                "FUN_00119940",
                "memcpy",
                "free",
                "strcasecmp",
                "FUN_001199d0",
                "FUN_0011a480",
                "htab_elements",
                "xexit",
                "bfd_errmsg",
                "xmalloc",
                "bfd_get_error",
                "FUN_00114460",
                "FUN_00113f20",
                "fclose",
                "FUN_00113fe0",
                "textdomain",
                "bindtextdomain",
                "FUN_00115970",
                "fseek",
                "strlen",
                "strtoul",
                "FUN_00108c86",
                "strcpy",
                "strcmp",
                "bfd_set_error_program_name",
                "FUN_00114cf0",
                "close",
                "unlink_if_ordinary",
                "fprintf",
                "FUN_00114c80",
                "setlocale",
                "strncasecmp",
                "FUN_001126c0",
                "dup",
                "free",
                "memmove",
                "strncpy",
                "FUN_00114190",
                "xstrdup",
                "xmalloc_set_program_name",
                "FUN_0011a390",
                "getopt_long",
                "mkstemp",
                "FUN_00108916",
                "bfd_scan_arch",
                "fopen",
                "bfd_init",
                "FUN_00108a2a",
                "FUN_00119dd0",
                "xcalloc",
                "__errno_location",
                "strtol",
                "stat",
                "ferror"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "start_block_debugging_0010be88",
                "param_1": "blockData",
                "param_2": "debugValue",
                "param_3": "unused1",
                "param_4": "unused2",
                "puVar1": "lastBlock",
                "uVar2": "successStatus",
                "puVar3": "newBlock",
                "puVar4": "nextBlock",
                "lVar5": "currentBlockData",
                "puVar6": "currentBlock",
                "puVar7": "tempBlock",
                "bVar8": "flag",
                "auVar9": "returnValue"
            },
            "code": "\n\n\nundefined  [16] startBlockDebugging_0010be88(long blockData,undefined8 debugValue,undefined8 unused1,undefined8 unused2)\n\n{\n  undefined8 *lastBlock;\n  undefined8 successStatus;\n  undefined4 *newBlock;\n  undefined8 *nextBlock;\n  long currentBlockData;\n  undefined8 *currentBlock;\n  undefined4 *tempBlock;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  if ((*(long *)(blockData + 8) == 0) || (*(long *)(blockData + 0x20) == 0)) {\n    successStatus = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",successStatus);\n    successStatus = 0;\n  }\n  else {\n    newBlock = (undefined4 *)xmalloc(0x30);\n    tempBlock = newBlock;\n    for (currentBlockData = 0xc; currentBlockData != 0; currentBlockData = currentBlockData + -1) {\n      *tempBlock = 0;\n      tempBlock = tempBlock + (ulong)flag * -2 + 1;\n    }\n    currentBlockData = *(long *)(blockData + 0x20);\n    *(undefined8 *)(newBlock + 6) = debugValue;\n    *(undefined8 *)(newBlock + 8) = 0xffffffffffffffff;\n    *(long *)(newBlock + 2) = currentBlockData;\n    lastBlock = *(undefined8 **)(currentBlockData + 0x10);\n    currentBlock = (undefined8 *)(currentBlockData + 0x10);\n    while (nextBlock = lastBlock, nextBlock != (undefined8 *)0x0) {\n      currentBlock = nextBlock;\n      lastBlock = (undefined8 *)*nextBlock;\n    }\n    *currentBlock = newBlock;\n    successStatus = 1;\n    *(undefined4 **)(blockData + 0x20) = newBlock;\n  }\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = successStatus;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "start_block_debugging_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_0011a110",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00115dc0",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "configParams",
                "param_2": "fieldName",
                "param_3": "paramValue",
                "param_4": "fieldSize",
                "param_5": "fieldType",
                "cVar1": "hasWarning",
                "iVar2": "structSize",
                "lVar3": "configOffset",
                "__s": "extractedEntry",
                "sVar4": "paramSize",
                "sVar5": "fieldNameSize",
                "sVar6": "extractedEntrySize",
                "__s_00": "generatedMessage",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "fieldFlag"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *configParams,char *fieldName,undefined8 paramValue,ulong fieldSize,int fieldType)\n\n{\n  char hasWarning;\n  int structSize;\n  long configOffset;\n  char *extractedEntry;\n  size_t paramSize;\n  size_t fieldNameSize;\n  size_t extractedEntrySize;\n  char *generatedMessage;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *fieldFlag;\n  \n  hasWarning = *(char *)(configParams[0xc] + 0x1c);\n  structSize = *(int *)(configParams[0xc] + 0x18);\n  extractedEntry = (char *)extract_and_free_next_entry_00109b2f();\n  if (*(char **)(configParams[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    paramSize = strlen(*(char **)(configParams[0xc] + 0x20));\n    fieldNameSize = strlen(fieldName);\n    extractedEntrySize = strlen(extractedEntry);\n    generatedMessage = (char *)xmalloc(paramSize + 0x32 + fieldNameSize + extractedEntrySize);\n    if (fieldType == 1) {\n      fieldFlag = \"/1\";\n    }\n    else {\n      fieldFlag = \"/0\";\n      if ((fieldType != 2) && (fieldFlag = \"\", fieldType != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((fieldSize == 0) && (fieldSize = (ulong)(uint)(structSize * 8), fieldSize == 0)) {\n      returnValue = *(undefined8 *)*configParams;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      print_error_message_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(generatedMessage,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(configParams[0xc] + 0x20),fieldName,fieldFlag,extractedEntry,\n            paramValue,fieldSize);\n    free(*(void **)(configParams[0xc] + 0x20));\n    configOffset = configParams[0xc];\n    *(char **)(configOffset + 0x20) = generatedMessage;\n    if (hasWarning != '\\0') {\n      *(undefined *)(configOffset + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)configOffset >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "abort",
                "xmalloc",
                "strlen",
                "dcgettext",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "process_entry_0010aa53",
                "param_1": "entryAddress",
                "param_2": "data",
                "param_3": "flagChar",
                "param_4": "operationType",
                "cVar1": "ptrValue",
                "__s": "entryString",
                "sVar5": "stringLength",
                "pcVar6": "formattedString",
                "lVar2": "ptrToStruct",
                "uVar8": "returnValue",
                "uVar9": "loopCounter",
                "uVar10": "maxIndex",
                "cVar3": "typeChar",
                "uVar4": "loopVariable",
                "lVar7": "reallocAddress"
            },
            "code": "\nundefined8 processEntry_0010aa53(long entryAddress,undefined8 data,char flagChar,int operationType)\n\n{\n  char ptrValue;\n  long ptrToStruct;\n  char typeChar;\n  uint loopVariable;\n  char *entryString;\n  size_t stringLength;\n  char *formattedString;\n  long reallocAddress;\n  undefined8 returnValue;\n  ulong loopCounter;\n  ulong maxIndex;\n  \n  ptrValue = *(char *)(*(long *)(entryAddress + 0x60) + 0x1c);\n  entryString = (char *)extract_and_free_next_entry_00109b2f();\n  stringLength = strlen(entryString);\n  formattedString = (char *)xmalloc(stringLength + 0x19);\n  *formattedString = flagChar + '0';\n  if (operationType == 1) {\n    typeChar = '1';\n  }\n  else {\n    typeChar = '0';\n    if ((operationType != 2) && (typeChar = '2', operationType != 0)) {\n                    \n      abort();\n    }\n  }\n  formattedString[1] = typeChar;\n  sprintf(formattedString + 2,\"%ld,%s;\",data);\n  free(entryString);\n  ptrToStruct = *(long *)(entryAddress + 0x60);\n  returnValue = 0;\n  if ((ptrToStruct != 0) && (*(long *)(ptrToStruct + 0x20) != 0)) {\n    ptrToStruct = *(long *)(ptrToStruct + 0x28);\n    maxIndex = 0;\n    if (ptrToStruct != 0) {\n      loopVariable = 0;\n      do {\n        loopCounter = (ulong)loopVariable;\n        maxIndex = (ulong)loopVariable;\n        loopVariable = loopVariable + 1;\n      } while (*(long *)(ptrToStruct + loopCounter * 8) != 0);\n    }\n    reallocAddress = xrealloc(ptrToStruct,(ulong)((int)maxIndex + 2) << 3);\n    *(char **)(reallocAddress + maxIndex * 8) = formattedString;\n    *(undefined8 *)(reallocAddress + (ulong)((int)maxIndex + 1) * 8) = 0;\n    ptrToStruct = *(long *)(entryAddress + 0x60);\n    *(long *)(ptrToStruct + 0x28) = reallocAddress;\n    if (ptrValue != '\\0') {\n      *(undefined *)(ptrToStruct + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entry_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "decode_and_process_debug_info_0011173a",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "cVar1": "charVar1",
                "bVar2": "byteVar2",
                "__ptr": "ptr",
                "cVar3": "charVar2",
                "uVar4": "undefinedVar",
                "iVar5": "intVar1",
                "puVar6": "ptrVar1",
                "plVar7": "ptrLongVar1",
                "pcVar8": "ptrCharVar1",
                "uVar9": "undefinedVar1",
                "lVar10": "longVar1",
                "lVar11": "longVar2",
                "lVar12": "longVar3",
                "pplVar13": "ptrPtrLongVar1",
                "uVar14": "ulongVar1",
                "uVar15": "ulongVar2",
                "pcVar16": "ptrCharVar2",
                "uVar17": "uintVar",
                "dVar19": "doubleVar",
                "local_48": "localPtrCharVar1",
                "local_40": "localPtrPtrLongVar1"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined decodeAndProcessDebugInfo_0011173a(undefined8 param1,long *param2,int param3,int param4,ulong param5,\n                      char *param6)\n\n{\n  char charVar1;\n  byte byteVar2;\n  void *ptr;\n  char charVar2;\n  undefined undefinedVar;\n  int intVar1;\n  undefined8 *ptrVar1;\n  long *ptrLongVar1;\n  char *ptrCharVar1;\n  undefined8 undefinedVar1;\n  long longVar1;\n  long longVar2;\n  long longVar3;\n  long **ptrPtrLongVar1;\n  ulong ulongVar1;\n  ulong ulongVar2;\n  char *ptrCharVar2;\n  uint uintVar;\n  long **pplVar18;\n  double doubleVar;\n  char *localPtrCharVar1;\n  long **localPtrPtrLongVar1 [2];\n  \n  if (param2[4] != 0) {\n    if (((param3 == 100) && (*param6 != '\\0')) && (param2[5] == param5)) goto LAB_00111a06;\n    charVar2 = initialize_debug_info_0010bbd3(param1);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param2 + 0x44) = 0;\n    *(undefined4 *)(param2 + 8) = 0;\n    param2[9] = param2[4];\n    if (*(char *)(param2 + 1) == '\\0') {\n      param2[6] = param2[5];\n    }\n    *(undefined4 *)(param2 + 0x10) = 1;\n    ptrVar1 = (undefined8 *)xmalloc(8);\n    param2[0x11] = (long)ptrVar1;\n    *ptrVar1 = 0;\n    param2[4] = 0;\n  }\n  strlen(param6);\n  if (param3 == 0x84) {\nLAB_00111ab7:\n    undefinedVar = debug_source_start_00108f08(param1,param6);\n    return undefinedVar;\n  }\n  if (param3 < 0x85) {\n    if (param3 == 0x3c) {\n      intVar1 = strcmp(param6,\"gcc2_compiled.\");\n      if (intVar1 == 0) {\n        *(undefined4 *)(param2 + 8) = 2;\n        return 1;\n      }\n      intVar1 = strcmp(param6,\"gcc_compiled.\");\n      if (intVar1 == 0) {\n        *(undefined4 *)(param2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param2 + 0x44) = 1;\n      return 1;\n    }\n    if (param3 < 0x3d) {\n      if (param3 == 0x24) {\n        if (*param6 == '\\0') {\n          if (*(char *)(param2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param2 + 1) != '\\0') {\n            param5 = param5 + param2[7];\n          }\n          charVar2 = process_records_0010c1c6(param1,param2);\n          if (charVar2 != '\\0') {\n            charVar2 = end_function_debugging_0010be1a(param1,param5);\n            if (charVar2 != '\\0') {\n              *(undefined *)(param2 + 0xc) = 0;\n              param2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param2 + 0xc) != '\\0') &&\n           ((param5 < (ulong)param2[0xd] || (param2[0xd] == 0xffffffffffffffff)))) {\n          param2[0xd] = param5;\n        }\n      }\n      else if (param3 < 0x25) {\n        if (param3 == 0xc) {\n          return 1;\n        }\n        if (param3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param3 == 0x2a) {\n          return 1;\n        }\n        if (param3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param2 + 0xc) != '\\0') {\n          ulongVar1 = param5;\n          if (((*param6 != '\\0') && (ulongVar2 = param2[0xd], ulongVar2 != 0xffffffffffffffff)) &&\n             (ulongVar1 = ulongVar2, param5 < ulongVar2)) {\n            ulongVar1 = param5;\n          }\n          charVar2 = process_records_0010c1c6(param1,param2);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          charVar2 = end_function_debugging_0010be1a(param1,ulongVar1);\n          if (charVar2 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param2 + 0xc) = 0;\n          param2[0xd] = -1;\n        }\n        if (*param6 == '\\0') {\n          return 1;\n        }\n        ptr = (void *)param2[4];\n        if (ptr == (void *)0x0) {\n          longVar3 = xstrdup(param6);\n          param2[4] = longVar3;\n        }\n        else {\n          if (*param6 == '/') {\n            longVar3 = xstrdup(param6);\n          }\n          else {\n            longVar3 = concat(ptr,param6,0);\n          }\n          param2[4] = longVar3;\n          free(ptr);\n        }\n        param2[5] = param5;\n        return 1;\n      }\n      if (param3 < 0x65) {\n        if (param3 == 0x44) {\n          longVar3 = 0;\n          if (*(char *)(param2 + 0xc) != '\\0') {\n            longVar3 = param2[7];\n          }\n          undefinedVar = record_line_debug_info_0010bf86(param1,(long)param4,longVar3 + param5);\n          return undefinedVar;\n        }\n        if (param3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param3 == 0x82) {\n        ptrLongVar1 = (long *)xmalloc();\n        intVar1 = *(int *)(param2 + 0x10);\n        longVar1 = param2[10];\n        longVar2 = param2[0xb];\n        ptrLongVar1[5] = 0;\n        longVar3 = param2[0x11];\n        *(int *)(ptrLongVar1 + 4) = intVar1;\n        uintVar = intVar1 + 1;\n        *(uint *)(param2 + 0x10) = uintVar;\n        *ptrLongVar1 = longVar2;\n        ptrLongVar1[1] = longVar1;\n        ptrLongVar1[2] = (long)param6;\n        ptrLongVar1[3] = param5;\n        param2[10] = (long)ptrLongVar1;\n        param2[0xb] = (long)ptrLongVar1;\n        longVar3 = xrealloc(longVar3,(ulong)uintVar << 3);\n        uintVar = *(uint *)(ptrLongVar1 + 4);\n        param2[0x11] = longVar3;\n        *(undefined8 *)(longVar3 + (ulong)uintVar * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    ptrCharVar1 = strchr(param6,0x3a);\n    if ((ptrCharVar1 != (char *)0x0) && ((ptrCharVar1[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param2 + 0xc) != '\\0') {\n        ulongVar1 = param2[0xd];\n        ulongVar2 = param5;\n        if ((ulongVar1 != 0xffffffffffffffff) && (ulongVar2 = ulongVar1, param5 < ulongVar1)) {\n          ulongVar2 = param5;\n        }\n        charVar2 = process_records_0010c1c6(param1,param2);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        charVar2 = end_function_debugging_0010be1a(param1,ulongVar2);\n        if (charVar2 == '\\0') {\n          return 0;\n        }\n        param2[0xd] = -1;\n      }\n      if (*(char *)(param2 + 1) != '\\0') {\n        param2[7] = param5;\n      }\n      *(undefined *)(param2 + 0xc) = 1;\n    }\n    localPtrCharVar1 = strchr(param6,0x3a);\n    if (localPtrCharVar1 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (localPtrCharVar1[1] == ':') goto code_r0x00111cc7;\n    if (*param6 == '$') {\n      charVar2 = param6[1];\n      ptrCharVar2 = \"eh_throw\";\n      if (charVar2 != 'e') {\n        if (charVar2 < 'f') {\n          if ((charVar2 != 'X') && (charVar2 != '_')) {\nLAB_00111d1a:\n            undefinedVar1 = dcgettext(0,\"unknown C++ encoded name\",5);\n            print_warning_00108fe8(param6,undefinedVar1);\n          }\n        }\n        else {\n          ptrCharVar2 = \"this\";\n          if (charVar2 == 't') goto LAB_00111d62;\n          if (charVar2 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      ptrCharVar2 = (char *)0x0;\n      if ((param6 != localPtrCharVar1) && ((*param6 != ' ' || (localPtrCharVar1 != param6 + 1)))) {\n        ptrCharVar2 = (char *)copy_and_terminate_string_00109a0b(param6,(int)localPtrCharVar1 - (int)param6);\n      }\n    }\nLAB_00111d62:\n    byteVar2 = localPtrCharVar1[1];\n    ptrCharVar1 = localPtrCharVar1 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) >> 2) & 1 |\n        (byteVar2 == 0x2d || byteVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 4;\n      goto LAB_001123e8;\n    }\n    if (byteVar2 == 0) goto switchD_00111de5_caseD_44;\n    ptrCharVar1 = localPtrCharVar1 + 2;\n    charVar2 = localPtrCharVar1[1];\n    switch(charVar2) {\n    case 'C':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      ptrCharVar1 = \"debug_record_label: not implemented\";\n      if (longVar3 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      charVar2 = initialize_debug_record_0010bc80(param1,ptrCharVar2,longVar3,charVar2 == 'F',param5);\n      if (charVar2 != '\\0') {\n        do {\n          if (*localPtrCharVar1 != ';') {\n            return 1;\n          }\n          localPtrCharVar1 = localPtrCharVar1 + 1;\n          longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (ptrCharVar2 == (char *)0x0) goto LAB_0011208f;\n      longVar1 = param2[3];\n      ptrLongVar1 = (long *)param2[2];\n      charVar2 = *(char *)(*(long *)(*param2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param3 == 0x24) {\n        localPtrCharVar1 = ptrCharVar1;\n        do {\n          if (*localPtrCharVar1 != ';') {\n            return 1;\n          }\n          localPtrCharVar1 = localPtrCharVar1 + 1;\n          longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n        } while (longVar3 != 0);\n        return 0;\n      }\n    case 'R':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 2;\n      break;\n    case 'S':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      charVar2 = localPtrCharVar1[2];\n      if (charVar2 == 't') {\n        ptrCharVar1 = localPtrCharVar1 + 3;\n      }\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,ptrCharVar2,&localPtrCharVar1,localPtrPtrLongVar1);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (ptrCharVar2 == (char *)0x0) {\n        return 1;\n      }\n      charVar1 = *(char *)(param2 + 0x35);\n      ptrLongVar1 = (long *)find_debug_tag_type_0010c6be(param1,ptrCharVar2,longVar3);\n      if (ptrLongVar1 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrPtrLongVar1[0] != (long **)0x0) {\n        *localPtrPtrLongVar1[0] = ptrLongVar1;\n      }\n      if (charVar1 != '\\0') goto LAB_001122f0;\n      ptrPtrLongVar1 = (long **)(param2 + 0x34);\n      pplVar18 = (long **)param2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      ptrCharVar1 = localPtrCharVar1 + 3;\n      if (((localPtrCharVar1[2] != '\\0') && (ptrCharVar1 = localPtrCharVar1 + 4, localPtrCharVar1[3] == 'n')) &&\n         (ptrCharVar1 = localPtrCharVar1 + 5, ptrCharVar2 = localPtrCharVar1 + 4, localPtrCharVar1 = ptrCharVar1, *ptrCharVar2 == '0')) {\n        for (; ptrCharVar1 = localPtrCharVar1, *localPtrCharVar1 != '\\0'; localPtrCharVar1 = localPtrCharVar1 + 1) {\n          if (*localPtrCharVar1 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 4;\n      break;\n    case 'c':\n      if (localPtrCharVar1[2] == '=') {\n        ptrCharVar1 = localPtrCharVar1 + 4;\n        charVar2 = localPtrCharVar1[3];\n        localPtrCharVar1 = ptrCharVar1;\n        if (charVar2 == 'i') {\n          longVar3 = strtol(ptrCharVar1,(char **)0x0,10);\n          if (ptrCharVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar1 = initialize_memory_00112996(param1,ptrCharVar2,4);\n          if (longVar1 != 0) {\n            *(long *)(longVar1 + 0x20) = (long)(int)longVar3;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'r') {\n          doubleVar = strtod(ptrCharVar1,(char **)0x0);\n          if (ptrCharVar2 == (char *)0x0) {\n            return 0;\n          }\n          longVar3 = initialize_memory_00112996(param1,ptrCharVar2,5);\n          if (longVar3 != 0) {\n            *(double *)(longVar3 + 0x20) = doubleVar;\n            return 1;\n          }\n          return 0;\n        }\n        if (charVar2 == 'e') {\n          longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n          if (longVar3 == 0) {\n            return 0;\n          }\n          ptrCharVar1 = localPtrCharVar1;\n          if (*localPtrCharVar1 == ',') {\n            longVar1 = strtol(localPtrCharVar1,(char **)0x0,10);\n            if (ptrCharVar2 == (char *)0x0) {\n              return 0;\n            }\n            longVar2 = initialize_memory_00112996(param1,ptrCharVar2,6);\n            if (longVar2 != 0) {\n              ptrLongVar1 = (long *)xmalloc(0x10);\n              *ptrLongVar1 = longVar3;\n              ptrLongVar1[1] = (long)(int)longVar1;\n              *(long **)(longVar2 + 0x20) = ptrLongVar1;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (localPtrCharVar1[2] == 'F') {\n        localPtrCharVar1 = localPtrCharVar1 + 3;\n        longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n        if (longVar3 == 0) {\n          return 0;\n        }\n        undefinedVar1 = initialize_function_00113ce0(longVar3,0,0);\n        longVar3 = initialize_or_get_value_00113d3a(undefinedVar1);\n      }\n      else {\n        localPtrCharVar1 = ptrCharVar1;\n        longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      }\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 1;\n      break;\n    case 'r':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 5;\nLAB_001123e8:\n      charVar2 = record_variable_or_fallback_0010c139(param1,param2,ptrCharVar2,longVar3,undefinedVar1,param5);\n      goto joined_r0x001123f8;\n    case 't':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,ptrCharVar2,&localPtrCharVar1,localPtrPtrLongVar1);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      if (ptrCharVar2 == (char *)0x0) {\n        return 1;\n      }\n      ptrLongVar1 = (long *)initialize_and_allocate_memory_0010c218(param1,ptrCharVar2,longVar3);\n      if (ptrLongVar1 == (long *)0x0) {\n        return 0;\n      }\n      if (localPtrPtrLongVar1[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrPtrLongVar1[0] = ptrLongVar1;\n      return 1;\n    case 'v':\n      localPtrCharVar1 = ptrCharVar1;\n      longVar3 = FUNC_0010ee3f(param1,param2,0,&localPtrCharVar1,0);\n      if (longVar3 == 0) {\n        return 0;\n      }\n      undefinedVar1 = 3;\n    }\n    charVar2 = record_parameter_0010bd62(param1,ptrCharVar2,longVar3,undefinedVar1,param5);\n    goto joined_r0x001123f8;\n  }\n  if (param3 == 0xe0) {\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    charVar2 = process_records_0010c1c6(param1,param2);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    charVar2 = debug_end_block_0010bf20(param1,param2[7] + param2[6] + param5);\n    if (charVar2 == '\\0') {\n      return 0;\n    }\n    param2 = param2 + 0xe;\n    *(int *)param2 = *(int *)param2 + -1;\n    ptrCharVar1 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param3) {\n      if (param3 == 0xe2) {\n        ptrCharVar1 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        ptrCharVar1 = \"debug_end_common_block: not implemented\";\n        if (param3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      undefinedVar1 = dcgettext(0,ptrCharVar1,5);\n      fprintf(_stderr,\"%s\\n\",undefinedVar1);\n      return 0;\n    }\n    if (param3 != 0xc0) {\n      if (param3 == 0xc2) {\n        intVar1 = *(int *)(param2 + 0x10);\n        *(uint *)(param2 + 0x10) = intVar1 + 1U;\n        longVar3 = xrealloc(param2[0x11],(ulong)(intVar1 + 1U) << 3);\n        ptrVar1 = (undefined8 *)param2[0xb];\n        param2[0x11] = longVar3;\n        while( true ) {\n          if (ptrVar1 == (undefined8 *)0x0) {\n            undefinedVar1 = dcgettext(0,\"Undefined N_EXCL\",5);\n            print_warning_00108fe8(param6,undefinedVar1);\n            *(undefined8 *)(param2[0x11] + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param5 == ptrVar1[3]) && (intVar1 = strcmp((char *)ptrVar1[2],param6), intVar1 == 0))\n          break;\n          ptrVar1 = (undefined8 *)*ptrVar1;\n        }\n        *(undefined8 *)(longVar3 + (ulong)(*(int *)(param2 + 0x10) - 1) * 8) = ptrVar1[5];\n        return 1;\n      }\n      if (param3 == 0xa2) {\n        longVar3 = param2[10];\n        if (longVar3 != 0) {\n          longVar1 = *(long *)(longVar3 + 8);\n          uintVar = *(uint *)(longVar3 + 0x20);\n          param2[10] = longVar1;\n          if ((uintVar < *(uint *)(param2 + 0x10)) &&\n             (*(undefined8 *)(longVar3 + 0x28) = *(undefined8 *)(param2[0x11] + (ulong)uintVar * 8),\n             longVar1 != 0)) {\n            param6 = *(char **)(longVar1 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param6 = (char *)param2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param2 + 0x44) != '\\0') && (param4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param2 + 0xc) != '\\0') {\n      charVar2 = start_block_debugging_0010be88(param1,param2[7] + param2[6] + param5);\n      if (charVar2 == '\\0') {\n        return 0;\n      }\n      charVar2 = process_records_0010c1c6(param1,param2);\n      if (charVar2 != '\\0') {\n        *(int *)(param2 + 0xe) = *(int *)(param2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    ptrCharVar1 = \"N_LBRAC not within function\\n\";\n  }\n  ptrCharVar1 = (char *)dcgettext(0,ptrCharVar1,5);\n  fprintf(_stderr,ptrCharVar1);\n  return 0;\ncode_r0x00111cc7:\n  localPtrCharVar1 = localPtrCharVar1 + 2;\n  localPtrCharVar1 = strchr(localPtrCharVar1,0x3a);\n  if (localPtrCharVar1 == (char *)0x0) {\n    ptrCharVar1 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    localPtrCharVar1 = ptrCharVar1;\n    print_bad_stab_message_00108fb9(param6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (charVar2 != 't') {\n      return 1;\n    }\n    ptrLongVar1 = (long *)initialize_and_allocate_memory_0010c218(param1,ptrCharVar2,ptrLongVar1);\n    if (ptrLongVar1 != (long *)0x0) {\n      if (localPtrPtrLongVar1[0] == (long **)0x0) {\n        return 1;\n      }\n      *localPtrPtrLongVar1[0] = ptrLongVar1;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *ptrCharVar2) &&\n     (intVar1 = strcmp((char *)pplVar18[1],ptrCharVar2), intVar1 == 0)) {\n    pplVar18[3] = ptrLongVar1;\n    *ptrPtrLongVar1 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  ptrPtrLongVar1 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (longVar1 < 1) {\nLAB_0011208f:\n    undefinedVar1 = 1;\nLAB_001121c4:\n    charVar2 = record_variable_0010c05d(param1,ptrCharVar2,longVar3,undefinedVar1,param5);\njoined_r0x001123f8:\n    if (charVar2 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  ptrCharVar1 = *(char **)(*ptrLongVar1 + 8);\n  if ((charVar2 != '\\0') && (charVar2 == *ptrCharVar1)) {\n    ptrCharVar1 = ptrCharVar1 + 1;\n  }\n  if ((*ptrCharVar1 == *ptrCharVar2) && (intVar1 = strcmp(ptrCharVar1,ptrCharVar2), intVar1 == 0)) {\n    param5 = *(long *)(*ptrLongVar1 + 0x10) + *(long *)(*(long *)(*ptrLongVar1 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  longVar1 = longVar1 + -1;\n  ptrLongVar1 = ptrLongVar1 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "strlen",
                "dcgettext",
                "FUN_0010bf86",
                "strtod",
                "FUN_00112996",
                "strcmp",
                "FUN_0010ee3f",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00108f08",
                "xrealloc",
                "strchr",
                "free",
                "FUN_0010c6be",
                "FUN_0010c139",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "xstrdup",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "xmalloc",
                "strtol",
                "FUN_00113d3a",
                "FUN_0010bf20",
                "FUN_0010c218",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decode_and_process_debug_info_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "process_section_00115dc0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "sectionValid",
                "iVar2": "error",
                "uVar3": "relocError",
                "lVar4": "relocUpperBound",
                "puVar5": "relocBuffer",
                "uVar6": "relocCount",
                "UNRECOVERED_JUMPTABLE": "jumpTable",
                "puVar7": "relocBufferPtr",
                "puVar8": "relocBufferPtr2",
                "uVar9": "counter",
                "uStack_38": "someValue"
            },
            "code": "\nvoid processSection_00115dc0(undefined8 param1,undefined8 *param2,long param3)\n\n{\n  char sectionValid;\n  int error;\n  undefined8 relocError;\n  long relocUpperBound;\n  undefined8 *relocBuffer;\n  ulong relocCount;\n  code *jumpTable;\n  undefined8 *relocBufferPtr;\n  undefined8 *relocBufferPtr2;\n  ulong counter;\n  undefined8 someValue;\n  \n  sectionValid = check_binary_section_00115f50(param1,param2,0);\n  if (sectionValid != '\\0') {\n    return;\n  }\n  relocError = param2[0xc];\n  if ((((*(byte *)(param3 + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (relocUpperBound = process_data_00114190(*param2,0,0x100), relocUpperBound == 0)) {\n    relocUpperBound = bfd_get_reloc_upper_bound(param1,param2);\n    if (relocUpperBound < 0) {\n      if ((relocUpperBound != -1) || (error = bfd_get_error(), error != 5)) {\n        DAT_00127a40 = 1;\n        relocError = 0;\nLAB_00108315:\n        print_error_info_001126c0(0,param1,param2,relocError,someValue);\n        return;\n      }\n    }\n    else if (relocUpperBound != 0) {\n      relocBuffer = (undefined8 *)param2[0xe];\n      if (relocBuffer == (undefined8 *)0x0) {\n        relocBuffer = (undefined8 *)bfd_alloc(param3);\n        if (relocBuffer == (undefined8 *)0x0) {\n          print_error_0011a110(0);\n                    \n          xexit(1);\n        }\n        relocCount = bfd_canonicalize_reloc(param1,param2,relocBuffer,DAT_001278d0);\n        if ((long)relocCount < 0) {\n          DAT_00127a40 = 1;\n          relocError = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        relocCount = (ulong)*(uint *)(param2 + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        relocBufferPtr = relocBuffer;\n        for (counter = 0; counter != relocCount; counter = counter + 1) {\n          relocBufferPtr2 = relocBufferPtr;\n          if (((*(long **)relocBuffer[counter] != (long *)0x0) &&\n              (relocUpperBound = **(long **)relocBuffer[counter], relocUpperBound != 0)) &&\n             (sectionValid = search_or_traverse_00115d70(*(undefined8 *)(relocUpperBound + 8),DAT_00127a28), sectionValid != '\\0')) {\n            relocBufferPtr2 = relocBufferPtr + 1;\n            *relocBufferPtr = relocBuffer[counter];\n          }\n          relocBufferPtr = relocBufferPtr2;\n        }\n        *relocBufferPtr = 0;\n        relocCount = (long)relocBufferPtr - (long)relocBuffer >> 3;\n      }\n      jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\n      if (relocCount == 0) {\n        relocCount = 0;\n        relocBuffer = (undefined8 *)0x0;\n      }\n      else {\n        relocCount = relocCount & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  relocCount = 0;\n  relocBuffer = (undefined8 *)0x0;\n  jumpTable = *(code **)(*(long *)(param3 + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jumpTable)(param3,relocError,relocBuffer,relocCount);\n  return;\n}\n\n",
            "called": [
                "FUN_001082df",
                "FUN_00115f50",
                "xexit",
                "bfd_alloc",
                "bfd_get_reloc_upper_bound",
                "bfd_get_error",
                "FUN_00114190",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "FUN_0011a110",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_section_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_retrieve_data_0010d559",
                "param_1": "parsed_data",
                "param_2": "input_bytes",
                "param_3": "output_length",
                "bVar1": "first_byte",
                "pbVar2": "current_byte",
                "cVar3": "result_char",
                "uVar4": "parsed_number",
                "iVar5": "comparison_result",
                "ppcVar6": "debug_info",
                "sVar7": "string_length",
                "lVar8": "search_result",
                "plVar9": "debug_info_pointer",
                "pcVar10": "search_string",
                "__s1": "return_value",
                "__ptr": "string_copy",
                "pbVar11": "updated_byte",
                "uVar12": "search_type",
                "local_64": "loop_counter",
                "local_40": "output_string_array"
            },
            "code": "\nundefined8 parse_and_retrieve_data_0010d559(undefined8 *parsed_data,byte **input_bytes,long *output_length)\n\n{\n  byte first_byte;\n  byte *current_byte;\n  char result_char;\n  uint parsed_number;\n  int comparison_result;\n  char **debug_info;\n  size_t string_length;\n  long search_result;\n  long *debug_info_pointer;\n  char *search_string;\n  char *return_value;\n  void *string_copy;\n  byte *updated_byte;\n  undefined8 search_type;\n  byte *__nptr;\n  int loop_counter;\n  char *output_string_array [2];\n  \n  current_byte = *input_bytes;\n  first_byte = current_byte[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    loop_counter = (char)first_byte + -0x30;\n    if (current_byte[2] == 0x5f) {\n      *input_bytes = current_byte + 1;\n    }\n    updated_byte = *input_bytes + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte[2] * 2] & 4) == 0)) ||\n       (current_byte[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_byte + 2;\n    search_result = strtol((char *)__nptr,(char **)0x0,10);\n    loop_counter = (int)search_result;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    updated_byte = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *input_bytes = updated_byte;\n  debug_info = (char **)0x0;\n  if (output_length != (long *)0x0) {\n    debug_info = output_string_array;\n  }\n  search_result = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (output_length != (long *)0x0) {\n          *output_length = search_result;\n        }\n        return 1;\n      }\n      if (**input_bytes == 0x5f) {\n        *input_bytes = *input_bytes + 1;\n      }\n      if (**input_bytes != 0x74) break;\n      result_char = parse_and_check_string_0010d21c(parsed_data,input_bytes,debug_info);\n      search_string = output_string_array[0];\n      if (result_char == '\\0') {\n        return 0;\n      }\n      if (output_length != (long *)0x0) {\n        string_length = strlen(output_string_array[0]);\n        search_result = search_and_retrieve_data_0010afd5(*parsed_data,parsed_data[1],search_string,string_length & 0xffffffff,9);\n        free(search_string);\n        if (search_result == 0) {\n          return 0;\n        }\n      }\n    }\n    parsed_number = parse_number_00108e76(input_bytes);\n    string_length = strlen((char *)*input_bytes);\n    if (string_length < parsed_number) break;\n    if (output_length != (long *)0x0) {\n      if ((search_result != 0) && (debug_info_pointer = (long *)extract_debug_info_00113b1e(search_result), debug_info_pointer != (long *)0x0)) {\n        search_string = (char *)copy_and_terminate_string_00109a0b(*input_bytes,parsed_number);\n        for (; search_result = *debug_info_pointer, search_result != 0; debug_info_pointer = debug_info_pointer + 1) {\n          search_result = *(long *)(search_result + 8);\n          if (search_result == 0) {\n            free(search_string);\n            return 0;\n          }\n          return_value = (char *)get_return_value_001129f4(search_result);\n          if ((return_value != (char *)0x0) && (comparison_result = strcmp(return_value,search_string), comparison_result == 0)) break;\n        }\n        free(search_string);\n        if (search_result != 0) goto LAB_0010d7ad;\n      }\n      search_type = 9;\n      if (loop_counter == 0) {\n        string_copy = (void *)copy_and_terminate_string_00109a0b(*input_bytes,parsed_number);\n        search_result = find_named_type_0010914e(*parsed_data,string_copy);\n        free(string_copy);\n        if (search_result != 0) goto LAB_0010d7ad;\n        search_type = 0;\n      }\n      search_result = search_and_retrieve_data_0010afd5(*parsed_data,parsed_data[1],*input_bytes,parsed_number,search_type);\n      if (search_result == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *input_bytes = *input_bytes + parsed_number;\n  }\nLAB_0010d5d8:\n  print_error_message_0010911f(current_byte);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010afd5",
                "strlen",
                "FUN_001129f4",
                "strtol",
                "FUN_00109a0b",
                "FUN_00113b1e",
                "FUN_00108e76",
                "strcmp",
                "FUN_0010914e",
                "FUN_0010911f",
                "free",
                "FUN_0010d21c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_retrieve_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fprintf",
                "vfprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_and_print_error_00108466",
                "param_7": "data_to_free"
            },
            "code": "\nvoid cleanup_and_print_error_00108466(void)\n\n{\n  void *data_to_free;\n  \n  DAT_00127a40 = 1;\n  print_error_info_001126c0(0);\n  free(data_to_free);\n  return;\n}\n\n",
            "called": [
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "parse_number_00108e76",
                "param_1": "input",
                "bVar1": "current_byte",
                "iVar2": "result"
            },
            "code": "\nint parse_number_00108e76(byte **input)\n\n{\n  byte current_byte;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    current_byte = **input;\n    if (((&_sch_istable)[(ulong)current_byte * 2] & 4) == 0) break;\n    *input = *input + 1;\n    result = result * 10 + -0x30 + (int)(char)current_byte;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input_value",
                "param_2": "param_2_value",
                "param_3": "param_3_value",
                "lVar1": "hash_ptr"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input_value,undefined8 param_2_value,undefined8 param_3_value)\n\n{\n  long hash_ptr;\n  \n  if (((input_value != 0) || (input_value = bfd_hash_allocate(param_2_value,0x30), input_value != 0)) &&\n     (hash_ptr = bfd_hash_newfunc(input_value,param_2_value,param_3_value), hash_ptr != 0)) {\n    *(undefined8 *)(hash_ptr + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_ptr + 0x18) = 0;\n    *(undefined4 *)(hash_ptr + 0x28) = 0;\n    return hash_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_newfunc",
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_data_and_process_string_thunk_0010e439",
                "param_1": "data_address",
                "param_2": "new_value",
                "process_string_0010e2f0": "process_string"
            },
            "code": "\nvoid update_data_and_process_string_thunk_0010e439(long data_address,undefined8 new_value)\n\n{\n  *(undefined8 *)(data_address + 0x210) = new_value;\n  process_string(data_address,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_data_and_process_string_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "check_directory_permission_0011283f",
                "param_1": "directory_path",
                "param_2": "current_directory",
                "iVar1": "access_result",
                "sStack_a8": "directory_stat"
            },
            "code": "\nchar * check_directory_permission_0011283f(char *directory_path,char *current_directory)\n\n{\n  int access_result;\n  stat directory_stat;\n  \n  if ((current_directory == (char *)0x0) && (directory_path != (char *)0x0)) {\n    access_result = access(directory_path,7);\n    if (access_result == 0) {\n      access_result = stat(directory_path,&directory_stat);\n      if ((access_result == 0) && ((directory_stat.st_mode & 0xf000) == 0x4000)) {\n        current_directory = directory_path;\n      }\n    }\n  }\n  return current_directory;\n}\n\n",
            "called": [
                "access",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "check_directory_permission_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_and_set_errno_00108237",
                "piVar2": "errnoPtr",
                "iVar1": "errnoValue",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeAndSetErrno_00108237(void)\n\n{\n  int errnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "initialize_debug_record_0010bc80",
                "param_1": "debug_data",
                "param_2": "filename",
                "param_3": "size",
                "param_4": "flags",
                "uVar1": "error_message",
                "plVar2": "debug_buffer",
                "puVar3": "data_buffer",
                "lVar4": "temp",
                "pcVar6": "selected_filename",
                "bVar7": "bVar",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ninitialize_debug_record_0010bc80(long debug_data,char *filename,long size,uint flags,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 error_message;\n  long *debug_buffer;\n  undefined4 *data_buffer;\n  long temp;\n  undefined4 *puVar5;\n  char *selected_filename;\n  byte bVar;\n  undefined return_value [16];\n  \n  bVar = 0;\n  selected_filename = \"\";\n  if (filename != (char *)0x0) {\n    selected_filename = filename;\n  }\n  if (size != 0) {\n    if (*(long *)(debug_data + 8) == 0) {\n      error_message = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      debug_buffer = (long *)xmalloc(0x18);\n      *debug_buffer = size;\n      *(undefined (*) [16])(debug_buffer + 1) = ZEXT816(0);\n      data_buffer = (undefined4 *)xmalloc(0x30);\n      *(long **)(debug_data + 0x18) = debug_buffer;\n      debug_buffer[2] = (long)data_buffer;\n      puVar5 = data_buffer;\n      for (temp = 0xc; temp != 0; temp = temp + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + (ulong)bVar * -2 + 1;\n      }\n      *(undefined4 **)(debug_data + 0x20) = data_buffer;\n      temp = *(long *)(debug_data + 0x10);\n      *(undefined8 *)(data_buffer + 6) = param_5;\n      *(undefined8 *)(data_buffer + 8) = 0xffffffffffffffff;\n      temp = initialize_memory_00112925(temp + 0x10,selected_filename,3,(flags & 0xff) + 1);\n      if (temp != 0) {\n        *(long **)(temp + 0x20) = debug_buffer;\n        error_message = CONCAT71((int7)((ulong)temp >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  error_message = 0;\nLAB_0010bd56:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = error_message;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_record_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = build_filename_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = build_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_info_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_info_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_info_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_info_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_info_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_info_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_info_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = process_binary_object_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = decode_and_process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_and_return_index_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = decode_and_process_debug_info_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_binary_function_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_binary_function_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = decode_and_copy_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = search_or_traverse_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = decode_and_copy_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUNC_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_info_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,section_reverse_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_info_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_info_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_info_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_info_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "dcgettext",
                "FUN_00107880"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "index",
                "lVar3": "offset",
                "lVar4": "lastSlashOffset",
                "pcVar5": "destPtr",
                "bVar6": "flag"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long index;\n  long offset;\n  long lastSlashOffset;\n  char *destPtr;\n  byte flag;\n  \n  flag = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    offset = 0;\n  }\n  else {\n    lastSlashOffset = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(lastSlashOffset + 0xb);\n    offset = lastSlashOffset + 1;\n    destPtr = lastSlash;\n    for (index = lastSlashOffset; index != 0; index = index + -1) {\n      *destPtr = *filePath;\n      filePath = filePath + (ulong)flag * -2 + 1;\n      destPtr = destPtr + (ulong)flag * -2 + 1;\n    }\n    lastSlash[lastSlashOffset] = '/';\n  }\n  *(undefined8 *)(lastSlash + offset) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + offset) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "process_data_0010a181",
                "param_1": "dataStruct",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "charValue",
                "__s": "entry1",
                "__s_00": "entry2",
                "sVar5": "entry1Length",
                "sVar6": "entry2Length",
                "__s_01": "combinedEntry",
                "lVar7": "entryCounter",
                "local_41": "localFlag",
                "iVar2": "entrySize",
                "iVar3": "result",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 processData_0010a181(long dataStruct,long startValue,long endValue,byte flag)\n\n{\n  char charValue;\n  int entrySize;\n  int result;\n  undefined4 returnValue;\n  char *entry1;\n  char *entry2;\n  size_t entry1Length;\n  size_t entry2Length;\n  char *combinedEntry;\n  long entryCounter;\n  byte localFlag;\n  \n  charValue = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  entry1 = (char *)extract_and_free_next_entry_00109b2f();\n  localFlag = 1;\n  if (charValue == '\\0') {\n    localFlag = *(byte *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  }\n  entrySize = *(int *)(*(long *)(dataStruct + 0x60) + 0x18);\n  entry2 = (char *)extract_and_free_next_entry_00109b2f(dataStruct);\n  entry1Length = strlen(entry1);\n  entry2Length = strlen(entry2);\n  combinedEntry = (char *)xmalloc(entry1Length + 100 + entry2Length);\n  if (flag == 0) {\n    *combinedEntry = '\\0';\n    entryCounter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    entryCounter = *(long *)(dataStruct + 0x68);\n    *(long *)(dataStruct + 0x68) = entryCounter + 1;\n    sprintf(combinedEntry,\"%ld=@S;\",entryCounter);\n    localFlag = flag;\n  }\n  entry1Length = strlen(combinedEntry);\n  sprintf(combinedEntry + entry1Length,\"ar%s;%ld;%ld;%s\",entry1,startValue,endValue,entry2);\n  free(entry1);\n  free(entry2);\n  result = 0;\n  if (startValue <= endValue) {\n    result = entrySize * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = initialize_data_structure_00109b52(dataStruct,combinedEntry,entryCounter,localFlag,result);\n  if ((char)returnValue != '\\0') {\n    free(combinedEntry);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_formatted_arch_machine_info_001199d0",
                "iVar1": "columns",
                "iVar2": "archMachine",
                "iVar3": "comparisonResult",
                "iVar9": "archMachineIterator",
                "lVar10": "archMachineIndex",
                "lVar11": "startIndex",
                "ppcVar12": "archMachPointer",
                "uVar13": "maxLength",
                "uVar14": "stringLength",
                "local_70": "negativeFlag",
                "pcVar4": "stringPointer",
                "sVar5": "stringLength",
                "pcVar6": "temporaryString",
                "uVar7": "returnString",
                "piVar8": "errorLocation"
            },
            "code": "\n\n\nvoid printFormattedArchMachineInfo_001199d0(void)\n\n{\n  int columns;\n  int archMachine;\n  int comparisonResult;\n  char *stringPointer;\n  size_t stringLength;\n  char *temporaryString;\n  undefined8 returnString;\n  int *errorLocation;\n  int archMachineIterator;\n  long archMachineIndex;\n  long startIndex;\n  char **archMachPointer;\n  uint maxLength;\n  ulong stringLength;\n  int negativeFlag;\n  \n  stringPointer = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(stringPointer,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    stringPointer = getenv(\"TMPDIR\");\n    returnString = check_directory_permission_0011283f(stringPointer,0);\n    stringPointer = getenv(\"TMP\");\n    returnString = check_directory_permission_0011283f(stringPointer,returnString);\n    stringPointer = getenv(\"TEMP\");\n    returnString = check_directory_permission_0011283f(stringPointer,returnString);\n    returnString = check_directory_permission_0011283f(&DAT_0011b39a,returnString);\n    returnString = check_directory_permission_0011283f(\"/var/tmp\",returnString);\n    stringPointer = (char *)check_directory_permission_0011283f(&DAT_00120324,returnString);\n    if (stringPointer == (char *)0x0) {\n      stringPointer = \".\";\n    }\n    stringLength = strlen(stringPointer);\n    temporaryString = (char *)xmalloc((int)stringLength + 2);\n    DAT_001278e0 = strcpy(temporaryString,stringPointer);\n    DAT_001278e0[stringLength & 0xffffffff] = '/';\n    DAT_001278e0[(int)stringLength + 1] = '\\0';\n  }\n  stringPointer = DAT_001278e0;\n  stringLength = strlen(DAT_001278e0);\n  archMachineIndex = (long)(int)stringLength;\n  temporaryString = (char *)xmalloc(archMachineIndex + 9);\n  strcpy(temporaryString,stringPointer);\n  *(undefined2 *)(temporaryString + archMachineIndex) = 0x6363;\n  *(undefined4 *)(temporaryString + archMachineIndex + 2) = 0x58585858;\n  *(undefined4 *)((long)(temporaryString + archMachineIndex + 2) + 3) = 0x585858;\n  temporaryString[archMachineIndex + 8] = '\\0';\n  archMachine = mkstemps(temporaryString,0);\n  if (archMachine == -1) {\n    errorLocation = __errno_location();\n    temporaryString = strerror(*errorLocation);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",stringPointer,temporaryString);\n                    \n    abort();\n  }\n  archMachine = close(archMachine);\n  if (archMachine != 0) {\n                    \n    abort();\n  }\n  maxLength = 0;\n  archMachine = 2;\n  bfd_iterate_over_targets(process_data_00119f70);\n  unlink(temporaryString);\n  free(temporaryString);\n  negativeFlag = 0;\n  do {\n    stringPointer = (char *)bfd_printable_arch_mach(archMachine);\n    stringLength = strlen(stringPointer);\n    if ((int)maxLength < (int)(uint)stringLength) {\n      maxLength = (uint)stringLength;\n    }\n    archMachine = archMachine + 1;\n  } while (archMachine != 0x57);\n  stringPointer = getenv(\"COLUMNS\");\n  archMachine = negativeFlag;\n  if (stringPointer != (char *)0x0) {\n    archMachineIndex = strtol(stringPointer,(char **)0x0,10);\n    columns = (int)archMachineIndex;\n    if (columns != 0) goto LAB_00119b11;\n  }\n  columns = 0x50;\nLAB_00119b11:\n  do {\n    negativeFlag = archMachine;\n    if (-1 < negativeFlag) {\n      return;\n    }\n    startIndex = (long)negativeFlag;\n    archMachineIterator = (columns - maxLength) + -1;\n    archMachineIndex = startIndex;\n    do {\n      archMachine = (int)archMachineIndex;\n      if (-1 < archMachine) break;\n      stringLength = strlen(*(char **)(archMachineIndex * 0x60));\n      archMachineIndex = archMachineIndex + 1;\n      archMachineIterator = (archMachineIterator - (int)stringLength) + -1;\n    } while (-1 < archMachineIterator);\n    printf(\"\\n%*s\",(ulong)(maxLength + 1),&DAT_0011b4a1);\n    for (archMachPointer = (char **)(startIndex * 0x60);\n        ((ulong)(uint)(archMachine - negativeFlag) + startIndex) * 0x60 - (long)archMachPointer != 0;\n        archMachPointer = archMachPointer + 0xc) {\n      printf(\"%s \",*archMachPointer);\n    }\n    archMachineIterator = 2;\n    putc(10,_stdout);\n    do {\n      stringPointer = (char *)bfd_printable_arch_mach(archMachineIterator,0);\n      comparisonResult = strcmp(stringPointer,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        returnString = bfd_printable_arch_mach(archMachineIterator,0);\n        printf(\"%*s \",(ulong)maxLength,returnString);\n        archMachPointer = (char **)(startIndex * 0x60);\n        comparisonResult = negativeFlag;\n        while (archMachine != comparisonResult) {\n          if (*(char *)((long)archMachPointer + (ulong)(archMachineIterator - 2) + 8) == '\\0') {\n            stringLength = strlen(*archMachPointer);\n            for (stringLength = stringLength & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachPointer,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (archMachine != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          archMachPointer = archMachPointer + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      archMachineIterator = archMachineIterator + 1;\n    } while (archMachineIterator != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "getenv",
                "abort",
                "bfd_iterate_over_targets",
                "FUN_00119f70",
                "strlen",
                "mkstemps",
                "FUN_00104943",
                "dcgettext",
                "FUN_0011283f",
                "strcpy",
                "unlink",
                "printf",
                "strerror",
                "xmalloc",
                "close",
                "fprintf",
                "bfd_printable_arch_mach",
                "__errno_location",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_formatted_arch_machine_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "initialize_application_0010847a"
            },
            "code": "\nvoid initializeApplication_0010847a(void)\n\n{\n  find_build_attributes_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "initialize_application_0010847a",
            "code_backup": "\nvoid FUN_0010847a(void)\n\n{\n  FUNC_00116490();\n  return;\n}\n\n"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "parse_and_check_string_0010d21c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "bVar1": "byteVar1",
                "pbVar2": "bytePtrVar2",
                "bVar3": "byteVar3",
                "cVar4": "charVar4",
                "bVar5": "byteVar5",
                "uVar6": "uintVar6",
                "iVar7": "intVar7",
                "uVar8": "uintVar8",
                "sVar9": "sizeVar9",
                "pbVar10": "bytePtrVar10",
                "__ptr": "ptr",
                "__ptr_00": "ptr0",
                "__haystack": "haystack",
                "pcVar11": "ptrVar11",
                "uVar12": "uintVar12",
                "pcVar13": "ptrVar13",
                "bVar14": "byteVar14",
                "pcVar15": "ptrVar15",
                "bVar16": "byteVar16",
                "bVar17": "byteVar17",
                "bVar18": "byteVar18",
                "bVar19": "byteVar19",
                "uVar20": "uintVar20",
                "uVar21": "ulongVar21",
                "local_3c": "localArray"
            },
            "code": "\nundefined4 parseAndCheckString_0010d21c(undefined8 param1,byte **param2,undefined8 *param3)\n\n{\n  byte byteVar1;\n  byte *bytePtrVar2;\n  byte byteVar3;\n  char charVar4;\n  byte byteVar5;\n  undefined4 uintVar6;\n  int intVar7;\n  uint uintVar8;\n  size_t sizeVar9;\n  byte *bytePtrVar10;\n  void *ptr;\n  void *ptr0;\n  char *haystack;\n  char *ptrVar11;\n  undefined8 uintVar12;\n  char *ptrVar13;\n  byte byteVar14;\n  char *ptrVar15;\n  byte byteVar16;\n  byte byteVar17;\n  byte byteVar18;\n  byte byteVar19;\n  uint uintVar20;\n  ulong ulongVar21;\n  uint localArray [3];\n  \n  bytePtrVar2 = *param2;\n  *param2 = bytePtrVar2 + 1;\n  localArray[0] = parse_number_00108e76(param2);\n  ulongVar21 = (ulong)localArray[0];\n  if (localArray[0] != 0) {\n    bytePtrVar10 = *param2;\n    sizeVar9 = strlen((char *)bytePtrVar10);\n    if (ulongVar21 <= sizeVar9) {\n      *param2 = bytePtrVar10 + ulongVar21;\n      uintVar20 = 0;\n      uintVar6 = parse_number_00108ea1(param2,localArray);\n      if ((char)uintVar6 != '\\0') {\nLAB_0010d2b4:\n        if (localArray[0] <= uintVar20) {\n          if (param3 == (undefined8 *)0x0) {\n            return uintVar6;\n          }\n          ptr = (void *)copy_and_terminate_string_00109a0b(bytePtrVar2,(int)*param2 - (int)bytePtrVar2);\n          ptr0 = (void *)concat(\"NoSuchStrinG__\",ptr,0);\n          free(ptr);\n          haystack = (char *)cplus_demangle(ptr0,2);\n          free(ptr0);\n          if ((haystack != (char *)0x0) &&\n             (ptrVar11 = strstr(haystack,\"::NoSuchStrinG\"), ptrVar13 = haystack,\n             ptrVar15 = haystack, ptrVar11 != (char *)0x0)) {\n            for (; ptrVar13 != ptrVar11; ptrVar13 = ptrVar13 + 1) {\n              if ((*ptrVar13 != ' ') ||\n                 (((ptrVar13[1] == '>' && (haystack < ptrVar13)) && (ptrVar13[-1] == '>')))) {\n                *ptrVar15 = *ptrVar13;\n                ptrVar15 = ptrVar15 + 1;\n              }\n            }\n            uintVar12 = copy_and_terminate_string_00109a0b(haystack,(int)ptrVar15 - (int)haystack);\n            *param3 = uintVar12;\n            free(haystack);\n            return uintVar6;\n          }\n          print_error_message_0010911f(bytePtrVar2);\n          free(haystack);\n          return 0;\n        }\n        bytePtrVar10 = *param2;\n        if (*bytePtrVar10 != 0x5a) {\n          byteVar5 = reverse_and_improve_code_0010c95e(param1,param2,0);\n          if (byteVar5 == 0) {\n            return 0;\n          }\n          byteVar3 = 0;\n          byteVar14 = 0;\n          byteVar18 = 0;\n          byteVar17 = 0;\n          byteVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              byteVar16 = byteVar3;\n              byteVar1 = *bytePtrVar10;\n              if ((byteVar14 | byteVar1 == 0) != 0) {\n                byteVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              byteVar3 = byteVar5;\n              byteVar14 = byteVar5;\n            } while ('v' < (char)byteVar1);\n            if ((char)byteVar1 < 'b') {\n              if ((char)byteVar1 < 'U') {\n                if ((char)byteVar1 < 'C') goto LAB_0010d2e9;\n                ulongVar21 = 1L << (byteVar1 + 0xbd & 0x3f);\n                if ((ulongVar21 & 0x11409) == 0) {\n                  if ((ulongVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byteVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byteVar1 + 0xab)) goto LAB_0010d2e9;\n              bytePtrVar10 = bytePtrVar10 + 1;\n              byteVar3 = byteVar16;\n              byteVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byteVar1) {\n            case 0x62:\n              byteVar3 = byteVar16;\n              byteVar18 = byteVar5;\n              break;\n            case 99:\n              byteVar3 = byteVar16;\n              byteVar19 = byteVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              byteVar3 = byteVar16;\n              byteVar17 = byteVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param2 = bytePtrVar10 + 1;\n        charVar4 = reverse_and_improve_code_0010c95e(param1,param2,0);\n        if (charVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(bytePtrVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (byteVar16 == 0) {\n    if (byteVar19 == 0) {\n      if (byteVar18 == 0) {\n        if (byteVar17 == 0) {\n          if (byteVar5 != 0) {\n            uintVar8 = parse_number_00108e76(param2);\n            if (uintVar8 == 0) goto LAB_0010d280;\n            *param2 = *param2 + uintVar8;\n          }\n        }\n        else {\n          if (**param2 == 0x6d) {\n            *param2 = *param2 + 1;\n          }\n          while( true ) {\n            bytePtrVar10 = *param2;\n            if (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) == 0) break;\n            *param2 = bytePtrVar10 + 1;\n          }\n          if (*bytePtrVar10 == 0x2e) {\n            do {\n              bytePtrVar10 = bytePtrVar10 + 1;\n              *param2 = bytePtrVar10;\n            } while (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) != 0);\n          }\n          bytePtrVar10 = *param2;\n          if (*bytePtrVar10 == 0x65) {\n            do {\n              bytePtrVar10 = bytePtrVar10 + 1;\n              *param2 = bytePtrVar10;\n            } while (((&_sch_istable)[(ulong)*bytePtrVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uintVar8 = parse_number_00108e76(param2);\n        if (1 < uintVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param2 == 0x6d) {\n        *param2 = *param2 + 1;\n      }\n      intVar7 = parse_number_00108e76(param2);\n      if (intVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param2 == 0x6d) {\n      *param2 = *param2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param2 * 2] & 4) != 0) {\n      *param2 = *param2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uintVar20 = uintVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "abort",
                "FUN_00108ea1",
                "strstr",
                "strlen",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108e76",
                "concat",
                "FUN_0010911f",
                "cplus_demangle",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_and_check_string_0010d21c",
            "code_backup": "\nundefined4 FUN_0010d21c(undefined8 param_1,byte **param_2,undefined8 *param_3)\n\n{\n  byte bVar1;\n  byte *pbVar2;\n  byte bVar3;\n  char cVar4;\n  byte bVar5;\n  undefined4 uVar6;\n  int iVar7;\n  uint uVar8;\n  size_t sVar9;\n  byte *pbVar10;\n  void *__ptr;\n  void *__ptr_00;\n  char *__haystack;\n  char *pcVar11;\n  undefined8 uVar12;\n  char *pcVar13;\n  byte bVar14;\n  char *pcVar15;\n  byte bVar16;\n  byte bVar17;\n  byte bVar18;\n  byte bVar19;\n  uint uVar20;\n  ulong uVar21;\n  uint local_3c [3];\n  \n  pbVar2 = *param_2;\n  *param_2 = pbVar2 + 1;\n  local_3c[0] = parse_number_00108e76(param_2);\n  uVar21 = (ulong)local_3c[0];\n  if (local_3c[0] != 0) {\n    pbVar10 = *param_2;\n    sVar9 = strlen((char *)pbVar10);\n    if (uVar21 <= sVar9) {\n      *param_2 = pbVar10 + uVar21;\n      uVar20 = 0;\n      uVar6 = parse_number_00108ea1(param_2,local_3c);\n      if ((char)uVar6 != '\\0') {\nLAB_0010d2b4:\n        if (local_3c[0] <= uVar20) {\n          if (param_3 == (undefined8 *)0x0) {\n            return uVar6;\n          }\n          __ptr = (void *)copy_and_terminate_string_00109a0b(pbVar2,(int)*param_2 - (int)pbVar2);\n          __ptr_00 = (void *)concat(\"NoSuchStrinG__\",__ptr,0);\n          free(__ptr);\n          __haystack = (char *)cplus_demangle(__ptr_00,2);\n          free(__ptr_00);\n          if ((__haystack != (char *)0x0) &&\n             (pcVar11 = strstr(__haystack,\"::NoSuchStrinG\"), pcVar13 = __haystack,\n             pcVar15 = __haystack, pcVar11 != (char *)0x0)) {\n            for (; pcVar13 != pcVar11; pcVar13 = pcVar13 + 1) {\n              if ((*pcVar13 != ' ') ||\n                 (((pcVar13[1] == '>' && (__haystack < pcVar13)) && (pcVar13[-1] == '>')))) {\n                *pcVar15 = *pcVar13;\n                pcVar15 = pcVar15 + 1;\n              }\n            }\n            uVar12 = copy_and_terminate_string_00109a0b(__haystack,(int)pcVar15 - (int)__haystack);\n            *param_3 = uVar12;\n            free(__haystack);\n            return uVar6;\n          }\n          print_error_message_0010911f(pbVar2);\n          free(__haystack);\n          return 0;\n        }\n        pbVar10 = *param_2;\n        if (*pbVar10 != 0x5a) {\n          bVar5 = FUNC_0010c95e(param_1,param_2,0);\n          if (bVar5 == 0) {\n            return 0;\n          }\n          bVar3 = 0;\n          bVar14 = 0;\n          bVar18 = 0;\n          bVar17 = 0;\n          bVar19 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              bVar16 = bVar3;\n              bVar1 = *pbVar10;\n              if ((bVar14 | bVar1 == 0) != 0) {\n                bVar5 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              bVar3 = bVar5;\n              bVar14 = bVar5;\n            } while ('v' < (char)bVar1);\n            if ((char)bVar1 < 'b') {\n              if ((char)bVar1 < 'U') {\n                if ((char)bVar1 < 'C') goto LAB_0010d2e9;\n                uVar21 = 1L << (bVar1 + 0xbd & 0x3f);\n                if ((uVar21 & 0x11409) == 0) {\n                  if ((uVar21 & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (bVar1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(bVar1 + 0xab)) goto LAB_0010d2e9;\n              pbVar10 = pbVar10 + 1;\n              bVar3 = bVar16;\n              bVar14 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(bVar1) {\n            case 0x62:\n              bVar3 = bVar16;\n              bVar18 = bVar5;\n              break;\n            case 99:\n              bVar3 = bVar16;\n              bVar19 = bVar5;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              bVar3 = bVar16;\n              bVar17 = bVar5;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *param_2 = pbVar10 + 1;\n        cVar4 = FUNC_0010c95e(param_1,param_2,0);\n        if (cVar4 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  print_error_message_0010911f(pbVar2);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (bVar16 == 0) {\n    if (bVar19 == 0) {\n      if (bVar18 == 0) {\n        if (bVar17 == 0) {\n          if (bVar5 != 0) {\n            uVar8 = parse_number_00108e76(param_2);\n            if (uVar8 == 0) goto LAB_0010d280;\n            *param_2 = *param_2 + uVar8;\n          }\n        }\n        else {\n          if (**param_2 == 0x6d) {\n            *param_2 = *param_2 + 1;\n          }\n          while( true ) {\n            pbVar10 = *param_2;\n            if (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) == 0) break;\n            *param_2 = pbVar10 + 1;\n          }\n          if (*pbVar10 == 0x2e) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n          pbVar10 = *param_2;\n          if (*pbVar10 == 0x65) {\n            do {\n              pbVar10 = pbVar10 + 1;\n              *param_2 = pbVar10;\n            } while (((&_sch_istable)[(ulong)*pbVar10 * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        uVar8 = parse_number_00108e76(param_2);\n        if (1 < uVar8) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**param_2 == 0x6d) {\n        *param_2 = *param_2 + 1;\n      }\n      iVar7 = parse_number_00108e76(param_2);\n      if (iVar7 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**param_2 == 0x6d) {\n      *param_2 = *param_2 + 1;\n    }\n    while (((&_sch_istable)[(ulong)**param_2 * 2] & 4) != 0) {\n      *param_2 = *param_2 + 1;\n    }\n  }\nLAB_0010d2b1:\n  uVar20 = uVar20 + 1;\n  goto LAB_0010d2b4;\n}\n\n"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_hash_table_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupHashTable_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_hash_table_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "record_variable_or_fallback_0010c139",
                "param_2": "binary_data",
                "uVar1": "prev_value",
                "cVar2": "char_value",
                "uVar3": "result",
                "puVar4": "new_record",
                "in_R10": "in_register_10",
                "unaff_R15": "unaffected_register_15"
            },
            "code": "\nulong record_variable_or_fallback_0010c139(undefined8 param_1,long binary_data,undefined8 param_3,undefined8 param_4,\n                  undefined4 param_5,undefined8 param_6)\n\n{\n  undefined8 prev_value;\n  char char_value;\n  ulong result;\n  undefined8 *new_record;\n  undefined8 in_register_10;\n  undefined8 unaffected_register_15;\n  \n  char_value = *(char *)(binary_data + 0x60);\n  if ((char_value != '\\0') && ((*(int *)(binary_data + 0x40) != 0 || (*(char *)(binary_data + 0x44) == '\\0')))) {\n    new_record = (undefined8 *)xmalloc(0x28);\n    prev_value = *(undefined8 *)(binary_data + 0x78);\n    *(undefined8 *)((long)new_record + 0x1c) = 0;\n    new_record[2] = param_4;\n    *(undefined4 *)(new_record + 3) = param_5;\n    new_record[4] = param_6;\n    *(undefined8 **)(binary_data + 0x78) = new_record;\n    *new_record = prev_value;\n    new_record[1] = param_3;\n    return CONCAT71((int7)((ulong)unaffected_register_15 >> 8),char_value) & 0xffffffff;\n  }\n  result = record_variable_0010c05d(param_1,param_3,param_4,param_5,param_6,in_register_10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_variable_or_fallback_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_and_process_string_0010e439",
                "param_1": "objectAddress",
                "param_2": "newValue"
            },
            "code": "\nvoid setParamAndProcessString_0010e439(long objectAddress,undefined8 newValue)\n\n{\n  *(undefined8 *)(objectAddress + 0x210) = newValue;\n  process_string_0010e2f0(objectAddress,0x84,0,0,newValue);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "thunk_FUN_0010e439",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "set_param_and_process_string_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010e9a0",
                "FUN_0010b800",
                "FUN_00109e76",
                "FUN_0010e918",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010abdd",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_0011173a",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010554f",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00113ede",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_00113fb0",
                "FUN_0010b800",
                "FUN_0010e918",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_001199d0",
                "FUN_00104ad6",
                "FUN_00109bbb",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010eafe",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "initialize_formatted_data_00109d3e",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "defaultData"
            },
            "code": "\nvoid initializeFormattedData_00109d3e(undefined8 data,int size)\n\n{\n  undefined8 defaultData;\n  \n  defaultData = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    defaultData = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  initialize_and_format_data_00109cf4(data,defaultData,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_formatted_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "process_files_00112502",
                "param_1": "file_info_struct",
                "param_2": "file_info_pointer",
                "param_3": "maximum_size",
                "uVar1": "index",
                "puVar2": "file_info_array",
                "uVar3": "next_file_info",
                "cVar4": "update_result"
            },
            "code": "\nundefined process_files_00112502(long file_info_struct,undefined8 file_info_pointer,ulong maximum_size)\n\n{\n  uint index;\n  undefined8 *file_info_array;\n  undefined8 next_file_info;\n  char update_result;\n  \n  do {\n    file_info_array = *(undefined8 **)(file_info_struct + 0x40);\n    if (file_info_array == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((index = *(uint *)(file_info_struct + 0x48), index < 10 && (file_info_array[(ulong)index + 2] != -1))) {\n      if (maximum_size <= (ulong)file_info_array[(ulong)index + 0xc]) {\n        return 1;\n      }\n      update_result = update_file_info_0010edb4(file_info_pointer,*(undefined8 *)(file_info_array[1] + 8));\n      if (update_result == '\\0') {\n        return 0;\n      }\n      *(int *)(file_info_struct + 0x48) = *(int *)(file_info_struct + 0x48) + 1;\n    }\n    next_file_info = *file_info_array;\n    *(undefined4 *)(file_info_struct + 0x48) = 0;\n    *(undefined8 *)(file_info_struct + 0x40) = next_file_info;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_files_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_input_lines_00104cc1",
                "unaff_EBP": "lineCounter",
                "unaff_RBX": "lineStart",
                "in_R10": "currentChar",
                "unaff_R13": "param_7",
                "unaff_R14": "ptrBuffer",
                "unaff_R15": "tableEntry",
                "param_9": "currentLine",
                "pbVar5": "currentLineStart",
                "pbVar3": "currentChar",
                "bVar4": "currentCharValue",
                "param_8": "outputBytes",
                "htab_find_slot()": "findTableSlot()",
                "process_lines_00104d1c()": "processSpecialLines()"
            },
            "code": "\nvoid processInputLines_00104cc1(void)\n\n{\n  undefined8 uVar1;\n  byte **ppbVar2;\n  byte *currentChar;\n  byte currentCharValue;\n  byte *lineStart;\n  byte *currentLineStart;\n  int lineCounter;\n  byte *currentChar;\n  undefined8 param_7;\n  byte *ptrBuffer;\n  byte *tableEntry;\n  undefined8 param_7;\n  undefined8 *outputBytes;\n  byte *currentLine;\n  \ncode_r0x00104cc1:\n  currentLine = currentChar;\n  uVar1 = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  print_error_message_00119ed0(uVar1,param_7,lineCounter);\n  currentLineStart = lineStart;\n  currentChar = currentLine;\nLAB_00114599:\n  do {\n    *currentChar = 0;\n    if (tableEntry < currentChar) {\n      ppbVar2 = (byte **)findTableSlot();\n      *ppbVar2 = tableEntry;\n    }\n    lineCounter = lineCounter + 1;\n    currentChar = currentLineStart;\n    if (ptrBuffer[1] == 0) {\n      *outputBytes = param_7;\n      return;\n    }\n    for (; currentCharValue = *currentChar, ptrBuffer = currentChar, currentCharValue != 10; currentChar = currentChar + 1) {\n      if ((char)currentCharValue < '\\v') {\n        if (currentCharValue == 0) {\n          lineStart = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (currentCharValue == 0xd) {\n          *currentChar = 0;\n          lineStart = currentChar + 1;\n          if (currentChar[1] == 10) {\n            lineStart = currentChar + 2;\n            ptrBuffer = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (currentCharValue == 0x23) {\n          processSpecialLines();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      ptrBuffer = currentChar + 1;\n      lineStart = currentChar + 2;\n    }\n    else {\n      lineStart = currentChar + 1;\n    }\nLAB_00114553:\n    currentCharValue = *currentLineStart;\n    tableEntry = currentLineStart;\n    while ((currentCharValue == 0x20 || (currentChar = tableEntry, currentCharValue == 9))) {\n      currentLineStart = tableEntry + 1;\n      tableEntry = tableEntry + 1;\n      currentCharValue = *currentLineStart;\n    }\n    do {\n      currentLineStart = lineStart;\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = currentChar[1];\n      currentChar = currentChar + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    currentCharValue = currentChar[1];\n    if ((((((currentCharValue == 9) || (currentCharValue == 0x20)) && ((currentCharValue = currentChar[2], currentCharValue == 9 || (currentCharValue == 0x20)))\n          ) && ((currentCharValue = currentChar[3], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n        ((currentCharValue = currentChar[4], currentCharValue == 9 || (currentCharValue == 0x20)))) &&\n       ((currentCharValue = currentChar[5], currentCharValue == 9 || (currentCharValue == 0x20)))) {\n      currentCharValue = currentChar[6];\n      currentChar = currentChar + 6;\n      if ((currentCharValue == 9) || (currentCharValue == 0x20)) {\n        do {\n          do {\n            currentCharValue = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (currentCharValue == 0x20);\n        } while (currentCharValue == 9);\n      }\n    }\n    if ((0xd < currentCharValue) || ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c",
                "dcgettext",
                "FUN_00104cc1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_input_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0011173a",
                "FUN_00119f70",
                "FUN_0010aa53",
                "FUN_0010ab4d",
                "FUN_0010e2f0",
                "FUN_0010ee3f",
                "FUN_00109ed3",
                "FUN_0010d7d4",
                "FUN_00109c2e",
                "FUN_0010b6ea",
                "FUN_00109be3",
                "FUN_0010dac0",
                "FUN_0010abdd",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "initialize_and_store_params_00113bfa",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "lVar1": "initialized_value",
                "plVar2": "allocated_array"
            },
            "code": "\nlong initialize_and_store_params_00113bfa(long input_param_1,long input_param_2)\n\n{\n  long initialized_value;\n  long *allocated_array;\n  \n  if (((input_param_1 != 0) && (input_param_2 != 0)) && (initialized_value = initialize_function_00112904(0x12,0), initialized_value != 0)) {\n    allocated_array = (long *)xmalloc(0x10);\n    *allocated_array = input_param_1;\n    allocated_array[1] = input_param_2;\n    *(long **)(initialized_value + 0x10) = allocated_array;\n    return initialized_value;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_store_params_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "validate_and_print_error_00108375",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "input",
                "uVar2": "errorMessage",
                "unaff_EBX": "ebxValue"
            },
            "code": "\nuint validate_and_print_error_00108375(undefined8 param1,undefined8 *param2,undefined8 param3)\n\n{\n  undefined8 input;\n  undefined8 errorMessage;\n  uint ebxValue;\n  \n  if (*(int *)(param2[1] + 8) != 2) {\n    input = *param2;\n    ebxValue = ebxValue & 0xf7ffffff;\n    errorMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(errorMessage,input,param3);\n  }\n  return ebxValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "update_and_initialize_data_structure_00109e76",
                "param_1": "dataStructurePtr",
                "param_2": "value",
                "lVar1": "previousValue",
                "local_5a": "formattedString"
            },
            "code": "\nvoid updateAndInitializeDataStructure_00109e76(long dataStructurePtr,uint value)\n\n{\n  long previousValue;\n  char formattedString [58];\n  \n  previousValue = *(long *)(dataStructurePtr + 0x68);\n  *(long *)(dataStructurePtr + 0x68) = previousValue + 1;\n  sprintf(formattedString,\"%ld=r%ld;%u;0;\",previousValue,previousValue,(ulong)value);\n  initialize_data_structure_00109b52(dataStructurePtr,formattedString,previousValue,1,value * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "update_and_initialize_data_structure_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_and_return_index_001088ae",
                "param_1": "newValue1",
                "param_2": "newValue2",
                "param_3": "newValue3",
                "param_4": "newValue4",
                "iVar1": "index",
                "lVar2": "dataIndex",
                "lVar3": "addressOffset",
                "uVar4": "newString"
            },
            "code": "\nulong updateDataAndReturnIndex_001088ae(undefined4 newValue1,undefined4 newValue2,undefined8 newValue3,undefined8 newValue4)\n\n{\n  int index;\n  long dataIndex;\n  long addressOffset;\n  undefined8 newString;\n  \n  dataIndex = (long)DAT_001278c0;\n  addressOffset = dataIndex * 0x18;\n  free((void *)(&DAT_00127750)[dataIndex * 3]);\n  *(undefined4 *)(&DAT_00127740 + addressOffset) = newValue1;\n  *(undefined4 *)(&DAT_00127744 + addressOffset) = newValue2;\n  *(undefined8 *)(&DAT_00127748 + addressOffset) = newValue3;\n  newString = xstrdup(newValue4);\n  (&DAT_00127750)[dataIndex * 3] = newString;\n  index = DAT_001278c0 + 1;\n  DAT_001278c0 = index % 0x10;\n  return (long)index / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_and_return_index_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "search_and_retrieve_data_0010afd5",
                "param_1": "dataStructPtr",
                "param_2": "baseAddress",
                "param_3": "stringPtr",
                "param_4": "strLength",
                "param_5": "param5",
                "param_6": "param6",
                "__s2": "searchString",
                "puVar2": "currentStructPtr",
                "uVar3": "var3",
                "lVar4": "var4",
                "puVar5": "currentNodePtr",
                "puVar6": "ptrVar6",
                "bVar7": "flag",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16]\nsearchAndRetrieveData_0010afd5(undefined8 *dataStructPtr,long baseAddress,undefined8 stringPtr,undefined4 strLength,\n            undefined4 param5,undefined8 param6)\n\n{\n  int iVar1;\n  char *searchString;\n  undefined8 *currentStructPtr;\n  undefined8 var3;\n  long var4;\n  undefined8 *currentNodePtr;\n  undefined4 *ptrVar6;\n  byte flag;\n  undefined returnValue [16];\n  \n  flag = 0;\n  searchString = (char *)copy_and_terminate_string_00109a0b(stringPtr,strLength);\n  for (dataStructPtr = (undefined8 *)*dataStructPtr; dataStructPtr != (undefined8 *)0x0;\n      dataStructPtr = (undefined8 *)*dataStructPtr) {\n    for (currentStructPtr = (undefined8 *)dataStructPtr[1]; currentStructPtr != (undefined8 *)0x0;\n        currentStructPtr = (undefined8 *)*currentStructPtr) {\n      if ((undefined8 *)currentStructPtr[2] != (undefined8 *)0x0) {\n        for (currentNodePtr = *(undefined8 **)(undefined8 *)currentStructPtr[2]; currentNodePtr != (undefined8 *)0x0;\n            currentNodePtr = (undefined8 *)*currentNodePtr) {\n          if ((*(int *)((long)currentNodePtr + 0x14) == 1) && (*(char *)currentNodePtr[1] == *searchString)) {\n            iVar1 = strcmp((char *)currentNodePtr[1],searchString);\n            if (iVar1 == 0) {\n              var4 = currentNodePtr[4];\n              if (var4 == 0) goto LAB_0010b05b;\n              free(searchString);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  currentStructPtr = *(undefined8 **)(baseAddress + 0x1a0);\n  do {\n    if (currentStructPtr == (undefined8 *)0x0) {\n      currentStructPtr = (undefined8 *)xmalloc(0x28);\n      var3 = *(undefined8 *)(baseAddress + 0x1a0);\n      ptrVar6 = (undefined4 *)((long)currentStructPtr + 0x14);\n      for (var4 = 5; var4 != 0; var4 = var4 + -1) {\n        *ptrVar6 = 0;\n        ptrVar6 = ptrVar6 + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(currentStructPtr + 2) = param5;\n      *currentStructPtr = var3;\n      currentStructPtr[1] = searchString;\n      var3 = initialize_and_store_data_00113e23(currentStructPtr + 3,searchString);\n      *(undefined8 **)(baseAddress + 0x1a0) = currentStructPtr;\n      currentStructPtr[4] = var3;\nLAB_0010b0e7:\n      var4 = currentStructPtr[4];\nLAB_0010b0eb:\n      returnValue._8_8_ = param6;\n      returnValue._0_8_ = var4;\n      return returnValue;\n    }\n    if (*(char *)currentStructPtr[1] == *searchString) {\n      iVar1 = strcmp((char *)currentStructPtr[1],searchString);\n      if (iVar1 == 0) {\n        if (*(int *)(currentStructPtr + 2) == 0) {\n          *(undefined4 *)(currentStructPtr + 2) = param5;\n        }\n        free(searchString);\n        goto LAB_0010b0e7;\n      }\n    }\n    currentStructPtr = (undefined8 *)*currentStructPtr;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109a0b",
                "strcmp",
                "FUN_00113e23",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "search_and_retrieve_data_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = parse_stab_data_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)initialize_and_allocate_data_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = get_file_data_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)initialize_and_store_params_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)initialize_function_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)get_file_data_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)get_file_data_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)initialize_and_allocate_memory_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              print_bad_stab_message_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)find_circular_debug_info_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)initialize_and_allocate_memory_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_and_return_pointer_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)initialize_or_get_value_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = parse_numeric_value_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = parse_numeric_value_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)initialize_function_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)initialize_function_with_param_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)initialize_function_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_new_function_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = parse_stab_data_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = find_named_type_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = update_data_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        print_bad_stab_message_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = parse_numeric_value_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = parse_numeric_value_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)initialize_and_allocate_memory_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      parse_numeric_value_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      parse_numeric_value_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = parse_numeric_value_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)update_data_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)initialize_function_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            print_bad_stab_message_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)copy_and_terminate_string_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = parse_numeric_value_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          print_bad_stab_message_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)create_entry_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_function_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)initialize_ptr_with_param_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = parse_numeric_value_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = parse_numeric_value_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)update_data_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)update_data_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)initialize_function_with_param_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                print_bad_stab_message_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = initialize_and_allocate_data_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                print_warning_00108fe8(pbVar27,uVar15);\n                lVar38 = update_data_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)initialize_function_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)update_data_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)initialize_function_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)update_data_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)update_data_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)update_data_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)update_data_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)update_data_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          print_warning_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = string_comparison_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = string_comparison_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = string_comparison_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)update_data_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)update_data_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = parse_numeric_value_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = parse_numeric_value_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            print_bad_stab_message_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  print_warning_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                print_warning_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = parse_numeric_value_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)get_return_value_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        print_warning_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        print_warning_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = parse_numeric_value_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                print_bad_stab_message_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              print_bad_stab_message_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)copy_and_terminate_string_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  print_bad_stab_message_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  print_warning_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = parse_numeric_value_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = parse_numeric_value_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              print_bad_stab_message_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)copy_and_terminate_string_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)copy_and_terminate_string_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)copy_and_terminate_string_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)find_circular_debug_info_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)find_circular_debug_info_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)copy_and_terminate_string_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              print_warning_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = initialize_and_allocate_data_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)find_circular_debug_info_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = parse_arglist_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    print_error_message_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          print_error_message_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = parse_and_retrieve_data_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = expand_and_store_data_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                print_error_message_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = parse_and_check_string_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = parse_number_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = expand_and_store_data_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  print_error_message_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = process_data_loop_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = process_data_loop_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = process_data_loop_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = process_data_loop_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)initialize_and_allocate_memory_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = parse_arguments_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      print_error_message_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      print_error_message_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = parse_arguments_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = string_comparison_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = string_comparison_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)initialize_and_allocate_memory_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                print_warning_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = parse_numeric_value_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = parse_stab_data_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  print_bad_stab_message_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)initialize_byte_array_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)initialize_function_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          print_warning_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        print_bad_stab_message_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)search_and_retrieve_data_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)get_file_data_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  print_bad_stab_message_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "cplus_demangle_init_info",
                "dcgettext",
                "malloc",
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0010b6ea",
                "FUN_00113fb0",
                "xrealloc",
                "strchr",
                "FUN_00112904",
                "cplus_demangle_mangled_name",
                "FUN_00113da9",
                "FUN_0010afd5",
                "strcat",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_00112b6e",
                "xmalloc",
                "FUN_00113b98",
                "strspn",
                "strncmp",
                "FUN_00113cb9",
                "sprintf",
                "strlen",
                "FUN_00113bfa",
                "strcpy",
                "strcmp",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00109ab1",
                "FUN_00108fb9",
                "fprintf",
                "FUN_00109be3",
                "FUN_00113d6e",
                "FUN_00108e76",
                "free",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00108fe8",
                "FUN_00113c43",
                "FUN_00113e5e",
                "FUN_0010d559",
                "FUN_0010d882",
                "FUN_0010914e",
                "FUN_00113dfe",
                "strstr",
                "FUN_00113d3a",
                "strtol",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "concat",
                "FUN_0010d21c"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00104966",
                "FUN_0010543c",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stab_entries_00108b3e",
                "__format": "format_string",
                "lVar1": "stab_name",
                "lVar2": "index",
                "lVar3": "stab_offset",
                "piVar4": "stab_ptr",
                "iVar5": "iteration_count"
            },
            "code": "\n\n\nundefined8 printLastStabEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *format_string;\n  long stab_name;\n  long index;\n  long stab_offset;\n  int *stab_ptr;\n  int iteration_count;\n  \n  format_string = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,format_string);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  iteration_count = DAT_001278c0;\n  do {\n    index = (long)iteration_count;\n    stab_offset = index * 0x18;\n    stab_ptr = (int *)(&DAT_00127740 + stab_offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stab_name = bfd_get_stab_name(*stab_ptr);\n      if (stab_name == 0) {\n        if (*stab_ptr == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stab_name);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + stab_offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + stab_offset));\n      if (*stab_ptr != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    iteration_count = (iteration_count + 1) % 0x10;\n  } while (DAT_001278c0 != iteration_count);\n  return param_3;\n}\n\n",
            "called": [
                "fwrite",
                "fprintf",
                "bfd_get_stab_name",
                "dcgettext",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stab_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "process_data_and_update_0010a083",
                "param_1": "data",
                "process_data_00109ed3": "process_data"
            },
            "code": "\nvoid process_data_and_update_0010a083(long data)\n\n{\n  process_data(data,0x2a,4,data + 0x178,data + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_and_update_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_array_00109c2e",
                "param_1": "arrayPointer",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "result",
                "param_6": "param6",
                "lVar1": "reallocResult",
                "plVar2": "elementPointer",
                "lVar3": "remainingSize",
                "puVar4": "currentPointer",
                "uVar5": "currentSize",
                "bVar6": "isZero",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeArray_00109c2e(long arrayPointer,long value,ulong size,int flag,undefined4 *result,\n            undefined8 param6)\n\n{\n  long reallocResult;\n  long *elementPointer;\n  long remainingSize;\n  undefined *currentPointer;\n  ulong currentSize;\n  byte isZero;\n  undefined returnValue [16];\n  \n  isZero = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(arrayPointer + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    reallocResult = xrealloc(*(undefined8 *)(arrayPointer + 0x1a8),currentSize * 0x18);\n    *(long *)(arrayPointer + 0x1a8) = reallocResult;\n    currentPointer = (undefined *)(*(long *)(arrayPointer + 0x1b0) * 0x18 + reallocResult);\n    for (remainingSize = (currentSize - *(long *)(arrayPointer + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *currentPointer = 0;\n      currentPointer = currentPointer + (ulong)isZero * -2 + 1;\n    }\n    *(ulong *)(arrayPointer + 0x1b0) = currentSize;\n  }\n  elementPointer = (long *)(size * 0x18 + *(long *)(arrayPointer + 0x1a8));\n  if (*elementPointer == 0) {\n    reallocResult = *(long *)(arrayPointer + 0x68);\n    *elementPointer = reallocResult;\n    *(long *)(arrayPointer + 0x68) = reallocResult + 1;\n    elementPointer[1] = value;\n    *(int *)(elementPointer + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(elementPointer + 2) = 0;\n    *(undefined4 *)((long)elementPointer + 0x14) = *result;\n  }\n  else {\n    *result = *(undefined4 *)((long)elementPointer + 0x14);\n  }\n  returnValue._8_8_ = param6;\n  returnValue._0_8_ = *elementPointer;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_error_on_bad_format_001053b5",
                "uVar1": "translatedErrorMessage"
            },
            "code": "\nvoid print_error_on_bad_format_001053b5(void)\n\n{\n  undefined8 translatedErrorMessage;\n  \n  translatedErrorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(translatedErrorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_error_on_bad_format_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "initialize_memory_00112996",
                "param_1": "input_address",
                "uVar1": "result",
                "lVar2": "memory_address",
                "dcgettext": "get_error_message"
            },
            "code": "\n\n\nundefined8 initialize_memory_00112996(long input_address,undefined8 param_2,undefined8 param_3)\n\n{\n  undefined8 result;\n  long memory_address;\n  \n  if ((*(long *)(input_address + 8) != 0) && (*(long *)(input_address + 0x10) != 0)) {\n    memory_address = *(long *)(input_address + 0x10) + 0x10;\n    if (*(long *)(input_address + 0x20) != 0) {\n      memory_address = *(long *)(input_address + 0x20) + 0x28;\n    }\n    result = initialize_memory_00112996_00112925(memory_address,param_2,param_3,3);\n    return result;\n  }\n  result = dcgettext(0,\"debug_add_to_current_namespace: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",result);\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "debug_set_class_id_0010c7a0",
                "param_1": "class_data",
                "param_2": "class_name",
                "param_3": "type",
                "uVar1": "result",
                "uVar2": "num_elements",
                "lVar3": "class_info",
                "piVar4": "type_ptr",
                "__s1": "saved_class_name",
                "cVar5": "is_equal",
                "iVar6": "count",
                "puVar7": "node",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] debug_set_class_id_0010c7a0(long class_data,char *class_name,int *type,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint num_elements;\n  long class_info;\n  int *type_ptr;\n  char *saved_class_name;\n  char is_equal;\n  int count;\n  undefined8 *node;\n  undefined return_value [16];\n  \n  if (3 < *type - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id_0010c7a0\");\n  }\n  class_info = *(long *)(type + 4);\n  node = (undefined8 *)(ulong)*(uint *)(class_info + 0xc);\n  if (*(uint *)(class_info + 0xc) <= *(uint *)(class_data + 0x38)) {\n    for (node = *(undefined8 **)(class_data + 0x50); node != (undefined8 *)0x0;\n        node = (undefined8 *)*node) {\n      type_ptr = (int *)node[1];\n      if (*type_ptr == *type) {\n        saved_class_name = (char *)node[2];\n        if (class_name == (char *)0x0) {\n          if (saved_class_name == (char *)0x0) {\nLAB_0010c82c:\n            is_equal = check_equality_0010922b(class_data,type_ptr,type);\n            if (is_equal != '\\0') {\n              num_elements = *(uint *)(*(long *)(node[1] + 0x10) + 0xc);\n              node = (undefined8 *)(ulong)num_elements;\n              *(uint *)(class_info + 0xc) = num_elements;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((saved_class_name != (char *)0x0) && (*saved_class_name == *class_name)) &&\n                (count = strcmp(saved_class_name,class_name), count == 0)) goto LAB_0010c82c;\n      }\n    }\n    count = *(int *)(class_data + 0x34) + 1;\n    *(int *)(class_data + 0x34) = count;\n    *(int *)(class_info + 0xc) = count;\n    node = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(class_data + 0x50);\n    node[2] = class_name;\n    *(undefined8 **)(class_data + 0x50) = node;\n    *node = result;\n    node[1] = type;\n  }\nLAB_0010c884:\n  return_value._1_7_ = (undefined7)((ulong)node >> 8);\n  return_value[0] = 1;\n  return_value._8_8_ = param_4;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strcmp",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "debug_set_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_2": "arr1",
                "param_3": "arr2",
                "uVar1": "size1",
                "uVar2": "size2",
                "pplVar3": "arr2_ptr",
                "ppcVar4": "str_arr1",
                "ppcVar5": "str_arr2",
                "lVar6": "l1",
                "lVar7": "l2",
                "lVar8": "l3",
                "pcVar9": "str1",
                "pcVar10": "str2",
                "cVar11": "result",
                "bVar12": "isEqual",
                "iVar13": "comparison",
                "uVar14": "debugInfo1",
                "uVar15": "debugInfo2",
                "puVar16": "debugArr1",
                "puVar17": "debugArr2",
                "plVar18": "arr1_ptr",
                "lVar19": "i",
                "plVar20": "debugArr1_ptr",
                "plVar21": "debugArr2_ptr",
                "lVar22": "offset",
                "local_70": "temp_arr1",
                "local_58": "debug_info_ptr_arr",
                "plStack_50": "temp_ptr1",
                "local_48": "temp_ptr2"
            },
            "code": "\nbyte checkEquality_0010922b(long param_1,long *arr1,long *arr2)\n\n{\n  uint size1;\n  uint size2;\n  long **arr2_ptr;\n  char **str_arr1;\n  char **str_arr2;\n  long l1;\n  long l2;\n  long l3;\n  char *str1;\n  char *str2;\n  char result;\n  byte isEqual;\n  int comparison;\n  undefined8 debugInfo1;\n  undefined8 debugInfo2;\n  undefined8 *debugArr1;\n  undefined8 *debugArr2;\n  long *arr1_ptr;\n  long i;\n  long *debugArr1_ptr;\n  long *debugArr2_ptr;\n  long offset;\n  long *temp_arr1;\n  undefined8 *debug_info_ptr_arr;\n  long *temp_ptr1;\n  long *temp_ptr2;\n  \n  arr1_ptr = arr2;\n  if (arr1 == (long *)0x0) {\nLAB_00109241:\n    return arr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (arr1_ptr == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    size1 = *(uint *)arr1;\n    if (size1 == 1) goto code_r0x00109263;\n    while (size2 = *(uint *)arr2, size2 == 1) {\n      arr2 = **(long ***)arr2[2];\n      if (arr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (arr1 == arr2) {\n      return true;\n    }\n    if (size1 != 0x16) break;\n    if (size2 != 0x17) goto LAB_001092cb;\n    arr1 = *(long **)(arr1[2] + 8);\n    if (arr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((size1 == 0x17) && (size2 == 0x16)) {\n    arr2 = *(long **)(arr2[2] + 8);\n    arr1_ptr = arr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*arr1 != *arr2) {\n    return false;\n  }\n  if (size1 == 3) {\n    return *(char *)(arr1 + 2) == *(char *)(arr2 + 2);\n  }\n  if (size1 < 4) {\n    if (size1 == 2) {\n      return true;\n    }\n  }\n  else if (size1 - 4 < 3) {\n    return true;\n  }\n  debug_info_ptr_arr = *(undefined8 **)(param_1 + 0x58);\n  for (debugArr2 = debug_info_ptr_arr; debugArr2 != (undefined8 *)0x0; debugArr2 = (undefined8 *)*debugArr2) {\n    if (((long *)debugArr2[1] == arr1) && ((long *)debugArr2[2] == arr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param_1 + 0x58) = &debug_info_ptr_arr;\n  temp_ptr1 = arr1;\n  temp_ptr2 = arr2;\n  switch(size1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    arr1_ptr = (long *)arr1[2];\n    arr2_ptr = (long **)arr2[2];\n    if (arr1_ptr == (long *)0x0) {\n      isEqual = arr2_ptr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (arr2_ptr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param_1 + 0x38) < *(uint *)((long)arr1_ptr + 0xc)) &&\n       (*(uint *)((long)arr1_ptr + 0xc) == *(uint *)((long)arr2_ptr + 0xc))) goto LAB_001097af;\n    debugArr2 = (undefined8 *)*arr1_ptr;\n    temp_arr1 = *arr2_ptr;\n    if (((debugArr2 == (undefined8 *)0x0) == (temp_arr1 == (long *)0x0)) &&\n       ((((arr1_ptr[2] == 0) == (arr2_ptr[2] == (long *)0x0) &&\n         ((arr1_ptr[3] == 0) == (arr2_ptr[3] == (long *)0x0))) &&\n        ((arr1_ptr[4] == 0) == (arr2_ptr[4] == (long *)0x0))))) {\n      if (debugArr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((arr1_ptr[4] != 0) &&\n           (result = checkEquality_0010922b(param_1,arr1_ptr[4],arr2_ptr[4]), result == '\\0'))\n        goto LAB_00109382;\n        debugArr2_ptr = (long *)arr1_ptr[2];\n        if (debugArr2_ptr == (long *)0x0) {\nLAB_00109540:\n          debugArr2 = (undefined8 *)arr1_ptr[3];\n          if (debugArr2 == (undefined8 *)0x0) goto LAB_001097af;\n          arr1_ptr = arr2_ptr[3];\n          while( true ) {\n            str_arr2 = (char **)*debugArr2;\n            if (str_arr2 == (char **)0x0) {\n              isEqual = *arr1_ptr == 0;\n              goto LAB_001099c4;\n            }\n            str_arr1 = (char **)*arr1_ptr;\n            if (str_arr1 == (char **)0x0) break;\n            if ((**str_arr2 != **str_arr1) || (comparison = strcmp(*str_arr2,*str_arr1), comparison != 0))\n            break;\n            str1 = str_arr2[1];\n            str2 = str_arr1[1];\n            if ((str1 == (char *)0x0) != (str2 == (char *)0x0)) break;\n            if (str1 != (char *)0x0) {\n              offset = 0;\n              while( true ) {\n                str_arr2 = *(char ***)(str1 + offset);\n                str_arr1 = *(char ***)(str2 + offset);\n                if (str_arr2 == (char **)0x0) break;\n                if (str_arr1 == (char **)0x0) goto LAB_00109382;\n                if ((((**str_arr2 != **str_arr1) ||\n                     ((((ulong)str_arr2[2] ^ (ulong)str_arr1[2]) & 0xffffffffffff) != 0)) ||\n                    ((str_arr2[3] != str_arr1[3] ||\n                     ((((str_arr2[4] == (char *)0x0) != (str_arr1[4] == (char *)0x0) ||\n                       (comparison = strcmp(*str_arr2,*str_arr1), comparison != 0)) ||\n                      (result = checkEquality_0010922b(param_1,str_arr2[1],str_arr1[1]), result == '\\0')))))) ||\n                   ((str_arr2[4] != (char *)0x0 &&\n                    (result = checkEquality_0010922b(param_1,str_arr2[4],str_arr1[4]), result == '\\0'))))\n                goto LAB_00109382;\n                offset = offset + 8;\n              }\n              if (str_arr1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            debugArr2 = debugArr2 + 1;\n            arr1_ptr = arr1_ptr + 1;\n          }\n        }\n        else {\n          debugArr1_ptr = arr2_ptr[2];\n          for (; debugArr2 = (undefined8 *)*debugArr2_ptr, debugArr2 != (undefined8 *)0x0;\n              debugArr2_ptr = debugArr2_ptr + 1) {\n            debugArr1 = (undefined8 *)*debugArr1_ptr;\n            if ((((debugArr1 == (undefined8 *)0x0) ||\n                 (((debugArr2[1] ^ debugArr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(debugArr2 + 2) != *(int *)(debugArr1 + 2))) ||\n               (result = checkEquality_0010922b(param_1,*debugArr2,*debugArr1), result == '\\0'))\n            goto LAB_00109382;\n            debugArr1_ptr = debugArr1_ptr + 1;\n          }\n          if (*debugArr1_ptr == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; str_arr2 = (char **)*debugArr2, str_arr2 != (char **)0x0; debugArr2 = debugArr2 + 1) {\n          str_arr1 = (char **)*temp_arr1;\n          if (str_arr1 == (char **)0x0) goto LAB_00109382;\n          str1 = *str_arr1;\n          str2 = *str_arr2;\n          if ((*str2 != *str1) ||\n             ((((ulong)str_arr2[2] ^ (ulong)str_arr1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)str_arr2 + 0x14) == '\\0') {\n            if (str_arr2[3] == str_arr1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          comparison = strcmp(str_arr2[3],str_arr1[3]);\n          if (comparison != 0) goto LAB_00109382;\nLAB_00109480:\n          comparison = strcmp(str2,str1);\n          if (((comparison != 0) || (str_arr2[1] == (char *)0x0)) || (str_arr1[1] == (char *)0x0))\n          goto LAB_00109382;\n          debugInfo1 = find_circular_debug_info_00112b6e(str_arr1[1],0);\n          debugInfo2 = find_circular_debug_info_00112b6e(str_arr2[1],0);\n          result = checkEquality_0010922b(param_1,debugInfo2,debugInfo1);\n          if (result == '\\0') goto LAB_00109382;\n          temp_arr1 = temp_arr1 + 1;\n        }\n        if (*temp_arr1 == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    arr1_ptr = (long *)arr1[2];\n    debugArr2_ptr = (long *)arr2[2];\n    if (arr1_ptr == (long *)0x0) {\n      isEqual = debugArr2_ptr == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (debugArr2_ptr == (long *)0x0) goto LAB_00109382;\n    offset = *arr1_ptr;\n    l1 = *debugArr2_ptr;\n    i = 0;\n    l2 = arr1_ptr[1];\n    l3 = debugArr2_ptr[1];\n    do {\n      str1 = *(char **)(offset + i);\n      if (str1 == (char *)0x0) {\n        isEqual = *(long *)(l1 + i) == 0;\n        goto LAB_001099c1;\n      }\n      str2 = *(char **)(l1 + i);\n      if (((str2 == (char *)0x0) || (*str1 != *str2)) ||\n         (*(long *)(l2 + i) != *(long *)(l3 + i))) break;\n      comparison = strcmp(str1,str2);\n      i = i + 8;\n    } while (comparison == 0);\nLAB_00109964:\n    isEqual = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    isEqual = checkEquality_0010922b(param_1,arr1[2],arr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)arr1[2] + 2) == *(char *)((undefined8 *)arr2[2] + 2)) &&\n       (result = checkEquality_0010922b(param_1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]),\n       result != '\\0')) {\n      arr1_ptr = *(long **)(arr1[2] + 8);\n      debugArr2_ptr = *(long **)(arr2[2] + 8);\n      if ((arr1_ptr == (long *)0x0) == (debugArr2_ptr == (long *)0x0)) {\n        if (arr1_ptr == (long *)0x0) goto LAB_001097af;\n        while (((*arr1_ptr != 0 && (*debugArr2_ptr != 0)) &&\n               (result = checkEquality_0010922b(param_1), result != '\\0'))) {\n          arr1_ptr = arr1_ptr + 1;\n          debugArr2_ptr = debugArr2_ptr + 1;\n        }\nLAB_0010995d:\n        if (*arr1_ptr != 0) goto LAB_00109964;\n        isEqual = *debugArr2_ptr == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    debugArr2 = (undefined8 *)arr2[2];\n    debugArr1 = (undefined8 *)arr1[2];\n    isEqual = 0;\n    if ((debugArr1[1] == debugArr2[1]) && (debugArr1[2] == debugArr2[2])) {\nLAB_00109862:\n      isEqual = checkEquality_0010922b(param_1,*debugArr1,*debugArr2);\n    }\n    break;\n  case 0x10:\n    debugArr2 = (undefined8 *)arr2[2];\n    debugArr1 = (undefined8 *)arr1[2];\n    isEqual = 0;\n    if (((debugArr1[2] == debugArr2[2]) && (debugArr1[3] == debugArr2[3])) &&\n       (*(char *)(debugArr1 + 4) == *(char *)(debugArr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    debugArr2 = (undefined8 *)arr2[2];\n    debugArr1 = (undefined8 *)arr1[2];\n    isEqual = 0;\n    if (*(char *)(debugArr1 + 1) == *(char *)(debugArr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    result = checkEquality_0010922b(param_1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]);\n    isEqual = 0;\n    if (result != '\\0') {\n      isEqual = checkEquality_0010922b(param_1,*(undefined8 *)(arr1[2] + 8),*(undefined8 *)(arr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)arr1[2] + 3) == *(char *)((undefined8 *)arr2[2] + 3)) &&\n        (result = checkEquality_0010922b(param_1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]),\n        result != '\\0')) &&\n       (result = checkEquality_0010922b(param_1,*(undefined8 *)(arr1[2] + 8),\n                              *(undefined8 *)(arr2[2] + 8)), result != '\\0')) {\n      arr1_ptr = *(long **)(arr1[2] + 0x10);\n      debugArr2_ptr = *(long **)(arr2[2] + 0x10);\n      if ((arr1_ptr == (long *)0x0) == (debugArr2_ptr == (long *)0x0)) {\n        if (arr1_ptr != (long *)0x0) {\n          while (((*arr1_ptr != 0 && (*debugArr2_ptr != 0)) &&\n                 (result = checkEquality_0010922b(param_1), result != '\\0'))) {\n            arr1_ptr = arr1_ptr + 1;\n            debugArr2_ptr = debugArr2_ptr + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        isEqual = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    isEqual = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    arr1_ptr = (long *)arr2[2];\n    debugArr2_ptr = (long *)arr1[2];\n    comparison = strcmp(*(char **)(*debugArr2_ptr + 8),*(char **)(*arr1_ptr + 8));\n    isEqual = 0;\n    if (comparison == 0) {\n      isEqual = checkEquality_0010922b(param_1,debugArr2_ptr[1],arr1_ptr[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  isEqual = isEqual & 1;\nLAB_001099c4:\n  *(undefined8 **)(param_1 + 0x58) = debug_info_ptr_arr;\n  return isEqual;\ncode_r0x00109263:\n  arr1 = **(long ***)arr1[2];\n  arr1_ptr = arr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "abort",
                "strcmp",
                "FUN_00112b6e",
                "FUN_0010922b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "extract_and_copy_archive_files_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "cVar1": "charVar1",
                "iVar2": "intVar2",
                "iVar3": "intVar3",
                "ppcVar4": "pointerPointerCharVar4",
                "lVar5": "longVar5",
                "__format": "formatStr",
                "puVar7": "pointerUVar7",
                "piVar8": "pointerIntVar8",
                "in_RAX": "inRAX",
                "ppcVar11": "pointerPointerCharVar11",
                "lVar12": "longVar12",
                "pvVar13": "ptrVar13",
                "pcVar14": "ptrFunVar14",
                "lVar15": "longVar15",
                "psVar17": "ptrStatVar17",
                "unaff_R14": "unaffVar14",
                "unaff_R15": "unaffVar15",
                "bVar18": "byteVar18",
                "unaff_retaddr": "unaffRetaddr",
                "in_stack_00000008": "inStackPtr8",
                "in_stack_00000010": "inStackPtr10",
                "in_stack_00000018": "inStackVar18",
                "in_stack_00000020": "inStackPtr20",
                "in_stack_00000028": "inStackVar28",
                "in_stack_00000030": "inStackVar30",
                "in_stack_000000f8": "inStackVarF8",
                "in_stack_00000110": "inStackVar110"
            },
            "code": "\nvoid extractAndCopyArchiveFiles_001052a2(undefined8 param1,undefined8 param2,char *param3)\n\n{\n  char charVar1;\n  int intVar2;\n  int intVar3;\n  char **pointerPointerCharVar4;\n  long longVar5;\n  undefined8 uVar6;\n  char *formatStr;\n  undefined8 *pointerUVar7;\n  int *pointerIntVar8;\n  undefined8 uVar9;\n  long inRAX;\n  char *pcharVar10;\n  char **pointerPointerCharVar11;\n  long longVar12;\n  void *ptrVar13;\n  code *ptrFunVar14;\n  long longVar15;\n  char *pcharVar16;\n  stat *ptrStatVar17;\n  undefined8 *unaffVar14;\n  char **unaffVar15;\n  byte byteVar18;\n  undefined8 unaffRetaddr;\n  undefined8 *inStackPtr8;\n  long *inStackPtr10;\n  char *inStackVar18;\n  undefined8 *inStackPtr20;\n  undefined8 inStackVar28;\n  undefined8 inStackVar30;\n  uint inStackVarF8;\n  long inStackVar110;\n  \n  byteVar18 = 0;\n  pcharVar10 = (char *)(inRAX + 1);\n  do {\n    if (*pcharVar10 == '/') {\n      extractAndCopyArchiveFiles_001052a2();\n      return;\n    }\n    while (*pcharVar10 == '\\0') {\n      pcharVar10 = (char *)concat(inStackVar18,&DAT_0011b47d);\n      intVar3 = stat(pcharVar10,(stat *)&stack0x00000050);\n      pointerUVar7 = unaffVar14;\n      if (-1 < intVar3) {\n        longVar12 = create_temp_directory_0011a0e0(pcharVar10);\n        free(pcharVar10);\n        if (longVar12 == 0) {\n          pointerIntVar8 = __errno_location();\n          pcharVar10 = strerror(*pointerIntVar8);\n          uVar9 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar9,pcharVar10);\n          goto LAB_00104e93;\n        }\n        pointerUVar7 = (undefined8 *)xmalloc(0x18);\n        pcharVar10 = *unaffVar15;\n        *pointerUVar7 = unaffVar14;\n        pointerUVar7[2] = 0;\n        pointerUVar7[1] = longVar12;\n        pcharVar10 = (char *)concat(longVar12,&DAT_0011b47d,pcharVar10);\n      }\n      intVar3 = 0;\n      if (DAT_001279eb != '\\0') {\n        ptrStatVar17 = (stat *)&stack0x00000050;\n        for (longVar12 = 0x24; longVar12 != 0; longVar12 = longVar12 + -1) {\n          *(undefined4 *)&ptrStatVar17->st_dev = 0;\n          ptrStatVar17 = (stat *)((long)ptrStatVar17 + (ulong)byteVar18 * -8 + 4);\n        }\n        pointerPointerCharVar11 = (char **)unaffVar15[0x1d];\n        if ((char **)unaffVar15[0x1d] == (char **)0x0) {\n          pointerPointerCharVar11 = unaffVar15;\n        }\n        intVar3 = (**(code **)(pointerPointerCharVar11[1] + 0x1e8))(unaffVar15,(stat *)&stack0x00000050);\n        if (intVar3 != 0) {\n          pcharVar16 = *unaffVar15;\n          uVar9 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar9,pcharVar16);\n        }\n      }\n      unaffVar14 = (undefined8 *)xmalloc(0x18);\n      unaffVar14[1] = pcharVar10;\n      *unaffVar14 = pointerUVar7;\n      unaffVar14[2] = 0;\n      charVar1 = bfd_check_format(unaffVar15,1);\n      if (charVar1 == '\\0') {\n        uVar9 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        print_error_info_001126c0(0,unaffVar15,0,uVar9);\n        pointerPointerCharVar11 = (char **)bfd_openw(pcharVar10,inStackVar28);\n        if (pointerPointerCharVar11 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        pointerPointerCharVar4 = (char **)unaffVar15[0x1d];\n        if ((char **)unaffVar15[0x1d] == (char **)0x0) {\n          pointerPointerCharVar4 = unaffVar15;\n        }\n        intVar2 = (**(code **)(pointerPointerCharVar4[1] + 0x1e8))(unaffVar15,&stack0x000000e0);\n        longVar12 = inStackVar110;\n        if (intVar2 == 0) {\n          if (inStackVar110 < 0) {\n            uVar9 = build_filename_001125fa(unaffVar15);\n            uVar6 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            print_error_message_00119ed0(uVar6,uVar9);\n          }\n          else {\n            intVar2 = bfd_seek(unaffVar15,0,0);\n            if (intVar2 == 0) {\n              if (DAT_001279e9 != '\\0') {\n                pcharVar16 = *pointerPointerCharVar11;\n                uVar9 = build_filename_001125fa(unaffVar15);\n                formatStr = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(formatStr,uVar9,pcharVar16);\n              }\n              ptrVar13 = (void *)xmalloc(0x2000);\n              for (; longVar12 != 0; longVar12 = longVar12 - longVar15) {\n                longVar15 = 0x2000;\n                if (longVar12 < 0x2001) {\n                  longVar15 = longVar12;\n                }\n                longVar5 = bfd_bread(ptrVar13,longVar15,unaffVar15);\n                pointerPointerCharVar4 = unaffVar15;\n                if ((longVar15 != longVar5) ||\n                   (longVar5 = bfd_bwrite(ptrVar13,longVar15,pointerPointerCharVar11), pointerPointerCharVar4 = pointerPointerCharVar11, longVar15 != longVar5\n                   )) {\n                  print_error_info_001126c0(0,pointerPointerCharVar4,0,0);\n                  free(ptrVar13);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*pointerPointerCharVar11,inStackVarF8 | 0x100);\n              free(ptrVar13);\n              charVar1 = bfd_close_all_done(pointerPointerCharVar11);\n              if (charVar1 == '\\0') {\n                print_error_info_001126c0(pcharVar10,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            uVar9 = build_filename_001125fa(unaffVar15);\n            print_error_0011a110(uVar9);\n          }\n        }\n        else {\n          print_error_info_001126c0(0,unaffVar15,0,0);\n        }\nLAB_00104f00:\n        charVar1 = bfd_close_all_done(pointerPointerCharVar11);\n        if (charVar1 == '\\0') {\n          print_error_info_001126c0(pcharVar10,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(pcharVar10);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (inStackVar30._7_1_ == '\\0') {\n          pointerPointerCharVar11 = (char **)bfd_openw(pcharVar10,*(undefined8 *)unaffVar15[1]);\n        }\n        else {\n          pointerPointerCharVar11 = (char **)bfd_openw(pcharVar10,inStackVar28);\n        }\n        if (pointerPointerCharVar11 == (char **)0x0) {\nLAB_00104e80:\n          print_error_info_001126c0(pcharVar10,0,0,0);\n          goto LAB_00104e93;\n        }\n        charVar1 = FUNC_00114e50(unaffVar15,pointerPointerCharVar11,unaffRetaddr);\n        if (charVar1 == '\\0') {\n          intVar2 = bfd_get_arch(unaffVar15);\n          if (intVar2 == 0) goto LAB_00104d75;\n          charVar1 = bfd_close_all_done(pointerPointerCharVar11);\n          if (charVar1 == '\\0') {\n            print_error_info_001126c0(pcharVar10,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charVar1 = bfd_close(pointerPointerCharVar11);\n        if (charVar1 == '\\0') {\n          print_error_info_001126c0(pcharVar10,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (intVar3 == 0)) {\n          set_file_time_0011a350(pcharVar10,(stat *)&stack0x00000050);\n        }\n        longVar12 = bfd_openr(pcharVar10,inStackVar28);\n        unaffVar14[2] = longVar12;\n        *inStackPtr10 = longVar12;\n        inStackPtr10 = (long *)(longVar12 + 0xf0);\n        pointerPointerCharVar11 = (char **)bfd_openr_next_archived_file(inStackPtr20,unaffVar15);\n        bfd_close(unaffVar15);\n        unaffVar15 = pointerPointerCharVar11;\n      }\n      if ((DAT_00127a40 != 0) || (unaffVar15 == (char **)0x0)) {\n        *inStackPtr10 = 0;\n        ptrVar13 = (void *)xstrdup(*inStackPtr8);\n        if (DAT_00127a40 == 0) {\n          ptrFunVar14 = bfd_close;\n        }\n        else {\n          ptrFunVar14 = bfd_close_all_done;\n        }\n        charVar1 = (*ptrFunVar14)(inStackPtr8);\n        if (charVar1 == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_info_001126c0(ptrVar13,0,0,0);\n        }\n        free(ptrVar13);\n        ptrVar13 = (void *)xstrdup(*inStackPtr20);\n        charVar1 = bfd_close(inStackPtr20);\n        if (charVar1 == '\\0') {\n          DAT_00127a40 = 1;\n          print_error_info_001126c0(ptrVar13,0,0,0);\n        }\n        free(ptrVar13);\n        goto LAB_00114b4b;\n      }\n      pcharVar10 = *unaffVar15;\n      param3 = pcharVar10;\n      if (*pcharVar10 == '/') goto LAB_0010527d;\n    }\n    pcharVar16 = pcharVar10;\n    if ((*pcharVar10 == '.') && (pcharVar16 = pcharVar10 + 1, pcharVar10[1] == '.')) {\n      pcharVar16 = pcharVar10 + 2;\n      if ((pcharVar10[2] == '\\0') || (pcharVar10[2] == '/')) {\nLAB_0010527d:\n        uVar9 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar9,param3);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (unaffVar14 != (undefined8 *)0x0) {\n          if (unaffVar14[2] == 0) {\n            rmdir((char *)unaffVar14[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaffVar14[1]);\n          }\n          free((void *)unaffVar14[1]);\n          pointerUVar7 = (undefined8 *)*unaffVar14;\n          free(unaffVar14);\n          unaffVar14 = pointerUVar7;\n        }\n        rmdir(inStackVar18);\n        free(inStackVar18);\n        return;\n      }\n    }\n    for (; (pcharVar10 = pcharVar16, *pcharVar16 != '\\0' && (*pcharVar16 != '/')); pcharVar16 = pcharVar16 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_files_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "initialize_data_structure_0010e453",
                "param_1": "data",
                "param_2": "string",
                "param_3": "stringArray",
                "lVar1": "element",
                "cVar2": "result",
                "sVar3": "length",
                "__s": "formattedString",
                "uVar4": "returnValue",
                "lVar5": "count",
                "ppcVar6": "currentString",
                "lVar7": "offset"
            },
            "code": "\nundefined8 initializeDataStructure_0010e453(long data,char *string,char **stringArray)\n\n{\n  long element;\n  char result;\n  size_t length;\n  undefined2 *formattedString;\n  undefined8 returnValue;\n  long count;\n  char **currentString;\n  long offset;\n  \n  if (stringArray == (char **)0x0) {\n    if (string != (char *)0x0) {\n      length = strlen(string);\n      formattedString = (undefined2 *)xmalloc(length + 10);\n      sprintf((char *)formattedString,\"xe%s:\",string);\nLAB_0010e578:\n      result = initialize_data_structure_00109b52(data,formattedString,0,0,4);\n      if (result != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    count = 10;\n    currentString = stringArray;\n    if (string != (char *)0x0) {\n      length = strlen(string);\n      count = length + 10;\n    }\n    for (; *currentString != (char *)0x0; currentString = currentString + 1) {\n      length = strlen(*currentString);\n      count = count + 0x14 + length;\n    }\n    formattedString = (undefined2 *)xmalloc(count);\n    if (string == (char *)0x0) {\n      *formattedString = 0x65;\n      count = 0;\n    }\n    else {\n      count = *(long *)(data + 0x68);\n      *(long *)(data + 0x68) = count + 1;\n      sprintf((char *)formattedString,\"%s:T%ld=e\",string,count);\n    }\n    offset = 0;\n    while( true ) {\n      element = *(long *)((long)stringArray + offset);\n      length = strlen((char *)formattedString);\n      if (element == 0) break;\n      offset = offset + 8;\n      sprintf((char *)(undefined2 *)((long)formattedString + length),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)formattedString + length) = 0x3b;\n    if (string == (char *)0x0) goto LAB_0010e578;\n    result = process_string_0010e2f0(data,0x80,0,0,formattedString);\n    if ((result == '\\0') || (result = initialize_and_format_data_00109cf4(data,count,4), result == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(formattedString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "allocate_and_initialize_data_00109d5c",
                "param_1": "inputData",
                "lVar1": "arraySize",
                "uVar2": "result"
            },
            "code": "\nundefined8 allocateAndInitializeData_00109d5c(undefined8 inputData)\n\n{\n  long arraySize;\n  undefined8 result;\n  \n  arraySize = resize_array_00109c2e();\n  if (-1 < arraySize) {\n    result = initialize_and_format_data_00109cf4(inputData,arraySize,0);\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_data_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_maximum_value_0010ed2c",
                "param_1": "data_ptr",
                "param_2": "new_value",
                "param_3": "previous_value",
                "extraout_RDX": "temporary_value",
                "uVar3": "updated_value",
                "in_R10": "in_register",
                "cVar1": "result",
                "iVar2": "counter",
                "auVar4": "processed_string"
            },
            "code": "\nundefined  [16] update_maximum_value_0010ed2c(long data_ptr,ulong new_value,undefined8 previous_value)\n\n{\n  char result;\n  int counter;\n  undefined8 temporary_value;\n  ulong updated_value;\n  undefined8 in_register;\n  undefined processed_string [16];\n  \n  if (*(ulong *)(data_ptr + 0x1f0) < new_value) {\n    *(ulong *)(data_ptr + 0x1f0) = new_value;\n  }\n  if (*(long *)(data_ptr + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(data_ptr + 0x1f8) != 0) {\n      counter = *(int *)(data_ptr + 0x1f8) + -1;\n      updated_value = CONCAT71((int7)((ulong)previous_value >> 8),1);\n      *(int *)(data_ptr + 0x1f8) = counter;\n      if (counter != 0) {\n        processed_string = process_string_0010e2f0(data_ptr,0xe0,0,new_value - *(long *)(data_ptr + 0x200),0,in_register);\n        return processed_string;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    result = process_string_0010e2f0(data_ptr,0xc0,0,*(long *)(data_ptr + 0x208),0);\n    if (result != '\\0') {\n      *(undefined8 *)(data_ptr + 0x208) = 0xffffffffffffffff;\n      previous_value = temporary_value;\n      goto LAB_0010ed78;\n    }\n  }\n  updated_value = 0;\nLAB_0010edae:\n  processed_string._0_8_ = updated_value & 0xffffffff;\n  processed_string._8_8_ = in_register;\n  return processed_string;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_maximum_value_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "compare_memory_0011a1b0",
                "param_1": "pointer1",
                "param_2": "pointer2",
                "param_3": "input1",
                "param_4": "input2",
                "uVar1": "value1",
                "uVar2": "value2",
                "iVar3": "result",
                "extraout_var": "extraResult",
                "uVar4": "combinedResult",
                "auVar5": "output"
            },
            "code": "\nundefined  [16] compareMemory_0011a1b0(ulong *pointer1,ulong *pointer2,undefined8 input1,undefined8 input2)\n\n{\n  ulong value1;\n  ulong value2;\n  int result;\n  undefined4 extraResult;\n  ulong combinedResult;\n  undefined output [16];\n  \n  combinedResult = *pointer1;\n  if (*pointer2 <= *pointer1) {\n    combinedResult = *pointer2;\n  }\n  result = memcmp((void *)(pointer1[3] + 3),(void *)(pointer2[3] + 3),combinedResult - 3);\n  combinedResult = CONCAT44(extraResult,result);\n  if (result == 0) {\n    value1 = pointer1[8];\n    if (value1 < pointer2[7]) {\n      combinedResult = 0xffffffff;\n    }\n    else {\n      value2 = pointer2[8];\n      if (value2 < pointer1[7]) {\n        combinedResult = 1;\n      }\n      else {\n        combinedResult = 0xffffffff;\n        if (pointer2[7] <= pointer1[7]) {\n          if (value2 < value1) {\n            combinedResult = 1;\n          }\n          else {\n            combinedResult = 0xffffffff;\n            if (value2 <= value1) {\n              if (pointer1[2] == 0x100) {\n                combinedResult = (ulong)-(uint)(pointer2[2] != 0x100);\n              }\n              else {\n                combinedResult = (ulong)(pointer2[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output._8_8_ = input2;\n  output._0_8_ = combinedResult;\n  return output;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "compare_memory_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_build_attributes_001163d0",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "param_size",
                "param_4": "output_data",
                "uVar1": "temp_var1",
                "uVar2": "temp_var2",
                "uVar3": "temp_var3",
                "bVar4": "bool_var",
                "puVar5": "ptr_var",
                "iVar6": "int_var",
                "uVar7": "temp_var7",
                "lVar8": "long_var",
                "__ptr": "temp_ptr",
                "uVar9": "temp_var9",
                "uVar10": "temp_var10",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "__ptr_00": "temp_ptr_00",
                "uVar13": "temp_var13",
                "uVar14": "temp_var14",
                "uVar15": "temp_var15",
                "uVar16": "temp_var16",
                "puVar17": "ptr_var_17",
                "puVar18": "ptr_var_18",
                "cVar19": "char_var",
                "puVar20": "ptr_var_20",
                "iVar21": "int_var_21",
                "puVar22": "ptr_var_22",
                "puVar23": "ptr_var_23",
                "puVar25": "ptr_var_25",
                "bVar26": "byte_var",
                "local_88": "local_var_88",
                "uStack_80": "local_var_80",
                "local_70": "local_var_70",
                "local_68": "local_var_68",
                "local_60": "local_var_60"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_build_attributes_001163d0(undefined8 *first_param,undefined8 *second_param,ulong param_size,undefined *output_data)\n\n{\n  ulong temp_var1;\n  undefined8 temp_var2;\n  undefined8 temp_var3;\n  bool bool_var;\n  ulong *ptr_var;\n  int int_var;\n  undefined8 temp_var7;\n  long long_var;\n  void *temp_ptr;\n  ulong temp_var9;\n  ulong temp_var10;\n  ulong temp_var11;\n  ulong temp_var12;\n  undefined *temp_ptr_00;\n  ulong temp_var13;\n  ulong temp_var14;\n  ulong temp_var15;\n  ulong temp_var16;\n  ulong *ptr_var_17;\n  undefined *ptr_var_18;\n  char char_var;\n  undefined *ptr_var_20;\n  int int_var_21;\n  undefined *ptr_var_22;\n  ulong *ptr_var_23;\n  ulong temp_var24;\n  size_t __nmemb;\n  ulong *ptr_var_25;\n  byte byte_var;\n  ulong local_var_88;\n  ulong local_var_80;\n  ulong local_var_70;\n  ulong local_var_68;\n  ulong *local_var_60;\n  \n  byte_var = 0;\n  long_var = bfd_get_reloc_upper_bound();\n  local_var_68 = param_size;\n  if (0 < long_var) {\n    temp_ptr = (void *)xmalloc(long_var);\n    long_var = bfd_canonicalize_reloc(first_param,second_param,temp_ptr,DAT_001278d0);\n    free(temp_ptr);\n    if (long_var != 0) {\n      if (_DAT_001264c0 == 0) {\n        temp_var2 = *first_param;\n        temp_var3 = *second_param;\n        temp_var7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        print_error_message_00119ed0(temp_var7,temp_var2,temp_var3);\n      }\n      local_var_60 = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  local_var_60 = (ulong *)xcalloc(param_size / 0xc,0x48,param_size % 0xc);\n  local_var_88 = 0;\n  local_var_70 = 0;\n  temp_var16 = param_size;\n  temp_var15 = 0;\n  ptr_var_23 = local_var_60;\n  temp_var14 = 0;\n  ptr_var_22 = output_data;\n  while (0xb < temp_var16) {\n    temp_var10 = (**(code **)(first_param[1] + 0x40))(ptr_var_22);\n    *ptr_var_23 = temp_var10;\n    temp_var10 = (**(code **)(first_param[1] + 0x40))(ptr_var_22 + 4);\n    ptr_var_23[1] = temp_var10;\n    temp_var11 = (**(code **)(first_param[1] + 0x40))(ptr_var_22 + 8);\n    temp_var10 = *ptr_var_23;\n    ptr_var_23[2] = temp_var11;\n    temp_var12 = ptr_var_23[1];\n    temp_var13 = temp_var10 + 3 & 0xfffffffffffffffc;\n    ptr_var_23[6] = temp_var13;\n    if (temp_var12 != (temp_var12 + 3 & 0xfffffffffffffffc)) {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < temp_var11 - 0x100) {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    temp_var1 = temp_var13 + temp_var12 + 0xc;\n    if (temp_var16 < temp_var1) {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (temp_var10 < 2) {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var_23[3] = (ulong)(ptr_var_22 + 0xc);\n    ptr_var_23[4] = (ulong)(ptr_var_22 + temp_var13 + 0xc);\n    temp_var16 = temp_var16 + (-0xc - (temp_var13 + temp_var12));\n    if (temp_var10 != 2) {\n      if (ptr_var_22[0xc] == '$') {\n        if ((ptr_var_22[0xd] == '\\x01') && (ptr_var_22[0xe] == '1')) {\n          temp_var16 = find_build_attributes_00116490();\n          return temp_var16;\n        }\n      }\n      else if ((((4 < temp_var10) && (ptr_var_22[0xc] == 'G')) && (ptr_var_22[0xd] == 'A')) &&\n              ((ptr_var_22[0xe] == '$' && (ptr_var_22[0xf] == '\\x01')))) {\n        if (ptr_var_22[0x10] == '2') {\n          temp_var16 = find_build_attributes_00116490();\n          return temp_var16;\n        }\n        if (ptr_var_22[0x10] == '3') {\n          temp_var16 = find_build_attributes_00116490();\n          return temp_var16;\n        }\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    temp_var9 = temp_var15;\n    temp_var24 = temp_var14;\n    if (temp_var12 == 0) {\n      if (temp_var11 == 0x100) {\n        ptr_var_23[7] = local_var_88;\nLAB_001164af:\n        temp_var12 = temp_var14;\n        temp_var24 = temp_var14;\n      }\n      else {\n        ptr_var_23[7] = local_var_70;\nLAB_0011669e:\n        temp_var9 = temp_var15;\n        temp_var12 = temp_var15;\n      }\n    }\n    else {\n      if (temp_var12 != 0x10) {\n        if (temp_var12 < 0x11) {\n          if (temp_var12 == 4) {\n            temp_var11 = (**(code **)(first_param[1] + 0x40))();\n            temp_var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (temp_var12 == 8) {\n            temp_var16 = find_valid_attributes_001086af();\n            return temp_var16;\n          }\n        }\n        long_var = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      temp_var11 = (**(code **)(first_param[1] + 0x28))(ptr_var_22 + temp_var13 + 0xc);\n      temp_var12 = (**(code **)(first_param[1] + 0x28))();\n      if (temp_var12 < temp_var11) {\n        temp_var11 = temp_var12;\n      }\nLAB_00116631:\n      if (ptr_var_23[2] == 0x100) {\n        if (temp_var11 == 0) {\n          temp_var11 = local_var_88;\n        }\n        temp_var10 = *ptr_var_23;\n        ptr_var_23[7] = temp_var11;\n        temp_var24 = temp_var12;\n        local_var_88 = temp_var11;\n        if (temp_var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (temp_var11 == 0) {\n          temp_var11 = local_var_70;\n        }\n        temp_var10 = *ptr_var_23;\n        ptr_var_23[7] = temp_var11;\n        temp_var9 = temp_var12;\n        local_var_70 = temp_var11;\n        if (temp_var12 == 0) goto LAB_0011669e;\n      }\n    }\n    ptr_var_23[8] = temp_var12;\n    if (*(char *)((ptr_var_23[3] - 1) + temp_var10) != '\\0') {\n      long_var = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptr_var_23 = ptr_var_23 + 9;\n    temp_var15 = temp_var9;\n    temp_var14 = temp_var24;\n    ptr_var_22 = ptr_var_22 + temp_var1;\n  }\n  if (temp_var16 == 0) {\n    temp_var2 = *first_param;\n    temp_var3 = *second_param;\n    temp_var7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    print_error_message_00119ed0(temp_var7,temp_var2,temp_var3);\n    __nmemb = ((long)ptr_var_23 - (long)local_var_60 >> 3) * -0x71c71c71c71c71c7;\n    qsort(local_var_60,__nmemb,0x48,compare_memory_0011a1b0);\n    for (ptr_var_17 = local_var_60; ptr_var_17 < ptr_var_23; ptr_var_17 = ptr_var_17 + 9) {\n      temp_var16 = ptr_var_17[2];\n      if (temp_var16 != 0) {\n        temp_var15 = ptr_var_17[7];\n        temp_var14 = ptr_var_17[8];\n        ptr_var_25 = ptr_var_17;\n        int_var_21 = 0;\n        if (temp_var15 == temp_var14) {\n          ptr_var_17[2] = 0;\n        }\n        else {\n          do {\n            do {\n              ptr_var = ptr_var_25;\n              ptr_var_25 = ptr_var + -9;\n              if (ptr_var_25 < local_var_60) goto LAB_001167f5;\n              temp_var10 = ptr_var[-7];\n            } while (temp_var10 == 0);\n            if ((*ptr_var_25 != *ptr_var_17) ||\n               (int_var = memcmp((void *)ptr_var[-6],(void *)ptr_var_17[3],*ptr_var_17), int_var != 0)) break;\n            temp_var12 = ptr_var[-2];\n            temp_var11 = ptr_var[-1];\n            if (temp_var15 == temp_var12) {\n              if (temp_var14 == temp_var11) {\n                ptr_var_17[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (temp_var14 <= temp_var11) {\n                ptr_var_17[2] = 0;\n                break;\n              }\n              if (temp_var11 < temp_var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < temp_var11) || (temp_var15 <= (temp_var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto find_records_00116852;\n              }\nLAB_001167b8:\n              if ((temp_var16 == 0x101) == (temp_var10 == 0x101)) {\n                if (temp_var11 <= temp_var14) {\n                  temp_var11 = temp_var14;\n                }\n                if (temp_var12 < temp_var15) {\n                  temp_var15 = temp_var12;\n                }\n                ptr_var[-1] = temp_var11;\n                ptr_var[-2] = temp_var15;\n                ptr_var_17[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (temp_var12 <= temp_var15) goto LAB_001167a6;\n              if (temp_var11 < temp_var15) goto LAB_0010852c;\n              if (temp_var14 < temp_var15) {\n                if ((0xfffffffffffffff0 < temp_var14) || (temp_var12 <= (temp_var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto find_records_00116852;\n                goto LAB_001167b8;\n              }\n              if (temp_var14 != temp_var11) goto LAB_001167b8;\n            }\nfind_records_00116852:\n            bool_var = int_var_21 < 0x11;\n            int_var_21 = int_var_21 + 1;\n          } while (bool_var);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(local_var_60,__nmemb,0x48,compare_records_0011a250);\n    temp_ptr_00 = (undefined *)xmalloc(param_size * 2);\n    local_var_80 = 0;\n    local_var_70 = 0;\n    ptr_var_22 = temp_ptr_00;\n    for (ptr_var_17 = local_var_60; ptr_var_17 < ptr_var_23; ptr_var_17 = ptr_var_17 + 9) {\n      if (ptr_var_17[2] != 0) {\n        ptr_var_18 = ptr_var_22 + 0xc;\n        if ((ptr_var_17[7] == local_var_70) && (ptr_var_17[8] == local_var_80)) {\n          (**(code **)(first_param[1] + 0x50))(*ptr_var_17,ptr_var_22);\n          (**(code **)(first_param[1] + 0x50))(0,ptr_var_22 + 4);\n          (**(code **)(first_param[1] + 0x50))(ptr_var_17[2],ptr_var_22 + 8);\n          temp_var15 = ptr_var_17[6];\n          temp_var16 = *ptr_var_17;\n          ptr_var_22 = (undefined *)ptr_var_17[3];\n          ptr_var_20 = ptr_var_18;\n          for (temp_var14 = temp_var16; temp_var14 != 0; temp_var14 = temp_var14 - 1) {\n            *ptr_var_20 = *ptr_var_22;\n            ptr_var_22 = ptr_var_22 + (ulong)byte_var * -2 + 1;\n            ptr_var_20 = ptr_var_20 + (ulong)byte_var * -2 + 1;\n          }\n          if (temp_var16 < temp_var15) {\n            for (long_var = temp_var15 - temp_var16; long_var != 0; long_var = long_var + -1) {\n              *ptr_var_20 = 0;\n              ptr_var_20 = ptr_var_20 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          ptr_var_22 = ptr_var_18 + temp_var15;\n        }\n        else {\n          (**(code **)(first_param[1] + 0x50))();\n          if (*(int *)(first_param[1] + 8) == 5) {\n            char_var = (*(char *)(first_param[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            char_var = '\\b';\n          }\n          (**(code **)(first_param[1] + 0x50))(char_var,ptr_var_22 + 4);\n          (**(code **)(first_param[1] + 0x50))(ptr_var_17[2],ptr_var_22 + 8);\n          temp_var16 = *ptr_var_17;\n          ptr_var_22 = (undefined *)ptr_var_17[3];\n          ptr_var_20 = ptr_var_18;\n          for (temp_var15 = temp_var16; temp_var15 != 0; temp_var15 = temp_var15 - 1) {\n            *ptr_var_20 = *ptr_var_22;\n            ptr_var_22 = ptr_var_22 + (ulong)byte_var * -2 + 1;\n            ptr_var_20 = ptr_var_20 + (ulong)byte_var * -2 + 1;\n          }\n          temp_var15 = ptr_var_17[6];\n          if (temp_var16 < temp_var15) {\n            for (long_var = temp_var15 - temp_var16; long_var != 0; long_var = long_var + -1) {\n              *ptr_var_20 = 0;\n              ptr_var_20 = ptr_var_20 + (ulong)byte_var * -2 + 1;\n            }\n          }\n          long_var = first_param[1];\n          ptr_var_18 = ptr_var_18 + temp_var15;\n          ptr_var_22 = ptr_var_18 + 8;\n          if ((*(int *)(long_var + 8) == 5) && (*(char *)(first_param[0x22] + 4) == '\\x02')) {\n            (**(code **)(long_var + 0x38))(ptr_var_17[7],ptr_var_18);\n            (**(code **)(first_param[1] + 0x38))(ptr_var_17[8],ptr_var_22);\n            ptr_var_22 = ptr_var_18 + 0x10;\n          }\n          else {\n            (**(code **)(long_var + 0x50))(ptr_var_17[7],ptr_var_18);\n            (**(code **)(first_param[1] + 0x50))(ptr_var_17[8],ptr_var_18 + 4);\n          }\n          local_var_70 = ptr_var_17[7];\n          local_var_80 = ptr_var_17[8];\n        }\n      }\n    }\n    temp_var15 = (long)ptr_var_22 - (long)temp_ptr_00;\n    temp_var16 = temp_var15;\n    ptr_var_22 = temp_ptr_00;\n    local_var_68 = param_size;\n    if (temp_var15 < param_size) {\n      for (; local_var_68 = temp_var15, temp_var16 != 0; temp_var16 = temp_var16 - 1) {\n        *output_data = *ptr_var_22;\n        ptr_var_22 = ptr_var_22 + (ulong)byte_var * -2 + 1;\n        output_data = output_data + (ulong)byte_var * -2 + 1;\n      }\n    }\n    free(temp_ptr_00);\n  }\n  else {\n    long_var = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (long_var != 0) {\n      bfd_set_error(0x11);\n      print_error_info_001126c0(0,first_param,second_param,long_var);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(local_var_60);\n  return local_var_68;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "dcgettext",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_build_attributes_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "versionNumber",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108a2a(FILE *outputFile,int exitCode)\n\n{\n  undefined8 versionNumber;\n  char *message;\n  \n  versionNumber = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(outputFile,message,versionNumber);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "FUN_00104a35",
                "exit",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_driver_name_00108c86",
                "param_1": "driver_ptr",
                "cVar1": "comparison_result",
                "iVar2": "comparison_result_int",
                "sVar3": "string_length",
                "puVar4": "formatted_string",
                "lVar5": "driver_address",
                "__s": "driver_name",
                "__s1": "architecture_type",
                "puVar6": "formatted_string_pointer",
                "uVar7": "return_value",
                "bVar8": "flag"
            },
            "code": "\nundefined8 parse_driver_name_00108c86(long *driver_ptr)\n\n{\n  char comparison_result;\n  int comparison_result_int;\n  size_t string_length;\n  undefined2 *formatted_string;\n  long driver_address;\n  char *driver_name;\n  char *architecture_type;\n  undefined2 *formatted_string_pointer;\n  undefined8 return_value;\n  byte flag;\n  \n  flag = 0;\n  driver_address = *driver_ptr;\n  driver_name = (char *)(driver_address + 4);\n  comparison_result = string_comparison_00113fb0(driver_name,&DAT_0011b73b);\n  if (comparison_result == '\\0') {\n    comparison_result = string_comparison_00113fb0(driver_name,\"bsdrv-\");\n    if (comparison_result == '\\0') {\n      comparison_result = string_comparison_00113fb0(driver_name,\"rtdrv-\");\n      if (comparison_result == '\\0') {\n        return 0xffffffff;\n      }\n      driver_name = (char *)(driver_address + 6);\n      return_value = 0xc;\n    }\n    else {\n      driver_name = (char *)(driver_address + 6);\n      return_value = 0xb;\n    }\n  }\n  else {\n    return_value = 10;\n  }\n  string_length = strlen(driver_name);\n  formatted_string = (undefined2 *)xmalloc(string_length + 8);\n  architecture_type = driver_name + 4;\n  formatted_string_pointer = formatted_string;\n  for (driver_address = string_length + 1; driver_address != 0; driver_address = driver_address + -1) {\n    *(char *)formatted_string_pointer = *driver_name;\n    driver_name = driver_name + (ulong)flag * -2 + 1;\n    formatted_string_pointer = (undefined2 *)((long)formatted_string_pointer + (ulong)flag * -2 + 1);\n  }\n  *(undefined *)(formatted_string + 1) = 0x69;\n  *formatted_string = 0x6570;\n  comparison_result_int = strcmp(architecture_type,\"ia32\");\n  if (comparison_result_int == 0) {\n    *(undefined *)((long)formatted_string + 7) = 0x36;\n    *(undefined2 *)((long)formatted_string + 5) = 0x3833;\n  }\n  else {\n    comparison_result_int = strcmp(architecture_type,\"x86_64\");\n    if (comparison_result_int == 0) {\n      *(undefined *)((long)formatted_string + 7) = 0x2d;\n    }\n    else {\n      comparison_result_int = strcmp(architecture_type,\"aarch64\");\n      if (comparison_result_int == 0) {\n        *(undefined8 *)((long)formatted_string + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *driver_ptr = (long)formatted_string;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_driver_name_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "messageFormat"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *messageFormat;\n  \n  messageFormat = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,messageFormat,errorMessage);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "print_error_message_001053d5",
                "unaff_R12": "ptrToUnaff_R12",
                "unaff_R14": "ptrToUnaff_R14"
            },
            "code": "\nundefined4 printErrorMessage_001053d5(void)\n\n{\n  long ptrToUnaff_R12;\n  undefined8 *ptrToUnaff_R14;\n  \n  print_error_0011a110(*ptrToUnaff_R14);\n  *(undefined4 *)(ptrToUnaff_R12 + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptrToUnaff_R12 + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "print_error_message_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_errors_00104bba",
                "in_EAX": "status",
                "unaff_EBP": "flags",
                "unaff_R14": "address",
                "uVar1": "errorMessage"
            },
            "code": "\nvoid checkErrors_00104bba(void)\n\n{\n  uint status;\n  undefined8 errorMessage;\n  uint flags;\n  long address;\n  \n  if ((status & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  if ((((status & 8) == 0) || ((flags & 0x10) == 0)) && ((flags & 0x18) != 0x18)) {\n    if ((((status & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n      *(uint *)(address + 0x14) = status | flags;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    print_error_and_exit_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  print_error_and_exit_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_errors_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_terminate_string_00109a0b",
                "param_1": "sourceString",
                "param_2": "length",
                "puVar1": "copiedString",
                "lVar2": "remainingLength",
                "puVar3": "destinationString",
                "bVar4": "increment"
            },
            "code": "\nvoid copyAndTerminateString_00109a0b(undefined *sourceString,int length)\n\n{\n  undefined *copiedString;\n  long remainingLength;\n  undefined *destinationString;\n  byte increment;\n  \n  increment = 0;\n  copiedString = (undefined *)xmalloc((long)(length + 1));\n  destinationString = copiedString;\n  for (remainingLength = (long)length; remainingLength != 0; remainingLength = remainingLength + -1) {\n    *destinationString = *sourceString;\n    sourceString = sourceString + (ulong)increment * -2 + 1;\n    destinationString = destinationString + (ulong)increment * -2 + 1;\n  }\n  copiedString[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0011173a",
                "FUN_0010afd5",
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "copy_and_terminate_string_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slot_ptr",
                "param_2": "slot_index",
                "uVar1": "error_message",
                "plVar2": "allocated_slot",
                "lVar3": "slot_offset",
                "lVar4": "loop_counter",
                "uVar5": "remaining",
                "bVar6": "byte_value",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] allocate_and_initialize_slots_0010da0b(long **slot_ptr,ulong slot_index,undefined8 param_3,undefined8 param_4)\n\n{\n  undefined8 error_message;\n  long *allocated_slot;\n  long slot_offset;\n  long loop_counter;\n  ulong remaining;\n  byte byte_value;\n  undefined return_value [16];\n  \n  byte_value = 0;\n  remaining = slot_index;\n  if ((long)slot_index < 0x3e90) {\n    for (; 0xf < (long)remaining; remaining = remaining - 0x10) {\n      if (*slot_ptr == (long *)0x0) {\n        allocated_slot = (long *)xmalloc(0x88);\n        *slot_ptr = allocated_slot;\n        for (slot_offset = 0x22; slot_offset != 0; slot_offset = slot_offset + -1) {\n          *(undefined4 *)allocated_slot = 0;\n          allocated_slot = (long *)((long)allocated_slot + (ulong)byte_value * -8 + 4);\n        }\n      }\n      slot_ptr = (long **)*slot_ptr;\n    }\n    slot_offset = (slot_index >> 4) * -0x10;\n    if ((long)slot_index < 0) {\n      slot_offset = 0;\n    }\n    if (*slot_ptr == (long *)0x0) {\n      allocated_slot = (long *)xmalloc(0x88);\n      *slot_ptr = allocated_slot;\n      for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *(undefined4 *)allocated_slot = 0;\n        allocated_slot = (long *)((long)allocated_slot + (ulong)byte_value * -8 + 4);\n      }\n    }\n    return_value._8_8_ = param_4;\n    return_value._0_8_ = *slot_ptr + slot_index + slot_offset + 1;\n    return return_value;\n  }\n  error_message = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,slot_index);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_memory_00112894",
                "param_1": "data_ptr",
                "param_2": "flag",
                "param_3": "param_1",
                "param_4": "param_2",
                "puVar1": "memory_buffer",
                "puVar2": "temp_ptr",
                "lVar3": "loop_counter",
                "bVar4": "byte_flag"
            },
            "code": "\nundefined8 *\ninitializeMemory_00112894(undefined8 data_ptr,undefined flag,undefined8 param_1,undefined8 param_2)\n\n{\n  undefined8 *memory_buffer;\n  undefined8 *temp_ptr;\n  long loop_counter;\n  byte byte_flag;\n  \n  byte_flag = 0;\n  memory_buffer = (undefined8 *)xmalloc(0x1b0);\n  temp_ptr = memory_buffer;\n  for (loop_counter = 0x6c; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *(undefined4 *)temp_ptr = 0;\n    temp_ptr = (undefined8 *)((long)temp_ptr + (ulong)byte_flag * -8 + 4);\n  }\n  *memory_buffer = data_ptr;\n  *(undefined *)(memory_buffer + 1) = flag;\n  memory_buffer[2] = param_1;\n  memory_buffer[3] = param_2;\n  *(undefined4 *)(memory_buffer + 0x10) = 1;\n  temp_ptr = (undefined8 *)xmalloc(8);\n  memory_buffer[0xd] = 0xffffffffffffffff;\n  memory_buffer[0x11] = temp_ptr;\n  *temp_ptr = 0;\n  return memory_buffer;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_next_entry_00109b2f",
                "param_1": "ptr_to_data_struct",
                "__ptr": "current_entry_ptr",
                "puVar1": "next_entry_ptr"
            },
            "code": "\nundefined8 * extract_and_free_next_entry_00109b2f(long ptr_to_data_struct)\n\n{\n  undefined8 *current_entry_ptr;\n  undefined8 *next_entry_ptr;\n  \n  current_entry_ptr = *(undefined8 **)(ptr_to_data_struct + 0x60);\n  if (current_entry_ptr != (undefined8 *)0x0) {\n    next_entry_ptr = (undefined8 *)current_entry_ptr[1];\n    *(undefined8 *)(ptr_to_data_struct + 0x60) = *current_entry_ptr;\n    free(current_entry_ptr);\n    return next_entry_ptr;\n  }\n  return current_entry_ptr;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010ebb0",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010a83e",
                "FUN_0010e5db",
                "FUN_0010eafe",
                "FUN_0010a2b9",
                "FUN_0010e9a0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010e918"
            ],
            "imported": false,
            "current_name": "extract_and_free_next_entry_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "check_symbol_redefinitions_00108d9a",
                "param_1": "input_file",
                "param_2": "symbol_name",
                "param_3": "target_symbol",
                "param_4": "result",
                "ppcVar1": "symbol_entry",
                "pcVar2": "symbol_name_copy",
                "lVar3": "symbol_entry_hash",
                "uVar4": "error_message",
                "plVar5": "target_symbol_entry"
            },
            "code": "\nundefined8 check_symbol_redefinitions_00108d9a(undefined8 input_file,char *symbol_name,char *target_symbol,undefined8 result)\n\n{\n  char **symbol_entry;\n  char *symbol_name_copy;\n  long symbol_entry_hash;\n  undefined8 error_message;\n  long *target_symbol_entry;\n  \n  symbol_entry = (char **)xmalloc(0x10);\n  symbol_name_copy = strdup(symbol_name);\n  *symbol_entry = symbol_name_copy;\n  symbol_name_copy = strdup(target_symbol);\n  error_message = DAT_001278f0;\n  symbol_entry[1] = symbol_name_copy;\n  symbol_entry_hash = htab_find(error_message,symbol_entry);\n  if (symbol_entry_hash != 0) {\n    error_message = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,symbol_name);\n  }\n  symbol_entry_hash = htab_find(DAT_001278e8,target_symbol);\n  if (symbol_entry_hash != 0) {\n    error_message = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    print_error_and_exit_00119dd0(error_message,input_file,target_symbol);\n  }\n  target_symbol_entry = (long *)htab_find_slot(DAT_001278f0,symbol_entry,1);\n  error_message = DAT_001278e8;\n  *target_symbol_entry = (long)symbol_entry;\n  symbol_name_copy = symbol_entry[1];\n  symbol_entry = (char **)htab_find_slot(error_message,symbol_name_copy,1);\n  *symbol_entry = symbol_name_copy;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "htab_find_slot",
                "dcgettext",
                "strdup",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "check_symbol_redefinitions_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "process_input_0010e9a0",
                "param_1": "input_ptr",
                "param_2": "output_str",
                "param_3": "type",
                "param_4": "entry_ptr",
                "lVar1": "count",
                "uVar2": "result",
                "__s": "extracted_entry",
                "__s_00": "new_entry",
                "__s_01": "combined_str",
                "pcVar5": "type_str",
                "uVar6": "type_value",
                "sVar3": "output_len",
                "sVar4": "entry_len"
            },
            "code": "\nundefined4 process_input_0010e9a0(long input_ptr,char *output_str,undefined4 type,undefined8 entry_ptr)\n\n{\n  long count;\n  undefined4 result;\n  byte *extracted_entry;\n  byte *new_entry;\n  size_t output_len;\n  size_t entry_len;\n  char *combined_str;\n  char *type_str;\n  undefined8 type_value;\n  \n  extracted_entry = (byte *)extract_and_free_next_entry_00109b2f();\n  switch(type) {\n  case 1:\n    type_str = \"G\";\n    type_value = 0x20;\n    break;\n  case 2:\n    type_str = \"S\";\n    type_value = 0x26;\n    break;\n  case 3:\n    type_str = \"V\";\n    type_value = 0x26;\n    break;\n  case 4:\n    type_str = \"\";\n    type_value = 0x80;\n    if (((&_sch_istable)[(ulong)*extracted_entry * 2] & 4) == 0) {\n      count = *(long *)(input_ptr + 0x68);\n      *(long *)(input_ptr + 0x68) = count + 1;\n      output_len = strlen((char *)extracted_entry);\n      new_entry = (byte *)xmalloc(output_len + 0x14);\n      sprintf((char *)new_entry,\"%ld=%s\",count,extracted_entry);\n      free(extracted_entry);\n      extracted_entry = new_entry;\n    }\n    break;\n  case 5:\n    type_str = \"r\";\n    type_value = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  output_len = strlen(output_str);\n  entry_len = strlen((char *)extracted_entry);\n  combined_str = (char *)xmalloc(output_len + 3 + entry_len);\n  sprintf(combined_str,\"%s:%s%s\",output_str,type_str,extracted_entry);\n  free(extracted_entry);\n  result = process_string_0010e2f0(input_ptr,type_value,0,entry_ptr,combined_str);\n  if ((char)result != '\\0') {\n    free(combined_str);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_input_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "print_error_with_section_0010827b",
                "unaff_RBX": "section_ptr",
                "uVar1": "section_value",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_with_section_0010827b(void)\n\n{\n  undefined8 section_value;\n  undefined8 error_message;\n  undefined8 *section_ptr;\n  \n  section_value = *section_ptr;\n  error_message = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  print_error_and_exit_00119dd0(error_message,section_value);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "print_error_with_section_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "FUNC_00104920"
            },
            "code": "\nvoid FUNC_00104920(void)\n\n{\n  undefined8 uVar1;\n  \n  uVar1 = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(uVar1);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "FUNC_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "create_and_initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTableWithAllocation",
                "htab_hash_string": "hashStringForHashTable",
                "htab_eq_string": "compareStringForHashTable",
                "xcalloc": "allocateMemory",
                "free": "releaseMemory"
            },
            "code": "\nvoid createAndInitializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,compareStringForHashTable,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "xcalloc",
                "free",
                "htab_hash_string",
                "htab_eq_string",
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "create_and_initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108d9a",
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "process_alignment_00108179",
                "lVar1": "alignmentMsg",
                "lVar2": "relevantValue",
                "cVar3": "result",
                "lVar4": "failedMsg",
                "lVar5": "foundValue",
                "unaff_RBX": "self",
                "unaff_RBP": "basePointer",
                "unaff_R12": "context",
                "unaff_R14B": "isNotNull",
                "unaff_R15": "newPtr"
            },
            "code": "\nvoid processAlignment_00108179(void)\n\n{\n  long alignmentMsg;\n  long relevantValue;\n  char result;\n  long failedMsg;\n  long foundValue;\n  long self;\n  long basePointer;\n  long context;\n  char isNotNull;\n  long newPtr;\n  \n  failedMsg = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(newPtr + 0xb4) = *(undefined4 *)(self + 0xb4);\n  *(byte *)(newPtr + 0x28) =\n       *(byte *)(newPtr + 0x28) & 0xcf | *(byte *)(self + 0x28) & 0x30;\n  *(long *)(self + 0x60) = newPtr;\n  *(undefined8 *)(self + 0x58) = 0;\n  if ((*(byte *)(self + 0x27) & 2) != 0) {\n    alignmentMsg = *(long *)(self + 0xd0);\n    foundValue = find_relevant_value_00115d00(alignmentMsg,*(undefined8 *)(self + 0xe0));\n    if ((foundValue != 0) &&\n       (relevantValue = *(long *)(context + 8), *(uint *)(foundValue + 0x18) = *(uint *)(foundValue + 0x18) | 0x20,\n       *(int *)(relevantValue + 8) == 5)) {\n      *(long *)(alignmentMsg + 0xb0) = foundValue;\n      result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n      if (result == '\\0') {\n        copy_private_data_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  result = (**(code **)(*(long *)(basePointer + 8) + 0x158))();\n  if (result == '\\0') {\n    copy_private_data_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (isNotNull != '\\0') {\n    *(undefined4 *)(*(long *)(newPtr + 0xd0) + 4) = 8;\n  }\n  if (failedMsg != 0) {\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_0010808f",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "process_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "get_file_data_00109022",
                "param_1": "fileHandle",
                "param_2": "typeIndex",
                "param_3": "inputVar1",
                "param_4": "inputVar2",
                "uVar1": "typeIndex2",
                "pcVar2": "errorString",
                "plVar3": "fileData",
                "lVar4": "loopCounter",
                "uVar5": "typeFileNum",
                "pplVar6": "fileDataPtr",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16] getFileData_00109022(long fileHandle,uint *typeIndex,undefined8 inputVar1,undefined8 inputVar2)\n\n{\n  uint typeIndex2;\n  char *errorString;\n  long *fileData;\n  long loopCounter;\n  uint typeFileNum;\n  long **fileDataPtr;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  typeFileNum = *typeIndex;\n  typeIndex2 = typeIndex[1];\n  if (((int)typeFileNum < 0) || (*(uint *)(fileHandle + 0x80) <= typeFileNum)) {\n    errorString = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)typeFileNum);\n  }\n  else {\n    if (-1 < (int)typeIndex2) {\n      fileDataPtr = (long **)(*(long *)(fileHandle + 0x88) + (long)(int)typeFileNum * 8);\n      for (typeFileNum = typeIndex2; 0xf < (int)typeFileNum; typeFileNum = typeFileNum - 0x10) {\n        if (*fileDataPtr == (long *)0x0) {\n          fileData = (long *)xmalloc(0x88);\n          *fileDataPtr = fileData;\n          for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n            *(undefined4 *)fileData = 0;\n            fileData = (long *)((long)fileData + (ulong)byteVar * -8 + 4);\n          }\n        }\n        fileDataPtr = (long **)*fileDataPtr;\n      }\n      if (*fileDataPtr == (long *)0x0) {\n        fileData = (long *)xmalloc(0x88);\n        *fileDataPtr = fileData;\n        for (loopCounter = 0x22; loopCounter != 0; loopCounter = loopCounter + -1) {\n          *(undefined4 *)fileData = 0;\n          fileData = (long *)((long)fileData + (ulong)byteVar * -8 + 4);\n        }\n      }\n      fileData = *fileDataPtr + (long)(int)((typeIndex2 >> 4) * -0x10 + typeIndex2) + 1;\n      goto LAB_00109117;\n    }\n    errorString = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,errorString,(ulong)typeIndex2);\n  }\n  fileData = (long *)0x0;\nLAB_00109117:\n  returnValue._8_8_ = inputVar2;\n  returnValue._0_8_ = fileData;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_file_data_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "record_variable_0010c05d",
                "param_1": "data_ptr",
                "param_2": "size",
                "param_3": "flags",
                "param_4": "record_type",
                "param_5": "file",
                "param_6": "result",
                "auVar1": "result_tmp",
                "uVar2": "return_value",
                "piVar3": "pi",
                "cVar4": "use_pi",
                "lVar5": "i",
                "lVar6": "file_ptr",
                "piVar7": "pi_tmp",
                "bVar8": "is_zero",
                "auVar9": "result_final"
            },
            "code": "\n\n\nundefined  [16]\nrecord_variable_0010c05d(long data_ptr,long size,ulong flags,int record_type,undefined8 file,\n            undefined8 result)\n\n{\n  undefined result_tmp [16];\n  undefined8 return_value;\n  int *pi;\n  char use_pi;\n  long i;\n  long file_ptr;\n  int *pi_tmp;\n  byte is_zero;\n  undefined result_final [16];\n  \n  is_zero = 0;\n  if (size == 0) {\n    result_tmp._8_8_ = 0;\n    result_tmp._0_8_ = flags;\n    return result_tmp << 0x40;\n  }\n  if (flags != 0) {\n    if ((*(long *)(data_ptr + 8) == 0) || (file_ptr = *(long *)(data_ptr + 0x10), file_ptr == 0)) {\n      return_value = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",return_value);\n    }\n    else {\n      if (record_type - 1U < 2) {\n        file_ptr = file_ptr + 0x10;\n        use_pi = (record_type == 1) + '\\x01';\n      }\n      else if (*(long *)(data_ptr + 0x20) == 0) {\n        file_ptr = file_ptr + 0x10;\n        use_pi = '\\0';\n      }\n      else {\n        file_ptr = *(long *)(data_ptr + 0x20) + 0x28;\n        use_pi = '\\0';\n      }\n      file_ptr = initialize_memory_00112925(file_ptr,size,2,use_pi);\n      if (file_ptr != 0) {\n        pi = (int *)xmalloc(0x18);\n        pi_tmp = pi + 1;\n        for (i = 5; i != 0; i = i + -1) {\n          *pi_tmp = 0;\n          pi_tmp = pi_tmp + (ulong)is_zero * -2 + 1;\n        }\n        *pi = record_type;\n        return_value = 1;\n        *(ulong *)(pi + 2) = flags;\n        *(undefined8 *)(pi + 4) = file;\n        *(int **)(file_ptr + 0x20) = pi;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  return_value = 0;\nLAB_0010c12e:\n  result_final._8_8_ = result;\n  result_final._0_8_ = return_value;\n  return result_final;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c1c6",
                "FUN_0010c139",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "initialize_or_format_data_00109d97",
                "param_1": "param",
                "local_40": "formatted_data"
            },
            "code": "\nvoid initialize_or_format_data_00109d97(long param)\n\n{\n  long lVar1;\n  char formatted_data [40];\n  \n  if (*(long *)(param + 0x70) != 0) {\n    initialize_and_format_data_00109cf4(param,*(long *)(param + 0x70),0);\n    return;\n  }\n  lVar1 = *(long *)(param + 0x68);\n  *(long *)(param + 0x68) = lVar1 + 1;\n  sprintf(formatted_data,\"%ld=%ld\",lVar1,lVar1);\n  initialize_data_structure_00109b52(param,formatted_data,lVar1,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_format_data_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "find_valid_attributes_001086af",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "bVar4": "condition",
                "puVar5": "pointer1",
                "iVar6": "index",
                "lVar7": "length",
                "uVar8": "message",
                "uVar9": "min_value",
                "uVar10": "max_value",
                "uVar11": "var1",
                "uVar12": "var9",
                "uVar13": "var10",
                "uVar14": "var11",
                "unaff_RBX": "var5",
                "unaff_RBP": "var6",
                "puVar15": "array1",
                "puVar16": "array2",
                "cVar17": "character",
                "puVar18": "array3",
                "puVar19": "array4",
                "unaff_R12": "pointer2",
                "unaff_R13": "var7",
                "uVar20": "var8",
                "__ptr": "pointer3",
                "in_RCX": "input_RCX",
                "unaff_retaddr": "var12",
                "param_7": "param1",
                "param_8": "param2",
                "param_9": "param3",
                "param_10": "param4",
                "param_11": "param5",
                "in_stack_00000030": "stack_var1",
                "in_stack_00000038": "stack_var2",
                "param_13": "param6",
                "param_14": "param7"
            },
            "code": "\nulong find_valid_attributes_001086af(void)\n\n{\n  ulong result;\n  undefined8 temp1;\n  undefined8 temp2;\n  bool condition;\n  ulong *pointer1;\n  int index;\n  long length;\n  undefined8 message;\n  ulong min_value;\n  ulong max_value;\n  ulong var1;\n  undefined *pointer3;\n  ulong input_RCX;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var5;\n  ulong var6;\n  ulong *array1;\n  undefined *array2;\n  char character;\n  undefined *array3;\n  undefined *array4;\n  ulong *pointer2;\n  ulong var7;\n  ulong var8;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *ptemp11;\n  byte bVar22;\n  int iVar23;\n  ulong var12;\n  ulong param1;\n  uint param2;\n  ulong param3;\n  ulong param4;\n  ulong *param5;\n  undefined *stack_var1;\n  uint stack_var2;\n  uint param6;\n  undefined8 *param7;\n  \n  bVar22 = 0;\n  param1 = input_RCX;\n  min_value = (**(code **)(unaff_R14[1] + 0x40))();\n  max_value = (**(code **)(unaff_R14[1] + 0x40))(pointer2[4] + 4);\nLAB_0011662a:\n  var10 = var6;\n  var8 = var7;\n  if (max_value < min_value) {\n    min_value = max_value;\n  }\n  do {\n    var1 = param1;\n    var9 = param1;\n    array1 = pointer2;\n    if (pointer2[2] == 0x100) {\n      if (min_value == 0) {\n        min_value = var12;\n      }\n      var11 = *pointer2;\n      pointer2[7] = min_value;\n      var6 = var10;\n      var7 = max_value;\n      var12 = min_value;\n      if (max_value == 0) goto LAB_001164af;\n    }\n    else {\n      if (min_value == 0) {\n        min_value = param3;\n      }\n      var11 = *pointer2;\n      pointer2[7] = min_value;\n      var6 = max_value;\n      var7 = var8;\n      param3 = min_value;\n      if (max_value == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    array1[8] = max_value;\n    if (*(char *)((array1[3] - 1) + var11) != '\\0') {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    pointer2 = array1 + 9;\n    if (var5 < 0xc) {\n      if (var5 != 0) {\n        length = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((stack_var2 | param6 | param2) != 0) {\n        if (((param6 | param2) == 0) || (stack_var2 == 0)) {\n          if (param6 == 0) {\n            if (param2 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param2 == 0) goto LAB_001166f8;\n        }\n        length = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      temp1 = *unaff_R14;\n      temp2 = *param7;\n      message = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(message,temp1,temp2);\nLAB_0011671b:\n      __nmemb = ((long)pointer2 - (long)param5 >> 3) * -0x71c71c71c71c71c7;\n      qsort(param5,__nmemb,0x48,compare_memory_0011a1b0);\n      array1 = param5;\n      goto LAB_001167f9;\n    }\n    max_value = (**(code **)(unaff_R14[1] + 0x40))(var9);\n    *pointer2 = max_value;\n    max_value = (**(code **)(unaff_R14[1] + 0x40))(var9 + 4);\n    array1[10] = max_value;\n    min_value = (**(code **)(unaff_R14[1] + 0x40))(var9 + 8);\n    var11 = *pointer2;\n    array1[0xb] = min_value;\n    max_value = array1[10];\n    var10 = var11 + 3 & 0xfffffffffffffffc;\n    array1[0xf] = var10;\n    if (max_value != (max_value + 3 & 0xfffffffffffffffc)) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < min_value - 0x100) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    var1 = var10 + max_value + 0xc;\n    if (var5 < var1) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var11 < 2) {\n      length = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    array1[0xc] = var9 + 0xc;\n    result = var9 + 0xc + var10;\n    array1[0xd] = result;\n    var5 = var5 + (-0xc - (var10 + max_value));\n    var1 = var9 + var1;\n    if (var11 != 2) {\n      if (*(char *)(var9 + 0xc) == '$') {\n        if ((*(char *)(var9 + 0xd) == '\\x01') && (*(char *)(var9 + 0xe) == '1')) {\n          max_value = find_build_attributes_00116490();\n          return max_value;\n        }\n      }\n      else if ((((4 < var11) && (*(char *)(var9 + 0xc) == 'G')) &&\n               (*(char *)(var9 + 0xd) == 'A')) &&\n              ((*(char *)(var9 + 0xe) == '$' && (*(char *)(var9 + 0xf) == '\\x01')))) {\n        if (*(char *)(var9 + 0x10) == '2') {\n          max_value = find_build_attributes_00116490();\n          return max_value;\n        }\n        if (*(char *)(var9 + 0x10) == '3') {\n          max_value = find_build_attributes_00116490();\n          return max_value;\n        }\n        length = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var10 = var6;\n    var8 = var7;\n    if (max_value == 0) {\n      if (min_value == 0x100) {\n        array1[0x10] = var12;\nLAB_001164af:\n        var9 = var1;\n        max_value = var8;\n        array1 = pointer2;\n        var7 = var8;\n      }\n      else {\n        array1[0x10] = param3;\nLAB_0011669e:\n        var6 = var10;\n        var9 = var1;\n        max_value = var10;\n        array1 = pointer2;\n        var7 = var8;\n      }\n      goto LAB_001164bb;\n    }\n    if (max_value == 0x10) break;\n    if (0x10 < max_value) {\nLAB_00116679:\n      length = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (length != 0) {\n        bfd_set_error(0x11);\n        print_error_info_001126c0(0,unaff_R14,param7,length);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (max_value != 4) {\n      if (max_value == 8) {\n        max_value = find_valid_attributes_001086af();\n        return max_value;\n      }\n      goto LAB_00116679;\n    }\n    param1 = var1;\n    min_value = (**(code **)(unaff_R14[1] + 0x40))();\n    max_value = 0xffffffffffffffff;\n  } while( true );\n  param1 = var1;\n  min_value = (**(code **)(unaff_R14[1] + 0x28))(result);\n  max_value = (**(code **)(unaff_R14[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (pointer2 <= array1) {\n    qsort(param5,__nmemb,0x48,compare_records_0011a250);\n    pointer3 = (undefined *)xmalloc(param4 * 2);\n    param1 = 0;\n    param3 = 0;\n    array4 = pointer3;\n    for (array1 = param5; array1 < pointer2; array1 = array1 + 9) {\n      if (array1[2] != 0) {\n        array3 = array4 + 4;\n        array2 = array4 + 0xc;\n        if ((array1[7] == param3) && (array1[8] == param1)) {\n          (**(code **)(unaff_R14[1] + 0x50))(*array1,array4);\n          (**(code **)(unaff_R14[1] + 0x50))(0,array3);\n          (**(code **)(unaff_R14[1] + 0x50))(array1[2],array4 + 8);\n          min_value = array1[6];\n          max_value = *array1;\n          array4 = (undefined *)array1[3];\n          array3 = array2;\n          for (var10 = max_value; var10 != 0; var10 = var10 - 1) {\n            *array3 = *array4;\n            array4 = array4 + (ulong)bVar22 * -2 + 1;\n            array3 = array3 + (ulong)bVar22 * -2 + 1;\n          }\n          if (max_value < min_value) {\n            for (length = min_value - max_value; length != 0; length = length + -1) {\n              *array3 = 0;\n              array3 = array3 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          array4 = array2 + min_value;\n        }\n        else {\n          (**(code **)(unaff_R14[1] + 0x50))();\n          if (*(int *)(unaff_R14[1] + 8) == 5) {\n            character = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            character = '\\b';\n          }\n          (**(code **)(unaff_R14[1] + 0x50))(character,array3);\n          (**(code **)(unaff_R14[1] + 0x50))(array1[2],array4 + 8);\n          max_value = *array1;\n          array4 = (undefined *)array1[3];\n          array3 = array2;\n          for (min_value = max_value; min_value != 0; min_value = min_value - 1) {\n            *array3 = *array4;\n            array4 = array4 + (ulong)bVar22 * -2 + 1;\n            array3 = array3 + (ulong)bVar22 * -2 + 1;\n          }\n          min_value = array1[6];\n          if (max_value < min_value) {\n            for (length = min_value - max_value; length != 0; length = length + -1) {\n              *array3 = 0;\n              array3 = array3 + (ulong)bVar22 * -2 + 1;\n            }\n          }\n          length = unaff_R14[1];\n          array2 = array2 + min_value;\n          array4 = array2 + 8;\n          if ((*(int *)(length + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n            (**(code **)(length + 0x38))(array1[7],array2);\n            (**(code **)(unaff_R14[1] + 0x38))(array1[8],array4);\n            array4 = array2 + 0x10;\n          }\n          else {\n            (**(code **)(length + 0x50))(array1[7],array2);\n            (**(code **)(unaff_R14[1] + 0x50))(array1[8],array2 + 4);\n          }\n          param3 = array1[7];\n          param1 = array1[8];\n        }\n      }\n    }\n    min_value = (long)array4 - (long)pointer3;\n    max_value = min_value;\n    array4 = pointer3;\n    if (min_value < param4) {\n      for (; param4 = min_value, max_value != 0; max_value = max_value - 1) {\n        *stack_var1 = *array4;\n        array4 = array4 + (ulong)bVar22 * -2 + 1;\n        stack_var1 = stack_var1 + (ulong)bVar22 * -2 + 1;\n      }\n    }\n    free(pointer3);\nLAB_001166f8:\n    free(param5);\n    return param4;\n  }\n  if (array1[2] != 0) {\n    max_value = array1[7];\n    min_value = array1[8];\n    var10 = array1[2];\n    ptemp11 = array1;\n    iVar23 = 0;\n    if (max_value == min_value) {\n      array1[2] = 0;\n    }\n    else {\n      do {\n        do {\n          pointer1 = ptemp11;\n          ptemp11 = pointer1 + -9;\n          if (ptemp11 < param5) goto LAB_001167f5;\n          var8 = pointer1[-7];\n        } while (var8 == 0);\n        param1 = var10;\n        if ((*ptemp11 != *array1) ||\n           (index = memcmp((void *)pointer1[-6],(void *)array1[3],*array1), index != 0)) break;\n        var10 = pointer1[-2];\n        var1 = pointer1[-1];\n        if (max_value == var10) {\n          if (min_value == var1) {\n            array1[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (min_value <= var1) {\n            array1[2] = 0;\n            break;\n          }\n          if (var1 < max_value) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < var1) || (max_value <= (var1 + 0xf & 0xfffffffffffffff0)))\n            goto find_records_00116852;\n          }\nLAB_001167b8:\n          if ((param1 == 0x101) == (var8 == 0x101)) {\n            if (var1 <= min_value) {\n              var1 = min_value;\n            }\n            if (var10 < max_value) {\n              max_value = var10;\n            }\n            pointer1[-1] = var1;\n            pointer1[-2] = max_value;\n            array1[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (var10 <= max_value) goto LAB_001167a6;\n          if (var1 < max_value) goto LAB_0010852c;\n          if (min_value < max_value) {\n            if ((0xfffffffffffffff0 < min_value) || (var10 <= (min_value + 0xf & 0xfffffffffffffff0)))\n            goto find_records_00116852;\n            goto LAB_001167b8;\n          }\n          if (min_value != var1) goto LAB_001167b8;\n        }\nfind_records_00116852:\n        condition = iVar23 < 0x11;\n        var10 = param1;\n        iVar23 = iVar23 + 1;\n      } while (condition);\n    }\n  }\nLAB_001167f5:\n  array1 = array1 + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010847a",
                "FUN_00116490",
                "bfd_set_error",
                "FUN_0011a1b0",
                "dcgettext",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "find_valid_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "process_data_0010add5"
            },
            "code": "\nvoid process_data_0010add5(void)\n\n{\n  process_data_0010add5_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_function_00113e17",
                "initialize_function_00112904": "initialize"
            },
            "code": "\nvoid initializeFunction_00113e17(void)\n\n{\n  initialize(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_function_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_structure_00109b52",
                "param_1": "context",
                "param_2": "inputString",
                "param_3": "additionalData",
                "param_4": "flag",
                "param_5": "status",
                "uVar1": "previousPtr",
                "puVar2": "dataStructurePtr",
                "uVar3": "duplicatedString"
            },
            "code": "\nundefined initializeDataStructure_00109b52(long context,undefined8 inputString,undefined8 additionalData,undefined flag,\n                      undefined4 status)\n\n{\n  undefined8 previousPtr;\n  undefined8 *dataStructurePtr;\n  undefined8 duplicatedString;\n  \n  dataStructurePtr = (undefined8 *)xmalloc(0x40);\n  duplicatedString = xstrdup(inputString);\n  dataStructurePtr[2] = additionalData;\n  *(undefined (*) [16])(dataStructurePtr + 4) = ZEXT816(0);\n  *(undefined (*) [16])(dataStructurePtr + 6) = ZEXT816(0);\n  previousPtr = *(undefined8 *)(context + 0x60);\n  *(undefined *)((long)dataStructurePtr + 0x1c) = flag;\n  *(undefined4 *)(dataStructurePtr + 3) = status;\n  *(undefined8 **)(context + 0x60) = dataStructurePtr;\n  *dataStructurePtr = previousPtr;\n  dataStructurePtr[1] = duplicatedString;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010a424",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_00109cf4",
                "FUN_00109ed3",
                "FUN_0010a77a",
                "FUN_0010e453",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109e76"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "parse_numeric_value_00109a32",
                "param_1": "input_string",
                "param_2": "error_flag",
                "param_3": "end_of_string",
                "param_4": "param4",
                "param_5": "param5",
                "__nptr": "input_ptr",
                "piVar1": "errno_ptr",
                "uVar2": "parsed_value",
                "uVar3": "error_message",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16]\nparse_numeric_value_00109a32(char **input_string,undefined *error_flag,char *end_of_string,undefined8 param4,undefined8 param5)\n\n{\n  char *input_ptr;\n  int *errno_ptr;\n  ulong parsed_value;\n  undefined8 error_message;\n  undefined return_value [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  input_ptr = *input_string;\n  if ((input_ptr < end_of_string) && (*input_ptr != '\\0')) {\n    errno_ptr = __errno_location();\n    *errno_ptr = 0;\n    parsed_value = strtoul(input_ptr,input_string,0);\n    if ((parsed_value != 0xffffffffffffffff) || (*errno_ptr == 0)) goto LAB_00109aa9;\n    if (error_flag == (undefined *)0x0) {\n      error_message = dcgettext(0,\"numeric overflow\",5);\n      print_warning_00108fe8(input_ptr,error_message);\n    }\n    else {\n      *error_flag = 1;\n    }\n  }\n  parsed_value = 0;\nLAB_00109aa9:\n  return_value._8_8_ = param5;\n  return_value._0_8_ = parsed_value;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00108fe8",
                "strtoul",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_00109ab1",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_numeric_value_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "find_debug_tag_type_0010c6be",
                "param_1": "fileOffset",
                "param_2": "tagName",
                "param_3": "currentTag",
                "iVar1": "comparisonResult",
                "uVar2": "translatedMessage",
                "piVar3": "newTag",
                "pauVar4": "tagPointer",
                "lVar5": "filePointer",
                "pcVar6": "errorMessage"
            },
            "code": "\n\n\nint * findDebugTagType_0010c6be(long fileOffset,char *tagName,int *currentTag)\n\n{\n  int comparisonResult;\n  undefined8 translatedMessage;\n  int *newTag;\n  undefined (*tagPointer) [16];\n  long filePointer;\n  char *errorMessage;\n  \n  if ((tagName != (char *)0x0) && (currentTag != (int *)0x0)) {\n    if (*(long *)(fileOffset + 0x10) == 0) {\n      errorMessage = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*currentTag != 0x17) {\n        newTag = (int *)initialize_function_00112904(0x17,0);\n        if (newTag == (int *)0x0) {\n          return (int *)0x0;\n        }\n        tagPointer = (undefined (*) [16])xmalloc(0x10);\n        filePointer = *(long *)(fileOffset + 0x10);\n        *tagPointer = ZEXT816(0);\n        *(int **)(*tagPointer + 8) = currentTag;\n        *(undefined (**) [16])(newTag + 4) = tagPointer;\n        filePointer = initialize_memory_00112925(filePointer + 0x10,tagName,1,3);\n        if (filePointer == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(filePointer + 0x20) = newTag;\n        *(long *)*tagPointer = filePointer;\n        return newTag;\n      }\n      comparisonResult = strcmp(*(char **)(**(long **)(currentTag + 4) + 8),tagName);\n      errorMessage = \"debug_tag_type: extra tag attempted\";\n      if (comparisonResult == 0) {\n        return currentTag;\n      }\n    }\n    translatedMessage = dcgettext(0,errorMessage,5);\n    fprintf(_stderr,\"%s\\n\",translatedMessage);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "FUN_00112925",
                "dcgettext",
                "strcmp",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "find_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00108a2a",
                "FUN_00119970",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "parse_arglist_0010b6ea",
                "param_1": "arg_1",
                "param_2": "arg_2",
                "param_3": "arglist",
                "param_4": "is_error",
                "__ptr": "result_array",
                "__format": "error_message",
                "lVar1": "parsed_value",
                "uVar2": "num_elems_added",
                "uVar3": "array_capacity",
                "uVar4": "temp_var",
                "local_39": "temp_buffer"
            },
            "code": "\n\n\nvoid * parse_arglist_0010b6ea(undefined8 arg_1,undefined8 arg_2,int *arglist,undefined *is_error)\n\n{\n  void *result_array;\n  char *error_message;\n  long parsed_value;\n  ulong num_elems_added;\n  ulong array_capacity;\n  uint temp_var;\n  char temp_buffer [9];\n  \n  array_capacity = 10;\n  num_elems_added = 0;\n  result_array = (void *)xmalloc(0x50);\n  *is_error = 0;\n  for (; arglist != (int *)0x0; arglist = *(int **)(arglist + 6)) {\n    if (*arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_array);\n      return (void *)0x0;\n    }\n    if (*(long *)(arglist + 4) == 0) break;\n    parsed_value = extract_data_from_binary_0010b0fa(arg_1,arg_2,*(long *)(arglist + 4),0,temp_buffer);\n    if (parsed_value == 0) {\n      if (temp_buffer[0] == '\\0') {\n        free(result_array);\n        return (void *)0x0;\n      }\n      *is_error = 1;\n    }\n    else {\n      temp_var = (int)num_elems_added + 1;\n      if ((uint)array_capacity <= temp_var) {\n        array_capacity = (ulong)((uint)array_capacity + 10);\n        result_array = (void *)xrealloc(result_array,array_capacity << 3);\n      }\n      *(long *)((long)result_array + num_elems_added * 8) = parsed_value;\n      num_elems_added = (ulong)temp_var;\n    }\n  }\n  *(undefined8 *)((long)result_array + num_elems_added * 8) = 0;\n  return result_array;\n}\n\n",
            "called": [
                "FUN_0010b0fa",
                "xmalloc",
                "fprintf",
                "dcgettext",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arglist_0010b6ea",
            "code_backup": "\n\n\nvoid * FUN_0010b6ea(undefined8 param_1,undefined8 param_2,int *param_3,undefined *param_4)\n\n{\n  void *__ptr;\n  char *__format;\n  long lVar1;\n  ulong uVar2;\n  ulong uVar3;\n  uint uVar4;\n  char local_39 [9];\n  \n  uVar3 = 10;\n  uVar2 = 0;\n  __ptr = (void *)xmalloc(0x50);\n  *param_4 = 0;\n  for (; param_3 != (int *)0x0; param_3 = *(int **)(param_3 + 6)) {\n    if (*param_3 != 0x2e) {\n      __format = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,__format);\n      free(__ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(param_3 + 4) == 0) break;\n    lVar1 = FUNC_0010b0fa(param_1,param_2,*(long *)(param_3 + 4),0,local_39);\n    if (lVar1 == 0) {\n      if (local_39[0] == '\\0') {\n        free(__ptr);\n        return (void *)0x0;\n      }\n      *param_4 = 1;\n    }\n    else {\n      uVar4 = (int)uVar2 + 1;\n      if ((uint)uVar3 <= uVar4) {\n        uVar3 = (ulong)((uint)uVar3 + 10);\n        __ptr = (void *)xrealloc(__ptr,uVar3 << 3);\n      }\n      *(long *)((long)__ptr + uVar2 * 8) = lVar1;\n      uVar2 = (ulong)uVar4;\n    }\n  }\n  *(undefined8 *)((long)__ptr + uVar2 * 8) = 0;\n  return __ptr;\n}\n\n"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "decode_and_copy_section_0011a2e0",
                "param_1": "source_address",
                "param_2": "binary_data",
                "uVar1": "source_offset",
                "uVar2": "error_message",
                "lVar3": "decoded_section_address",
                "lVar4": "section_name_address"
            },
            "code": "\nlong decode_and_copy_section_0011a2e0(long source_address,long binary_data)\n\n{\n  undefined8 source_offset;\n  undefined8 error_message;\n  long decoded_section_address;\n  long section_name_address;\n  \n  decoded_section_address = (**(code **)(*(long *)(binary_data + 8) + 0x208))(binary_data);\n  section_name_address = *(long *)(source_address + 0x20);\n  *(undefined8 *)(decoded_section_address + 8) = *(undefined8 *)(source_address + 8);\n  *(undefined8 *)(decoded_section_address + 0x10) = *(undefined8 *)(source_address + 0x10);\n  *(undefined4 *)(decoded_section_address + 0x18) = *(undefined4 *)(source_address + 0x18);\n  if (section_name_address == 0) {\n    section_name_address = 0x128598;\n  }\n  else {\n    section_name_address = bfd_get_section_by_name(binary_data);\n    if (section_name_address == 0) {\n      source_offset = *(undefined8 *)(source_address + 0x20);\n      error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n      print_error_and_exit_00119dd0(error_message,source_offset);\n    }\n  }\n  *(long *)(decoded_section_address + 0x20) = section_name_address;\n  return decoded_section_address;\n}\n\n",
            "called": [
                "bfd_get_section_by_name",
                "FUN_00108808"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decode_and_copy_section_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "append_and_process_string_0010e8a9",
                "param_1": "prefix",
                "param_2": "target",
                "param_3": "suffix",
                "uVar1": "result",
                "sVar2": "suffixLength",
                "__s": "combinedString"
            },
            "code": "\nundefined4 appendAndProcessString_0010e8a9(undefined8 prefix,undefined8 target,char *suffix)\n\n{\n  undefined4 result;\n  size_t suffixLength;\n  char *combinedString;\n  \n  suffixLength = strlen(suffix);\n  combinedString = (char *)xmalloc(suffixLength + 0x14);\n  sprintf(combinedString,\"%s:c=f%g\",prefix,suffix);\n  result = process_string_0010e2f0(target,0x80,0,0,combinedString);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "append_and_process_string_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "find_section_flags_00104ad6",
                "unaff_RBP": "current_section",
                "__s": "remaining_string",
                "sVar4": "remaining_length",
                "unaff_R14D": "flags",
                "unaff_R15": "section",
                "unaff_retaddr": "return_address",
                "iVar1": "comparison_result",
                "iVar5": "string_length",
                "pcVar3": "comma_position",
                "uVar2": "error_message",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] find_section_flags_00104ad6(void)\n\n{\n  int comparison_result;\n  undefined8 error_message;\n  char *comma_position;\n  char *current_section;\n  char *remaining_string;\n  size_t remaining_length;\n  int string_length;\n  uint flags;\n  char *section;\n  undefined result [16];\n  undefined8 return_address;\n  \n  do {\n    flags = flags | 0x2000;\n    remaining_string = current_section;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (remaining_string == (char *)0x0) {\n                result._4_4_ = 0;\n                result._0_4_ = flags;\n                result._8_8_ = return_address;\n                return result;\n              }\n              comma_position = strchr(remaining_string,0x2c);\n              if (comma_position == (char *)0x0) {\n                remaining_length = strlen(remaining_string);\n                string_length = (int)remaining_length;\n                current_section = (char *)0x0;\n              }\n              else {\n                current_section = comma_position + 1;\n                string_length = (int)comma_position - (int)remaining_string;\n              }\n              remaining_length = (size_t)string_length;\n              comparison_result = strncasecmp(section,remaining_string,remaining_length);\n              if (comparison_result != 0) break;\n              flags = flags | 1;\n              remaining_string = current_section;\n            }\n            comparison_result = strncasecmp(\"load\",remaining_string,remaining_length);\n            if (comparison_result != 0) break;\n            flags = flags | 2;\n            remaining_string = current_section;\n          }\n          comparison_result = strncasecmp(\"noload\",remaining_string,remaining_length);\n          if (comparison_result != 0) break;\n          flags = flags | 0x200;\n          remaining_string = current_section;\n        }\n        comparison_result = strncasecmp(\"readonly\",remaining_string,remaining_length);\n        if (comparison_result != 0) break;\n        flags = flags | 8;\n        remaining_string = current_section;\n      }\n      comparison_result = strncasecmp(\"debug\",remaining_string,remaining_length);\n      if (comparison_result == 0) break;\n      comparison_result = strncasecmp(\"code\",remaining_string,remaining_length);\n      if (comparison_result == 0) {\n        flags = flags | 0x10;\n        remaining_string = current_section;\n      }\n      else {\n        comparison_result = strncasecmp(\"data\",remaining_string,remaining_length);\n        if (comparison_result == 0) {\n          flags = flags | 0x20;\n          remaining_string = current_section;\n        }\n        else {\n          comparison_result = strncasecmp(\"rom\",remaining_string,remaining_length);\n          if (comparison_result == 0) {\n            flags = flags | 0x40;\n            remaining_string = current_section;\n          }\n          else {\n            comparison_result = strncasecmp(\"exclude\",remaining_string,remaining_length);\n            if (comparison_result == 0) {\n              flags = flags | 0x8000;\n              remaining_string = current_section;\n            }\n            else {\n              comparison_result = strncasecmp(\"share\",remaining_string,remaining_length);\n              if (comparison_result == 0) {\n                flags = flags | 0x8000000;\n                remaining_string = current_section;\n              }\n              else {\n                comparison_result = strncasecmp(\"contents\",remaining_string,remaining_length);\n                if (comparison_result == 0) {\n                  flags = flags | 0x100;\n                  remaining_string = current_section;\n                }\n                else {\n                  comparison_result = strncasecmp(\"merge\",remaining_string,remaining_length);\n                  if (comparison_result == 0) {\n                    flags = flags | 0x800000;\n                    remaining_string = current_section;\n                  }\n                  else {\n                    comparison_result = strncasecmp(\"strings\",remaining_string,remaining_length);\n                    if (comparison_result != 0) {\n                      comma_position = (char *)xmalloc((long)(string_length + 1));\n                      strncpy(comma_position,remaining_string,remaining_length);\n                      comma_position[remaining_length] = '\\0';\n                      error_message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      print_error_message_00119ed0(error_message,comma_position);\n                      error_message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      print_error_and_exit_00119dd0(error_message,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    flags = flags | 0x1000000;\n                    remaining_string = current_section;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00119dd0",
                "xmalloc",
                "strncpy",
                "strlen",
                "dcgettext",
                "strncasecmp",
                "FUN_00104ad6",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "find_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_is_equal_to0x100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXIsEqualTo0x100_001087da(void)\n\n{\n  long inputValue;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  result._1_7_ = 0;\n  result[0] = inputValue == 0x100;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_is_equal_to0x100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilation_unit",
                "param_2": "type_name",
                "param_3": "print_stream",
                "param_4": "result",
                "lVar1": "current_compilation_unit",
                "iVar2": "comparison_result",
                "uVar3": "message",
                "puVar4": "current_list_item",
                "lVar5": "current_item",
                "puVar6": "compilation_unit_list_item",
                "auVar7": "return_value"
            },
            "code": "\n\n\nundefined  [16] find_named_type_0010914e(long compilation_unit,char *type_name,undefined8 print_stream,undefined8 result)\n\n{\n  long current_compilation_unit;\n  int comparison_result;\n  undefined8 message;\n  undefined8 *current_list_item;\n  long current_item;\n  undefined8 *compilation_unit_list_item;\n  undefined return_value [16];\n  \n  current_compilation_unit = *(long *)(compilation_unit + 8);\n  if (current_compilation_unit == 0) {\n    message = dcgettext(0,\"debug_find_named_type_0010914e: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",message);\n  }\n  else {\n    for (current_item = *(long *)(compilation_unit + 0x20); current_item != 0; current_item = *(long *)(current_item + 8)) {\n      if (*(undefined8 **)(current_item + 0x28) != (undefined8 *)0x0) {\n        for (current_list_item = (undefined8 *)**(undefined8 **)(current_item + 0x28); current_list_item != (undefined8 *)0x0;\n            current_list_item = (undefined8 *)*current_list_item) {\n          if (*(int *)((long)current_list_item + 0x14) == 0) {\n            if (*(char *)current_list_item[1] == *type_name) {\n              comparison_result = strcmp((char *)current_list_item[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (compilation_unit_list_item = *(undefined8 **)(current_compilation_unit + 8); compilation_unit_list_item != (undefined8 *)0x0;\n        compilation_unit_list_item = (undefined8 *)*compilation_unit_list_item) {\n      if ((undefined8 *)compilation_unit_list_item[2] != (undefined8 *)0x0) {\n        for (current_list_item = *(undefined8 **)(undefined8 *)compilation_unit_list_item[2]; current_list_item != (undefined8 *)0x0;\n            current_list_item = (undefined8 *)*current_list_item) {\n          if (*(int *)((long)current_list_item + 0x14) == 0) {\n            if (*(char *)current_list_item[1] == *type_name) {\n              comparison_result = strcmp((char *)current_list_item[1],type_name);\n              if (comparison_result == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  message = 0;\nLAB_00109223:\n  return_value._8_8_ = result;\n  return_value._0_8_ = message;\n  return return_value;\nLAB_00109216:\n  message = current_list_item[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010d559",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_and_calculate_0010829e",
                "unaff_EBP": "errorCode",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkAndCalculate_0010829e(void)\n\n{\n  undefined8 result;\n  int errorCode;\n  \n  if (errorCode == 5) {\n    result = check_string_length_00113ede();\n    return result;\n  }\n  if ((errorCode != 4) && (errorCode == 6)) {\n    result = calculate_checksum_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113ede",
                "FUN_001082b3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_and_calculate_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_00108f08",
                "FUN_0010edb4"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_reverse_arch_mach_00104943",
                "in_RAX": "input_str",
                "iVar1": "input_int",
                "iVar2": "comparison_result",
                "lVar3": "converted_int",
                "sVar4": "string_length",
                "pcVar5": "arch_mach_string",
                "uVar6": "printable_arch_mach",
                "iVar7": "arch_mach_index",
                "lVar8": "param_index",
                "iVar9": "param_count",
                "unaff_R15D": "default_param_count",
                "uVar10": "loop_counter",
                "uVar11": "arch_mach_offset",
                "param_7": "max_param_count",
                "uStack000000000000000c": "indentation_level",
                "param_11": "arch_mach_list",
                "param_13": "param_list"
            },
            "code": "\n\n\nvoid printReverseArchMach_00104943(void)\n\n{\n  int input_int;\n  int comparison_result;\n  char *input_str;\n  long converted_int;\n  size_t string_length;\n  char *arch_mach_string;\n  undefined8 printable_arch_mach;\n  int arch_mach_index;\n  long param_index;\n  int param_count;\n  uint default_param_count;\n  ulong loop_counter;\n  uint arch_mach_offset;\n  int max_param_count;\n  uint indentation_level;\n  undefined8 arch_mach_list;\n  long param_list;\n  \n  converted_int = strtol(input_str,(char **)0x0,10);\n  input_int = (int)converted_int;\n  param_count = max_param_count;\n  indentation_level = default_param_count;\n  if (input_int == 0) {\n    input_int = 0x50;\n  }\n  do {\n    max_param_count = param_count;\n    if (arch_mach_list._4_4_ <= max_param_count) {\n      return;\n    }\n    param_index = (long)max_param_count;\n    arch_mach_index = (input_int - indentation_level) + -1;\n    converted_int = param_index;\n    do {\n      param_count = (int)converted_int;\n      if (arch_mach_list._4_4_ <= param_count) break;\n      string_length = strlen(*(char **)(param_list + converted_int * 0x60));\n      converted_int = converted_int + 1;\n      arch_mach_index = (arch_mach_index - (int)string_length) + -1;\n    } while (-1 < arch_mach_index);\n    printf(\"\\n%*s\",(ulong)(indentation_level + 1),&DAT_0011b4a1);\n    for (converted_int = param_index * 0x60; ((ulong)(uint)(param_count - max_param_count) + param_index) * 0x60 - converted_int != 0;\n        converted_int = converted_int + 0x60) {\n      printf(\"%s \",*(undefined8 *)(param_list + converted_int));\n    }\n    arch_mach_index = 2;\n    putc(10,_stdout);\n    do {\n      arch_mach_string = (char *)bfd_printable_arch_mach(arch_mach_index,0);\n      comparison_result = strcmp(arch_mach_string,\"UNKNOWN!\");\n      if (comparison_result != 0) {\n        printable_arch_mach = bfd_printable_arch_mach(arch_mach_index,0);\n        printf(\"%*s \",(ulong)indentation_level,printable_arch_mach);\n        arch_mach_offset = arch_mach_index - 2;\n        converted_int = param_index * 0x60;\n        comparison_result = max_param_count;\n        while (param_count != comparison_result) {\n          arch_mach_string = *(char **)(param_list + converted_int);\n          if (*(char *)((long)(char **)(param_list + converted_int) + (ulong)arch_mach_offset + 8) == '\\0') {\n            string_length = strlen(arch_mach_string);\n            for (loop_counter = string_length & 0xffffffff; (int)loop_counter != 0; loop_counter = (ulong)((int)loop_counter - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(arch_mach_string,_stdout);\n          }\n          comparison_result = comparison_result + 1;\n          if (param_count != comparison_result) {\n            putc(0x20,_stdout);\n          }\n          converted_int = converted_int + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      arch_mach_index = arch_mach_index + 1;\n    } while (arch_mach_index != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_printable_arch_mach",
                "putc",
                "strlen",
                "strtol",
                "strcmp",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_reverse_arch_mach_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "initialize_and_store_data_00113e23",
                "param_1": "input_1",
                "param_2": "input_2",
                "lVar1": "result",
                "puVar2": "allocated_memory"
            },
            "code": "\nlong initialize_and_store_data_00113e23(undefined8 input_1,undefined8 input_2)\n\n{\n  long result;\n  undefined8 *allocated_memory;\n  \n  result = initialize_function_00112904(1,0);\n  if (result != 0) {\n    allocated_memory = (undefined8 *)xmalloc(0x10);\n    *allocated_memory = input_1;\n    allocated_memory[1] = input_2;\n    *(undefined8 **)(result + 0x10) = allocated_memory;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_and_store_data_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_message_00108fb9",
                "param_1": "stabString",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabMessage_00108fb9(undefined8 stabString)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stabString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_00109ab1",
                "FUN_0011173a",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_bad_stab_message_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input",
                "param_2": "result",
                "iVar1": "currentDigit",
                "pbVar2": "ptr",
                "pbVar3": "nextPtr",
                "uVar4": "returnValue"
            },
            "code": "\nulong parseNumber_00108ea1(byte **input,int *result)\n\n{\n  int currentDigit;\n  byte *ptr;\n  byte *nextPtr;\n  ulong returnValue;\n  \n  ptr = *input;\n  returnValue = 0;\n  if (((&_sch_istable)[(ulong)*ptr * 2] & 4) != 0) {\n    nextPtr = ptr + 1;\n    currentDigit = (char)*ptr + -0x30;\n    *result = currentDigit;\n    *input = nextPtr;\n    if (((&_sch_istable)[(ulong)ptr[1] * 2] & 4) != 0) {\n      do {\n        ptr = nextPtr;\n        currentDigit = currentDigit * 10 + -0x30 + (int)(char)*ptr;\n        nextPtr = ptr + 1;\n      } while (((&_sch_istable)[(ulong)ptr[1] * 2] & 4) != 0);\n      if (ptr[1] == 0x5f) {\n        nextPtr = ptr + 2;\n        *input = nextPtr;\n        *result = currentDigit;\n      }\n    }\n    returnValue = CONCAT71((int7)((ulong)nextPtr >> 8),1);\n  }\n  return returnValue & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010d882",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_and_process_data_00108072",
                "dcgettext": "obtain_text_translation",
                "unaff_RBX": "parameters",
                "unaff_RBP": "base_pointer",
                "unaff_R12": "relevant_value",
                "unaff_R14B": "is_valid",
                "unaff_R15": "result",
                "LAB_00115695": "handle_failure",
                "process_data_00114190": "process_data",
                "LAB_00115860": "continue_processing",
                "LAB_00115889": "handle_data_failure",
                "process_alignment_00108179": "process_alignment",
                "find_relevant_value_00115d00": "find_relevant_value",
                "copy_private_data_0010808f": "copy_private_data",
                "print_error_info_001126c0": "print_error_info"
            },
            "code": "\n\n\nvoid set_and_process_data_00108072(void)\n\n{\n  byte bVar1;\n  undefined8 uVar2;\n  char cVar3;\n  uint uVar4;\n  long lVar5;\n  long lVar6;\n  long lVar7;\n  undefined8 *parameters;\n  long base_pointer;\n  long relevant_value;\n  long lVar8;\n  char is_valid;\n  long result;\n  \n  lVar5 = dcgettext(0,\"failed to set size\",5);\n  lVar8 = parameters[6];\n  lVar6 = process_data(*parameters,0,0x18);\n  if (lVar6 == 0) {\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    uVar2 = *parameters;\n    lVar8 = lVar8 + _DAT_001279b0;\n    *(long *)(result + 0x30) = lVar8;\n    *(long *)(result + 0x38) = lVar8;\n    lVar8 = parameters[7];\n    lVar6 = process_data(uVar2,0,0x60);\n    if (lVar6 == 0) goto handle_failure;\ncontinue_processing:\n    lVar7 = *(long *)(lVar6 + 0x20);\n    if ((*(byte *)(lVar6 + 0x14) & 0x40) != 0) {\n      lVar7 = lVar7 + lVar8;\n    }\n    *(long *)(result + 0x38) = lVar7;\n    lVar8 = process_data(*parameters,0,0x200);\n    if (lVar8 != 0) goto handle_data_failure;\nLAB_001156b8:\n    uVar4 = *(uint *)((long)parameters + 0x7c);\n    if (uVar4 < 0x3f) goto LAB_001156c4;\n    lVar5 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    bVar1 = *(byte *)((long)parameters + 0x27);\n  }\n  else {\n    lVar7 = *(long *)(lVar6 + 0x18);\n    if ((*(byte *)(lVar6 + 0x14) & 8) == 0) {\n      lVar7 = lVar7 + lVar8;\n    }\n    *(byte *)(result + 0x28) = *(byte *)(result + 0x28) | 1;\n    uVar2 = *parameters;\n    *(long *)(result + 0x30) = lVar7;\n    *(long *)(result + 0x38) = lVar7;\n    lVar8 = parameters[7];\n    lVar6 = process_data(uVar2,0,0x60);\n    if (lVar6 != 0) goto continue_processing;\nhandle_failure:\n    uVar2 = *parameters;\n    *(long *)(result + 0x38) = lVar8 + _DAT_001279b0;\n    lVar8 = process_data(uVar2,0,0x200);\n    if (lVar8 == 0) goto LAB_001156b8;\nhandle_data_failure:\n    uVar4 = *(uint *)(lVar8 + 0x2c);\n    if (0x3e < uVar4) {\n      process_alignment();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(result + 0x7c) = uVar4;\n    *(undefined4 *)(result + 0xb4) = *(undefined4 *)((long)parameters + 0xb4);\n    *(byte *)(result + 0x28) =\n         *(byte *)(result + 0x28) & 0xcf | *(byte *)(parameters + 5) & 0x30;\n    parameters[0xc] = result;\n    parameters[0xb] = 0;\n    bVar1 = *(byte *)((long)parameters + 0x27);\n  }\n  if ((bVar1 & 2) != 0) {\n    lVar8 = parameters[0x1a];\n    lVar6 = find_relevant_value(lVar8,parameters[0x1c]);\n    if ((lVar6 != 0) &&\n       (lVar7 = *(long *)(relevant_value + 8), *(uint *)(lVar6 + 0x18) = *(uint *)(lVar6 + 0x18) | 0x20,\n       *(int *)(lVar7 + 8) == 5)) {\n      *(long *)(lVar8 + 0xb0) = lVar6;\n      cVar3 = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        copy_private_data();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(base_pointer + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    copy_private_data();\n    return;\n  }\nLAB_0011571e:\n  if (is_valid != '\\0') {\n    *(undefined4 *)(*(long *)(result + 0xd0) + 4) = 8;\n  }\n  if (lVar5 != 0) {\n    DAT_00127a40 = 1;\n    print_error_info(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00108179",
                "FUN_00114190",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_and_process_data_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "process_data_0010a2b9",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "input1",
                "param_4": "input2",
                "cVar1": "char1",
                "__s": "extractedString",
                "sVar2": "strLen",
                "__s_00": "newString",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] processData_0010a2b9(long data,char flag,undefined8 input1,undefined8 input2)\n\n{\n  char char1;\n  char *extractedString;\n  size_t strLen;\n  char *newString;\n  long counter;\n  undefined result [16];\n  \n  char1 = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  extractedString = (char *)extract_and_free_next_entry_00109b2f();\n  strLen = strlen(extractedString);\n  newString = (char *)xmalloc(strLen + 0x1e);\n  if (flag == '\\0') {\n    *newString = '\\0';\n    counter = 0;\n    flag = char1;\n  }\n  else {\n    counter = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = counter + 1;\n    sprintf(newString,\"%ld=@S;\",counter);\n  }\n  strLen = strlen(newString);\n  sprintf(newString + strLen,\"S%s\",extractedString);\n  free(extractedString);\n  result._0_4_ = initialize_data_structure_00109b52(data,newString,counter,flag,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(newString);\n  }\n  result._8_8_ = input2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_0010554f",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "process_data_0010ec73",
                "param_1": "data",
                "param_2": "value",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined processData_0010ec73(long *data,long value,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (data[0x3c] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3c]);\n    data[0x3c] = -1;\n  }\n  if (data[0x3d] != -1) {\n    (**(code **)(*(long *)(*data + 8) + 0x50))(value,data[1] + 8 + data[0x3d]);\n    data[0x3d] = -1;\n  }\n  counter = *(int *)(data + 0x3f);\n  *(int *)(data + 0x3f) = counter + 1;\n  if (counter == 0) {\n    data[0x40] = value;\n  }\n  else {\n    if ((data[0x41] != -1) &&\n       (result = process_string_0010e2f0(data,0xc0,0,data[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    data[0x41] = value - data[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_00114e00",
                "param_1": "endiannessType",
                "dcgettext": "displayEndianness"
            },
            "code": "\nvoid getEndianness_00114e00(int endiannessType)\n\n{\n  if (endiannessType == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessType == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_set_file_time_00115970",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "filePermissions",
                "param_4": "fileTimestamp",
                "param_5": "shouldSetFileTime",
                "param_6": "returnValue",
                "uVar1": "copyResult",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16]\ncopyAndSetFileTime_00115970(char *sourceFilePath,char *destinationFilePath,undefined4 filePermissions,undefined8 fileTimestamp,char shouldSetFileTime,\n            undefined8 returnValue)\n\n{\n  uint copyResult;\n  int *errorNumber;\n  char *errorMessage;\n  undefined8 errorString;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = copy_file_00115a90(filePermissions,destinationFilePath,fileTimestamp);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorNumber = __errno_location();\n      errorMessage = strerror(*errorNumber);\n      errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00119ed0(errorString,destinationFilePath,errorMessage);\n    }\n    unlink(sourceFilePath);\n  }\n  if (shouldSetFileTime != '\\0') {\n    set_file_time_0011a350(destinationFilePath,fileTimestamp);\n  }\n  result._8_8_ = returnValue;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_set_file_time_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "process_data_0010adf2"
            },
            "code": "\nvoid process_data_0010adf2(void)\n\n{\n  process_data_0010adf2_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "process_data_0010d7d4",
                "param_1": "input_value",
                "param_2": "input_array",
                "param_3": "output_array",
                "param_4": "output_count_ptr",
                "param_5": "output_capacity_ptr",
                "uVar1": "first_value",
                "cVar2": "result_condition",
                "uVar3": "expanded_data_result",
                "lVar4": "temp_value",
                "plVar5": "temp_array",
                "uVar6": "temp_index",
                "local_40": "temp_array_buffer"
            },
            "code": "\nundefined4\nprocess_data_0010d7d4(undefined8 input_value,undefined8 *input_array,long *output_array,uint *output_count_ptr,uint *output_capacity_ptr)\n\n{\n  undefined8 first_value;\n  char result_condition;\n  undefined4 expanded_data_result;\n  long temp_value;\n  long *temp_array;\n  uint temp_index;\n  long temp_array_buffer [2];\n  \n  first_value = *input_array;\n  temp_array = temp_array_buffer;\n  if (output_array == (long *)0x0) {\n    temp_array = (long *)0x0;\n  }\n  result_condition = reverse_and_improve_code_0010c95e(input_value,input_array,temp_array);\n  if ((result_condition != '\\0') &&\n     (expanded_data_result = expand_and_store_data_00109be3(input_value,first_value,(int)*input_array - (int)first_value), (char)expanded_data_result != '\\0')) {\n    if (output_array == (long *)0x0) {\n      return expanded_data_result;\n    }\n    if (temp_array_buffer[0] != 0) {\n      if (*output_capacity_ptr <= *output_count_ptr + 1) {\n        temp_index = *output_capacity_ptr + 10;\n        temp_value = *output_array;\n        *output_capacity_ptr = temp_index;\n        temp_value = xrealloc(temp_value,(ulong)temp_index << 3);\n        *output_array = temp_value;\n      }\n      temp_index = *output_count_ptr;\n      *(long *)(*output_array + (ulong)temp_index * 8) = temp_array_buffer[0];\n      *output_count_ptr = temp_index + 1;\n      return expanded_data_result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109be3",
                "FUN_0010c95e",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "process_data_0010d7d4",
            "code_backup": "\nundefined4\nFUN_0010d7d4(undefined8 param_1,undefined8 *param_2,long *param_3,uint *param_4,uint *param_5)\n\n{\n  undefined8 uVar1;\n  char cVar2;\n  undefined4 uVar3;\n  long lVar4;\n  long *plVar5;\n  uint uVar6;\n  long local_40 [2];\n  \n  uVar1 = *param_2;\n  plVar5 = local_40;\n  if (param_3 == (long *)0x0) {\n    plVar5 = (long *)0x0;\n  }\n  cVar2 = FUNC_0010c95e(param_1,param_2,plVar5);\n  if ((cVar2 != '\\0') &&\n     (uVar3 = expand_and_store_data_00109be3(param_1,uVar1,(int)*param_2 - (int)uVar1), (char)uVar3 != '\\0')) {\n    if (param_3 == (long *)0x0) {\n      return uVar3;\n    }\n    if (local_40[0] != 0) {\n      if (*param_5 <= *param_4 + 1) {\n        uVar6 = *param_5 + 10;\n        lVar4 = *param_3;\n        *param_5 = uVar6;\n        lVar4 = xrealloc(lVar4,(ulong)uVar6 << 3);\n        *param_3 = lVar4;\n      }\n      uVar6 = *param_4;\n      *(long *)(*param_3 + (ulong)uVar6 * 8) = local_40[0];\n      *param_4 = uVar6 + 1;\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_location",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_00113f50(char *file_path)\n\n{\n  int status;\n  int *error_location;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      error_location = __errno_location();\n      if (*error_location == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00119ed0(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*error_location);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00119ed0(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00119ed0(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_00104966",
                "FUN_00119ed0",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_program_001087fd"
            },
            "code": "\nundefined8 initialize_program_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_program_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "param_1": "formats",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "stdout"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *formats)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(stdout);\n  data = DAT_00127600;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = formats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fputc",
                "fflush",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0011256b",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "FUNC_0011378f"
            },
            "code": "\nundefined4\nFUNC_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = process_entry_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_hash_table_init",
                "strlen",
                "strcpy",
                "FUN_0010e439",
                "FUN_0010e2f0",
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010bb52",
                "FUN_001135a5",
                "xmalloc",
                "thunk_FUN_0010e439",
                "FUN_00112502"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUNC_0011378f",
            "code_backup": "\nundefined4\nFUN_0011378f(undefined8 *param_1,undefined8 *param_2,long *param_3,undefined8 *param_4,\n            undefined8 *param_5,undefined8 *param_6)\n\n{\n  undefined auVar1 [16];\n  char cVar2;\n  undefined4 uVar3;\n  undefined8 uVar4;\n  undefined *puVar5;\n  size_t sVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  undefined4 *puVar9;\n  char *__dest;\n  undefined8 *puVar10;\n  long *plVar11;\n  byte bVar12;\n  undefined8 *local_258;\n  long local_250;\n  undefined4 local_248;\n  undefined4 uStack_244;\n  undefined4 uStack_240;\n  undefined4 uStack_23c;\n  undefined local_238 [16];\n  undefined8 local_228;\n  undefined local_220 [40];\n  undefined8 local_1f8;\n  undefined8 local_1f0;\n  undefined4 local_1e8 [82];\n  undefined local_a0 [40];\n  undefined local_78 [8];\n  undefined8 uStack_70;\n  undefined8 local_68;\n  undefined4 local_60;\n  undefined4 local_58;\n  undefined4 uStack_54;\n  undefined4 uStack_50;\n  undefined4 uStack_4c;\n  \n  bVar12 = 0;\n  local_248 = 0;\n  uStack_244 = 0;\n  uStack_240 = 500;\n  uStack_23c = 0;\n  local_258 = param_1;\n  local_250 = xmalloc(500);\n  local_228 = 1;\n  local_238 = ZEXT816(0);\n  cVar2 = bfd_hash_table_init(local_220,allocate_and_initialize_hash_0010bb52,0x30);\n  if ((cVar2 == '\\0') || (cVar2 = bfd_hash_table_init(local_a0,allocate_and_initialize_hash_0010bb52,0x30), cVar2 == '\\0')) {\n    uVar3 = bfd_get_error();\n    uVar4 = bfd_errmsg(uVar3);\n    print_error_message_00119ed0(\"bfd_hash_table_init_failed: %s\",uVar4);\n  }\n  else {\n    local_1f8 = 0;\n    unique0x100000e9 = 0xffffffff;\n    local_78 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    puVar9 = local_1e8;\n    for (lVar7 = 0x52; lVar7 != 0; lVar7 = lVar7 + -1) {\n      *puVar9 = 0;\n      puVar9 = puVar9 + (ulong)bVar12 * -2 + 1;\n    }\n    local_68 = 0;\n    local_60 = 0;\n    local_1f0 = 1;\n    local_58 = 0;\n    uStack_54 = 0;\n    uStack_50 = 0xffffffff;\n    uStack_4c = 0xffffffff;\n    cVar2 = process_string_0010e2f0(&local_258,0,0,0,0);\n    auVar1 = _local_78;\n    if (cVar2 != '\\0') {\n      local_78._4_4_ = uStack_244;\n      local_78._0_4_ = local_248;\n      uStack_70 = auVar1._8_8_;\n      cVar2 = process_string_0010e2f0(&local_258,100,0,0,*param_1);\n      if (cVar2 != '\\0') {\n        *(int *)(param_2 + 6) = *(int *)(param_2 + 6) + 1;\n        param_2[10] = 0;\n        puVar10 = (undefined8 *)*param_2;\n        *(undefined4 *)(param_2 + 7) = *(undefined4 *)((long)param_2 + 0x34);\n        for (; puVar10 != (undefined8 *)0x0; puVar10 = (undefined8 *)*puVar10) {\n          param_2[8] = puVar10[2];\n          *(undefined4 *)(param_2 + 9) = 0;\n          cVar2 = thunk_set_param_and_process_string_0010e439(&local_258,*(undefined8 *)(puVar10[1] + 8));\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n          plVar11 = (long *)puVar10[1];\n          if (plVar11 != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)plVar11[2] != (undefined8 *)0x0) {\n                for (puVar8 = *(undefined8 **)(undefined8 *)plVar11[2]; puVar8 != (undefined8 *)0x0;\n                    puVar8 = (undefined8 *)*puVar8) {\n                  cVar2 = FUNC_001135a5(param_2,&local_258);\n                  if (cVar2 == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              plVar11 = (long *)*plVar11;\n              if (plVar11 == (long *)0x0) break;\n              cVar2 = set_param_and_process_string_0010e439(&local_258,plVar11[1]);\n              if (cVar2 == '\\0') {\n                return 0;\n              }\n            }\n          }\n          cVar2 = process_files_00112502(param_2,&local_258,0xffffffffffffffff);\n          if (cVar2 == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(uStack_4c,uStack_50) == -1) &&\n           (uVar3 = process_string_0010e2f0(&local_258,100,0,local_68,0), (char)uVar3 != '\\0')) {\n          (**(code **)(param_1[1] + 0x50))(local_228,local_250 + 8);\n          *param_3 = local_250;\n          *param_4 = CONCAT44(uStack_244,local_248);\n          *param_6 = local_228;\n          puVar5 = (undefined *)xmalloc();\n          *puVar5 = 0;\n          __dest = puVar5 + 1;\n          *param_5 = puVar5;\n          for (lVar7 = local_238._0_8_; lVar7 != 0; lVar7 = *(long *)(lVar7 + 0x18)) {\n            strcpy(__dest,*(char **)(lVar7 + 8));\n            sVar6 = strlen(__dest);\n            __dest = __dest + sVar6 + 1;\n          }\n          return uVar3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_file_error_00104966",
                "piVar1": "errno_ptr",
                "uVar2": "translated_message"
            },
            "code": "\nundefined8 handle_file_error_00104966(void)\n\n{\n  int *errno_ptr;\n  undefined8 translated_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    translated_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message_00119ed0(translated_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    translated_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message_00119ed0(translated_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_file_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "process_data_0010a0a0",
                "param_1": "data",
                "process_data_00109ed3": "process_data_helper"
            },
            "code": "\nvoid process_data_0010a0a0(long data)\n\n{\n  process_data_0010a0a0_helper(data,0x26,4,data + 0x198,data + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "print_error_message_00119ed0",
                "param_1": "errorType",
                "param_2": "errorCode",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "local1",
                "local_d4": "local2",
                "local_d0": "local3",
                "local_c8": "local4",
                "local_b8": "localArray",
                "local_b0": "local5",
                "local_a8": "local6",
                "local_a0": "local7",
                "local_98": "local8",
                "local_90": "local9",
                "local_88": "local10",
                "local_78": "local11",
                "local_68": "local12",
                "local_58": "local13",
                "local_48": "local14",
                "local_38": "local15",
                "local_28": "local16",
                "local_18": "local17"
            },
            "code": "\nvoid printErrorMessage_00119ed0(undefined4 errorType,undefined4 errorCode,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 local1;\n  undefined4 local2;\n  undefined *local3;\n  undefined *local4;\n  undefined localArray [8];\n  undefined8 local5;\n  undefined8 local6;\n  undefined8 local7;\n  undefined8 local8;\n  undefined8 local9;\n  undefined4 local10;\n  undefined4 local11;\n  undefined4 local12;\n  undefined4 local13;\n  undefined4 local14;\n  undefined4 local15;\n  undefined4 local16;\n  undefined4 local17;\n  \n  if (flag != '\\0') {\n    local10 = errorType;\n    local11 = errorCode;\n    local12 = param3;\n    local13 = param4;\n    local14 = param5;\n    local15 = param6;\n    local16 = param7;\n    local17 = param8;\n  }\n  local3 = &stack0x00000008;\n  local1 = 8;\n  local4 = localArray;\n  local2 = 0x30;\n  local5 = param10;\n  local6 = param11;\n  local7 = param12;\n  local8 = param13;\n  local9 = param14;\n  print_error_message_00119e70(errorMessage,&local1);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104966",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_00114690",
                "FUN_0010e6a8",
                "FUN_00108375",
                "FUN_00104ad6",
                "FUN_00108200",
                "FUN_0010e2f0",
                "FUN_00113f50",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_0011378f",
                "FUN_0010ba08",
                "FUN_001152b6",
                "FUN_0010b800",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_message_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "process_debug_function_00112c1f",
                "param_1": "infoBase",
                "param_2": "dataFormat",
                "param_3": "debugInfo",
                "param_4": "dataStruct",
                "plVar1": "pointerVar1",
                "lVar2": "var2",
                "puVar3": "pointerVar3",
                "puVar4": "pointerVar4",
                "cVar5": "charVar",
                "piVar6": "intPtr",
                "uVar7": "resultVar",
                "uVar8": "dataVar",
                "iVar9": "intVar",
                "uVar10": "undefinedVar",
                "uVar11": "dataVar2",
                "uVar12": "ulongVar",
                "uVar13": "uintVar",
                "bVar14": "boolVar",
                "local_3c": "localVar3c",
                "lookup_and_format_data_0010bba1": "lookupAndFormatData",
                "find_circular_debug_info_00112b6e": "findCircularDebugInfo",
                "debug_set_class_id_0010c7a0": "debugSetClassID",
                "dcgettext": "dcGetText",
                "initialize_or_format_data_00109dfe": "initializeOrFormatData",
                "format_and_initialize_0010b800": "formatAndInitializeData",
                "initialize_or_format_data_0010b948": "initializeOrFormatData2",
                "update_and_initialize_data_structure_00109e76": "updateAndInitializeDataStructure",
                "initialize_formatted_data_00109d3e": "initializeFormattedData",
                "allocate_and_initialize_data_00109d5c": "allocateAndInitializeData",
                "generate_warning_message_0010ba08": "generateWarningMessage",
                "populate_data_structure_0010a77a": "populateDataStructure",
                "process_data_0010a83e": "processData2",
                "append_to_log_0010ab4d": "appendToLog",
                "create_url_0010a94e": "createURL",
                "append_semicolon_to_end_of_string_00109bbb": "appendSemicolon",
                "concatenate_strings_with_delimiters_0010ae0e": "concatStrings",
                "initialize_data_structure_0010e453": "initializeDataStruct",
                "process_data_and_update_0010a083": "processDataAndUpdate",
                "process_entry_0010a0e9": "processEntry",
                "reverse_and_initialize_0010a377": "reverseAndInitialize",
                "process_entries_0010e5db": "processEntries",
                "process_data_0010a0a0": "processData3",
                "process_data_0010a181": "processData4",
                "process_data_0010a0d3": "processData6",
                "abort": "abortFunction"
            },
            "code": "\n\n\nundefined8 processDebugFunction_00112c1f(ulong infoBase,undefined8 dataFormat,int *debugInfo,long dataStruct)\n\n{\n  long *pointerVar1;\n  long var2;\n  undefined8 *pointerVar3;\n  undefined8 *pointerVar4;\n  char charVar;\n  int *intPtr;\n  undefined8 resultVar;\n  undefined8 dataVar;\n  int intVar;\n  undefined4 undefinedVar;\n  undefined8 dataVar2;\n  ulong ulongVar;\n  uint uintVar;\n  bool boolVar;\n  uint localVar3c;\n  \n  ulongVar = infoBase;\nLAB_00112c39:\n  if (debugInfo != (int *)0x0) {\n    intVar = *debugInfo;\n    if (intVar - 0x16U < 2) {\n      do {\n        pointerVar1 = *(long **)(debugInfo + 4);\n        uintVar = *(uint *)(infoBase + 0x30);\n        ulongVar = (ulong)uintVar;\n        var2 = *pointerVar1;\n        if (*(uint *)(var2 + 0x10) == uintVar) {\n          if (intVar == 0x16) {\n            resultVar = lookupAndFormatData(dataFormat,*(undefined8 *)(var2 + 8));\n            return resultVar;\n          }\nLAB_00112c94:\n          intPtr = (int *)findCircularDebugInfo(debugInfo,0);\n          if (intPtr == (int *)0x0) goto LAB_00112dd6;\n          if ((*intPtr - 7U < 4) && (*(long *)(intPtr + 4) != 0)) {\n            if ((*(uint *)(*(long *)(intPtr + 4) + 0xc) <= *(uint *)(infoBase + 0x38)) &&\n               (charVar = debugSetClassID(infoBase,*(undefined8 *)(**(long **)(debugInfo + 4) + 8),intPtr),\n               charVar == '\\0')) {\n              return 0;\n            }\n            uintVar = *(uint *)(*(long *)(intPtr + 4) + 0xc);\n          }\n          else {\n            uintVar = 0;\n          }\n          intVar = *intPtr;\n          resultVar = *(undefined8 *)(**(long **)(debugInfo + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (intVar == 0x17) {\n          if (var2 != dataStruct) goto LAB_00112c94;\n          *(uint *)(dataStruct + 0x10) = uintVar;\n          dataStruct = *pointerVar1;\n          debugInfo = (int *)pointerVar1[1];\n          goto LAB_00112c39;\n        }\n        if (dataStruct != 0) {\n          *(uint *)(dataStruct + 0x10) = uintVar;\n        }\n        debugInfo = (int *)pointerVar1[1];\n        if (debugInfo == (int *)0x0) goto LAB_00112dd6;\n        intVar = *debugInfo;\n        dataStruct = 0;\n      } while (intVar - 0x16U < 2);\nLAB_00112d74:\n      resultVar = 0;\n    }\n    else {\n      if (dataStruct == 0) goto LAB_00112d74;\n      *(undefined4 *)(dataStruct + 0x10) = *(undefined4 *)(infoBase + 0x30);\n      if (*(int *)(dataStruct + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      resultVar = *(undefined8 *)(dataStruct + 8);\n    }\n    switch(intVar) {\n    case 0:\n      resultVar = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",resultVar);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      resultVar = initializeOrFormatData(dataFormat);\n      return resultVar;\n    case 3:\n      resultVar = formatAndInitializeData(dataFormat,debugInfo[1],*(undefined *)(debugInfo + 4));\n      return resultVar;\n    case 4:\n      resultVar = initializeOrFormatData2(dataFormat,debugInfo[1]);\n      return resultVar;\n    case 5:\n      resultVar = updateAndInitializeDataStructure(dataFormat,debugInfo[1]);\n      return resultVar;\n    case 6:\n      resultVar = initializeFormattedData(dataFormat,debugInfo[1]);\n      return resultVar;\n    case 7:\n    case 8:\n      if (*(long *)(debugInfo + 4) != 0) {\n        if ((*(uint *)(*(long *)(debugInfo + 4) + 0xc) <= *(uint *)(infoBase + 0x38)) &&\n           (charVar = debugSetClassID(infoBase,resultVar,debugInfo), charVar == '\\0')) {\n          return 0;\n        }\n        var2 = *(long *)(debugInfo + 4);\n        if (*(int *)(infoBase + 0x30) == *(int *)(var2 + 8)) {\n          uintVar = *(uint *)(var2 + 0xc);\n          if (uintVar <= *(uint *)(infoBase + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          intVar = *debugInfo;\nLAB_00112ed2:\n          resultVar = allocateAndInitializeData(dataFormat,resultVar,uintVar,intVar);\n          return resultVar;\n        }\n        *(int *)(var2 + 8) = *(int *)(infoBase + 0x30);\n      }\n      undefinedVar = 0;\n      if (*(long *)(debugInfo + 4) != 0) {\n        undefinedVar = *(undefined4 *)(*(long *)(debugInfo + 4) + 0xc);\n      }\n      charVar = initialize_data_0010a69a(dataFormat,resultVar,undefinedVar,*debugInfo == 7,debugInfo[1]);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(debugInfo + 4) != (long *)0x0) && (ulongVar = 0, **(long **)(debugInfo + 4) != 0)) {\n        while( true ) {\n          pointerVar4 = *(undefined8 **)(**(long **)(debugInfo + 4) + ulongVar * 8);\n          if (pointerVar4 == (undefined8 *)0x0) break;\n          charVar = processDebugFunction_00112c1f(infoBase,dataFormat,pointerVar4[1],0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n          charVar = generateWarningMessage(dataFormat,*pointerVar4,*(undefined4 *)(pointerVar4 + 3),\n                               *(undefined4 *)((long)pointerVar4 + 0x1c),*(undefined4 *)(pointerVar4 + 2));\n          if (charVar == '\\0') {\n            return 0;\n          }\n          ulongVar = (ulong)((int)ulongVar + 1);\n        }\n      }\n      resultVar = populateDataStructure(dataFormat);\n      return resultVar;\n    case 9:\n    case 10:\n      if (*(long *)(debugInfo + 4) == 0) {\n        uintVar = 0;\n        intPtr = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(debugInfo + 4) + 0xc) <= *(uint *)(infoBase + 0x38)) &&\n           (ulongVar = infoBase, charVar = debugSetClassID(infoBase,resultVar,debugInfo), charVar == '\\0')) {\n          return 0;\n        }\n        var2 = *(long *)(debugInfo + 4);\n        uintVar = *(uint *)(var2 + 0xc);\n        if (*(int *)(infoBase + 0x30) == *(int *)(var2 + 8)) {\n          if (uintVar <= *(uint *)(infoBase + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          intVar = *debugInfo;\n          goto LAB_00112ed2;\n        }\n        intPtr = *(int **)(var2 + 0x20);\n        *(int *)(var2 + 8) = *(int *)(infoBase + 0x30);\n        if (((intPtr != (int *)0x0) && (debugInfo != intPtr)) &&\n           (ulongVar = infoBase, charVar = processDebugFunction_00112c1f(infoBase,dataFormat,intPtr,0), charVar == '\\0')) {\n          return 0;\n        }\n      }\n      charVar = processData2(dataFormat,resultVar,uintVar,*debugInfo == 9,debugInfo[1],intPtr != (int *)0x0,\n                           debugInfo == intPtr,ulongVar);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(debugInfo + 4) != (long *)0x0) {\n        uintVar = 0;\n        if (**(long **)(debugInfo + 4) != 0) {\n          while (pointerVar4 = *(undefined8 **)(**(long **)(debugInfo + 4) + (ulong)uintVar * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = processDebugFunction_00112c1f(infoBase,dataFormat,pointerVar4[1],0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)pointerVar4 + 0x14) == '\\0') {\n              charVar = generateWarningMessage(dataFormat,*pointerVar4,*(undefined4 *)(pointerVar4 + 3));\n            }\n            else {\n              charVar = createURL(dataFormat,*pointerVar4,pointerVar4[3]);\n            }\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        uintVar = 0;\n        if (*(long *)(*(long *)(debugInfo + 4) + 0x10) != 0) {\n          while (pointerVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(debugInfo + 4) + 0x10) + (ulong)uintVar * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*pointerVar4,0);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            charVar = process_entry_0010aa53(dataFormat,*(undefined4 *)(pointerVar4 + 1),\n                                 *(undefined *)((long)pointerVar4 + 0xc));\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = uintVar + 1;\n          }\n        }\n        localVar3c = 0;\n        if (*(long *)(*(long *)(debugInfo + 4) + 0x18) != 0) {\n          while (pointerVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(debugInfo + 4) + 0x18) + (ulong)localVar3c * 8),\n                pointerVar4 != (undefined8 *)0x0) {\n            charVar = appendToLog(dataFormat,*pointerVar4);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            uintVar = 0;\n            while (pointerVar3 = *(undefined8 **)(pointerVar4[1] + (ulong)uintVar * 8),\n                  pointerVar3 != (undefined8 *)0x0) {\n              if ((pointerVar3[4] != 0) &&\n                 (charVar = processDebugFunction_00112c1f(infoBase,dataFormat,pointerVar3[4],0), charVar == '\\0')) {\n                return 0;\n              }\n              charVar = processDebugFunction_00112c1f(infoBase,dataFormat,pointerVar3[1],0);\n              if (charVar == '\\0') {\n                return 0;\n              }\n              if (pointerVar3[3] == -1) {\n                charVar = process_data_0010adf2(dataFormat,*pointerVar3,*(undefined4 *)(pointerVar3 + 2),\n                                     *(undefined *)((long)pointerVar3 + 0x14),\n                                     *(undefined *)((long)pointerVar3 + 0x15));\n              }\n              else {\n                charVar = process_data_0010add5(dataFormat);\n              }\n              if (charVar == '\\0') {\n                return 0;\n              }\n              uintVar = uintVar + 1;\n            }\n            charVar = appendSemicolon(dataFormat);\n            if (charVar == '\\0') {\n              return 0;\n            }\n            localVar3c = localVar3c + 1;\n          }\n        }\n      }\n      resultVar = concatStrings(dataFormat);\n      return resultVar;\n    case 0xb:\n      pointerVar4 = *(undefined8 **)(debugInfo + 4);\n      if (pointerVar4 == (undefined8 *)0x0) {\n        dataVar = 0;\n        dataVar2 = 0;\n      }\n      else {\n        dataVar = pointerVar4[1];\n        dataVar2 = *pointerVar4;\n      }\n      resultVar = initializeDataStruct(dataFormat,resultVar,dataVar2,dataVar);\n      return resultVar;\n    case 0xc:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = processDataAndUpdate(dataFormat);\n      return resultVar;\n    case 0xd:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      ulongVar = 0;\n      if (*(long *)(*(long *)(debugInfo + 4) + 8) == 0) {\n        ulongVar = 0xffffffff;\n      }\n      else {\n        while (var2 = *(long *)(*(long *)(*(long *)(debugInfo + 4) + 8) + ulongVar * 8), var2 != 0) {\n          ulongVar = ulongVar + 1;\n          charVar = processDebugFunction_00112c1f(infoBase,dataFormat,var2,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n        ulongVar = ulongVar & 0xffffffff;\n      }\n      resultVar = processEntries(dataFormat,ulongVar,*(undefined *)(*(long *)(debugInfo + 4) + 0x10));\n      return resultVar;\n    case 0xe:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = processData3(dataFormat);\n      return resultVar;\n    case 0xf:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = processEntry(dataFormat,*(undefined8 *)(*(long *)(debugInfo + 4) + 8),\n                           *(undefined8 *)(*(long *)(debugInfo + 4) + 0x10));\n      return resultVar;\n    case 0x10:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(*(long *)(debugInfo + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      var2 = *(long *)(debugInfo + 4);\n      resultVar = processData4(dataFormat,*(undefined8 *)(var2 + 0x10),*(undefined8 *)(var2 + 0x18),\n                           *(undefined *)(var2 + 0x20));\n      return resultVar;\n    case 0x11:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = process_data_0010a2b9(dataFormat,*(undefined *)(*(long *)(debugInfo + 4) + 8));\n      return resultVar;\n    case 0x12:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(*(long *)(debugInfo + 4) + 8),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = reverseAndInitialize(dataFormat);\n      return resultVar;\n    case 0x13:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,**(undefined8 **)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      ulongVar = 0;\n      if (*(long *)(*(long *)(debugInfo + 4) + 0x10) == 0) {\n        ulongVar = 0xffffffff;\n      }\n      else {\n        while (var2 = *(long *)(*(long *)(*(long *)(debugInfo + 4) + 0x10) + ulongVar * 8), var2 != 0)\n        {\n          ulongVar = ulongVar + 1;\n          charVar = processDebugFunction_00112c1f(infoBase,dataFormat,var2,0);\n          if (charVar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(debugInfo + 4) + 8) != 0) &&\n         (charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(long *)(*(long *)(debugInfo + 4) + 8),0),\n         charVar == '\\0')) {\n        return 0;\n      }\n      resultVar = process_data_0010a424(dataFormat,*(long *)(*(long *)(debugInfo + 4) + 8) != 0,ulongVar & 0xffffffff,\n                           *(undefined *)(*(long *)(debugInfo + 4) + 0x18));\n      return resultVar;\n    case 0x14:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = process_data_wrapper_0010a0bd(dataFormat);\n      return resultVar;\n    case 0x15:\n      charVar = processDebugFunction_00112c1f(infoBase,dataFormat,*(undefined8 *)(debugInfo + 4),0);\n      if (charVar == '\\0') {\n        return 0;\n      }\n      resultVar = processData6(dataFormat);\n      return resultVar;\n    default:\n                    \n      abortFunction();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  boolVar = *(int **)**(undefined8 **)(debugInfo + 4) == debugInfo;\n  debugInfo = *(int **)**(undefined8 **)(debugInfo + 4);\n  if (boolVar) {\nLAB_00112dd6:\n    resultVar = initialize_or_format_data_00109d97(dataFormat);\n    return resultVar;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010ab4d",
                "FUN_0010a94e",
                "dcgettext",
                "FUN_0010a377",
                "FUN_0010a181",
                "FUN_0010a77a",
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a2b9",
                "FUN_0010a69a",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010c7a0",
                "FUN_0010adf2",
                "FUN_00109d3e",
                "FUN_0010b800",
                "FUN_0010a0a0",
                "FUN_00109e76",
                "FUN_0010a083",
                "FUN_00109dfe",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "__assert_fail",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_0010a0bd",
                "FUN_0010ae0e",
                "FUN_00112c1f",
                "FUN_00112b6e",
                "FUN_00109d5c",
                "FUN_00109bbb",
                "FUN_0010a83e",
                "FUN_0010e453",
                "FUN_0010add5",
                "FUN_0010bba1",
                "FUN_0010ba08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_debug_function_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "shouldCopy",
                "unaff_R15": "dataAddress",
                "lVar1": "copyErrorMessage"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long copyErrorMessage;\n  char shouldCopy;\n  long dataAddress;\n  \n  copyErrorMessage = dcgettext(0,\"failed to copy private data\",5);\n  if (shouldCopy != '\\0') {\n    *(undefined4 *)(*(long *)(dataAddress + 0xd0) + 4) = 8;\n  }\n  if (copyErrorMessage != 0) {\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "message",
                "param_2": "source",
                "in_RAX": "result",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 message,undefined8 source)\n\n{\n  undefined8 result;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,source,message,result);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0011173a",
                "FUN_00109a32",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "check_architecture_00105828",
                "iVar1": "architectureCode",
                "uVar2": "machineCode",
                "uVar3": "fileName",
                "uVar4": "errorMessage"
            },
            "code": "\nundefined8 checkArchitecture_00105828(void)\n\n{\n  int architectureCode;\n  undefined4 machineCode;\n  undefined8 fileName;\n  undefined8 errorMessage;\n  \n  architectureCode = bfd_get_arch();\n  if (architectureCode == 0) {\n    fileName = build_filename_001125fa();\n    errorMessage = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,fileName);\n  }\n  else {\n    fileName = bfd_get_mach();\n    machineCode = bfd_get_arch();\n    fileName = bfd_printable_arch_mach(machineCode,fileName);\n    errorMessage = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    print_error_message_00119ed0(errorMessage,fileName);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "bfd_get_arch",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "check_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "file_path",
                "pcVar1": "temp_path"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *file_path;\n  char *temp_path;\n  \n  file_path = (char *)allocate_file_path_00114cf0();\n  temp_path = mkdtemp(file_path);\n  if (temp_path == (char *)0x0) {\n    free(file_path);\n  }\n  return temp_path;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_format_data_0010bba1",
                "param_1": "baseAddress",
                "param_2": "data",
                "lVar1": "lookupResult",
                "uVar2": "formattedData"
            },
            "code": "\nundefined8 lookupAndFormatData_0010bba1(long baseAddress,undefined8 data)\n\n{\n  long lookupResult;\n  undefined8 formattedData;\n  \n  lookupResult = bfd_hash_lookup(baseAddress + 0x1b8,data,0,0);\n  if ((lookupResult != 0) && (0 < *(long *)(lookupResult + 0x20))) {\n    formattedData = initialize_and_format_data_00109cf4(baseAddress,*(long *)(lookupResult + 0x20),*(undefined4 *)(lookupResult + 0x28));\n    return formattedData;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_format_data_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_entry_0010e6a8",
                "param_2": "input_string",
                "param_4": "output_param",
                "__s": "extracted_string",
                "sVar3": "input_length",
                "sVar4": "extracted_length",
                "__s_00": "result_string",
                "lVar8": "entry_count",
                "uVar2": "entry_type",
                "uVar1": "process_result",
                "lVar5": "hash_lookup_result",
                "uVar6": "error_message",
                "uVar7": "error_format",
                "uVar9": "return_value",
                "auVar10": "return_data"
            },
            "code": "\nundefined  [16] process_string_entry_0010e6a8(long param_1,char *input_string,undefined8 param_3,undefined8 output_param)\n\n{\n  uint process_result;\n  undefined4 entry_type;\n  char *extracted_string;\n  size_t input_length;\n  size_t extracted_length;\n  char *result_string;\n  long hash_lookup_result;\n  undefined8 error_message;\n  undefined8 error_format;\n  long entry_count;\n  ulong return_value;\n  undefined return_data [16];\n  \n  entry_count = *(long *)(*(long *)(param_1 + 0x60) + 0x10);\n  entry_type = *(undefined4 *)(*(long *)(param_1 + 0x60) + 0x18);\n  extracted_string = (char *)extract_and_free_next_entry_00109b2f();\n  input_length = strlen(input_string);\n  extracted_length = strlen(extracted_string);\n  result_string = (char *)xmalloc(input_length + 0x14 + extracted_length);\n  if (entry_count < 1) {\n    entry_count = *(long *)(param_1 + 0x68);\n    *(long *)(param_1 + 0x68) = entry_count + 1;\n    sprintf(result_string,\"%s:t%ld=%s\",input_string,entry_count,extracted_string);\n  }\n  else {\n    sprintf(result_string,\"%s:t%s\",input_string,extracted_string);\n  }\n  free(extracted_string);\n  process_result = process_string_0010e2f0(param_1,0x80,0,0,result_string);\n  return_value = (ulong)process_result;\n  if ((char)process_result != '\\0') {\n    free(result_string);\n    hash_lookup_result = bfd_hash_lookup(param_1 + 0x1b8,input_string,1,0);\n    if (hash_lookup_result != 0) {\n      *(long *)(hash_lookup_result + 0x20) = entry_count;\n      *(undefined4 *)(hash_lookup_result + 0x28) = entry_type;\n      goto LAB_0010e7b3;\n    }\n    entry_type = bfd_get_error();\n    error_message = bfd_errmsg(entry_type);\n    error_format = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    print_error_message_00119ed0(error_format,error_message);\n  }\n  return_value = 0;\nLAB_0010e7b3:\n  return_data._8_8_ = output_param;\n  return_data._0_8_ = return_value;\n  return return_data;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "xmalloc",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_entry_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "process_and_format_entry_0010e7c2",
                "param_1": "entry_info",
                "param_2": "input_string",
                "__s": "extracted_entry",
                "sVar1": "input_string_length",
                "sVar2": "extracted_entry_length",
                "__s_00": "formatted_entry",
                "auVar3": "result_variable"
            },
            "code": "\nundefined  [16] process_and_format_entry_0010e7c2(undefined8 entry_info,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  char *extracted_entry;\n  size_t input_string_length;\n  size_t extracted_entry_length;\n  char *formatted_entry;\n  undefined result_variable [16];\n  \n  extracted_entry = (char *)extract_and_free_next_entry_00109b2f();\n  input_string_length = strlen(input_string);\n  extracted_entry_length = strlen(extracted_entry);\n  formatted_entry = (char *)xmalloc(input_string_length + 3 + extracted_entry_length);\n  sprintf(formatted_entry,\"%s:T%s\",input_string,extracted_entry);\n  free(extracted_entry);\n  result_variable._0_4_ = process_string_0010e2f0(entry_info,0x80,0,0,formatted_entry);\n  result_variable._4_4_ = 0;\n  if ((char)result_variable._0_4_ != '\\0') {\n    free(formatted_entry);\n  }\n  result_variable._8_8_ = param_4;\n  return result_variable;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_entry_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "print_error_and_exit_00119dd0",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "bufferSize",
                "local_d4": "length",
                "local_d0": "source",
                "local_c8": "destination",
                "local_b8": "buffer",
                "local_b0": "param10",
                "local_a8": "param11",
                "local_a0": "param12",
                "local_98": "param13",
                "local_90": "param14",
                "local_88": "errorCode",
                "local_78": "param2",
                "local_68": "param3",
                "local_58": "param4",
                "local_48": "param5",
                "local_38": "param6",
                "local_28": "param7",
                "local_18": "param8"
            },
            "code": "\nvoid print_error_and_exit_00119dd0(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 bufferSize;\n  undefined4 length;\n  undefined *source;\n  undefined *destination;\n  undefined buffer [8];\n  undefined8 param10;\n  undefined8 param11;\n  undefined8 param12;\n  undefined8 param13;\n  undefined8 param14;\n  undefined4 errorCode;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  undefined4 param5;\n  undefined4 param6;\n  undefined4 param7;\n  undefined4 param8;\n  \n  if (condition != '\\0') {\n    errorCode = errorCode;\n    param2 = param2;\n    param3 = param3;\n    param4 = param4;\n    param5 = param5;\n    param6 = param6;\n    param7 = param7;\n    param8 = param8;\n  }\n  source = &stack0x00000008;\n  bufferSize = 8;\n  destination = buffer;\n  length = 0x30;\n  param10 = param10;\n  param11 = param11;\n  param12 = param12;\n  param13 = param13;\n  param14 = param14;\n  print_error_message_00119e70(errorMessage,&bufferSize);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00114190",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_001083de",
                "FUN_00115b70",
                "FUN_00108808",
                "FUN_0010543c",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00114460",
                "FUN_0010da0b",
                "FUN_00114dc7",
                "FUN_001053b5"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_param_error_001083b7",
                "param_1": "error_code",
                "iVar1": "bfd_error",
                "unaff_RBP": "print_error_ptr",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined8 handle_param_error_001083b7(long error_code)\n\n{\n  int bfd_error;\n  undefined8 *print_error_ptr;\n  undefined8 return_address;\n  \n  if (error_code == -1) {\n    bfd_error = bfd_get_error();\n    if (bfd_error == 5) {\n      return return_address;\n    }\n  }\n  print_error_0011a110(*print_error_ptr);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_error",
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_param_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "find_records_00116852",
                "in_RCX": "recordList",
                "in_R10": "currentIndex",
                "in_R11": "recordSize",
                "param_7": "param7",
                "param_9": "param9",
                "param_10": "maxSize",
                "param_11": "recordArray",
                "param_12": "dataPtr",
                "param_13": "functionPtr",
                "param_14": "arraySize",
                "bVar14": "byteVar",
                "uVar4": "indexVar",
                "uVar5": "recordVar",
                "uVar6": "sizeVar",
                "uVar8": "tempVar",
                "lVar7": "loopVar",
                "iVar3": "cmpResult",
                "pcVar2": "callbackPtr",
                "__ptr": "tempPtr",
                "puVar9": "tempPtr1",
                "cVar10": "charVar",
                "puVar11": "tempPtr2",
                "puVar12": "tempPtr3",
                "psVar13": "currentRecordPtr",
                "sVar1": "sizeVar2",
                "unaff_RBX": "unaff_maxIndex",
                "unaff_RBP": "unaff_prevRecord",
                "unaff_R13": "unaff_currentRecord",
                "unaff_R14": "unaff_sortedRecords",
                "unaff_R15": "unaff_prevIndex"
            },
            "code": "\nulong findRecords_00116852(void)\n\n{\n  size_t sizeVar2;\n  code *callbackPtr;\n  int cmpResult;\n  uint indexVar;\n  undefined *tempPtr;\n  size_t *recordList;\n  ulong recordVar;\n  ulong sizeVar;\n  long loopVar;\n  ulong tempVar;\n  size_t unaff_maxIndex;\n  size_t *unaff_prevRecord;\n  undefined *tempPtr1;\n  char charVar;\n  undefined *tempPtr2;\n  ulong currentIndex;\n  undefined *tempPtr3;\n  size_t recordSize;\n  size_t *unaff_currentRecord;\n  size_t *unaff_sortedRecords;\n  size_t unaff_prevIndex;\n  size_t *currentRecordPtr;\n  byte byteVar;\n  size_t param7;\n  size_t param9;\n  ulong maxSize;\n  size_t *recordArray;\n  undefined *dataPtr;\n  long functionPtr;\n  size_t arraySize;\n  \n  byteVar = 0;\ncode_r0x00116852:\n  indexVar = (int)currentIndex + 1;\n  if (0x10 < (int)currentIndex) goto LAB_001167f5;\nLAB_00116863:\n  unaff_sortedRecords = unaff_sortedRecords + -9;\n  do {\n    if (unaff_currentRecord <= unaff_sortedRecords) {\n      sizeVar2 = unaff_sortedRecords[2];\n      if (sizeVar2 == 0) goto LAB_00116863;\n      tempVar = (ulong)indexVar;\n      if ((*unaff_sortedRecords == *unaff_prevRecord) &&\n         (cmpResult = memcmp((void *)unaff_sortedRecords[3],(void *)unaff_prevRecord[3],*unaff_prevRecord), cmpResult == 0)) {\n        sizeVar = unaff_sortedRecords[7];\n        recordVar = unaff_sortedRecords[8];\n        currentIndex = tempVar & 0xffffffff;\n        if (unaff_prevIndex == sizeVar) {\n          if (unaff_maxIndex != recordVar) goto LAB_001167a6;\n          unaff_prevRecord[2] = 0;\n        }\n        else {\n          if (unaff_prevIndex < sizeVar) {\n            if (recordVar < unaff_prevIndex) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < recordVar) || (unaff_prevIndex <= (recordVar + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (unaff_maxIndex < unaff_prevIndex) {\n              if ((0xfffffffffffffff0 < unaff_maxIndex) ||\n                 (sizeVar <= (unaff_maxIndex + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (unaff_maxIndex == recordVar) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (unaff_maxIndex <= recordVar) {\n              unaff_prevRecord[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (recordVar < unaff_prevIndex) goto LAB_0010852c;\n          }\n          if ((recordSize == 0x101) != (sizeVar2 == 0x101)) goto code_r0x00116852;\n          if (recordVar <= unaff_maxIndex) {\n            recordVar = unaff_maxIndex;\n          }\n          if (sizeVar < unaff_prevIndex) {\n            unaff_prevIndex = sizeVar;\n          }\n          unaff_sortedRecords[8] = recordVar;\n          unaff_sortedRecords[7] = unaff_prevIndex;\n          unaff_prevRecord[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        unaff_sortedRecords = unaff_prevRecord;\n        unaff_prevRecord = unaff_sortedRecords + 9;\n        if (recordList <= unaff_prevRecord) {\n          qsort(recordArray,arraySize,0x48,compare_records_0011a250);\n          tempPtr = (undefined *)xmalloc(maxSize * 2);\n          param7 = 0;\n          tempPtr3 = tempPtr;\n          for (currentRecordPtr = recordArray; currentRecordPtr < recordList; currentRecordPtr = currentRecordPtr + 9) {\n            if (currentRecordPtr[2] != 0) {\n              tempPtr2 = tempPtr3 + 4;\n              tempPtr1 = tempPtr3 + 0xc;\n              callbackPtr = *(code **)(*(long *)(functionPtr + 8) + 0x50);\n              if ((currentRecordPtr[7] == param9) && (currentRecordPtr[8] == param7)) {\n                (*callbackPtr)(*currentRecordPtr,tempPtr3);\n                (**(code **)(*(long *)(functionPtr + 8) + 0x50))(0,tempPtr2);\n                (**(code **)(*(long *)(functionPtr + 8) + 0x50))(currentRecordPtr[2],tempPtr3 + 8);\n                sizeVar = currentRecordPtr[6];\n                tempVar = *currentRecordPtr;\n                tempPtr3 = (undefined *)currentRecordPtr[3];\n                tempPtr2 = tempPtr1;\n                for (recordVar = tempVar; recordVar != 0; recordVar = recordVar - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)byteVar * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)byteVar * -2 + 1;\n                }\n                if (tempVar < sizeVar) {\n                  for (loopVar = sizeVar - tempVar; loopVar != 0; loopVar = loopVar + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                tempPtr3 = tempPtr1 + sizeVar;\n              }\n              else {\n                (*callbackPtr)();\n                if (*(int *)(*(long *)(functionPtr + 8) + 8) == 5) {\n                  charVar = (*(char *)(*(long *)(functionPtr + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charVar = '\\b';\n                }\n                (**(code **)(*(long *)(functionPtr + 8) + 0x50))(charVar,tempPtr2);\n                (**(code **)(*(long *)(functionPtr + 8) + 0x50))(currentRecordPtr[2],tempPtr3 + 8);\n                tempVar = *currentRecordPtr;\n                tempPtr3 = (undefined *)currentRecordPtr[3];\n                tempPtr2 = tempPtr1;\n                for (sizeVar = tempVar; sizeVar != 0; sizeVar = sizeVar - 1) {\n                  *tempPtr2 = *tempPtr3;\n                  tempPtr3 = tempPtr3 + (ulong)byteVar * -2 + 1;\n                  tempPtr2 = tempPtr2 + (ulong)byteVar * -2 + 1;\n                }\n                sizeVar = currentRecordPtr[6];\n                if (tempVar < sizeVar) {\n                  for (loopVar = sizeVar - tempVar; loopVar != 0; loopVar = loopVar + -1) {\n                    *tempPtr2 = 0;\n                    tempPtr2 = tempPtr2 + (ulong)byteVar * -2 + 1;\n                  }\n                }\n                loopVar = *(long *)(functionPtr + 8);\n                tempPtr1 = tempPtr1 + sizeVar;\n                tempPtr3 = tempPtr1 + 8;\n                if ((*(int *)(loopVar + 8) == 5) &&\n                   (*(char *)(*(long *)(functionPtr + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopVar + 0x38))(currentRecordPtr[7],tempPtr1);\n                  (**(code **)(*(long *)(functionPtr + 8) + 0x38))(currentRecordPtr[8],tempPtr3);\n                  tempPtr3 = tempPtr1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopVar + 0x50))(currentRecordPtr[7],tempPtr1);\n                  (**(code **)(*(long *)(functionPtr + 8) + 0x50))(currentRecordPtr[8],tempPtr1 + 4);\n                }\n                param9 = currentRecordPtr[7];\n                param7 = currentRecordPtr[8];\n              }\n            }\n          }\n          sizeVar = (long)tempPtr3 - (long)tempPtr;\n          tempVar = sizeVar;\n          tempPtr3 = tempPtr;\n          if (sizeVar < maxSize) {\n            for (; maxSize = sizeVar, tempVar != 0; tempVar = tempVar - 1) {\n              *dataPtr = *tempPtr3;\n              tempPtr3 = tempPtr3 + (ulong)byteVar * -2 + 1;\n              dataPtr = dataPtr + (ulong)byteVar * -2 + 1;\n            }\n          }\n          free(tempPtr);\n          free(recordArray);\n          return maxSize;\n        }\n        recordSize = unaff_sortedRecords[0xb];\n      } while (recordSize == 0);\n      unaff_prevIndex = unaff_sortedRecords[0x10];\n      unaff_maxIndex = unaff_sortedRecords[0x11];\n      indexVar = 0;\n      if (unaff_prevIndex != unaff_maxIndex) break;\n      unaff_sortedRecords[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "FUN_00116852",
                "qsort",
                "memcmp",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "find_records_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_or_get_value_00113d3a",
                "param_1": "value",
                "lVar1": "result"
            },
            "code": "\nlong initialize_or_get_value_00113d3a(long value)\n\n{\n  long result;\n  \n  if (value != 0) {\n    result = *(long *)(value + 8);\n    if (result == 0) {\n      result = initialize_function_00112904(0xc,0);\n      if (result == 0) {\n        result = 0;\n      }\n      else {\n        *(long *)(result + 0x10) = value;\n        *(long *)(value + 8) = result;\n      }\n    }\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_or_get_value_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010bba1",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "process_data_0010a0d3",
                "param_1": "data",
                "process_data_00109ed3": "processDataHelper"
            },
            "code": "\nvoid processData_0010a0d3(long data)\n\n{\n  processData_0010a0d3Helper(data,0x42,*(undefined4 *)(*(long *)(data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "process_binary_section_00115530",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "variable1",
                "pcVar2": "variable2",
                "ppcVar3": "variable3",
                "cVar4": "character",
                "iVar5": "variable4",
                "uVar6": "variable5",
                "sVar7": "size1",
                "sVar8": "size2",
                "lVar9": "variable6",
                "pcVar10": "pointer1",
                "pcVar11": "pointer2",
                "pcVar12": "pointer3",
                "uVar13": "variable7",
                "bVar14": "bool1",
                "local_50": "localVariable1",
                "local_48": "localVariable2",
                "local_40": "localVariable3"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid processBinarySection_00115530(long param1,char **param2,long param3)\n\n{\n  long variable1;\n  char *variable2;\n  char **variable3;\n  char character;\n  int variable4;\n  uint variable5;\n  size_t size1;\n  size_t size2;\n  long variable6;\n  char *pointer1;\n  char *pointer2;\n  char *pointer3;\n  uint variable7;\n  bool bool1;\n  long localVariable1;\n  char *localVariable2;\n  long localVariable3 [2];\n  \n  character = process_binary_section_001159d0(param2);\n  if (character != '\\0') {\n    return;\n  }\n  pointer1 = *param2;\n  variable7 = *(uint *)((long)param2 + 0x24);\n  localVariable2 = pointer1;\n  variable3 = DAT_001278f8;\n  if (*(int *)(*(long *)(param1 + 8) + 8) != *(int *)(*(long *)(param3 + 8) + 8)) {\n    variable7 = variable7 & *(uint *)(*(long *)(param1 + 8) + 0x18) &\n             *(uint *)(*(long *)(param3 + 8) + 0x18);\n  }\n  for (; variable3 != (char **)0x0; variable3 = (char **)variable3[3]) {\n    variable4 = strcmp(*variable3,pointer1);\n    if (variable4 == 0) {\n      if (*(uint *)(variable3 + 2) != 0xffffffff) {\n        variable7 = *(uint *)(variable3 + 2);\n      }\n      if (pointer1 != variable3[1]) {\n        localVariable2 = variable3[1];\n        variable7 = remove_share_flag_if_not_coff_00115f30(variable7,param3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (pointer1 = DAT_00127918, (*(byte *)((long)param2 + 0x24) & 1) != 0)) ||\n     (pointer1 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    size1 = strlen(pointer1);\n    size2 = strlen(localVariable2);\n    pointer3 = (char *)xmalloc(size1 + 1 + size2);\n    pointer1 = strcpy(pointer3,pointer1);\n    localVariable2 = strcat(pointer1,localVariable2);\n  }\n  variable6 = process_data_00114190(*param2,0,0x80);\n  bool1 = false;\n  if (variable6 == 0) {\n    if ((DAT_00127a48 == 4) && ((variable7 & 0x2000001) != 0)) {\n      variable4 = *(int *)(*(long *)(param1 + 8) + 8);\n      if (variable4 == 5) {\n        if (*(int *)(param2[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param3 + 8) + 8) == 5) {\n            bool1 = (variable7 & 0x2000000) == 0;\n            variable5 = ~((-(uint)((variable7 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)param2 + 0x24) = *(uint *)((long)param2 + 0x24) & variable5;\n          }\n          else {\n            variable5 = 0xfdfffefd;\n          }\n          variable7 = variable7 & variable5;\n        }\n      }\n      else if ((variable4 != 2) || (variable4 = strcmp(*param2,\".buildid\"), variable4 != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    variable7 = remove_share_flag_if_not_coff_00115f30(variable7 & 0x104 | *(uint *)(variable6 + 0x28),param3,*param2);\n  }\n  character = bfd_convert_section_setup(param1,param2,param3,&localVariable2,localVariable3);\n  if (character == '\\0') {\n    pointer1 = (char *)0x0;\n    localVariable1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  pointer1 = (char *)bfd_make_section_anyway_with_flags(param3,localVariable2,variable7);\n  if (pointer1 == (char *)0x0) {\n    localVariable1 = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      localVariable3[0] = 0;\n      goto LAB_001158e7;\n    }\n    character = bfd_set_section_size(pointer1,localVariable3[0]);\n    if (character == '\\0') {\n      set_and_process_data_00108072();\n      return;\n    }\n  }\n  else {\n    localVariable3[0] = ((((long)DAT_00127a3c - 1U) + localVariable3[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    character = bfd_set_section_size(pointer1);\n    if (character == '\\0') {\n      set_and_process_data_00108072();\n      return;\n    }\n  }\n  localVariable1 = 0;\n  pointer3 = param2[6];\n  variable6 = process_data_00114190(*param2,0,0x18);\n  if (variable6 == 0) {\n    pointer1[0x28] = pointer1[0x28] | 1;\n    pointer2 = *param2;\n    pointer3 = pointer3 + _DAT_001279b0;\n    *(char **)(pointer1 + 0x30) = pointer3;\n    *(char **)(pointer1 + 0x38) = pointer3;\n    pointer3 = param2[7];\n    variable6 = process_data_00114190(pointer2,0,0x60);\n    if (variable6 == 0) goto LAB_00115695;\nLAB_00115860:\n    pointer2 = *(char **)(variable6 + 0x20);\n    if ((*(byte *)(variable6 + 0x14) & 0x40) != 0) {\n      pointer2 = pointer2 + (long)pointer3;\n    }\n    *(char **)(pointer1 + 0x38) = pointer2;\n    variable6 = process_data_00114190(*param2,0,0x200);\n    if (variable6 != 0) goto LAB_00115889;\nLAB_001156b8:\n    variable7 = *(uint *)((long)param2 + 0x7c);\n    if (variable7 < 0x3f) goto LAB_001156c4;\n    localVariable1 = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(pointer1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    pointer1[0x28] = pointer1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = pointer1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    character = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,pointer1);\n    if (character == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  else {\n    pointer2 = *(char **)(variable6 + 0x18);\n    if ((*(byte *)(variable6 + 0x14) & 8) == 0) {\n      pointer2 = pointer2 + (long)pointer3;\n    }\n    pointer1[0x28] = pointer1[0x28] | 1;\n    variable2 = *param2;\n    *(char **)(pointer1 + 0x30) = pointer2;\n    *(char **)(pointer1 + 0x38) = pointer2;\n    pointer3 = param2[7];\n    variable6 = process_data_00114190(variable2,0,0x60);\n    if (variable6 != 0) goto LAB_00115860;\nLAB_00115695:\n    pointer2 = *param2;\n    *(char **)(pointer1 + 0x38) = pointer3 + _DAT_001279b0;\n    variable6 = process_data_00114190(pointer2,0,0x200);\n    if (variable6 == 0) goto LAB_001156b8;\nLAB_00115889:\n    variable7 = *(uint *)(variable6 + 0x2c);\n    if (0x3e < variable7) {\n      process_alignment_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(pointer1 + 0x7c) = variable7;\n    *(undefined4 *)(pointer1 + 0xb4) = *(undefined4 *)((long)param2 + 0xb4);\n    pointer1[0x28] = pointer1[0x28] & 0xcfU | *(byte *)(param2 + 5) & 0x30;\n    param2[0xc] = pointer1;\n    param2[0xb] = (char *)0x0;\n    if ((*(byte *)((long)param2 + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    pointer3 = param2[0x1a];\n    variable6 = find_relevant_value_00115d00(pointer3,param2[0x1c]);\n    if ((variable6 == 0) ||\n       (variable1 = *(long *)(param1 + 8), *(uint *)(variable6 + 0x18) = *(uint *)(variable6 + 0x18) | 0x20,\n       *(int *)(variable1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(pointer3 + 0xb0) = variable6;\n    character = (**(code **)(*(long *)(param3 + 8) + 0x158))(param1,param2,param3,pointer1);\n    if (character == '\\0') {\n      copy_private_data_0010808f();\n      return;\n    }\n  }\n  if (bool1) {\n    *(undefined4 *)(*(long *)(pointer1 + 0xd0) + 4) = 8;\n  }\n  if (localVariable1 == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  print_error_info_001126c0(0,param3,pointer1,localVariable1);\n  return;\n}\n\n",
            "called": [
                "FUN_00108072",
                "FUN_00115f30",
                "FUN_00114190",
                "strlen",
                "strcat",
                "dcgettext",
                "strcpy",
                "strcmp",
                "FUN_001159d0",
                "xmalloc",
                "bfd_set_section_size",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_section_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "process_data_wrapper_0010a0bd",
                "param_1": "input_data"
            },
            "code": "\nvoid process_data_wrapper_0010a0bd(long input_data)\n\n{\n  process_data_00109ed3(input_data,0x6b,*(undefined4 *)(*(long *)(input_data + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_wrapper_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "parse_arguments_00113e5e",
                "param_1": "input_value",
                "param_2": "argv",
                "param_3": "arg_count",
                "cVar1": "comparison_result",
                "local_20": "arg_ptr"
            },
            "code": "\nundefined8 parse_arguments_00113e5e(undefined8 input_value,char **argv,long arg_count)\n\n{\n  char comparison_result;\n  char *arg_ptr [2];\n  \n  arg_ptr[0] = *argv;\n  *argv = (char *)(arg_count + 2);\n  if ((((long)(char *)(arg_count + 2) - (long)arg_ptr[0] < 5) ||\n      (comparison_result = string_comparison_00113fb0(arg_ptr[0],\"type\"), comparison_result == '\\0')) ||\n     ((arg_ptr[0][4] != '$' && (arg_ptr[0][4] != '.')))) {\n    if (*arg_ptr[0] != '_') {\n      return 1;\n    }\n    if (arg_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (arg_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (arg_ptr[0][3] != 'p') {\n      return 1;\n    }\n    arg_ptr[0] = arg_ptr[0] + 4;\n  }\n  else {\n    arg_ptr[0] = arg_ptr[0] + 5;\n  }\n  comparison_result = reverse_and_improve_code_0010c95e(input_value,arg_ptr,0);\n  if (comparison_result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c95e",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_arguments_00113e5e",
            "code_backup": "\nundefined8 FUN_00113e5e(undefined8 param_1,char **param_2,long param_3)\n\n{\n  char cVar1;\n  char *local_20 [2];\n  \n  local_20[0] = *param_2;\n  *param_2 = (char *)(param_3 + 2);\n  if ((((long)(char *)(param_3 + 2) - (long)local_20[0] < 5) ||\n      (cVar1 = string_comparison_00113fb0(local_20[0],\"type\"), cVar1 == '\\0')) ||\n     ((local_20[0][4] != '$' && (local_20[0][4] != '.')))) {\n    if (*local_20[0] != '_') {\n      return 1;\n    }\n    if (local_20[0][1] != '_') {\n      return 1;\n    }\n    if (local_20[0][2] != 'o') {\n      return 1;\n    }\n    if (local_20[0][3] != 'p') {\n      return 1;\n    }\n    local_20[0] = local_20[0] + 4;\n  }\n  else {\n    local_20[0] = local_20[0] + 5;\n  }\n  cVar1 = FUNC_0010c95e(param_1,local_20,0);\n  if (cVar1 != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "process_data_0010abdd",
                "param_1": "data_ptr",
                "param_2": "input_string",
                "param_3": "length",
                "param_4": "flag_1",
                "param_5": "flag_2",
                "param_6": "flag_3",
                "param_8": "flag_4",
                "lVar1": "data_struct_ptr",
                "pcVar2": "string_ptr1",
                "bVar3": "byte_var",
                "pcVar4": "string_ptr2",
                "__s": "string_ptr3",
                "sVar5": "string_length1",
                "sVar6": "string_length2",
                "sVar7": "string_length3",
                "sVar8": "string_length4",
                "uVar9": "result",
                "cVar10": "char_var1",
                "cVar11": "char_var2",
                "local_52": "local_byte_var"
            },
            "code": "\nundefined8\nprocessData_0010abdd(long data_ptr,char *input_string,uint length,char flag_1,char flag_2,char flag_3,\n            undefined8 param_7,char flag_4)\n\n{\n  long data_struct_ptr;\n  char *string_ptr1;\n  byte byte_var;\n  char *string_ptr2;\n  char *string_ptr3;\n  size_t string_length1;\n  size_t string_length2;\n  size_t string_length3;\n  size_t string_length4;\n  undefined8 result;\n  char char_var1;\n  char char_var2;\n  byte local_byte_var;\n  \n  string_ptr3 = (char *)0x0;\n  local_byte_var = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string_ptr2 = (char *)extract_and_free_next_entry_00109b2f();\n  if (flag_4 != '\\0') {\n    byte_var = 1;\n    if (local_byte_var == 0) {\n      byte_var = *(byte *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    }\n    local_byte_var = byte_var & 1;\n    string_ptr3 = (char *)extract_and_free_next_entry_00109b2f(data_ptr);\n  }\n  data_struct_ptr = *(long *)(data_ptr + 0x60);\n  if ((data_struct_ptr == 0) || (string_ptr1 = *(char **)(data_struct_ptr + 0x30), string_ptr1 == (char *)0x0)) {\n    result = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag_2 == '\\0') {\n      char_var2 = (-(flag_3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      char_var2 = (-(flag_3 == '\\0') & 0xfeU) + 0x44;\n    }\n    char_var1 = '?';\n    if (flag_1 == '\\0') {\n      char_var1 = (-(flag_4 == '\\0') & 4U) + 0x2a;\n    }\n    string_length1 = strlen(string_ptr1);\n    string_length2 = strlen(string_ptr2);\n    string_length3 = strlen(input_string);\n    string_length4 = 0;\n    if (flag_4 != '\\0') {\n      string_length4 = strlen(string_ptr3);\n    }\n    result = xrealloc(string_ptr1,string_length3 + string_length1 + 0x28 + string_length2 + string_length4);\n    *(undefined8 *)(data_struct_ptr + 0x30) = result;\n    string_ptr1 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n    string_length1 = strlen(string_ptr1);\n    sprintf(string_ptr1 + string_length1,\"%s:%s;%c%c%c\",string_ptr2,input_string,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)char_var2,(ulong)(uint)(int)char_var1,string_length1);\n    free(string_ptr2);\n    if (flag_4 != '\\0') {\n      string_ptr2 = *(char **)(*(long *)(data_ptr + 0x60) + 0x30);\n      string_length1 = strlen(string_ptr2);\n      sprintf(string_ptr2 + string_length1,\"%ld;%s;\",param_7,string_ptr3);\n      free(string_ptr3);\n    }\n    if (local_byte_var != 0) {\n      *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n    }\n    result = 1;\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "strlen",
                "sprintf",
                "xrealloc",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "process_data_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "remove_share_flag_if_not_coff_00115f30",
                "param_1": "flags",
                "param_2": "parameters",
                "param_3": "output_format",
                "uVar1": "var1",
                "uVar2": "var2"
            },
            "code": "\nuint removeShareFlagIfNotCOFF_00115f30(uint flags,undefined8 *parameters,undefined8 output_format)\n\n{\n  undefined8 var1;\n  undefined8 var2;\n  \n  if (((flags & 0x8000000) != 0) && (*(int *)(parameters[1] + 8) != 2)) {\n    var1 = *parameters;\n    flags = flags & 0xf7ffffff;\n    var2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    print_error_message_00119ed0(var2,var1,output_format);\n  }\n  return flags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00115530",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "remove_share_flag_if_not_coff_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "get_return_value_001129f4",
                "param_1": "inputArray",
                "puVar1": "ptrToSecondArray",
                "piVar2": "ptrToOtherArray"
            },
            "code": "\nundefined8 getReturnValue_001129f4(int *inputArray)\n\n{\n  undefined8 *ptrToSecondArray;\n  int *ptrToOtherArray;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    ptrToSecondArray = (undefined8 *)(inputArray + 4);\n    ptrToOtherArray = **(int ***)(undefined8 *)*ptrToSecondArray;\n  } while ((inputArray != ptrToOtherArray) && (inputArray = ptrToOtherArray, ptrToOtherArray != (int *)0x0));\n  return ((undefined8 *)*ptrToSecondArray)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_return_value_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00114c80",
                "FUN_00104ad6",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "calculate_checksum_001082b3",
                "uVar1": "string_length",
                "check_string_length_00113ede": "get_string_length"
            },
            "code": "\nuint calculate_checksum_001082b3(void)\n\n{\n  uint string_length;\n  \n  string_length = get_string_length();\n  return string_length ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "calculate_checksum_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "extract_and_copy_archive_files_00114690",
                "param_1": "inputFilePath",
                "param_2": "outputFilePath",
                "param_3": "fileDescriptor",
                "param_4": "statBuf",
                "param_5": "targetFormat",
                "param_6": "defaultInputFormat",
                "param_7": "copyFlags",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "integerVar1",
                "iVar5": "integerVar2",
                "ppcVar6": "pointerToPointerCharVar1",
                "pvVar7": "pointerVoidVar1",
                "lVar8": "longVar1",
                "puVar9": "pointerUInt64Var1",
                "piVar10": "pointerIntVar1",
                "uVar11": "unsignedVar1",
                "uVar12": "unsignedVar2",
                "lVar13": "longVar2",
                "puVar14": "pointerUInt64Var2",
                "ppcVar16": "pointerToPointerCharVar2",
                "pcVar17": "pointerCharVar1",
                "pcVar18": "pointerCharVar2",
                "pcVar23": "pointerCharVar4",
                "ppcVar19": "pointerToPointerCharVar3",
                "pcVar20": "pointerToCodeVar1",
                "lVar21": "longVar3",
                "uVar22": "unsignedVar3",
                "psVar24": "pointerToStatVar1",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "localPointerVar1",
                "local_198": "localLongPointerVar1",
                "local_158": "localStatVar1",
                "local_c8": "localVoidPointerArray1",
                "uStack_b0": "unsignedStackVar1",
                "lStack_98": "longStackVar1"
            },
            "code": "\n\n\nvoid extractAndCopyArchiveFiles_00114690(undefined8 inputFilePath,undefined8 outputFilePath,int fileDescriptor,undefined8 statBuf,\n                 undefined8 targetFormat,long defaultInputFormat,undefined8 copyFlags)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int integerVar1;\n  int integerVar2;\n  char **pointerToPointerCharVar1;\n  void *pointerVoidVar1;\n  long longVar1;\n  undefined8 *pointerUInt64Var1;\n  int *pointerIntVar1;\n  undefined8 unsignedVar1;\n  undefined8 unsignedVar2;\n  long longVar2;\n  undefined8 *pointerUInt64Var2;\n  char *pcVar15;\n  char **pointerToPointerCharVar2;\n  char *pointerCharVar1;\n  char *pointerCharVar2;\n  undefined8 *__ptr;\n  char **pointerToPointerCharVar3;\n  code *pointerToCodeVar1;\n  long longVar3;\n  uint unsignedVar3;\n  char *pointerCharVar4;\n  stat *pointerToStatVar1;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *localPointerVar1;\n  long *localLongPointerVar1;\n  stat localStatVar1;\n  void *localVoidPointerArray1 [3];\n  uint unsignedStackVar1;\n  long longStackVar1;\n  \n  byteVar2 = 0;\n  longVar2 = check_file_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      unsignedVar2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      print_error_message_00119ed0(unsignedVar2,inputFilePath);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  pointerUInt64Var2 = (undefined8 *)bfd_openr(inputFilePath,targetFormat);\n  if ((pointerUInt64Var2 == (undefined8 *)0x0) || (integerVar2 = bfd_stat(pointerUInt64Var2,statBuf), integerVar2 != 0)) {\n    print_error_info_001126c0(inputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)pointerUInt64Var2 + 0x44) = *(uint *)((long)pointerUInt64Var2 + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(pointerUInt64Var2,2);\n  if (charVar1 != '\\0') {\n    if (defaultInputFormat == 0) {\n      charVar1 = '\\0';\n      defaultInputFormat = *(long *)pointerUInt64Var2[1];\n    }\n    if (fileDescriptor < 0) {\n      localPointerVar1 = (undefined8 *)bfd_openw(outputFilePath,defaultInputFormat);\n    }\n    else {\n      localPointerVar1 = (undefined8 *)bfd_fdopenw(outputFilePath,defaultInputFormat,fileDescriptor);\n    }\n    if (localPointerVar1 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        unsignedVar2 = *pointerUInt64Var2;\n        unsignedVar1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        print_error_message_00119ed0(unsignedVar1,unsignedVar2);\n        DAT_00127a30 = 0;\n      }\n      execute_if_valid_state_00114d50(localPointerVar1,pointerUInt64Var2,DAT_001264b4);\n      localLongPointerVar1 = localPointerVar1 + 0x1f;\n      if ((*(byte *)((long)pointerUInt64Var2 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        unsignedVar2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        print_error_info_001126c0(0,pointerUInt64Var2,0,unsignedVar2);\n        return;\n      }\n      pcVar15 = (char *)create_temp_directory_0011a0e0(*localPointerVar1);\n      if (pcVar15 == (char *)0x0) {\n        pointerIntVar1 = __errno_location();\n        pcVar15 = strerror(*pointerIntVar1);\n        unsignedVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        print_error_and_exit_00119dd0(unsignedVar2,pcVar15);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)pointerUInt64Var2 + 0x49);\n        unsignedVar3 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerUInt64Var2 + 0x49);\n        unsignedVar3 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)localPointerVar1 + 0x49) =\n           byteVar1 & 0x10 | (byte)(unsignedVar3 << 3) | *(byte *)((long)localPointerVar1 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)localPointerVar1 + 0x44) = *(uint *)((long)localPointerVar1 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointerToPointerCharVar2 = (char **)bfd_openr_next_archived_file(pointerUInt64Var2,0);\n      charVar2 = bfd_set_format(localPointerVar1,*(byte *)(pointerUInt64Var2 + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_info_001126c0(0,localPointerVar1,0,0);\n        remove_directory_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointerToPointerCharVar2 != (char **)0x0))) {\n        pointerCharVar2 = *pointerToPointerCharVar2;\n        pointerCharVar1 = pointerCharVar2;\n        if (*pointerCharVar2 == '/') {\nLAB_0010527d:\n          unsignedVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          print_error_message_00119ed0(unsignedVar2,pointerCharVar2);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*pointerCharVar1 != '\\0') {\n          pointerCharVar4 = pointerCharVar1;\n          if ((*pointerCharVar1 == '.') && (pointerCharVar4 = pointerCharVar1 + 1, pointerCharVar1[1] == '.')) {\n            pointerCharVar4 = pointerCharVar1 + 2;\n            if ((pointerCharVar1[2] == '\\0') || (pointerCharVar1[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*pointerCharVar4 != '\\0' && (*pointerCharVar4 != '/')); pointerCharVar4 = pointerCharVar4 + 1) {\n          }\n          pointerCharVar1 = pointerCharVar4;\n          if (*pointerCharVar4 == '/') {\n            extract_and_copy_archive_files_001052a2();\n            return;\n          }\n        }\n        pointerCharVar2 = (char *)concat(pcVar15,&DAT_0011b47d);\n        integerVar2 = stat(pointerCharVar2,&localStatVar1);\n        pointerUInt64Var1 = __ptr;\n        if (-1 < integerVar2) {\n          longVar2 = create_temp_directory_0011a0e0(pointerCharVar2);\n          free(pointerCharVar2);\n          if (longVar2 == 0) {\n            pointerIntVar1 = __errno_location();\n            pointerCharVar2 = strerror(*pointerIntVar1);\n            unsignedVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            print_error_message_00119ed0(unsignedVar2,pointerCharVar2);\n            goto LAB_00104e93;\n          }\n          pointerUInt64Var1 = (undefined8 *)xmalloc(0x18);\n          pointerCharVar2 = *pointerToPointerCharVar2;\n          *pointerUInt64Var1 = __ptr;\n          pointerUInt64Var1[2] = 0;\n          pointerUInt64Var1[1] = longVar2;\n          pointerCharVar2 = (char *)concat(longVar2,&DAT_0011b47d,pointerCharVar2);\n        }\n        integerVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointerToStatVar1 = &localStatVar1;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&pointerToStatVar1->st_dev = 0;\n            pointerToStatVar1 = (stat *)((long)pointerToStatVar1 + (ulong)byteVar2 * -8 + 4);\n          }\n          pointerToPointerCharVar3 = (char **)pointerToPointerCharVar2[0x1d];\n          if ((char **)pointerToPointerCharVar2[0x1d] == (char **)0x0) {\n            pointerToPointerCharVar3 = pointerToPointerCharVar2;\n          }\n          integerVar2 = (**(code **)(pointerToPointerCharVar3[1] + 0x1e8))(pointerToPointerCharVar2,&localStatVar1);\n          if (integerVar2 != 0) {\n            pointerCharVar1 = *pointerToPointerCharVar2;\n            unsignedVar2 = dcgettext(0,\"internal stat error on %s\",5);\n            print_error_message_00119ed0(unsignedVar2,pointerCharVar1);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = pointerCharVar2;\n        *__ptr = pointerUInt64Var1;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(pointerToPointerCharVar2,1);\n        if (charVar2 == '\\0') {\n          unsignedVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          print_error_info_001126c0(0,pointerToPointerCharVar2,0,unsignedVar2);\n          pointerToPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,defaultInputFormat);\n          if (pointerToPointerCharVar3 == (char **)0x0) {\nLAB_00104e80:\n            print_error_info_001126c0(pointerCharVar2,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToPointerCharVar1 = (char **)pointerToPointerCharVar2[0x1d];\n          if ((char **)pointerToPointerCharVar2[0x1d] == (char **)0x0) {\n            pointerToPointerCharVar1 = pointerToPointerCharVar2;\n          }\n          integerVar1 = (**(code **)(pointerToPointerCharVar1[1] + 0x1e8))(pointerToPointerCharVar2);\n          longVar2 = longStackVar1;\n          if (integerVar1 == 0) {\n            if (longStackVar1 < 0) {\n              build_filename_001125fa(pointerToPointerCharVar2);\n              unsignedVar2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              print_error_message_00119ed0(unsignedVar2);\n            }\n            else {\n              integerVar1 = bfd_seek(pointerToPointerCharVar2,0,0);\n              if (integerVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  pointerCharVar1 = *pointerToPointerCharVar3;\n                  unsignedVar2 = build_filename_001125fa(pointerToPointerCharVar2);\n                  pointerCharVar4 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(pointerCharVar4,unsignedVar2,pointerCharVar1);\n                }\n                pointerVoidVar1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(pointerVoidVar1,longVar3,pointerToPointerCharVar2);\n                  pointerToPointerCharVar1 = pointerToPointerCharVar2;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(pointerVoidVar1,longVar3,pointerToPointerCharVar3), pointerToPointerCharVar1 = pointerToPointerCharVar3,\n                     longVar3 != longVar1)) {\n                    print_error_info_001126c0(0,pointerToPointerCharVar1,0,0);\n                    free(pointerVoidVar1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pointerToPointerCharVar3,unsignedStackVar1 | 0x100);\n                free(pointerVoidVar1);\n                charVar2 = bfd_close_all_done(pointerToPointerCharVar3);\n                if (charVar2 == '\\0') {\n                  print_error_info_001126c0(pointerCharVar2,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              unsignedVar2 = build_filename_001125fa(pointerToPointerCharVar2);\n              print_error_0011a110(unsignedVar2);\n            }\n          }\n          else {\n            print_error_info_001126c0(0,pointerToPointerCharVar2,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pointerToPointerCharVar3);\n          if (charVar2 == '\\0') {\n            print_error_info_001126c0(pointerCharVar2,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(pointerCharVar2);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pointerToPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,*(undefined8 *)pointerToPointerCharVar2[1]);\n          }\n          else {\n            pointerToPointerCharVar3 = (char **)bfd_openw(pointerCharVar2,defaultInputFormat);\n          }\n          if (pointerToPointerCharVar3 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(pointerToPointerCharVar2,pointerToPointerCharVar3,copyFlags);\n          if (charVar2 == '\\0') {\n            integerVar1 = bfd_get_arch(pointerToPointerCharVar2);\n            if (integerVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pointerToPointerCharVar3);\n            if (charVar2 == '\\0') {\n              print_error_info_001126c0(pointerCharVar2,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pointerToPointerCharVar3);\n          if (charVar2 == '\\0') {\n            print_error_info_001126c0(pointerCharVar2,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (integerVar2 == 0)) {\n            set_file_time_0011a350(pointerCharVar2,&localStatVar1);\n          }\n          longVar2 = bfd_openr(pointerCharVar2,defaultInputFormat);\n          __ptr[2] = longVar2;\n          *localLongPointerVar1 = longVar2;\n          localLongPointerVar1 = (long *)(longVar2 + 0xf0);\n          pointerToPointerCharVar3 = (char **)bfd_openr_next_archived_file(pointerUInt64Var2);\n          bfd_close(pointerToPointerCharVar2);\n          pointerToPointerCharVar2 = pointerToPointerCharVar3;\n        }\n      }\n      *localLongPointerVar1 = 0;\n      pointerVoidVar1 = (void *)xstrdup(*localPointerVar1);\n      if (DAT_00127a40 == 0) {\n        pointerToCodeVar1 = bfd_close;\n      }\n      else {\n        pointerToCodeVar1 = bfd_close_all_done;\n      }\n      charVar1 = (*pointerToCodeVar1)(localPointerVar1);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_info_001126c0(pointerVoidVar1,0,0,0);\n      }\n      free(pointerVoidVar1);\n      pointerVoidVar1 = (void *)xstrdup(*pointerUInt64Var2);\n      charVar1 = bfd_close(pointerUInt64Var2);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        print_error_info_001126c0(pointerVoidVar1,0,0,0);\n      }\n      free(pointerVoidVar1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerUInt64Var2 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerUInt64Var2;\n      }\n      rmdir(pcVar15);\n      free(pcVar15);\n      return;\n    }\nLAB_00105231:\n    close(fileDescriptor);\n    print_error_info_001126c0(outputFilePath,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(pointerUInt64Var2,1,localVoidPointerArray1);\n  if (charVar1 == '\\0') {\n    integerVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(pointerUInt64Var2,3,&localStatVar1);\n    if (charVar1 == '\\0') {\n      integerVar1 = bfd_get_error();\n      if (integerVar2 != integerVar1) {\n        bfd_set_error(integerVar2);\n      }\n      print_error_info_001126c0(inputFilePath,0,0,0);\n      if (integerVar2 == 0xd) {\n        print_matching_formats_0011256b(localVoidPointerArray1[0]);\n      }\n      if (integerVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      print_matching_formats_0011256b(localStatVar1.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (integerVar2 == 0xd) {\n      free(localVoidPointerArray1[0]);\n    }\n  }\n  if (defaultInputFormat == 0) {\n    defaultInputFormat = *(long *)pointerUInt64Var2[1];\n  }\n  if (fileDescriptor < 0) {\n    longVar2 = bfd_openw(outputFilePath,defaultInputFormat);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFilePath,defaultInputFormat,fileDescriptor);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  execute_if_valid_state_00114d50(longVar2,pointerUInt64Var2,DAT_001264b4);\n  charVar1 = FUNC_00114e50(pointerUInt64Var2,longVar2,copyFlags);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(outputFilePath,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(pointerUInt64Var2);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(inputFilePath,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close",
                "dcgettext",
                "FUN_00113f50",
                "close",
                "strerror",
                "FUN_00104d25",
                "bfd_check_format",
                "bfd_close_all_done",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011a0e0",
                "free",
                "bfd_stat",
                "bfd_openr_next_archived_file",
                "FUN_00114d50",
                "bfd_check_format_matches",
                "FUN_00119dd0",
                "bfd_openw",
                "bfd_get_error",
                "__errno_location",
                "bfd_set_error",
                "bfd_fdopenw",
                "bfd_set_format",
                "bfd_openr",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_files_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "format_and_initialize_0010b800",
                "param_1": "data",
                "param_2": "size",
                "param_3": "flag",
                "plVar1": "ptrArray",
                "uVar2": "result",
                "sVar3": "strLength",
                "lVar4": "temp1",
                "lVar5": "temp2",
                "local_8c": "buffer",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 formatAndInitialize_0010b800(long data,int size,char flag)\n\n{\n  long *ptrArray;\n  undefined8 result;\n  size_t strLength;\n  long temp1;\n  long temp2;\n  undefined2 buffer;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    temp1 = data + 0xb8;\n    if (flag != '\\0') {\n      temp1 = data + 0x78;\n    }\n    ptrArray = (long *)(temp1 + (ulong)(size - 1U) * 8);\n    temp1 = *ptrArray;\n    if (temp1 != 0) {\n      result = initialize_and_format_data_00109cf4(data,temp1,size);\n      return result;\n    }\n    temp1 = *(long *)(data + 0x68);\n    *(long *)(data + 0x68) = temp1 + 1;\n    *ptrArray = temp1;\n    sprintf((char *)&buffer,\"%ld=r%ld;\",temp1,temp1);\n    if (flag == '\\0') {\n      temp2 = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      strLength = strlen((char *)&buffer);\n      sprintf((char *)((long)&buffer + strLength),\"%ld;%ld;\",-temp2,temp2 + -1);\n    }\n    else {\n      strLength = strlen((char *)&buffer);\n      *(undefined2 *)((long)&buffer + strLength) = 0x3b30;\n      *(undefined *)((long)&buffer + strLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&buffer + strLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&buffer + strLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    result = initialize_data_structure_00109b52(data,&buffer,temp1,1,size);\n  }\n  else {\n    result = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    print_error_message_00119ed0(result,size);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_00109b52",
                "strlen",
                "dcgettext",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_initialize_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "format",
                "param_4": "outputArray",
                "param_5": "outputSize",
                "uVar1": "entrySize",
                "uVar2": "newSize",
                "cVar3": "initializeSuccess",
                "pcVar4": "entry",
                "sVar5": "entryLength",
                "__s": "formattedEntry",
                "lVar6": "counter",
                "__ptr": "ptr",
                "uVar7": "result",
                "uVar8": "initializeFlag",
                "lVar9": "copySize",
                "uVar10": "newSize",
                "puVar11": "ptr",
                "bVar12": "zeroFlag"
            },
            "code": "\nundefined8 processData_00109ed3(long input,uint flag,undefined4 format,long *outputArray,ulong *outputSize)\n\n{\n  ulong entrySize;\n  ulong newSize;\n  char initializeSuccess;\n  char *entry;\n  size_t entryLength;\n  char *formattedEntry;\n  long counter;\n  void *ptr;\n  undefined8 result;\n  undefined initializeFlag;\n  long copySize;\n  ulong newSize;\n  undefined *ptr;\n  byte zeroFlag;\n  \n  zeroFlag = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    entrySize = *(ulong *)(counter + 0x10);\n    if (((long)entrySize < 1) || (outputArray == (long *)0x0)) {\n      initializeFlag = *(undefined *)(counter + 0x1c);\n      entry = (char *)extract_and_free_next_entry_00109b2f(input);\n      entryLength = strlen(entry);\n      formattedEntry = (char *)xmalloc(entryLength + 2);\n      sprintf(formattedEntry,\"%c%s\",(ulong)flag,entry);\n      free(entry);\n      counter = 0;\n    }\n    else {\n      newSize = *outputSize;\n      if (newSize <= entrySize) {\n        if (newSize == 0) {\n          newSize = 10;\n        }\n        for (; newSize <= entrySize; newSize = newSize * 2) {\n        }\n        counter = xrealloc(*outputArray,newSize * 8);\n        newSize = *outputSize;\n        *outputArray = counter;\n        ptr = (undefined *)(counter + newSize * 8);\n        for (copySize = (newSize - newSize) * 8; copySize != 0; copySize = copySize + -1) {\n          *ptr = 0;\n          ptr = ptr + (ulong)zeroFlag * -2 + 1;\n        }\n        *outputSize = newSize;\n      }\n      counter = *(long *)(*outputArray + entrySize * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        ptr = (void *)extract_and_free_next_entry_00109b2f(input);\n        free(ptr);\n        result = initialize_and_format_data_00109cf4(input,counter,format);\n        return result;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      entry = (char *)extract_and_free_next_entry_00109b2f(input);\n      entryLength = strlen(entry);\n      formattedEntry = (char *)xmalloc(entryLength + 0x14);\n      sprintf(formattedEntry,\"%ld=%c%s\",counter,(ulong)flag,entry);\n      free(entry);\n      initializeFlag = 1;\n      *(long *)(*outputArray + entrySize * 8) = counter;\n    }\n    initializeSuccess = initialize_data_structure_00109b52(input,formattedEntry,counter,initializeFlag,format);\n    if (initializeSuccess != '\\0') {\n      free(formattedEntry);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109cf4",
                "xrealloc",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0d3",
                "FUN_0010a0bd",
                "FUN_0010a0a0",
                "FUN_0010a083"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_0010bf86",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_00114d60",
                "FUN_0010a77a",
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011378f",
                "FUN_00116852",
                "FUN_00112904",
                "FUN_0010c139",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00113da9",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_001199d0",
                "FUN_0011a480",
                "FUN_00109ed3",
                "FUN_0010e453",
                "FUN_00113b98",
                "FUN_00114460",
                "FUN_00109b52",
                "FUN_0010dac0",
                "FUN_00107880",
                "FUN_00112894",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010a94e",
                "FUN_0010ab4d",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_00114cf0",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010a69a",
                "FUN_00112925",
                "FUN_00113d6e",
                "FUN_00114c80",
                "FUN_0010c7a0",
                "FUN_0010e9a0",
                "FUN_0010da0b",
                "FUN_0010e918",
                "FUN_0010c6be",
                "FUN_00113c43",
                "FUN_0010be88",
                "FUN_0010a0e9",
                "FUN_0010bd62",
                "FUN_00114190",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_0010c218",
                "FUN_0010ba08",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "ptr1",
                "puVar2": "ptr2",
                "puVar3": "ptr3",
                "lVar4": "loopCounter",
                "puVar5": "ptr5",
                "pcVar6": "defaultFilename",
                "bVar7": "byteVar",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 *ptr1;\n  undefined4 *ptr2;\n  undefined4 *ptr3;\n  long loopCounter;\n  undefined4 *ptr5;\n  char *defaultFilename;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  ptr2 = (undefined4 *)xmalloc(0x18);\n  ptr5 = ptr2;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n  }\n  *(char **)(ptr2 + 2) = defaultFilename;\n  ptr3 = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)ptr2;\n  ptr5 = ptr3;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *ptr5 = 0;\n    ptr5 = ptr5 + (ulong)byteVar * -2 + 1;\n  }\n  ptr1 = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(ptr3 + 2) = ptr2;\n  if (ptr1 == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)ptr3;\n  }\n  else {\n    *ptr1 = ptr3;\n  }\n  debugInfo[1] = (long)ptr3;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = build_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = build_filename_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    print_error_info_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = build_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = build_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = build_filename_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = build_filename_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = build_filename_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = check_architecture_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    print_error_info_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = string_comparison_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = string_comparison_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,process_binary_section_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_info_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = process_data_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_info_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_info_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      print_error_info_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = process_data_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_info_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      print_error_info_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_info_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_info_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_info_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_info_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = process_binary_object_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)initialize_memory_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = decode_and_process_debug_info_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = process_debug_function_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = initialize_memory_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          update_data_and_return_index_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = decode_and_process_debug_info_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar35 != 0) && (cVar11 = process_debug_function_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = initialize_debug_info_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_binary_function_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = process_record_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = start_block_debugging_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = debug_end_block_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = parse_binary_function_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = initialize_debug_record_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = record_line_debug_info_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = end_function_debugging_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = decode_and_copy_section_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = search_or_traverse_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = search_or_traverse_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = search_or_traverse_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = search_or_traverse_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = decode_and_copy_section_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUNC_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_info_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,update_relocations_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,process_section_00115dc0,param_2);\n    bfd_map_over_sections(param_1,section_reverse_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        print_error_info_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        print_error_info_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = string_comparison_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_info_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          print_error_info_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = string_comparison_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_info_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)merge_build_attributes_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_info_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_001125fa",
                "FUN_00107976",
                "dcgettext",
                "bfd_set_format",
                "FUN_001126c0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_relevant_value_00115d00",
                "param_1": "inputParam",
                "param_2": "binaryParam",
                "uVar1": "totalCount",
                "lVar2": "result"
            },
            "code": "\nlong findRelevantValue_00115d00(long inputParam,long binaryParam)\n\n{\n  uint totalCount;\n  long result;\n  \n  result = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(binaryParam + 8) + 8) == 5) {\n      if (*(int *)(inputParam + 0x28) == *(int *)(*(long *)(binaryParam + 0x110) + 0xd40)) {\n        totalCount = *(uint *)(inputParam + 0x2c);\n        if (totalCount == 0) {\n          result = 0;\n        }\n        else if ((ulong)totalCount <\n                 *(ulong *)(*(long *)(binaryParam + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryParam + 8) + 0x380) + 0x340) + 5))\n        {\n          result = *(long *)(DAT_001278d0 + (ulong)(totalCount - 1) * 8);\n        }\n        else {\n          result = 0;\n        }\n      }\n      else {\n        result = 0;\n      }\n    }\n    else {\n      result = 0;\n    }\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_001159d0",
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "find_relevant_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_and_allocate_memory_00113c43",
                "param_1": "input_param1",
                "param_2": "input_param2",
                "param_3": "input_param3",
                "param_4": "input_param4",
                "param_5": "input_param5",
                "param_6": "input_param6",
                "lVar1": "memory_address",
                "plVar2": "memory_ptr",
                "auVar3": "return_val"
            },
            "code": "\nundefined  [16]\ninitialize_and_allocate_memory_00113c43(long input_param1,long input_param2,long input_param3,long input_param4,undefined input_param5,\n            undefined8 input_param6)\n\n{\n  long memory_address;\n  long *memory_ptr;\n  undefined return_val [16];\n  \n  if ((input_param1 != 0) && (input_param2 != 0)) {\n    memory_address = initialize_function_00112904(0x10,0);\n    if (memory_address != 0) {\n      memory_ptr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)memory_ptr + 0x21) = 0;\n      *memory_ptr = input_param1;\n      *(undefined4 *)((long)memory_ptr + 0x24) = 0;\n      memory_ptr[1] = input_param2;\n      memory_ptr[2] = input_param3;\n      memory_ptr[3] = input_param4;\n      *(undefined *)(memory_ptr + 4) = input_param5;\n      *(long **)(memory_address + 0x10) = memory_ptr;\n      goto LAB_00113caa;\n    }\n  }\n  memory_address = 0;\nLAB_00113caa:\n  return_val._8_8_ = input_param6;\n  return_val._0_8_ = memory_address;\n  return return_val;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "process_record_00112a33",
                "param_1": "data",
                "param_2": "record",
                "param_3": "config",
                "param_4": "recordType",
                "param_5": "context",
                "param_6": "size",
                "param_7": "flags",
                "uVar1": "result",
                "lVar2": "tag",
                "plVar3": "slotPointer"
            },
            "code": "\nbool processRecord_00112a33(undefined8 data,long record,undefined8 config,byte recordType,undefined8 context\n                 ,undefined8 size,uint flags)\n\n{\n  undefined result;\n  long tag;\n  long *slotPointer;\n  \n  if (recordType < 0x12) {\n    if (recordType != 0) {\n      switch(recordType) {\n      case 1:\n        result = record_variable_0010c05d(context,*(undefined8 *)(record + 8),size,4,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = record_variable_0010c05d(context,*(undefined8 *)(record + 8),size,(flags & 0xff) + 2,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = record_variable_0010c05d(context,*(undefined8 *)(record + 8),size,5,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = record_parameter_0010bd62(context,*(undefined8 *)(record + 8),size,1,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        tag = find_debug_tag_type_0010c6be(context,*(undefined8 *)(record + 8));\n        if (tag == 0) {\n          return false;\n        }\n        slotPointer = (long *)allocate_and_initialize_slots_0010da0b(data,config);\n        *slotPointer = tag;\n        break;\n      case 0xd:\n        tag = initialize_and_allocate_memory_0010c218(context,*(undefined8 *)(record + 8));\n        return tag != 0;\n      case 0x11:\n        result = record_parameter_0010bd62(context,*(undefined8 *)(record + 8),size,2,\n                             *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (recordType == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = record_variable_0010c05d(context,*(undefined8 *)(record + 8),size,1,\n                         *(long *)(record + 0x10) + *(long *)(*(long *)(record + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010bd62",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_record_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "initialize_and_allocate_data_0010c2d2",
                "param_1": "outputPtr",
                "param_2": "inputPtr",
                "param_3": "dataTypePtr",
                "uVar1": "type",
                "pcVar2": "dataTypeString",
                "uVar3": "dataValue",
                "lVar4": "result",
                "plVar5": "fileDataPtr",
                "uVar6": "dataTypeIndex"
            },
            "code": "\n\n\nlong initializeAndAllocateData_0010c2d2(undefined8 outputPtr,long inputPtr,int *dataTypePtr)\n\n{\n  uint type;\n  char *dataTypeString;\n  undefined8 dataValue;\n  long result;\n  long *fileDataPtr;\n  uint dataTypeIndex;\n  \n  if ((*dataTypePtr == 0) && (type = dataTypePtr[1], (int)type < 0)) {\n    dataTypeIndex = ~type;\n    if (dataTypeIndex < 0x22) {\n      result = *(long *)(inputPtr + 0x90 + (ulong)dataTypeIndex * 8);\n      if (result == 0) {\n        switch(dataTypeIndex) {\n        case 1:\n          dataValue = update_data_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          dataValue = update_data_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          dataValue = update_data_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          dataValue = update_data_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          dataValue = update_data_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          dataValue = update_data_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          dataValue = update_data_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          dataValue = update_data_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          dataValue = update_data_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          dataValue = initialize_function_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          dataValue = initialize_function_with_param_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          dataValue = initialize_function_with_param_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          dataValue = initialize_function_with_param_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          dataValue = update_data_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          dataValue = initialize_function_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          dataValue = initialize_function_with_param_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          dataValue = initialize_function_with_param_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          dataValue = 0;\n          break;\n        case 0x13:\n          dataValue = update_data_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          dataValue = initialize_function_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          dataValue = initialize_function_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          dataValue = initialize_function_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          dataValue = initialize_function_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          dataValue = initialize_function_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          dataValue = initialize_function_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          dataValue = update_data_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          dataValue = update_data_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          dataValue = update_data_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          dataValue = update_data_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          dataValue = update_data_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          dataValue = update_data_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          dataValue = initialize_function_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          dataValue = update_data_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          dataValue = update_data_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        result = initialize_and_allocate_memory_0010c218(outputPtr,dataTypeString,dataValue);\n        *(long *)(inputPtr + 0x90 + (ulong)dataTypeIndex * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)type);\n  }\n  else {\n    fileDataPtr = (long *)get_file_data_00109022(inputPtr);\n    if (fileDataPtr != (long *)0x0) {\n      if (*fileDataPtr == 0) {\n        result = initialize_and_store_data_00113e23(fileDataPtr,0);\n        return result;\n      }\n      return *fileDataPtr;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_00113dfe",
                "FUN_00113e23",
                "FUN_00112904",
                "FUN_00109022"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_data_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "process_binary_0010e07c",
                "param_2": "symbol_table",
                "param_4": "is_64bit",
                "param_5": "coff_header",
                "lVar1": "symbol_count",
                "lVar2": "symbol_entry",
                "lVar3": "symbol_index",
                "cVar4": "result",
                "uVar5": "error_code",
                "__ptr": "processed_symbols",
                "uVar6": "return_value",
                "uVar7": "error_message",
                "puVar8": "new_symbol_entry",
                "pcVar9": "error_format",
                "puVar10": "aux_data",
                "uVar11": "aux_data_size",
                "lVar12": "processed_symbol_count",
                "iVar13": "aux_data_offset",
                "iVar14": "symbol_table_size",
                "local_a8": "symbol_name_low",
                "uStack_a4": "symbol_name_high",
                "uStack_a0": "symbol_value_low",
                "uStack_9c": "symbol_value_high",
                "local_88": "symbol_data",
                "local_6a": "symbol_type",
                "local_68": "symbol_class",
                "local_67": "has_aux_data",
                "local_60": "aux_data_buffer",
                "local_56": "aux_data_type"
            },
            "code": "\nundefined8\nprocess_binary_0010e07c(undefined8 param_1,long *symbol_table,undefined8 param_3,int is_64bit,long coff_header,\n            undefined8 param_6)\n\n{\n  long symbol_count;\n  long symbol_entry;\n  long symbol_index;\n  char result;\n  undefined4 error_code;\n  void *processed_symbols;\n  undefined8 return_value;\n  undefined8 error_message;\n  undefined4 *new_symbol_entry;\n  char *error_format;\n  undefined *aux_data;\n  uint aux_data_size;\n  long processed_symbol_count;\n  int aux_data_offset;\n  int symbol_table_size;\n  undefined4 symbol_name_low;\n  undefined4 symbol_name_high;\n  undefined4 symbol_value_low;\n  undefined4 symbol_value_high;\n  undefined symbol_data [30];\n  undefined2 symbol_type;\n  byte symbol_class;\n  byte has_aux_data;\n  undefined aux_data_buffer [10];\n  ushort aux_data_type;\n  \n  symbol_table_size = 10;\n  processed_symbol_count = 0;\n  symbol_count = *(long *)(coff_header + 0x18);\n  processed_symbols = (void *)xmalloc(0x50);\n  while ((symbol_table[3] < symbol_count && (symbol_table[2] < symbol_table[1]))) {\n    symbol_entry = *(long *)(*symbol_table + symbol_table[2] * 8);\n    result = bfd_coff_get_syment(param_1,symbol_entry,symbol_data);\n    if (result == '\\0') {\n      error_code = bfd_get_error();\n      return_value = bfd_errmsg(error_code);\n      error_format = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      error_message = dcgettext(0,error_format,5);\n      print_error_message_00119ed0(error_message,return_value);\n      free(processed_symbols);\n      return 0;\n    }\n    symbol_index = symbol_table[3];\n    aux_data = (undefined *)0x0;\n    symbol_table[2] = symbol_table[2] + 1;\n    symbol_table[3] = symbol_index + 1 + (ulong)has_aux_data;\n    if (has_aux_data != 0) {\n      aux_data = aux_data_buffer;\n      result = bfd_coff_get_auxent(param_1,symbol_entry,0,aux_data);\n      if (result == '\\0') {\n        error_code = bfd_get_error();\n        return_value = bfd_errmsg(error_code);\n        error_format = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (symbol_class == 0x12) {\n      aux_data_size = (uint)aux_data_type;\n      aux_data_offset = (int)*(undefined8 *)(symbol_entry + 0x10) +\n               (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30);\n    }\n    else {\n      if (symbol_class < 0x13) {\n        if ((symbol_class == 8) || (symbol_class == 0xb)) {\n          aux_data_size = 0;\n          aux_data_offset = ((int)*(undefined8 *)(symbol_entry + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(symbol_entry + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (symbol_class == 0x66) break;\n      aux_data_size = 0;\n      aux_data_offset = 0;\n    }\nLAB_0010e214:\n    error_message = parse_binary_function_0010dac0(param_1,symbol_table,param_3,symbol_index,symbol_type,aux_data,1);\n    return_value = *(undefined8 *)(symbol_entry + 8);\n    new_symbol_entry = (undefined4 *)xmalloc(0x20);\n    symbol_name_low = (undefined4)return_value;\n    symbol_name_high = (undefined4)((ulong)return_value >> 0x20);\n    symbol_value_low = (undefined4)error_message;\n    symbol_value_high = (undefined4)((ulong)error_message >> 0x20);\n    *(undefined8 *)(new_symbol_entry + 5) = 0;\n    new_symbol_entry[6] = aux_data_offset;\n    new_symbol_entry[7] = aux_data_size;\n    new_symbol_entry[4] = 0;\n    *new_symbol_entry = symbol_name_low;\n    new_symbol_entry[1] = symbol_name_high;\n    new_symbol_entry[2] = symbol_value_low;\n    new_symbol_entry[3] = symbol_value_high;\n    if (symbol_table_size <= (int)processed_symbol_count + 1) {\n      symbol_table_size = symbol_table_size + 10;\n      processed_symbols = (void *)xrealloc(processed_symbols,(long)symbol_table_size << 3,new_symbol_entry,0,param_6);\n    }\n    *(undefined4 **)((long)processed_symbols + processed_symbol_count * 8) = new_symbol_entry;\n    processed_symbol_count = processed_symbol_count + 1;\n  }\n  *(undefined8 *)((long)processed_symbols + (long)(int)processed_symbol_count * 8) = 0;\n  return_value = initialize_byte_array_00113da9(is_64bit == 8,*(undefined2 *)(coff_header + 10),processed_symbols);\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113da9",
                "dcgettext",
                "FUN_0010dac0",
                "bfd_coff_get_auxent",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "process_binary_0010e07c",
            "code_backup": "\nundefined8\nFUN_0010e07c(undefined8 param_1,long *param_2,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long lVar1;\n  long lVar2;\n  long lVar3;\n  char cVar4;\n  undefined4 uVar5;\n  void *__ptr;\n  undefined8 uVar6;\n  undefined8 uVar7;\n  undefined4 *puVar8;\n  char *pcVar9;\n  undefined *puVar10;\n  uint uVar11;\n  long lVar12;\n  int iVar13;\n  int iVar14;\n  undefined4 local_a8;\n  undefined4 uStack_a4;\n  undefined4 uStack_a0;\n  undefined4 uStack_9c;\n  undefined local_88 [30];\n  undefined2 local_6a;\n  byte local_68;\n  byte local_67;\n  undefined local_60 [10];\n  ushort local_56;\n  \n  iVar14 = 10;\n  lVar12 = 0;\n  lVar1 = *(long *)(param_5 + 0x18);\n  __ptr = (void *)xmalloc(0x50);\n  while ((param_2[3] < lVar1 && (param_2[2] < param_2[1]))) {\n    lVar2 = *(long *)(*param_2 + param_2[2] * 8);\n    cVar4 = bfd_coff_get_syment(param_1,lVar2,local_88);\n    if (cVar4 == '\\0') {\n      uVar5 = bfd_get_error();\n      uVar6 = bfd_errmsg(uVar5);\n      pcVar9 = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      uVar7 = dcgettext(0,pcVar9,5);\n      print_error_message_00119ed0(uVar7,uVar6);\n      free(__ptr);\n      return 0;\n    }\n    lVar3 = param_2[3];\n    puVar10 = (undefined *)0x0;\n    param_2[2] = param_2[2] + 1;\n    param_2[3] = lVar3 + 1 + (ulong)local_67;\n    if (local_67 != 0) {\n      puVar10 = local_60;\n      cVar4 = bfd_coff_get_auxent(param_1,lVar2,0,puVar10);\n      if (cVar4 == '\\0') {\n        uVar5 = bfd_get_error();\n        uVar6 = bfd_errmsg(uVar5);\n        pcVar9 = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_68 == 0x12) {\n      uVar11 = (uint)local_56;\n      iVar13 = (int)*(undefined8 *)(lVar2 + 0x10) +\n               (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30);\n    }\n    else {\n      if (local_68 < 0x13) {\n        if ((local_68 == 8) || (local_68 == 0xb)) {\n          uVar11 = 0;\n          iVar13 = ((int)*(undefined8 *)(lVar2 + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(lVar2 + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_68 == 0x66) break;\n      uVar11 = 0;\n      iVar13 = 0;\n    }\nLAB_0010e214:\n    uVar7 = FUNC_0010dac0(param_1,param_2,param_3,lVar3,local_6a,puVar10,1);\n    uVar6 = *(undefined8 *)(lVar2 + 8);\n    puVar8 = (undefined4 *)xmalloc(0x20);\n    local_a8 = (undefined4)uVar6;\n    uStack_a4 = (undefined4)((ulong)uVar6 >> 0x20);\n    uStack_a0 = (undefined4)uVar7;\n    uStack_9c = (undefined4)((ulong)uVar7 >> 0x20);\n    *(undefined8 *)(puVar8 + 5) = 0;\n    puVar8[6] = iVar13;\n    puVar8[7] = uVar11;\n    puVar8[4] = 0;\n    *puVar8 = local_a8;\n    puVar8[1] = uStack_a4;\n    puVar8[2] = uStack_a0;\n    puVar8[3] = uStack_9c;\n    if (iVar14 <= (int)lVar12 + 1) {\n      iVar14 = iVar14 + 10;\n      __ptr = (void *)xrealloc(__ptr,(long)iVar14 << 3,puVar8,0,param_6);\n    }\n    *(undefined4 **)((long)__ptr + lVar12 * 8) = puVar8;\n    lVar12 = lVar12 + 1;\n  }\n  *(undefined8 *)((long)__ptr + (long)(int)lVar12 * 8) = 0;\n  uVar6 = initialize_byte_array_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),__ptr);\n  return uVar6;\n}\n\n"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "get_zero_value_001082c3",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t getZeroValue_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "get_zero_value_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "filename",
                "param_2": "map",
                "param_3": "fileText",
                "__n": "fileSize",
                "__ptr": "fileData",
                "__stream": "fileStream",
                "sVar5": "readResult",
                "ppbVar6": "slotPointer",
                "pbVar7": "currentPointer",
                "bVar8": "currentByte",
                "pbVar9": "nextPointer",
                "pbVar10": "iteratorPointer",
                "pbVar11": "lineEndPointer",
                "pbVar12": "lineStartPointer",
                "iVar1": "lineNumber",
                "piVar2": "errnoLocation",
                "pcVar3": "errMsg",
                "uVar4": "translatedErrMsg"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *filename,undefined8 map,byte **fileText)\n\n{\n  int lineNumber;\n  int *errnoLocation;\n  char *errMsg;\n  undefined8 translatedErrMsg;\n  size_t fileSize;\n  byte *fileData;\n  FILE *fileStream;\n  size_t readResult;\n  byte **slotPointer;\n  byte *currentPointer;\n  byte currentByte;\n  byte *nextPointer;\n  byte *iteratorPointer;\n  byte *lineEndPointer;\n  byte *lineStartPointer;\n  \n  fileSize = check_file_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    fileData = (byte *)xmalloc(fileSize + 2);\n    fileStream = fopen(filename,\"r\");\n    if (fileStream == (FILE *)0x0) {\n      errnoLocation = __errno_location();\n      errMsg = strerror(*errnoLocation);\n      translatedErrMsg = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      print_error_and_exit_00119dd0(translatedErrMsg,filename,errMsg);\n    }\n    readResult = fread(fileData,1,fileSize,fileStream);\n    if ((readResult == 0) || (lineNumber = ferror(fileStream), lineNumber != 0)) {\n      translatedErrMsg = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(translatedErrMsg,filename);\n    }\n    lineNumber = 1;\n    fclose(fileStream);\n    *(undefined2 *)(fileData + fileSize) = 10;\n    currentByte = *fileData;\n    lineStartPointer = fileData;\n    while (iteratorPointer = lineStartPointer, currentByte != 0) {\n      for (; currentByte = *iteratorPointer, lineEndPointer = iteratorPointer, currentByte != 10; iteratorPointer = iteratorPointer + 1) {\n        if ((char)currentByte < '\\v') {\n          if (currentByte == 0) {\n            nextPointer = iteratorPointer + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentByte == 0xd) {\n            *iteratorPointer = 0;\n            nextPointer = iteratorPointer + 1;\n            if (iteratorPointer[1] == 10) {\n              nextPointer = iteratorPointer + 2;\n              lineEndPointer = iteratorPointer + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentByte == 0x23) {\n            process_lines_00104d1c();\n            return;\n          }\n        }\n      }\n      *iteratorPointer = 0;\n      if (iteratorPointer[1] == 0xd) {\n        lineEndPointer = iteratorPointer + 1;\n        nextPointer = iteratorPointer + 2;\n      }\n      else {\n        nextPointer = iteratorPointer + 1;\n      }\nLAB_00114553:\n      currentByte = *lineStartPointer;\n      while ((currentByte == 0x20 || (iteratorPointer = lineStartPointer, currentByte == 9))) {\n        iteratorPointer = lineStartPointer + 1;\n        lineStartPointer = lineStartPointer + 1;\n        currentByte = *iteratorPointer;\n      }\n      do {\n        if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n        if (currentByte == 0) goto LAB_00114599;\n        currentByte = iteratorPointer[1];\n        iteratorPointer = iteratorPointer + 1;\n      } while ((currentByte != 0x20) && (currentByte != 9));\n      if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentByte = iteratorPointer[1];\n        if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n              ((currentByte = iteratorPointer[2], currentByte == 9 || (currentByte == 0x20)))) &&\n             ((currentByte = iteratorPointer[3], currentByte == 9 || (currentByte == 0x20)))) &&\n            ((currentByte = iteratorPointer[4], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = iteratorPointer[5], currentByte == 9 || (currentByte == 0x20)))) {\n          currentByte = iteratorPointer[6];\n          currentPointer = iteratorPointer + 6;\n          if ((currentByte == 9) || (currentByte == 0x20)) {\n            do {\n              do {\n                currentByte = currentPointer[1];\n                currentPointer = currentPointer + 1;\n              } while (currentByte == 0x20);\n            } while (currentByte == 9);\n          }\n        }\n        if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n          translatedErrMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          print_error_message_00119ed0(translatedErrMsg,filename,lineNumber);\n        }\n      }\nLAB_00114599:\n      *iteratorPointer = 0;\n      if (lineStartPointer < iteratorPointer) {\n        slotPointer = (byte **)htab_find_slot(map,lineStartPointer,1);\n        *slotPointer = lineStartPointer;\n      }\n      lineNumber = lineNumber + 1;\n      lineStartPointer = nextPointer;\n      currentByte = lineEndPointer[1];\n    }\n    *fileText = fileData;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "xmalloc",
                "fclose",
                "__errno_location",
                "dcgettext",
                "ferror",
                "fopen",
                "fread",
                "FUN_00113f50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "create_url_0010a94e",
                "param_1": "entryPoint",
                "param_2": "username",
                "param_3": "password",
                "param_4": "flag",
                "cVar1": "option",
                "__s": "nextEntry",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "allocatedString",
                "uVar8": "result",
                "pcVar9": "flagString",
                "lVar2": "entryData"
            },
            "code": "\nundefined8 createURL_0010a94e(long entryPoint,char *username,char *password,int flag)\n\n{\n  char option;\n  long entryData;\n  char *nextEntry;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *allocatedString;\n  undefined8 result;\n  char *flagString;\n  \n  option = *(char *)(*(long *)(entryPoint + 0x60) + 0x1c);\n  nextEntry = (char *)extract_and_free_next_entry_00109b2f();\n  allocatedString = *(char **)(*(long *)(entryPoint + 0x60) + 0x20);\n  if (allocatedString == (char *)0x0) {\n    result = 0;\n  }\n  else {\n    length1 = strlen(allocatedString);\n    length2 = strlen(username);\n    length3 = strlen(nextEntry);\n    length4 = strlen(password);\n    allocatedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(allocatedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(entryPoint + 0x60) + 0x20),username,flagString,\n            nextEntry,password,*(long *)(entryPoint + 0x60));\n    free(*(void **)(*(long *)(entryPoint + 0x60) + 0x20));\n    entryData = *(long *)(entryPoint + 0x60);\n    *(char **)(entryData + 0x20) = allocatedString;\n    if (option != '\\0') {\n      *(undefined *)(entryData + 0x1c) = 1;\n    }\n    result = CONCAT71((int7)((ulong)entryData >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "create_url_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_debug_info_00113b1e",
                "param_1": "input_value",
                "param_2": "debug_flag",
                "param_3": "output_value",
                "param_4": "temp_value",
                "auVar1": "result_1",
                "piVar2": "debug_info_ptr",
                "uVar3": "debug_data",
                "auVar4": "result_2"
            },
            "code": "\nundefined  [16] extract_debug_info_00113b1e(long input_value,undefined8 debug_flag,ulong output_value,undefined8 temp_value)\n\n{\n  undefined result_1 [16];\n  int *debug_info_ptr;\n  undefined8 debug_data;\n  undefined result_2 [16];\n  \n  if (input_value != 0) {\n    debug_info_ptr = (int *)find_circular_debug_info_00112b6e(input_value,0);\n    if ((debug_info_ptr == (int *)0x0) || (3 < *debug_info_ptr - 7U)) {\n      debug_data = 0;\n    }\n    else {\n      debug_data = **(undefined8 **)(debug_info_ptr + 4);\n    }\n    result_2._8_8_ = temp_value;\n    result_2._0_8_ = debug_data;\n    return result_2;\n  }\n  result_1._8_8_ = 0;\n  result_1._0_8_ = output_value;\n  return result_1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_debug_info_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "process_entry_0010a0e9",
                "param_1": "entryPtr",
                "param_2": "size1",
                "param_3": "size2",
                "uVar1": "entryFlag",
                "uVar2": "result",
                "__s": "entryString",
                "sVar3": "stringLength",
                "__s_00": "newString"
            },
            "code": "\nundefined4 processEntry_0010a0e9(long entryPtr,undefined8 size1,undefined8 size2)\n\n{\n  undefined entryFlag;\n  undefined4 result;\n  char *entryString;\n  size_t stringLength;\n  char *newString;\n  \n  entryFlag = *(undefined *)(*(long *)(entryPtr + 0x60) + 0x1c);\n  result = *(undefined4 *)(*(long *)(entryPtr + 0x60) + 0x18);\n  entryString = (char *)extract_and_free_next_entry_00109b2f();\n  stringLength = strlen(entryString);\n  newString = (char *)xmalloc(stringLength + 100);\n  sprintf(newString,\"r%s;%ld;%ld;\",entryString,size1,size2);\n  free(entryString);\n  result = initialize_data_structure_00109b52(entryPtr,newString,0,entryFlag,result);\n  if ((char)result != '\\0') {\n    free(newString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entry_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "process_data_00114c20",
                "param_1": "data",
                "cVar1": "comparisonResult",
                "pcVar2": "charPointer",
                "process_data_00114190": "processDataWithFlags",
                "string_comparison_00113fb0": "compareStrings"
            },
            "code": "\nvoid processData_00114c20(long data)\n\n{\n  char comparisonResult;\n  char *charPointer;\n  \n  processData_00114c20WithFlags(data,1,1);\n  comparisonResult = compareStrings(data,&DAT_0011b499);\n  if (comparisonResult != '\\0') {\n    charPointer = (char *)(data + 5);\n    if (*(char *)(data + 4) != 'a') {\n      charPointer = (char *)(data + 4);\n    }\n    if (*charPointer != '\\0') {\n      processData_00114c20WithFlags(charPointer,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_data_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_binary_section_00115f50",
                "param_1": "address",
                "param_2": "arguments",
                "param_3": "flag",
                "__s1": "argumentString",
                "uVar1": "stringComparisonResult",
                "uVar2": "extraValue",
                "extraout_EDX": "extraOutputEDX",
                "plVar3": "pointerList",
                "auVar4": "temporaryArray"
            },
            "code": "\nuint checkBinarySection_00115f50(long address,char **arguments,char flag)\n\n{\n  char *argumentString;\n  uint stringComparisonResult;\n  undefined4 extraValue;\n  undefined4 extraOutputEDX;\n  long *pointerList;\n  undefined temporaryArray [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  temporaryArray = process_binary_section_001159d0(arguments);\n  if (temporaryArray[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      argumentString = *arguments;\n      pointerList = DAT_001279d8;\n      do {\n        stringComparisonResult = strcmp(argumentString,(char *)pointerList[1]);\n        temporaryArray._4_4_ = 0;\n        temporaryArray._0_4_ = stringComparisonResult;\n        temporaryArray._8_4_ = extraOutputEDX;\n        if (stringComparisonResult == 0) {\n          return 1;\n        }\n        pointerList = (long *)*pointerList;\n      } while (pointerList != (long *)0x0);\n    }\n    extraValue = temporaryArray._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (temporaryArray._8_4_ = extraValue, temporaryArray._0_8_ = *(long *)(address + 8),\n         *(int *)(*(long *)(address + 8) + 8) != 5)) ||\n        ((temporaryArray._0_8_ = (ulong)arguments[0x1a], *(int *)(arguments[0x1a] + 4) != 7 ||\n         (temporaryArray = string_comparison_00113fb0(*arguments,\".gnu.build.attributes\"), temporaryArray[0] == '\\0')))) &&\n       ((*(byte *)((long)arguments + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(temporaryArray._1_7_,arguments[8] == (char *)0x0) |\n             CONCAT31(temporaryArray._9_3_,arguments[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_001159d0",
                "FUN_00113fb0",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00116110",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "check_binary_section_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "print_error_and_exit_001083de",
                "unaff_RBX": "sectionLength",
                "unaff_EBP": "errorCode",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printErrorAndExit_001083de(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionLength;\n  undefined4 errorCode;\n  \n  section = *sectionLength;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  print_error_and_exit_00119dd0(errorMessage,section,errorCode);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_0010554f",
                "FUN_0011a2e0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "initialize_or_format_data_0010b948",
                "param_1": "inputArg1",
                "param_2": "inputArg2",
                "lVar1": "localVar1",
                "cVar2": "charVar",
                "__ptr": "ptr",
                "uVar3": "ulongVar",
                "uVar4": "uintVar",
                "local_5a": "localArray"
            },
            "code": "\nvoid initializeOrFormatData_0010b948(long inputArg1,uint inputArg2)\n\n{\n  long localVar1;\n  char charVar;\n  void *ptr;\n  ulong ulongVar;\n  uint uintVar;\n  char localArray [50];\n  \n  uintVar = inputArg2 - 1;\n  ulongVar = (ulong)inputArg2;\n  if ((uintVar < 0x10) && (localVar1 = *(long *)(inputArg1 + 0xf8 + (ulong)uintVar * 8), localVar1 != 0)) {\n    initialize_and_format_data_00109cf4(inputArg1,localVar1,ulongVar);\n    return;\n  }\n  charVar = format_and_initialize_0010b800(inputArg1,4,0);\n  if (charVar != '\\0') {\n    ptr = (void *)extract_and_free_next_entry_00109b2f(inputArg1);\n    localVar1 = *(long *)(inputArg1 + 0x68);\n    *(long *)(inputArg1 + 0x68) = localVar1 + 1;\n    if (uintVar < 0x10) {\n      *(long *)(inputArg1 + 0xf8 + (ulong)uintVar * 8) = localVar1;\n    }\n    sprintf(localArray,\"%ld=r%s;%u;0;\",localVar1,ptr,ulongVar);\n    free(ptr);\n    initialize_data_structure_00109b52(inputArg1,localArray,localVar1,1,ulongVar);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4",
                "FUN_0010b800",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_format_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_0010e07c",
                "FUN_00119970",
                "FUN_00114690",
                "FUN_00116490",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00108200",
                "FUN_0010ee3f",
                "FUN_0010e2f0",
                "FUN_00115b70",
                "FUN_00113f50",
                "FUN_0010be1a",
                "FUN_00108d9a",
                "FUN_00109a32",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0010808f",
                "FUN_0011256b",
                "FUN_00104966",
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_00119f70",
                "FUN_00108375",
                "FUN_00104920",
                "FUN_0010bc80",
                "FUN_00112b6e",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010543c",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_00114460",
                "FUN_00107976",
                "FUN_0010551d",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00104cc1",
                "FUN_001152b6",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00114e50",
                "FUN_00107880",
                "FUN_0010882c",
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_0010e6a8",
                "FUN_00112996",
                "FUN_0010871c",
                "FUN_001083de",
                "FUN_00108808",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_00104ea2",
                "FUN_00108fb9",
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_0010da0b",
                "FUN_0010c892",
                "FUN_0010b800",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_0010c2d2",
                "FUN_00108072",
                "FUN_00108fe8",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108179",
                "FUN_00114190",
                "FUN_00108916",
                "FUN_0010914e",
                "FUN_00112c1f",
                "FUN_00104ad6",
                "FUN_0010827b",
                "FUN_00108a2a",
                "FUN_00114e00",
                "FUN_0010c218",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "find_circular_debug_info_00112b6e",
                "param_1": "input_array",
                "param_2": "debug_info_array",
                "iVar1": "array_length",
                "uVar2": "debug_type",
                "__format": "debug_error_format",
                "piVar3": "result_array",
                "plVar4": "current_debug_info",
                "bVar5": "is_circular",
                "local_18": "temp_debug_info_array",
                "local_10": "temp_array"
            },
            "code": "\n\n\nint * find_circular_debug_info_00112b6e(int *input_array,long *debug_info_array)\n\n{\n  int array_length;\n  undefined8 debug_type;\n  char *debug_error_format;\n  int *result_array;\n  long *current_debug_info;\n  bool is_circular;\n  long *temp_debug_info_array;\n  int *temp_array;\n  \n  array_length = *input_array;\n  if ((array_length != 1) && (1 < array_length - 0x16U)) {\n    return input_array;\n  }\n  current_debug_info = debug_info_array;\n  while (current_debug_info != (long *)0x0) {\n    if ((input_array == (int *)current_debug_info[1]) ||\n       (is_circular = current_debug_info == (long *)*current_debug_info, current_debug_info = (long *)*current_debug_info, is_circular)) {\n      debug_type = get_return_value_001129f4(input_array,\"debug_get_real_type: circular debug information for %s\\n\");\n      debug_error_format = (char *)dcgettext(0);\n      fprintf(_stderr,debug_error_format,debug_type);\n      return (int *)0x0;\n    }\n  }\n  temp_debug_info_array = debug_info_array;\n  temp_array = input_array;\n  if (array_length - 0x16U < 2) {\n    result_array = (int *)find_circular_debug_info_00112b6e((*(undefined8 **)(input_array + 4))[1],&temp_debug_info_array);\n    return result_array;\n  }\n  result_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (input_array == result_array) {\n    return input_array;\n  }\n  if (result_array == (int *)0x0) {\n    return input_array;\n  }\n  result_array = (int *)find_circular_debug_info_00112b6e(result_array,&temp_debug_info_array);\n  return result_array;\n}\n\n",
            "called": [
                "fprintf",
                "FUN_001129f4",
                "dcgettext",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_00113b1e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_0010922b",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "find_circular_debug_info_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data_ptr",
                "param_2": "input_param",
                "param_3": "size_param",
                "param_4": "flag_param",
                "param_5": "length_param",
                "param_6": "byte_param1",
                "param_7": "byte_param2",
                "uVar1": "result",
                "__s": "str_ptr",
                "__s_00": "new_str_ptr",
                "sVar2": "str_length",
                "cVar3": "char_val"
            },
            "code": "\nundefined4\nprocess_data_0010a83e(long data_ptr,undefined8 input_param,ulong size_param,undefined flag_param,ulong length_param,\n            byte byte_param1,byte byte_param2)\n\n{\n  undefined4 result;\n  char *str_ptr;\n  char *new_str_ptr;\n  size_t str_length;\n  char char_val;\n  \n  if (((byte_param2 ^ 1) & byte_param1) == 0) {\n    str_ptr = (char *)0x0;\n    char_val = '\\0';\n  }\n  else {\n    char_val = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n    str_ptr = (char *)extract_and_free_next_entry_00109b2f();\n    length_param = length_param & 0xffffffff;\n    size_param = size_param & 0xffffffff;\n  }\n  result = initialize_data_0010a69a(data_ptr,input_param,size_param,flag_param,length_param);\n  if ((char)result != '\\0') {\n    if (byte_param1 == 0) {\n      return result;\n    }\n    if (byte_param2 == 0) {\n      if (str_ptr == (char *)0x0) {\n        return 0;\n      }\n      str_length = strlen(str_ptr);\n      new_str_ptr = (char *)xmalloc(str_length + 3);\n      sprintf(new_str_ptr,\"~%%%s\",str_ptr);\n      free(str_ptr);\n      if (char_val != '\\0') {\n        *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data_ptr + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      new_str_ptr = (char *)xmalloc(0x14);\n      sprintf(new_str_ptr,\"~%%%ld\",*(undefined8 *)(*(long *)(data_ptr + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data_ptr + 0x60) + 0x38) = new_str_ptr;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010a69a",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_entry_00113d6e",
                "param_1": "input1",
                "param_2": "input2",
                "lVar1": "result",
                "puVar2": "ptrToEntry"
            },
            "code": "\nlong createEntry_00113d6e(undefined8 input1,undefined8 input2)\n\n{\n  long result;\n  undefined8 *ptrToEntry;\n  \n  result = initialize_function_00112904(0xb,0);\n  if (result != 0) {\n    ptrToEntry = (undefined8 *)xmalloc(0x10);\n    *ptrToEntry = input1;\n    ptrToEntry[1] = input2;\n    *(undefined8 **)(result + 0x10) = ptrToEntry;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "create_entry_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010e07c",
                "FUN_0010e7c2",
                "FUN_00114690",
                "FUN_0010a377",
                "FUN_0010ee3f",
                "FUN_0010c1c6",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010b6ea",
                "FUN_0011256b",
                "FUN_00116852",
                "FUN_00109b2f",
                "FUN_00116b90",
                "FUN_0010afd5",
                "FUN_0010a424",
                "FUN_0010aa53",
                "FUN_00108466",
                "FUN_001199d0",
                "FUN_00109ed3",
                "FUN_0010b0fa",
                "FUN_0010e453",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010dac0",
                "FUN_00108863",
                "FUN_00107880",
                "FUN_0011173a",
                "FUN_0010e6a8",
                "FUN_0010a94e",
                "FUN_00116110",
                "FUN_0010a181",
                "FUN_00104ea2",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_001163d0",
                "FUN_0010a2b9",
                "FUN_00116030",
                "FUN_0010e9a0",
                "FUN_001081e9",
                "FUN_0010e918",
                "FUN_001088ae",
                "FUN_0010b948",
                "FUN_0010a0e9",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010ebb0",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010eafe",
                "FUN_00114b84",
                "FUN_0010c95e",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_if_valid_state_00114d50",
                "param_1": "statePtr1",
                "param_2": "statePtr2",
                "param_3": "condition"
            },
            "code": "\nvoid executeIfValidState_00114d50(long statePtr1,long statePtr2,uint condition)\n\n{\n  if (*(int *)(*(long *)(statePtr1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((condition == 2) && (*(int *)(*(long *)(statePtr2 + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(statePtr2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(statePtr1 + 8) + 0x380) + 0x78))(statePtr1,condition != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_if_valid_state_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00114d60",
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011283f",
                "FUN_00113f50",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_message_00108916",
                "param_1": "outputFile",
                "param_2": "errorCode",
                "uVar1": "defaultArch",
                "pcVar2": "localizedString"
            },
            "code": "\nvoid printUsageMessage_00108916(FILE *outputFile,int errorCode)\n\n{\n  undefined8 defaultArch;\n  char *localizedString;\n  \n  defaultArch = DAT_00127600;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,localizedString,defaultArch);\n  localizedString = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,localizedString);\n  print_supported_targets_00104a35(DAT_00127600,outputFile);\n  if (errorCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(errorCode);\n}\n\n",
            "called": [
                "exit",
                "FUN_00104a35",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_message_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_info_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "filename",
                "param_10": "errorCode10",
                "param_11": "errorArray",
                "param_12": "errorString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "iVar1": "error",
                "uVar2": "errorString2",
                "local_100": "bufferSize1",
                "local_fc": "bufferSize2",
                "local_f8": "bufferPtr1",
                "local_f0": "bufferPtr2",
                "local_e8": "localBuffer",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy"
            },
            "code": "\n\n\nvoid printErrorInfo_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long filename,long errorCode10,long *errorArray,char *errorString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char flag;\n  int error;\n  undefined8 errorString2;\n  undefined4 bufferSize1;\n  undefined4 bufferSize2;\n  undefined *bufferPtr1;\n  undefined *bufferPtr2;\n  undefined localBuffer [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (flag != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  error = bfd_get_error();\n  if (error == 0) {\n    errorString2 = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString2 = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (errorCode10 != 0) {\n    if (filename == 0) {\n      filename = build_filename_001125fa(errorCode10);\n    }\n    if ((errorArray != (long *)0x0) && (*errorArray != 0)) {\n      fprintf(_stderr,\": %s[%s]\",filename);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",filename);\nLAB_001127c1:\n  if (errorString != (char *)0x0) {\n    bufferPtr1 = &stack0x00000008;\n    bufferPtr2 = localBuffer;\n    bufferSize1 = 0x20;\n    bufferSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,errorString,&bufferSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorString2);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "fwrite",
                "bfd_errmsg",
                "bfd_get_error",
                "fprintf",
                "dcgettext",
                "vfprintf",
                "fflush",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_001086af",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108466",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_0010551d",
                "FUN_0010808f",
                "FUN_00115dc0",
                "FUN_00114e50",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "print_error_info_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001088ae",
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_00109b52",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_new_function_00113b4a",
                "param_1": "input_parameter",
                "lVar1": "function_result"
            },
            "code": "\nlong initialize_new_function_00113b4a(long input_parameter)\n\n{\n  long function_result;\n  \n  if (input_parameter != 0) {\n    function_result = initialize_function_00112904(0x15,0);\n    if (function_result == 0) {\n      function_result = 0;\n    }\n    else {\n      *(long *)(function_result + 0x10) = input_parameter;\n    }\n    return function_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_new_function_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_info_0010edb4",
                "param_1": "fileInfo",
                "param_2": "newFilename",
                "param_3": "flags",
                "param_4": "size",
                "cVar1": "isValidFilename",
                "iVar2": "filenameComparisonResult",
                "uVar3": "result",
                "in_R10": "additionalArgument"
            },
            "code": "\nundefined8 updateFileInfo_0010edb4(long fileInfo,undefined8 newFilename,undefined4 flags,ulong size)\n\n{\n  char isValidFilename;\n  int filenameComparisonResult;\n  undefined8 result;\n  undefined8 additionalArgument;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < size) {\n    *(ulong *)(fileInfo + 0x1f0) = size;\n  }\n  filenameComparisonResult = filename_cmp(newFilename);\n  if (filenameComparisonResult != 0) {\n    isValidFilename = process_string_0010e2f0(fileInfo,0x84,0,size,newFilename);\n    if (isValidFilename == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = newFilename;\n  }\n  result = process_string_0010e2f0(fileInfo,0x44,flags,size - *(long *)(fileInfo + 0x200),0,additionalArgument);\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_info_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c05d",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "FUN_00112996",
                "FUN_00119e70",
                "FUN_0010871c",
                "FUN_0010ee3f",
                "FUN_0010911f",
                "FUN_00109022",
                "FUN_0010be1a",
                "FUN_0010554f",
                "FUN_00108fb9",
                "FUN_0010b6ea",
                "FUN_00108f08",
                "FUN_0011256b",
                "FUN_0010c892",
                "FUN_001126c0",
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_0010c2d2",
                "FUN_0010be88",
                "FUN_0010bd62",
                "FUN_00108fe8",
                "FUN_00108916",
                "FUN_0010bc80",
                "FUN_0010914e",
                "FUN_00112b6e",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_00108a2a",
                "FUN_0010b0fa",
                "FUN_00104a35",
                "FUN_0010bf20",
                "FUN_0010c218"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_entries_0010e5db",
                "param_1": "entryPointer",
                "param_2": "numEntries",
                "cVar1": "result",
                "__ptr": "entryPtr",
                "__s": "entryString",
                "sVar2": "stringLength",
                "__s_00": "modifiedString",
                "in_R10": "inR10",
                "iVar3": "count",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16] processEntries_0010e5db(long entryPointer,int numEntries)\n\n{\n  char result;\n  void *entryPtr;\n  char *entryString;\n  size_t stringLength;\n  char *modifiedString;\n  ulong inR10;\n  int count;\n  undefined returnValue [16];\n  \n  count = 0;\n  do {\n    if (numEntries <= count) {\n      returnValue = process_data_00109ed3(entryPointer,0x66,0,entryPointer + 0x188,entryPointer + 400,inR10);\n      return returnValue;\n    }\n    if (*(char *)(*(long *)(entryPointer + 0x60) + 0x1c) == '\\0') {\n      entryPtr = (void *)extract_and_free_next_entry_00109b2f(entryPointer);\n      free(entryPtr);\n    }\n    else {\n      entryString = (char *)extract_and_free_next_entry_00109b2f(entryPointer);\n      stringLength = strlen(entryString);\n      modifiedString = (char *)xmalloc(stringLength + 3);\n      sprintf(modifiedString,\":t%s\",entryString);\n      free(entryString);\n      result = process_string_0010e2f0(entryPointer,0x80,0,0,modifiedString);\n      if (result == '\\0') {\n        returnValue._8_8_ = 0;\n        returnValue._0_8_ = inR10;\n        return returnValue << 0x40;\n      }\n      free(modifiedString);\n    }\n    count = count + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free",
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_entries_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "cleanup_and_print_error_00104d25",
                "param_7": "fileName"
            },
            "code": "\nvoid cleanupAndPrintError_00104d25(void)\n\n{\n  undefined8 fileName;\n  \n  DAT_00127a40 = 1;\n  print_error_info_001126c0(0,fileName,0,0);\n  remove_directory_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "cleanup_and_print_error_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "merge_debug_notes_0010551d",
                "puVar1": "pSectionFlags",
                "bVar2": "byteVar",
                "puVar3": "pString",
                "pcVar4": "pSectionFunction",
                "puVar5": "pSectionContents",
                "uVar6": "sectionSize",
                "uVar7": "sectionSizeAligned",
                "__s": "sectionName",
                "cVar8": "charVar",
                "cVar9": "charVar2",
                "uVar10": "sectionAttributes",
                "iVar11": "comparisonResult",
                "uVar12": "auxentResult",
                "iVar31": "loopIndex",
                "plVar15": "sectionInfo",
                "in_stack_00000008": "binaryObject",
                "unaff_RBX": "mergedNotes",
                "unaff_RBP": "currentSection",
                "unaff_R13": "mergedNotesEntry",
                "unaff_R14": "binaryInfo",
                "plVar32": "currentNote",
                "unaff_R1": "stack_00000008",
                "sVar18": "strLen",
                "ppcVar35": "debugSections",
                "ppuVar37": "stabEntries",
                "bVar38": "isDebug"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong MergeDebugNotes_0010551d(void)\n\n{\n  uint *pSectionFlags;\n  byte byteVar;\n  undefined *pString;\n  code *pSectionFunction;\n  undefined8 *pSectionContents;\n  ulong sectionSize;\n  ulong sectionSizeAligned;\n  char *sectionName;\n  char charVar;\n  char charVar2;\n  uint sectionAttributes;\n  int comparisonResult;\n  uint auxentResult;\n  undefined4 uVar13;\n  int iVar14;\n  long *sectionInfo;\n  undefined8 uVar16;\n  undefined8 uVar17;\n  size_t strLen;\n  char *pcVar19;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *sectionName_00;\n  size_t sVar26;\n  long lVar27;\n  long *mergedNotes;\n  char *pcVar28;\n  undefined8 *puVar29;\n  ulong uVar30;\n  int loopIndex;\n  long currentSection;\n  long *currentNote;\n  char *pcVar33;\n  undefined4 *pString4;\n  char **debugSections;\n  long *mergedNotesEntry;\n  void *pvVar36;\n  undefined8 *binaryInfo;\n  undefined **stabEntries;\n  bool isDebug;\n  byte bVar39;\n  long binaryObject;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar39 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  print_error_info_001126c0(0);\n  free(mergedNotes);\nLAB_001151a2:\n  currentSection = *(long *)(currentSection + 8);\n  puVar29 = DAT_001279d0;\n  if (currentSection == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(binaryInfo[1] + 8) != 5) || (*(int *)(*(long *)(currentSection + 0xd0) + 4) != 7)) ||\n        (charVar2 = string_comparison_00113fb0(), charVar2 == '\\0')) ||\n       ((*(long *)(currentSection + 0x60) == 0 || (lVar25 = *(long *)(currentSection + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    mergedNotes = (long *)xmalloc(0x20);\n    mergedNotes[1] = 0;\n    charVar2 = bfd_get_full_section_contents();\n    if (charVar2 != '\\0') {\n      lVar27 = merge_build_attributes_001163d0();\n      mergedNotes[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVar2 = bfd_set_section_size(), charVar2 != '\\0')) {\n        mergedNotes[3] = (long)mergedNotesEntry;\n        *mergedNotes = currentSection;\n        mergedNotesEntry = mergedNotes;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_info_001126c0(0,binaryObject,currentSection);\n        free((void *)mergedNotes[1]);\n        free(mergedNotes);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(currentSection + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_info_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_info_001126c0(0);\n    }\n    else {\n      strLen = *(size_t *)(lVar25 + 0x40);\n      sectionName_00 = fopen((char *)puVar29[2],\"w\");\n      if (sectionName_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_info_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVar2 = bfd_malloc_and_get_section();\n        if (charVar2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_info_001126c0(0);\n        }\n        else if ((strLen != 0) &&\n                (sVar26 = fwrite(in_stack_00000140,1,strLen,sectionName_00), sVar26 != strLen)) {\n          piVar23 = __errno_location();\n          pcVar33 = strerror(*piVar23);\n          uVar17 = puVar29[2];\n          uVar16 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar16,uVar17,pcVar33);\n          free(in_stack_00000140);\n          fclose(sectionName_00);\n          return 0;\n        }\n        fclose(sectionName_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(binaryObject,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      uVar17 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar17);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(binaryObject);\n    lVar25 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar17 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,binaryObject,0,uVar17,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(binaryObject + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(binaryObject + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        uVar30 = uVar20;\n        sectionSize = uVar24;\n        sectionSizeAligned = uVar20;\n        if (uVar22 != 0) {\n          while ((uVar30 = sectionSize, sectionSizeAligned != 0 &&\n                 (uVar30 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            sectionSize = uVar20;\n            sectionSizeAligned = uVar22;\n          }\n        }\n        uVar20 = uVar30;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  currentNote = DAT_001278d0;\n  iStack000000000000006c = *(int *)(binaryObject + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = process_binary_object_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    stabEntries = &PTR_ssectionNametab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pString4 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pString4 = 0;\n      pString4 = pString4 + (ulong)bVar39 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pString = *stabEntries;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVar2 = bfd_get_section_contents();\n        if (charVar2 == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*binaryInfo);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar13 = bfd_get_error();\n            bfd_errmsg(uVar13);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*binaryInfo);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(binaryInfo[1] + 0x40))(pvVar36);\n                byteVar = *(byte *)((long)pvVar36 + 4);\n                uVar13 = (**(code **)(binaryInfo[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(binaryInfo[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVar == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pcVar33 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      strLen = strlen(pcVar33);\n                      if (((strLen == 0) || (pcVar28 = pcVar33 + (strLen - 1), *pcVar28 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pcVar28 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      comparisonResult = (**(code **)(binaryInfo[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(comparisonResult + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pcVar33 = (char *)concat(pcVar33,(long)__ptr_00 + uVar20,0);\n                      *pcVar28 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar33;\n                    }\n                    uVar17 = *binaryInfo;\n                    pcVar28 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar28,uVar17,pString,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)byteVar,uVar13,lVar27,pcVar33);\n                    charVar2 = decode_and_process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVar);\n                    if (charVar2 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *binaryInfo;\n                    pcVar33 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar33,uVar17,pString,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVar,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      stabEntries = stabEntries + 2;\n    } while (stabEntries != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVar2 = process_debug_function_0010c892(), charVar2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(binaryInfo[1] + 8) == 1) {\n      lVar25 = 0;\n      for (sectionInfo = currentNote; sectionInfo < currentNote + in_stack_00000010; sectionInfo = sectionInfo + 1) {\n        (**(code **)(binaryInfo[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = initialize_memory_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pcVar33 = (char *)0x0;\n            pcVar28 = in_stack_00000150;\n            while (((*pcVar28 != '\\0' && (strLen = strlen(pcVar28), pcVar28[strLen - 1] == '\\')) &&\n                   (sectionInfo + 1 < currentNote + in_stack_00000010))) {\n              pcVar19 = (char *)xstrdup(pcVar28);\n              strLen = strlen(pcVar19);\n              pcVar19[strLen - 1] = '\\0';\n              pcVar28 = (char *)concat(pcVar19,*(undefined8 *)(sectionInfo[1] + 8),0);\n              free(pcVar19);\n              free(pcVar33);\n              sectionInfo = sectionInfo + 1;\n              pcVar33 = pcVar28;\n            }\n            update_data_and_return_index_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pcVar28);\n            in_stack_00000018 = decode_and_process_debug_info_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      free_memory_blocks_00108863();\n      if ((lVar25 != 0) && (charVar2 = process_debug_function_0010c892(), charVar2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(binaryInfo[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pcVar33 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = currentNote;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)bVar39 * -8 + 4);\n      }\n      charVar2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = currentNote[in_stack_000000d0];\n        charVar = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVar == '\\0') {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          uVar17 = dcgettext(0,pcVar33,5);\n          print_error_message_00119ed0(uVar17);\n          goto LAB_00105981;\n        }\n        pcVar33 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVar = bfd_coff_get_auxent(), charVar == '\\0')) {\n          uVar13 = bfd_get_error();\n          bfd_errmsg(uVar13);\n          pcVar33 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (charVar == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVar = initialize_debug_info_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(binaryInfo[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(binaryInfo[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(binaryInfo[1] + 0x238))();\n                pcStack0000000000000038 = pcVar33;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              comparisonResult = strcmp(pcVar33,\".bb\");\n              if (comparisonResult == 0) {\n                charVar = start_block_debugging_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              comparisonResult = strcmp(pcVar33,\".eb\");\n              if (comparisonResult == 0) {\n                charVar = debug_end_block_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              comparisonResult = strcmp(pcVar33,\".bf\");\n              if (comparisonResult == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = parse_binary_function_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVar2 = initialize_debug_record_0010bc80(puStack0000000000000020), charVar2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    comparisonResult = 0;\n                    if (bStack0000000000000101 != 0) {\n                      comparisonResult = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      loopIndex = _uStack0000000000000048[4];\n                      if (loopIndex == 0) break;\n                      charVar = record_line_debug_info_0010bf86(puStack0000000000000020,comparisonResult + loopIndex,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVar == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                comparisonResult = strcmp(pcVar33,\".ef\");\n                if (comparisonResult != 0) goto switchD_00106e1a_caseD_68;\n                if (charVar2 != '\\0') {\n                  charVar2 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (charVar2 == '\\0') goto LAB_00105981;\n                  charVar2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar33 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar33,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = parse_binary_function_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVar = process_record_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVar == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(binaryObject + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(binaryObject + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binaryObject + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        currentNote = DAT_001278d0 + in_stack_00000010;\n        sectionInfo = DAT_001278d0;\n        do {\n          sectionAttributes = *(uint *)(*sectionInfo + 0x18);\n          if ((sectionAttributes & 0x1000000) != 0) {\n            *(uint *)(*sectionInfo + 0x18) = sectionAttributes & 0xfeffffff;\n          }\n          sectionInfo = sectionInfo + 1;\n        } while (currentNote != sectionInfo);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(binaryObject + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pSectionFlags = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pSectionFlags = *pSectionFlags | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      comparisonResult = bfd_get_error();\n      if (comparisonResult != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    currentNote = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)binaryInfo + 0x44) & 0x42;\n    DAT_001278c8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        comparisonResult = DAT_001279c0;\n        sectionInfo = (long *)currentNote[_in_stack_00000018];\n        pSectionFunction = (code *)sectionInfo[4];\n        sectionAttributes = *(uint *)(sectionInfo + 3);\n        pcVar33 = (char *)sectionInfo[1];\n        pcVar28 = pcVar33;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          loopIndex = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((comparisonResult <= loopIndex) || (pcVar19 = (char *)puVar29[5], pcVar19 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pcVar19 != \"\") break;\nLAB_0010750b:\n            loopIndex = loopIndex + 1;\n          }\n          iVar14 = strcmp(pcVar19,pcVar33);\n          if (iVar14 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pcVar19);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          uVar16 = decode_and_copy_section_0011a2e0(puVar29);\n          uVar17 = DAT_001278f0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = uVar16;\n          lVar27 = htab_elements(uVar17);\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVar2 = *pcVar33;\n          if (charVar2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pcVar33 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binaryObject + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = binaryInfo[1];\n            charVar2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pcVar33 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pcVar33 == '_') && (pcVar33[1] == '_')) &&\n             (comparisonResult = strcmp(pcVar33 + (pcVar33[2] == '_'),\"__gnu_lto_slim\"), comparisonResult == 0)) {\n            uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pcVar33;\n        lVar27 = htab_find(DAT_001278f0);\n        if (((lVar27 == 0) || (pcVar28 = *(char **)(lVar27 + 8), pcVar33 == pcVar28)) &&\n           (pcVar28 = pcVar33, debugSections = DAT_001278f8, (sectionAttributes & 0x100) != 0)) {\n          for (; debugSections != (char **)0x0; debugSections = (char **)debugSections[3]) {\n            comparisonResult = strcmp(*debugSections,pcVar33);\n            if (comparisonResult == 0) {\n              pcVar28 = debugSections[1];\n              break;\n            }\n          }\n        }\n        sectionInfo[1] = (long)pcVar28;\n        charVar2 = *pcVar28;\n        if (charVar2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pcVar33 = DAT_00127928;\n        lVar27 = binaryInfo[1];\n        if (*(char *)(lVar27 + 0x1c) == charVar2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((sectionAttributes & 0x82) == 0 && (pSectionFunction != bfd_map_over_sections)) &&\n                ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pcVar28 = pcVar28 + 1;\n            sectionInfo[1] = (long)pcVar28;\n            goto joined_r0x00106565;\n          }\n          charVar2 = *(char *)(*(long *)(binaryObject + 8) + 0x1c);\n          if (charVar2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pcVar28 = pcVar28 + 1;\n            sectionInfo[1] = (long)pcVar28;\n            strLen = strlen(pcVar28);\n            lVar27 = strLen + 2;\n            goto LAB_001066bc;\n          }\n          *pcVar28 = charVar2;\n          sectionInfo[1] = (long)pcVar28;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binaryObject + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pcVar33 == (char *)0x0) goto LAB_00105b32;\n            strLen = strlen(pcVar28);\n            sVar26 = strlen(pcVar33);\n            pcVar33 = (char *)xmalloc(sVar26 + strLen + 1);\n            pcVar19 = pcVar33;\n          }\n          else {\nLAB_0010668d:\n            pcVar33 = DAT_00127928;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVar2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            strLen = strlen(pcVar28);\n            lVar27 = strLen + 2;\n            if (pcVar33 == (char *)0x0) {\n              pcVar19 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              strLen = strlen(pcVar33);\n              pcVar19 = (char *)xmalloc(strLen + lVar27);\n            }\n            pcVar33 = pcVar19 + 1;\n            *pcVar19 = *(char *)(*(long *)(binaryObject + 8) + 0x1c);\n          }\n          sectionName = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pcVar33,DAT_00127928);\n            strLen = strlen(sectionName);\n            pcVar33 = pcVar33 + strLen;\n          }\n          strcpy(pcVar33,pcVar28);\n          sectionInfo[1] = (long)pcVar19;\n          pcVar28 = pcVar19;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((sectionAttributes & 0x20) == 0) &&\n           (((sectionAttributes & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(sectionInfo[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((sectionAttributes & 0x82) != 0 || ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) != 0)))) ||\n             (comparisonResult = bfd_decode_symclass(sectionInfo), comparisonResult == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar28;\n              htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((sectionAttributes & 0x82) == 0) && (pSectionFunction != bfd_map_over_sections)) &&\n                  ((*(byte *)(sectionInfo[4] + 0x25) & 0x10) == 0)) {\n            if ((sectionAttributes & 4) == 0) {\n              if (((*(int *)(binaryInfo[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(sectionInfo[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVar2 = bfd_is_local_label(binaryInfo);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVar2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVar2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            print_error_message_00119ed0(uVar17);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pcVar28;\n          htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((sectionAttributes & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((sectionAttributes & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar28;\n            htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVar2 = process_binary_section_001159d0(sectionInfo[4]);\n          if (charVar2 == '\\0') {\n            if (((sectionAttributes & 0x800002) == 0) && (pSectionFunction != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((sectionAttributes & 0x82) != 0) {\n                charVar2 = search_or_traverse_00115d70(pcVar28);\n                if ((charVar2 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                    (charVar2 = search_or_traverse_00115d70(pcVar28), charVar2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (auxentResult = *(uint *)(sectionInfo + 3), (auxentResult & 0x200000) != 0)) ||\n                       (lVar27 = *sectionInfo, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)sectionInfo + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  auxentResult = *(uint *)(sectionInfo + 3);\n                }\n                *(uint *)(sectionInfo + 3) = auxentResult & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((sectionAttributes & 1) != 0) && (charVar2 = search_or_traverse_00115d70(pcVar28), charVar2 != '\\0')) {\n                *(uint *)(sectionInfo + 3) = *(uint *)(sectionInfo + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVar2 = search_or_traverse_00115d70(pcVar28), charVar2 != '\\0')) {\n                *(uint *)(sectionInfo + 3) = *(uint *)(sectionInfo + 3) & 0xff7ffffd | 0x80;\n              }\n              if (pSectionFunction != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = sectionInfo;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      comparisonResult = DAT_001279c0;\n      for (lVar27 = 0; lVar27 < comparisonResult; lVar27 = lVar27 + 1) {\n        pcVar33 = (char *)puVar29[5];\n        if (pcVar33 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          uVar17 = decode_and_copy_section_0011a2e0(puVar29,binaryObject);\n          *(undefined8 *)(lVar25 + lVar21) = uVar17;\n          comparisonResult = DAT_001279c0;\n        }\n        else if (pcVar33 != \"\") {\n          uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          print_error_and_exit_00119dd0(uVar17,pcVar33);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    isDebug = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((isDebug) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      comparisonResult = *(int *)(*(undefined8 **)(binaryObject + 8) + 1);\n      if ((comparisonResult != 5) && (comparisonResult != 2)) {\n        uVar17 = **(undefined8 **)(binaryObject + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,binaryObject,0,uVar16,uVar17);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVar2 = FUNC_0011378f(binaryObject,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVar2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(binaryObject,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(binaryObject,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVar2 = bfd_set_section_size(lVar25,in_stack_00000110), charVar2 == '\\0')) ||\n         (charVar2 = bfd_set_section_size(lVar27,in_stack_00000140), charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        uVar17 = dcgettext(0,pcVar33,5);\n        print_error_info_001126c0(0,binaryObject,0,uVar17);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVar2 = bfd_set_section_contents\n                        (binaryObject,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVar2 == '\\0') ||\n         (charVar2 = bfd_set_section_contents\n                            (binaryObject,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVar2 == '\\0')) {\n        pcVar33 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_00127a18);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a28), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_00127a08), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_00127a00), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279f8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279f0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278f0), lVar25 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(binaryObject,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(binaryInfo,process_section_00115dc0,binaryObject);\n  bfd_map_over_sections(binaryInfo,section_reverse_00116110,binaryObject);\n  for (puVar29 = DAT_001279e0; pSectionContents = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVar2 = bfd_set_section_contents(binaryObject,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVar2 == '\\0') {\n      print_error_info_001126c0(0,binaryObject,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pSectionContents != (undefined8 *)0x0; pSectionContents = (undefined8 *)*pSectionContents) {\n    uVar17 = *(undefined8 *)(pSectionContents[5] + 0x60);\n    charVar2 = bfd_set_section_contents(binaryObject,uVar17,pSectionContents[4],0,pSectionContents[3]);\n    if (charVar2 == '\\0') {\n      print_error_info_001126c0(0,binaryObject,uVar17,0);\n      return 0;\n    }\n  }\n  if (mergedNotesEntry == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      uVar17 = *binaryInfo;\n      uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      print_error_message_00119ed0(uVar16,uVar17);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVar2 = bfd_fill_in_gnu_debuglink_section(binaryObject,lStack0000000000000078),\n       lVar25 = DAT_00127a30, charVar2 != '\\0')) {\n      sectionAttributes = (**(code **)(*(long *)(binaryObject + 8) + 0x140))(binaryInfo);\n      uVar24 = (ulong)sectionAttributes;\n      if ((char)sectionAttributes != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        charVar2 = bfd_alt_mach_code(binaryObject,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVar2 != '\\0') {\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        print_error_message_00119ed0(uVar17,uVar20);\n        if (*(int *)(*(long *)(binaryObject + 8) + 8) != 5) {\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar24;\n        }\n        uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        print_error_message_00119ed0(uVar17);\n        *(short *)(*(long *)(binaryObject + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,binaryObject,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,binaryObject,0,uVar17,lVar25);\n    }\n    return 0;\n  }\n  currentNote = (long *)0x0;\n  puVar29 = *(undefined8 **)(binaryObject + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        currentNote = (long *)mergedNotesEntry[3];\n        free((void *)mergedNotesEntry[1]);\n        free(mergedNotesEntry);\n        mergedNotesEntry = currentNote;\n      } while (currentNote != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binaryObject + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVar2 = string_comparison_00113fb0(*puVar29,\".gnu.build.attributes\"), charVar2 != '\\0')) {\n      if (currentNote == (long *)0x0) {\n        currentNote = mergedNotesEntry;\n      }\n      sectionInfo = mergedNotesEntry;\n      if (*(undefined8 **)(*currentNote + 0x60) == puVar29) {\nLAB_0010625f:\n        pcVar33 = \"error: failed to merge notes\";\n        if (currentNote[1] != 0) {\n          charVar2 = bfd_set_section_contents(binaryObject,puVar29,currentNote[1],0,currentNote[2]);\n          if (charVar2 == '\\0') {\n            uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            print_error_info_001126c0(0,binaryObject,puVar29,uVar17);\n            return 0;\n          }\n          currentNote = (long *)currentNote[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          currentNote = sectionInfo;\n          if (*(undefined8 **)(*sectionInfo + 0x60) == puVar29) goto LAB_0010625f;\n          currentNote = (long *)sectionInfo[3];\n          sectionInfo = currentNote;\n        } while (currentNote != (long *)0x0);\n        pcVar33 = \"error: failed to locate merged notes\";\n      }\n      uVar17 = dcgettext(0,pcVar33,5);\n      print_error_info_001126c0(0,binaryObject,puVar29,uVar17);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_debug_notes_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_00105828",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "calculate_hash_00108800",
                "param_1": "input_string"
            },
            "code": "\nvoid calculate_hash_00108800(undefined8 *input_string)\n\n{\n  htab_hash_string(*input_string);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "calculate_hash_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "process_records_0010c1c6",
                "param_1": "context",
                "param_2": "records",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "puVar1": "nextRecord",
                "cVar2": "result",
                "__ptr": "currentRecord"
            },
            "code": "\nundefined processRecords_0010c1c6(undefined8 context,long records,undefined8 param3,undefined8 param4,\n                      undefined8 param5,undefined8 param6)\n\n{\n  undefined8 *nextRecord;\n  char result;\n  undefined8 *currentRecord;\n  \n  currentRecord = *(undefined8 **)(records + 0x78);\n  while( true ) {\n    if (currentRecord == (undefined8 *)0x0) {\n      *(undefined8 *)(records + 0x78) = 0;\n      return 1;\n    }\n    result = record_variable_0010c05d(context,currentRecord[1],currentRecord[2],*(undefined4 *)(currentRecord + 3),currentRecord[4],param6,\n                         param5);\n    if (result == '\\0') break;\n    nextRecord = (undefined8 *)*currentRecord;\n    free(currentRecord);\n    currentRecord = nextRecord;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0011173a",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "process_records_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "update_pointer_array_001082df",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "stackPointer",
                "uVar1": "arrayLength",
                "puVar4": "updatedPointerArray",
                "puVar5": "newPointerArray",
                "uVar6": "currentIndex",
                "unaff_R13": "pointerArray",
                "lVar2": "currentPointer",
                "cVar3": "searchResult"
            },
            "code": "\nvoid updatePointerArray_001082df(void)\n\n{\n  uint arrayLength;\n  long currentPointer;\n  char searchResult;\n  long baseAddress;\n  undefined8 *updatedPointerArray;\n  undefined8 *newPointerArray;\n  long stackPointer;\n  ulong currentIndex;\n  undefined8 *pointerArray;\n  \n  arrayLength = *(uint *)(baseAddress + 0x78);\n  if (DAT_00127a48 == 7) {\n    updatedPointerArray = pointerArray;\n    for (currentIndex = 0; currentIndex != arrayLength; currentIndex = currentIndex + 1) {\n      newPointerArray = updatedPointerArray;\n      if (((*(long **)pointerArray[currentIndex] != (long *)0x0) &&\n          (currentPointer = **(long **)pointerArray[currentIndex], currentPointer != 0)) &&\n         (searchResult = search_or_traverse_00115d70(*(undefined8 *)(currentPointer + 8),DAT_00127a28), searchResult != '\\0')) {\n        newPointerArray = updatedPointerArray + 1;\n        *updatedPointerArray = pointerArray[currentIndex];\n      }\n      updatedPointerArray = newPointerArray;\n    }\n    *updatedPointerArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(stackPointer + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "update_pointer_array_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_contents_00114d60",
                "param_1": "fileInfo",
                "iVar1": "endOfFile",
                "piVar2": "errorCode",
                "pcVar3": "errorString",
                "__stream": "filePointer",
                "uVar4": "errorFormat",
                "__errno_location()": "getErrorLocation()",
                "uVar5": "fileName",
                "lVar7": "currentPosition",
                "lVar8": "bufferSize",
                "sVar6": "bytesRead"
            },
            "code": "\nvoid readAndStoreFileContents_00114d60(long fileInfo)\n\n{\n  int endOfFile;\n  int *errorCode;\n  char *errorString;\n  undefined8 errorFormat;\n  FILE *filePointer;\n  undefined8 fileName;\n  size_t bytesRead;\n  long currentPosition;\n  long bufferSize;\n  \n  filePointer = fopen(*(char **)(fileInfo + 0x10),\"r\");\n  if (filePointer == (FILE *)0x0) {\n    errorCode = getErrorLocation();\n    errorString = strerror(*errorCode);\n    fileName = *(undefined8 *)(fileInfo + 0x10);\n    errorFormat = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    print_error_and_exit_00119dd0(errorFormat,fileName,errorString);\n  }\n  bufferSize = 0x1000;\n  currentPosition = 0;\n  fileName = xmalloc(0x1000);\n  *(undefined8 *)(fileInfo + 0x20) = fileName;\n  while( true ) {\n    endOfFile = feof(filePointer);\n    if (endOfFile != 0) {\n      *(long *)(fileInfo + 0x18) = currentPosition;\n      fclose(filePointer);\n      return;\n    }\n    if (currentPosition == bufferSize) {\n      bufferSize = currentPosition * 2;\n      fileName = xrealloc(*(undefined8 *)(fileInfo + 0x20),bufferSize);\n      *(undefined8 *)(fileInfo + 0x20) = fileName;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfo + 0x20) + currentPosition),1,bufferSize - currentPosition,filePointer);\n    endOfFile = ferror(filePointer);\n    if (endOfFile != 0) break;\n    currentPosition = currentPosition + bytesRead;\n  }\n  fileName = *(undefined8 *)(fileInfo + 0x10);\n  errorFormat = dcgettext(0,\"%s: fread failed\",5);\n                    \n  print_error_and_exit_00119dd0(errorFormat,fileName);\n}\n\n",
            "called": [
                "FUN_0010543c",
                "xmalloc",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_contents_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_error_and_exit_00108808",
                "unaff_RBP": "base_pointer",
                "uVar1": "section_address",
                "uVar2": "error_message"
            },
            "code": "\nvoid print_error_and_exit_00108808(void)\n\n{\n  undefined8 section_address;\n  undefined8 error_message;\n  long base_pointer;\n  \n  section_address = *(undefined8 *)(base_pointer + 0x20);\n  error_message = dcgettext(0,\"Section %s not found\",5);\n                    \n  print_error_and_exit_00108808_00119dd0(error_message,section_address);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "process_lines_00104d1c",
                "unaff_EBP": "counter",
                "unaff_R13": "errorMessage",
                "unaff_R14": "currentLine",
                "unaff_R15": "currentChar",
                "in_stack_00000008": "errorFormat",
                "in_stack_00000010": "returnAddress",
                "uVar1": "translatedMessage",
                "ppbVar2": "slotPointer",
                "pbVar3": "tempPointer",
                "bVar4": "currentByte",
                "pbVar5": "nextLine",
                "pbVar6": "tempChar",
                "pbVar7": "previousChar",
                "htab_find_slot()": "findSlot()"
            },
            "code": "\nvoid processLines_00104d1c(void)\n\n{\n  undefined8 translatedMessage;\n  byte **slotPointer;\n  byte *tempPointer;\n  byte currentByte;\n  byte *nextLine;\n  int counter;\n  byte *tempChar;\n  undefined8 errorMessage;\n  byte *previousChar;\n  byte *currentLine;\n  byte *currentChar;\n  undefined8 errorFormat;\n  undefined8 *returnAddress;\n  \n  *currentLine = 0;\nLAB_00114520:\n  currentLine = currentLine + 1;\n  do {\n    currentByte = *currentLine;\n    previousChar = currentLine;\n    if (currentByte == 10) {\n      *currentLine = 0;\n      if (currentLine[1] == 0xd) {\n        previousChar = currentLine + 1;\n        nextLine = currentLine + 2;\n      }\n      else {\n        nextLine = currentLine + 1;\n      }\n    }\n    else if ((char)currentByte < '\\v') {\n      if (currentByte != 0) goto LAB_00114520;\n      nextLine = currentLine + 1;\n    }\n    else {\n      if (currentByte != 0xd) break;\n      *currentLine = 0;\n      nextLine = currentLine + 1;\n      if (currentLine[1] == 10) {\n        nextLine = currentLine + 2;\n        previousChar = currentLine + 1;\n      }\n    }\n    currentByte = *currentChar;\n    while ((currentByte == 0x20 || (tempChar = currentChar, currentByte == 9))) {\n      tempChar = currentChar + 1;\n      currentChar = currentChar + 1;\n      currentByte = *tempChar;\n    }\n    do {\n      if ((currentByte == 10) || (currentByte == 0xd)) goto LAB_00114676;\n      if (currentByte == 0) goto LAB_00114599;\n      currentByte = tempChar[1];\n      tempChar = tempChar + 1;\n    } while ((currentByte != 0x20) && (currentByte != 9));\n    if ((char)currentByte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      currentByte = tempChar[1];\n      if ((((((currentByte == 9) || (currentByte == 0x20)) &&\n            ((currentByte = tempChar[2], currentByte == 9 || (currentByte == 0x20)))) &&\n           ((currentByte = tempChar[3], currentByte == 9 || (currentByte == 0x20)))) &&\n          ((currentByte = tempChar[4], currentByte == 9 || (currentByte == 0x20)))) &&\n         ((currentByte = tempChar[5], currentByte == 9 || (currentByte == 0x20)))) {\n        currentByte = tempChar[6];\n        tempPointer = tempChar + 6;\n        if ((currentByte == 9) || (currentByte == 0x20)) {\n          do {\n            do {\n              currentByte = tempPointer[1];\n              tempPointer = tempPointer + 1;\n            } while (currentByte == 0x20);\n          } while (currentByte == 9);\n        }\n      }\n      if ((0xd < currentByte) || ((-0x2402L >> (currentByte & 0x3f) & 1U) != 0)) {\n        translatedMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(translatedMessage,errorFormat,counter);\n      }\n    }\nLAB_00114599:\n    *tempChar = 0;\n    if (currentChar < tempChar) {\n      slotPointer = (byte **)findSlot();\n      *slotPointer = currentChar;\n    }\n    counter = counter + 1;\n    currentLine = nextLine;\n    currentChar = nextLine;\n    if (previousChar[1] == 0) {\n      *returnAddress = errorMessage;\n      return;\n    }\n  } while( true );\n  if (currentByte == 0x23) {\n    processLines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_print_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "error_text",
                "local_20": "scan_result"
            },
            "code": "\nvoid validate_and_print_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 error_text;\n  char *scan_result [2];\n  \n  bfd_scan_vma(address,scan_result,0);\n  if (*scan_result[0] == '\\0') {\n    return;\n  }\n  error_text = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_text,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_print_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_0010554f",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_function_0010540e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "in_RAX": "rax"
            },
            "code": "\nvoid executeFunction_0010540e(undefined8 param1,long param2,uint param3)\n\n{\n  long rax;\n  \n  if ((param3 == 2) && (*(int *)(*(long *)(param2 + 8) + 8) == 2)) {\n    param3 = (uint)*(byte *)(*(long *)(*(long *)(param2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(rax + 0x380) + 0x78))(param1,param3 != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_function_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_files_recursive_00113a4d",
                "param_1": "file_list",
                "param_2": "data",
                "param_3": "entry",
                "param_4": "file_2",
                "param_5": "maximum_value",
                "cVar1": "result",
                "uVar2": "updated_value",
                "puVar3": "current_entry",
                "auVar4": "file_result",
                "process_files_00112502": "process_files",
                "process_data_0010ec73": "process_data",
                "process_entry_001135a5": "process_entry",
                "update_maximum_value_0010ed2c": "update_maximum_value"
            },
            "code": "\nundefined8\nprocess_files_recursive_00113a4d(undefined8 file_list,undefined8 data,long entry,undefined8 file_2,\n            undefined8 maximum_value)\n\n{\n  char result;\n  undefined8 updated_value;\n  undefined8 *current_entry;\n  undefined file_result [16];\n  \n  result = process_files(file_list,data,*(undefined8 *)(entry + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(entry + 0x28) == 0 && (*(long *)(entry + 8) != 0)) ||\n      (result = process_data(data,*(undefined8 *)(entry + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(entry + 0x28) != (undefined8 *)0x0) {\n      for (current_entry = (undefined8 *)**(undefined8 **)(entry + 0x28); current_entry != (undefined8 *)0x0;\n          current_entry = (undefined8 *)*current_entry) {\n        result = process_entry(file_list,data,current_entry);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (current_entry = *(undefined8 **)(entry + 0x10); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      result = process_files_recursive_00113a4d(file_list,data,current_entry);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    file_result = process_files(file_list,data,*(undefined8 *)(entry + 0x20));\n    if (file_result[0] != '\\0') {\n      if ((*(long *)(entry + 0x28) == 0) && (*(long *)(entry + 8) != 0)) {\n        return file_result._0_8_;\n      }\n      updated_value = update_maximum_value(data,*(undefined8 *)(entry + 0x20),file_result._8_8_,maximum_value);\n      return updated_value;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_0010ec73",
                "FUN_00113a4d",
                "FUN_00112502",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_files_recursive_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "free_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryBlock"
            },
            "code": "\nundefined8 freeMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryBlock;\n  undefined8 param_7;\n  \n  param_7 = returnValue;\n  free(memoryBlock);\n  return param_7;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "free_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010aa53",
                "FUN_0010e9a0",
                "FUN_0010ebb0",
                "FUN_0010abdd",
                "FUN_0010ba08",
                "FUN_00112c1f",
                "FUN_001199d0",
                "FUN_0010922b",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_ptr_with_param_00113b71",
                "param_1": "input_param",
                "lVar1": "initialized_ptr"
            },
            "code": "\nlong initialize_ptr_with_param_00113b71(long input_param)\n\n{\n  long initialized_ptr;\n  \n  if (input_param != 0) {\n    initialized_ptr = initialize_function_00112904(0x14,0);\n    if (initialized_ptr == 0) {\n      initialized_ptr = 0;\n    }\n    else {\n      *(long *)(initialized_ptr + 0x10) = input_param;\n    }\n    return initialized_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_ptr_with_param_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "initialize_or_format_data_00109dfe",
                "param_1": "data",
                "local_40": "formattedString",
                "lVar1": "currentIndex"
            },
            "code": "\nvoid initializeOrFormatData_00109dfe(long data)\n\n{\n  long currentIndex;\n  char formattedString [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    initialize_and_format_data_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  currentIndex = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = currentIndex + 1;\n  *(long *)(data + 0x70) = currentIndex;\n  sprintf(formattedString,\"%ld=%ld\",currentIndex,currentIndex);\n  initialize_data_structure_00109b52(data,formattedString,currentIndex,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "FUN_00109cf4",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_or_format_data_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_to_end_of_string_00109bbb",
                "param_1": "inputAddress",
                "__s": "stringAddress",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonToEndOfString_00109bbb(long inputAddress)\n\n{\n  char *stringAddress;\n  size_t stringLength;\n  \n  if (*(long *)(inputAddress + 0x60) != 0) {\n    stringAddress = *(char **)(*(long *)(inputAddress + 0x60) + 0x30);\n    if (stringAddress != (char *)0x0) {\n      stringLength = strlen(stringAddress);\n      *(undefined2 *)(stringAddress + stringLength) = 0x3b;\n    }\n    return stringAddress != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_to_end_of_string_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "concatenate_strings_with_delimiters_0010ae0e",
                "param_1": "input_param",
                "lVar1": "struct_ptr",
                "lVar2": "ptr",
                "__ptr": "temp_ptr",
                "pcVar3": "char_ptr",
                "sVar4": "size_1",
                "sVar5": "size_2",
                "pcVar6": "concatenated_string",
                "uVar7": "result",
                "lVar8": "total_size",
                "uVar9": "counter",
                "uVar10": "num_strings"
            },
            "code": "\nundefined8 concatenate_strings_with_delimiters_0010ae0e(long input_param)\n\n{\n  long struct_ptr;\n  long ptr;\n  void *temp_ptr;\n  char *char_ptr;\n  size_t size_1;\n  size_t size_2;\n  char *concatenated_string;\n  undefined8 result;\n  long total_size;\n  uint counter;\n  ulong num_strings;\n  \n  result = 0;\n  struct_ptr = *(long *)(input_param + 0x60);\n  if (((struct_ptr != 0) && (*(char **)(struct_ptr + 8) != (char *)0x0)) &&\n     (concatenated_string = *(char **)(struct_ptr + 0x20), concatenated_string != (char *)0x0)) {\n    size_1 = strlen(*(char **)(struct_ptr + 8));\n    size_2 = strlen(concatenated_string);\n    ptr = *(long *)(struct_ptr + 0x28);\n    if (ptr == 0) {\n      total_size = size_1 + size_2 + 10;\n      num_strings = 0;\n    }\n    else {\n      total_size = size_1 + size_2 + 0x1e;\n      num_strings = 0;\n      while( true ) {\n        concatenated_string = *(char **)(ptr + num_strings * 8);\n        if (concatenated_string == (char *)0x0) break;\n        size_1 = strlen(concatenated_string);\n        num_strings = (ulong)((int)num_strings + 1);\n        total_size = total_size + size_1;\n      }\n    }\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      size_1 = strlen(*(char **)(struct_ptr + 0x30));\n      total_size = total_size + size_1;\n    }\n    if (*(char **)(struct_ptr + 0x38) != (char *)0x0) {\n      size_1 = strlen(*(char **)(struct_ptr + 0x38));\n      total_size = total_size + size_1;\n    }\n    concatenated_string = (char *)xmalloc(total_size);\n    struct_ptr = *(long *)(input_param + 0x60);\n    strcpy(concatenated_string,*(char **)(struct_ptr + 8));\n    if (*(long *)(struct_ptr + 0x28) != 0) {\n      counter = 0;\n      size_1 = strlen(concatenated_string);\n      sprintf(concatenated_string + size_1,\"!%u,\",num_strings);\n      while( true ) {\n        struct_ptr = *(long *)(input_param + 0x60);\n        num_strings = (ulong)counter;\n        temp_ptr = *(void **)(struct_ptr + 0x28);\n        char_ptr = *(char **)((long)temp_ptr + num_strings * 8);\n        if (char_ptr == (char *)0x0) break;\n        counter = counter + 1;\n        strcat(concatenated_string,char_ptr);\n        free(*(void **)(*(long *)(struct_ptr + 0x28) + num_strings * 8));\n      }\n      free(temp_ptr);\n      *(undefined8 *)(*(long *)(input_param + 0x60) + 0x28) = 0;\n    }\n    struct_ptr = *(long *)(input_param + 0x60);\n    strcat(concatenated_string,*(char **)(struct_ptr + 0x20));\n    free(*(void **)(struct_ptr + 0x20));\n    struct_ptr = *(long *)(input_param + 0x60);\n    *(undefined8 *)(struct_ptr + 0x20) = 0;\n    if (*(char **)(struct_ptr + 0x30) != (char *)0x0) {\n      strcat(concatenated_string,*(char **)(struct_ptr + 0x30));\n      free(*(void **)(struct_ptr + 0x30));\n      *(undefined8 *)(*(long *)(input_param + 0x60) + 0x30) = 0;\n    }\n    size_1 = strlen(concatenated_string);\n    struct_ptr = *(long *)(input_param + 0x60);\n    *(undefined2 *)(concatenated_string + size_1) = 0x3b;\n    char_ptr = *(char **)(struct_ptr + 0x38);\n    if (char_ptr != (char *)0x0) {\n      strcpy(concatenated_string + size_1 + 1,char_ptr);\n      free(*(void **)(struct_ptr + 0x38));\n      *(undefined8 *)(*(long *)(input_param + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input_param + 0x60) + 8));\n    struct_ptr = *(long *)(input_param + 0x60);\n    *(char **)(struct_ptr + 8) = concatenated_string;\n    result = CONCAT71((int7)((ulong)struct_ptr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "strcat",
                "strcpy",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "concatenate_strings_with_delimiters_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "process_entry_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "iVar1": "var1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "ptr1",
                "puVar5": "ptr2"
            },
            "code": "\nundefined8 processEntry_001135a5(undefined8 input1,undefined8 input2,long param3)\n\n{\n  int var1;\n  char flag;\n  undefined8 result;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  \n  if (6 < *(uint *)(param3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param3 + 0x14)) {\n  case 0:\n    flag = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(param3 + 0x20),param3);\n    if (flag != '\\0') {\n      result = process_string_entry_0010e6a8(input2,*(undefined8 *)(param3 + 8));\n      return result;\n    }\n    break;\n  case 1:\n    flag = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(param3 + 0x20),param3);\n    if (flag != '\\0') {\n      result = process_and_format_entry_0010e7c2(input2,*(undefined8 *)(param3 + 8));\n      return result;\n    }\n    break;\n  case 2:\n    flag = process_debug_function_00112c1f(input1,input2,*(undefined8 *)(*(long *)(param3 + 0x20) + 8),0);\n    if (flag != '\\0') {\n      result = process_input_0010e9a0(input2,*(undefined8 *)(param3 + 8),**(undefined4 **)(param3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param3 + 0x20) + 4));\n      return result;\n    }\n    break;\n  case 3:\n    ptr2 = *(undefined8 **)(param3 + 0x20);\n    var1 = *(int *)(param3 + 0x18);\n    result = *(undefined8 *)(param3 + 8);\n    flag = process_files_00112502(input1,input2,*(undefined8 *)(ptr2[2] + 0x18));\n    if (((flag != '\\0') && (flag = process_debug_function_00112c1f(input1,input2,*ptr2,0), flag != '\\0')) &&\n       (flag = process_entry_0010eafe(input2,result,var1 == 2), flag != '\\0')) {\n      for (ptr1 = (undefined8 *)ptr2[1]; ptr1 != (undefined8 *)0x0;\n          ptr1 = (undefined8 *)*ptr1) {\n        flag = process_debug_function_00112c1f(input1,input2,ptr1[2],0);\n        if (flag == '\\0') {\n          return 0;\n        }\n        flag = process_and_print_string_0010ebb0(input2,ptr1[1],*(undefined4 *)(ptr1 + 3));\n        if (flag == '\\0') {\n          return 0;\n        }\n      }\n      ptr2 = (undefined8 *)ptr2[2];\n      while( true ) {\n        if (ptr2 == (undefined8 *)0x0) {\n          result = initialize_value_00108f05(input2);\n          return result;\n        }\n        flag = process_files_recursive_00113a4d(input1,input2,ptr2);\n        if (flag == '\\0') break;\n        ptr2 = (undefined8 *)*ptr2;\n      }\n    }\n    break;\n  case 4:\n    result = process_and_format_string_0010e842(input2,*(undefined8 *)(param3 + 8),*(undefined8 *)(param3 + 0x20));\n    return result;\n  case 5:\n    result = append_and_process_string_0010e8a9(*(undefined8 *)(param3 + 0x20),input2,*(undefined8 *)(param3 + 8));\n    return result;\n  case 6:\n    flag = process_debug_function_00112c1f(input1,input2,**(undefined8 **)(param3 + 0x20),0);\n    if (flag != '\\0') {\n      result = process_and_print_0010e918(input2,*(undefined8 *)(param3 + 8),\n                           *(undefined8 *)(*(long *)(param3 + 0x20) + 8));\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "abort",
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_00112c1f",
                "FUN_0010e842",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_00113a4d",
                "FUN_00108f05",
                "FUN_0010e9a0",
                "FUN_00112502",
                "FUN_0010e918"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "process_entry_001135a5",
            "code_backup": "\nundefined8 FUN_001135a5(undefined8 param_1,undefined8 param_2,long param_3)\n\n{\n  int iVar1;\n  char cVar2;\n  undefined8 uVar3;\n  undefined8 *puVar4;\n  undefined8 *puVar5;\n  \n  if (6 < *(uint *)(param_3 + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(param_3 + 0x14)) {\n  case 0:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_string_entry_0010e6a8(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 1:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(param_3 + 0x20),param_3);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_format_entry_0010e7c2(param_2,*(undefined8 *)(param_3 + 8));\n      return uVar3;\n    }\n    break;\n  case 2:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,*(undefined8 *)(*(long *)(param_3 + 0x20) + 8),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_input_0010e9a0(param_2,*(undefined8 *)(param_3 + 8),**(undefined4 **)(param_3 + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(param_3 + 0x20) + 4));\n      return uVar3;\n    }\n    break;\n  case 3:\n    puVar5 = *(undefined8 **)(param_3 + 0x20);\n    iVar1 = *(int *)(param_3 + 0x18);\n    uVar3 = *(undefined8 *)(param_3 + 8);\n    cVar2 = process_files_00112502(param_1,param_2,*(undefined8 *)(puVar5[2] + 0x18));\n    if (((cVar2 != '\\0') && (cVar2 = process_debug_function_00112c1f(param_1,param_2,*puVar5,0), cVar2 != '\\0')) &&\n       (cVar2 = process_entry_0010eafe(param_2,uVar3,iVar1 == 2), cVar2 != '\\0')) {\n      for (puVar4 = (undefined8 *)puVar5[1]; puVar4 != (undefined8 *)0x0;\n          puVar4 = (undefined8 *)*puVar4) {\n        cVar2 = process_debug_function_00112c1f(param_1,param_2,puVar4[2],0);\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n        cVar2 = process_and_print_string_0010ebb0(param_2,puVar4[1],*(undefined4 *)(puVar4 + 3));\n        if (cVar2 == '\\0') {\n          return 0;\n        }\n      }\n      puVar5 = (undefined8 *)puVar5[2];\n      while( true ) {\n        if (puVar5 == (undefined8 *)0x0) {\n          uVar3 = initialize_value_00108f05(param_2);\n          return uVar3;\n        }\n        cVar2 = FUNC_00113a4d(param_1,param_2,puVar5);\n        if (cVar2 == '\\0') break;\n        puVar5 = (undefined8 *)*puVar5;\n      }\n    }\n    break;\n  case 4:\n    uVar3 = process_and_format_string_0010e842(param_2,*(undefined8 *)(param_3 + 8),*(undefined8 *)(param_3 + 0x20));\n    return uVar3;\n  case 5:\n    uVar3 = append_and_process_string_0010e8a9(*(undefined8 *)(param_3 + 0x20),param_2,*(undefined8 *)(param_3 + 8));\n    return uVar3;\n  case 6:\n    cVar2 = process_debug_function_00112c1f(param_1,param_2,**(undefined8 **)(param_3 + 0x20),0);\n    if (cVar2 != '\\0') {\n      uVar3 = process_and_print_0010e918(param_2,*(undefined8 *)(param_3 + 8),\n                           *(undefined8 *)(*(long *)(param_3 + 0x20) + 8));\n      return uVar3;\n    }\n  }\n  return 0;\n}\n\n"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = build_filename_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = build_filename_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    print_error_message_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = build_filename_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = check_architecture_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_info_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_info_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = process_data_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = process_data_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        print_error_info_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_info_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_info_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_info_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_info_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = process_binary_object_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = decode_and_process_debug_info_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = initialize_memory_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          update_data_and_return_index_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = decode_and_process_debug_info_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar28 != 0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_binary_function_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = start_block_debugging_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = parse_binary_function_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = initialize_debug_record_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              print_error_message_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        print_error_message_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = decode_and_copy_section_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              print_error_and_exit_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = search_or_traverse_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = search_or_traverse_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = search_or_traverse_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = search_or_traverse_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = decode_and_copy_section_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUNC_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_info_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,section_reverse_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_info_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          print_error_info_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_info_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)merge_build_attributes_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_info_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "printf",
                "bfd_set_file_flags",
                "bfd_get_arch",
                "bfd_set_start_address",
                "dcgettext",
                "bfd_get_mach",
                "FUN_001152b6"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00107976",
                "FUN_00119f70",
                "FUN_00104943",
                "FUN_001199d0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_00115530",
                "FUN_0010ae0e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "extract_data_from_binary_0010b0fa",
                "param_1": "binaryData",
                "param_2": "dataSize",
                "param_3": "dataPtr",
                "param_4": "debugInfo",
                "param_5": "errorFlag",
                "uVar1": "dataType",
                "iVar2": "comparisonResult",
                "pcVar3": "demangledName",
                "pcVar5": "errorMessage",
                "sVar6": "nameLength",
                "__ptr": "functionPtr",
                "lVar7": "arglistSize",
                "local_40": "localBuffer"
            },
            "code": "\n\n\nchar * extractDataFromBinary_0010b0fa(undefined8 binaryData,undefined8 dataSize,uint *dataPtr,long debugInfo,\n                   undefined *errorFlag)\n\n{\n  uint dataType;\n  int comparisonResult;\n  char *demangledName;\n  long *plVar4;\n  char *errorMessage;\n  size_t nameLength;\n  void *functionPtr;\n  long arglistSize;\n  undefined localBuffer [16];\n  \n  if (errorFlag != (undefined *)0x0) {\n    *errorFlag = 0;\n  }\n  while( true ) {\n    dataType = *dataPtr;\n    if (0x29 < dataType) break;\n    if (0x17 < dataType) {\n      switch(dataType) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        demangledName = (char *)extractDataFromBinary_0010b0fa(binaryData,dataSize,*(undefined8 *)(dataPtr + 4),0,0);\n        if (demangledName != (char *)0x0) {\n          switch(*dataPtr) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            demangledName = (char *)initialize_new_function_00113b4a(demangledName);\n            return demangledName;\n          case 0x1b:\n            demangledName = (char *)initialize_ptr_with_param_00113b71(demangledName);\n            return demangledName;\n          default:\n                    \n            abort();\n          case 0x22:\n            demangledName = (char *)initialize_or_get_value_00113d3a(demangledName);\n            return demangledName;\n          case 0x23:\n            demangledName = (char *)initialize_and_return_pointer_00113cb9(demangledName);\n            return demangledName;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        demangledName = (char *)cplus_demangle_print(3,dataPtr,0x14,localBuffer);\n        if (demangledName == (char *)0x0) {\n          errorMessage = \"Couldn\\'t get demangled builtin type\\n\";\n          demangledName = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparisonResult = strcmp(demangledName,\"signed char\");\n        if (comparisonResult == 0) {\nLAB_0010b406:\n          errorMessage = (char *)update_data_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"bool\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)initialize_function_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"char\");\n        if (comparisonResult == 0) goto LAB_0010b406;\n        comparisonResult = strcmp(demangledName,\"double\");\n        if ((comparisonResult == 0) || (comparisonResult = strcmp(demangledName,\"long double\"), comparisonResult == 0)) {\n          errorMessage = (char *)initialize_function_with_param_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"float\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)initialize_function_with_param_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"__float128\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)initialize_function_with_param_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"unsigned char\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"int\");\n        if (comparisonResult == 0) {\nLAB_0010b504:\n          errorMessage = (char *)update_data_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"unsigned int\");\n        if (comparisonResult == 0) {\nLAB_0010b528:\n          errorMessage = (char *)update_data_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"long\");\n        if (comparisonResult == 0) goto LAB_0010b504;\n        comparisonResult = strcmp(demangledName,\"unsigned long\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(demangledName,\"__int128\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"unsigned __int128\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"short\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"unsigned short\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"void\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)initialize_function_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"wchar_t\");\n        if (comparisonResult == 0) goto LAB_0010b528;\n        comparisonResult = strcmp(demangledName,\"long long\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"unsigned long long\");\n        if (comparisonResult == 0) {\n          errorMessage = (char *)update_data_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparisonResult = strcmp(demangledName,\"...\");\n        if (comparisonResult == 0) {\n          errorMessage = \"Unexpected demangled varargs\\n\";\n          if (errorFlag == (undefined *)0x0) goto LAB_0010b6a9;\n          *errorFlag = 1;\n        }\n        else {\n          errorMessage = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          errorMessage = (char *)dcgettext(0,errorMessage,5);\n          fprintf(_stderr,errorMessage);\n        }\n        errorMessage = (char *)0x0;\nLAB_0010b6c6:\n        free(demangledName);\n        return errorMessage;\n      case 0x29:\n        if (*(long *)(dataPtr + 4) == 0) {\n          functionPtr = (void *)initialize_function_00113e17();\n        }\n        else {\n          functionPtr = (void *)extractDataFromBinary_0010b0fa(binaryData,dataSize,*(long *)(dataPtr + 4),0,0);\n        }\n        if (functionPtr != (void *)0x0) {\n          arglistSize = parse_arglist_0010b6ea(binaryData,dataSize,*(undefined8 *)(dataPtr + 6),localBuffer);\n          if (arglistSize != 0) {\n            demangledName = (char *)initialize_function_00113ce0(functionPtr,arglistSize,localBuffer[0]);\n            return demangledName;\n          }\n          free(functionPtr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (dataType != 1) {\n      if (dataType == 4) {\n        demangledName = (char *)cplus_demangle_print(3,dataPtr,0x14,localBuffer);\n        errorMessage = \"Failed to print demangled template\\n\";\n        if (demangledName != (char *)0x0) {\n          nameLength = strlen(demangledName);\n          errorMessage = (char *)search_and_retrieve_data_0010afd5(binaryData,dataSize,demangledName,nameLength & 0xffffffff,9);\n          free(demangledName);\n          return errorMessage;\n        }\nLAB_0010b3d3:\n        errorMessage = (char *)dcgettext(0,errorMessage,5);\n        fprintf(_stderr,errorMessage);\n        return demangledName;\n      }\n      if (dataType == 0) {\n        if ((debugInfo == 0) || (plVar4 = (long *)extract_debug_info_00113b1e(debugInfo), plVar4 == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    debugInfo = extractDataFromBinary_0010b0fa(binaryData,dataSize,*(undefined8 *)(dataPtr + 4),debugInfo,0);\n    if (debugInfo == 0) goto LAB_0010b38c;\n    dataPtr = *(uint **)(dataPtr + 6);\n    errorFlag = (undefined *)0x0;\n  }\n  demangledName = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,demangledName,(ulong)dataType);\nLAB_0010b38c:\n  demangledName = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return demangledName;\nLAB_0010b1a5:\n  if (*plVar4 == 0) {\nswitchD_0010b158_caseD_18:\n    demangledName = (char *)search_and_retrieve_data_0010afd5(binaryData,dataSize,*(undefined8 *)(dataPtr + 4),dataPtr[6],0);\n    return demangledName;\n  }\n  demangledName = *(char **)(*plVar4 + 8);\n  if (demangledName == (char *)0x0) goto LAB_0010b38c;\n  errorMessage = (char *)get_return_value_001129f4(demangledName);\n  if (errorMessage != (char *)0x0) {\n    nameLength = strlen(errorMessage);\n    if ((dataPtr[6] == (uint)nameLength) &&\n       (comparisonResult = strncmp(errorMessage,*(char **)(dataPtr + 4),(long)(int)dataPtr[6]), comparisonResult == 0)) {\n      return demangledName;\n    }\n  }\n  plVar4 = plVar4 + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "abort",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113dfe",
                "FUN_0010b0fa",
                "fprintf",
                "FUN_0010b6ea",
                "FUN_00113d3a",
                "FUN_001129f4",
                "FUN_00113b4a",
                "FUN_00113e17",
                "cplus_demangle_print",
                "FUN_00113b1e",
                "strncmp",
                "FUN_00113cb9",
                "FUN_00112904",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "extract_data_from_binary_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "remove_rubbish_00104c36",
                "unaff_RBX": "currentLine",
                "unaff_EBP": "lineCounter",
                "unaff_R14": "previousLine",
                "unaff_R15": "currentChar",
                "in_CL": "currentCharValue",
                "pbVar5": "currentCharPointer",
                "pbVar3": "nextCharPointer",
                "ppbVar2": "hashTableSlot",
                "bVar4": "nextCharValue",
                "uVar1": "errorMessage",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "pointerToResult"
            },
            "code": "\nvoid removeRubbish_00104c36(void)\n\n{\n  undefined8 errorMessage;\n  byte **hashTableSlot;\n  byte *nextCharPointer;\n  byte currentCharValue;\n  byte nextCharValue;\n  byte *currentLine;\n  int lineCounter;\n  byte *currentCharPointer;\n  undefined8 unaff_R13;\n  byte *previousLine;\n  byte *currentChar;\n  undefined8 filename;\n  undefined8 *pointerToResult;\n  \n  do {\n    currentCharPointer = currentChar;\n    if (currentCharValue == 9) goto LAB_00104c3f;\n    do {\n      if ((currentCharValue == 10) || (currentCharValue == 0xd)) goto LAB_00114676;\n      if (currentCharValue == 0) goto LAB_00114599;\n      currentCharValue = currentCharPointer[1];\n      currentCharPointer = currentCharPointer + 1;\n    } while ((currentCharValue != 0x20) && (currentCharValue != 9));\n    if ((char)currentCharValue < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentCharValue & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextCharValue = currentCharPointer[1];\n      if ((((((nextCharValue == 9) || (nextCharValue == 0x20)) &&\n            ((nextCharValue = currentCharPointer[2], nextCharValue == 9 || (nextCharValue == 0x20)))) &&\n           ((nextCharValue = currentCharPointer[3], nextCharValue == 9 || (nextCharValue == 0x20)))) &&\n          ((nextCharValue = currentCharPointer[4], nextCharValue == 9 || (nextCharValue == 0x20)))) &&\n         ((nextCharValue = currentCharPointer[5], nextCharValue == 9 || (nextCharValue == 0x20)))) {\n        nextCharValue = currentCharPointer[6];\n        nextCharPointer = currentCharPointer + 6;\n        if ((nextCharValue == 9) || (nextCharValue == 0x20)) {\n          do {\n            do {\n              nextCharValue = nextCharPointer[1];\n              nextCharPointer = nextCharPointer + 1;\n            } while (nextCharValue == 0x20);\n          } while (nextCharValue == 9);\n        }\n      }\n      if ((0xd < nextCharValue) || ((-0x2402L >> (nextCharValue & 0x3f) & 1U) != 0)) {\n        errorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        print_error_message_00119ed0(errorMessage,filename,lineCounter);\n      }\n    }\nLAB_00114599:\n    *currentCharPointer = 0;\n    if (currentChar < currentCharPointer) {\n      hashTableSlot = (byte **)htab_find_slot();\n      *hashTableSlot = currentChar;\n    }\n    lineCounter = lineCounter + 1;\n    currentCharPointer = currentLine;\n    if (previousLine[1] == 0) {\n      *pointerToResult = unaff_R13;\n      return;\n    }\n    for (; nextCharValue = *currentCharPointer, previousLine = currentCharPointer, nextCharValue != 10; currentCharPointer = currentCharPointer + 1) {\n      if ((char)nextCharValue < '\\v') {\n        if (nextCharValue == 0) {\n          nextCharPointer = currentCharPointer + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextCharValue == 0xd) {\n          *currentCharPointer = 0;\n          nextCharPointer = currentCharPointer + 1;\n          if (currentCharPointer[1] == 10) {\n            nextCharPointer = currentCharPointer + 2;\n            previousLine = currentCharPointer + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextCharValue == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentCharPointer = 0;\n    if (currentCharPointer[1] == 0xd) {\n      previousLine = currentCharPointer + 1;\n      nextCharPointer = currentCharPointer + 2;\n    }\n    else {\n      nextCharPointer = currentCharPointer + 1;\n    }\nLAB_00114553:\n    currentCharValue = *currentLine;\n    currentChar = currentLine;\n    while (currentLine = nextCharPointer, currentCharValue == 0x20) {\nLAB_00104c3f:\n      currentCharPointer = currentChar + 1;\n      currentChar = currentChar + 1;\n      nextCharPointer = currentLine;\n      currentCharValue = *currentCharPointer;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "remove_rubbish_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "process_binary_object_0010554f",
                "param_7": "binaryObject",
                "param_12": "size",
                "param_14": "stabIndex",
                "param_17": "sectionHeaders",
                "param_8": "numSections",
                "param_15": "targetMachineCode",
                "param_24": "lastSection",
                "param_33": "debugLinkContents",
                "param_36": "debugInfoFormat",
                "param_39": "debugEntries",
                "plVar28": "currentSection",
                "puVar1": "intPtr",
                "puVar33": "ptr",
                "uVar13": "auxSymValue",
                "param_30": "mergedNoteSections",
                "param_40": "mergedNoteContents",
                "param_43": "symbolType",
                "param_44": "symbolValue"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 processBinaryObject_0010554f(void)\n\n{\n  uint *intPtr;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint auxSymValue;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *currentSection;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *ptr;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long binaryObject;\n  ulong numSections;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong size;\n  char *param_13;\n  undefined *stabIndex;\n  uint targetMachineCode;\n  long *sectionHeaders;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *lastSection;\n  long param_26;\n  long *mergedNoteSections;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *debugLinkContents;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte debugInfoFormat;\n  byte param_37;\n  undefined8 param_38;\n  ushort debugEntries;\n  long *mergedNoteContents;\n  char param_41;\n  char *param_42;\n  undefined symbolType;\n  short symbolValue;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    size = 0;\n    stabIndex = (undefined *)0x0;\n    sectionHeaders = (long *)0x0;\n    uVar29 = size;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    sectionHeaders = (long *)xmalloc(lVar14);\n    mergedNoteContents = sectionHeaders;\n    bfd_map_over_sections(binaryObject,store_param_and_increment_ptr_0010870e,&stack0x00000140);\n    qsort(sectionHeaders,(ulong)in_stack_00000068._4_4_,8,compare_records_0010875d);\n    stabIndex = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    ptr = stabIndex;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *ptr = 0;\n      ptr = ptr + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      size = 0;\n      do {\n        puVar30 = (ulong *)(stabIndex + uVar29 * 8);\n        currentSection = sectionHeaders + uVar29;\n        uVar21 = size;\n        do {\n          size = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(binaryObject,*currentSection);\n          auxSymValue = bfd_octets_per_byte(binaryObject);\n          lVar14 = *currentSection;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)auxSymValue * *(long *)(currentSection[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            print_error_info_001126c0(0,binaryObject,*currentSection);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          currentSection = currentSection + 1;\n          puVar30 = puVar30 + 1;\n        } while (size < uVar21);\n      } while( true );\n    }\n    size = 0;\nLAB_00107cd1:\n    uVar29 = size;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(binaryObject);\n      lVar14 = sectionHeaders[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          print_error_info_001126c0(0,binaryObject,sectionHeaders[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(stabIndex + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= size) {\n            uVar29 = size;\n          }\n        }\n      }\n    }\n  }\n  size = uVar29;\n  currentSection = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      ptr = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,ptr);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)initialize_memory_00112894(unaff_R14,1,currentSection), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    lastSection = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\';\n                      free(lastSection);\n                      lastSection = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,ptr,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = decode_and_process_debug_info_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(lastSection);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,ptr,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = process_debug_function_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = currentSection; plVar15 < currentSection + numSections; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = initialize_memory_00112894(unaff_R14,0,currentSection), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\')) &&\n                 (plVar15 + 1 < currentSection + numSections))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          update_data_and_return_index_001088ae(symbolType,(int)symbolValue,mergedNoteContents,pcVar22);\n          param_9 = decode_and_process_debug_info_0011173a(__ptr_02,lVar14,symbolType);\n          if (param_9 == '\\0') {\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar14 != 0) && (cVar7 = process_debug_function_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (numSections != 0)) {\n        mergedNoteContents = (long *)0x0;\n        mergedNoteSections = currentSection;\n        param_32 = 0;\n        param_31 = numSections;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _targetMachineCode = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        lastSection = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)numSections <= param_32) goto LAB_00105590;\n            lVar14 = currentSection[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (lastSection != (char *)lVar37) break;\n            if (debugInfoFormat != 0x67) {\n              cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            lastSection = (char *)param_34;\n            cVar8 = initialize_debug_info_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)debugInfoFormat < '\\0') {\n            if (debugInfoFormat == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = parse_binary_function_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = process_record_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (debugInfoFormat < 100) {\n              switch(debugInfoFormat) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _targetMachineCode = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(debugInfoFormat) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = start_block_debugging_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = debug_end_block_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  auxSymValue = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = parse_binary_function_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        auxSymValue ^ (uVar12 ^ auxSymValue) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = initialize_debug_record_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_targetMachineCode != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = debugEntries - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _targetMachineCode[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = record_line_debug_info_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_targetMachineCode + 6) + lVar14);\n                      _targetMachineCode = _targetMachineCode + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _targetMachineCode = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = end_function_debugging_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              print_error_message_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        print_error_message_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(binaryObject + 0x44) & 0x42) != 0) && ((*(uint *)(binaryObject + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(binaryObject + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (numSections != 0) {\n        currentSection = DAT_001278d0 + numSections;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (currentSection != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(binaryObject + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          intPtr = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *intPtr = *intPtr | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      currentSection = DAT_001278d0;\n      targetMachineCode = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (numSections == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)currentSection[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = decode_and_copy_section_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            mergedNoteContents = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(binaryObject + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(binaryObject + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(binaryObject + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(binaryObject + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((targetMachineCode == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                mergedNoteContents = plVar25;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            mergedNoteContents = plVar25;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              mergedNoteContents = plVar25;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              mergedNoteContents = plVar25;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = process_binary_section_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = search_or_traverse_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = search_or_traverse_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (auxSymValue = *(uint *)(plVar15 + 3), (auxSymValue & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    auxSymValue = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = auxSymValue & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = search_or_traverse_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = search_or_traverse_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (numSections != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = decode_and_copy_section_0011a2e0(puVar26,binaryObject);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        numSections = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(binaryObject + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        debugLinkContents = (void *)0x0;\n        cVar7 = FUNC_0011378f(binaryObject,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(binaryObject,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(binaryObject,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,mergedNoteContents), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(binaryObject,lVar14,mergedNoteSections,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(binaryObject,lVar37,debugLinkContents,0,mergedNoteContents), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_info_001126c0(0,binaryObject,0,uVar17);\n          free(debugLinkContents);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(binaryObject + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,binaryObject,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,update_relocations_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(binaryObject,DAT_001278c8,numSections & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,binaryObject);\n    bfd_map_over_sections(unaff_R14,section_reverse_00116110,binaryObject);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(binaryObject,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        print_error_info_001126c0(0,binaryObject,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(binaryObject,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        print_error_info_001126c0(0,binaryObject,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      currentSection = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(binaryObject + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(binaryObject + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = string_comparison_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (currentSection == (long *)0x0) {\n            currentSection = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*currentSection + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (currentSection[1] != 0) {\n              cVar7 = bfd_set_section_contents(binaryObject,puVar26,currentSection[1],0,currentSection[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_info_001126c0(0,binaryObject,puVar26,uVar17);\n                return 0;\n              }\n              currentSection = (long *)currentSection[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              currentSection = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              currentSection = (long *)plVar15[3];\n              plVar15 = currentSection;\n            } while (currentSection != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          print_error_info_001126c0(0,binaryObject,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        currentSection = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = currentSection;\n      } while (currentSection != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(binaryObject,param_21), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (stabIndex != (undefined *)0x0) {\n        if (0x2000 < size) {\n          size = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(size);\n        uVar5 = DAT_00127999;\n        ptr = __ptr;\n        for (size = size & 0xffffffff; size != 0; size = size - 1) {\n          *ptr = uVar5;\n          ptr = ptr + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(stabIndex + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*sectionHeaders + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(binaryObject,*sectionHeaders,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                print_error_info_001126c0(0,binaryObject,*sectionHeaders,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          sectionHeaders = sectionHeaders + 1;\n        }\n        free(__ptr);\n        free(stabIndex);\n      }\n      uVar9 = (**(code **)(*(long *)(binaryObject + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(binaryObject,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(binaryObject + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar17);\n            *(short *)(*(long *)(binaryObject + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,binaryObject,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,binaryObject,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "dcgettext",
                "FUN_00108b3e",
                "FUN_0010bf86",
                "bfd_get_section_by_name",
                "bfd_coff_get_auxent",
                "FUN_0010be1a",
                "bfd_coff_get_syment",
                "bfd_get_section_contents",
                "FUN_00113fb0",
                "FUN_0011378f",
                "htab_traverse",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010870e",
                "FUN_0010bc80",
                "FUN_0010bbd3",
                "FUN_0011a2e0",
                "htab_elements",
                "bfd_alt_mach_code",
                "bfd_errmsg",
                "FUN_001159d0",
                "xmalloc",
                "bfd_get_error",
                "bfd_map_over_sections",
                "bfd_set_error",
                "FUN_0010bf20",
                "FUN_0010dac0",
                "FUN_00112a33",
                "FUN_00115d70",
                "FUN_00108863",
                "FUN_0011a170",
                "bfd_make_section_with_flags",
                "qsort",
                "bfd_set_symtab",
                "FUN_00112894",
                "FUN_0011173a",
                "bfd_map_over_sections",
                "strlen",
                "FUN_00116110",
                "bfd_is_local_label",
                "strcpy",
                "bfd_set_section_contents",
                "strcmp",
                "bfd_octets_per_byte",
                "htab_find",
                "FUN_00116030",
                "bfd_set_section_size",
                "fprintf",
                "FUN_00115dc0",
                "FUN_0010c892",
                "FUN_001126c0",
                "free",
                "bfd_decode_symclass",
                "FUN_001088ae",
                "FUN_0010875d",
                "FUN_0010be88",
                "xstrdup",
                "FUN_00119dd0",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_object_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "initialize_and_format_data_00109cf4",
                "param_1": "data_structure",
                "param_2": "parameter_2",
                "param_3": "parameter_3",
                "local_3c": "formatted_param_2"
            },
            "code": "\nvoid initialize_and_format_data_00109cf4(undefined8 data_structure,undefined8 parameter_2,undefined4 parameter_3)\n\n{\n  char formatted_param_2 [28];\n  \n  sprintf(formatted_param_2,\"%ld\",parameter_2);\n  initialize_data_structure_00109b52(data_structure,formatted_param_2,parameter_2,0,parameter_3);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_00109dfe",
                "FUN_0010e453",
                "FUN_0010b948",
                "FUN_00109d97",
                "FUN_0010bba1",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010b800",
                "FUN_00109ed3"
            ],
            "imported": false,
            "current_name": "initialize_and_format_data_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "parse_stab_data_00109ab1",
                "param_1": "stab_data",
                "param_2": "parsed_values",
                "param_3": "input_param_1",
                "param_4": "input_param_2",
                "param_5": "input_param_3",
                "uVar1": "parsed_value_1",
                "pcVar2": "current_char",
                "uVar3": "return_value",
                "auVar4": "result_array"
            },
            "code": "\nundefined  [16]\nparse_stab_data_00109ab1(char **stab_data,undefined4 *parsed_values,undefined8 input_param_1,undefined8 input_param_2,\n            undefined8 input_param_3)\n\n{\n  undefined4 parsed_value_1;\n  char *current_char;\n  undefined8 return_value;\n  undefined result_array [16];\n  \n  current_char = *stab_data;\n  if (*current_char == '(') {\n    *stab_data = current_char + 1;\n    parsed_value_1 = parse_numeric_value_00109a32(stab_data,0);\n    *parsed_values = parsed_value_1;\n    if (**stab_data == ',') {\n      *stab_data = *stab_data + 1;\n      parsed_value_1 = parse_numeric_value_00109a32(stab_data,0,input_param_1);\n      parsed_values[1] = parsed_value_1;\n      if (**stab_data == ')') {\n        current_char = *stab_data + 1;\n        *stab_data = current_char;\n        goto LAB_00109b25;\n      }\n    }\n    print_bad_stab_message_00108fb9(current_char);\n    return_value = 0;\n  }\n  else {\n    *parsed_values = 0;\n    current_char = (char *)parse_numeric_value_00109a32(stab_data,0);\n    parsed_values[1] = (int)current_char;\nLAB_00109b25:\n    return_value = CONCAT71((int7)((ulong)current_char >> 8),1);\n  }\n  result_array._8_8_ = input_param_3;\n  result_array._0_8_ = return_value;\n  return result_array;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "FUN_00108fb9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "parse_stab_data_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "process_binary_section_001159d0",
                "param_1": "sectionAddress",
                "uVar1": "relevantValue",
                "cVar2": "searchResult",
                "uVar3": "sectionOptionsResult",
                "lVar4": "relevantValueAddress",
                "lVar5": "currentValueAddress"
            },
            "code": "\nundefined4 processBinarySection_001159d0(long sectionAddress)\n\n{\n  undefined8 relevantValue;\n  char searchResult;\n  undefined4 sectionOptionsResult;\n  long relevantValueAddress;\n  long currentValueAddress;\n  \n  sectionOptionsResult = process_section_options_00115b70();\n  if ((char)sectionOptionsResult == '\\0') {\n    if ((*(byte *)(sectionAddress + 0x27) & 2) == 0) {\n      return sectionOptionsResult;\n    }\n    relevantValueAddress = find_relevant_value_00115d00(*(undefined8 *)(sectionAddress + 0xd0),*(undefined8 *)(sectionAddress + 0xe0));\n    if ((relevantValueAddress != 0) &&\n       (((relevantValue = *(undefined8 *)(relevantValueAddress + 8), DAT_00127a48 != 7 ||\n         (searchResult = search_or_traverse_00115d70(relevantValue,DAT_00127a28), searchResult != '\\0')) &&\n        (searchResult = search_or_traverse_00115d70(relevantValue,DAT_00127a18), searchResult == '\\0')))) {\n      relevantValueAddress = *(long *)(*(long *)(sectionAddress + 0xd0) + 0xc0);\n      currentValueAddress = relevantValueAddress;\n      do {\n        if (currentValueAddress == 0) {\n          return 1;\n        }\n        searchResult = process_section_options_00115b70(currentValueAddress);\n        if (searchResult == '\\0') {\n          return sectionOptionsResult;\n        }\n        currentValueAddress = *(long *)(*(long *)(currentValueAddress + 0xd0) + 0xc0);\n      } while (relevantValueAddress != currentValueAddress);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115d00",
                "FUN_00115d70",
                "FUN_00115b70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_binary_section_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "populate_data_structure_0010a77a",
                "param_1": "dataStructurePointer",
                "__s": "sourceString",
                "uVar4": "returnValue",
                "uVar1": "byteValue",
                "uVar3": "longValue",
                "__s_00": "extractedString",
                "sVar5": "extractedStringLength",
                "sVar6": "sourceStringLength",
                "__s_01": "combinedString"
            },
            "code": "\nundefined4 populateDataStructure_0010a77a(long dataStructurePointer)\n\n{\n  undefined byteValue;\n  long lVar2;\n  char *sourceString;\n  undefined8 longValue;\n  undefined4 returnValue;\n  char *extractedString;\n  size_t extractedStringLength;\n  size_t sourceStringLength;\n  char *combinedString;\n  \n  lVar2 = *(long *)(dataStructurePointer + 0x60);\n  if ((lVar2 != 0) && (sourceString = *(char **)(lVar2 + 0x20), sourceString != (char *)0x0)) {\n    returnValue = *(undefined4 *)(lVar2 + 0x18);\n    byteValue = *(undefined *)(lVar2 + 0x1c);\n    longValue = *(undefined8 *)(lVar2 + 0x10);\n    extractedString = (char *)extract_and_free_next_entry_00109b2f();\n    extractedStringLength = strlen(extractedString);\n    sourceStringLength = strlen(sourceString);\n    combinedString = (char *)xmalloc(extractedStringLength + 2 + sourceStringLength);\n    sprintf(combinedString,\"%s%s;\",extractedString,sourceString);\n    free(extractedString);\n    free(sourceString);\n    returnValue = initialize_data_structure_00109b52(dataStructurePointer,combinedString,longValue,byteValue,returnValue);\n    if ((char)returnValue != '\\0') {\n      free(combinedString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "populate_data_structure_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "print_error_and_exit_0010543c",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMessage",
                "unaff_RBP": "stackBase",
                "uVar1": "fileDescriptor",
                "uVar4": "localization"
            },
            "code": "\nvoid printErrorAndExit_0010543c(void)\n\n{\n  undefined8 fileDescriptor;\n  int *errnoPtr;\n  char *errorMessage;\n  undefined8 localization;\n  long stackBase;\n  \n  errnoPtr = __errno_location();\n  errorMessage = strerror(*errnoPtr);\n  fileDescriptor = *(undefined8 *)(stackBase + 0x10);\n  localization = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  print_error_and_exit_00119dd0(localization,fileDescriptor,errorMessage);\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "process_data_0010a424",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "count",
                "param_4": "initializeFlag",
                "cVar1": "result",
                "bVar2": "bitValue",
                "iVar3": "index",
                "uVar4": "returnValue",
                "pcVar5": "entry1",
                "__ptr": "entryArray",
                "uVar6": "entryValue",
                "__s": "entry2",
                "sVar7": "length1",
                "sVar8": "length2",
                "__s_00": "resultantString",
                "lVar9": "counter",
                "bVar10": "bitVariable",
                "lVar11": "loopCounter",
                "uVar12": "byteValue"
            },
            "code": "\nundefined4 processData_0010a424(long data,char flag,int count,char initializeFlag)\n\n{\n  char result;\n  byte bitValue;\n  int index;\n  undefined4 returnValue;\n  char *entry1;\n  undefined8 *entryArray;\n  undefined8 entryValue;\n  char *entry2;\n  size_t length1;\n  size_t length2;\n  char *resultantString;\n  long counter;\n  byte bitVariable;\n  long loopCounter;\n  undefined byteValue;\n  \n  if ((flag == '\\0') && (result = initialize_or_format_data_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  bitVariable = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n  entry1 = (char *)extract_and_free_next_entry_00109b2f(data);\n  if (count < 0) {\n    entryArray = (undefined8 *)0x0;\n    count = 0;\nLAB_0010a582:\n    byteValue = 1;\n    if (bitVariable != 0) goto LAB_0010a596;\n  }\n  else {\n    if (count != 0) {\n      index = count + 1;\n      entryArray = (undefined8 *)xmalloc((long)index * 8);\n      counter = (long)(count + -1);\n      do {\n        bitValue = 1;\n        if (bitVariable == 0) {\n          bitValue = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        entryValue = extract_and_free_next_entry_00109b2f(data);\n        bitVariable = bitValue & 1;\n        entryArray[counter] = entryValue;\n        counter = counter + -1;\n      } while ((int)counter != -1);\n      if (initializeFlag == '\\0') {\n        result = initialize_or_format_data_00109d97(data);\n        if (result == '\\0') {\n          return 0;\n        }\n        bitValue = 1;\n        if (bitVariable == 0) {\n          bitValue = *(byte *)(*(long *)(data + 0x60) + 0x1c);\n        }\n        bitVariable = bitValue & 1;\n        entryValue = extract_and_free_next_entry_00109b2f(data);\n        entryArray[(long)index + -1] = entryValue;\n        count = index;\n      }\n      goto LAB_0010a582;\n    }\n    entryArray = (undefined8 *)0x0;\n    if (initializeFlag != '\\0') goto LAB_0010a582;\n    entryArray = (undefined8 *)xmalloc(8);\n    result = initialize_or_format_data_00109d97(data);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((bitVariable != 0) || (*(char *)(*(long *)(data + 0x60) + 0x1c) != '\\0')) {\n      entryValue = extract_and_free_next_entry_00109b2f(data);\n      count = 1;\n      byteValue = 1;\n      *entryArray = entryValue;\n      goto LAB_0010a596;\n    }\n    entryValue = extract_and_free_next_entry_00109b2f(data);\n    count = 1;\n    *entryArray = entryValue;\n  }\n  byteValue = *(undefined *)(*(long *)(data + 0x60) + 0x1c);\nLAB_0010a596:\n  entry2 = (char *)extract_and_free_next_entry_00109b2f(data);\n  length1 = strlen(entry1);\n  length2 = strlen(entry2);\n  counter = length1 + 10 + length2;\n  for (loopCounter = 0; (int)loopCounter < count; loopCounter = loopCounter + 1) {\n    length1 = strlen((char *)entryArray[loopCounter]);\n    counter = counter + length1;\n  }\n  resultantString = (char *)xmalloc(counter);\n  sprintf(resultantString,\"#%s,%s\",entry1,entry2);\n  counter = 0;\n  free(entry1);\n  free(entry2);\n  while( true ) {\n    length1 = strlen(resultantString);\n    if (count <= (int)counter) break;\n    *(undefined2 *)(resultantString + length1) = 0x2c;\n    entry1 = (char *)entryArray[counter];\n    counter = counter + 1;\n    strcpy(resultantString + length1 + 1,entry1);\n    free(entry1);\n  }\n  *(undefined2 *)(resultantString + length1) = 0x3b;\n  free(entryArray);\n  returnValue = initialize_data_structure_00109b52(data,resultantString,0,byteValue,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(resultantString);\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "FUN_00109d97",
                "strcpy",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_version_info_00119970",
                "param_1": "packageName",
                "pcVar1": "copyrightNotice"
            },
            "code": "\nvoid printVersionInfo_00119970(undefined8 packageName)\n\n{\n  char *copyrightNotice;\n  \n  printf(\"GNU %s %s\\n\",packageName,\"(GNU Binutils for Debian) 2.40\");\n  copyrightNotice = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightNotice);\n  copyrightNotice = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightNotice);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "exit",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_version_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_url_parameters_00114c80",
                "param_1": "url",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pcVar1": "equal_sign_ptr",
                "uVar2": "error_msg",
                "auVar3": "parsed_params"
            },
            "code": "\nundefined  [16] parse_url_parameters_00114c80(char *url,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  char *equal_sign_ptr;\n  undefined8 error_msg;\n  undefined parsed_params [16];\n  \n  equal_sign_ptr = strchr(url,0x3d);\n  if (equal_sign_ptr != (char *)0x0) {\n    parsed_params._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_msg = duplicate_string_0011a480(url,(long)equal_sign_ptr - (long)url);\n    parsed_params._0_8_[2] = equal_sign_ptr + 1;\n    parsed_params._0_8_[1] = error_msg;\n    parsed_params._0_8_[4] = 0;\n    parsed_params._0_8_[3] = 0;\n    *parsed_params._0_8_ = param2;\n    parsed_params._8_8_ = param4;\n    return parsed_params;\n  }\n  error_msg = dcgettext(0,\"bad format for %s\",5);\n                    \n  print_error_and_exit_00119dd0(error_msg,param3);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_001053b5",
                "FUN_0011a480",
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_url_parameters_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "store_param_and_increment_ptr_0010870e",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar1": "ptrToData"
            },
            "code": "\nvoid storeParamAndIncrementPtr_0010870e(undefined8 param1,undefined8 param2,long *param3)\n\n{\n  undefined8 *ptrToData;\n  \n  ptrToData = (undefined8 *)*param3;\n  *ptrToData = param2;\n  *param3 = (long)(ptrToData + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "store_param_and_increment_ptr_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "parse_binary_function_0010dac0",
                "param_1": "binaryData",
                "param_2": "functionParams",
                "param_3": "context",
                "param_5": "typeCode",
                "param_7": "flag",
                "lVar1": "tempVar1",
                "cVar2": "tempVar2",
                "uVar3": "tempVar3",
                "uVar4": "tempVar4",
                "lVar5": "result",
                "uVar6": "tempVar6",
                "plVar7": "tempArray",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "bVar8": "tempByte",
                "iVar9": "tempInt",
                "pcVar10": "tempString",
                "uVar11": "tempUInt",
                "lVar12": "tempVar12",
                "uVar13": "tempUInt2",
                "uVar14": "tempUInt3",
                "uVar15": "tempVar15",
                "local_68": "localBuffer",
                "local_48": "localChar",
                "local_47": "localByte"
            },
            "code": "\nlong parseBinaryFunction_0010dac0(long binaryData,long *functionParams,long context,undefined8 param_4,uint typeCode,\n                 long *param_6,char flag,undefined8 param_8)\n\n{\n  long tempVar1;\n  char tempVar2;\n  undefined4 tempVar3;\n  undefined8 tempVar4;\n  long result;\n  undefined8 tempVar6;\n  long *tempArray;\n  void *ptr1;\n  void *ptr2;\n  byte tempByte;\n  int tempInt;\n  char *tempString;\n  ulong tempUInt;\n  long tempVar12;\n  uint tempUInt2;\n  uint tempUInt3;\n  undefined8 tempVar15;\n  undefined localBuffer [32];\n  char localChar;\n  byte localByte;\n  \n  result = *(long *)(binaryData + 0x110);\n  if ((~*(uint *)(result + 0x38) & typeCode) != 0) {\n    tempUInt2 = (int)typeCode >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    tempUInt = (ulong)(typeCode & *(uint *)(result + 0x40));\n    tempByte = (byte)*(undefined4 *)(result + 0x3c);\n    tempUInt2 = (tempUInt2 ^ typeCode) & *(uint *)(result + 0x38) ^ tempUInt2;\n    if (tempUInt == 1L << (tempByte & 0x3f)) {\n      tempVar4 = parseBinaryFunction_0010dac0(binaryData,functionParams,context,param_4,tempUInt2,param_6,flag,param_8);\n      result = initialize_or_get_value_00113d3a(tempVar4);\n      return result;\n    }\n    if (tempUInt != 2L << (tempByte & 0x3f)) {\n      if (tempUInt != 3L << (tempByte & 0x3f)) {\n        tempVar4 = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          tempUInt2);\n        print_error_message_00119ed0(tempVar4,typeCode);\n        return 0;\n      }\n      tempUInt3 = 0;\n      if (param_6 != (long *)0x0) {\n        tempUInt3 = (uint)*(ushort *)(param_6 + 2);\n        tempArray = param_6 + 2;\n        for (tempInt = 0; (*(short *)tempArray != 0 && (tempInt != 3)); tempInt = tempInt + 1) {\n          *(short *)tempArray = *(short *)((long)tempArray + 2);\n          tempArray = (long *)((long)tempArray + 2);\n        }\n        *(short *)tempArray = 0;\n      }\n      tempVar15 = 0;\n      tempVar4 = param_8;\n      tempVar6 = parseBinaryFunction_0010dac0(binaryData,functionParams,context,param_4,tempUInt2,param_6,0);\n      result = *(long *)(context + 0x28);\n      if (result == 0) {\n        tempVar4 = update_data_00113dfe(4,0,tempVar15,tempVar4);\n        result = initialize_and_allocate_memory_0010c218(param_8,\"int\",tempVar4);\n        *(long *)(context + 0x28) = result;\n      }\n      result = initialize_and_allocate_memory_00113c43(tempVar6,result,0,(long)(int)(tempUInt3 - 1),0);\n      return result;\n    }\n    tempVar4 = parseBinaryFunction_0010dac0(binaryData,functionParams,context,param_4,tempUInt2,param_6,flag,param_8);\n    result = initialize_function_00113ce0(tempVar4,0,0);\n    return result;\n  }\n  if ((param_6 != (long *)0x0) && (0 < *param_6)) {\n    tempArray = (long *)allocate_and_initialize_slots_0010da0b(context);\n    if (*tempArray != 0) {\n      return *tempArray;\n    }\n    result = initialize_and_store_data_00113e23(tempArray,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    param_6 = (long *)0x0;\n  }\n  if (0x10 < typeCode) {\n    result = initialize_function_00113e17();\n    return result;\n  }\n  result = *(long *)(context + 8 + (long)(int)typeCode * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(typeCode) {\n  default:\n    tempVar4 = initialize_function_00113e17();\n    tempString = \"void\";\n    break;\n  case 2:\n    tempVar4 = update_data_00113dfe(1,0);\n    tempString = \"char\";\n    break;\n  case 3:\n    tempVar4 = update_data_00113dfe(2,0);\n    tempString = \"short\";\n    break;\n  case 4:\n    tempVar4 = update_data_00113dfe(4,0);\n    tempString = \"int\";\n    break;\n  case 5:\n    tempVar4 = update_data_00113dfe(4,0);\n    tempString = \"long\";\n    break;\n  case 6:\n    tempVar4 = initialize_function_with_param_00113df2(4);\n    tempString = \"float\";\n    break;\n  case 7:\n    tempVar4 = initialize_function_with_param_00113df2(8);\n    tempString = \"double\";\n    break;\n  case 8:\n    if (param_6 == (long *)0x0) {\n      result = initialize_byte_array_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    tempVar4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (param_6 == (long *)0x0) {\n      result = initialize_byte_array_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    tempVar4 = 9;\nLAB_0010de7a:\n    result = process_binary_0010e07c(binaryData,functionParams,context,tempVar4,param_6,param_8);\nLAB_0010e046:\n    tempArray = (long *)allocate_and_initialize_slots_0010da0b(context,param_4);\n    *tempArray = result;\n    return result;\n  case 10:\n    if (param_6 == (long *)0x0) {\n      result = create_entry_00113d6e(0,0);\n    }\n    else {\n      result = param_6[3];\n      ptr1 = (void *)xmalloc(0x50);\n      ptr2 = (void *)xmalloc(0x50);\n      tempVar12 = 0;\n      do {\n        while( true ) {\n          if ((result <= functionParams[3]) || (functionParams[1] <= functionParams[2])) goto LAB_0010e032;\n          tempInt = (int)tempVar12;\n          tempVar1 = *(long *)(*functionParams + functionParams[2] * 8);\n          tempVar2 = bfd_coff_get_syment(binaryData,tempVar1,localBuffer);\n          tempVar12 = (long)tempInt;\n          if (tempVar2 == '\\0') {\n            tempVar3 = bfd_get_error();\n            tempVar4 = bfd_errmsg(tempVar3);\n            tempVar6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            print_error_message_00119ed0(tempVar6,tempVar4);\n            free(ptr1);\n            free(ptr2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          functionParams[2] = functionParams[2] + 1;\n          functionParams[3] = (ulong)localByte + 1 + functionParams[3];\n          if (localChar != '\\x10') break;\n          if ((int)typeCode <= tempInt + 1) {\n            typeCode = typeCode + 10;\n            ptr1 = (void *)xrealloc(ptr1);\n            ptr2 = (void *)xrealloc(ptr2,(long)(int)typeCode << 3);\n          }\n          tempVar12 = *(long *)(tempVar1 + 0x20);\n          *(undefined8 *)((long)ptr1 + (long)tempInt * 8) = *(undefined8 *)(tempVar1 + 8);\n          *(long *)((long)ptr2 + (long)tempInt * 8) =\n               *(long *)(tempVar1 + 0x10) + *(long *)(tempVar12 + 0x30);\n          tempVar12 = (long)(tempInt + 1);\n        }\n      } while (localChar != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr1 + tempVar12 * 8) = 0;\n      result = create_entry_00113d6e(ptr1,ptr2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = initialize_function_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    tempVar4 = update_data_00113dfe(1,1);\n    tempString = \"unsigned char\";\n    break;\n  case 0xd:\n    tempVar4 = update_data_00113dfe(2,1);\n    tempString = \"unsigned short\";\n    break;\n  case 0xe:\n    tempVar4 = update_data_00113dfe(4,1);\n    tempString = \"unsigned int\";\n    break;\n  case 0xf:\n    tempVar4 = update_data_00113dfe(4,1);\n    tempString = \"unsigned long\";\n    break;\n  case 0x10:\n    tempVar4 = initialize_function_with_param_00113df2(0xc);\n    tempString = \"long double\";\n  }\n  result = initialize_and_allocate_memory_0010c218(param_8,tempString,tempVar4);\nLAB_0010e065:\n  *(long *)(context + 8 + (long)(int)typeCode * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "FUN_0010e07c",
                "FUN_00113da9",
                "FUN_00113c43",
                "FUN_00113df2",
                "dcgettext",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "bfd_errmsg",
                "bfd_coff_get_syment",
                "bfd_get_error",
                "xmalloc",
                "FUN_00113d6e",
                "FUN_00113d3a",
                "FUN_0010dac0",
                "FUN_00113e17",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_00113e23",
                "xrealloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "parse_binary_function_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "string_comparison_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "string2Length",
                "extraout_var": "comparisonResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] stringComparison_00113fb0(char *string1,char *string2)\n\n{\n  int iVar1;\n  undefined8 in_RAX;\n  size_t string2Length;\n  undefined4 comparisonResult;\n  undefined result [16];\n  \n  string2Length = strlen(string2);\n  iVar1 = strncmp(string1,string2,string2Length);\n  result._1_7_ = (undefined7)(CONCAT44(comparisonResult,iVar1) >> 8);\n  result[0] = iVar1 == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strlen",
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00114c20",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00108c86",
                "FUN_00113ede",
                "FUN_00107880",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "string_comparison_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "print_error_set_time_0010882c",
                "piVar1": "errno_address",
                "uVar2": "translated_error"
            },
            "code": "\nvoid print_error_set_time_0010882c(void)\n\n{\n  int *errno_address;\n  undefined8 translated_error;\n  \n  errno_address = __errno_location();\n  strerror(*errno_address);\n  translated_error = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message_00119ed0(translated_error);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "print_error_set_time_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "process_and_print_string_0010ebb0",
                "param_1": "fileHandler",
                "param_2": "inputString",
                "param_3": "inputLength",
                "param_4": "extraData",
                "__s": "extractedString",
                "uVar2": "length",
                "uVar3": "result",
                "sVar4": "inputStringLength",
                "sVar5": "extractedStringLength",
                "__s_00": "processedString",
                "cVar1": "processedChar"
            },
            "code": "\nundefined4 processAndPrintString_0010ebb0(undefined8 fileHandler,char *inputString,int inputLength,undefined8 extraData)\n\n{\n  char processedChar;\n  uint length;\n  undefined4 result;\n  char *extractedString;\n  size_t inputStringLength;\n  size_t extractedStringLength;\n  char *processedString;\n  \n  extractedString = (char *)extract_and_free_next_entry_00109b2f();\n  length = inputLength - 1;\n  if (length < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)length * 4);\n    processedChar = (&DAT_00121334)[length];\n    inputStringLength = strlen(inputString);\n    extractedStringLength = strlen(extractedString);\n    processedString = (char *)xmalloc(inputStringLength + 3 + extractedStringLength);\n    sprintf(processedString,\"%s:%c%s\",inputString,(ulong)(uint)(int)processedChar,extractedString);\n    free(extractedString);\n    result = process_string_0010e2f0(fileHandler,result,0,extraData,processedString);\n    if ((char)result != '\\0') {\n      free(processedString);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "abort",
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_print_string_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "initialize_and_allocate_memory_00113b98",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "lVar1": "functionPtr",
                "plVar2": "allocatedMemory"
            },
            "code": "\nlong initializeAndAllocateMemory_00113b98(long inputParam1,long inputParam2,long inputParam3,undefined inputParam4)\n\n{\n  long functionPtr;\n  long *allocatedMemory;\n  \n  if ((inputParam1 != 0) && (functionPtr = initialize_function_00112904(0x13,0), functionPtr != 0)) {\n    allocatedMemory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocatedMemory + 0x19) = 0;\n    *allocatedMemory = inputParam1;\n    *(undefined4 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[1] = inputParam2;\n    allocatedMemory[2] = inputParam3;\n    *(undefined *)(allocatedMemory + 3) = inputParam4;\n    *(long **)(functionPtr + 0x10) = allocatedMemory;\n    return functionPtr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_allocate_memory_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "search_or_traverse_00115d70",
                "param_1": "searchKey",
                "param_2": "searchTable",
                "lVar1": "searchResult",
                "local_18": "traverseKey",
                "local_10": "foundMatch"
            },
            "code": "\nundefined searchOrTraverse_00115d70(undefined8 searchKey,undefined8 searchTable)\n\n{\n  long searchResult;\n  undefined8 traverseKey;\n  undefined foundMatch;\n  \n  if (DAT_001279ea == '\\0') {\n    searchResult = htab_find(searchTable,searchKey);\n    foundMatch = searchResult != 0;\n  }\n  else {\n    foundMatch = 0;\n    traverseKey = searchKey;\n    htab_traverse(searchTable,pattern_match_0011a170,&traverseKey);\n  }\n  return foundMatch;\n}\n\n",
            "called": [
                "htab_traverse",
                "FUN_0011a170",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_001159d0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "search_or_traverse_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "data",
                "param_2": "element",
                "param_3": "size",
                "uVar1": "expandedData",
                "puVar2": "newElementPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long data,undefined8 element,undefined4 size)\n\n{\n  undefined8 expandedData;\n  undefined8 *newElementPtr;\n  uint currentSize;\n  \n  if (*(uint *)(data + 0x2c) <= *(uint *)(data + 0x28)) {\n    currentSize = *(uint *)(data + 0x2c) + 10;\n    *(uint *)(data + 0x2c) = currentSize;\n    expandedData = xrealloc(*(undefined8 *)(data + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(data + 0x20) = expandedData;\n  }\n  currentSize = *(uint *)(data + 0x28);\n  newElementPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(data + 0x20));\n  *newElementPtr = element;\n  *(undefined4 *)(newElementPtr + 1) = size;\n  *(uint *)(data + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)newElementPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010d7d4",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00104943",
                "FUN_00119e70"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "duplicate_string_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "duplicateString",
                "memcpy": "copyString"
            },
            "code": "\nvoid duplicateString_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *duplicateString_0011a480;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  duplicateString_0011a480 = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)duplicateString_0011a480 + stringLength) = 0;\n  memcpy(duplicateString_0011a480,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "memcpy",
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "duplicate_string_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "process_and_print_0010e918",
                "param_1": "paramA",
                "param_2": "paramB",
                "param_3": "paramC",
                "__s": "extractedString",
                "sVar2": "paramBLength",
                "sVar3": "extractedStringLength",
                "__s_00": "concatenatedString",
                "uVar1": "result"
            },
            "code": "\nundefined4 processAndPrint_0010e918(undefined8 paramA,char *paramB,undefined8 paramC)\n\n{\n  undefined4 result;\n  char *extractedString;\n  size_t paramBLength;\n  size_t extractedStringLength;\n  char *concatenatedString;\n  \n  extractedString = (char *)extract_and_free_next_entry_00109b2f();\n  paramBLength = strlen(paramB);\n  extractedStringLength = strlen(extractedString);\n  concatenatedString = (char *)xmalloc(paramBLength + 0x14 + extractedStringLength);\n  sprintf(concatenatedString,\"%s:c=e%s,%ld\",paramB,extractedString,paramC);\n  free(extractedString);\n  result = process_string_0010e2f0(paramA,0x80,0,0,concatenatedString);\n  if ((char)result != '\\0') {\n    free(concatenatedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_print_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0010554f",
                "FUN_0010a424",
                "FUN_0010ae0e",
                "FUN_0011378f",
                "FUN_001199d0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "section_reverse_00116110",
                "param_1": "binaryFile",
                "param_2": "sectionHeaders",
                "param_3": "outputBinary",
                "uVar1": "tempByte",
                "uVar2": "tempData",
                "lVar3": "sectionHeader",
                "iVar4": "iVar1",
                "iVar5": "iVar2",
                "cVar6": "sectionCheck",
                "uVar7": "errorMsg",
                "__ptr": "bufferPointer",
                "lVar8": "loopCounter",
                "uVar9": "loopCounter2",
                "iVar10": "loopSize",
                "uVar11": "loopIndex",
                "puVar12": "bytePtr",
                "lVar13": "remainingBytes",
                "puVar14": "alignedPtr",
                "puVar15": "alignedPtr2",
                "pvVar16": "voidPtr",
                "uVar17": "tempIndex",
                "uVar18": "alignment",
                "uVar19": "tempIndex2",
                "bVar20": "loopFlag",
                "local_38": "sectionSize",
                "local_30": "sectionContent"
            },
            "code": "\nvoid sectionReverse_00116110(undefined8 binaryFile,undefined8 *sectionHeaders,undefined8 outputBinary)\n\n{\n  undefined tempByte;\n  undefined8 tempData;\n  long sectionHeader;\n  int iVar1;\n  int iVar2;\n  char sectionCheck;\n  undefined8 errorMsg;\n  undefined8 *bufferPointer;\n  long loopCounter;\n  ulong loopCounter2;\n  int loopSize;\n  ulong loopIndex;\n  undefined *bytePtr;\n  long remainingBytes;\n  undefined8 *alignedPtr;\n  undefined8 *alignedPtr2;\n  void *voidPtr;\n  ulong tempIndex;\n  ulong alignment;\n  ulong tempIndex2;\n  byte loopFlag;\n  ulong sectionSize;\n  void *sectionContent;\n  \n  loopFlag = 0;\n  sectionCheck = check_binary_section_00115f50(binaryFile,sectionHeaders,1);\n  if (sectionCheck != '\\0') {\n    return;\n  }\n  sectionSize = sectionHeaders[8];\n  sectionHeader = sectionHeaders[0xc];\n  if (((*(byte *)((long)sectionHeaders + 0x25) & 1) == 0) || ((*(byte *)(sectionHeader + 0x25) & 1) == 0)) {\n    remainingBytes = process_data_00114190(*sectionHeaders,0,0x80);\n    if (remainingBytes == 0) {\n      return;\n    }\n    if ((*(byte *)(remainingBytes + 0x29) & 1) == 0) {\n      return;\n    }\n    bufferPointer = (undefined8 *)xmalloc(sectionSize);\n    alignedPtr2 = bufferPointer;\n    if (7 < sectionSize) {\n      for (alignment = sectionSize >> 3; alignment != 0; alignment = alignment - 1) {\n        *alignedPtr2 = 0;\n        alignedPtr2 = alignedPtr2 + (ulong)loopFlag * -2 + 1;\n      }\n    }\n    alignedPtr = alignedPtr2;\n    if ((sectionSize & 4) != 0) {\n      alignedPtr = (undefined8 *)((long)alignedPtr2 + (ulong)loopFlag * -8 + 4);\n      *(undefined4 *)alignedPtr2 = 0;\n    }\n    alignedPtr2 = alignedPtr;\n    if ((sectionSize & 2) != 0) {\n      alignedPtr2 = (undefined8 *)((long)alignedPtr + (ulong)loopFlag * -4 + 2);\n      *(undefined2 *)alignedPtr = 0;\n    }\n    if ((sectionSize & 1) != 0) {\n      *(undefined *)alignedPtr2 = 0;\n    }\n    sectionCheck = bfd_set_section_contents(outputBinary,sectionHeader,bufferPointer,0);\n    if (sectionCheck != '\\0') {\n      free(bufferPointer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(0,outputBinary,sectionHeader,0);\n    free(bufferPointer);\n    return;\n  }\n  sectionContent = (void *)0x0;\n  sectionCheck = bfd_get_full_section_contents(binaryFile,sectionHeaders,&sectionContent);\n  if ((sectionCheck == '\\0') ||\n     (sectionCheck = bfd_convert_section_contents(binaryFile,sectionHeaders,outputBinary,&sectionContent,&sectionSize),\n     loopSize = DAT_00127908, sectionCheck == '\\0')) {\n    bfd_set_section_size(sectionHeader,0);\n    DAT_00127a40 = 1;\n    print_error_info_001126c0(0,binaryFile,sectionHeaders,0);\n    free(sectionContent);\n    return;\n  }\n  iVar1 = DAT_001264b8;\n  iVar2 = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    alignment = (ulong)DAT_00127908;\n    if (sectionSize % alignment != 0) {\n      tempData = *sectionHeaders;\n      errorMsg = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      print_error_and_exit_00119dd0(errorMsg,tempData,loopSize);\n    }\n    loopSize = DAT_00127908 / 2;\n    loopIndex = 0;\n    while (tempIndex2 = loopIndex, iVar1 = DAT_001264b8, iVar2 = DAT_001264bc, tempIndex2 < sectionSize) {\n      loopIndex = alignment + tempIndex2;\n      tempIndex = loopIndex;\n      for (loopCounter2 = 0; loopCounter2 < (ulong)(long)loopSize; loopCounter2 = loopCounter2 + 1) {\n        tempIndex = tempIndex - 1;\n        bytePtr = (undefined *)(tempIndex2 + loopCounter2 + (long)sectionContent);\n        tempByte = *bytePtr;\n        *bytePtr = *(undefined *)((long)sectionContent + tempIndex);\n        *(undefined *)((long)sectionContent + tempIndex) = tempByte;\n      }\n    }\n  }\n  DAT_001264b8 = iVar1;\n  DAT_001264bc = iVar2;\n  if (-1 < iVar2) {\n    alignment = (ulong)DAT_00127a3c;\n    loopSize = (int)((ulong)sectionHeaders[7] % alignment);\n    loopIndex = ((long)iVar2 - (long)loopSize) + (long)sectionContent;\n    if (iVar2 < loopSize) {\n      loopIndex = loopIndex + alignment;\n    }\n    remainingBytes = (sectionSize + (long)sectionContent) - loopIndex;\n    voidPtr = sectionContent;\n    for (; loopIndex < sectionSize + (long)sectionContent; loopIndex = loopIndex + alignment) {\n      for (loopCounter = 0; ((int)loopCounter < iVar1 && (loopCounter != remainingBytes)); loopCounter = loopCounter + 1) {\n        *(undefined *)((long)voidPtr + loopCounter) = *(undefined *)(loopIndex + loopCounter);\n      }\n      voidPtr = (void *)((long)voidPtr + loopCounter);\n      remainingBytes = remainingBytes - alignment;\n    }\n    sectionSize = ((((alignment - 1) + sectionSize) - (long)iVar2) / alignment) * (long)iVar1;\n    alignment = *(ulong *)(sectionHeader + 0x38) / alignment;\n    *(ulong *)(sectionHeader + 0x38) = alignment;\n    if (iVar2 < loopSize) {\n      *(ulong *)(sectionHeader + 0x38) = alignment + 1;\n      sectionCheck = bfd_set_section_contents(outputBinary,sectionHeader,sectionContent,0,sectionSize);\n      if (sectionCheck == '\\0') {\n        cleanup_and_print_error_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  sectionCheck = bfd_set_section_contents(outputBinary,sectionHeader,sectionContent,0,sectionSize);\n  if (sectionCheck == '\\0') {\n    cleanup_and_print_error_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sectionContent);\n  return;\n}\n\n",
            "called": [
                "FUN_00115f50",
                "xmalloc",
                "bfd_set_section_size",
                "FUN_00114190",
                "bfd_get_full_section_contents",
                "FUN_00108466",
                "bfd_set_section_contents",
                "bfd_convert_section_contents",
                "FUN_001083de",
                "FUN_001126c0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "section_reverse_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "handle_error_0010871c",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorString"
            },
            "code": "\n\n\nvoid handleError_0010871c(void)\n\n{\n  undefined8 errorString;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorString = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorString,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "handle_error_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_block_ptr",
                "param_3": "unused_param",
                "lVar1": "current_block_ptr",
                "uVar2": "error_msg",
                "pcVar3": "error_string",
                "auVar4": "result"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_block_ptr,undefined8 unused_param,undefined8 param_4)\n\n{\n  long current_block_ptr;\n  undefined8 error_msg;\n  char *error_string;\n  undefined result [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block_ptr = *(long *)(block_ptr + 0x20), current_block_ptr == 0)) {\n    error_string = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block_ptr + 8) != 0) {\n      *(undefined8 *)(current_block_ptr + 0x20) = new_block_ptr;\n      error_msg = CONCAT71((int7)((ulong)current_block_ptr >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block_ptr + 8);\n      goto LAB_0010bf84;\n    }\n    error_string = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  error_msg = dcgettext(0,error_string,5);\n  fprintf(_stderr,\"%s\\n\",error_msg);\n  error_msg = 0;\nLAB_0010bf84:\n  result._8_8_ = param_4;\n  result._0_8_ = error_msg;\n  return result;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "reverse_and_improve_code_0010c95e",
                "param_1": "function",
                "param_2": "bytePtrPtr",
                "param_3": "longPtr",
                "bVar1": "byteValue",
                "bVar2": "secondByteValue",
                "pbVar3": "currentBytePtr",
                "bVar4": "bool1",
                "bVar5": "bool2",
                "bVar6": "bool3",
                "cVar7": "charValue",
                "uVar8": "uintValue",
                "pbVar9": "nextBytePtr",
                "lVar10": "longValue",
                "uVar11": "returnValue",
                "pcVar12": "charPtr",
                "sVar13": "sizeValue",
                "uVar14": "ulongValue",
                "__ptr": "ptrValue",
                "lVar15": "longValue2",
                "pcVar19": "charPtr2"
            },
            "code": "\nundefined8 reverseAndImproveCode_0010c95e(undefined8 *function,byte **bytePtrPtr,long *longPtr)\n\n{\n  byte byteValue;\n  byte secondByteValue;\n  byte *currentBytePtr;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  char charValue;\n  uint uintValue;\n  byte *nextBytePtr;\n  long longValue;\n  undefined8 returnValue;\n  char *charPtr;\n  size_t sizeValue;\n  ulong ulongValue;\n  void *ptrValue;\n  long longValue2;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **ppcVar18;\n  char *charPtr2;\n  byte *psecondByteValue0;\n  undefined local_49;\n  ulong local_48;\n  char *local_40 [2];\n  \n  while( true ) {\n    psecondByteValue0 = *bytePtrPtr;\n    byteValue = *psecondByteValue0;\n    if ('T' < (char)byteValue) break;\n    if ((char)byteValue < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(byteValue) {\n    case 0x41:\n      longValue2 = 0;\n      currentBytePtr = psecondByteValue0;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *bytePtrPtr = psecondByteValue0 + 1;\n      charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n      if (charValue == '\\0') {\n        return 0;\n      }\n      if (longPtr == (long *)0x0) {\n        return 1;\n      }\n      longValue2 = initialize_ptr_with_param_00113b71(*longPtr);\n      *longPtr = longValue2;\n      return 1;\n    case 0x46:\n      *bytePtrPtr = psecondByteValue0 + 1;\n      if (longPtr == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        ppcVar18 = (char **)0x0;\n      }\n      else {\n        puVar16 = &local_48;\n        ppcVar18 = local_40;\n      }\n      charValue = process_data_loop_0010d882(function,bytePtrPtr,ppcVar18,puVar16);\n      if (charValue == '\\0') {\n        return 0;\n      }\n      if (**bytePtrPtr == 0x5f) {\n        *bytePtrPtr = *bytePtrPtr + 1;\n        charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n        if (charValue == '\\0') {\n          return 0;\n        }\n        if (longPtr == (long *)0x0) {\n          return 1;\n        }\n        longValue2 = initialize_function_00113ce0(*longPtr,local_40[0],local_48 & 0xff);\n        *longPtr = longValue2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *bytePtrPtr = psecondByteValue0 + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      local_49 = 0;\n      local_40[0] = (char *)0x0;\n      local_48 = 0;\n      *bytePtrPtr = psecondByteValue0 + 1;\n      if (((&_sch_istable)[(ulong)psecondByteValue0[1] * 2] & 4) == 0) {\n        if (psecondByteValue0[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        ppcVar18 = local_40;\n        if (longPtr == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        charValue = parse_and_retrieve_data_0010d559(function,bytePtrPtr,ppcVar18);\n        if (charValue == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        uintValue = parse_number_00108e76(bytePtrPtr);\n        currentBytePtr = *bytePtrPtr;\n        sizeValue = strlen((char *)currentBytePtr);\n        if (sizeValue < uintValue) goto switchD_0010cdf9_caseD_60;\n        *bytePtrPtr = currentBytePtr + uintValue;\n        if ((longPtr != (long *)0x0) &&\n           (local_40[0] = (char *)search_and_retrieve_data_0010afd5(*function,function[1],currentBytePtr,uintValue,9),\n           local_40[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      secondByteValue = **bytePtrPtr;\n      if (byteValue == 0x4d) {\n        if ((secondByteValue == 0x43) || (secondByteValue == 0x56)) {\n          *bytePtrPtr = *bytePtrPtr + 1;\n        }\n        if (**bytePtrPtr != 0x46) goto switchD_0010cdf9_caseD_60;\n        *bytePtrPtr = *bytePtrPtr + 1;\n        if (longPtr == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &local_49;\n          puVar16 = &local_48;\n        }\n        charValue = process_data_loop_0010d882(function,bytePtrPtr,puVar16,puVar17);\n        if (charValue == '\\0') {\n          return 0;\n        }\n      }\n      if (**bytePtrPtr == 0x5f) {\n        *bytePtrPtr = *bytePtrPtr + 1;\n        charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n        if (charValue == '\\0') {\n          return 0;\n        }\n        if (longPtr == (long *)0x0) {\n          return 1;\n        }\n        if (byteValue != 0x4d) {\n          longValue2 = initialize_and_store_params_00113bfa(local_40[0],*longPtr);\n          *longPtr = longValue2;\n          return 1;\n        }\n        longValue2 = initialize_and_allocate_memory_00113b98(*longPtr,local_40[0],local_48,local_49);\n        *longPtr = longValue2;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnValue = parse_and_retrieve_data_0010d559(function,bytePtrPtr,longPtr);\n      return returnValue;\n    case 0x52:\n      *bytePtrPtr = psecondByteValue0 + 1;\n      charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n      if (charValue == '\\0') {\n        return 0;\n      }\n      if (longPtr == (long *)0x0) {\n        return 1;\n      }\n      longValue2 = initialize_and_return_pointer_00113cb9(*longPtr);\n      *longPtr = longValue2;\n      return 1;\n    case 0x54:\n      *bytePtrPtr = psecondByteValue0 + 1;\n      charValue = parse_number_00108ea1(bytePtrPtr,&local_48);\n      if (charValue != '\\0') {\n        if ((uint)local_48 < *(uint *)(function + 5)) {\n          local_40[0] = *(char **)((local_48 & 0xffffffff) * 0x10 + function[4]);\n          charValue = reverseAndImproveCode_0010c95e(function,local_40,longPtr);\n          if (charValue == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (byteValue == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *bytePtrPtr = psecondByteValue0 + 1;\n    charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n    if (charValue == '\\0') {\n      return 0;\n    }\n    if (longPtr == (long *)0x0) {\n      return 1;\n    }\n    longValue2 = initialize_or_get_value_00113d3a(*longPtr);\n    *longPtr = longValue2;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  bool3 = false;\n  bool1 = false;\n  charValue = '\\0';\n  bool2 = false;\n  do {\n    currentBytePtr = *bytePtrPtr;\n    byteValue = *currentBytePtr;\n    if (byteValue == 0x55) {\n      charValue = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)byteValue) {\n      if (byteValue == 0x56) {\n        bool3 = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)byteValue) goto switchD_0010cdf9_caseD_60;\n      if ((char)byteValue < '_') goto LAB_0010cdfb;\n      switch(byteValue) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (longPtr == (long *)0x0) {\nLAB_0010d0aa:\n          *bytePtrPtr = currentBytePtr + 1;\n          return 1;\n        }\n        longValue2 = find_named_type_0010914e(*function,&DAT_00120436);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = initialize_function_00112904(6,4);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"unsigned char\";\n        if ((charValue == '\\0') && (charPtr2 = \"char\", bool1)) {\n          charPtr2 = \"signed char\";\n        }\n        longValue2 = find_named_type_0010914e(*function,charPtr2);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = update_data_00113dfe(1,charValue);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        longValue2 = find_named_type_0010914e(*function,\"float\");\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = initialize_function_with_param_00113df2(4);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"unsigned int\";\n        charPtr = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"long unsigned int\";\n        charPtr = \"long int\";\nLAB_0010ced2:\n        if (charValue == '\\0') {\n          charPtr2 = charPtr;\n        }\n        longValue2 = find_named_type_0010914e(*function,charPtr2);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = update_data_00113dfe(4,charValue);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        charPtr2 = \"long double\";\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        longValue2 = find_named_type_0010914e(*function,charPtr2);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = initialize_function_with_param_00113df2(8);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"short unsigned int\";\n        if (charValue == '\\0') {\n          charPtr2 = \"short int\";\n        }\n        longValue2 = find_named_type_0010914e(*function,charPtr2);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = update_data_00113dfe(2,charValue);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        ppcVar18 = local_40;\n        if (longPtr == (long *)0x0) {\n          ppcVar18 = (char **)0x0;\n        }\n        charValue = parse_and_check_string_0010d21c(function,bytePtrPtr,ppcVar18);\n        if (charValue == '\\0') {\n          return 0;\n        }\n        if (longPtr == (long *)0x0) {\n          return 1;\n        }\n        sizeValue = strlen(local_40[0]);\n        longValue2 = search_and_retrieve_data_0010afd5(*function,function[1],local_40[0],sizeValue & 0xffffffff,9);\n        *longPtr = longValue2;\n        free(local_40[0]);\n        longValue2 = *longPtr;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        longValue2 = find_named_type_0010914e(*function,&DAT_00120495);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = initialize_function_00113e17();\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        longValue2 = find_named_type_0010914e(*function,\"__wchar_t\");\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = update_data_00113dfe(2,1);\n          *longPtr = longValue2;\n          *bytePtrPtr = *bytePtrPtr + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (longPtr == (long *)0x0) goto LAB_0010d0aa;\n        charPtr2 = \"long long unsigned int\";\n        if (charValue == '\\0') {\n          charPtr2 = \"long long int\";\n        }\n        longValue2 = find_named_type_0010914e(*function,charPtr2);\n        *longPtr = longValue2;\n        if (longValue2 == 0) {\n          longValue2 = update_data_00113dfe(8,charValue);\n          *longPtr = longValue2;\n        }\n      }\n      *bytePtrPtr = *bytePtrPtr + 1;\n      goto LAB_0010d1de;\n    }\n    if (byteValue == 0x43) {\n      bool2 = true;\n      goto LAB_0010cd84;\n    }\n    if (byteValue != 0x53) goto LAB_0010cdc5;\n    bool1 = true;\nLAB_0010cd84:\n    *bytePtrPtr = currentBytePtr + 1;\n  } while( true );\nLAB_0010ca26:\n  nextBytePtr = currentBytePtr + 1;\n  *bytePtrPtr = nextBytePtr;\n  byteValue = *nextBytePtr;\n  if (byteValue == 0) goto switchD_0010cdf9_caseD_60;\n  if (byteValue == 0x5f) {\n    *bytePtrPtr = currentBytePtr + 2;\n    charValue = reverseAndImproveCode_0010c95e(function,bytePtrPtr,longPtr);\n    if (charValue == '\\0') {\n      return 0;\n    }\n    if (longPtr == (long *)0x0) {\n      return 1;\n    }\n    longValue = find_named_type_0010914e(*function,\"int\");\n    if (longValue == 0) {\n      longValue = update_data_00113dfe(4,0);\n    }\n    longValue2 = initialize_and_allocate_memory_00113c43(*longPtr,longValue,0,longValue2,0);\n    *longPtr = longValue2;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)byteValue * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  longValue2 = longValue2 * 10 + (long)((char)byteValue + -0x30);\n  currentBytePtr = nextBytePtr;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)byteValue < ':') {\n    if ((char)byteValue < '0') {\n      if (byteValue != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      print_error_message_0010911f(psecondByteValue0);\n      if (longPtr == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((byteValue != 0x47) || (*bytePtrPtr = currentBytePtr + 1, ((&_sch_istable)[(ulong)currentBytePtr[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  psecondByteValue0 = *bytePtrPtr;\n  uintValue = parse_number_00108e76(bytePtrPtr);\n  currentBytePtr = *bytePtrPtr;\n  sizeValue = strlen((char *)currentBytePtr);\n  ulongValue = (ulong)uintValue;\n  if (ulongValue <= sizeValue) {\n    *bytePtrPtr = currentBytePtr + ulongValue;\n    if (longPtr == (long *)0x0) {\n      return 1;\n    }\n    ptrValue = (void *)copy_and_terminate_string_00109a0b(currentBytePtr,ulongValue);\n    longValue2 = find_named_type_0010914e(*function,ptrValue);\n    *longPtr = longValue2;\n    free(ptrValue);\n    if (*longPtr == 0) {\n      longValue2 = search_and_retrieve_data_0010afd5(*function,function[1],currentBytePtr,(int)*bytePtrPtr - (int)currentBytePtr,0);\n      *longPtr = longValue2;\njoined_r0x0010d1d8:\n      if (longValue2 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (bool2) {\n      longValue2 = initialize_ptr_with_param_00113b71(*longPtr);\n      *longPtr = longValue2;\n    }\n    if (bool3) {\n      longValue2 = initialize_new_function_00113b4a(*longPtr);\n      *longPtr = longValue2;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  print_error_message_0010911f(psecondByteValue0);\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113b71",
                "FUN_00108ea1",
                "FUN_00113c43",
                "FUN_0010afd5",
                "strlen",
                "FUN_00113bfa",
                "FUN_0010d559",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00109a0b",
                "FUN_0010914e",
                "FUN_0010d882",
                "FUN_00113dfe",
                "FUN_0010911f",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_00108e76",
                "FUN_00113cb9",
                "free",
                "FUN_0010d21c",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d7d4",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_code_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = build_filename_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = check_architecture_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    print_error_info_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = string_comparison_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = string_comparison_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      print_error_message_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    print_error_info_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = process_data_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = remove_share_flag_if_not_coff_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = process_data_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        print_error_info_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      print_error_message_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      print_error_info_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      print_error_info_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      print_error_info_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        print_error_info_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          print_error_info_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          print_error_message_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      print_error_message_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = process_binary_object_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)initialize_memory_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    update_data_and_return_index_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = decode_and_process_debug_info_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      print_last_stab_entries_00108b3e();\n                      free_memory_blocks_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              free_memory_blocks_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = initialize_memory_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          update_data_and_return_index_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = decode_and_process_debug_info_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            print_last_stab_entries_00108b3e();\n            free_memory_blocks_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      free_memory_blocks_00108863();\n      if ((lVar27 != 0) && (cVar10 = process_debug_function_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = initialize_debug_info_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = initialize_debug_info_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = parse_binary_function_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = process_record_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = start_block_debugging_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = debug_end_block_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = parse_binary_function_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = initialize_debug_record_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = record_line_debug_info_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = end_function_debugging_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              print_error_message_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        print_error_message_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = decode_and_copy_section_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                print_error_and_exit_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              print_error_message_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,pattern_match_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,pattern_match_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = process_binary_section_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = search_or_traverse_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = search_or_traverse_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = decode_and_copy_section_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            print_error_and_exit_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUNC_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_info_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        print_error_info_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,process_section_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,section_reverse_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        print_error_info_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        print_error_message_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = string_comparison_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                print_error_info_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          print_error_info_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          print_error_message_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            print_error_message_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          print_error_message_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      print_error_info_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = string_comparison_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      print_error_info_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)merge_build_attributes_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        print_error_info_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_malloc_and_get_section",
                "bfd_map_over_sections",
                "FUN_00115f30",
                "bfd_get_full_section_contents",
                "dcgettext",
                "bfd_get_section_by_name",
                "strerror",
                "bfd_set_section_size",
                "FUN_0010554f",
                "FUN_001163d0",
                "FUN_00113fb0",
                "bfd_create_gnu_debuglink_section",
                "FUN_001126c0",
                "free",
                "FUN_00115530",
                "bfd_get_arch",
                "FUN_00114190",
                "fopen",
                "fwrite",
                "xmalloc",
                "FUN_00105828",
                "fclose",
                "__errno_location",
                "FUN_0010551d",
                "bfd_set_format",
                "bfd_make_section_with_flags"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "creationTime",
                "local_28": "backupAccessTime",
                "uStack_24": "backupModificationTime",
                "uStack_20": "backupChangeTime",
                "uStack_1c": "backupCreationTime"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorCodePtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 creationTime;\n  undefined4 backupAccessTime;\n  undefined4 backupModificationTime;\n  undefined4 backupChangeTime;\n  undefined4 backupCreationTime;\n  \n  backupAccessTime = *(undefined4 *)(fileInfo + 0x58);\n  backupModificationTime = *(undefined4 *)(fileInfo + 0x5c);\n  backupChangeTime = *(undefined4 *)(fileInfo + 0x60);\n  backupCreationTime = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  creationTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorCodePtr = __errno_location();\n    errorMessage = strerror(*errorCodePtr);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00119ed0(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010882c",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_0011a110",
                "param_1": "errorMessage",
                "iVar1": "errorType",
                "uVar2": "errMsg",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_0011a110(long errorMessage)\n\n{\n  int errorType;\n  undefined8 errMsg;\n  undefined8 additionalInfo;\n  \n  errorType = bfd_get_error();\n  if (errorType == 0) {\n    errMsg = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errMsg = bfd_errmsg(errorType);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorMessage,errMsg,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errMsg,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "bfd_get_error",
                "FUN_0010871c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00116030",
                "FUN_00119f70",
                "FUN_001083b7",
                "FUN_00115dc0",
                "FUN_001053d5",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "print_error_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "hash_table",
                "param_2": "input_flag",
                "param_3": "input_value",
                "param_4": "input_data",
                "param_5": "search_string",
                "lVar1": "hash_result",
                "uVar2": "error_code",
                "lVar3": "entry_address",
                "uVar4": "error_message",
                "uVar5": "gettext_message",
                "sVar6": "string_length",
                "lVar7": "new_entry_address",
                "local_44": "hash_value",
                "uStack_40": "temp_1",
                "uStack_3f": "temp_2",
                "uStack_3e": "temp_3",
                "local_3c": "temp_array",
                "param_1[6]": "previous_entry_address",
                "param_1[5]": "last_entry_address",
                "param_1[4]": "first_entry_address",
                "param_1[2]": "current_entries_count",
                "param_1[1]": "entries_array",
                "param_1[3]": "total_entries",
                "xrealloc(param_1[1])": "realloc_entries_array"
            },
            "code": "\nundefined8\nprocess_string_0010e2f0(long *hash_table,undefined input_flag,int input_value,undefined8 input_data,char *search_string)\n\n{\n  long hash_result;\n  undefined4 error_code;\n  long entry_address;\n  undefined8 error_message;\n  undefined8 gettext_message;\n  size_t string_length;\n  long new_entry_address;\n  undefined4 hash_value;\n  undefined temp_1;\n  undefined temp_2;\n  undefined2 temp_3;\n  undefined4 temp_array [3];\n  \n  if (search_string == (char *)0x0) {\n    new_entry_address = 0;\n  }\n  else {\n    entry_address = bfd_hash_lookup(hash_table + 7,search_string,1,1);\n    if (entry_address == 0) {\n      error_code = bfd_get_error();\n      error_message = bfd_errmsg(error_code);\n      gettext_message = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      print_error_message_00119ed0(gettext_message,error_message);\n      return 0;\n    }\n    new_entry_address = *(long *)(entry_address + 0x20);\n    if (new_entry_address == -1) {\n      new_entry_address = previous_entry_address;\n      hash_result = last_entry_address;\n      *(long *)(entry_address + 0x20) = new_entry_address;\n      if (hash_result == 0) {\n        first_entry_address = entry_address;\n      }\n      else {\n        *(long *)(hash_result + 0x18) = entry_address;\n      }\n      last_entry_address = entry_address;\n      string_length = strlen(search_string);\n      previous_entry_address = new_entry_address + 1 + string_length;\n    }\n  }\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(new_entry_address,&hash_value);\n  temp_2 = 0;\n  temp_1 = input_flag;\n  (**(code **)(*(long *)(*hash_table + 8) + 0x68))((long)input_value,&temp_3);\n  (**(code **)(*(long *)(*hash_table + 8) + 0x50))(input_data,temp_array);\n  if ((ulong)total_entries < current_entries_count + 0xcU) {\n    total_entries = total_entries * 2;\n    new_entry_address = realloc_entries_array;\n    entries_array = new_entry_address;\n  }\n  new_entry_address = current_entries_count;\n  entry_address = entries_array;\n  *(ulong *)(entry_address + new_entry_address) = CONCAT26(temp_3,CONCAT15(temp_2,CONCAT14(temp_1,hash_value)));\n  *(undefined4 *)(entry_address + 8 + new_entry_address) = temp_array[0];\n  current_entries_count = current_entries_count + 0xc;\n  return CONCAT71((int7)((ulong)new_entry_address >> 8),1);\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_errmsg",
                "bfd_hash_lookup",
                "bfd_get_error",
                "strlen",
                "dcgettext",
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e7c2",
                "FUN_0010e6a8",
                "FUN_0010ebb0",
                "FUN_0010e439",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010e453",
                "FUN_0010e5db",
                "FUN_0010e8a9",
                "FUN_0010eafe",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0011378f",
                "FUN_0010e918",
                "FUN_0010ed2c"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "iVar1": "result",
                "uVar2": "message",
                "pcVar3": "delimiter",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "sectionLength",
                "uVar7": "parsedFlags",
                "auVar8": "resultVar"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  int result;\n  undefined8 message;\n  char *delimiter;\n  char *nextFlag;\n  size_t flagLength;\n  int sectionLength;\n  uint parsedFlags;\n  undefined resultVar [16];\n  \n  parsedFlags = 0;\n  do {\n    delimiter = strchr(sectionFlags,0x2c);\n    if (delimiter == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      sectionLength = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = delimiter + 1;\n      sectionLength = (int)delimiter - (int)sectionFlags;\n    }\n    flagLength = (size_t)sectionLength;\n    result = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (result == 0) {\n      parsedFlags = parsedFlags | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (result == 0) {\n        parsedFlags = parsedFlags | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (result == 0) {\n          parsedFlags = parsedFlags | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (result == 0) {\n            parsedFlags = parsedFlags | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (result == 0) {\n              parsedFlags = parsedFlags | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (result == 0) {\n                parsedFlags = parsedFlags | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (result == 0) {\n                  parsedFlags = parsedFlags | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (result == 0) {\n                    parsedFlags = parsedFlags | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (result == 0) {\n                      parsedFlags = parsedFlags | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (result == 0) {\n                        parsedFlags = parsedFlags | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (result == 0) {\n                          parsedFlags = parsedFlags | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (result == 0) {\n                            parsedFlags = parsedFlags | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (result != 0) {\n                              delimiter = (char *)xmalloc((long)(sectionLength + 1));\n                              strncpy(delimiter,sectionFlags,flagLength);\n                              delimiter[flagLength] = '\\0';\n                              message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              print_error_message_00119ed0(message,delimiter);\n                              message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              print_error_and_exit_00119dd0(message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            parsedFlags = parsedFlags | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  resultVar._4_4_ = 0;\n  resultVar._0_4_ = parsedFlags;\n  resultVar._8_8_ = param4;\n  return resultVar;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "build_filename_001125fa",
                "param_1": "arguments",
                "uVar1": "combined_length",
                "ppcVar2": "file_path",
                "sVar3": "file_path_length",
                "sVar4": "input_length",
                "__s": "result"
            },
            "code": "\nchar * build_filename_001125fa(char **arguments)\n\n{\n  ulong combined_length;\n  char **file_path;\n  size_t file_path_length;\n  size_t input_length;\n  char *result;\n  \n  if (arguments == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  file_path = (char **)arguments[0x1d];\n  result = *arguments;\n  if ((file_path != (char **)0x0) && ((*(byte *)((long)file_path + 0x49) & 0x10) == 0)) {\n    file_path_length = strlen(*file_path);\n    input_length = strlen(result);\n    combined_length = file_path_length + 3 + input_length;\n    if (DAT_00127a58 < combined_length) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (combined_length >> 1) + combined_length;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)arguments[0x1d],*arguments);\n    result = DAT_00127a50;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail",
                "strlen",
                "sprintf",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00105828",
                "FUN_00107976",
                "FUN_001152b6",
                "FUN_00114e50",
                "FUN_001126c0",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "build_filename_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "initialize_value_00108f05"
            },
            "code": "\nundefined initializeValue_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "initialize_value_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "free_memory_blocks_00108863",
                "puVar1": "currentBlock",
                "puVar2": "nextBlock"
            },
            "code": "\nvoid freeMemoryBlocks_00108863(void)\n\n{\n  undefined4 *currentBlock;\n  undefined4 *nextBlock;\n  \n  currentBlock = (undefined4 *)&DAT_00127740;\n  do {\n    nextBlock = currentBlock + 6;\n    free(*(void **)(currentBlock + 4));\n    *(undefined8 *)(currentBlock + 4) = 0;\n    currentBlock = nextBlock;\n  } while (nextBlock != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "free_memory_blocks_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_jump_00104020",
                "code": "functionType"
            },
            "code": "\nvoid executeIndirectJump_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(functionType *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "debug_source_start_00108f08",
                "param_1": "source_manager",
                "param_2": "filename",
                "iVar1": "comparison_result",
                "uVar2": "success_indicator",
                "puVar3": "current_entry",
                "puVar4": "temp_entry",
                "lVar5": "loop_counter",
                "puVar6": "source_list",
                "pcVar7": "current_filename",
                "puVar8": "last_entry",
                "bVar9": "is_null"
            },
            "code": "\n\n\nundefined8 debug_source_start_00108f08(long source_manager,char *filename)\n\n{\n  int comparison_result;\n  undefined8 success_indicator;\n  undefined8 *current_entry;\n  undefined8 *temp_entry;\n  long loop_counter;\n  undefined8 *source_list;\n  char *current_filename;\n  undefined8 *last_entry;\n  byte is_null;\n  \n  is_null = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_manager + 8) == 0) {\n    success_indicator = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",success_indicator);\n    success_indicator = 0;\n  }\n  else {\n    for (current_entry = *(undefined8 **)(*(long *)(source_manager + 8) + 8); current_entry != (undefined8 *)0x0;\n        current_entry = (undefined8 *)*current_entry) {\n      comparison_result = filename_cmp(current_entry[1],current_filename);\n      if (comparison_result == 0) goto LAB_00108fad;\n    }\n    current_entry = (undefined8 *)xmalloc(0x18);\n    source_list = *(undefined8 **)(source_manager + 0x10);\n    last_entry = current_entry;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)last_entry = 0;\n      last_entry = (undefined8 *)((long)last_entry + (ulong)is_null * -8 + 4);\n    }\n    current_entry[1] = current_filename;\n    last_entry = (undefined8 *)*source_list;\n    while (temp_entry = last_entry, temp_entry != (undefined8 *)0x0) {\n      source_list = temp_entry;\n      last_entry = (undefined8 *)*temp_entry;\n    }\n    *source_list = current_entry;\nLAB_00108fad:\n    *(undefined8 **)(source_manager + 0x10) = current_entry;\n    success_indicator = 1;\n  }\n  return success_indicator;\n}\n\n",
            "called": [
                "filename_cmp",
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_source_start_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "rmdir",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104d25",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "process_data_00114190",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "options",
                "uVar1": "value",
                "plVar2": "ptr1",
                "pplVar3": "ptrPtr1",
                "iVar4": "index",
                "uVar5": "result",
                "pplVar6": "ptrPtr2",
                "pplVar7": "currentPtr",
                "pplVar8": "nextPtr"
            },
            "code": "\nlong ** processData_00114190(long *data,char flag,uint options)\n\n{\n  uint value;\n  long *ptr1;\n  long **ptrPtr1;\n  int index;\n  undefined8 result;\n  long **ptrPtr2;\n  long **currentPtr;\n  long **nextPtr;\n  \n  currentPtr = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (flag == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (flag == '\\0') {\n    if ((options & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      ptrPtr2 = (long **)*currentPtr;\n      if (ptrPtr2 == (long **)0x0) {\n        return (long **)0x0;\n      }\n      currentPtr = (long **)0x0;\n    }\n    else {\n      ptr1 = DAT_00127900[1];\n      if (*(char *)ptr1 == '!') {\n        index = fnmatch((char *)((long)ptr1 + 1),(char *)data,0);\n        ptrPtr2 = currentPtr;\n        if (index == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      index = fnmatch((char *)ptr1,(char *)data,0);\n      if (index != 0) goto LAB_001141e5;\n      ptrPtr2 = (long **)*currentPtr;\n      if (ptrPtr2 == (long **)0x0) goto LAB_00114245;\n    }\n    if ((options & *(uint *)((long)ptrPtr2 + 0x14)) != 0) {\n      ptr1 = ptrPtr2[1];\n      if (*(char *)ptr1 == '!') {\n        index = fnmatch((char *)((long)ptr1 + 1),(char *)data,0);\n        if (index == 0) {\nLAB_0011438e:\n          *(undefined *)(ptrPtr2 + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        index = fnmatch((char *)ptr1,(char *)data,0);\n        if ((currentPtr == (long **)0x0) && (index == 0)) {\n          nextPtr = (long **)*ptrPtr2;\n          currentPtr = ptrPtr2;\n          if (nextPtr == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    nextPtr = (long **)*ptrPtr2;\n    ptrPtr2 = currentPtr;\n    if (nextPtr != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    index = strcmp((char *)DAT_00127900[1],(char *)data);\n    if (index == 0) {\nLAB_001143cd:\n      value = *(uint *)((long)currentPtr + 0x14);\n      if ((((value & 1) != 0) && ((options & 2) != 0)) ||\n         (((options & 1) != 0 && ((value & 2) != 0)))) {\n        result = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        print_error_and_exit_00119dd0(result,data);\n      }\n      if ((((value & 8) != 0) && ((options & 0x10) != 0)) || ((options & 0x18) == 0x18)) {\n        result = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        print_error_and_exit_00119dd0(result,data);\n      }\n      if ((((value & 0x20) == 0) || ((options & 0x40) == 0)) && ((options & 0x60) != 0x60)) {\n        *(uint *)((long)currentPtr + 0x14) = value | options;\n        return currentPtr;\n      }\n      result = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      print_error_and_exit_00119dd0(result,data);\n    }\n    currentPtr = (long **)*currentPtr;\n    if (currentPtr == (long **)0x0) goto LAB_001142a9;\n    index = strcmp((char *)currentPtr[1],(char *)data);\n    if (index == 0) goto LAB_001143cd;\n    nextPtr = (long **)*currentPtr;\n    ptrPtr2 = (long **)0x0;\n    if (nextPtr == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      currentPtr = ptrPtr2;\n      if (flag == '\\0') {\n        while (ptrPtr2 = nextPtr, ptrPtr1 = currentPtr, nextPtr = ptrPtr2,\n              (options & *(uint *)((long)ptrPtr2 + 0x14)) != 0) {\n          ptr1 = ptrPtr2[1];\n          if (*(char *)ptr1 == '!') {\n            index = fnmatch((char *)((long)ptr1 + 1),(char *)data,0);\n            if (index == 0) goto LAB_0011438e;\n            nextPtr = (long **)*ptrPtr2;\n            if ((long **)*ptrPtr2 == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            index = fnmatch((char *)ptr1,(char *)data,0);\n            if ((currentPtr == (long **)0x0) && (index == 0)) {\n              currentPtr = ptrPtr2;\n              nextPtr = (long **)*ptrPtr2;\n              if ((long **)*ptrPtr2 == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              nextPtr = (long **)*ptrPtr2;\n              if ((long **)*ptrPtr2 == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        index = strcmp((char *)nextPtr[1],(char *)data);\n        ptrPtr1 = ptrPtr2;\n        currentPtr = nextPtr;\n        if (index == 0) goto LAB_001143cd;\n      }\n      ptrPtr2 = ptrPtr1;\n      nextPtr = (long **)*nextPtr;\n      currentPtr = ptrPtr2;\n    } while (nextPtr != (long **)0x0);\nLAB_001142a1:\n    if (flag != '\\0') {\nLAB_001142a9:\n      ptrPtr2 = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(ptrPtr2 + 3) = (undefined  [16])0x0;\n      *(undefined *)(ptrPtr2 + 2) = 0;\n      *(uint *)((long)ptrPtr2 + 0x14) = options;\n      ptrPtr2[5] = (long *)0x0;\n      currentPtr = ptrPtr2;\n      *ptrPtr2 = (long *)DAT_00127900;\n      DAT_00127900 = currentPtr;\n      ptrPtr2[1] = data;\n      return ptrPtr2;\n    }\n  }\nLAB_00114212:\n  if (currentPtr == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(currentPtr + 2) = 1;\n  return currentPtr;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "xmalloc",
                "FUN_00104bba",
                "dcgettext",
                "fnmatch",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00114c20",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115530",
                "FUN_00116110",
                "FUN_00115dc0",
                "FUN_00115b70",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_data_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "find_build_attributes_00116490",
                "param_1": "param1",
                "param_2": "section_size",
                "param_3": "note_data",
                "param_4": "note_length",
                "uVar1": "unused1",
                "uVar2": "unused2",
                "uVar3": "unused3",
                "bVar4": "unused4",
                "puVar5": "unused5",
                "iVar6": "unused6",
                "lVar7": "error_message",
                "uVar8": "unused8",
                "in_RAX": "note_type",
                "uVar9": "format_length",
                "uVar10": "format_offset",
                "uVar11": "address",
                "uVar12": "description_size",
                "__ptr": "formatted_data",
                "uVar13": "formatted_length",
                "unaff_RBX": "remaining_size",
                "unaff_RBP": "entry_address",
                "puVar14": "note_entries",
                "puVar15": "source",
                "cVar16": "version",
                "puVar17": "destination1",
                "puVar18": "destination2",
                "in_R11": "note_address",
                "unaff_R12": "current_entry",
                "unaff_R13": "entry_count",
                "__nmemb": "entry_count2",
                "unaff_R14": "translation_table",
                "puVar19": "current_note",
                "unaff_retaddr": "ret_address",
                "param_7": "output_length",
                "param_8": "has_version_note",
                "param_9": "version_note_address",
                "in_stack_00000020": "output_buffer_size",
                "in_stack_00000028": "entry_buffer",
                "in_stack_00000030": "output_buffer",
                "in_stack_00000038": "has_data",
                "in_stack_00000040": "has_version",
                "in_stack_00000048": "verbose_info"
            },
            "code": "\nulong find_build_attributes_00116490(undefined8 param1,ulong section_size,ulong note_data,long note_length)\n\n{\n  undefined8 unused1;\n  undefined8 unused2;\n  ulong unused3;\n  bool unused4;\n  ulong *unused5;\n  int unused6;\n  long error_message;\n  undefined8 unused8;\n  ulong note_type;\n  ulong format_length;\n  ulong format_offset;\n  ulong address;\n  ulong description_size;\n  undefined *formatted_data;\n  ulong formatted_length;\n  ulong remaining_size;\n  ulong entry_address;\n  ulong *note_entries;\n  undefined *source;\n  char version;\n  undefined *destination1;\n  undefined *destination2;\n  ulong note_address;\n  ulong *current_entry;\n  ulong *current_note;\n  ulong entry_count;\n  size_t entry_count2;\n  undefined8 *translation_table;\n  ulong *punused20;\n  byte bVar21;\n  int iVar22;\n  ulong ret_address;\n  ulong output_length;\n  uint has_version_note;\n  ulong version_note_address;\n  ulong output_buffer_size;\n  ulong *entry_buffer;\n  undefined *output_buffer;\n  uint has_data;\n  uint has_version;\n  undefined8 *verbose_info;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  error_message = note_length;\n  format_offset = entry_address;\n  formatted_length = entry_count;\n  if (note_type == 0) {\n    if (section_size == 0x100) {\n      current_entry[7] = ret_address;\n      address = ret_address;\nLAB_001164af:\n      format_length = entry_count;\n      formatted_length = entry_count;\n      ret_address = address;\n    }\n    else {\n      current_entry[7] = version_note_address;\nLAB_0011669e:\n      format_offset = entry_address;\n      format_length = entry_address;\n    }\nLAB_001164bb:\n    current_entry[8] = format_length;\n    if (*(char *)((current_entry[3] - 1) + note_data) != '\\0') {\n      error_message = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    current_note = current_entry + 9;\n    if (0xb < remaining_size) {\n      format_length = (**(code **)(translation_table[1] + 0x40))(error_message);\n      *current_note = format_length;\n      format_length = (**(code **)(translation_table[1] + 0x40))(error_message + 4);\n      current_entry[10] = format_length;\n      section_size = (**(code **)(translation_table[1] + 0x40))(error_message + 8);\n      note_data = *current_note;\n      current_entry[0xb] = section_size;\n      note_type = current_entry[10];\n      format_length = note_data + 3 & 0xfffffffffffffffc;\n      current_entry[0xf] = format_length;\n      if (note_type != (note_type + 3 & 0xfffffffffffffffc)) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < section_size - 0x100) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      address = format_length + note_type + 0xc;\n      if (remaining_size < address) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (note_data < 2) {\n        error_message = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      current_entry[0xc] = error_message + 0xc;\n      note_address = error_message + 0xc + format_length;\n      current_entry[0xd] = note_address;\n      remaining_size = remaining_size + (-0xc - (format_length + note_type));\n      note_length = error_message + address;\n      entry_address = format_offset;\n      current_entry = current_note;\n      entry_count = formatted_length;\n      if (note_data != 2) {\n        if (*(char *)(error_message + 0xc) == '$') {\n          if ((*(char *)(error_message + 0xd) == '\\x01') && (*(char *)(error_message + 0xe) == '1')) {\n            format_offset = find_build_attributes_00116490();\n            return format_offset;\n          }\n        }\n        else if ((((4 < note_data) && (*(char *)(error_message + 0xc) == 'G')) &&\n                 (*(char *)(error_message + 0xd) == 'A')) &&\n                ((*(char *)(error_message + 0xe) == '$' && (*(char *)(error_message + 0xf) == '\\x01')))) {\n          if (*(char *)(error_message + 0x10) == '2') {\n            format_offset = find_build_attributes_00116490();\n            return format_offset;\n          }\n          if (*(char *)(error_message + 0x10) == '3') {\n            format_offset = find_build_attributes_00116490();\n            return format_offset;\n          }\n          error_message = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (remaining_size != 0) {\n      error_message = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((has_data | has_version | has_version_note) == 0) {\n      unused1 = *translation_table;\n      unused2 = *verbose_info;\n      unused8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(unused8,unused1,unused2);\nLAB_0011671b:\n      entry_count2 = ((long)current_note - (long)entry_buffer >> 3) * -0x71c71c71c71c71c7;\n      qsort(entry_buffer,entry_count2,0x48,compare_memory_0011a1b0);\n      for (note_entries = entry_buffer; note_entries < current_note; note_entries = note_entries + 9) {\n        format_offset = note_entries[2];\n        if (format_offset != 0) {\n          formatted_length = note_entries[7];\n          format_length = note_entries[8];\n          punused20 = note_entries;\n          iVar22 = 0;\n          if (formatted_length == format_length) {\n            note_entries[2] = 0;\n          }\n          else {\n            do {\n              do {\n                unused5 = punused20;\n                punused20 = unused5 + -9;\n                if (punused20 < entry_buffer) goto LAB_001167f5;\n                address = unused5[-7];\n              } while (address == 0);\n              if ((*punused20 != *note_entries) ||\n                 (unused6 = memcmp((void *)unused5[-6],(void *)note_entries[3],*note_entries), unused6 != 0))\n              break;\n              unused3 = unused5[-2];\n              description_size = unused5[-1];\n              if (formatted_length == unused3) {\n                if (format_length == description_size) {\n                  note_entries[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (format_length <= description_size) {\n                  note_entries[2] = 0;\n                  break;\n                }\n                if (description_size < formatted_length) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < description_size) ||\n                     (formatted_length <= (description_size + 0xf & 0xfffffffffffffff0))) goto find_records_00116852;\n                }\nLAB_001167b8:\n                if ((format_offset == 0x101) == (address == 0x101)) {\n                  if (description_size <= format_length) {\n                    description_size = format_length;\n                  }\n                  if (unused3 < formatted_length) {\n                    formatted_length = unused3;\n                  }\n                  unused5[-1] = description_size;\n                  unused5[-2] = formatted_length;\n                  note_entries[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (unused3 <= formatted_length) goto LAB_001167a6;\n                if (description_size < formatted_length) goto LAB_0010852c;\n                if (format_length < formatted_length) {\n                  if ((0xfffffffffffffff0 < format_length) || (unused3 <= (format_length + 0xf & 0xfffffffffffffff0)))\n                  goto find_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (format_length != description_size) goto LAB_001167b8;\n              }\nfind_records_00116852:\n              unused4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (unused4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(entry_buffer,entry_count2,0x48,compare_records_0011a250);\n      formatted_data = (undefined *)xmalloc(output_buffer_size * 2);\n      output_length = 0;\n      version_note_address = 0;\n      destination2 = formatted_data;\n      for (note_entries = entry_buffer; note_entries < current_note; note_entries = note_entries + 9) {\n        if (note_entries[2] != 0) {\n          destination1 = destination2 + 4;\n          source = destination2 + 0xc;\n          if ((note_entries[7] == version_note_address) && (note_entries[8] == output_length)) {\n            (**(code **)(translation_table[1] + 0x50))(*note_entries,destination2);\n            (**(code **)(translation_table[1] + 0x50))(0,destination1);\n            (**(code **)(translation_table[1] + 0x50))(note_entries[2],destination2 + 8);\n            formatted_length = note_entries[6];\n            format_offset = *note_entries;\n            destination2 = (undefined *)note_entries[3];\n            destination1 = source;\n            for (format_length = format_offset; format_length != 0; format_length = format_length - 1) {\n              *destination1 = *destination2;\n              destination2 = destination2 + (ulong)bVar21 * -2 + 1;\n              destination1 = destination1 + (ulong)bVar21 * -2 + 1;\n            }\n            if (format_offset < formatted_length) {\n              for (error_message = formatted_length - format_offset; error_message != 0; error_message = error_message + -1) {\n                *destination1 = 0;\n                destination1 = destination1 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            destination2 = source + formatted_length;\n          }\n          else {\n            (**(code **)(translation_table[1] + 0x50))();\n            if (*(int *)(translation_table[1] + 8) == 5) {\n              version = (*(char *)(translation_table[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              version = '\\b';\n            }\n            (**(code **)(translation_table[1] + 0x50))(version,destination1);\n            (**(code **)(translation_table[1] + 0x50))(note_entries[2],destination2 + 8);\n            format_offset = *note_entries;\n            destination2 = (undefined *)note_entries[3];\n            destination1 = source;\n            for (formatted_length = format_offset; formatted_length != 0; formatted_length = formatted_length - 1) {\n              *destination1 = *destination2;\n              destination2 = destination2 + (ulong)bVar21 * -2 + 1;\n              destination1 = destination1 + (ulong)bVar21 * -2 + 1;\n            }\n            formatted_length = note_entries[6];\n            if (format_offset < formatted_length) {\n              for (error_message = formatted_length - format_offset; error_message != 0; error_message = error_message + -1) {\n                *destination1 = 0;\n                destination1 = destination1 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            error_message = translation_table[1];\n            source = source + formatted_length;\n            destination2 = source + 8;\n            if ((*(int *)(error_message + 8) == 5) && (*(char *)(translation_table[0x22] + 4) == '\\x02')) {\n              (**(code **)(error_message + 0x38))(note_entries[7],source);\n              (**(code **)(translation_table[1] + 0x38))(note_entries[8],destination2);\n              destination2 = source + 0x10;\n            }\n            else {\n              (**(code **)(error_message + 0x50))(note_entries[7],source);\n              (**(code **)(translation_table[1] + 0x50))(note_entries[8],source + 4);\n            }\n            version_note_address = note_entries[7];\n            output_length = note_entries[8];\n          }\n        }\n      }\n      formatted_length = (long)destination2 - (long)formatted_data;\n      format_offset = formatted_length;\n      destination2 = formatted_data;\n      if (formatted_length < output_buffer_size) {\n        for (; output_buffer_size = formatted_length, format_offset != 0; format_offset = format_offset - 1) {\n          *output_buffer = *destination2;\n          destination2 = destination2 + (ulong)bVar21 * -2 + 1;\n          output_buffer = output_buffer + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(formatted_data);\nLAB_001166f8:\n      free(entry_buffer);\n      return output_buffer_size;\n    }\n    if (((has_version | has_version_note) == 0) || (has_data == 0)) {\n      if (has_version == 0) {\n        if (has_version_note != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (has_version_note == 0) goto LAB_001166f8;\n    }\n    error_message = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (note_type == 0x10) {\n      address = (**(code **)(translation_table[1] + 0x28))(note_address);\n      format_length = (**(code **)(translation_table[1] + 0x28))(current_entry[4] + 8);\n      if (format_length < address) {\n        address = format_length;\n      }\nLAB_00116631:\n      if (current_entry[2] == 0x100) {\n        if (address == 0) {\n          address = ret_address;\n        }\n        note_data = *current_entry;\n        current_entry[7] = address;\n        formatted_length = format_length;\n        ret_address = address;\n        if (format_length == 0) goto LAB_001164af;\n      }\n      else {\n        if (address == 0) {\n          address = version_note_address;\n        }\n        note_data = *current_entry;\n        current_entry[7] = address;\n        format_offset = format_length;\n        version_note_address = address;\n        if (format_length == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (note_type < 0x11) {\n      if (note_type == 4) {\n        address = (**(code **)(translation_table[1] + 0x40))(note_address);\n        format_length = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (note_type == 8) {\n        format_offset = find_valid_attributes_001086af();\n        return format_offset;\n      }\n    }\n    error_message = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (error_message != 0) {\n    bfd_set_error(0x11);\n    print_error_info_001126c0(0,translation_table,verbose_info,error_message);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "FUN_001086af",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_001086af",
                "FUN_0010847a"
            ],
            "imported": false,
            "current_name": "find_build_attributes_00116490",
            "code_backup": "\nulong FUN_00116490(undefined8 param_1,ulong param_2,ulong param_3,long param_4)\n\n{\n  undefined8 uVar1;\n  undefined8 uVar2;\n  ulong uVar3;\n  bool bVar4;\n  ulong *puVar5;\n  int iVar6;\n  long lVar7;\n  undefined8 uVar8;\n  ulong in_RAX;\n  ulong uVar9;\n  ulong uVar10;\n  ulong uVar11;\n  ulong uVar12;\n  undefined *__ptr;\n  ulong uVar13;\n  ulong unaff_RBX;\n  ulong unaff_RBP;\n  ulong *puVar14;\n  undefined *puVar15;\n  char cVar16;\n  undefined *puVar17;\n  undefined *puVar18;\n  ulong in_R11;\n  ulong *unaff_R12;\n  ulong *puVar19;\n  ulong unaff_R13;\n  size_t __nmemb;\n  undefined8 *unaff_R14;\n  ulong *puVar20;\n  byte bVar21;\n  int iVar22;\n  ulong unaff_retaddr;\n  ulong param_7;\n  uint param_8;\n  ulong param_9;\n  ulong in_stack_00000020;\n  ulong *in_stack_00000028;\n  undefined *in_stack_00000030;\n  uint in_stack_00000038;\n  uint in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar21 = 0;\ncode_r0x00116490:\n  lVar7 = param_4;\n  uVar10 = unaff_RBP;\n  uVar13 = unaff_R13;\n  if (in_RAX == 0) {\n    if (param_2 == 0x100) {\n      unaff_R12[7] = unaff_retaddr;\n      uVar11 = unaff_retaddr;\nLAB_001164af:\n      uVar9 = unaff_R13;\n      uVar13 = unaff_R13;\n      unaff_retaddr = uVar11;\n    }\n    else {\n      unaff_R12[7] = param_9;\nLAB_0011669e:\n      uVar10 = unaff_RBP;\n      uVar9 = unaff_RBP;\n    }\nLAB_001164bb:\n    unaff_R12[8] = uVar9;\n    if (*(char *)((unaff_R12[3] - 1) + param_3) != '\\0') {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    puVar19 = unaff_R12 + 9;\n    if (0xb < unaff_RBX) {\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7);\n      *puVar19 = uVar9;\n      uVar9 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 4);\n      unaff_R12[10] = uVar9;\n      param_2 = (**(code **)(unaff_R14[1] + 0x40))(lVar7 + 8);\n      param_3 = *puVar19;\n      unaff_R12[0xb] = param_2;\n      in_RAX = unaff_R12[10];\n      uVar9 = param_3 + 3 & 0xfffffffffffffffc;\n      unaff_R12[0xf] = uVar9;\n      if (in_RAX != (in_RAX + 3 & 0xfffffffffffffffc)) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < param_2 - 0x100) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      uVar11 = uVar9 + in_RAX + 0xc;\n      if (unaff_RBX < uVar11) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (param_3 < 2) {\n        lVar7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaff_R12[0xc] = lVar7 + 0xc;\n      in_R11 = lVar7 + 0xc + uVar9;\n      unaff_R12[0xd] = in_R11;\n      unaff_RBX = unaff_RBX + (-0xc - (uVar9 + in_RAX));\n      param_4 = lVar7 + uVar11;\n      unaff_RBP = uVar10;\n      unaff_R12 = puVar19;\n      unaff_R13 = uVar13;\n      if (param_3 != 2) {\n        if (*(char *)(lVar7 + 0xc) == '$') {\n          if ((*(char *)(lVar7 + 0xd) == '\\x01') && (*(char *)(lVar7 + 0xe) == '1')) {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n        }\n        else if ((((4 < param_3) && (*(char *)(lVar7 + 0xc) == 'G')) &&\n                 (*(char *)(lVar7 + 0xd) == 'A')) &&\n                ((*(char *)(lVar7 + 0xe) == '$' && (*(char *)(lVar7 + 0xf) == '\\x01')))) {\n          if (*(char *)(lVar7 + 0x10) == '2') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          if (*(char *)(lVar7 + 0x10) == '3') {\n            uVar10 = FUN_00116490();\n            return uVar10;\n          }\n          lVar7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaff_RBX != 0) {\n      lVar7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((in_stack_00000038 | in_stack_00000040 | param_8) == 0) {\n      uVar1 = *unaff_R14;\n      uVar2 = *in_stack_00000048;\n      uVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      print_error_message_00119ed0(uVar8,uVar1,uVar2);\nLAB_0011671b:\n      __nmemb = ((long)puVar19 - (long)in_stack_00000028 >> 3) * -0x71c71c71c71c71c7;\n      qsort(in_stack_00000028,__nmemb,0x48,compare_memory_0011a1b0);\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        uVar10 = puVar14[2];\n        if (uVar10 != 0) {\n          uVar13 = puVar14[7];\n          uVar9 = puVar14[8];\n          puVar20 = puVar14;\n          iVar22 = 0;\n          if (uVar13 == uVar9) {\n            puVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                puVar5 = puVar20;\n                puVar20 = puVar5 + -9;\n                if (puVar20 < in_stack_00000028) goto LAB_001167f5;\n                uVar11 = puVar5[-7];\n              } while (uVar11 == 0);\n              if ((*puVar20 != *puVar14) ||\n                 (iVar6 = memcmp((void *)puVar5[-6],(void *)puVar14[3],*puVar14), iVar6 != 0))\n              break;\n              uVar3 = puVar5[-2];\n              uVar12 = puVar5[-1];\n              if (uVar13 == uVar3) {\n                if (uVar9 == uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (uVar9 <= uVar12) {\n                  puVar14[2] = 0;\n                  break;\n                }\n                if (uVar12 < uVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < uVar12) ||\n                     (uVar13 <= (uVar12 + 0xf & 0xfffffffffffffff0))) goto find_records_00116852;\n                }\nLAB_001167b8:\n                if ((uVar10 == 0x101) == (uVar11 == 0x101)) {\n                  if (uVar12 <= uVar9) {\n                    uVar12 = uVar9;\n                  }\n                  if (uVar3 < uVar13) {\n                    uVar13 = uVar3;\n                  }\n                  puVar5[-1] = uVar12;\n                  puVar5[-2] = uVar13;\n                  puVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (uVar3 <= uVar13) goto LAB_001167a6;\n                if (uVar12 < uVar13) goto LAB_0010852c;\n                if (uVar9 < uVar13) {\n                  if ((0xfffffffffffffff0 < uVar9) || (uVar3 <= (uVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto find_records_00116852;\n                  goto LAB_001167b8;\n                }\n                if (uVar9 != uVar12) goto LAB_001167b8;\n              }\nfind_records_00116852:\n              bVar4 = iVar22 < 0x11;\n              iVar22 = iVar22 + 1;\n            } while (bVar4);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(in_stack_00000028,__nmemb,0x48,compare_records_0011a250);\n      __ptr = (undefined *)xmalloc(in_stack_00000020 * 2);\n      param_7 = 0;\n      param_9 = 0;\n      puVar18 = __ptr;\n      for (puVar14 = in_stack_00000028; puVar14 < puVar19; puVar14 = puVar14 + 9) {\n        if (puVar14[2] != 0) {\n          puVar17 = puVar18 + 4;\n          puVar15 = puVar18 + 0xc;\n          if ((puVar14[7] == param_9) && (puVar14[8] == param_7)) {\n            (**(code **)(unaff_R14[1] + 0x50))(*puVar14,puVar18);\n            (**(code **)(unaff_R14[1] + 0x50))(0,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar13 = puVar14[6];\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar9 = uVar10; uVar9 != 0; uVar9 = uVar9 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            puVar18 = puVar15 + uVar13;\n          }\n          else {\n            (**(code **)(unaff_R14[1] + 0x50))();\n            if (*(int *)(unaff_R14[1] + 8) == 5) {\n              cVar16 = (*(char *)(unaff_R14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              cVar16 = '\\b';\n            }\n            (**(code **)(unaff_R14[1] + 0x50))(cVar16,puVar17);\n            (**(code **)(unaff_R14[1] + 0x50))(puVar14[2],puVar18 + 8);\n            uVar10 = *puVar14;\n            puVar18 = (undefined *)puVar14[3];\n            puVar17 = puVar15;\n            for (uVar13 = uVar10; uVar13 != 0; uVar13 = uVar13 - 1) {\n              *puVar17 = *puVar18;\n              puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n              puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n            }\n            uVar13 = puVar14[6];\n            if (uVar10 < uVar13) {\n              for (lVar7 = uVar13 - uVar10; lVar7 != 0; lVar7 = lVar7 + -1) {\n                *puVar17 = 0;\n                puVar17 = puVar17 + (ulong)bVar21 * -2 + 1;\n              }\n            }\n            lVar7 = unaff_R14[1];\n            puVar15 = puVar15 + uVar13;\n            puVar18 = puVar15 + 8;\n            if ((*(int *)(lVar7 + 8) == 5) && (*(char *)(unaff_R14[0x22] + 4) == '\\x02')) {\n              (**(code **)(lVar7 + 0x38))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x38))(puVar14[8],puVar18);\n              puVar18 = puVar15 + 0x10;\n            }\n            else {\n              (**(code **)(lVar7 + 0x50))(puVar14[7],puVar15);\n              (**(code **)(unaff_R14[1] + 0x50))(puVar14[8],puVar15 + 4);\n            }\n            param_9 = puVar14[7];\n            param_7 = puVar14[8];\n          }\n        }\n      }\n      uVar13 = (long)puVar18 - (long)__ptr;\n      uVar10 = uVar13;\n      puVar18 = __ptr;\n      if (uVar13 < in_stack_00000020) {\n        for (; in_stack_00000020 = uVar13, uVar10 != 0; uVar10 = uVar10 - 1) {\n          *in_stack_00000030 = *puVar18;\n          puVar18 = puVar18 + (ulong)bVar21 * -2 + 1;\n          in_stack_00000030 = in_stack_00000030 + (ulong)bVar21 * -2 + 1;\n        }\n      }\n      free(__ptr);\nLAB_001166f8:\n      free(in_stack_00000028);\n      return in_stack_00000020;\n    }\n    if (((in_stack_00000040 | param_8) == 0) || (in_stack_00000038 == 0)) {\n      if (in_stack_00000040 == 0) {\n        if (param_8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param_8 == 0) goto LAB_001166f8;\n    }\n    lVar7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (in_RAX == 0x10) {\n      uVar11 = (**(code **)(unaff_R14[1] + 0x28))(in_R11);\n      uVar9 = (**(code **)(unaff_R14[1] + 0x28))(unaff_R12[4] + 8);\n      if (uVar9 < uVar11) {\n        uVar11 = uVar9;\n      }\nLAB_00116631:\n      if (unaff_R12[2] == 0x100) {\n        if (uVar11 == 0) {\n          uVar11 = unaff_retaddr;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar13 = uVar9;\n        unaff_retaddr = uVar11;\n        if (uVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (uVar11 == 0) {\n          uVar11 = param_9;\n        }\n        param_3 = *unaff_R12;\n        unaff_R12[7] = uVar11;\n        uVar10 = uVar9;\n        param_9 = uVar11;\n        if (uVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (in_RAX < 0x11) {\n      if (in_RAX == 4) {\n        uVar11 = (**(code **)(unaff_R14[1] + 0x40))(in_R11);\n        uVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (in_RAX == 8) {\n        uVar10 = FUNC_001086af();\n        return uVar10;\n      }\n    }\n    lVar7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (lVar7 != 0) {\n    bfd_set_error(0x11);\n    print_error_info_001126c0(0,unaff_R14,in_stack_00000048,lVar7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTargetPtr"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *currentTargetPtr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTargetPtr = targetList;\n  while( true ) {\n    currentTarget = *currentTargetPtr;\n    currentTargetPtr = currentTargetPtr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "bfd_target_list",
                "fprintf",
                "dcgettext",
                "fputc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debugging_0010be1a",
                "param_1": "functionPointer",
                "param_2": "debugstring",
                "param_3": "unused",
                "param_4": "outputValue",
                "lVar1": "currentBlock",
                "uVar2": "errorMessage",
                "pcVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\n\n\nundefined  [16] endFunctionDebugging_0010be1a(long functionPointer,undefined8 debugstring,undefined8 unused,undefined8 outputValue)\n\n{\n  long currentBlock;\n  undefined8 errorMessage;\n  char *errorString;\n  undefined returnValue [16];\n  \n  if (((*(long *)(functionPointer + 8) == 0) || (currentBlock = *(long *)(functionPointer + 0x20), currentBlock == 0)) ||\n     (*(long *)(functionPointer + 0x18) == 0)) {\n    errorString = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlock + 8) == 0) {\n      *(undefined8 *)(currentBlock + 0x20) = debugstring;\n      errorMessage = CONCAT71((int7)((ulong)currentBlock >> 8),1);\n      *(undefined (*) [16])(functionPointer + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorString = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMessage = dcgettext(0,errorString,5);\n  fprintf(_stderr,\"%s\\n\",errorMessage);\n  errorMessage = 0;\nLAB_0010be86:\n  returnValue._8_8_ = outputValue;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f",
                "FUN_0010c892"
            ],
            "imported": false,
            "current_name": "end_function_debugging_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00114690",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_00116b90",
                "FUN_0011173a",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00119dd0",
                "FUN_00116b90",
                "FUN_00116030",
                "FUN_001083b7",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_byte_array_00113da9",
                "param_1": "byteValue",
                "param_2": "param2",
                "param_3": "destination",
                "param_4": "source",
                "puVar1": "dataPtr",
                "lVar2": "loopCounter",
                "puVar3": "arrayPtr",
                "bVar4": "byteCounter",
                "auVar5": "result"
            },
            "code": "\nundefined  [16] initializeByteArray_00113da9(byte byteValue,undefined8 param2,undefined8 destination,undefined8 source)\n\n{\n  undefined8 *dataPtr;\n  long loopCounter;\n  undefined8 *arrayPtr;\n  byte byteCounter;\n  undefined result [16];\n  \n  byteCounter = 0;\n  result._0_8_ = initialize_function_00112904(8 - (uint)byteValue);\n  if (result._0_8_ != 0) {\n    dataPtr = (undefined8 *)xmalloc(0x28);\n    arrayPtr = dataPtr + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)arrayPtr = 0;\n      arrayPtr = (undefined8 *)((long)arrayPtr + (ulong)byteCounter * -8 + 4);\n    }\n    *dataPtr = destination;\n    *(undefined8 **)(result._0_8_ + 0x10) = dataPtr;\n  }\n  result._8_8_ = source;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010dac0",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_byte_array_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_flag",
                "param_1[2]": "record1_flag_value",
                "param_2[2]": "record2_flag_value",
                "param_2[7]": "record2_value7",
                "param_1[7]": "record1_value7",
                "param_2[8]": "record2_value8",
                "param_1[8]": "record1_value8"
            },
            "code": "\nint compare_records_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_flag;\n  \n  record1_flag = record1_flag_value;\n  if (record1_flag == record2_flag_value) {\n    if (record2_value7 <= record1_value7) {\n      if (record1_value7 <= record2_value7) {\n        if (record2_value8 < record1_value8) {\n          return -1;\n        }\n        if (record2_value8 <= record1_value8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1[3] + 3) != *(char *)(record2[3] + 3)) {\n              return (int)*(char *)(record1[3] + 3) - (int)*(char *)(record2[3] + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_flag == 0) || ((record1_flag != 0x100 && (record2_flag_value != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "initialize_data_0010a69a",
                "param_1": "dataStructure",
                "param_2": "ptr",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "arraySize",
                "sVar3": "length",
                "uVar4": "newPtr",
                "uVar5": "isResized",
                "local_60": "message"
            },
            "code": "\nundefined4 initializeData_0010a69a(long dataStructure,undefined8 ptr,int size,char flag,uint value)\n\n{\n  undefined4 result;\n  long arraySize;\n  size_t length;\n  undefined8 newPtr;\n  undefined isResized;\n  char message [48];\n  \n  if (size == 0) {\n    message[0] = '\\0';\n    isResized = 0;\n    arraySize = 0;\n  }\n  else {\n    arraySize = resize_array_00109c2e();\n    if (arraySize < 0) {\n      return 0;\n    }\n    isResized = 1;\n    sprintf(message,\"%ld=\",arraySize);\n  }\n  length = strlen(message);\n  sprintf(message + length,\"%c%u\",(ulong)((-(uint)(flag == '\\0') & 2) + 0x73),(ulong)value);\n  result = initialize_data_structure_00109b52(dataStructure,message,arraySize,isResized,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  arraySize = *(long *)(dataStructure + 0x60);\n  newPtr = xmalloc(1);\n  *(undefined8 *)(arraySize + 0x20) = newPtr;\n  **(undefined **)(*(long *)(dataStructure + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "process_section_options_00115b70",
                "param_1": "sectionNames",
                "pcVar1": "currentSection",
                "iVar2": "stringComparisonResult",
                "iVar3": "sectionIndex",
                "lVar4": "processResult",
                "lVar5": "processResult2",
                "uVar6": "returnStatus",
                "plVar7": "sectionList"
            },
            "code": "\nundefined8 processSectionOptions_00115b70(char **sectionNames)\n\n{\n  char *currentSection;\n  int stringComparisonResult;\n  int sectionIndex;\n  long processResult;\n  long processResult2;\n  undefined8 returnStatus;\n  long *sectionList;\n  \n  processResult = process_data_00114190(*sectionNames,0,4);\n  if (processResult == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      processResult = process_data_00114190(*sectionNames,0,1);\n      processResult2 = process_data_00114190(*sectionNames,0,2);\n      if (processResult != 0) {\n        if (processResult2 != 0) {\n          currentSection = *sectionNames;\n          returnStatus = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          print_error_and_exit_00119dd0(returnStatus,currentSection);\n        }\n        if (processResult != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          currentSection = *sectionNames;\n          sectionList = DAT_001279d8;\n          do {\n            sectionIndex = strcmp(currentSection,(char *)sectionList[1]);\n            if (sectionIndex == 0) {\n              returnStatus = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              print_error_and_exit_00119dd0(returnStatus,currentSection);\n            }\n            sectionList = (long *)*sectionList;\n          } while (sectionList != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (processResult2 == 0)) {\n        return 1;\n      }\n    }\n    sectionIndex = DAT_00127a48;\n    if ((*(byte *)((long)sectionNames + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        currentSection = *sectionNames;\n        stringComparisonResult = strcmp(currentSection,\".gnu_debugaltlink\");\n        if ((stringComparisonResult != 0) && (stringComparisonResult = strcmp(currentSection,\".gnu_debuglink\"), stringComparisonResult != 0)) {\n          sectionIndex = strcmp(currentSection,\".reloc\");\n          if (sectionIndex != 0) {\n            return 1;\n          }\n          returnStatus = check_and_calculate_0010829e();\n          return returnStatus;\n        }\n      }\n      if (sectionIndex == 5) {\n        returnStatus = check_string_length_00113ede(sectionNames);\n        return returnStatus;\n      }\n      if (sectionIndex == 4) {\n        return 0;\n      }\n    }\n    if (sectionIndex == 6) {\n      returnStatus = calculate_checksum_001082b3();\n      return returnStatus;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "FUN_0010829e",
                "FUN_00114190",
                "dcgettext",
                "strcmp",
                "FUN_0010827b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "process_section_options_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00116030",
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "update_relocations_00116030",
                "param_1": "paramArray",
                "param_2": "paramAddress",
                "plVar1": "relocPtr",
                "lVar2": "relocValue",
                "iVar5": "errorValue",
                "in_RAX": "returnValue",
                "lVar6": "writeFunc",
                "__ptr": "relocBuffer",
                "lVar7": "relocationCount",
                "extraout_RAX": "exitValue",
                "lVar8": "loopCounter",
                "uStack_28": "defaultReturnValue"
            },
            "code": "\n\n\nundefined8 updateRelocations_00116030(undefined8 *paramArray,long paramAddress)\n\n{\n  long *relocPtr;\n  long relocValue;\n  long lVar3;\n  long lVar4;\n  int errorValue;\n  undefined8 returnValue;\n  long writeFunc;\n  void *relocBuffer;\n  long relocationCount;\n  undefined8 exitValue;\n  long loopCounter;\n  undefined8 defaultReturnValue;\n  \n  if (*(long *)(paramAddress + 0x60) == 0) {\n    return returnValue;\n  }\n  writeFunc = bfd_get_reloc_upper_bound();\n  if (writeFunc < 0) {\n    if ((writeFunc != -1) || (errorValue = bfd_get_error(), errorValue != 5)) {\n      print_error_0011a110(*paramArray);\n                    \n      xexit(1);\n    }\n  }\n  else if (writeFunc != 0) {\n    relocBuffer = (void *)xmalloc();\n    relocationCount = bfd_canonicalize_reloc(paramArray,paramAddress,relocBuffer);\n    lVar4 = _DAT_00128680;\n    lVar3 = _DAT_00128568;\n    writeFunc = _fwrite;\n    if (relocationCount < 0) {\n      print_error_0011a110(*paramArray);\n                    \n      xexit(1);\n    }\n    if (relocationCount != 0) {\n      loopCounter = 0;\n      do {\n        relocPtr = **(long ***)((long)relocBuffer + loopCounter * 8);\n        if ((((relocPtr != (long *)0x0) && (relocValue = *relocPtr, relocValue != 0)) && (relocValue != writeFunc)) &&\n           ((relocValue != lVar4 && (relocValue != lVar3)))) {\n          *(uint *)(relocValue + 0x18) = *(uint *)(relocValue + 0x18) | 0x20;\n        }\n        loopCounter = loopCounter + 1;\n      } while (relocationCount != loopCounter);\n    }\n    free(relocBuffer);\n    return exitValue;\n  }\n  return defaultReturnValue;\n}\n\n",
            "called": [
                "xexit",
                "bfd_get_reloc_upper_bound",
                "xmalloc",
                "bfd_canonicalize_reloc",
                "FUN_001083b7",
                "fwrite",
                "FUN_0011a110",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_relocations_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "check_string_length_00113ede",
                "param_1": "strings",
                "__s": "str",
                "sVar1": "length",
                "uVar2": "result"
            },
            "code": "\nundefined8 check_string_length_00113ede(char **strings)\n\n{\n  char *str;\n  size_t length;\n  undefined8 result;\n  \n  if (strings == (char **)0x0) {\n    return 0;\n  }\n  str = *strings;\n  if (str != (char *)0x0) {\n    length = strlen(str);\n    if (4 < (int)length) {\n      result = string_comparison_00113fb0(str + (long)(int)length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "strlen",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_0010829e",
                "FUN_001082b3"
            ],
            "imported": false,
            "current_name": "check_string_length_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "value1",
                "lVar2": "value2",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compareRecords_0010875d(long *record1,long *record2)\n\n{\n  long value1;\n  long value2;\n  int result;\n  uint flag;\n  \n  value1 = *record1;\n  value2 = *record2;\n  flag = *(uint *)(value2 + 0x24) & 0x102;\n  if ((*(uint *)(value1 + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(value1 + 0x38) <= *(ulong *)(value2 + 0x38)) {\n    result = -1;\n    if (*(ulong *)(value2 + 0x38) <= *(ulong *)(value1 + 0x38)) {\n      if (*(ulong *)(value2 + 0x40) < *(ulong *)(value1 + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(value2 + 0x40) <= *(ulong *)(value1 + 0x40)) {\n          result = 1;\n          if (*(uint *)(value1 + 0x18) <= *(uint *)(value2 + 0x18)) {\n            return -(uint)(*(uint *)(value1 + 0x18) < *(uint *)(value2 + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_debug_function_0010c892",
                "param_1": "functionParam",
                "param_2": "recordParam",
                "cVar1": "charValue",
                "lVar2": "returnValue",
                "lVar3": "tagType",
                "uVar4": "result",
                "puVar5": "pointerVar",
                "iVar6": "intVar"
            },
            "code": "\n\n\nundefined8 processDebugFunction_0010c892(undefined8 functionParam,long recordParam)\n\n{\n  char charValue;\n  long returnValue;\n  long tagType;\n  undefined8 result;\n  undefined8 *pointerVar;\n  int intVar;\n  \n  if (*(char *)(recordParam + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pointerVar = *(undefined8 **)(recordParam + 0x1a0); pointerVar != (undefined8 *)0x0;\n        pointerVar = (undefined8 *)*pointerVar) {\n      intVar = *(int *)(pointerVar + 2);\n      tagType = pointerVar[1];\n      if (intVar != 0) {\n        if (tagType != 0) {\n          if (intVar - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        pointerVar[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (tagType == 0) goto LAB_0010c910;\n      intVar = 7;\nLAB_0010c8d5:\n      returnValue = initialize_function_00112904(intVar,0);\n      if (returnValue == 0) goto LAB_0010c910;\n      tagType = find_debug_tag_type_0010c6be(functionParam,tagType,returnValue);\n      pointerVar[3] = tagType;\n      if (tagType == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    charValue = process_records_0010c1c6();\n    if (charValue != '\\0') {\n      charValue = end_function_debugging_0010be1a(functionParam,*(undefined8 *)(recordParam + 0x68));\n      if (charValue != '\\0') {\n        *(undefined *)(recordParam + 0x60) = 0;\n        *(undefined8 *)(recordParam + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_0010c6be",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "fprintf",
                "dcgettext",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_debug_function_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_function_00112904",
                "param_1": "paramOne",
                "param_2": "paramTwo",
                "puVar1": "dynamicMemory",
                "xmalloc": "allocateMemory",
                "ZEXT816": "zeroExtend"
            },
            "code": "\nvoid initializeFunction_00112904(undefined4 paramOne,undefined4 paramTwo)\n\n{\n  undefined4 *dynamicMemory;\n  \n  dynamicMemory = (undefined4 *)xmalloc(0x18);\n  *dynamicMemory = paramOne;\n  dynamicMemory[1] = paramTwo;\n  *(undefined (*) [16])(dynamicMemory + 2) = zeroExtend(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010c6be",
                "FUN_00113b71",
                "FUN_0010c2d2",
                "FUN_00113c43",
                "FUN_00113da9",
                "FUN_00113bfa",
                "FUN_00113df2",
                "FUN_00113ce0",
                "FUN_00113dfe",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_00113b98",
                "FUN_00113d3a",
                "FUN_00113d6e",
                "FUN_00113b4a",
                "FUN_00113e17",
                "FUN_0010c95e",
                "FUN_0010c218",
                "FUN_00113cb9",
                "FUN_0010c892",
                "FUN_00113e23"
            ],
            "imported": false,
            "current_name": "initialize_function_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "returnValue",
                "auVar2": "resultArray"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 returnValue;\n  undefined resultArray [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  resultArray._1_7_ = 0;\n  resultArray[0] = comparisonResult == 0;\n  resultArray._8_8_ = returnValue;\n  return resultArray;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00104966",
                "FUN_0010882c",
                "FUN_00116b90",
                "FUN_00114690",
                "FUN_00108237",
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_0010543c",
                "FUN_00109a32",
                "FUN_00114460",
                "FUN_00115a90",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_0010c6be",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_0011173a",
                "FUN_00114190",
                "FUN_0010afd5",
                "FUN_00104943",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_0010914e",
                "FUN_00115b70",
                "FUN_0010ee3f",
                "FUN_00115f50",
                "FUN_0010b0fa",
                "FUN_0010554f",
                "FUN_00108898",
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "process_function_0011a390",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "iterations"
            },
            "code": "\nvoid processFunction_0011a390(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionList;\n  uint iterations;\n  \n  functionList = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      iterations = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)iterations) {\n        currentIndex = (long)(int)iterations;\n        iterations = iterations & 7;\n        (*(code *)functionList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (iterations != 0) {\n            if (iterations != 1) {\n              if (iterations != 2) {\n                if (iterations != 3) {\n                  if (iterations != 4) {\n                    if (iterations != 5) {\n                      if (iterations != 6) {\n                        (*(code *)functionList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[currentIndex])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_0011a466:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "process_function_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "process_and_format_string_0010e842",
                "param_1": "input_value",
                "param_2": "input_string",
                "param_3": "index_value",
                "param_4": "result",
                "sVar1": "string_length",
                "__s": "formatted_string",
                "auVar2": "result_data"
            },
            "code": "\nundefined  [16] process_and_format_string_0010e842(undefined8 input_value,char *input_string,undefined8 index_value,undefined8 result)\n\n{\n  size_t string_length;\n  char *formatted_string;\n  undefined result_data [16];\n  \n  string_length = strlen(input_string);\n  formatted_string = (char *)xmalloc(string_length + 0x14);\n  sprintf(formatted_string,\"%s:c=i%ld\",input_string,index_value);\n  result_data._0_4_ = process_string_0010e2f0(input_value,0x80,0,0,formatted_string);\n  result_data._4_4_ = 0;\n  if ((char)result_data._0_4_ != '\\0') {\n    free(formatted_string);\n  }\n  result_data._8_8_ = result;\n  return result_data;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_and_format_string_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_and_return_pointer_00113cb9",
                "param_1": "input_value",
                "lVar1": "pointer_to_initialized_value"
            },
            "code": "\nlong initialize_and_return_pointer_00113cb9(long input_value)\n\n{\n  long pointer_to_initialized_value;\n  \n  if (input_value != 0) {\n    pointer_to_initialized_value = initialize_function_00112904(0xe,0);\n    if (pointer_to_initialized_value == 0) {\n      pointer_to_initialized_value = 0;\n    }\n    else {\n      *(long *)(pointer_to_initialized_value + 0x10) = input_value;\n    }\n    return pointer_to_initialized_value;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_and_return_pointer_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "process_entry_0010eafe",
                "param_1": "entry",
                "param_2": "inputString",
                "param_3": "flag",
                "__s": "extractedString",
                "sVar2": "inputLength",
                "sVar3": "extractedLength",
                "__s_00": "resultString",
                "uVar1": "returnValue"
            },
            "code": "\nundefined4 processEntry_0010eafe(long entry,char *inputString,char flag)\n\n{\n  undefined4 returnValue;\n  char *extractedString;\n  size_t inputLength;\n  size_t extractedLength;\n  char *resultString;\n  \n  if ((*(int *)(entry + 0x1f8) == 0) && (*(long *)(entry + 0x1e8) == -1)) {\n    extractedString = (char *)extract_and_free_next_entry_00109b2f();\n    inputLength = strlen(inputString);\n    extractedLength = strlen(extractedString);\n    resultString = (char *)xmalloc(inputLength + 3 + extractedLength);\n    sprintf(resultString,\"%s:%c%s\",inputString,(ulong)((-(uint)(flag == '\\0') & 0x20) + 0x46),extractedString);\n    *(undefined8 *)(entry + 0x1e8) = *(undefined8 *)(entry + 0x10);\n    returnValue = process_string_0010e2f0(entry,0x24,0,0,resultString);\n    if ((char)returnValue != '\\0') {\n      free(resultString);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "sprintf",
                "FUN_0010e2f0",
                "FUN_00109b2f",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_entry_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_function_with_param_00113df2",
                "initialize_function_00112904": "initialize_function"
            },
            "code": "\nvoid initialize_function_with_param_00113df2(undefined4 param_1)\n\n{\n  initialize_function(4,param_1);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_function_with_param_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "reverse_and_initialize_0010a377",
                "param_1": "entryPtr",
                "cVar1": "flag",
                "__s": "string1",
                "__s_00": "string2",
                "sVar3": "length1",
                "sVar4": "length2",
                "__s_01": "combinedString",
                "uVar2": "result",
                "uVar5": "flagValue"
            },
            "code": "\nundefined4 reverseAndInitialize_0010a377(long entryPtr)\n\n{\n  char flag;\n  undefined4 result;\n  char *string1;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *combinedString;\n  undefined flagValue;\n  \n  flagValue = 1;\n  flag = *(char *)(*(long *)(entryPtr + 0x60) + 0x1c);\n  string1 = (char *)extract_and_free_next_entry_00109b2f();\n  if (flag == '\\0') {\n    flagValue = *(undefined *)(*(long *)(entryPtr + 0x60) + 0x1c);\n  }\n  string2 = (char *)extract_and_free_next_entry_00109b2f(entryPtr);\n  length1 = strlen(string1);\n  length2 = strlen(string2);\n  combinedString = (char *)xmalloc(length1 + 3 + length2);\n  sprintf(combinedString,\"@%s,%s\",string2,string1);\n  free(string2);\n  free(string1);\n  result = initialize_data_structure_00109b52(entryPtr,combinedString,0,flagValue,0);\n  if ((char)result != '\\0') {\n    free(combinedString);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "strlen",
                "sprintf",
                "free",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reverse_and_initialize_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "process_data_loop_0010d882",
                "param_1": "input_data",
                "param_2": "data_ptr",
                "param_3": "output_ptr",
                "param_4": "end_flag_ptr",
                "iVar1": "iteration_count",
                "pcVar2": "current_char",
                "cVar3": "current_char_value",
                "lVar4": "allocated_memory",
                "pcVar5": "updated_data_ptr",
                "uVar6": "local_var6",
                "bVar7": "loop_condition",
                "local_50": "local_variable_1",
                "local_4c": "local_variable_2",
                "local_48": "local_variable_3",
                "local_44": "local_variable_4",
                "local_40": "local_array"
            },
            "code": "\nundefined8 process_data_loop_0010d882(long input_data,char **data_ptr,long *output_ptr,undefined *end_flag_ptr)\n\n{\n  int iteration_count;\n  char *current_char;\n  char current_char_value;\n  long allocated_memory;\n  char *updated_data_ptr;\n  ulong local_var6;\n  bool loop_condition;\n  uint local_variable_1;\n  undefined4 local_variable_2;\n  uint local_variable_3;\n  int local_variable_4;\n  undefined8 local_array [2];\n  \n  current_char = *data_ptr;\n  local_variable_2 = 10;\n  if (output_ptr != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *output_ptr = allocated_memory;\n    *end_flag_ptr = 0;\n  }\n  local_variable_1 = 0;\n  while( true ) {\n    updated_data_ptr = *data_ptr;\n    current_char_value = *updated_data_ptr;\n    if ((current_char_value == '_' || current_char_value == '\\0') || (current_char_value == 'e')) break;\n    if ((current_char_value == 'N') || (current_char_value == 'T')) {\n      *data_ptr = updated_data_ptr + 1;\n      if (current_char_value == 'T') {\n        local_variable_4 = 1;\n      }\n      else {\n        current_char_value = parse_number_00108ea1(data_ptr,&local_variable_4);\n        if (current_char_value == '\\0') goto LAB_0010d958;\n      }\n      current_char_value = parse_number_00108ea1(data_ptr,&local_variable_3);\n      if ((current_char_value == '\\0') || (*(uint *)(input_data + 0x28) <= local_variable_3)) {\nLAB_0010d958:\n        print_error_message_0010911f(current_char);\n        return 0;\n      }\n      local_var6 = (ulong)local_variable_3;\n      while (iteration_count = local_variable_4 + -1, loop_condition = local_variable_4 != 0, local_variable_4 = iteration_count, loop_condition) {\n        local_array[0] = *(undefined8 *)(*(long *)(input_data + 0x20) + local_var6 * 0x10);\n        current_char_value = process_data_0010d7d4(input_data,local_array,output_ptr,&local_variable_1,&local_variable_2);\n        if (current_char_value == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char_value = process_data_0010d7d4(input_data,data_ptr,output_ptr,&local_variable_1,&local_variable_2);\n      if (current_char_value == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (output_ptr == (long *)0x0) {\n    if (current_char_value != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*output_ptr + (ulong)local_variable_1 * 8) = 0;\n    if (*updated_data_ptr != 'e') goto LAB_0010d9fa;\n    *end_flag_ptr = 1;\n  }\n  updated_data_ptr = updated_data_ptr + 1;\n  *data_ptr = updated_data_ptr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)updated_data_ptr >> 8),1);\n}\n\n",
            "called": [
                "FUN_0010d7d4",
                "FUN_00108ea1",
                "xmalloc",
                "FUN_0010911f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "process_data_loop_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memory",
                "param_2": "param",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "memPtr",
                "pauVar2": "ptrArray",
                "lVar3": "loopCount",
                "puVar4": "currentPtr",
                "bVar5": "tempByte"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memory) [16],undefined8 param,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 *memPtr;\n  undefined (*ptrArray) [16];\n  long loopCount;\n  undefined4 *currentPtr;\n  byte tempByte;\n  \n  tempByte = 0;\n  memPtr = (undefined4 *)xmalloc(0x28);\n  currentPtr = memPtr;\n  for (loopCount = 10; loopCount != 0; loopCount = loopCount + -1) {\n    *currentPtr = 0;\n    currentPtr = currentPtr + (ulong)tempByte * -2 + 1;\n  }\n  ptrArray = *memory;\n  *(undefined8 *)(memPtr + 2) = param;\n  memPtr[5] = value1;\n  memPtr[6] = value2;\n  if (ptrArray == (undefined (*) [16])0x0) {\n    ptrArray = (undefined (*) [16])xmalloc(0x10);\n    *ptrArray = ZEXT816(0);\n    *memory = ptrArray;\n    *(undefined (**) [16])(*ptrArray + 8) = ptrArray;\n  }\n  **(undefined8 **)(*ptrArray + 8) = memPtr;\n  *(undefined4 **)(*ptrArray + 8) = memPtr;\n  return memPtr;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c6be",
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "record_line_debug_info_0010bf86",
                "param_1": "recordPtr",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "result",
                "puVar2": "unitPtr",
                "uVar3": "index",
                "puVar4": "newPtr",
                "lVar5": "tempVar",
                "puVar6": "tempPtr",
                "bVar7": "flag"
            },
            "code": "\n\n\nundefined8 recordLineDebugInfo_0010bf86(long recordPtr,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 result;\n  undefined8 *unitPtr;\n  ulong index;\n  undefined4 *newPtr;\n  long tempVar;\n  undefined4 *tempPtr;\n  byte flag;\n  \n  flag = 0;\n  if (*(long *)(recordPtr + 8) == 0) {\n    result = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(_stderr,\"%s\\n\",result);\n    result = 0;\n  }\n  else {\n    tempVar = *(long *)(recordPtr + 0x28);\n    if ((tempVar != 0) && (*(long *)(tempVar + 8) == *(long *)(recordPtr + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(tempVar + 0x10 + index * 8) == -1) {\n          unitPtr = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(tempVar + 0x10 + (long)unitPtr * 8) = param2;\n          *(undefined8 *)(tempVar + 0x60 + (long)unitPtr * 8) = param3;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newPtr = (undefined4 *)xmalloc(0xb0);\n    tempPtr = newPtr;\n    for (tempVar = 0x2c; tempVar != 0; tempVar = tempVar + -1) {\n      *tempPtr = 0;\n      tempPtr = tempPtr + (ulong)flag * -2 + 1;\n    }\n    result = *(undefined8 *)(recordPtr + 0x10);\n    *(undefined8 *)(newPtr + 4) = param2;\n    *(undefined8 *)(newPtr + 2) = result;\n    *(undefined8 *)(newPtr + 0x18) = param3;\n    tempPtr = newPtr + 6;\n    for (tempVar = 0x48; tempVar != 0; tempVar = tempVar + -1) {\n      *(undefined *)tempPtr = 0xff;\n      tempPtr = (undefined4 *)((long)tempPtr + (ulong)flag * -2 + 1);\n    }\n    unitPtr = *(undefined8 **)(recordPtr + 0x28);\n    if (unitPtr == (undefined8 *)0x0) {\n      unitPtr = *(undefined8 **)(recordPtr + 8);\n      unitPtr[2] = newPtr;\n    }\n    else {\n      *unitPtr = newPtr;\n    }\n    *(undefined4 **)(recordPtr + 0x28) = newPtr;\nLAB_0010c056:\n    result = CONCAT71((int7)((ulong)unitPtr >> 8),1);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0011173a",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "record_line_debug_info_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_001086af",
                "FUN_0010554f",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "pattern_match_0011a170",
                "param_1": "pattern",
                "param_2": "inputString",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint patternMatch_0011a170(char **pattern,char **inputString)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*inputString,0);\n    if (matchResult == 0) {\n      *(undefined *)(inputString + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "pattern_match_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_0010bd62",
                "param_1": "function_ptr",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "next_ptr",
                "uVar2": "error_message",
                "puVar3": "new_ptr",
                "puVar4": "current_ptr",
                "lVar5": "iteration_count",
                "puVar6": "last_ptr",
                "puVar7": "temp_ptr",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecord_parameter_0010bd62(long function_ptr,long param2,long param3,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *next_ptr;\n  undefined8 error_message;\n  undefined4 *new_ptr;\n  undefined8 *current_ptr;\n  long iteration_count;\n  undefined8 *last_ptr;\n  undefined4 *temp_ptr;\n  byte flag;\n  \n  flag = 0;\n  if (param2 == 0) {\n    return 0;\n  }\n  if (param3 != 0) {\n    if ((*(long *)(function_ptr + 8) != 0) && (*(long *)(function_ptr + 0x18) != 0)) {\n      new_ptr = (undefined4 *)xmalloc(0x28);\n      temp_ptr = new_ptr;\n      for (iteration_count = 10; iteration_count != 0; iteration_count = iteration_count + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      iteration_count = *(long *)(function_ptr + 0x18);\n      *(long *)(new_ptr + 2) = param2;\n      *(long *)(new_ptr + 4) = param3;\n      new_ptr[6] = param4;\n      next_ptr = *(undefined8 **)(iteration_count + 8);\n      *(undefined8 *)(new_ptr + 8) = param5;\n      last_ptr = (undefined8 *)(iteration_count + 8);\n      while (current_ptr = next_ptr, current_ptr != (undefined8 *)0x0) {\n        last_ptr = current_ptr;\n        next_ptr = (undefined8 *)*current_ptr;\n      }\n      *last_ptr = new_ptr;\n      return 1;\n    }\n    error_message = dcgettext(0,\"debug_record_parameter_0010bd62: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",error_message);\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "extract_and_copy_archive_00104ea2",
                "unaff_R12": "archivePath",
                "param_11": "openMode",
                "ppcVar6": "archiveFile",
                "unaff_R15": "archiveFileBuffer",
                "unaff_retaddr": "returnAddress",
                "unaff_EBX": "archResult",
                "unaff_RBP": "statResult",
                "unaff_R13": "currentFile",
                "param_7": "inputFile",
                "param_8": "bytesCopied",
                "param_9": "tempDirectory",
                "param_10": "outputFile",
                "param_18": "permission",
                "param_19": "fileSize"
            },
            "code": "\nvoid extractAndCopyArchive_00104ea2(void)\n\n{\n  char cVar1;\n  int iVar2;\n  char **ppcVar3;\n  void *pvVar4;\n  long lVar5;\n  char **archiveFile;\n  char *pcVar7;\n  undefined8 *puVar8;\n  int *piVar9;\n  char *pcVar10;\n  undefined8 uVar11;\n  long lVar12;\n  code *pcVar13;\n  long lVar14;\n  int archResult;\n  stat *statResult;\n  char *pcVar15;\n  stat *psVar16;\n  char *archivePath;\n  undefined8 *currentFile;\n  char **archiveFileBuffer;\n  byte bVar17;\n  undefined8 returnAddress;\n  undefined8 *inputFile;\n  long *bytesCopied;\n  char *tempDirectory;\n  undefined8 *outputFile;\n  undefined8 openMode;\n  undefined8 in_stack_00000030;\n  uint permission;\n  long fileSize;\n  \n  bVar17 = 0;\ncode_r0x00104ea2:\n  archiveFile = (char **)bfd_openw(archivePath,openMode);\n  if (archiveFile == (char **)0x0) {\nLAB_00104e80:\n    print_error_info_001126c0(archivePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    cVar1 = FUNC_00114e50(archiveFileBuffer,archiveFile,returnAddress);\n    if (cVar1 == '\\0') {\n      iVar2 = bfd_get_arch(archiveFileBuffer);\n      if (iVar2 == 0) goto LAB_00104d75;\n      cVar1 = bfd_close_all_done(archiveFile);\n      if (cVar1 != '\\0') goto LAB_00104ec9;\n      print_error_info_001126c0(archivePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    cVar1 = bfd_close(archiveFile);\n    archiveFile = archiveFileBuffer;\n    if (cVar1 == '\\0') {\n      print_error_info_001126c0(archivePath,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (archResult == 0)) {\n      set_file_time_0011a350(archivePath,statResult);\n    }\n    lVar12 = bfd_openr(archivePath,openMode);\n    currentFile[2] = lVar12;\n    *bytesCopied = lVar12;\n    bytesCopied = (long *)(lVar12 + 0xf0);\n    archiveFileBuffer = (char **)bfd_openr_next_archived_file(outputFile,archiveFile);\n    bfd_close(archiveFile);\n    while ((DAT_00127a40 == 0 && (archiveFileBuffer != (char **)0x0))) {\n      pcVar10 = *archiveFileBuffer;\n      pcVar7 = pcVar10;\n      if (*pcVar10 == '/') {\nLAB_0010527d:\n        uVar11 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        print_error_message_00119ed0(uVar11,pcVar10);\n        goto LAB_00104e93;\n      }\n      while (*pcVar7 != '\\0') {\n        pcVar15 = pcVar7;\n        if ((*pcVar7 == '.') && (pcVar15 = pcVar7 + 1, pcVar7[1] == '.')) {\n          pcVar15 = pcVar7 + 2;\n          if ((pcVar7[2] == '\\0') || (pcVar7[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pcVar15 != '\\0' && (*pcVar15 != '/')); pcVar15 = pcVar15 + 1) {\n        }\n        pcVar7 = pcVar15;\n        if (*pcVar15 == '/') {\n          extract_and_copy_archive_files_001052a2();\n          return;\n        }\n      }\n      statResult = (stat *)&stack0x00000050;\n      archivePath = (char *)concat(tempDirectory,&DAT_0011b47d);\n      iVar2 = stat(archivePath,statResult);\n      puVar8 = currentFile;\n      if (-1 < iVar2) {\n        lVar12 = create_temp_directory_0011a0e0(archivePath);\n        free(archivePath);\n        if (lVar12 == 0) {\n          piVar9 = __errno_location();\n          pcVar10 = strerror(*piVar9);\n          uVar11 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n          goto LAB_00104e93;\n        }\n        puVar8 = (undefined8 *)xmalloc(0x18);\n        pcVar10 = *archiveFileBuffer;\n        *puVar8 = currentFile;\n        puVar8[2] = 0;\n        puVar8[1] = lVar12;\n        archivePath = (char *)concat(lVar12,&DAT_0011b47d,pcVar10);\n      }\n      archResult = 0;\n      if (DAT_001279eb != '\\0') {\n        psVar16 = statResult;\n        for (lVar12 = 0x24; lVar12 != 0; lVar12 = lVar12 + -1) {\n          *(undefined4 *)&psVar16->st_dev = 0;\n          psVar16 = (stat *)((long)psVar16 + (ulong)bVar17 * -8 + 4);\n        }\n        archiveFile = (char **)archiveFileBuffer[0x1d];\n        if ((char **)archiveFileBuffer[0x1d] == (char **)0x0) {\n          archiveFile = archiveFileBuffer;\n        }\n        archResult = (**(code **)(archiveFile[1] + 0x1e8))(archiveFileBuffer,statResult);\n        if (archResult != 0) {\n          pcVar10 = *archiveFileBuffer;\n          uVar11 = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_message_00119ed0(uVar11,pcVar10);\n        }\n      }\n      currentFile = (undefined8 *)xmalloc(0x18);\n      currentFile[1] = archivePath;\n      *currentFile = puVar8;\n      currentFile[2] = 0;\n      cVar1 = bfd_check_format(archiveFileBuffer,1);\n      if (cVar1 != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        archiveFile = (char **)bfd_openw(archivePath,*(undefined8 *)archiveFileBuffer[1]);\n        if (archiveFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      uVar11 = dcgettext(0,\"Unable to recognise the format of file\",5);\n      print_error_info_001126c0(0,archiveFileBuffer,0,uVar11);\n      archiveFile = (char **)bfd_openw(archivePath,openMode);\n      if (archiveFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      ppcVar3 = (char **)archiveFileBuffer[0x1d];\n      if ((char **)archiveFileBuffer[0x1d] == (char **)0x0) {\n        ppcVar3 = archiveFileBuffer;\n      }\n      iVar2 = (**(code **)(ppcVar3[1] + 0x1e8))(archiveFileBuffer);\n      lVar12 = fileSize;\n      if (iVar2 == 0) {\n        if (fileSize < 0) {\n          build_filename_001125fa(archiveFileBuffer);\n          uVar11 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          print_error_message_00119ed0(uVar11);\n        }\n        else {\n          iVar2 = bfd_seek(archiveFileBuffer,0,0);\n          if (iVar2 == 0) {\n            if (DAT_001279e9 != '\\0') {\n              pcVar10 = *archiveFile;\n              uVar11 = build_filename_001125fa(archiveFileBuffer);\n              pcVar7 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(pcVar7,uVar11,pcVar10);\n            }\n            pvVar4 = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (lVar12 == 0) {\n                chmod(*archiveFile,permission | 0x100);\n                free(pvVar4);\n                cVar1 = bfd_close_all_done(archiveFile);\n                archiveFile = archiveFileBuffer;\n                if (cVar1 == '\\0') {\n                  print_error_info_001126c0(archivePath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              lVar14 = 0x2000;\n              if (lVar12 < 0x2001) {\n                lVar14 = lVar12;\n              }\n              lVar5 = bfd_bread(pvVar4,lVar14,archiveFileBuffer);\n              ppcVar3 = archiveFileBuffer;\n              if ((lVar14 != lVar5) ||\n                 (lVar5 = bfd_bwrite(pvVar4,lVar14,archiveFile), ppcVar3 = archiveFile, lVar14 != lVar5))\n              break;\n              lVar12 = lVar12 - lVar14;\n            }\n            print_error_info_001126c0(0,ppcVar3,0,0);\n            free(pvVar4);\n          }\n          else {\n            uVar11 = build_filename_001125fa(archiveFileBuffer);\n            print_error_0011a110(uVar11);\n          }\n        }\n      }\n      else {\n        print_error_info_001126c0(0,archiveFileBuffer,0,0);\n      }\n      cVar1 = bfd_close_all_done(archiveFile);\n      if (cVar1 == '\\0') {\n        print_error_info_001126c0(archivePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(archivePath);\n      DAT_00127a40 = 1;\n    }\n    *bytesCopied = 0;\n    pvVar4 = (void *)xstrdup(*inputFile);\n    if (DAT_00127a40 == 0) {\n      pcVar13 = bfd_close;\n    }\n    else {\n      pcVar13 = bfd_close_all_done;\n    }\n    cVar1 = (*pcVar13)(inputFile);\n    if (cVar1 == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_info_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n    pvVar4 = (void *)xstrdup(*outputFile);\n    cVar1 = bfd_close(outputFile);\n    if (cVar1 == '\\0') {\n      DAT_00127a40 = 1;\n      print_error_info_001126c0(pvVar4,0,0,0);\n    }\n    free(pvVar4);\n  }\n  while (currentFile != (undefined8 *)0x0) {\n    if (currentFile[2] == 0) {\n      rmdir((char *)currentFile[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)currentFile[1]);\n    }\n    free((void *)currentFile[1]);\n    puVar8 = (undefined8 *)*currentFile;\n    free(currentFile);\n    currentFile = puVar8;\n  }\n  rmdir(tempDirectory);\n  free(tempDirectory);\n  return;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "bfd_close_all_done",
                "FUN_001125fa",
                "bfd_close",
                "dcgettext",
                "FUN_00104ea2",
                "printf",
                "strerror",
                "rmdir",
                "FUN_001052a2",
                "bfd_check_format",
                "chmod",
                "bfd_bwrite",
                "bfd_close_all_done",
                "FUN_001126c0",
                "bfd_close",
                "FUN_0011a0e0",
                "free",
                "bfd_get_arch",
                "bfd_seek",
                "xstrdup",
                "bfd_openr_next_archived_file",
                "unlink",
                "FUN_0011a110",
                "bfd_openw",
                "xmalloc",
                "bfd_bread",
                "FUN_00114b84",
                "__errno_location",
                "bfd_openr",
                "FUN_0011a350",
                "stat",
                "concat",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "extract_and_copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010e6a8",
                "FUN_0010dac0",
                "FUN_0011378f",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_0010e2f0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_001126c0",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "initialize_function_00113ce0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "lVar1": "result",
                "plVar2": "allocated_memory",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\ninitialize_function_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_4,undefined8 input_5)\n\n{\n  long result;\n  long *allocated_memory;\n  undefined return_value [16];\n  \n  if (input_1 != 0) {\n    result = initialize_function_00113ce0_00112904(0xd,0);\n    if (result != 0) {\n      allocated_memory = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_memory + 0x11) = 0;\n      *allocated_memory = input_1;\n      *(undefined4 *)((long)allocated_memory + 0x14) = 0;\n      allocated_memory[1] = input_2;\n      *(undefined *)(allocated_memory + 2) = input_3;\n      *(long **)(result + 0x10) = allocated_memory;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0011173a",
                "FUN_0010dac0",
                "FUN_0010c95e",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "initialize_function_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_expand_data_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "start",
                "unaff_R14": "end",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "translatedErrorMessage"
            },
            "code": "\nvoid readAndExpandData_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long start;\n  long end;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + start),1,end - start,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      translatedErrorMessage = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      print_error_and_exit_00119dd0(errorMessage,translatedErrorMessage);\n    }\n    start = start + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (start == end) {\n      end = start * 2;\n      translatedErrorMessage = xrealloc(*(undefined8 *)(buffer + 0x20),end);\n      *(undefined8 *)(buffer + 0x20) = translatedErrorMessage;\n    }\n  }\n  *(long *)(buffer + 0x18) = start;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "FUN_00119dd0",
                "fclose",
                "dcgettext",
                "FUN_00114dc7",
                "ferror",
                "xrealloc",
                "feof",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_expand_data_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_data_00119f70",
                "param_1": "header",
                "param_2": "data",
                "uVar1": "format",
                "cVar2": "result",
                "iVar3": "counter",
                "uVar4": "headerEndian",
                "uVar5": "dataEndian",
                "__format": "messageFormat",
                "lVar6": "bufferSize",
                "uVar7": "headerValue",
                "lVar8": "buffer"
            },
            "code": "\nundefined4 processData_00119f70(undefined8 *header,undefined8 *data)\n\n{\n  undefined4 format;\n  char result;\n  int counter;\n  undefined8 headerEndian;\n  undefined8 dataEndian;\n  char *messageFormat;\n  long bufferSize;\n  undefined8 headerValue;\n  long buffer;\n  \n  counter = *(int *)((long)data + 0xc) + 1;\n  *(int *)((long)data + 0xc) = counter;\n  if ((ulong)data[2] < (ulong)((long)counter * 0x60)) {\n    bufferSize = 0x3000;\n    if (0x3f < counter) {\n      bufferSize = (long)counter * 0xc0;\n    }\n    buffer = xrealloc(data[3]);\n    data[3] = buffer;\n    memset((void *)(buffer + data[2]),0,bufferSize - data[2]);\n    data[2] = bufferSize;\n  }\n  format = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x60) = *header;\n  headerEndian = get_endianness_00114e00(format);\n  dataEndian = get_endianness_00114e00(*(undefined4 *)(header + 2));\n  headerValue = *header;\n  messageFormat = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(messageFormat,headerValue,dataEndian,headerEndian);\n  bufferSize = bfd_openw(*data,*header);\n  if (bufferSize == 0) {\n    print_error_0011a110(*data);\n    *(undefined4 *)(data + 1) = 1;\n  }\n  else {\n    counter = 2;\n    result = bfd_set_format(bufferSize,1);\n    if (result == '\\0') {\n      counter = bfd_get_error();\n      if (counter != 5) {\n        print_error_0011a110(*header);\n        *(undefined4 *)(data + 1) = 1;\n      }\n    }\n    else {\n      do {\n        result = (**(code **)(*(long *)(bufferSize + 8) + 0x2a0))(bufferSize,counter,0);\n        if (result != '\\0') {\n          headerValue = bfd_printable_arch_mach(counter,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)data + 0xc) * 0x60 + data[3] + -0x58 + (ulong)(counter - 2)) =\n               1;\n        }\n        counter = counter + 1;\n      } while (counter != 0x57);\n    }\n    bfd_close_all_done(bufferSize);\n  }\n  return *(undefined4 *)(data + 1);\n}\n\n",
            "called": [
                "printf",
                "bfd_openw",
                "bfd_get_error",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "dcgettext",
                "bfd_set_format",
                "bfd_close_all_done",
                "FUN_0011a110",
                "FUN_001053d5",
                "xrealloc",
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_data_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_001199d0",
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "copy_file_00115a90",
                "param_1": "src_file_descriptor",
                "param_2": "dest_file_path",
                "param_3": "mode_pointer",
                "iVar1": "original_errno",
                "__fd": "dest_file_descriptor",
                "iVar2": "bytes_read",
                "_Var3": "seek_position",
                "uVar4": "return_value",
                "sVar5": "bytes_written",
                "piVar6": "errno_pointer",
                "local_2038": "buffer"
            },
            "code": "\nulong copyFile_00115a90(int src_file_descriptor,char *dest_file_path,long mode_pointer)\n\n{\n  int original_errno;\n  int dest_file_descriptor;\n  int bytes_read;\n  __off_t seek_position;\n  ulong return_value;\n  size_t bytes_written;\n  int *errno_pointer;\n  undefined buffer [8200];\n  \n  if ((-1 < src_file_descriptor) && (seek_position = lseek(src_file_descriptor,0,0), seek_position == 0)) {\n    dest_file_descriptor = open(dest_file_path,0x201);\n    if (dest_file_descriptor < 0) {\n      return_value = close_and_set_errno_00108237();\n      return return_value;\n    }\n    do {\n      return_value = read(src_file_descriptor,buffer,0x2000);\n      bytes_read = (int)return_value;\n      if (bytes_read < 1) {\n        errno_pointer = __errno_location();\n        original_errno = *errno_pointer;\n        fchmod(dest_file_descriptor,*(__mode_t *)(mode_pointer + 0x18));\n        close(src_file_descriptor);\n        close(dest_file_descriptor);\n        if (bytes_read != 0) {\n          *errno_pointer = original_errno;\n          return 0xffffffff;\n        }\n        return return_value & 0xffffffff;\n      }\n      bytes_written = write(dest_file_descriptor,buffer,(long)bytes_read);\n    } while (bytes_written == (long)bytes_read);\n    errno_pointer = __errno_location();\n    bytes_read = *errno_pointer;\n    close(src_file_descriptor);\n    close(dest_file_descriptor);\n    *errno_pointer = bytes_read;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "read",
                "__errno_location",
                "FUN_00108237",
                "fchmod",
                "write",
                "open",
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_and_print_error_00108200",
                "piVar1": "errorLocation",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "shouldSetFileTime",
                "unaff_R13": "fileTime",
                "auVar3": "returnValue",
                "uVar2": "errorMessage",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyFileAndPrintError_00108200(void)\n\n{\n  int *errorLocation;\n  undefined8 errorMessage;\n  char *fileToCopy;\n  char shouldSetFileTime;\n  ulong fileTime;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errorLocation = __errno_location();\n  strerror(*errorLocation);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00119ed0(errorMessage);\n  unlink(fileToCopy);\n  if (shouldSetFileTime != '\\0') {\n    set_file_time_0011a350();\n  }\n  returnValue._0_8_ = fileTime & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00119ed0",
                "strerror",
                "__errno_location",
                "dcgettext",
                "FUN_0011a350",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 331408,
    "layers": [
        [
            "FUN_0010ab4d",
            "FUN_0010be88",
            "FUN_00119e70",
            "FUN_00108e76",
            "FUN_0010bb52",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_00114cf0",
            "FUN_001054af",
            "FUN_001088ae",
            "FUN_00108b3e",
            "FUN_00109c2e",
            "FUN_001052a2",
            "FUN_0011a1b0",
            "FUN_0010911f",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00113f20",
            "FUN_00109022",
            "FUN_00109b52",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_00104943",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00114e00",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_00108fe8",
            "FUN_001129f4",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_001082c3",
            "FUN_00114d50",
            "FUN_00108800",
            "FUN_00104d1c",
            "FUN_0010540e",
            "FUN_001081e9",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_00104c36",
            "FUN_00119970",
            "FUN_0010870e",
            "FUN_00113fb0",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0011a110",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_0011a250",
            "FUN_0010875d",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62"
        ],
        [
            "FUN_00113dfe",
            "FUN_0010c218",
            "FUN_0010aa53",
            "FUN_0010bc80",
            "FUN_0010a181",
            "FUN_00113bfa",
            "FUN_00109e76",
            "FUN_00112996",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_001053d5",
            "FUN_0010c05d",
            "FUN_00113e17",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_00113e23",
            "FUN_0010a2b9",
            "FUN_00119ed0",
            "FUN_0011a0e0",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010abdd",
            "FUN_00113c43",
            "FUN_0010a94e",
            "FUN_0010a0e9",
            "FUN_00113d6e",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_00113b71",
            "FUN_00109cf4",
            "FUN_0010a77a",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00113da9",
            "FUN_0010a69a",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_00113cb9",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_00113ce0",
            "FUN_00119f70",
            "FUN_00115a90"
        ],
        [
            "FUN_0010ba08",
            "FUN_00108466",
            "FUN_001199d0",
            "FUN_0010c139",
            "FUN_00109d3e",
            "FUN_00104cc1",
            "FUN_00108375",
            "FUN_0010afd5",
            "FUN_001053b5",
            "FUN_00109d5c",
            "FUN_0010da0b",
            "FUN_00108d9a",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00109d97",
            "FUN_0010add5",
            "FUN_0011a2e0",
            "FUN_00104ad6",
            "FUN_0010adf2",
            "FUN_00113f50",
            "FUN_00104966",
            "FUN_0010808f",
            "FUN_00105828",
            "FUN_0010bba1",
            "FUN_00115f30",
            "FUN_001082b3",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010c2d2",
            "FUN_001083de",
            "FUN_0010a83e",
            "FUN_00104d25",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00119940",
            "FUN_00109dfe",
            "FUN_00109ab1",
            "FUN_0010543c",
            "FUN_00114c80",
            "FUN_0010882c",
            "FUN_0011a350",
            "FUN_0010e2f0",
            "FUN_00114190",
            "FUN_00114dc7"
        ],
        [
            "FUN_0011173a",
            "thunk_FUN_0010e439",
            "FUN_0010e439",
            "FUN_0010a083",
            "FUN_0010e453",
            "FUN_0010ed2c",
            "FUN_0010e9a0",
            "FUN_00108179",
            "FUN_0010e8a9",
            "FUN_0010829e",
            "FUN_0010ec73",
            "FUN_00115970",
            "FUN_0010a0a0",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_0010a0d3",
            "FUN_0010a0bd",
            "FUN_00114690",
            "FUN_00112a33",
            "FUN_00114460",
            "FUN_00114c20",
            "FUN_0010b948",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_0010a424",
            "FUN_0010ebb0",
            "FUN_0010e918",
            "FUN_0010c892",
            "FUN_0010e842",
            "FUN_0010eafe",
            "FUN_00104ea2",
            "FUN_00108200"
        ],
        [
            "FUN_00112502",
            "FUN_00108072",
            "FUN_00115b70"
        ],
        [
            "FUN_001159d0"
        ],
        [
            "FUN_00115530",
            "FUN_00115f50"
        ],
        [
            "FUN_00115dc0",
            "FUN_00116110"
        ],
        [
            "FUN_00112b6e"
        ],
        [
            "FUN_00113b1e"
        ],
        [
            "FUN_0010922b"
        ],
        [
            "FUN_0010c7a0"
        ],
        [
            "FUN_00112c1f"
        ],
        [
            "FUN_0010d21c",
            "FUN_0010d7d4",
            "FUN_00113e5e"
        ],
        [
            "FUN_0010d559",
            "FUN_0010d882"
        ],
        [
            "FUN_0010c95e"
        ],
        [
            "FUN_0010e07c"
        ],
        [
            "FUN_0010dac0"
        ],
        [
            "FUN_0011378f"
        ],
        [
            "FUN_0010554f"
        ],
        [
            "FUN_0010847a"
        ],
        [
            "FUN_001135a5"
        ],
        [
            "FUN_00113a4d"
        ],
        [
            "FUN_0010b6ea"
        ],
        [
            "FUN_0010b0fa"
        ],
        [
            "FUN_00116490"
        ],
        [
            "FUN_001086af"
        ],
        [
            "FUN_001163d0"
        ],
        [
            "FUN_0010551d"
        ]
    ],
    "locked_functions": []
}