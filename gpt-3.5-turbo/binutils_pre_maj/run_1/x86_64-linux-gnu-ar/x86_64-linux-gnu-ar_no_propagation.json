{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_address_00102cd9",
                "in_EAX": "eax_value",
                "iVar1": "comparison_result",
                "unaff_RBX": "current_address",
                "param_7": "target_address"
            },
            "code": "\nlong * findMatchingAddress_00102cd9(void)\n\n{\n  int eax_value;\n  int comparison_result;\n  long *current_address;\n  undefined8 target_address;\n  \n  target_address = DAT_0010d638;\n  if (eax_value == 3) {\n    for (; *current_address != 0; current_address = (long *)(*current_address + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*current_address != (undefined8 *)0x0; current_address = (long *)(*current_address + 0xf0)) {\n      comparison_result = filename_cmp(*(undefined8 *)*current_address,target_address);\n      if (comparison_result == 0) {\n        if (eax_value != 2) {\n          return current_address;\n        }\n        return (long *)(*current_address + 0xf0);\n      }\n    }\n  }\n  return current_address;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_address_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "FUN_00105cf0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105830",
                "FUN_00102e6f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_details_001079c0",
                "param_1": "outputFile",
                "param_2": "fileDetails",
                "param_3": "displayDetails",
                "param_4": "displayAddress",
                "iVar1": "errorStatus",
                "ppcVar2": "filePtr",
                "pcVar3": "timeString",
                "uVar4": "fileType",
                "local_100": "currentTime",
                "uStack_f3": "filePermissions",
                "cStack_f2": "isReadable",
                "cStack_f1": "isWritable",
                "cStack_f0": "isExecutable",
                "cStack_ef": "isReadableByGroup",
                "cStack_ee": "isWritableByGroup",
                "cStack_ed": "isExecutableByGroup",
                "cStack_ec": "isReadableByOthers",
                "cStack_eb": "isWritableByOthers",
                "cStack_ea": "isExecutableByOthers",
                "local_e8": "formattedTime",
                "local_b8": "buffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "fileInode",
                "uStack_98": "fileDevice",
                "uStack_88": "fileLinks",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileDetails_001079c0(FILE *outputFile,char **fileDetails,char displayDetails,char displayAddress)\n\n{\n  int errorStatus;\n  char **filePtr;\n  char *timeString;\n  uint fileType;\n  time_t currentTime;\n  undefined filePermissions;\n  char isReadable;\n  char isWritable;\n  char isExecutable;\n  char isReadableByGroup;\n  char isWritableByGroup;\n  char isExecutableByGroup;\n  char isReadableByOthers;\n  char isWritableByOthers;\n  char isExecutableByOthers;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined buffer [24];\n  uint fileSize;\n  uint fileInode;\n  uint fileDevice;\n  undefined8 fileLinks;\n  time_t fileModificationTime;\n  \n  if (displayDetails != '\\0') {\n    filePtr = (char **)fileDetails[0x1d];\n    if ((char **)fileDetails[0x1d] == (char **)0x0) {\n      filePtr = fileDetails;\n    }\n    errorStatus = (**(code **)(filePtr[1] + 0x1e8))(fileDetails,buffer);\n    if (errorStatus == 0) {\n      currentTime = fileModificationTime;\n      timeString = ctime(&currentTime);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      fileType = fileSize & 0xf000;\n      if (fileType == 0x4000) {\n        filePermissions = 100;\n      }\n      else if (fileType == 0xa000) {\n        filePermissions = 0x6c;\n      }\n      else if (fileType == 0x6000) {\n        filePermissions = 0x62;\n      }\n      else if (fileType == 0x2000) {\n        filePermissions = 99;\n      }\n      else if (fileType == 0xc000) {\n        filePermissions = 0x73;\n      }\n      else {\n        filePermissions = 0x70;\n        if (fileType != 0x1000) {\n          filePermissions = 0x2d;\n        }\n      }\n      isReadable = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      isWritable = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      isExecutable = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      isReadableByGroup = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      isWritableByGroup = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      isExecutableByGroup = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      isReadableByOthers = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      isWritableByOthers = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      isExecutableByOthers = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (isExecutable == 'x') {\n          isExecutable = 's';\n        }\n        else {\n          isExecutable = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (isExecutableByGroup == 'x') {\n          isExecutableByGroup = 's';\n        }\n        else {\n          isExecutableByGroup = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (isExecutableByOthers == 'x') {\n          isExecutableByOthers = 't';\n        }\n        else {\n          isExecutableByOthers = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&isReadable,(ulong)fileInode,(ulong)fileDevice,fileLinks,\n              formattedTime,(ulong)fileSize);\n    }\n  }\n  fputs(*fileDetails,outputFile);\n  if (displayAddress != '\\0') {\n    if ((*(byte *)((long)fileDetails + 0x49) & 0x10) == 0) {\n      if (fileDetails[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileDetails[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00102d8c",
                "ctime",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_details_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_00105a68",
                "pcVar1": "directoryPath",
                "pFVar2": "filePointer",
                "sVar3": "pathLength"
            },
            "code": "\nvoid processFile_00105a68(void)\n\n{\n  char *directoryPath;\n  FILE *filePointer;\n  size_t pathLength;\n  \n  directoryPath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    pathLength = strlen(DAT_0010d5e8);\n    if (pathLength != 0) {\n      if (directoryPath[pathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directoryPath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directoryPath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_00102e57",
                "concat",
                "strlen",
                "perror",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_entries_001032a8",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryList",
                "param_4": "result",
                "lVar1": "nextEntry",
                "uVar2": "entryFilename",
                "bVar3": "entryFound",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessageFormat",
                "plVar6": "nextEntryLink",
                "lVar7": "currentEntryLink",
                "plVar8": "previousEntryLink"
            },
            "code": "\n\n\nundefined8 processArchiveEntries_001032a8(long *archive,code *callback,undefined8 *entryList,undefined8 result)\n\n{\n  long nextEntry;\n  undefined8 entryFilename;\n  bool entryFound;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessageFormat;\n  long *nextEntryLink;\n  long currentEntryLink;\n  long *previousEntryLink;\n  \n  currentEntryLink = archive[0x1e];\n  if (entryList == (undefined8 *)0x0) {\n    while (currentEntryLink != 0) {\n      nextEntry = *(long *)(currentEntryLink + 0xf0);\n      (*callback)(currentEntryLink,0);\n      currentEntryLink = nextEntry;\n    }\n  }\n  else {\n    do {\n      entryFound = false;\n      currentEntry = (long *)archive[0x1e];\n      previousEntryLink = archive;\n      while (nextEntryLink = currentEntry, nextEntryLink != (long *)0x0) {\n        if (*nextEntryLink != 0) {\n          comparisonResult = filename_cmp(*entryList);\n          if (comparisonResult == 0) {\n            entryFound = true;\n            (*callback)(nextEntryLink,previousEntryLink);\n          }\n        }\n        previousEntryLink = nextEntryLink;\n        currentEntry = (long *)nextEntryLink[0x1e];\n      }\n      if (!entryFound) {\n        entryFilename = *entryList;\n        errorMessageFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessageFormat,entryFilename);\n      }\n      entryList = (undefined8 *)entryList[1];\n    } while (entryList != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_0010285f",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "entryName",
                "plVar5": "entry",
                "unaff_RBP": "callback",
                "unaff_R12": "archive",
                "unaff_R13D": "entryCount",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "entryIndex"
            },
            "code": "\n\n\nvoid printArchiveEntry_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 entryName;\n  long *entry;\n  code *callback;\n  long archive;\n  int entryCount;\n  undefined8 *entryNames;\n  int entryIndex;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  entryCount = entryCount + -1;\n  if (entryCount == 0) {\n    return;\n  }\n  entry = *(long **)(archive + 0xf0);\n  entryIndex = 0;\n  do {\n    if (entry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)entry + 0xac) == 0) {\n      currentEntry = *entry;\n      if (currentEntry == 0) {\n        nextEntry = (long *)entry[0x1d];\n        if ((long *)entry[0x1d] == (long *)0x0) {\n          nextEntry = entry;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(entry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archive + 0x49) & 0x10) == 0) || (currentEntry = FUN_00105830(), currentEntry != 0))\n      {\n        entryName = FUN_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,currentEntry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (entryIndex = entryIndex + 1,\n            entryIndex == _DAT_0010d630)))) break;\n      }\n    }\n    entry = (long *)entry[0x1e];\n  } while( true );\n  (*callback)();\n  *(undefined4 *)((long)entry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_00102f96",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMsg"
            },
            "code": "\n\n\nvoid printError_00102f96(void)\n\n{\n  undefined8 errorMsg;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMsg,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_instructions_0010342d",
                "param_1": "outputMode",
                "uVar1": "version",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageInstructions_0010342d(uint outputMode)\n\n{\n  undefined8 version;\n  char *message;\n  FILE *outputStream;\n  \n  message = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputMode != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,message,DAT_0010d660);\n  version = DAT_0010d660;\n  message = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,message,version);\n  message = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  FUN_0010336b(outputStream);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (outputMode != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputMode ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010336b",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_instructions_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_and_exit_0010394a",
                "param_1": "isVerbose",
                "uVar1": "programName",
                "pcVar2": "localizationString",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageAndExit_0010394a(uint isVerbose)\n\n{\n  undefined8 programName;\n  char *localizationString;\n  FILE *outputStream;\n  \n  programName = DAT_0010d660;\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  localizationString = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,localizationString,programName);\n  localizationString = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,localizationString);\n  localizationString = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,localizationString);\n  localizationString = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,localizationString);\n  localizationString = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,localizationString);\n  localizationString = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,localizationString);\n  FUN_0010266f(DAT_0010d660,outputStream);\n  if (isVerbose != 0) {\n    localizationString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizationString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_0010266f",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_and_exit_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "initialize_function_00107920",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "local_d8": "count",
                "local_d4": "size",
                "local_d0": "ptr_data",
                "local_c8": "local_buffer",
                "local_b8": "temp_buffer",
                "local_b0": "temp_param2",
                "local_a8": "temp_param3",
                "local_a0": "temp_param4",
                "local_98": "temp_param5",
                "local_90": "temp_param6",
                "local_88": "arg1",
                "local_78": "arg2",
                "local_68": "arg3",
                "local_58": "arg4",
                "local_48": "arg5",
                "local_38": "arg6",
                "local_28": "arg7",
                "local_18": "arg8"
            },
            "code": "\nvoid initializeFunction_00107920(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 count;\n  undefined4 size;\n  undefined *ptr_data;\n  undefined *local_buffer;\n  undefined temp_buffer [8];\n  undefined8 temp_param2;\n  undefined8 temp_param3;\n  undefined8 temp_param4;\n  undefined8 temp_param5;\n  undefined8 temp_param6;\n  undefined4 arg1;\n  undefined4 arg2;\n  undefined4 arg3;\n  undefined4 arg4;\n  undefined4 arg5;\n  undefined4 arg6;\n  undefined4 arg7;\n  undefined4 arg8;\n  \n  if (flag != '\\0') {\n    arg1 = input1;\n    arg2 = input2;\n    arg3 = input3;\n    arg4 = input4;\n    arg5 = input5;\n    arg6 = input6;\n    arg7 = input7;\n    arg8 = input8;\n  }\n  ptr_data = &stack0x00000008;\n  count = 8;\n  local_buffer = temp_buffer;\n  size = 0x30;\n  temp_param2 = param2;\n  temp_param3 = param3;\n  temp_param4 = param4;\n  temp_param5 = param5;\n  temp_param6 = param6;\n  FUN_001078c0(param1,&count);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "initialize_function_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "check_if_valid_00105bb0"
            },
            "code": "\nundefined8 check_if_valid_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "check_if_valid_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "clear_memory_00107640"
            },
            "code": "\nundefined8 clearMemory_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "clear_memory_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_file_path_00102e6f",
                "pcVar1": "originalPath",
                "in_RAX": "filePath",
                "uVar2": "baseName",
                "uVar3": "errorMessage",
                "pFVar4": "filePtr",
                "sVar5": "pathLength",
                "pcVar6": "currentChar"
            },
            "code": "\nvoid extractFilePath_00102e6f(void)\n\n{\n  char *originalPath;\n  char *filePath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t pathLength;\n  char *currentChar;\n  \n  originalPath = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n          if (originalPath[pathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(originalPath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(originalPath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePtr = fopen(DAT_0010d618,\"w\");\n        if (filePtr == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentChar = filePath;\n      if ((*filePath == '.') && (currentChar = filePath + 1, filePath[1] == '.')) {\n        currentChar = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          baseName = lbasename();\n          originalPath = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          FUN_00107920(errorMessage,originalPath,baseName);\n          DAT_0010d618 = (char *)baseName;\n          FUN_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00107920",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_file_path_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_status_message_00107890",
                "param_1": "message",
                "_stdout": "output"
            },
            "code": "\n\n\nvoid printStatusMessage_00107890(undefined8 message)\n\n{\n  FUN_001079c0(output,message,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_status_message_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001075e0",
                "FUN_001033b0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "dataBuffer",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *dataBuffer;\n  undefined returnValue [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)FUN_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dataBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dataBuffer;\n  } while (dataBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  FUN_001031cf(buffer,param1);\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = buffer;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001031cf",
                "malloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_and_print_message_00103172",
                "param_1": "message_ptr",
                "param_2": "output_ptr",
                "param_3": "flag",
                "param_4": "value",
                "uVar1": "original_message",
                "auVar2": "updated_message",
                "printf": "print_message"
            },
            "code": "\nundefined  [16]\nupdate_and_print_message_00103172(undefined8 *message_ptr,undefined8 *output_ptr,char flag,undefined8 value)\n\n{\n  undefined8 original_message;\n  undefined updated_message [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*output_ptr);\n  }\n  original_message = *message_ptr;\n  output_ptr[0x1e] = original_message;\n  updated_message._1_7_ = (undefined7)((ulong)original_message >> 8);\n  updated_message[0] = 1;\n  *message_ptr = output_ptr;\n  updated_message._8_8_ = value;\n  return updated_message;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_and_print_message_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_matching_entry_00105870",
                "param_1": "entryList",
                "param_2": "entryCount",
                "param_3": "searchValue",
                "uVar2": "defaultValue",
                "iVar3": "comparisonType",
                "iVar1": "comparisonResult"
            },
            "code": "\nlong * findMatchingEntry_00105870(long *entryList,int entryCount,undefined8 searchValue)\n\n{\n  int comparisonResult;\n  undefined8 defaultValue;\n  int comparisonType;\n  \n  defaultValue = DAT_0010d638;\n  comparisonType = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultValue = searchValue;\n    comparisonType = entryCount;\n  }\n  if (comparisonType == 3) {\n    for (; *entryList != 0; entryList = (long *)(*entryList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryList != (undefined8 *)0x0; entryList = (long *)(*entryList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entryList,defaultValue);\n      if (comparisonResult == 0) {\n        if (comparisonType != 2) {\n          return entryList;\n        }\n        return (long *)(*entryList + 0xf0);\n      }\n    }\n  }\n  return entryList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_binary_data_001030ed",
                "puVar1": "binaryDataPtr"
            },
            "code": "\nvoid extractBinaryData_001030ed(void)\n\n{\n  undefined8 *binaryDataPtr;\n  \n  binaryDataPtr = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)binaryDataPtr + 0x1c);\n  DAT_0010d5b0 = (undefined *)binaryDataPtr[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *binaryDataPtr;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_001031cf",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_binary_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_unlink_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "targetFilePath",
                "param_3": "copyOptions",
                "param_4": "errorCode",
                "uVar1": "copyResult",
                "piVar2": "errorLocation",
                "pcVar3": "errorString",
                "uVar4": "localizedErrorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndUnlinkFile_00105bc0(char *sourceFilePath,char *targetFilePath,undefined4 copyOptions,undefined8 errorCode)\n\n{\n  uint copyResult;\n  int *errorLocation;\n  char *errorString;\n  undefined8 localizedErrorMessage;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (targetFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = FUN_00105c00(copyOptions);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errorLocation = __errno_location();\n      errorString = strerror(*errorLocation);\n      localizedErrorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00107920(localizedErrorMessage,targetFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = errorCode;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_execute_00107650",
                "param_1": "input",
                "uVar1": "returnValue",
                "lVar2": "result"
            },
            "code": "\nundefined8 checkAndExecute_00107650(undefined8 input)\n\n{\n  undefined8 returnValue;\n  long result;\n  \n  result = FUN_001052a0();\n  if (result < 1) {\n    returnValue = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    result = FUN_00105300(input,0);\n    if (result == 0) {\n                    \n      xexit(1);\n    }\n    FUN_001058b0(result);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_001052a0",
                "FUN_00105300",
                "xexit",
                "FUN_001058b0",
                "FUN_0010284b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_execute_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_reason_00102f1e",
                "unaff_RBP": "errorCode",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "uVar2": "localizedError",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16] copyFileReason_00102f1e(void)\n\n{\n  int *errnoLocation;\n  undefined8 localizedError;\n  ulong errorCode;\n  char *filePath;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  localizedError = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00107920(localizedError);\n  unlink(filePath);\n  returnValue._0_8_ = errorCode & 0xffffffff;\n  returnValue._8_8_ = returnAddress;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_reason_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_error_00102fd7",
                "piVar1": "errorPointer",
                "uVar2": "errorString",
                "__errno_location": "getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedErrorMessage"
            },
            "code": "\nvoid printTimeError_00102fd7(void)\n\n{\n  int *errorPointer;\n  undefined8 errorString;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00107920(errorString);\n  return;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_time_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_00103ba8",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid checkAndPrintAR_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00102cd9",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_001025a0",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_00102f1e",
                "FUN_0010285f",
                "FUN_001052a0",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102fd7",
                "FUN_00102e6f",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "initialize_data_00103ddc",
                "param_1": "data"
            },
            "code": "\nvoid initializeData_00103ddc(undefined8 data)\n\n{\n  FUN_001079c0(DAT_0010d578,data,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_data_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_formatted_001078c0",
                "param_1": "format_string",
                "param_2": "arg_list",
                "_stdout": "standard_output",
                "_stderr": "standard_error"
            },
            "code": "\n\n\nvoid print_formatted_001078c0(char *format_string,__gnuc_va_list arg_list)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",DAT_0010d660);\n  vfprintf(standard_error,format_string,arg_list);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "putc",
                "fflush",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107920",
                "FUN_00107690"
            ],
            "imported": false,
            "current_name": "print_formatted_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_001028ed",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "message"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 version)\n\n{\n  char *message;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  message = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(message);\n  message = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(message);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archived_entries_00105480",
                "param_1": "archive_data",
                "param_2": "entry_processor",
                "param_3": "filenames",
                "param_4": "num_entries",
                "__format": "format_string",
                "lVar2": "current_entry",
                "plVar3": "next_entry",
                "uVar4": "result",
                "plVar5": "entry_ptr",
                "local_cc": "processed_count",
                "local_c8": "temp_buffer"
            },
            "code": "\n\n\nvoid process_archived_entries_00105480(long archive_data,code *entry_processor,undefined8 *filenames,int num_entries)\n\n{\n  int iVar1;\n  char *format_string;\n  long current_entry;\n  long *next_entry;\n  undefined8 result;\n  long *entry_ptr;\n  int processed_count;\n  undefined temp_buffer [152];\n  \n  current_entry = *(long *)(archive_data + 0xf0);\n  if (num_entries == 0) {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      (*entry_processor)(current_entry);\n    }\n  }\n  else {\n    for (; current_entry != 0; current_entry = *(long *)(current_entry + 0xf0)) {\n      *(undefined4 *)(current_entry + 0xac) = 0;\n    }\n    do {\n      entry_ptr = *(long **)(archive_data + 0xf0);\n      processed_count = 0;\n      for (; entry_ptr != (long *)0x0; entry_ptr = (long *)entry_ptr[0x1e]) {\n        if (*(int *)((long)entry_ptr + 0xac) == 0) {\n          current_entry = *entry_ptr;\n          if (current_entry == 0) {\n            next_entry = (long *)entry_ptr[0x1d];\n            if ((long *)entry_ptr[0x1d] == (long *)0x0) {\n              next_entry = entry_ptr;\n            }\n            (**(code **)(next_entry[1] + 0x1e8))(entry_ptr,temp_buffer);\n          }\n          else if (((*(byte *)(archive_data + 0x49) & 0x10) == 0) ||\n                  (current_entry = FUN_00105830(current_entry,archive_data), current_entry != 0)) {\n            result = FUN_00105830(*filenames,archive_data);\n            iVar1 = filename_cmp(result,current_entry);\n            if ((iVar1 == 0) &&\n               ((DAT_0010d634 == '\\0' || (processed_count = processed_count + 1, processed_count == _DAT_0010d630)))) {\n              (*entry_processor)();\n              *(undefined4 *)((long)entry_ptr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      result = *filenames;\n      format_string = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,format_string,result);\nLAB_0010553e:\n      filenames = filenames + 1;\n      num_entries = num_entries + -1;\n    } while (num_entries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archived_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "updatedLineNumber"
            },
            "code": "\nvoid printSyntaxError_001031a5(void)\n\n{\n  uint updatedLineNumber;\n  char *errorMessageFormat;\n  \n  updatedLineNumber = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)updatedLineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d2f",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_0010266f",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102ba1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_0010315d",
                "FUN_0010342d",
                "FUN_0010394a",
                "FUN_00105a68",
                "FUN_00102d2f",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001058b0",
                "FUN_00102f55",
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001052a0",
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "expand_buffer_stack_00103df9",
                "in_RCX": "returnValue",
                "__size": "bufferSize",
                "lVar1": "counter",
                "lVar2": "newSize",
                "puVar3": "bufferPointer",
                "bVar4": "byteValue"
            },
            "code": "\nundefined8 expandBufferStack_00103df9(void)\n\n{\n  size_t bufferSize;\n  undefined8 returnValue;\n  long counter;\n  long newSize;\n  undefined4 *bufferPointer;\n  byte byteValue;\n  \n  byteValue = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return returnValue;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return returnValue;\n    }\n    newSize = DAT_0010d580 + 8;\n    bufferSize = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,bufferSize);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPointer = (undefined4 *)((long)DAT_0010d5a8 + (bufferSize - 0x40));\n      DAT_0010d580 = newSize;\n      for (counter = 0x10; counter != 0; counter = counter + -1) {\n        *bufferPointer = 0;\n        bufferPointer = bufferPointer + (ulong)byteValue * -2 + 1;\n      }\n      return returnValue;\n    }\n  }\n  FUN_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "calloc",
                "realloc",
                "FUN_001033b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "expand_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_contents_00103a78",
                "param_1": "inputParameters",
                "__ptr": "buffer",
                "puVar2": "archivePtr",
                "iVar1": "result",
                "uVar3": "bytesRead",
                "uVar4": "errorString",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "remainingBytes",
                "pcVar7": "errorMessage",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "targetSize"
            },
            "code": "\n\n\nvoid extractAndPrintArchiveContents_00103a78(undefined8 *inputParameters)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archivePtr;\n  ulong bytesRead;\n  undefined8 errorString;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t remainingBytes;\n  char *errorMessage;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong targetSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archivePtr = (undefined8 *)inputParameters[0x1d];\n  if ((undefined8 *)inputParameters[0x1d] == (undefined8 *)0x0) {\n    archivePtr = inputParameters;\n  }\n  result = (**(code **)(archivePtr[1] + 0x1e8))(inputParameters,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*inputParameters);\n    }\n    totalBytesRead = 0;\n    bfd_seek(inputParameters,0,0);\n    goto LAB_00103afd;\n  }\n  inputParameters = (undefined8 *)*inputParameters;\n  errorMessage = \"internal stat error on %s\";\n  do {\n    errorString = dcgettext(0,errorMessage,5);\n    FUN_00107690(errorString,inputParameters);\n    targetSize = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,remainingBytes,_stdout);\n      if (bytesWritten != remainingBytes) {\n        errnoPtr = __errno_location();\n        errorMessage = strerror(*errnoPtr);\n        FUN_00107690(\"stdout: %s\",errorMessage);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (targetSize <= totalBytesRead) goto LAB_00103b91;\n      remainingBytes = targetSize - totalBytesRead;\n      if (0x2000 < remainingBytes) {\n        remainingBytes = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,remainingBytes,inputParameters);\n    } while (remainingBytes == bytesRead);\n    errorMessage = \"%s is not a valid archive\";\n    inputParameters = *(undefined8 **)inputParameters[0x1d];\n    archiveSize = targetSize;\n  } while( true );\n}\n\n",
            "called": [
                "bfd_bread",
                "free",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "printf",
                "strerror",
                "dcgettext",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_contents_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010394a",
                "FUN_0010336b",
                "FUN_0010266f",
                "FUN_00102f96",
                "FUN_001033b0",
                "FUN_0010285f",
                "FUN_0010342d",
                "FUN_00103c60",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_info_001058b0",
                "param_1": "param_array",
                "cVar1": "temp_char",
                "uVar2": "temp_unsigned",
                "iVar3": "temp_int",
                "uVar4": "temp_ptr",
                "__format": "format_string",
                "__ptr": "allocated_ptr",
                "__stream": "file_stream",
                "ppcVar5": "file_content_ptr",
                "uStack0000000000000020": "temp_stack_unsigned",
                "in_stack_00000028": "temp_stack_int",
                "in_stack_00000038": "temp_stack_ptr",
                "local_3c": "temp_stack_array",
                "uStack_33": "stack_char_1",
                "cStack_32": "stack_char_2",
                "cStack_31": "stack_char_3"
            },
            "code": "\n\n\nvoid write_archive_info_001058b0(undefined8 *param_array)\n\n{\n  char temp_char;\n  uint temp_unsigned;\n  int temp_int;\n  undefined8 temp_ptr;\n  char *format_string;\n  void *allocated_ptr;\n  FILE *file_stream;\n  char **file_content_ptr;\n  uint temp_stack_unsigned;\n  uint temp_stack_int;\n  undefined8 temp_stack_ptr;\n  int temp_stack_array [2];\n  undefined stack_char_1;\n  char stack_char_2;\n  char stack_char_3;\n  \n  temp_ptr = param_array[0x1e];\n  temp_stack_array[0] = -1;\n  allocated_ptr = (void *)xstrdup(*param_array);\n  file_stream = (FILE *)FUN_001057a0(allocated_ptr,temp_stack_array);\n  temp_int = temp_stack_array[0];\n  if (file_stream != (FILE *)0x0) {\n    DAT_0010d618 = file_stream;\n    file_content_ptr = (char **)bfd_fdopenw(file_stream,*(undefined8 *)param_array[1],temp_stack_array[0]);\n    if (file_content_ptr != (char **)0x0) {\n      DAT_0010d5e0 = file_content_ptr;\n      bfd_set_format(file_content_ptr,2);\n      temp_unsigned = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)file_content_ptr + 0x49) & 0xfffffff7;\n      *(char *)((long)file_content_ptr + 0x49) = (char)temp_unsigned;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)file_content_ptr + 0x44) = *(uint *)((long)file_content_ptr + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)file_content_ptr + 0x44) = *(uint *)((long)file_content_ptr + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)param_array + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)file_content_ptr + 0x49) = (byte)temp_unsigned | 0x10;\n        }\n        temp_char = bfd_set_archive_head(file_content_ptr,temp_ptr);\n        if (temp_char != '\\0') break;\n        temp_unsigned = FUN_00107c10(allocated_ptr);\nLAB_00102d37:\n        *(uint *)((long)file_content_ptr + 0x44) = *(uint *)((long)file_content_ptr + 0x44) | 0x100000;\n      }\n      temp_int = dup(temp_int);\n      temp_char = bfd_close(file_content_ptr);\n      if (temp_char == '\\0') {\n        FUN_00107c10(allocated_ptr);\n        format_string = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,format_string);\n        temp_unsigned = temp_stack_unsigned & 0xf000;\n        if (temp_unsigned == 0x4000) {\n          stack_char_1 = 100;\n        }\n        else if (temp_unsigned == 0xa000) {\n          stack_char_1 = 0x6c;\n        }\n        else if (temp_unsigned == 0x6000) {\n          stack_char_1 = 0x62;\n        }\n        else if (temp_unsigned == 0x2000) {\n          stack_char_1 = 99;\n        }\n        else if (temp_unsigned == 0xc000) {\n          stack_char_1 = 0x73;\n        }\n        else {\n          stack_char_1 = 0x70;\n          if (temp_unsigned != 0x1000) {\n            stack_char_1 = 0x2d;\n          }\n        }\n        stack_char_2 = (-((_temp_stack_unsigned & 0x100) == 0) & 0xbbU) + 0x72;\n        stack_char_3 = (-((_temp_stack_unsigned & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file_stream,\"%s %ld/%ld %6lu %s \",&stack_char_2,_temp_stack_unsigned >> 0x20,\n                (ulong)temp_stack_int,temp_stack_ptr,&stack0xffffffffffffffd8,\n                _temp_stack_unsigned & 0xffffffff);\n        fputs(*file_content_ptr,file_stream);\n        if ((char)param_array != '\\0') {\n          if ((*(byte *)((long)file_content_ptr + 0x49) & 0x10) == 0) {\n            if (file_content_ptr[0xb] != (char *)0x0) {\n              fprintf(file_stream,\" 0x%lx\");\n            }\n          }\n          else if (file_content_ptr[0xc] != (char *)0x0) {\n            fprintf(file_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,file_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(param_array);\n      temp_int = FUN_00105bc0(file_stream,allocated_ptr,temp_int);\n      if (temp_int == 0) {\n        free(allocated_ptr);\n        free(file_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(temp_int);\n    FUN_00107c10(allocated_ptr);\n  }\n  temp_ptr = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  FUN_00107c10(temp_ptr);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "bfd_set_format",
                "close",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "FUN_001057a0",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "write_archive_info_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary",
                "bfd_cache_close",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_001078c0",
                "FUN_00103ba8",
                "FUN_00102f96"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "errorMsgTranslation",
                "local_38": "tv",
                "uStack_34": "stackVar1",
                "uStack_30": "stackVar2",
                "uStack_2c": "stackVar3",
                "local_28": "stackVar4",
                "uStack_24": "stackVar5",
                "uStack_20": "stackVar6",
                "uStack_1c": "stackVar7"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorMessage;\n  undefined8 errorMsgTranslation;\n  undefined4 tv;\n  undefined4 stackVar1;\n  undefined4 stackVar2;\n  undefined4 stackVar3;\n  undefined4 stackVar4;\n  undefined4 stackVar5;\n  undefined4 stackVar6;\n  undefined4 stackVar7;\n  \n  stackVar4 = *(undefined4 *)(fileInfo + 0x58);\n  stackVar5 = *(undefined4 *)(fileInfo + 0x5c);\n  stackVar6 = *(undefined4 *)(fileInfo + 0x60);\n  stackVar7 = *(undefined4 *)(fileInfo + 100);\n  tv = *(undefined4 *)(fileInfo + 0x48);\n  stackVar1 = *(undefined4 *)(fileInfo + 0x4c);\n  stackVar2 = *(undefined4 *)(fileInfo + 0x50);\n  stackVar3 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&tv,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    errorMsgTranslation = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00107920(errorMsgTranslation,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "open_output_file_00105a20",
                "param_1": "output_path",
                "pcVar1": "default_path",
                "pcVar2": "current_path",
                "uVar3": "base_path",
                "uVar4": "error_msg",
                "pFVar5": "file_ptr",
                "sVar6": "path_length"
            },
            "code": "\nvoid open_output_file_00105a20(char *output_path)\n\n{\n  char *default_path;\n  char *current_path;\n  undefined8 base_path;\n  undefined8 error_msg;\n  FILE *file_ptr;\n  size_t path_length;\n  \n  default_path = DAT_0010d5e8;\n  DAT_0010d618 = output_path;\n  if (*output_path == '/') {\nLAB_00102e9a:\n    base_path = lbasename();\n    default_path = DAT_0010d618;\n    error_msg = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    FUN_00107920(error_msg,default_path,base_path);\n    DAT_0010d618 = (char *)base_path;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*output_path == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n        if (default_path[path_length - 1] == '/') {\n          DAT_0010d618 = (char *)concat(default_path,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(default_path,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file_ptr = fopen(DAT_0010d618,\"w\");\n      if (file_ptr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    current_path = output_path;\n    if ((*output_path == '.') && (current_path = output_path + 1, output_path[1] == '.')) {\n      current_path = output_path + 2;\n      if ((output_path[2] == '/') || (output_path[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*current_path != '\\0' && (*current_path != '/')); current_path = current_path + 1) {\n    }\n    for (; output_path = current_path, *current_path == '/'; current_path = current_path + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "open_output_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00105a68",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102bb0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_and_set_errno_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPtr",
                "iVar1": "errnoValue"
            },
            "code": "\nundefined8 closeAndSetErrno_00102f55(void)\n\n{\n  int errnoValue;\n  int *errnoPtr;\n  int fileDescriptor;\n  \n  errnoPtr = __errno_location();\n  errnoValue = *errnoPtr;\n  close(fileDescriptor);\n  *errnoPtr = errnoValue;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_and_set_errno_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_name_001057a0",
                "param_1": "file_path",
                "param_2": "output_fd",
                "param_3": "unused1",
                "param_4": "unused2",
                "iVar1": "temp_fd",
                "pcVar2": "filename",
                "lVar3": "filename_length",
                "lVar4": "loop_counter",
                "lVar5": "file_name_length",
                "pcVar6": "new_filename",
                "bVar7": "is_slash",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] extract_file_name_001057a0(char *file_path,int *output_fd,undefined8 unused1,undefined8 unused2)\n\n{\n  int temp_fd;\n  char *filename;\n  long filename_length;\n  long loop_counter;\n  long file_name_length;\n  char *new_filename;\n  byte is_slash;\n  undefined result [16];\n  \n  is_slash = 0;\n  filename = strrchr(file_path,0x2f);\n  if (filename == (char *)0x0) {\n    filename = (char *)xmalloc(9);\n    filename_length = 0;\n  }\n  else {\n    file_name_length = (long)filename - (long)file_path;\n    filename = (char *)xmalloc(file_name_length + 0xb);\n    filename_length = file_name_length + 1;\n    new_filename = filename;\n    for (loop_counter = file_name_length; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *new_filename = *file_path;\n      file_path = file_path + (ulong)is_slash * -2 + 1;\n      new_filename = new_filename + (ulong)is_slash * -2 + 1;\n    }\n    filename[file_name_length] = '/';\n  }\n  *(undefined8 *)(filename + filename_length) = 0x5858585858587473;\n  *(undefined *)((long)(filename + filename_length) + 8) = 0;\n  temp_fd = mkstemp(filename);\n  if (temp_fd == -1) {\n    new_filename = (char *)0x0;\n    free(filename);\n  }\n  else {\n    *output_fd = temp_fd;\n    new_filename = filename;\n  }\n  result._8_8_ = unused2;\n  result._0_8_ = new_filename;\n  return result;\n}\n\n",
            "called": [
                "mkstemp",
                "strrchr",
                "xmalloc",
                "FUN_00102ba1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_file_name_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "format_and_print_file_info_00102d8c",
                "unaff_RBX": "fileNames",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "addPrefix",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "permissionChar",
                "cStack0000000000000017": "permissionChar2",
                "param_9": "permissionChar3",
                "cStack0000000000000019": "permissionChar4",
                "cStack000000000000001a": "permissionChar5",
                "cStack000000000000001b": "permissionChar6",
                "cStack000000000000001c": "permissionChar7",
                "cStack000000000000001d": "permissionChar8",
                "cStack000000000000001e": "permissionChar9",
                "uStack000000000000001f": "zero",
                "param_19": "fileInfo",
                "uStack000000000000006c": "fileSize",
                "param_20": "time",
                "param_22": "information",
                "__format": "timeErrorMsg"
            },
            "code": "\nvoid formatAndPrintFileInfo_00102d8c(void)\n\n{\n  char *timeErrorMsg;\n  uint uVar1;\n  char **fileNames;\n  FILE *outputFile;\n  char addPrefix;\n  undefined fileTypeChar;\n  char permissionChar;\n  char permissionChar2;\n  char permissionChar3;\n  char permissionChar4;\n  char permissionChar5;\n  char permissionChar6;\n  char permissionChar7;\n  char permissionChar8;\n  char permissionChar9;\n  undefined zero;\n  uint fileInfo;\n  uint fileSize;\n  uint time;\n  undefined8 information;\n  \n  timeErrorMsg = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeErrorMsg);\n  uVar1 = fileInfo & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (uVar1 != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  permissionChar = (-((fileInfo & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionChar2 = (-((fileInfo & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionChar3 = (-((fileInfo & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionChar4 = (-((fileInfo & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionChar5 = (-((fileInfo & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionChar6 = (-((fileInfo & 8) == 0) & 0xb5U) + 0x78;\n  permissionChar7 = (-((fileInfo & 4) == 0) & 0xbbU) + 0x72;\n  permissionChar8 = (-((fileInfo & 2) == 0) & 0xb6U) + 0x77;\n  permissionChar9 = (-((fileInfo & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileInfo & 0x800) != 0) {\n    if (permissionChar3 == 'x') {\n      permissionChar3 = 's';\n    }\n    else {\n      permissionChar3 = 'S';\n    }\n  }\n  if ((fileInfo & 0x400) != 0) {\n    if (permissionChar6 == 'x') {\n      permissionChar6 = 's';\n    }\n    else {\n      permissionChar6 = 'S';\n    }\n  }\n  if ((fileInfo & 0x200) != 0) {\n    if (permissionChar9 == 'x') {\n      permissionChar9 = 't';\n    }\n    else {\n      permissionChar9 = 'T';\n    }\n  }\n  zero = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSize,\n          (ulong)time,information,&stack0x00000020,(ulong)fileInfo);\n  fputs(*fileNames,outputFile);\n  if (addPrefix != '\\0') {\n    if ((*(byte *)((long)fileNames + 0x49) & 0x10) == 0) {\n      if (fileNames[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileNames[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputs",
                "sprintf",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "format_and_print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_001028ed",
                "FUN_00102fd7",
                "FUN_00102f55",
                "FUN_00105c00",
                "FUN_00102c25",
                "FUN_001031cf",
                "FUN_00103a78",
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "create_or_open_archive_00105300",
                "param_1": "archivePath",
                "param_2": "archiveHandle",
                "plVar1": "filePointers",
                "pcVar2": "errorString",
                "bVar3": "isThinLibrary",
                "cVar4": "checkResult",
                "iVar5": "returnValue",
                "uVar6": "conversionErrMsg",
                "uVar7": "libraryName",
                "piVar8": "errnoLocation",
                "lVar9": "currentFilePointer",
                "puVar10": "pluginHandle",
                "local_b0": "conversionSymbolTable",
                "local_a8": "fileStat"
            },
            "code": "\n\n\nundefined8 * createOrOpenArchive_00105300(char *archivePath,undefined8 *archiveHandle)\n\n{\n  long *filePointers;\n  char *errorString;\n  byte isThinLibrary;\n  char checkResult;\n  int returnValue;\n  undefined8 conversionErrMsg;\n  undefined8 libraryName;\n  int *errnoLocation;\n  long currentFilePointer;\n  undefined8 *pluginHandle;\n  undefined8 conversionSymbolTable;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  returnValue = stat(archivePath,&fileStat);\n  errorString = DAT_0010d618;\n  if (returnValue == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(archivePath);\n      FUN_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archiveHandle != (undefined8 *)0x0)) {\n      pluginHandle = (undefined8 *)FUN_00102710();\n      return pluginHandle;\n    }\n    archiveHandle = (undefined8 *)bfd_openw(archivePath,DAT_0010d5f0);\n    if (((archiveHandle != (undefined8 *)0x0) && (checkResult = bfd_set_format(archiveHandle,2), checkResult != '\\0')) &&\n       (checkResult = bfd_close(archiveHandle), checkResult != '\\0')) {\n      errorString = archivePath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  FUN_00107c10(archivePath);\n  do {\n    isThinLibrary = *(byte *)((long)archiveHandle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *archiveHandle;\n        conversionErrMsg = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(conversionErrMsg,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *archiveHandle;\n      conversionErrMsg = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(conversionErrMsg,libraryName);\nLAB_001027cb:\n      FUN_00107c20(archivePath);\n      returnValue = bfd_get_error();\n      if (returnValue == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(conversionSymbolTable);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      filePointers = archiveHandle + 0x1e;\n      for (currentFilePointer = bfd_openr_next_archived_file(archiveHandle,0); currentFilePointer != 0;\n          currentFilePointer = bfd_openr_next_archived_file(archiveHandle,currentFilePointer)) {\n        *filePointers = currentFilePointer;\n        filePointers = (long *)(currentFilePointer + 0xf0);\n      }\n      *filePointers = 0;\n      returnValue = bfd_get_error();\n      if (returnValue == 9) {\n        return archiveHandle;\n      }\n      do {\n        FUN_00107c10(archivePath);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(libraryName,archivePath);\n        errorString = archivePath;\nLAB_001053be:\n        DAT_0010d618 = errorString;\n        archiveHandle = (undefined8 *)bfd_openr(archivePath,DAT_0010d5f0);\n      } while (archiveHandle == (undefined8 *)0x0);\n      checkResult = bfd_check_format_matches(archiveHandle,2,&conversionSymbolTable);\n      if (checkResult == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (currentFilePointer = bfd_openr_next_archived_file(archiveHandle,0), currentFilePointer == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "FUN_00102710",
                "xexit",
                "bfd_close",
                "__errno_location",
                "bfd_openw",
                "bfd_openr",
                "bfd_set_error",
                "dcgettext",
                "stat",
                "fprintf",
                "FUN_0010315d",
                "FUN_00107c20",
                "bfd_get_error",
                "bfd_check_format_matches",
                "FUN_00107920",
                "perror",
                "FUN_00107690",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_or_open_archive_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVar",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "uintVar1",
                "uVar7": "uintVar2",
                "bVar8": "boolVar1",
                "bVar9": "boolVar2",
                "ppcVar10": "charPointerPointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar2",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "uintVar3",
                "uVar25": "ulongVar1",
                "uVar27": "undefined8Var1",
                "pFVar28": "FILEPointer",
                "plVar21": "longPointer3",
                "pplVar29": "longPointerPointer",
                "uVar30": "undefined8Var2",
                "pFVar18": "currentFile",
                "sVar19": "sizeVar1",
                "sVar20": "sizeVar2",
                "__ptr": "bytePointer2",
                "pFVar22": "currentFile2"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVar;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 uintVar1;\n  undefined4 uintVar2;\n  bool boolVar1;\n  bool boolVar2;\n  char **charPointerPointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar2;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 uintVar3;\n  FILE *currentFile;\n  size_t sizeVar1;\n  size_t sizeVar2;\n  byte *bytePointer2;\n  long *longPointer3;\n  FILE *currentFile2;\n  char *pcVar23;\n  long lVar24;\n  ulong ulongVar1;\n  undefined8 *uintPointer6;\n  undefined8 undefined8Var1;\n  FILE *FILEPointer;\n  long **longPointerPointer;\n  undefined8 undefined8Var2;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long lVar34;\n  long lVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar8;\n  char *pcVar39;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uVar44;\n  int iVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  currentFile = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  currentFile2 = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar;\n    local_130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)currentFile2;\n    if (**(char **)(&currentFile2->_flags + (long)unaff_RBP * 2) == '@') {\n      uVar44 = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uVar44;\n      if (uVar44 == 0) {\n        longPointer3 = *(long **)currentFile2;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPointer3);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&currentFile2->_flags + (long)unaff_RBP * 2) + 1;\n      intVar = stat(pcVar39,(stat *)local_c8);\n      if (-1 < intVar) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          longPointer3 = *(long **)currentFile2;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        currentFile = fopen(pcVar39,\"r\");\n        if (currentFile != (FILE *)0x0) {\n          intVar = fseek(currentFile,0,2);\n          if (((intVar != -1) && (sizeVar1 = ftell(currentFile), sizeVar1 != 0xffffffffffffffff)) &&\n             (intVar = fseek(currentFile,0,0), intVar != -1)) {\n            local_118 = (byte *)xmalloc(sizeVar1 + 1);\n            sizeVar2 = fread(local_118,1,sizeVar1,currentFile);\n            if ((sizeVar1 == sizeVar2) || (intVar = ferror(currentFile), intVar == 0)) {\n              local_118[sizeVar2] = 0;\n              byteVar2 = *local_118;\n              pbyteVar3 = local_118;\n              while( true ) {\n                if (byteVar2 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) == 0) break;\n                byteVar2 = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sizeVar1 = strlen((char *)local_118);\n              bytePointer2 = (byte *)xmalloc(sizeVar1 + 1);\n              FILEPointer = (FILE *)0x0;\n              intVar = 0;\n              boolVar2 = false;\n              bVar47 = false;\n              boolVar1 = false;\n              local_100 = 0;\n              pbyteVar3 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)local_100)) {\n                  if (FILEPointer == (FILE *)0x0) {\n                    intVar = 8;\n                    FILEPointer = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&FILEPointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    FILEPointer = (FILE *)xrealloc(FILEPointer,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&FILEPointer->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&FILEPointer->_flags + local_100 * 8);\n                }\n                byteVar2 = *pbyteVar3;\n                pbyteVar8 = bytePointer2;\n                while (byteVar2 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar2 | boolVar1 | bVar47))) {\n                      boolVar1 = false;\n                      boolVar2 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar1) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *pbyteVar8 = byteVar2;\n                    pbyteVar8 = pbyteVar8 + 1;\n                    boolVar1 = false;\n                    byteVar2 = *pbyteVar3;\n                    if (byteVar2 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar2 == 0x5c) {\n                    boolVar1 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar2 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar8 = byteVar2;\n                      pbyteVar8 = pbyteVar8 + 1;\n                    }\n                  }\n                  else if (boolVar2) {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = false;\n                  }\n                  else if (byteVar2 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar2 != 0x22) goto LAB_001061f1;\n                    boolVar2 = true;\n                  }\n                  bytePointer = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar2 = *bytePointer;\n                }\nLAB_0010606f:\n                *pbyteVar8 = 0;\n                longPointer3 = (long *)xstrdup(bytePointer2);\n                *ppcVar31 = (char *)longPointer3;\n                *(undefined8 *)(FILEPointer->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteVar2 = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar2 = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteVar2 == 0) {\n                  free(bytePointer2);\n                  if (currentFile2 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(currentFile);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = FUN_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(undefinedPointer + (long)intVar * 8 + 0x10) = FUN_00107730;\n          }\n          else {\n            uintPointer6 = (undefined8 *)malloc(0x110);\n            if (uintPointer6 != (undefined8 *)0x0) {\n              *uintPointer6 = undefinedPointer;\n              *(undefined4 *)(uintPointer6 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)uintPointer6;\n              goto LAB_0010632b;\n            }\n          }\n          lVar24 = 1;\n          do {\n            lVar35 = lVar24;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)lVar35) break;\n            charVar = FUN_00107640(*(undefined8 *)((int *)pcVar43 + lVar35 * 2));\n            lVar24 = lVar35 + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + lVar35 * 8 + -8);\n          uVar44 = intVar - ((int)lVar35 + -1);\n          currentFile = (FILE *)(ulong)uVar44;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar = getopt_long(currentFile,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              FUN_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                FUN_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                FUN_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVar = FUN_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (lVar24 = FUN_001052a0(pcVar39), lVar24 < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVar = open(pcVar39,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              FUN_00107c10(pcVar39);\nLAB_0010737f:\n              FUN_00107c10(pcVar39);\nLAB_00107387:\n              FUN_00107c20(pcVar39);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                FUN_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var1 = dcgettext(0,\"%s: no archive map to update\",5);\n            FUN_00107690(undefined8Var1,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sizeVar1 = strlen(pcVar39);\n            if ((sizeVar1 < 6) ||\n               (intVar = filename_cmp(pcVar39 + (sizeVar1 - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          currentFile2 = (FILE *)unaff_RBP;\n          FILEPointer = currentFile;\n          if ((int)uVar44 < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uintVar);\nLAB_001063a3:\n          currentFile2 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            sizeVar1 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sizeVar1 + (int)currentFile;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            uintVar3 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uintVar3;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar;\n                        pcVar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = pcVar23;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            lVar24 = (long)(int)currentFile;\n            intPointer = (int *)pcVar46 + lVar24 * 2;\n            if (local_128 < intPointer) {\n              ulongVar1 = lVar24 * 8 - 0x11;\n              if ((ulongVar1 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPointerPointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPointerPointer = *ppcVar31;\n                    charPointerPointer = charPointerPointer + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uintVar3 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uintVar1 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar1 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uintVar3;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar2;\n                uintVar3 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uintVar1 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar1 = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uintVar3;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar1;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar2;\n                if (ulongVar1 != 2) {\n                  uintVar3 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uintVar1 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uintVar2 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uintVar3;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar1;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar2;\n                  if (ulongVar1 != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      uintVar3 = *(undefined4 *)(pcVar39 + 4);\n                      uintVar1 = *(undefined4 *)(pcVar39 + 8);\n                      uintVar2 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uintVar3;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar1;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar2;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar1);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + lVar24 + -2;\n            }\n            currentFile = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uVar44 = getopt_long((ulong)currentFile & 0xffffffff,pcVar46,currentFile2,ppuVar36,0);\n            unaff_RBP = (char *)currentFile2;\n            if (uVar44 == 0xffffffff) break;\n            if (((uVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            FILEPointer = (FILE *)pcVar46;\n            if (uVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            FUN_0010342d(0);\n            pcVar46 = (char *)FILEPointer;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uVar44 = DAT_0010d64c;\n          currentFile2 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)currentFile <= _optind || (_optind < 1)))) {\n              uVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar = (int)currentFile - (_optind + -1);\n            currentFile = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          uintVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              FUN_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              FILEPointer = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uVar44 == 3) goto LAB_00106abc;\n                  if (uVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uVar44 == 3) || (uVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  uintVar3 = FUN_00107650();\n                    \n                  xexit(uintVar3);\n                }\nLAB_00106abc:\n                if (uVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var1 = dcgettext(0,\"`N\\' missing value.\",5);\n                    FUN_00107690(undefined8Var1);\n                    uVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar + 1);\n                  lVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)lVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              lVar24 = (long)(int)unaff_RBP;\n              currentFile2 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + lVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              currentFile2 = (FILE *)((long)ppuVar36 + (lVar24 + 1) * 2 * 4);\n              if (*(FILE **)currentFile2 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                currentFile2 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (lVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                currentFile = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)currentFile;\n                  currentFile = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + lVar24 * 2 * 4) + (long)currentFile * 2) !=\n                         0);\n              }\n              uintPointer6 = (undefined8 *)FUN_00105300();\n              currentFile = currentFile2;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)uintPointer6 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)currentFile2;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  FUN_00105480(uintPointer6,FUN_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar1 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sizeVar1 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",uintPointer6);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  lVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (lVar24 != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    FILEPointer = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (FILEPointer != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    lVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (lVar24 == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intVar + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      lVar24 = 0;\n                    }\n                    else {\n                      uintVar3 = *(undefined4 *)&currentFile2->field_0x4;\n                      *(int *)unaff_RBP = currentFile2->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uintVar3;\n                      lVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&currentFile2->_flags;\n                        currentFile2 = (FILE *)((long)currentFile2 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + lVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      currentFile2 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)currentFile2;\n                if (currentFile2 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                currentFile = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)currentFile2;\n                if ((currentFile2 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  FUN_00105570(uintPointer6,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)currentFile2;\nswitchD_00106ed8_caseD_3:\n                FUN_00105480(uintPointer6,FUN_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)currentFile2;\nswitchD_00106ed8_caseD_4:\n                FUN_00105480(uintPointer6,FUN_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (currentFile2 == (FILE *)0x0) break;\nLAB_00106afb:\n                currentFile = (FILE *)(uintPointer6 + 0x1e);\n                do {\n                  unaff_R12 = currentFile;\n                  if (*(FILE **)currentFile2 == (FILE *)0x0) {\nLAB_00106b9f:\n                    FUN_001058b0(uintPointer6);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer3 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)currentFile2;\n                    if (longPointer3 == (long *)0x0) {\n                      undefined8Var1 = *uintPointer6;\n                      undefined8Var2 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      FUN_00107690(undefined8Var2,pcVar46,undefined8Var1);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    lVar24 = *longPointer3;\n                    undefined8Var1 = FUN_00105830(pcVar46,uintPointer6);\n                    intVar = filename_cmp(undefined8Var1,lVar24);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer3[0x1e];\n                  longPointerPointer = (long **)FUN_00105870(currentFile,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPointer = *longPointerPointer;\n                  *longPointerPointer = longPointer3;\n                  longPointer3[0x1e] = (long)longPointer;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)currentFile2);\n                  }\n                  currentFile2 = (FILE *)&currentFile2->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            FUN_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar);\n          FUN_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uintVar3 = bfd_get_error();\n        currentFile2 = (FILE *)bfd_errmsg(uintVar3);\n        undefined8Var1 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = FUN_00107690(undefined8Var1,\"x86_64-pc-linux-gnu\",currentFile2);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          FILEPointer = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)currentFile2;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)currentFile2;\nLAB_00106803:\n        undefined8Var1 = dcgettext(0,pcVar39,5);\n        FUN_00107690(undefined8Var1);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        FILEPointer = (FILE *)xmalloc(8);\n        *(long **)FILEPointer = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            lVar24 = 1;\n            do {\n              intVar = (int)lVar24;\n              lVar35 = lVar24 * 2;\n              lVar24 = lVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + lVar35) != 0);\n          }\n          currentFile2 = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          longPointer3 = *(long **)pcVar43;\n          lVar24 = 0;\n          while (longPointer3 != (long *)0x0) {\n            undefined8Var1 = xstrdup();\n            *(undefined8 *)((long)&currentFile2->_flags + lVar24) = undefined8Var1;\n            longPointer3 = *(long **)((char *)((long)pcVar43 + 0x83) + lVar24 + -0x7b);\n            lVar24 = lVar24 + 8;\n          }\n          *(undefined8 *)((long)&currentFile2->_flags + lVar24) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)currentFile2;\n          if (*(long **)FILEPointer == (long *)0x0) goto LAB_00106a80;\n          lVar24 = 0;\n          do {\n            lVar34 = lVar24 + 1;\n            lVar35 = lVar24 * 8;\n            lVar24 = lVar34;\n          } while (*(long *)(FILEPointer->_shortbuf + lVar35 + -0x7b) != 0);\n          local_108 = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          local_108 = 0;\n        }\n        lVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + lVar24));\n        currentFile2 = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar) * 8);\n        uVar44 = intVar + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uVar44;\n        memmove(&currentFile2->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&currentFile2->_IO_read_ptr + (long)local_130),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&currentFile2->_flags),FILEPointer,local_108);\n        free(FILEPointer);\n        free(local_118);\n        fclose(currentFile);\n        uintVar = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)currentFile2;\n        local_130 = FILEPointer;\n        if ((int)uintVar < (int)uVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)currentFile & 0xffffffff,pcVar46,currentFile2,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)currentFile2;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var1 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  FUN_00107920(undefined8Var1);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)currentFile != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  iVar45 = 0;\n  intVar = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Pointer = uintPointer6;\n  if (intVar == 0) {\n    *(byte *)((long)uintPointer6 + 0x49) = *(byte *)((long)uintPointer6 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer3 = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer3 == (undefined8 *)0x0) break;\n      undefined8Var1 = *(undefined8 *)*longPointer3;\n      undefined8Var2 = FUN_00105830(*(FILE **)unaff_RBP,uintPointer6);\n      intVar = filename_cmp(undefined8Var2,undefined8Var1);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (iVar45 = iVar45 + 1, iVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPointer3 = *(long *)(*longPointer3 + 0xf0);\n        currentFile = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer3;\n    }\n    if (DAT_0010d60c != 0) {\n      currentFile2 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,currentFile2);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00105870",
                "fileno",
                "bfd_set_error_program_name",
                "FUN_0010342d",
                "textdomain",
                "filename_cmp",
                "bfd_check_format_matches",
                "memcpy",
                "strlen",
                "bfd_plugin_set_plugin",
                "FUN_001075e0",
                "FUN_00107c10",
                "FUN_00105300",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "bfd_close",
                "strtol",
                "isatty",
                "FUN_00107cc0",
                "FUN_00107730",
                "fread",
                "ferror",
                "bfd_set_error",
                "dcgettext",
                "fopen",
                "bindtextdomain",
                "FUN_00107c20",
                "free",
                "FUN_00105830",
                "FUN_00107650",
                "lbasename",
                "FUN_00103a78",
                "xstrdup",
                "FUN_00105480",
                "bfd_find_target",
                "FUN_0010394a",
                "open",
                "bfd_make_writable",
                "fseek",
                "fprintf",
                "stat",
                "FUN_001052a0",
                "xrealloc",
                "bfd_make_readable",
                "bfd_set_default_target",
                "FUN_00107740",
                "FUN_00107920",
                "getopt_long",
                "ftell",
                "printf",
                "FUN_00103e95",
                "FUN_00107890",
                "FUN_00107690",
                "fclose",
                "FUN_00103bd1",
                "bfd_set_format",
                "setlocale",
                "xexit",
                "xmalloc",
                "bfd_fdopenr",
                "FUN_00107640",
                "bfd_bwrite",
                "bfd_get_error",
                "FUN_001058b0",
                "bfd_init",
                "strcmp",
                "bfd_create",
                "bfd_plugin_set_program_name",
                "malloc",
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatList",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "uVar1": "translationString"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatList)\n\n{\n  undefined8 translationString;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  translationString = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,translationString);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatList);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "dcgettext",
                "fflush",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "xexit": "exit"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  FUN_00107c20();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_001058b0",
                "FUN_00102d2f",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "open_and_convert_libraries_00102710",
                "plVar1": "ptr_to_current_archived_file",
                "cVar2": "check_result",
                "bVar3": "is_thin_format",
                "iVar4": "error_code",
                "lVar5": "file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "output_file",
                "unaff_RBP": "temporary_variable",
                "in_stack_00000008": "input_file"
            },
            "code": "\n\n\nundefined8 * open_and_convert_libraries_00102710(void)\n\n{\n  long *ptr_to_current_archived_file;\n  char check_result;\n  byte is_thin_format;\n  int error_code;\n  long file_descriptor;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *output_file;\n  undefined8 temporary_variable;\n  undefined8 input_file;\n  \n  file_descriptor = bfd_openr();\n  if (file_descriptor != 0) {\n    check_result = bfd_check_format(file_descriptor,1);\n    if (check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_descriptor + 8);\n    }\n    bfd_close(file_descriptor);\n  }\n  output_file = (undefined8 *)bfd_openw();\n  if (((output_file != (undefined8 *)0x0) && (check_result = bfd_set_format(output_file,2), check_result != '\\0')) &&\n     (check_result = bfd_close(output_file), check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  FUN_00107c10();\n  do {\n    is_thin_format = *(byte *)((long)output_file + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (is_thin_format != 0) {\n        library_name = *output_file;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        FUN_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (is_thin_format == 0) {\n      library_name = *output_file;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      FUN_00107690(error_message,library_name);\nLAB_001027cb:\n      FUN_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        FUN_00103bd1(input_file);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      ptr_to_current_archived_file = output_file + 0x1e;\n      for (file_descriptor = bfd_openr_next_archived_file(output_file,0); file_descriptor != 0;\n          file_descriptor = bfd_openr_next_archived_file(output_file,file_descriptor)) {\n        *ptr_to_current_archived_file = file_descriptor;\n        ptr_to_current_archived_file = (long *)(file_descriptor + 0xf0);\n      }\n      *ptr_to_current_archived_file = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return output_file;\n      }\n      do {\n        FUN_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        FUN_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = temporary_variable;\n        output_file = (undefined8 *)bfd_openr();\n      } while (output_file == (undefined8 *)0x0);\n      check_result = bfd_check_format_matches(output_file,2,&stack0x00000008);\n      if (check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_descriptor = bfd_openr_next_archived_file(output_file,0), file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_close",
                "bfd_check_format",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "open_and_convert_libraries_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "decompile_and_improve_00103e95",
                "pplVar1": "double_pointer",
                "cVar2": "character",
                "ppFVar3": "double_pointer_to_file",
                "pFVar4": "file_pointer",
                "plVar5": "long_pointer",
                "uVar6": "undefined8_variable",
                "pbVar7": "byte_pointer",
                "iVar8": "integer",
                "pcVar10": "character_pointer",
                "uVar11": "undefined8_variable_2",
                "iVar9": "integer_2",
                "plVar12": "long_pointer_2",
                "sVar13": "size_t",
                "pvVar14": "void_pointer",
                "pcVar15": "character_pointer_2",
                "pcVar16": "character_pointer_3",
                "lVar17": "long_variable",
                "lVar18": "long_variable_2",
                "uVar19": "ulong_variable",
                "uVar20": "uint_variable",
                "lVar21": "long_variable_3",
                "puVar22": "undefined8_pointer",
                "puVar23": "undefined8_pointer_2",
                "uVar24": "uint_variable_2",
                "iVar25": "integer_3",
                "uVar26": "ulong_variable_2",
                "ppcVar27": "double_pointer_to_character",
                "bVar28": "bool",
                "bVar30": "byte_variable",
                "lVar31": "long_variable_4",
                "pbVar32": "byte_pointer_2",
                "pbVar33": "byte_pointer_3",
                "piVar34": "integer_pointer",
                "pbVar35": "byte_pointer_4",
                "auVar40": "undefined_variable_1",
                "auVar41": "undefined_variable_2",
                "local_828": "local_character_pointer",
                "local_820": "local_character_pointer_2",
                "local_818": "local_long_variable",
                "local_810": "local_double_pointer_to_character",
                "local_800": "local_integer",
                "local_7fc": "local_uint_variable",
                "local_7f8": "local_byte_pointer",
                "local_7d0": "local_stat_variable",
                "local_740": "local_character_array",
                "local_678": "local_character_pointer_array"
            },
            "code": "\n\n\nvoid decompile_and_improve_00103e95(void)\n\n{\n  long **double_pointer;\n  char character;\n  FILE **double_pointer_to_file;\n  FILE *file_pointer;\n  long *long_pointer;\n  undefined8 undefined8_variable;\n  byte *byte_pointer;\n  int integer;\n  char *character_pointer;\n  undefined8 undefined8_variable_2;\n  int integer_2;\n  long *long_pointer_2;\n  size_t size_t;\n  void *void_pointer;\n  char *character_pointer_2;\n  char *character_pointer_3;\n  long long_variable;\n  long long_variable_2;\n  ulong ulong_variable;\n  uint uint_variable;\n  long long_variable_3;\n  undefined8 *undefined8_pointer;\n  undefined8 *undefined8_pointer_2;\n  uint uint_variable_2;\n  int integer_3;\n  ulong ulong_variable_2;\n  char **double_pointer_to_character;\n  bool bool;\n  char **ppcharacter9;\n  byte byte_variable;\n  long long_variable_4;\n  byte *byte_pointer_2;\n  byte *byte_pointer_3;\n  int *integer_pointer;\n  byte *byte_pointer_4;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined undefined_variable_1 [16];\n  undefined undefined_variable_2 [16];\n  char *local_character_pointer;\n  char *local_character_pointer_2;\n  long local_long_variable;\n  char **local_double_pointer_to_character;\n  int local_integer;\n  uint local_uint_variable;\n  byte *local_byte_pointer;\n  stat local_stat_variable;\n  char local_character_array [200];\n  char *local_character_pointer_array [201];\n  \n  bVar39 = 0;\n  long_variable_2 = 0;\n  DAT_0010d550 = -2;\n  ppcharacter9 = local_character_pointer_array;\n  local_integer = 0;\n  local_character_pointer = local_character_array;\n  local_long_variable = 200;\n  local_character_pointer_2 = local_character_pointer;\n  local_double_pointer_to_character = ppcharacter9;\nLAB_00103ee9:\n  *local_character_pointer = (char)long_variable_2;\n  if (local_character_pointer_2 + local_long_variable + -1 <= local_character_pointer) {\n    long_variable_3 = (long)local_character_pointer - (long)local_character_pointer_2;\n    long_variable = long_variable_3 + 1;\n    if (local_long_variable < 10000) {\n      long_variable_4 = local_long_variable * 2;\n      local_long_variable = 10000;\n      if (long_variable_4 < 0x2711) {\n        local_long_variable = long_variable_4;\n      }\n      character_pointer = (char *)malloc(local_long_variable * 9 + 7);\n      if (character_pointer != (char *)0x0) {\n        long_variable_4 = long_variable * 8;\n        character_pointer_2 = local_character_pointer_2;\n        character_pointer_3 = character_pointer;\n        for (; long_variable != 0; long_variable = long_variable + -1) {\n          *character_pointer_3 = *character_pointer_2;\n          character_pointer_2 = character_pointer_2 + (ulong)bVar39 * -2 + 1;\n          character_pointer_3 = character_pointer_3 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(character_pointer + local_long_variable);\n        ppcharacter9 = ppcVar38;\n        for (; long_variable_4 != 0; long_variable_4 = long_variable_4 + -1) {\n          *(undefined *)ppcharacter9 = *(undefined *)local_double_pointer_to_character;\n          local_double_pointer_to_character = (char **)((long)local_double_pointer_to_character + (ulong)bVar39 * -2 + 1);\n          ppcharacter9 = (char **)((long)ppcharacter9 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_character_pointer_2 != local_character_array) {\n          free(local_character_pointer_2);\n        }\n        local_character_pointer = character_pointer + long_variable_3;\n        ppcharacter9 = ppcVar38 + long_variable_3;\n        local_character_pointer_2 = character_pointer;\n        local_double_pointer_to_character = ppcVar38;\n        if (character_pointer + local_long_variable + -1 <= local_character_pointer) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    FUN_001031a5();\nLAB_0010524c:\n    character_pointer = local_character_pointer_2;\n    if (local_character_pointer_2 == local_character_array) {\n      return;\n    }\nLAB_00105265:\n    free(character_pointer);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)long_variable_2;\n  if (iVar37 == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[iVar37];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          FUN_00103df9();\n          undefined8_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined8_variable_2 = FUN_001033d6(DAT_0010d590);\n          *undefined8_pointer = undefined8_variable_2;\n        }\n        FUN_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      byte_pointer_2 = DAT_0010d5b0;\n      byte_pointer_4 = DAT_0010d5b0;\n      uint_variable = DAT_0010d5d0;\nLAB_001040d4:\n      ulong_variable = (ulong)uint_variable;\n      ulong_variable_2 = (ulong)local_uint_variable;\n      bool = false;\n      do {\n        byte_variable = (&DAT_0010ab00)[*byte_pointer_4];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong_variable * 2) != 0) {\n          bool = true;\n          ulong_variable_2 = ulong_variable & 0xffffffff;\n          local_byte_pointer = byte_pointer_4;\n        }\n        while( true ) {\n          integer = (int)ulong_variable;\n          long_variable_2 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer * 2) + (uint)byte_variable);\n          if (integer == *(short *)(&DAT_0010a440 + long_variable_2 * 2)) break;\n          ulong_variable = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer * 2)) {\n            byte_variable = (&DAT_0010a7c0)[(int)(uint)byte_variable];\n          }\n        }\n        byte_pointer_4 = byte_pointer_4 + 1;\n        ulong_variable = (ulong)*(short *)(&DAT_0010a240 + long_variable_2 * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong_variable * 2) != 0xc2);\n      local_uint_variable = (uint)ulong_variable_2;\n      byte_pointer_3 = byte_pointer_2;\n      if (bool) {\n        DAT_0010d5b8 = local_byte_pointer;\n        DAT_0010d5c0 = local_uint_variable;\n      }\nLAB_0010419f:\n      integer = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong_variable * 2);\n      if (integer == 0) {\n        integer = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        byte_pointer_4 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)byte_pointer_4 - (int)byte_pointer_3;\n      DAT_0010d588 = *byte_pointer_4;\n      DAT_0010d5b0 = byte_pointer_4;\n      DAT_0010d5c8 = byte_pointer_3;\n      *byte_pointer_4 = 0;\nLAB_001041f0:\n      byte_pointer_2 = DAT_0010d5c8;\n      long_variable_2 = DAT_0010d5a0;\n      switch(integer) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        FUN_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long_variable_2 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint_variable = character + iVar37;\n    if ((0x22 < uint_variable) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uint_variable])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uint_variable];\n    long_variable_2 = (long)character;\n    if (character < '\\x01') {\n      iVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_integer = local_integer + -1 + (uint)(local_integer == 0);\n    ppcharacter9 = ppcharacter9 + 1;\n    *ppcharacter9 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)long_variable_2];\n  if ((&DAT_0010a020)[(int)long_variable_2] == '\\0') {\n    if (local_integer == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      FUN_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long_variable_2] != -0xe) &&\n             (uint_variable = (int)(char)(&DAT_0010a200)[long_variable_2] + 1, uint_variable < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint_variable] == '\\x01')) &&\n           (long_variable_2 = (long)(char)(&DAT_0010a060)[(int)uint_variable],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint_variable])) goto LAB_00105227;\n        if (local_character_pointer_2 == local_character_pointer) goto LAB_0010524c;\n        local_character_pointer = local_character_pointer + -1;\n        ppcharacter9 = ppcharacter9 + -1;\n        long_variable_2 = (long)*local_character_pointer;\n      } while( true );\n    }\n    if (local_integer != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8_variable_2 = DAT_0010d660;\n  double_pointer_to_character = DAT_0010d558;\n  character = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)ppcharacter9[1 - character];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    FUN_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    FUN_001031a5();\n    break;\n  case 0x17:\n    undefined8_pointer = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\n      character_pointer = \"%s: no open archive\\n\";\nLAB_00104b62:\n      character_pointer = (char *)dcgettext(0,character_pointer,5);\n      fprintf(_stderr,character_pointer,undefined8_variable_2);\n      FUN_0010315d();\n    }\n    else {\n      for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n        for (undefined8_pointer_2 = (undefined8 *)DAT_0010d558[0x1f]; undefined8_pointer_2 != (undefined8 *)0x0;\n            undefined8_pointer_2 = (undefined8 *)undefined8_pointer_2[0x1e]) {\n          integer = filename_cmp(*undefined8_pointer_2);\n          if (integer == 0) {\n            FUN_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*undefined8_pointer,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable_2 = *undefined8_pointer;\n        character_pointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,character_pointer,undefined8_variable,undefined8_variable_2);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    undefined8_pointer = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      character_pointer = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      bool = false;\n      double_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (character_pointer = DAT_0010d558[0x1f]; character_pointer != (char *)0x0;\n          character_pointer = *(char **)(character_pointer + 0xf0)) {\n        integer = filename_cmp();\n        if (integer == 0) {\n          character_pointer_2 = (char *)bfd_openr(*undefined8_pointer,0);\n          undefined8_variable_2 = DAT_0010d660;\n          if (character_pointer_2 == (char *)0x0) {\n            undefined8_variable = *undefined8_pointer;\n            character_pointer_2 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,character_pointer_2,undefined8_variable_2,undefined8_variable);\n            FUN_0010315d();\n          }\n          else {\n            *double_pointer_to_character = character_pointer_2;\n            bool = true;\n            *(undefined8 *)(character_pointer_2 + 0xf0) = *(undefined8 *)(character_pointer + 0xf0);\n          }\n        }\n        else {\n          double_pointer_to_character = (char **)(character_pointer + 0xf0);\n        }\n      }\n      if (!bool) {\n        character_pointer = (char *)bfd_openr(*undefined8_pointer,0);\n        undefined8_variable = DAT_0010d660;\n        undefined8_variable_2 = *undefined8_pointer;\n        character_pointer_2 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,character_pointer_2,undefined8_variable,undefined8_variable_2);\n        undefined8_variable_2 = DAT_0010d660;\n        if (character_pointer == (char *)0x0) {\n          undefined8_variable = *undefined8_pointer;\n          character_pointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,character_pointer,undefined8_variable_2,undefined8_variable);\n          FUN_0010315d();\n        }\n        else {\n          *double_pointer_to_character = character_pointer;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    undefined8_pointer = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      bool = false;\n      double_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (undefined8_pointer_2 = (undefined8 *)DAT_0010d558[0x1f]; undefined8_variable_2 = DAT_0010d660,\n          undefined8_pointer_2 != (undefined8 *)0x0; undefined8_pointer_2 = (undefined8 *)undefined8_pointer_2[0x1e]) {\n        integer = filename_cmp(*undefined8_pointer_2,*undefined8_pointer);\n        if (integer == 0) {\n          bool = true;\n          *double_pointer_to_character = (char *)undefined8_pointer_2[0x1e];\n        }\n        else {\n          double_pointer_to_character = (char **)(undefined8_pointer_2 + 0x1e);\n        }\n      }\n      if (!bool) {\n        undefined8_variable = *undefined8_pointer;\n        character_pointer = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,character_pointer,undefined8_variable_2,undefined8_variable);\n        FUN_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    undefined8_pointer = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; undefined8_pointer != (undefined8 *)0x0; undefined8_pointer = (undefined8 *)undefined8_pointer[1]) {\n      character_pointer = (char *)bfd_openr(*undefined8_pointer,\"plugin\");\n      undefined8_variable_2 = DAT_0010d660;\n      double_pointer_to_character = DAT_0010d558;\n      if (character_pointer == (char *)0x0) {\n        undefined8_variable = *undefined8_pointer;\n        character_pointer = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,character_pointer,undefined8_variable_2,undefined8_variable);\n        FUN_0010315d();\n      }\n      else {\n        *(char **)(character_pointer + 0xf0) = DAT_0010d558[0x1f];\n        double_pointer_to_character[0x1f] = character_pointer;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    character_pointer = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    character_pointer_2 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(character_pointer_2,character_pointer);\n    for (character_pointer = DAT_0010d558[0x1f]; character_pointer != (char *)0x0; character_pointer = *(char **)(character_pointer + 0xf0))\n    {\n      FUN_00103ddc(character_pointer,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(double_pointer_to_character);\n    character_pointer = DAT_0010d570;\n    integer = stat(DAT_0010d570,&local_stat_variable);\n    if ((integer != 0) && (DAT_0010d558 = (char **)bfd_openw(character_pointer,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    FUN_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    FUN_00103c60(*ppcharacter9,0);\n    break;\n  case 0x1f:\n    FUN_00103c60(*ppcharacter9,1);\n    break;\n  case 0x20:\n    character_pointer = *ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\n      character_pointer = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long_variable_2 = FUN_00105300(ppcharacter9[-1],0);\n    if (long_variable_2 != 0) {\n      FUN_001032a8(long_variable_2,FUN_0010312d,character_pointer);\n    }\n    break;\n  case 0x21:\n    character_pointer = *ppcharacter9;\n    character_pointer_2 = ppcharacter9[-1];\n    undefined8_variable_2 = FUN_00105300(ppcharacter9[-2],0);\n    if (character_pointer == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(character_pointer,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        FUN_001032a8(undefined8_variable_2,FUN_00103ddc,character_pointer_2);\n        bfd_close(undefined8_variable_2);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      character_pointer_3 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,character_pointer_3,character_pointer);\n    }\n    FUN_001032a8(undefined8_variable_2,FUN_00103ddc,character_pointer_2);\n    bfd_close(undefined8_variable_2);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcharacter9;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcharacter9[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    character_pointer = ppcharacter9[-2];\n    *ppcVar38 = *ppcharacter9;\n    ppcVar38[1] = character_pointer;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long_variable_2 = (long)character;\n  local_character_pointer = local_character_pointer + -long_variable_2;\n  ppcharacter9[1 - long_variable_2] = (char *)ppcVar38;\n  ppcharacter9 = ppcharacter9 + (1 - long_variable_2);\n  uint_variable = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*local_character_pointer;\n  if ((uint_variable < 0x23) && (*local_character_pointer == (&DAT_0010a0a0)[(int)uint_variable])) {\n    long_variable_2 = (long)(char)(&DAT_0010a060)[(int)uint_variable];\n  }\n  else {\n    long_variable_2 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer = ((int)byte_pointer_4 - (int)DAT_0010d5c8) + -1;\n  *byte_pointer_4 = DAT_0010d588;\n  double_pointer = (long **)(DAT_0010d5a8 + long_variable_2 * 8);\n  double_pointer_to_file = (FILE **)*double_pointer;\n  if (*(int *)(double_pointer_to_file + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)double_pointer_to_file + 0x1c);\n    *(undefined4 *)(double_pointer_to_file + 7) = 1;\n    *double_pointer_to_file = DAT_0010d590;\n  }\n  byte_pointer = DAT_0010d5b0;\n  file_pointer = double_pointer_to_file[1];\n  undefined_variable_1._8_8_ = file_pointer;\n  undefined_variable_1._0_8_ = double_pointer_to_file;\n  if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&file_pointer->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      undefined_variable_1 = FUN_001033b0();\n    }\n    if (*(int *)(undefined_variable_1._0_8_ + 0x34) != 0) {\n      uint_variable = (int)((long)byte_pointer - (long)byte_pointer_2) - 1;\n      for (long_variable_2 = 0; (int)long_variable_2 < (int)uint_variable; long_variable_2 = long_variable_2 + 1) {\n        *(byte *)(undefined_variable_1._8_8_ + long_variable_2) = byte_pointer_2[long_variable_2];\n      }\n      long_pointer_2 = *double_pointer;\n      if (*(int *)(long_pointer_2 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)long_pointer_2 + 0x1c) = 0;\nLAB_0010475e:\n        file_pointer = DAT_0010d590;\n        if (uint_variable == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            FUN_00103df9();\n            undefined8_pointer = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined8_variable_2 = FUN_001033d6(file_pointer);\n            *undefined8_pointer = undefined8_variable_2;\n          }\n          long_variable_2 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long_variable_2 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer_2 = 1;\n          FUN_001031cf(long_variable_2);\n          FUN_001030ed();\n        }\n        else {\n          integer_2 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          long_pointer = *double_pointer;\n          uint_variable_2 = ~uint_variable + *(int *)(long_pointer_2 + 3);\n          if (0 < (int)uint_variable_2) break;\n          uint_variable_2 = (int)DAT_0010d5b0 - (int)(void *)long_pointer[1];\n          if (*(int *)(long_pointer + 4) == 0) {\n            long_pointer[1] = 0;\nLAB_00104626:\n            FUN_001033b0();\n            break;\n          }\n          integer_2 = *(int *)(long_pointer + 3);\n          integer_3 = integer_2;\n          if (integer_2 < 1) {\n            integer_3 = integer_2 / 8;\n          }\n          *(int *)(long_pointer + 3) = integer_3 + integer_2;\n          void_pointer = realloc((void *)long_pointer[1],(long)(integer_3 + integer_2 + 2));\n          long_pointer[1] = (long)void_pointer;\n          if (void_pointer == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)void_pointer + (long)(int)uint_variable_2);\n          long_pointer_2 = *double_pointer;\n        }\n        if (0x2000 < (int)uint_variable_2) {\n          uint_variable_2 = 0x2000;\n        }\n        ulong_variable_2 = (ulong)uint_variable_2;\n        if (*(int *)((long)long_pointer + 0x24) == 0) {\n          integer_pointer = __errno_location();\n          ulong_variable_2 = (ulong)(int)uint_variable_2;\n          ulong_variable = (ulong)(int)uint_variable;\n          *integer_pointer = 0;\n          goto LAB_001046c7;\n        }\n        ulong_variable = 0;\n        integer_pointer = (int *)(long)(int)uint_variable;\n        do {\n          integer_2 = getc(DAT_0010d590);\n          uVar36 = (uint)ulong_variable;\n          if (integer_2 == -1) {\n            integer_2 = ferror(DAT_0010d590);\n            uint_variable_2 = uVar36;\n            if (integer_2 != 0) {\n              do {\n                character_pointer = \"input in flex scanner failed\";\n                FUN_001033b0();\n                do {\n                  *integer_pointer = 0;\n                  clearerr((FILE *)character_pointer);\nLAB_001046c7:\n                  size_t = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong_variable),1,ulong_variable_2,DAT_0010d590);\n                  character_pointer = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_t;\n                  uint_variable_2 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer_2 = ferror(DAT_0010d590), uint_variable_2 = DAT_0010d598, integer_2 == 0))\n                  goto LAB_00104738;\n                } while (*integer_pointer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer_2 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint_variable +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint_variable_2 = uVar36 + 1;\n            break;\n          }\n          ulong_variable = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)integer_pointer) =\n               (char)integer_2;\n          integer_pointer = (int *)((long)integer_pointer + 1);\n        } while (uint_variable_2 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uint_variable_2;\n        uint_variable_2 = DAT_0010d598;\n        integer_2 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint_variable_2 == 0) goto LAB_0010475e;\n      }\n      long_pointer_2 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long_variable_2 = *long_pointer_2;\n      uint_variable = uint_variable + DAT_0010d598;\n      if (*(int *)(long_variable_2 + 0x18) < (int)uint_variable) {\n        integer_3 = ((int)DAT_0010d598 >> 1) + uint_variable;\n        void_pointer = realloc(*(void **)(long_variable_2 + 8),(long)integer_3);\n        *(void **)(long_variable_2 + 8) = void_pointer;\n        undefined_variable_2._8_8_ = long_pointer_2;\n        undefined_variable_2._0_8_ = *long_pointer_2;\n        if (*(long *)(*long_pointer_2 + 8) == 0) {\n          undefined_variable_2 = FUN_001033b0();\n        }\n        long_pointer_2 = undefined_variable_2._8_8_;\n        *(int *)(undefined_variable_2._0_8_ + 0x18) = integer_3 + -2;\n      }\n      DAT_0010d598 = uint_variable;\n      *(undefined *)(*(long *)(*long_pointer_2 + 8) + (long)(int)uint_variable) = 0;\n      *(undefined *)(*(long *)(*long_pointer_2 + 8) + 1 + (long)(int)uint_variable) = 0;\n      byte_pointer_2 = *(byte **)(*long_pointer_2 + 8);\n      DAT_0010d5c8 = byte_pointer_2;\n      if (integer_2 == 1) goto LAB_001048a4;\n      if (integer_2 == 2) goto LAB_001048ca;\n      byte_pointer_4 = byte_pointer_2 + integer;\n      DAT_0010d5b0 = byte_pointer_4;\n      uint_variable = FUN_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)byte_pointer - (long)byte_pointer_2 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    byte_pointer_4 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = byte_pointer_4;\n    ulong_variable = FUN_0010300e();\n    byte_pointer_3 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  byte_pointer_4 = byte_pointer_2 + integer;\n  DAT_0010d5b0 = byte_pointer_4;\n  ulong_variable = FUN_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong_variable * 2) != 0) {\n    DAT_0010d5b8 = byte_pointer_4;\n    DAT_0010d5c0 = (uint)ulong_variable;\n  }\n  ulong_variable_2 = ulong_variable & 0xffffffff;\n  while( true ) {\n    integer = (int)ulong_variable_2;\n    if (integer == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2)) break;\n    ulong_variable_2 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n  }\n  uint_variable = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2);\n  byte_pointer_3 = byte_pointer_2;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2) == 0)\n     || (uint_variable == 0xb0)) goto LAB_0010419f;\n  byte_pointer_4 = byte_pointer_4 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *byte_pointer_4 = DAT_0010d588;\n  ulong_variable = (ulong)DAT_0010d5c0;\n  byte_pointer_4 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharacter9 = ppcharacter9 + 1;\n  local_integer = 3;\n  *ppcharacter9 = DAT_0010d548;\nLAB_001049d1:\n  local_character_pointer = local_character_pointer + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "realloc",
                "FUN_0010312d",
                "bfd_openw",
                "FUN_001031cf",
                "dup",
                "fprintf",
                "stat",
                "FUN_001033d6",
                "FUN_00107740",
                "filename_cmp",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_0010300e",
                "clearerr",
                "printf",
                "fclose",
                "FUN_00105300",
                "bfd_set_format",
                "bfd_close",
                "getc",
                "fwrite",
                "__errno_location",
                "fread",
                "bfd_openr",
                "ferror",
                "dcgettext",
                "FUN_001033b0",
                "fopen",
                "FUN_00103df9",
                "FUN_001030ed",
                "bfd_cache_close",
                "FUN_0010315d",
                "FUN_00105bc0",
                "FUN_00103c60",
                "free",
                "FUN_00103ddc",
                "xstrdup",
                "malloc",
                "FUN_001032a8",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102f1e"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_reverse_functions_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "loopCounter"
            },
            "code": "\nvoid executeReverseFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long prevIndex;\n  long tempIndex;\n  long *functionList;\n  uint loopCounter;\n  \n  functionList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      loopCounter = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)loopCounter) {\n        currentIndex = (long)(int)loopCounter;\n        loopCounter = loopCounter & 7;\n        (*(code *)functionList[currentIndex + 2])();\n        prevIndex = currentIndex + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (loopCounter != 0) {\n            if (loopCounter != 1) {\n              if (loopCounter != 2) {\n                if (loopCounter != 3) {\n                  if (loopCounter != 4) {\n                    if (loopCounter != 5) {\n                      if (loopCounter != 6) {\n                        (*(code *)functionList[currentIndex + 1])();\n                        prevIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionList[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionList[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionList[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionList[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionList[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionList[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[currentIndex])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_reverse_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "execute_function_00105ae0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "arg1",
                "param_4": "arg2"
            },
            "code": "\nvoid executeFunction_00105ae0(undefined8 input1,undefined8 input2,undefined arg1,undefined arg2)\n\n{\n  FUN_00105af0(input1,input2,arg1,arg2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "execute_function_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "initialize_function_00107690",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "input_condition",
                "local_d8": "local_size",
                "local_d4": "local_value",
                "local_d0": "local_ptr",
                "local_c8": "local_buffer",
                "local_b8": "local_array",
                "local_b0": "local_param_10",
                "local_a8": "local_param_11",
                "local_a0": "local_param_12",
                "local_98": "local_param_13",
                "local_90": "local_param_14",
                "local_88": "local_param_1",
                "local_78": "local_param_2",
                "local_68": "local_param_3",
                "local_58": "local_param_4",
                "local_48": "local_param_5",
                "local_38": "local_param_6",
                "local_28": "local_param_7",
                "local_18": "local_param_8",
                "xexit": "exitProgram"
            },
            "code": "\nvoid initializeFunction_00107690(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char input_condition;\n  undefined4 local_size;\n  undefined4 local_value;\n  undefined *local_ptr;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 local_param_10;\n  undefined8 local_param_11;\n  undefined8 local_param_12;\n  undefined8 local_param_13;\n  undefined8 local_param_14;\n  undefined4 local_param_1;\n  undefined4 local_param_2;\n  undefined4 local_param_3;\n  undefined4 local_param_4;\n  undefined4 local_param_5;\n  undefined4 local_param_6;\n  undefined4 local_param_7;\n  undefined4 local_param_8;\n  \n  if (input_condition != '\\0') {\n    local_param_1 = input_1;\n    local_param_2 = input_2;\n    local_param_3 = input_3;\n    local_param_4 = input_4;\n    local_param_5 = input_5;\n    local_param_6 = input_6;\n    local_param_7 = input_7;\n    local_param_8 = input_8;\n  }\n  local_ptr = &stack0x00000008;\n  local_size = 8;\n  local_buffer = local_array;\n  local_value = 0x30;\n  local_param_10 = input_10;\n  local_param_11 = input_11;\n  local_param_12 = input_12;\n  local_param_13 = input_13;\n  local_param_14 = input_14;\n  FUN_001078c0(param_9,&local_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "initialize_function_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "file",
                "lVar1": "target",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *file)\n\n{\n  long target;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(file,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(file,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    target = *ptr;\n    ptr = ptr + 1;\n    if (target == 0) break;\n    fprintf(file,\" %s\");\n  }\n  fputc(10,file);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fprintf",
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_file_name_00105830",
                "param_1": "inputString",
                "param_2": "structPtr",
                "param_3": "unused1",
                "param_4": "unused2",
                "__s": "baseName",
                "uVar3": "length",
                "pcVar4": "destPtr",
                "bVar5": "byteVal",
                "auVar6": "returnValue",
                "lVar1": "structValue"
            },
            "code": "\nundefined  [16] extractFileName_00105830(char *inputString,long structPtr,undefined8 unused1,undefined8 unused2)\n\n{\n  long structValue;\n  size_t sVar2;\n  char *baseName;\n  ulong length;\n  char *destPtr;\n  byte byteVal;\n  undefined returnValue [16];\n  \n  byteVal = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    baseName = (char *)lbasename();\n    inputString = baseName;\n    if ((DAT_0010d5fa != '\\0') && (structPtr != 0)) {\n      sVar2 = strlen(baseName);\n      length = (ulong)*(byte *)(*(long *)(structPtr + 8) + 0x1e);\n      if (length < sVar2) {\n        inputString = (char *)xmalloc(length + 1);\n        structValue = *(long *)(structPtr + 8);\n        destPtr = inputString;\n        for (length = (ulong)*(byte *)(structValue + 0x1e); length != 0; length = length - 1) {\n          *destPtr = *baseName;\n          baseName = baseName + (ulong)byteVal * -2 + 1;\n          destPtr = destPtr + (ulong)byteVal * -2 + 1;\n        }\n        inputString[*(byte *)(structValue + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValue._8_8_ = unused2;\n  returnValue._0_8_ = inputString;\n  return returnValue;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "extract_file_name_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_function_00107730"
            },
            "code": "\nvoid cleanupFunction_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_function_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_00102f96"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileNumber",
                "piVar4": "errnoPtr",
                "lVar5": "baseAddress"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **outputFile,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileNumber;\n  int *errnoPtr;\n  long baseAddress;\n  \n  errnoPtr = __errno_location();\n  baseAddress = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (outputFile == *(FILE ***)(baseAddress + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    outputFile[2] = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (baseAddress != 0) {\n      if (outputFile == *(FILE ***)(baseAddress + DAT_0010d5a0 * 8)) {\n        FUN_001030ed();\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileNumber = fileno(inputFile);\n    fileNumber = isatty(fileNumber);\n    isTerminal = (uint)(0 < fileNumber);\n  }\n  *(uint *)((long)outputFile + 0x24) = isTerminal;\n  *errnoPtr = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "__errno_location",
                "fileno",
                "FUN_001030ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "update_pointers_0010312d",
                "param_1": "ptr1",
                "param_2": "ptr2",
                "lVar1": "ptr3"
            },
            "code": "\nvoid updatePointers_0010312d(long ptr1,long ptr2)\n\n{\n  long ptr3;\n  \n  if (ptr2 != 0) {\n    *(undefined8 *)(ptr2 + 0xf0) = *(undefined8 *)(ptr1 + 0xf0);\n  }\n  ptr3 = DAT_0010d558;\n  *(undefined8 *)(ptr1 + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(ptr3 + 0xf8) = ptr1;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "update_pointers_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_data_to_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "iVar2": "bytesRead",
                "_Var3": "sourceFileOffset",
                "uVar4": "returnValue",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyDataToFile_00105c00(int sourceFileDescriptor,char *destinationFilePath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int bytesRead;\n  __off_t sourceFileOffset;\n  ulong returnValue;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFileOffset = lseek(sourceFileDescriptor,0,0), sourceFileOffset == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      returnValue = FUN_00102f55();\n      return returnValue;\n    }\n    do {\n      returnValue = read(sourceFileDescriptor,buffer,0x2000);\n      bytesRead = (int)returnValue;\n      if (bytesRead < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (bytesRead != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return returnValue & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)bytesRead);\n    } while (bytesWritten == (long)bytesRead);\n    errnoPointer = __errno_location();\n    bytesRead = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = bytesRead;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "write",
                "close",
                "open",
                "FUN_00102f55",
                "__errno_location",
                "lseek",
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_data_to_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "get_file_information_001052a0",
                "param_1": "filePath",
                "iVar1": "status",
                "piVar2": "error",
                "uVar3": "warning",
                "pcVar4": "errorMsg",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong getFileInformation_001052a0(char *filePath)\n\n{\n  int status;\n  int *error;\n  undefined8 warning;\n  char *errorMsg;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    status = stat(filePath,&fileStat);\n    if (status < 0) {\n      error = __errno_location();\n      if (*error == 2) {\n        warning = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00107920(warning,filePath);\n      }\n      else {\n        errorMsg = strerror(*error);\n        warning = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00107920(warning,filePath,errorMsg);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      warning = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00107920(warning,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      warning = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00107920(warning,filePath);\n    }\n    else {\n      warning = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00107920(warning,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext",
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "get_file_information_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionsText"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionsText;\n  \n  optionsText = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionsText);\n  optionsText = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionsText);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00103ba8",
                "FUN_001031a5",
                "FUN_00105db0",
                "FUN_001075e0",
                "FUN_00103172",
                "FUN_00103a78",
                "FUN_00103e95",
                "FUN_00102f08"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "initialize_output_archive_00103c60",
                "param_1": "inputArchivePath",
                "param_2": "isPlugin",
                "piVar2": "errorNumber",
                "pcVar3": "errorMessage",
                "lVar4": "inputArchiveHandle",
                "lVar5": "archivedFileHandle",
                "uVar6": "programName",
                "plVar7": "archivedFileList"
            },
            "code": "\n\n\nvoid initializeOutputArchive_00103c60(char *inputArchivePath,int isPlugin)\n\n{\n  char cVar1;\n  int *errorNumber;\n  char *errorMessage;\n  long inputArchiveHandle;\n  long archivedFileHandle;\n  undefined8 programName;\n  long *archivedFileList;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)FUN_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errorNumber = __errno_location();\n    inputArchivePath = strerror(*errorNumber);\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      errorMessage = \"%s: Can\\'t open output archive %s\\n\";\n      inputArchivePath = DAT_0010d560;\n    }\n    else {\n      if (isPlugin != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      inputArchiveHandle = bfd_openr(inputArchivePath,\"plugin\");\n      if (inputArchiveHandle == 0) {\n        errorMessage = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        cVar1 = bfd_check_format(inputArchiveHandle,2);\n        if (cVar1 != '\\0') {\n          archivedFileList = (long *)(DAT_0010d558 + 0xf8);\n          for (archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,0); archivedFileHandle != 0;\n              archivedFileHandle = bfd_openr_next_archived_file(inputArchiveHandle,archivedFileHandle)) {\n            *archivedFileList = archivedFileHandle;\n            archivedFileList = (long *)(archivedFileHandle + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        errorMessage = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    programName = DAT_0010d660;\n    errorMessage = (char *)dcgettext(0,errorMessage,5);\n  }\n  fprintf(_stderr,errorMessage,programName,inputArchivePath);\n  FUN_0010315d();\n  return;\n}\n\n",
            "called": [
                "FUN_0010315d",
                "bfd_set_format",
                "bfd_openr_next_archived_file",
                "__errno_location",
                "bfd_check_format",
                "bfd_openr",
                "strerror",
                "bfd_fdopenw",
                "xstrdup",
                "dcgettext",
                "fprintf",
                "FUN_001057a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_output_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "initialize_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid initializeFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "initialize_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "archive_file_search_00105af0",
                "param_1": "file_list",
                "param_2": "archive_handle",
                "param_3": "check_flag",
                "param_4": "format_flag",
                "cVar1": "format_result",
                "uVar2": "search_result",
                "lVar3": "archived_file",
                "uVar4": "match_count"
            },
            "code": "\nulong archive_file_search_00105af0(long *file_list,long archive_handle,char check_flag,char format_flag)\n\n{\n  char format_result;\n  uint search_result;\n  long archived_file;\n  ulong match_count;\n  \n  if (format_flag == '\\0') {\n    if (check_flag != '\\0') {\n      match_count = FUN_00102f08();\n      return match_count;\n    }\n  }\n  else {\n    format_result = bfd_check_format(archive_handle,2);\n    if (format_result != '\\0') {\n      match_count = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_handle,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_handle,archived_file)) {\n        search_result = archive_file_search_00105af0(file_list,archived_file,check_flag,1);\n        if ((char)search_result != '\\0') {\n          match_count = (ulong)search_result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return match_count;\n    }\n    if (check_flag != '\\0') {\n      match_count = FUN_00102f08();\n      return match_count;\n    }\n  }\n  *(long *)(archive_handle + 0xf0) = *file_list;\n  *file_list = archive_handle;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_001028ed",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "archive_file_search_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_values_0010300e",
                "iVar2": "currentIndex",
                "lVar3": "updatedIndex",
                "bVar1": "matchFound",
                "bVar4": "valueToCheck",
                "pbVar5": "currentByte",
                "in_R9": "matchingByte",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingValues_0010300e(void)\n\n{\n  bool matchFound;\n  int currentIndex;\n  long updatedIndex;\n  byte valueToCheck;\n  byte *currentByte;\n  byte *matchingByte;\n  int matchingIndex;\n  \n  matchFound = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    valueToCheck = 1;\n    if (*currentByte != 0) {\n      valueToCheck = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      matchFound = true;\n      matchingByte = currentByte;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      updatedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)valueToCheck);\n      if (*(short *)(&DAT_0010a440 + updatedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        valueToCheck = (&DAT_0010a7c0)[(int)(uint)valueToCheck];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + updatedIndex * 2);\n  }\n  if (matchFound) {\n    DAT_0010d5b8 = matchingByte;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_values_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_memory_00102ba1",
                "auVar1": "result",
                "unaff_RBP": "memoryAddress",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] freeMemory_00102ba1(void)\n\n{\n  undefined result [16];\n  void *memoryAddress;\n  ulong returnAddress;\n  \n  free(memoryAddress);\n  result._8_8_ = 0;\n  result._0_8_ = returnAddress;\n  return result << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_memory_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_write_archive_00107740",
                "param_1": "archivePtr",
                "iVar1": "comparisonResult",
                "iVar2": "statResult",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "uVar5": "translation",
                "pplVar6": "filePtr",
                "__ptr": "buffer",
                "__n": "readSize",
                "lVar7": "loopCounter",
                "plVar8": "currentPtr",
                "puVar9": "localArrayPtr",
                "uVar10": "totalReadSize",
                "sVar11": "writeSize",
                "local_c8": "localArray",
                "_Stack_b0": "filePermissions",
                "uStack_98": "archiveSize",
                "uStack_80": "fileSize",
                "uStack_70": "nextFileSize"
            },
            "code": "\n\n\nlong * extractAndWriteArchive_00107740(long **archivePtr)\n\n{\n  int comparisonResult;\n  int statResult;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 translation;\n  long **filePtr;\n  void *buffer;\n  size_t readSize;\n  long loopCounter;\n  long *currentPtr;\n  undefined4 *localArrayPtr;\n  ulong totalReadSize;\n  size_t writeSize;\n  undefined4 localArray [6];\n  __mode_t filePermissions;\n  ulong archiveSize;\n  undefined8 fileSize;\n  undefined8 nextFileSize;\n  \n  if (_DAT_0010d600 != 0) {\n    localArrayPtr = localArray;\n    for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *localArrayPtr = 0;\n      localArrayPtr = localArrayPtr + 1;\n    }\n  }\n  filePtr = (long **)archivePtr[0x1d];\n  if ((long **)archivePtr[0x1d] == (long **)0x0) {\n    filePtr = archivePtr;\n  }\n  statResult = (*(code *)filePtr[1][0x3d])(archivePtr,localArray);\n  if (statResult != 0) {\n    currentPtr = *archivePtr;\n    translation = dcgettext(0,\"internal stat error on %s\",5);\n    statResult = FUN_00107690(translation,currentPtr);\n    translation = DAT_0010d638;\n    if (statResult == 3) {\n      for (; *currentPtr != 0; currentPtr = (long *)(*currentPtr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentPtr != (undefined8 *)0x0; currentPtr = (long *)(*currentPtr + 0xf0)) {\n        comparisonResult = filename_cmp(*(undefined8 *)*currentPtr,translation);\n        if (comparisonResult == 0) {\n          if (statResult != 2) {\n            return currentPtr;\n          }\n          return (long *)(*currentPtr + 0xf0);\n        }\n      }\n    }\n    return currentPtr;\n  }\n  bfd_seek(archivePtr,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*archivePtr);\n  }\n  else {\n    totalReadSize = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      writeSize = archiveSize - totalReadSize;\n      if (0x2000 < writeSize) {\n        writeSize = 0x2000;\n      }\n      readSize = bfd_bread(buffer,writeSize,archivePtr);\n      if (writeSize != readSize) {\nLAB_00102c78:\n        archivePtr = (long **)*archivePtr[0x1d];\n        translation = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(translation,archivePtr);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*archivePtr);\n      }\n      writeSize = fwrite(buffer,1,readSize,DAT_0010d5d8);\n      if (writeSize != readSize) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      totalReadSize = totalReadSize + readSize;\n    } while (totalReadSize < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,filePermissions);\n  if (_DAT_0010d600 != 0) {\n    fileSize = nextFileSize;\n    FUN_00107c80(errorString,localArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "randomByte",
                "cVar2": "result",
                "iVar3": "returnValue",
                "__format": "formatString",
                "uVar4": "filePermission",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "outputFile",
                "unaff_R12": "flag",
                "unaff_R13": "buffer",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "fileType",
                "cStack0000000000000016": "flag1",
                "cStack0000000000000017": "flag2",
                "in_stack_00000018": "flag3",
                "cStack0000000000000019": "flag4",
                "cStack000000000000001a": "flag5",
                "cStack000000000000001b": "flag6",
                "cStack000000000000001c": "flag7",
                "cStack000000000000001d": "flag8",
                "cStack000000000000001e": "flag9",
                "uStack000000000000001f": "flag10",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileSizeLow",
                "in_stack_00000070": "fileSizeHigh",
                "in_stack_00000080": "fileTime",
                "dup": "duplicateFileDescriptor",
                "bfd_set_archive_head": "setArchiveHead",
                "bfd_close": "closeFile",
                "free": "deallocateMemory",
                "xexit": "exitProgram",
                "dcgettext": "getTranslation",
                "sprintf": "formatStringToBuffer",
                "fprintf": "writeFormattedOutput",
                "fputs": "writeString",
                "fputc": "writeCharacter"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte randomByte;\n  char result;\n  int returnValue;\n  char *formatString;\n  uint filePermission;\n  char **fileContents;\n  FILE *outputFile;\n  long flag;\n  void *buffer;\n  int fileDescriptor;\n  undefined fileType;\n  char flag1;\n  char flag2;\n  char flag3;\n  char flag4;\n  char flag5;\n  char flag6;\n  char flag7;\n  char flag8;\n  char flag9;\n  undefined flag10;\n  uint fileMode;\n  uint fileSizeLow;\n  uint fileSizeHigh;\n  undefined8 fileTime;\n  \n  do {\n    randomByte = FUN_00107c10();\n    *(uint *)((long)fileContents + 0x44) = *(uint *)((long)fileContents + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(flag + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileContents + 0x49) = randomByte | 0x10;\n    }\n    result = bfd_set_archive_head();\n  } while (result == '\\0');\n  duplicateFileDescriptor(fileDescriptor);\n  result = bfd_close();\n  if (result != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    returnValue = FUN_00105bc0();\n    if (returnValue == 0) {\n      free(buffer);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  FUN_00107c10();\n  formatString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,formatString);\n  filePermission = fileMode & 0xf000;\n  if (filePermission == 0x4000) {\n    fileType = 100;\n  }\n  else if (filePermission == 0xa000) {\n    fileType = 0x6c;\n  }\n  else if (filePermission == 0x6000) {\n    fileType = 0x62;\n  }\n  else if (filePermission == 0x2000) {\n    fileType = 99;\n  }\n  else if (filePermission == 0xc000) {\n    fileType = 0x73;\n  }\n  else {\n    fileType = 0x70;\n    if (filePermission != 0x1000) {\n      fileType = 0x2d;\n    }\n  }\n  flag1 = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  flag2 = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  flag3 = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  flag4 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  flag5 = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  flag6 = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  flag7 = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  flag8 = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  flag9 = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (flag3 == 'x') {\n      flag3 = 's';\n    }\n    else {\n      flag3 = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (flag6 == 'x') {\n      flag6 = 's';\n    }\n    else {\n      flag6 = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (flag9 == 'x') {\n      flag9 = 't';\n    }\n    else {\n      flag9 = 'T';\n    }\n  }\n  flag10 = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileSizeLow,\n          (ulong)fileSizeHigh,fileTime,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileContents,outputFile);\n  if ((char)flag != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "bfd_set_archive_head",
                "xexit",
                "bfd_close",
                "free",
                "FUN_00102d2f",
                "dup",
                "FUN_00107c10"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_binary_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "intVar",
                "sVar4": "sizeVar",
                "piVar5": "ptrVar5",
                "pcVar6": "ptrVar6",
                "pcVar7": "ptrVar7",
                "ppcVar8": "ptrPtrVar8",
                "uVar9": "undefinedVar9",
                "lVar10": "longVar10",
                "__s": "strVar1",
                "__s_00": "strVar2",
                "lVar11": "longVar11",
                "uVar12": "undefinedVar12",
                "uVar13": "ulongVar13",
                "unaff_RBX": "unaffRBX",
                "ppcVar14": "ptrPtrVar14",
                "unaff_RBP": "unaffRBP",
                "unaff_R12": "unaffR12",
                "unaff_R13D": "unaffR13D",
                "ppcVar15": "ptrPtrVar15",
                "unaff_R14": "unaffR14",
                "bVar16": "boolVar16",
                "bVar17": "byteVar17",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2"
            },
            "code": "\n\n\nundefined8 processBinary_001028ed(undefined8 param1,long param2)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int intVar;\n  size_t sizeVar;\n  int *ptrVar5;\n  char *ptrVar6;\n  char *ptrVar7;\n  char **ptrPtrVar8;\n  undefined8 undefinedVar9;\n  long longVar10;\n  char *strVar1;\n  char *strVar2;\n  long longVar11;\n  undefined8 undefinedVar12;\n  ulong ulongVar13;\n  char *unaffRBX;\n  char **ptrPtrVar14;\n  char **unaffRBP;\n  char **unaffR12;\n  uint unaffR13D;\n  char **ptrPtrVar15;\n  long unaffR14;\n  bool boolVar16;\n  byte byteVar17;\n  char **param7;\n  undefined8 param9;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar17 = 0;\ncode_r0x001028ed:\n  FUN_00107c10(unaffRBX,param2);\nLAB_001028f5:\n  undefinedVar12 = DAT_0010d638;\n  if (unaffR13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*unaffR12 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar = filename_cmp(*(undefined8 *)*unaffR12,undefinedVar12);\n      if (intVar == 0) break;\n      unaffR12 = (char **)(*unaffR12 + 0xf0);\n    }\n    if (unaffR13D != 2) goto LAB_0010571f;\n    unaffR12 = (char **)(*unaffR12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar10 = *(long *)(unaffR14 + 0xf0);\n  if (*(long *)(unaffR14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar11 = longVar10;\n    longVar10 = *(long *)(longVar11 + 0xf0);\n  } while (longVar10 != 0);\n  unaffR12 = (char **)(longVar11 + 0xf0);\n  unaffRBX = *unaffRBP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  unaffR13D = (uint)(DAT_0010d60c != 0);\n  param2 = bfd_openr(unaffRBX,DAT_0010d5f0);\n  if (param2 != 0) {\n    unaffRBP = unaffRBP + 1;\n    byteVar2 = FUN_00105af0(unaffR12,param2,unaffR13D,undefinedVar1);\n    param9._6_1_ = param9._6_1_ | byteVar2;\n    ptrVar6 = *unaffRBP;\n    do {\n      if (ptrVar6 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefinedVar12 = FUN_001058b0();\n        return undefinedVar12;\n      }\n      ptrPtrVar14 = *(char ***)(unaffR14 + 0xf0);\n      unaffR12 = param7;\n      if (param9._7_1_ == '\\0') {\n        ptrPtrVar15 = param7;\n        if (ptrPtrVar14 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              strVar1 = (char *)lbasename(*ptrPtrVar14);\n              ptrVar7 = strVar1;\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(strVar1);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(unaffR14 + 8) + 0x1e);\n                if (ulongVar13 < sizeVar) {\n                  ptrVar7 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(unaffR14 + 8);\n                  ptrVar6 = ptrVar7;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *ptrVar6 = *strVar1;\n                    strVar1 = strVar1 + (ulong)byteVar17 * -2 + 1;\n                    ptrVar6 = ptrVar6 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  ptrVar7[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                ptrVar6 = *unaffRBP;\n                strVar1 = ptrVar7;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              ptrVar6 = *unaffRBP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              strVar2 = (char *)lbasename(ptrVar6);\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(strVar2);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(unaffR14 + 8) + 0x1e);\n                ptrVar6 = strVar2;\n                strVar1 = ptrVar7;\n                if (ulongVar13 < sizeVar) {\n                  ptrVar6 = (char *)xmalloc(ulongVar13 + 1);\n                  longVar10 = *(long *)(unaffR14 + 8);\n                  ptrVar7 = ptrVar6;\n                  for (ulongVar13 = (ulong)*(byte *)(longVar10 + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *ptrVar7 = *strVar2;\n                    strVar2 = strVar2 + (ulong)byteVar17 * -2 + 1;\n                    ptrVar7 = ptrVar7 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  ptrVar6[*(byte *)(longVar10 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar = filename_cmp(strVar2,ptrVar7);\n            }\n            else {\n              ptrVar6 = *unaffRBP;\n              strVar1 = *ptrPtrVar14;\nLAB_00102980:\n              intVar = filename_cmp(ptrVar6,strVar1);\n            }\n            if ((intVar == 0) && (ptrPtrVar14[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                intVar = stat(*unaffRBP,(stat *)&stack0x000000b0);\n                if (intVar != 0) {\n                  ptrVar5 = __errno_location();\n                  if (*ptrVar5 != 2) {\n                    FUN_00107c10(*unaffRBP);\nLAB_00102b7e:\n                    ptrVar6 = *ptrPtrVar14;\n                    undefinedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n                    FUN_00107690(undefinedVar12,ptrVar6);\n                    free(unaffRBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                ptrPtrVar8 = (char **)ptrPtrVar14[0x1d];\n                if ((char **)ptrPtrVar14[0x1d] == (char **)0x0) {\n                  ptrPtrVar8 = ptrPtrVar14;\n                }\n                intVar = (**(code **)(ptrPtrVar8[1] + 0x1e8))(ptrPtrVar14,&stack0x00000020);\n                if (intVar != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              undefinedVar12 = FUN_00105870(param7,2,*ptrPtrVar14);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                ptrVar6 = *unaffRBP;\n                boolVar16 = DAT_0010d60c != 0;\n                longVar10 = bfd_openr(ptrVar6,DAT_0010d5f0);\n                if (longVar10 == 0) {\n                  FUN_00107c10(ptrVar6,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = FUN_00103172(undefinedVar12,longVar10,boolVar16);\n              }\n              else {\n                undefinedVar9 = FUN_00105830(*unaffRBP);\n                intVar = filename_cmp(undefinedVar9,\"__.LIBDEP\");\n                if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = FUN_00103172(undefinedVar12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *ptrPtrVar15 = *(char **)(*ptrPtrVar15 + 0xf0);\n                param9._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            ptrPtrVar15 = ptrPtrVar14 + 0x1e;\n            ptrPtrVar14 = (char **)ptrPtrVar14[0x1e];\n          } while (ptrPtrVar14 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unaffR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unaffR13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        longVar10 = *(long *)(unaffR14 + 0xf0);\n        if (*(long *)(unaffR14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaffRBX = *unaffRBP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar12 = FUN_00105830(unaffRBX);\n      intVar = filename_cmp(undefinedVar12,\"__.LIBDEP\");\n      if (intVar != 0) goto code_r0x0010574f;\n      byteVar2 = FUN_00105ae0(unaffR12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      param9._6_1_ = byteVar2 | param9._6_1_;\nLAB_0010577e:\n      unaffRBP = unaffRBP + 1;\n      ptrVar6 = *unaffRBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaffRBX = *unaffRBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "__errno_location",
                "bfd_openr",
                "xmalloc",
                "FUN_00102943",
                "FUN_00105870",
                "FUN_00103172",
                "dcgettext",
                "stat",
                "FUN_00105ae0",
                "FUN_001058b0",
                "filename_cmp",
                "FUN_001028ed",
                "FUN_00105830",
                "strlen",
                "lbasename",
                "FUN_00105af0",
                "FUN_00107c10",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_binary_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00102c25",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorOutput",
                "fprintf": "printToErrorOutput",
                "exit": "exitProgram"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorOutput,\"%s\\n\",errorMessage);\n                    \n  exitProgram(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleFileError_001025a0(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00107920(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00107920(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "FUN_00107920",
                "__errno_location",
                "strerror",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_0010284b",
                "undefined8": "void",
                "return": "result"
            },
            "code": "\nvoid initialize_0010284b(void)\n\n{\n  result 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_files_from_archive_00102c25",
                "param_7": "permissions",
                "param_11": "mode",
                "param_12": "archiveSize",
                "iVar1": "cmpResult",
                "iVar2": "statError",
                "piVar3": "errnoLocation",
                "pcVar4": "errorCode",
                "uVar5": "errorMessage",
                "pplVar6": "archiveData",
                "__ptr": "buffer",
                "__n": "bytesRead",
                "lVar7": "loopCounter",
                "unaff_RBX": "currentFile",
                "plVar8": "currentEntry",
                "puVar9": "paramPointer",
                "uVar10": "totalBytesRead",
                "sVar11": "readSize"
            },
            "code": "\n\n\nlong * extractFilesFromArchive_00102c25(void)\n\n{\n  int cmpResult;\n  int statError;\n  int *errnoLocation;\n  char *errorCode;\n  undefined8 errorMessage;\n  long **archiveData;\n  void *buffer;\n  size_t bytesRead;\n  long loopCounter;\n  long **currentFile;\n  long *currentEntry;\n  undefined4 *paramPointer;\n  ulong totalBytesRead;\n  size_t readSize;\n  undefined4 *permissions;\n  __mode_t mode;\n  ulong archiveSize;\n  \n  paramPointer = permissions;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  archiveData = (long **)currentFile[0x1d];\n  if ((long **)currentFile[0x1d] == (long **)0x0) {\n    archiveData = currentFile;\n  }\n  statError = (*(code *)archiveData[1][0x3d])();\n  if (statError != 0) {\n    currentEntry = *currentFile;\n    errorMessage = dcgettext(0,\"internal stat error on %s\",5);\n    statError = FUN_00107690(errorMessage,currentEntry);\n    errorMessage = DAT_0010d638;\n    if (statError == 3) {\n      for (; *currentEntry != 0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*currentEntry != (undefined8 *)0x0; currentEntry = (long *)(*currentEntry + 0xf0)) {\n        cmpResult = filename_cmp(*(undefined8 *)*currentEntry,errorMessage);\n        if (cmpResult == 0) {\n          if (statError != 2) {\n            return currentEntry;\n          }\n          return (long *)(*currentEntry + 0xf0);\n        }\n      }\n    }\n    return currentEntry;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archiveSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)FUN_00105a20(*currentFile);\n  }\n  else {\n    totalBytesRead = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      readSize = archiveSize - totalBytesRead;\n      if (0x2000 < readSize) {\n        readSize = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,readSize);\n      if (readSize != bytesRead) {\nLAB_00102c78:\n        currentFile = (long **)*currentFile[0x1d];\n        errorMessage = dcgettext(0,\"%s is not a valid archive\",5);\n        FUN_00107690(errorMessage,currentFile);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)FUN_00105a20(*currentFile);\n      }\n      readSize = fwrite(buffer,1,bytesRead,DAT_0010d5d8);\n      if (readSize != bytesRead) {\n        errnoLocation = __errno_location();\n        errorCode = strerror(*errnoLocation);\n        FUN_00107690(\"%s: %s\",DAT_0010d618,errorCode);\n        goto LAB_00102c78;\n      }\n      totalBytesRead = totalBytesRead + bytesRead;\n    } while (totalBytesRead < archiveSize);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  errorCode = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,mode);\n  if (_DAT_0010d600 != 0) {\n    FUN_00107c80(errorCode,permissions);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "chmod",
                "FUN_00105a20",
                "bfd_seek",
                "fwrite",
                "__errno_location",
                "xmalloc",
                "strerror",
                "dcgettext",
                "bfd_bread",
                "free",
                "FUN_00107c80",
                "fclose",
                "FUN_00107690"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_files_from_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_and_null_terminate_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "length",
                "puVar3": "outputString",
                "uVar4": "maxLength",
                "unaff_RBX": "source",
                "unaff_RBP": "framePointer",
                "puVar5": "dst",
                "bVar6": "flag",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] copyAndNullTerminateString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t length;\n  undefined *outputString;\n  ulong maxLength;\n  undefined *source;\n  long framePointer;\n  undefined *dst;\n  byte flag;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  flag = 0;\n  length = strlen(inputString);\n  maxLength = (ulong)*(byte *)(*(long *)(framePointer + 8) + 0x1e);\n  outputString = source;\n  if (maxLength < length) {\n    outputString = (undefined *)xmalloc(maxLength + 1);\n    lVar1 = *(long *)(framePointer + 8);\n    dst = outputString;\n    for (maxLength = (ulong)*(byte *)(lVar1 + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *dst = *source;\n      source = source + (ulong)flag * -2 + 1;\n      dst = dst + (ulong)flag * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = outputString;\n  return returnValue;\n}\n\n",
            "called": [
                "strlen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00102d2f",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "stringPtr",
                "unaff_R12": "targetPtr"
            },
            "code": "\nundefined8 printAndAssign_00102f08(void)\n\n{\n  undefined8 *stringPtr;\n  undefined8 *targetPtr;\n  \n  printf(\"a - %s\\n\",*stringPtr);\n  stringPtr[0x1e] = *targetPtr;\n  *targetPtr = stringPtr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "ptr1",
                "param_2": "filePaths",
                "param_3": "flag",
                "ppcVar1": "ptrPaths",
                "uVar2": "result",
                "bVar3": "flag1",
                "iVar4": "index",
                "sVar5": "size",
                "piVar6": "ptrErrno",
                "pcVar7": "fileName1",
                "pcVar8": "fileName2",
                "uVar9": "result2",
                "pcVar10": "currentFile",
                "__s": "baseName",
                "lVar11": "currentPath",
                "lVar12": "nextPath",
                "uVar13": "result3",
                "uVar14": "length",
                "ppcVar15": "currentPathList",
                "ppcVar16": "nextPathList",
                "uVar17": "flag2",
                "ppcVar18": "nextPathList2",
                "bVar19": "flag3",
                "bVar20": "zeroByte",
                "local_15a": "localFlag",
                "auStack_158": "stackBuffer",
                "lStack_100": "timeLimit",
                "sStack_c8": "fileStatus"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long ptr1,char **filePaths,char flag)\n\n{\n  char **ptrPaths;\n  undefined result;\n  byte flag1;\n  int index;\n  size_t size;\n  int *ptrErrno;\n  char *fileName1;\n  char *fileName2;\n  undefined8 result2;\n  char *currentFile;\n  char *baseName;\n  long currentPath;\n  long nextPath;\n  undefined8 result3;\n  ulong length;\n  char **currentPathList;\n  char **nextPathList;\n  uint flag2;\n  char **nextPathList2;\n  bool flag3;\n  byte zeroByte;\n  byte localFlag;\n  undefined stackBuffer [88];\n  long timeLimit;\n  stat fileStatus;\n  \n  zeroByte = 0;\n  ptrPaths = (char **)(ptr1 + 0xf0);\n  localFlag = 0;\n  if (filePaths == (char **)0x0) {\n    result3 = FUN_00102943();\n    return result3;\n  }\n  do {\n    currentFile = *filePaths;\njoined_r0x001055aa:\n    if (currentFile == (char *)0x0) {\n      if (localFlag != 0) {\n        result3 = FUN_001058b0(ptr1);\n        return result3;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentPathList = *(char ***)(ptr1 + 0xf0);\n    nextPathList = ptrPaths;\n    if (flag != '\\0') {\nLAB_0010564c:\n      flag2 = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextPath = *(long *)(ptr1 + 0xf0);\n      if (*(long *)(ptr1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPath = nextPath;\n        nextPath = *(long *)(currentPath + 0xf0);\n      } while (nextPath != 0);\n      nextPathList = (char **)(currentPath + 0xf0);\n      currentFile = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          result3 = FUN_00105830(currentFile,ptr1);\n          index = filename_cmp(result3,\"__.LIBDEP\");\n          if (index == 0) {\n            flag1 = FUN_00105ae0(nextPathList,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            localFlag = flag1 | localFlag;\n            goto LAB_0010577e;\n          }\n          currentFile = *filePaths;\n        }\n        result = DAT_0010d5f8;\n        flag3 = DAT_0010d60c != 0;\n        nextPath = bfd_openr(currentFile,DAT_0010d5f0);\n        if (nextPath != 0) {\n          filePaths = filePaths + 1;\n          flag1 = FUN_00105af0(nextPathList,nextPath,(uint)flag3,result);\n          localFlag = localFlag | flag1;\n          currentFile = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        FUN_00107c10(currentFile,0);\n        flag2 = (uint)flag3;\nLAB_001028f5:\n        result3 = DAT_0010d638;\n        if (flag2 == 3) {\n          nextPath = *(long *)(ptr1 + 0xf0);\n          if (*(long *)(ptr1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*nextPathList != (undefined8 *)0x0;\n              nextPathList = (char **)(*nextPathList + 0xf0)) {\n            index = filename_cmp(*(undefined8 *)*nextPathList,result3);\n            if (index == 0) {\n              if (flag2 == 2) {\n                nextPathList = (char **)(*nextPathList + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFile = *filePaths;\n      } while( true );\n    }\n    nextPathList2 = ptrPaths;\n    if (currentPathList == (char **)0x0) {\n      flag2 = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFile = (char *)lbasename(*currentPathList);\n      fileName2 = currentFile;\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(currentFile);\n        length = (ulong)*(byte *)(*(long *)(ptr1 + 8) + 0x1e);\n        if (length < size) {\n          fileName2 = (char *)xmalloc(length + 1);\n          nextPath = *(long *)(ptr1 + 8);\n          fileName1 = fileName2;\n          for (length = (ulong)*(byte *)(nextPath + 0x1e); length != 0; length = length - 1) {\n            *fileName1 = *currentFile;\n            currentFile = currentFile + (ulong)zeroByte * -2 + 1;\n            fileName1 = fileName1 + (ulong)zeroByte * -2 + 1;\n          }\n          fileName2[*(byte *)(nextPath + 0x1e)] = '\\0';\n        }\n        fileName1 = *filePaths;\n        currentFile = fileName2;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      fileName1 = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName = (char *)lbasename(fileName1);\n      if (DAT_0010d5fa != '\\0') {\n        size = strlen(baseName);\n        length = (ulong)*(byte *)(*(long *)(ptr1 + 8) + 0x1e);\n        fileName1 = baseName;\n        currentFile = fileName2;\n        if (length < size) {\n          fileName1 = (char *)xmalloc(length + 1);\n          nextPath = *(long *)(ptr1 + 8);\n          fileName2 = fileName1;\n          for (length = (ulong)*(byte *)(nextPath + 0x1e); length != 0; length = length - 1) {\n            *fileName2 = *baseName;\n            baseName = baseName + (ulong)zeroByte * -2 + 1;\n            fileName2 = fileName2 + (ulong)zeroByte * -2 + 1;\n          }\n          fileName1[*(byte *)(nextPath + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      index = filename_cmp(baseName,fileName2);\n      if (index == 0) goto LAB_00102993;\nLAB_00105639:\n      nextPathList2 = currentPathList + 0x1e;\n      currentPathList = (char **)currentPathList[0x1e];\n      if (currentPathList == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    fileName1 = *filePaths;\n    currentFile = *currentPathList;\nLAB_00102980:\n    index = filename_cmp(fileName1,currentFile);\n    if (index != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentPathList[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      index = stat(*filePaths,&fileStatus);\n      if (index != 0) {\n        ptrErrno = __errno_location();\n        if (*ptrErrno != 2) {\n          FUN_00107c10(*filePaths);\nLAB_00102b7e:\n          currentFile = *currentPathList;\n          result3 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00107690(result3,currentFile);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      nextPathList = (char **)currentPathList[0x1d];\n      if ((char **)currentPathList[0x1d] == (char **)0x0) {\n        nextPathList = currentPathList;\n      }\n      index = (**(code **)(nextPathList[1] + 0x1e8))(currentPathList,stackBuffer);\n      if (index != 0) goto LAB_00102b7e;\n      if (fileStatus.st_mtim.tv_sec <= timeLimit) goto LAB_0010577e;\n    }\n    result3 = FUN_00105870(ptrPaths,2,*currentPathList);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFile = *filePaths;\n      flag3 = DAT_0010d60c != 0;\n      nextPath = bfd_openr(currentFile,DAT_0010d5f0);\n      if (nextPath == 0) {\n        FUN_00107c10(currentFile,0);\n        goto LAB_00102b3e;\n      }\n      flag1 = FUN_00103172(result3,nextPath,flag3);\n    }\n    else {\n      result2 = FUN_00105830(*filePaths,ptr1);\n      index = filename_cmp(result2,\"__.LIBDEP\");\n      if (index != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      flag1 = FUN_00103172(result3,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (flag1 != 0) {\n      *nextPathList2 = *(char **)(*nextPathList2 + 0xf0);\n      localFlag = flag1;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 79643,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_0010285f",
            "FUN_00102f96",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_00102e6f",
            "FUN_0010315d",
            "FUN_00107890",
            "FUN_001033d6",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00105bc0",
            "FUN_00107650",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103ba8",
            "FUN_00103ddc",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_00105480",
            "FUN_001031a5",
            "FUN_00103df9",
            "FUN_00103a78",
            "FUN_001058b0",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00107c80",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00105300",
            "FUN_00105db0",
            "FUN_00103bd1",
            "FUN_00107c10",
            "FUN_00102710",
            "FUN_00103e95",
            "FUN_00107cc0",
            "FUN_00105ae0",
            "FUN_00107690",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_001031cf",
            "FUN_0010312d",
            "FUN_00105c00",
            "FUN_001052a0",
            "FUN_0010336b",
            "FUN_00103c60",
            "FUN_00102e57",
            "FUN_00105af0",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_001028ed",
            "FUN_001033b0",
            "FUN_001025a0",
            "FUN_0010284b",
            "FUN_00102c25",
            "FUN_00102bb0",
            "FUN_00102f08",
            "FUN_00105570"
        ]
    ],
    "locked_functions": []
}