{
    "functions": {
        "FUN_0010c1a0": {
            "renaming": {},
            "code": "\n\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* asprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a0",
            "calling": [
                "asprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a0"
        },
        "FUN_001055a0": {
            "renaming": {
                "FUN_001055a0": "initialize_application_001055a0",
                "completed_0": "isInitialized",
                "__cxa_finalize": "finalizeDynamicInitialization",
                "__dso_handle": "dynamicSharedObjectHandle",
                "deregister_tm_clones": "deregisterTempClones"
            },
            "code": "\nvoid initializeApplication_001055a0(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  finalizeDynamicInitialization(dynamicSharedObjectHandle);\n  deregisterTempClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_application_001055a0"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "set_print_width.cold",
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "extract_relocation_information_00103c00",
                "param_1": "input_data",
                "param_2": "file_offset",
                "param_3": "reloc_info",
                "puVar1": "relocation_ptr",
                "auVar2": "temp_buffer",
                "lVar3": "upper_bound",
                "uVar4": "allocated_memory",
                "uVar5": "canonicalized_reloc"
            },
            "code": "\nundefined8\nextract_relocation_information_00103c00(undefined8 *input_data,long file_offset,undefined (*reloc_info) [16],undefined8 param_4,\n            undefined8 param_5)\n\n{\n  undefined8 *relocation_ptr;\n  undefined temp_buffer [16];\n  long upper_bound;\n  undefined8 allocated_memory;\n  undefined8 canonicalized_reloc;\n  \n  **(long **)*reloc_info = file_offset;\n  if ((*(byte *)(file_offset + 0x24) & 4) == 0) {\n    **(undefined8 **)(*reloc_info + 8) = 0;\n    **(undefined8 **)reloc_info[1] = 0;\n  }\n  else {\n    upper_bound = bfd_get_reloc_upper_bound();\n    if (-1 < upper_bound) {\n      relocation_ptr = *(undefined8 **)(*reloc_info + 8);\n      allocated_memory = xmalloc(upper_bound);\n      canonicalized_reloc = *(undefined8 *)(reloc_info[1] + 8);\n      *relocation_ptr = allocated_memory;\n      relocation_ptr = *(undefined8 **)reloc_info[1];\n      canonicalized_reloc = bfd_canonicalize_reloc(input_data,file_offset,**(undefined8 **)(*reloc_info + 8),canonicalized_reloc);\n      *relocation_ptr = canonicalized_reloc;\n      if (-1 < **(long **)reloc_info[1]) goto LAB_00103c7c;\n    }\n    bfd_fatal(*input_data);\n  }\nLAB_00103c7c:\n  upper_bound = *(long *)(*reloc_info + 8) + 8;\n  *(long *)reloc_info[1] = *(long *)reloc_info[1] + 8;\n  temp_buffer._8_4_ = (int)upper_bound;\n  temp_buffer._0_8_ = *(long *)*reloc_info + 8;\n  temp_buffer._12_4_ = (int)((ulong)upper_bound >> 0x20);\n  *reloc_info = temp_buffer;\n  return param_5;\n}\n\n",
            "called": [
                "xmalloc",
                "bfd_get_reloc_upper_bound",
                "bfd_fatal",
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "extract_relocation_information_00103c00"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "print_archive_filename_bsd",
                "FUN_00103463",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "print_archive_member_bsd",
                "print_object_filename_sysv",
                "FUN_00102739",
                "main",
                "print_symbol_info_bsd.cold",
                "print_symbol",
                "print_symbol_filename_sysv",
                "print_object_filename_posix",
                "print_symbol_filename_posix.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix",
                "print_symbol_filename_bsd.cold",
                "print_object_filename_bsd",
                "print_value.constprop.0",
                "print_archive_member_posix",
                "display_file",
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "printWidth",
                "uVar9": "rbx",
                "uVar2": "width",
                "iVar3": "result",
                "lVar7": "symInfo",
                "unaff_RBX": "rbx",
                "bVar8": "symClass",
                "pcVar10": "symType",
                "cVar1": "isUndefined",
                "bufp_6": "buffer1",
                "bufp_7": "buffer2",
                "piVar5": "errnoPtr"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefined;\n  ushort width;\n  int result;\n  long *printWidth;\n  int *errnoPtr;\n  undefined8 uVar6;\n  long symInfo;\n  ulong rbx;\n  byte symClass;\n  ulong rbx;\n  char *symType;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  rbx = rbx & 0xffffffff;\n  fatal(printWidth,rbx);\n  print_symname(\"%-20s|\",printWidth,0,rbx);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefined == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*printWidth);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      symInfo = *(long *)(printWidth[3] + 0x30);\n      isUndefined = *(char *)(symInfo + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symType = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symType = \"Block\";\n      }\n      else if (*(ushort *)(symInfo + 0x26) == 0) {\n        symType = \"None\";\n      }\n      else {\n        width = *(ushort *)(symInfo + 0x26) >> 4 & 3;\n        if (width == 2) {\n          symType = \"Function\";\n        }\n        else if (width == 3) {\n          symType = \"Array\";\n        }\n        else {\n          if (width != 1) {\n            free(buffer1);\n            width = *(ushort *)(symInfo + 0x26);\n            symClass = *(byte *)(symInfo + 0x28);\n            symType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&buffer1,symType,(ulong)symClass,(ulong)width);\n            symType = buffer1;\n            goto joined_r0x00103964;\n          }\n          symType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symClass = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(symClass) {\n    case 0:\n      symType = \"NOTYPE\";\n      break;\n    case 1:\n      symType = \"OBJECT\";\n      break;\n    case 2:\n      symType = \"FUNC\";\n      break;\n    case 3:\n      symType = \"SECTION\";\n      break;\n    case 4:\n      symType = \"FILE\";\n      break;\n    case 5:\n      symType = \"COMMON\";\n      break;\n    case 6:\n      symType = \"TLS\";\n      break;\n    default:\n      free(buffer2);\n      symType = \"<processor specific>: %d\";\n      if ((2 < symClass - 0xd) && (symType = \"<OS specific>: %d\", 2 < symClass - 10)) {\n        symType = \"<unknown>: %d\";\n      }\n      symType = (char *)dcgettext(0,symType,5);\n      result = asprintf(&buffer2,symType,(ulong)symClass);\n      symType = buffer2;\njoined_r0x00103964:\n      if (result < 0) {\n        errnoPtr = __errno_location();\n        uVar6 = xstrerror(*errnoPtr);\n        fatal(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symType);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  symInfo = printWidth[2];\n  if ((symInfo != 0) || (symInfo = printWidth[3], symInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "print_value.constprop.0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "parse_output_format_00104370",
                "param_1": "inputFormat",
                "param_2": "outputFormat",
                "uVar1": "errorMessage",
                "ppuVar2": "resultPointer",
                "print_format": "defaultPrintFormat",
                "format": "defaultFormat"
            },
            "code": "\nundefined ** parseOutputFormat_00104370(undefined *inputFormat,undefined8 outputFormat)\n\n{\n  undefined8 errorMessage;\n  undefined **resultPointer;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    defaultPrintFormat = 0;\n    defaultFormat = (undefined *)&defaultFormats;\n    return &defaultFormats;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output defaultFormat\",5);\n    fatal(errorMessage,inputFormat);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    non_fatal(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    resultPointer = (undefined **)set_defaultPrintFormat_00104397(inputFormat,outputFormat,3);\n    return resultPointer;\n  case 0x50:\n  case 0x70:\n    resultPointer = (undefined **)set_defaultPrintFormat_00104397(inputFormat,outputFormat,2);\n    return resultPointer;\n  case 0x53:\n  case 0x73:\n    resultPointer = (undefined **)set_defaultPrintFormat_00104397(inputFormat,outputFormat,1);\n    return resultPointer;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "fatal",
                "set_output_format.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "parse_output_format_00104370"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010c058": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c058",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_0010c058"
        },
        "FUN_0010c178": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c178",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010c178"
        },
        "FUN_0010c210": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c210",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010c210"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00105500": {
            "renaming": {
                "FUN_00105500": "start_main_loop_00105500",
                "param_1": "entry_point",
                "param_2": "argc",
                "auStack_8": "stack_buffer"
            },
            "code": "\nvoid processEntry start_main_loop_00105500(undefined8 entry_point,undefined8 argc)\n\n{\n  undefined stack_buffer [8];\n  \n  __libc_start_main(main,argc,&stack0x00000008,0,0,entry_point,stack_buffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "start_main_loop_00105500"
        },
        "FUN_00102475": {
            "renaming": {
                "FUN_00102475": "set_print_format_00102475",
                "param_1": "param1",
                "param_2": "param2"
            },
            "code": "\nvoid setPrintFormat_00102475(undefined8 param1,undefined8 param2)\n\n{\n  set_print_format_00104397(param1,param2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "set_output_format"
            ],
            "imported": false,
            "current_name": "set_print_format_00102475"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "uVar1": "programName",
                "__format": "formatString",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *param_1)\n\n{\n  undefined8 programName;\n  char *formatString;\n  long *plVar2;\n  \n  fflush(standardOutput);\n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,programName);\n  for (plVar2 = param_1; *plVar2 != 0; plVar2 = plVar2 + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(param_1);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_0010c050": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c050",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010c050"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_file_details_001036a7",
                "param_1": "filename",
                "param_2": "symbol"
            },
            "code": "\nvoid printFileDetails_001036a7(undefined8 *filename,undefined8 *symbol,undefined8 param_3,undefined8 param_4)\n\n{\n  if (filename_per_symbol != 0) {\n    if (filename != (undefined8 *)0x0) {\n      printf(\"%s:\",*filename);\n    }\n    printf(\"%s:\",*symbol,param_4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_file_details_001036a7"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "fatal",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_table_00102f19",
                "param_1": "filePath",
                "pcVar1": "formatString",
                "undefined_only": "includeUndefined",
                "print_width": "width"
            },
            "code": "\nvoid printSymbolTable_00102f19(undefined8 filePath)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (includeUndefined == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filePath);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (width != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_table_00102f19"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiled_files_00102fc3",
                "param_1": "sort_bfd",
                "param_2": "sort_dynamic",
                "cVar1": "last_character",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar3": "flag",
                "lVar4": "file_1",
                "lVar5": "file_2",
                "sVar6": "string_len_1",
                "sVar7": "string_len_2",
                "pcVar8": "pc",
                "pcVar9": "pc_2",
                "uVar10": "result",
                "uVar11": "file_end_address_2",
                "uVar12": "file_end_address_1",
                "uVar13": "sort_x",
                "unaff_R13": "sort_y",
                "bVar14": "is_less"
            },
            "code": "\nulong check_compiled_files_00102fc3(undefined8 sort_bfd,undefined8 sort_dynamic)\n\n{\n  char last_character;\n  ulong uVar2;\n  char *string_1;\n  char *string_2;\n  uint flag;\n  long file_1;\n  long file_2;\n  size_t string_len_1;\n  size_t string_len_2;\n  char *pc;\n  char *pc_2;\n  ulong result;\n  ulong file_end_address_2;\n  ulong file_end_address_1;\n  undefined8 sort_x;\n  long sort_y;\n  bool is_less;\n  \n  sort_x = *sort_bfd;\n  bfd_fatal();\n  file_1 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_x,sort_x);\n  file_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_dynamic,sort_y);\n  if ((file_1 == 0) || (sort_y = file_2, file_2 == 0)) {\n    file_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(file_1 + 0x20) == 0x10c2a8) || (*(long *)(file_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(file_1 + 0x20) + 0x30);\n  uVar2 = *(ulong *)(*(long *)(file_2 + 0x20) + 0x30);\n  file_end_address_1 = *(long *)(file_1 + 0x10) + result;\n  file_end_address_2 = *(long *)(sort_y + 0x10) + uVar2;\n  is_less = file_end_address_1 < file_end_address_2;\n  if ((file_end_address_1 != file_end_address_2) || (is_less = result < uVar2, result != uVar2)) {\n    return (ulong)(-(uint)is_less | 1);\n  }\n  string_1 = *(char **)(file_1 + 8);\n  string_2 = *(char **)(sort_y + 8);\n  string_len_1 = strlen(string_1);\n  string_len_2 = strlen(string_2);\n  pc = strstr(string_1,\"gnu_compiled\");\n  if (pc == (char *)0x0) {\n    pc_2 = strstr(string_1,\"gcc2_compiled\");\n    pc = strstr(string_2,\"gnu_compiled\");\n    if ((pc == (char *)0x0) && (pc = strstr(string_2,\"gcc2_compiled\"), pc == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pc_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pc = strstr(string_2,\"gnu_compiled\");\n    if (pc == (char *)0x0) {\n      pc_2 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pc_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(sort_y + 0x18) & 0x4000;\n  if ((*(byte *)(file_1 + 0x19) & 0x40) == 0) {\n    if ((string_len_1 < 3) || (string_1[string_len_1 - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((string_len_2 < 3) || (string_2[string_len_2 - 2] != '.')) goto LAB_00103202;\n      is_less = false;\n      goto LAB_001031e7;\n    }\n    last_character = string_1[string_len_1 - 1];\n    is_less = last_character == 'o' || last_character == 'a';\n    if (flag == 0) {\n      if ((string_len_2 < 3) || (string_2[string_len_2 - 2] != '.')) {\n        if (last_character == 'o' || last_character == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (string_len_2 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[string_len_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less = true;\nLAB_001031e7:\n    if ((string_2[string_len_2 - 1] != 'o') && (string_2[string_len_2 - 1] != 'a')) {\n      if (is_less) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(sort_x,sort_dynamic);\n  return result;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "numeric_forward"
            ],
            "imported": false,
            "current_name": "check_compiled_files_00102fc3"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_information_00103729",
                "param_1": "symbol_data",
                "param_2": "offset",
                "cVar1": "is_undefined",
                "uVar2": "symbol_type",
                "iVar3": "asprintf_result",
                "piVar4": "errno_location",
                "uVar5": "error_string",
                "lVar6": "object_data",
                "bVar7": "symbol_class",
                "pcVar8": "print_format",
                "bufp_6": "buffer_6",
                "bufp_7": "buffer_7"
            },
            "code": "\nvoid print_symbol_information_00103729(long *symbol_data,undefined8 offset)\n\n{\n  char is_undefined;\n  ushort symbol_type;\n  int asprintf_result;\n  int *errno_location;\n  undefined8 error_string;\n  long object_data;\n  byte symbol_class;\n  char *print_format;\n  \n  print_symname(\"%-20s|\",symbol_data,0,offset);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_data + 8));\n  if (is_undefined == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*symbol_data);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_data + 8));\n  if (*(char *)(*symbol_data + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_data + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_data + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_data[2] == 0) {\n    if (symbol_data[3] != 0) {\n      object_data = *(long *)(symbol_data[3] + 0x30);\n      is_undefined = *(char *)(object_data + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        print_format = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        print_format = \"Block\";\n      }\n      else if (*(ushort *)(object_data + 0x26) == 0) {\n        print_format = \"None\";\n      }\n      else {\n        symbol_type = *(ushort *)(object_data + 0x26) >> 4 & 3;\n        if (symbol_type == 2) {\n          print_format = \"Function\";\n        }\n        else if (symbol_type == 3) {\n          print_format = \"Array\";\n        }\n        else {\n          if (symbol_type != 1) {\n            free(buffer_6);\n            symbol_type = *(ushort *)(object_data + 0x26);\n            symbol_class = *(byte *)(object_data + 0x28);\n            print_format = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_result = asprintf(&buffer_6,print_format,(ulong)symbol_class,(ulong)symbol_type);\n            print_format = buffer_6;\n            goto joined_r0x00103964;\n          }\n          print_format = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbol_class = *(byte *)(symbol_data[2] + 0x48) & 0xf;\n    switch(symbol_class) {\n    case 0:\n      print_format = \"NOTYPE\";\n      break;\n    case 1:\n      print_format = \"OBJECT\";\n      break;\n    case 2:\n      print_format = \"FUNC\";\n      break;\n    case 3:\n      print_format = \"SECTION\";\n      break;\n    case 4:\n      print_format = \"FILE\";\n      break;\n    case 5:\n      print_format = \"COMMON\";\n      break;\n    case 6:\n      print_format = \"TLS\";\n      break;\n    default:\n      free(buffer_7);\n      print_format = \"<processor specific>: %d\";\n      if ((2 < symbol_class - 0xd) && (print_format = \"<OS specific>: %d\", 2 < symbol_class - 10)) {\n        print_format = \"<unknown>: %d\";\n      }\n      print_format = (char *)dcgettext(0,print_format,5);\n      asprintf_result = asprintf(&buffer_7,print_format,(ulong)symbol_class);\n      print_format = buffer_7;\njoined_r0x00103964:\n      if (asprintf_result < 0) {\n        errno_location = __errno_location();\n        error_string = xstrerror(*errno_location);\n        fatal(&DAT_0010712d,error_string);\nLAB_00103983:\n        print_format = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",print_format);\n  }\n  if (symbol_data[2] == 0) {\n    if (symbol_data[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_data[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  object_data = symbol_data[2];\n  if ((object_data != 0) || (object_data = symbol_data[3], object_data != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(object_data + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "fatal",
                "asprintf",
                "free",
                "xstrerror",
                "printf",
                "print_value.constprop.0",
                "__errno_location",
                "print_symname",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103729"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "display_file",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010c188": {
            "renaming": {},
            "code": "\n\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcoll@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c188",
            "calling": [
                "strcoll"
            ],
            "imported": false,
            "current_name": "FUN_0010c188"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_profiler_00102000",
                "ctx": "context",
                "iVar1": "profilerResult"
            },
            "code": "\nint initializeProfiler_00102000(EVP_PKEY_CTX *context)\n\n{\n  int profilerResult;\n  \n  profilerResult = __gmon_start__();\n  return profilerResult;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_profiler_00102000"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_parameters_00103573",
                "param_1": "str1",
                "param_2": "str2",
                "param_3": "str3",
                "param_4": "str4"
            },
            "code": "\nvoid printParameters_00103573(undefined8 *str1,undefined8 *str2,undefined8 str3,undefined8 str4)\n\n{\n  if (str1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*str1);\n  }\n  printf(\"%s:\",*str2,str4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "print_symbol_filename_bsd"
            ],
            "imported": false,
            "current_name": "print_parameters_00103573"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_symbol_info_00105110",
                "param_1": "format",
                "param_2": "symbols",
                "param_3": "param3",
                "param_4": "filename",
                "__ptr": "ptr",
                "__s1": "s1",
                "pplVar1": "ptrPtr",
                "plVar2": "ptr",
                "lVar3": "v",
                "puVar4": "ptr",
                "cVar5": "character",
                "iVar6": "index",
                "pvVar7": "ptrVar",
                "lVar8": "v",
                "uVar9": "flags",
                "lVar10": "v",
                "local_b4": "localVar",
                "local_b0": "localArr",
                "local_a8": "localPointer",
                "local_a0": "localVar",
                "local_98": "localPointer",
                "local_90": "localPointer",
                "local_88": "localVar",
                "pvStack_80": "ptrStack",
                "pvStack_78": "ptrStack",
                "pvStack_70": "ptrStack",
                "local_68": "localArr",
                "local_60": "localChar"
            },
            "code": "\n\n\nvoid printSymbolInfo_00105110(undefined8 *format,long *symbols,undefined8 param3,undefined8 *filename)\n\n{\n  void *ptr;\n  char *s1;\n  long **ptrPtr;\n  long *ptr;\n  long v;\n  undefined8 *ptr;\n  char character;\n  int index;\n  void *ptrVar;\n  long v;\n  uint flags;\n  long v;\n  uint localVar;\n  undefined localArr [8];\n  undefined *localPointer;\n  undefined8 localVar;\n  long *localPointer;\n  long *localPointer;\n  void *localVar;\n  void *ptrStack;\n  void *ptrStack;\n  void *ptrStack;\n  undefined localArr [8];\n  char localChar;\n  \n  if (*(code **)(format + 0x18) == print_symbol_filename_bsd) {\n    if (filename_per_symbol != 0) {\n      if (filename != (undefined8 *)0x0) {\n        printf(\"%s:\",*filename);\n      }\n      printf(\"%s:\",*format);\n    }\n  }\n  else {\n    (**(code **)(format + 0x18))(filename,format);\n  }\n  localPointer = localArr;\n  (**(code **)(format[1] + 0x218))(format,symbols,localPointer);\n  flags = *(uint *)(symbols + 3);\n  character = localChar;\n  if (((((localChar == 'i') && ((flags & 0x400000) != 0)) && (ifunc_type_chars != (char *)0x0)) &&\n      ((*ifunc_type_chars != '\\0' && (character = *ifunc_type_chars, (flags & 2) == 0)))) &&\n     (character = localChar, ifunc_type_chars[1] != '\\0')) {\n    character = ifunc_type_chars[1];\n  }\n  localChar = character;\n  localVar = param3;\n  if ((flags & 0x200100) != 0) goto LAB_00103330;\n  v = *symbols;\n  index = *(int *)(*(long *)(v + 8) + 8);\n  if (((flags & 0x200000) == 0) && (index == 5)) {\n    localPointer = symbols;\n    if (*(long *)(v + 0x110) == 0) {\n      localPointer = (long *)0x0;\n    }\n  }\n  else {\n    localPointer = (long *)0x0;\n    if (((index - 2U & 0xfffffffd) == 0) && (localPointer = symbols, *(long *)(v + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  localPointer = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(format + 0x20))(&localPointer,format);\n  do {\n    if (line_numbers == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (lineno_cache_bfd == format) {\n      ptr = lineno_cache_bfd;\n      if (syms_5 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      lineno_cache_bfd = ptr;\n      ptrVar = relocs_3;\n      if (symbols[4] == 0x10c2a8) {\n        if (lineno_cache_rel_bfd == format) {\n          if (relocs_3 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          flags = 0;\n          if (relocs_3 != (void *)0x0) {\n            for (; flags < seccount_2; flags = flags + 1) {\n              ptr = *(void **)((long)ptrVar + (ulong)flags * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(secs_1);\n            free(ptrVar);\n            free(relcount_0);\n            secs_1 = (void *)0x0;\n            relocs_3 = (void *)0x0;\n            relcount_0 = (void *)0x0;\n          }\nLAB_001033d1:\n          seccount_2 = *(uint *)(format + 0x14);\n          secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n          relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n          relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n          ptrStack = syms_5;\n          localVar = secs_1;\n          ptrStack = relocs_3;\n          ptrStack = relcount_0;\n          bfd_map_over_sections(format,get_relocs,&localVar);\n          lineno_cache_rel_bfd = format;\n        }\n        s1 = (char *)symbols[1];\n        for (flags = 0; flags < seccount_2; flags = flags + 1) {\n          v = (ulong)flags * 8;\n          ptrVar = relcount_0;\n          for (v = 0;\n              *(long *)((long)ptrVar + v) != v && v <= *(long *)((long)ptrVar + v)\n              ; v = v + 1) {\n            ptrPtr = *(long ***)(*(long *)((long)relocs_3 + v) + v * 8);\n            ptr = *ptrPtr;\n            if ((((ptr != (long *)0x0) &&\n                 (v = *ptr, *(long *)(v + 0x20) == symbols[4])) &&\n                (*(long *)(v + 0x10) == symbols[2])) &&\n               (((index = strcmp(s1,*(char **)(v + 8)), index == 0 &&\n                 (character = (**(code **)(format[1] + 0x240))\n                                    (format,syms_5,*(undefined8 *)((long)secs_1 + v),ptrPtr[1]\n                                     ,&localVar,localArr,&localVar,0), ptrVar = relcount_0,\n                 character != '\\0')) && (localVar != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",localVar,(ulong)localVar);\n              flags = seccount_2;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(symbols[4] + 0xe0) == format) {\n        character = (**(code **)(format[1] + 0x250))(format,syms_5,symbols,&localVar,&localVar);\n        if (((character != '\\0') ||\n            (character = (**(code **)(format[1] + 0x240))\n                               (format,syms_5,symbols[4],symbols[2],&localVar,localArr,&localVar,0)\n            , character != '\\0')) && ((localVar != (void *)0x0 && (localVar != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (syms_5 != (void *)0x0) {\n      free(syms_5);\n      syms_5 = (void *)0x0;\n    }\nLAB_00105359:\n    v = (**(code **)(format[1] + 0x1f8))(format);\n    if (v < 0) {\n      process_relocations_00103463(v);\n      return;\n    }\n    syms_5 = (void *)xmalloc();\n    v = (**(code **)(format[1] + 0x200))(format,syms_5);\n    ptr = format;\n    if (-1 < v) goto LAB_00105288;\n    bfd_fatal(*format);\nLAB_00103330:\n    localPointer = (long *)0x0;\n    localPointer = (long *)0x0;\n    (**(code **)(format + 0x20))(&localPointer,format);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103463",
                "print_symbol_info_bsd",
                "free",
                "xmalloc",
                "printf",
                "bfd_fatal",
                "print_symbol_filename_bsd",
                "print_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_symbol_info_00105110"
        },
        "FUN_0010c060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010c060"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103463",
                "set_print_width",
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_0010c1a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a8",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a8"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_file_compatibility_00102fd2",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "cVar1": "last_char",
                "__s": "file_data_1",
                "__s_00": "file_data_2",
                "uVar2": "version_2",
                "uVar3": "flag",
                "lVar4": "file_1_pointer",
                "lVar5": "file_2_pointer",
                "sVar6": "file_1_len",
                "sVar7": "file_2_len",
                "pcVar8": "gnu_compiled_ptr",
                "pcVar9": "gcc2_compiled_ptr",
                "uVar10": "result",
                "uVar11": "offset_2",
                "uVar12": "offset_1",
                "unaff_R13": "sort_dynamic"
            },
            "code": "\nulong check_file_compatibility_00102fd2(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char last_char;\n  ulong version_2;\n  char *file_data_1;\n  char *file_data_2;\n  uint flag;\n  long file_1_pointer;\n  long file_2_pointer;\n  size_t file_1_len;\n  size_t file_2_len;\n  char *gnu_compiled_ptr;\n  char *gcc2_compiled_ptr;\n  ulong result;\n  ulong offset_2;\n  ulong offset_1;\n  long sort_dynamic;\n  bool bVar13;\n  \n  file_1_pointer = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,file_path_1,sort_x);\n  file_2_pointer = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,file_path_2,sort_y);\n  if ((file_1_pointer == 0) || (sort_dynamic = file_2_pointer, file_2_pointer == 0)) {\n    file_2_pointer = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(file_1_pointer + 0x20) == 0x10c2a8) || (*(long *)(file_2_pointer + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(file_1_pointer + 0x20) + 0x30);\n  version_2 = *(ulong *)(*(long *)(file_2_pointer + 0x20) + 0x30);\n  offset_1 = *(long *)(file_1_pointer + 0x10) + result;\n  offset_2 = *(long *)(sort_dynamic + 0x10) + version_2;\n  bVar13 = offset_1 < offset_2;\n  if ((offset_1 != offset_2) || (bVar13 = result < version_2, result != version_2)) {\n    return (ulong)(-(uint)bVar13 | 1);\n  }\n  file_data_1 = *(char **)(file_1_pointer + 8);\n  file_data_2 = *(char **)(sort_dynamic + 8);\n  file_1_len = strlen(file_data_1);\n  file_2_len = strlen(file_data_2);\n  gnu_compiled_ptr = strstr(file_data_1,\"gnu_compiled\");\n  if (gnu_compiled_ptr == (char *)0x0) {\n    gcc2_compiled_ptr = strstr(file_data_1,\"gcc2_compiled\");\n    gnu_compiled_ptr = strstr(file_data_2,\"gnu_compiled\");\n    if ((gnu_compiled_ptr == (char *)0x0) && (gnu_compiled_ptr = strstr(file_data_2,\"gcc2_compiled\"), gnu_compiled_ptr == (char *)0x0))\n    goto joined_r0x00103157;\n    if (gcc2_compiled_ptr == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    gnu_compiled_ptr = strstr(file_data_2,\"gnu_compiled\");\n    if (gnu_compiled_ptr == (char *)0x0) {\n      gcc2_compiled_ptr = strstr(file_data_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (gcc2_compiled_ptr != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(sort_dynamic + 0x18) & 0x4000;\n  if ((*(byte *)(file_1_pointer + 0x19) & 0x40) == 0) {\n    if ((file_1_len < 3) || (file_data_1[file_1_len - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((file_2_len < 3) || (file_data_2[file_2_len - 2] != '.')) goto LAB_00103202;\n      bVar13 = false;\n      goto LAB_001031e7;\n    }\n    last_char = file_data_1[file_1_len - 1];\n    bVar13 = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((file_2_len < 3) || (file_data_2[file_2_len - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (file_2_len < 3) {\n      return 0xffffffff;\n    }\n    if (file_data_2[file_2_len - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar13 = true;\nLAB_001031e7:\n    if ((file_data_2[file_2_len - 1] != 'o') && (file_data_2[file_2_len - 1] != 'a')) {\n      if (bVar13) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar13) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(file_path_1,file_path_2);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "abort",
                "bfd_fatal",
                "strlen",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_file_compatibility_00102fd2"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "handle_fatal_error_00102f9f",
                "unaff_retaddr": "returnAddress",
                "auVar1": "result"
            },
            "code": "\nundefined  [16] handleFatalError_00102f9f(void)\n\n{\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  bfd_fatal(*sort_bfd);\n  result._8_8_ = returnAddress;\n  result._0_8_ = 0xffffffff;\n  return result;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "handle_fatal_error_00102f9f"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_data_available_00103a66",
                "unaff_RBX": "data_ptr"
            },
            "code": "\nvoid check_if_data_available_00103a66(void)\n\n{\n  long data_ptr;\n  \n  if (*(long *)(data_ptr + 8) != 0) {\n    print_constant_value_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "check_if_data_available_00103a66"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "display_rel_file",
                "main",
                "bfd_nonfatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010c118": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c118",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010c118"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "symbol_info_ptr",
                "lVar1": "symbol_addr"
            },
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *symbol_info_ptr;\n  long symbol_addr;\n  \n  if (symbol_info_ptr[2] == 0) {\n    symbol_addr = symbol_info_ptr[1];\n  }\n  else {\n    symbol_addr = *(long *)(symbol_info_ptr[2] + 0x38);\n  }\n  if (symbol_addr != 0) {\n    putchar(0x20);\n    if (symbol_info_ptr[2] == 0) {\n      symbol_addr = symbol_info_ptr[1];\n    }\n    else {\n      symbol_addr = *(long *)(symbol_info_ptr[2] + 0x38);\n    }\n    print_value_constprop_0(symbol_addr);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info_ptr + 8));\n  if (*(char *)(*symbol_info_ptr + 8) != '-') {\n    print_symname(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbol_info_ptr + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info_ptr + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info_ptr + 0x20));\n  print_symname(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "print_symbol_info_bsd"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001035a2"
        },
        "FUN_0010c198": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c198",
            "calling": [
                "fseek",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_0010c198"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "process_relocations_00103463",
                "param_8": "currentIndex",
                "param_10": "totalRelocationCount",
                "in_stack_00000050": "filename",
                "seccount_2": "sectionCount",
                "relcount_0": "relocationCount",
                "relocs_3": "relocationAddresses",
                "unaff_R12": "stringToCompare",
                "unaff_R13": "bfdHandle",
                "lVar2": "currentRelocationAddress",
                "unaff_R15": "baseAddress"
            },
            "code": "\n\n\nvoid processRelocations_00103463(void)\n\n{\n  long *plVar1;\n  long currentRelocationAddress;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  char *stringToCompare;\n  undefined8 *bfdHandle;\n  long lVar6;\n  long baseAddress;\n  undefined8 currentIndex;\n  ulong totalRelocationCount;\n  long filename;\n  \n  bfd_fatal(*bfdHandle);\n  do {\n    currentIndex._4_4_ = currentIndex._4_4_ + 1;\n    if (sectionCount <= currentIndex._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    lVar5 = relocationCount;\n    for (lVar6 = 0; plVar1 = (long *)(lVar5 + (ulong)currentIndex._4_4_ * 8),\n        *plVar1 != lVar6 && lVar6 <= *plVar1; lVar6 = lVar6 + 1) {\n      plVar1 = **(long ***)(*(long *)(relocationAddresses + (ulong)currentIndex._4_4_ * 8) + lVar6 * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (currentRelocationAddress = *plVar1, *(long *)(currentRelocationAddress + 0x20) == *(long *)(baseAddress + 0x20))) &&\n          (*(long *)(currentRelocationAddress + 0x10) == *(long *)(baseAddress + 0x10))) &&\n         (((iVar4 = strcmp(stringToCompare,*(char **)(currentRelocationAddress + 8)), iVar4 == 0 &&\n           (cVar3 = (**(code **)(bfdHandle[1] + 0x240))(), lVar5 = relocationCount, cVar3 != '\\0')) &&\n          (filename != 0)))) {\n        printf(\"\\t%s:%u\",filename,totalRelocationCount >> 0x20);\n        currentIndex._4_4_ = sectionCount;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_fatal",
                "strcmp",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_relocations_00103463"
        },
        "FUN_0010c1b8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1b8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010c1b8"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_print_format_00104397",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "printFormat",
                "print_format": "printFormat",
                "format": "selectedFormat"
            },
            "code": "\nvoid setPrintFormat_00104397(undefined8 param1,undefined8 param2,int printFormat)\n\n{\n  printFormat = printFormat;\n  selectedFormat = (undefined *)(&selectedFormats + (long)printFormat * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "set_output_format",
                "set_output_format.cold"
            ],
            "imported": false,
            "current_name": "set_print_format_00104397"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "update_print_format_string_00104670",
                "param_1": "binary",
                "iVar1": "formatWidth",
                "pcVar2": "archStr",
                "puVar3": "radixStr",
                "pcVar4": "binaryName",
                "print_width": "formatWidth",
                "print_format_string": "formatString",
                "print_format": "formatFlag",
                "print_radix": "radix",
                "free": "releaseMemory",
                "strcmp": "compareStrings",
                "strstr": "findSubstring",
                "concat": "combineStrings"
            },
            "code": "\nvoid updatePrintFormatString_00104670(long binary)\n\n{\n  int formatWidth;\n  char *archStr;\n  undefined *radixStr;\n  char *binaryName;\n  \n  formatWidth = bfd_get_arch_size();\n  if (formatWidth == -1) {\n    binaryName = **(char ***)(binary + 8);\n    archStr = findSubstring(binaryName,\"64\");\n    formatWidth = 0x40;\n    if (archStr == (char *)0x0) {\n      formatWidth = compareStrings(binaryName,\"mmo\");\n      formatWidth = (-(uint)(formatWidth == 0) & 0x20) + 0x20;\n    }\n    formatWidth = formatWidth;\n    releaseMemory(formatString);\n  }\n  else {\n    releaseMemory(formatString);\n  }\n  if (formatFlag - 2U < 2) {\n    binaryName = \"\";\n  }\n  else if (formatWidth == 0x20) {\n    binaryName = \"08\";\n  }\n  else {\n    binaryName = \"016\";\n  }\n  radixStr = &DAT_001071d0;\n  if (radix != 0x10) {\n    if (radix < 0x11) {\n      if (radix == 8) {\n        radixStr = &DAT_001071ca;\n      }\n      else {\n        if (radix != 10) {\n          formatString = (void *)combineStrings(&DAT_001071d7,binaryName,0,0);\n          return;\n        }\n        radixStr = &DAT_001071cd;\n      }\n    }\n    else {\n      radixStr = (undefined *)0x0;\n    }\n  }\n  formatString = (void *)combineStrings(&DAT_001071d7,binaryName,radixStr,0);\n  return;\n}\n\n",
            "called": [
                "set_print_width.cold",
                "free",
                "bfd_get_arch_size",
                "strcmp",
                "concat",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "update_print_format_string_00104670"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_0010c070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010c070"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103463",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_0010c0b0": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b0",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b0"
        },
        "FUN_0010c1d0": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1d0",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010c1d0"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage",
                "dcgettext": "getMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "formattedPrint",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = getMessage(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    formattedPrint(standardError,\"%s: %s: %s\\n\",programName);\n    return;\n  }\n  formattedPrint(standardError,\"%s: %s\\n\",programName,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_symbols_001048e0",
                "param_1": "symbolTable",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "sectionTable",
                "param_6": "dynamicSection",
                "bVar1": "byteVar1",
                "pcVar2": "functionPointer",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "undefined8Var",
                "lVar7": "longVar",
                "ppuVar8": "symbolMultiplier",
                "ppuVar9": "localSymbol",
                "lVar10": "longVar2",
                "puVar11": "pointerVar",
                "bVar19": "boolVar",
                "bVar20": "byteVar2",
                "ppuStack_78": "symbolDataStack",
                "local_4c": "localVar_4c",
                "local_48": "localVar_48",
                "local_40": "localSymbolArr"
            },
            "code": "\nvoid processSymbols_001048e0(ulong **symbolTable,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **sectionTable,ulong **dynamicSection)\n\n{\n  byte byteVar1;\n  code *functionPointer;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 undefined8Var;\n  long longVar;\n  ulong **symbolMultiplier;\n  ulong **localSymbol;\n  long longVar2;\n  ulong *pointerVar;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool boolVar;\n  byte byteVar2;\n  ulong **symbolDataStack;\n  uint localVar_4c;\n  ulong *localVar_48;\n  ulong **localSymbolArr [2];\n  \n  byteVar2 = 0;\n  localVar_48 = (ulong *)0x0;\n  if ((dynamic != 0) || ((*(byte *)((long)symbolTable + 0x44) & 0x10) != 0)) {\n    localSymbol = (ulong **)&localVar_4c;\n    symbolMultiplier = (ulong **)(*(code *)symbolTable[1][0x4d])(symbolTable,dynamic != 0,localSymbolArr);\n    if ((long)symbolMultiplier < 0) {\n      if ((dynamic != 0) && (intVar = bfd_get_error(), intVar == 7)) {\n        if (quiet != 0) {\n          return;\n        }\n        pointerVar = *symbolTable;\n        undefined8Var = dcgettext(0,\"%s: no symbols\",5);\n        non_fatal(undefined8Var,pointerVar);\n        return;\n      }\n      bfd_fatal(*symbolTable);\n      goto LAB_00102e9e;\n    }\n    if (symbolMultiplier != (ulong **)0x0) {\n      if (show_synthetic != 0) {\n        if (localVar_4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)symbolTable + 0x4a);\n      ppuVar13 = symbolTable;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          report_plugin_err = '\\0';\n          undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(undefined8Var);\n        }\n        ppuVar14 = localSymbolArr[0];\n        unaff_R14 = (ulong **)(ulong)localVar_4c;\n        boolVar = dynamic != 0;\n        localSymbol = localSymbolArr[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)boolVar;\n        symbolTable = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)symbolMultiplier * (long)unaff_R14);\n        symbolMultiplier = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        symbolTable = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (symbolTable < symbolMultiplier) {\n          do {\n            localSymbol = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar,symbolTable,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (localSymbol == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar = localSymbol[1];\n            ppuVar17 = symbolMultiplier;\n            if (((pointerVar == (ulong *)0x0) || (*(char *)pointerVar != '_')) ||\n               (*(char *)((long)pointerVar + 1) != '_')) {\nLAB_00104a03:\n              if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar = (uint)(localSymbol[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (print_debug_syms == 0) {\n                if ((*(byte *)(localSymbol + 3) & 4) == 0) {\n                  if (sort_by_size != 0) goto process_symbol_data_00104d5b;\nLAB_00104a53:\n                  dynamicSection = (ulong **)(ulong)defined_only;\n                  if (defined_only == 0) {\n                    charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,localSymbol);\n                    if (charVar != '\\0') {\n                      display_rel_file_cold();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (localSymbol[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbol_data_00104d5b:\n                if ((localSymbol[4] == (ulong *)0x10c2a8) || (localSymbol[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,localSymbol);\n                if (charVar != '\\0') {\n                  display_rel_file_cold();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != symbolTable) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *symbolTable;\n                    process_symbol_data_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)symbolTable;\n                    symbolTable = (ulong **)((long)symbolTable + (ulong)byteVar2 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)byteVar2 * -2 + 1);\n                  }\n                  process_symbol_data_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              intVar = strcmp((char *)((long)pointerVar + (ulong)(*(char *)((long)pointerVar + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              symbolDataStack = localSymbol;\n              if (intVar == 0) {\n                if (report_plugin_err != '\\0') {\n                  symbolDataStack = (ulong **)*ppuVar13;\n                  report_plugin_err = '\\0';\n                  undefined8Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(undefined8Var,symbolDataStack);\n                }\n                goto LAB_00104a03;\n              }\n              if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (external_only == 0) {\n                if (non_weak != 0) {\n                  uintVar = (*(uint *)(localSymbol + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(localSymbol + 3) & 0x800082) != 0) || (localSymbol[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)localSymbol[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            symbolTable = (ulong **)((long)symbolTable + (long)unaff_R14);\n            if (symbolMultiplier <= symbolTable) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          pointerVar = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          sectionTable = (ulong **)(ulong)no_sort;\n          functionPointer = (code *)pointerVar[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          pointerVar = ppuVar13[1];\n          functionPointer = (code *)pointerVar[0x41];\n        }\n        if (no_sort != 0) goto LAB_00104be2;\n        sort_dynamic = dynamic != 0;\n        sort_bfd = ppuVar13;\n        sort_x = (ulong **)(*functionPointer)(ppuVar13);\n        sort_y = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = localSymbolArr[0];\n        if ((sort_x != (ulong **)0x0) && (sort_y != (ulong **)0x0)) {\n          symbolMultiplier = (ulong **)(ulong)localVar_4c;\n          if (sort_by_size != 0) {\n            boolVar = dynamic != 0;\n            qsort(localSymbolArr[0],(size_t)ppuVar14,(size_t)symbolMultiplier,size_forward1);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = sort_x;\n            symbolTable = sort_y;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)symbolMultiplier + (long)ppuVar12);\n            localSymbol = sort_x;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            dynamicSection = sort_y;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar,ppuVar12);\n            sectionTable = symbolMultiplier;\n            symbolDataStack = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localSymbolArr[0],(size_t)ppuVar14,(size_t)symbolMultiplier,\n                *(__compar_fn_t *)(sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8))\n          ;\n          pointerVar = ppuVar13[1];\nLAB_00104be2:\n          symbolTable = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_fatal(*ppuVar13);\n        symbolTable = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          symbolMultiplier = (ulong **)(*(code *)symbolTable[1][0x6b])(symbolTable,unaff_RBX);\n          localSymbol = ppuVar17;\n          if (-1 < (long)symbolMultiplier) break;\n          ppuVar13 = (ulong **)*symbolTable;\n          ppuVar14 = (ulong **)bfd_fatal(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          pointerVar = ppuVar14[2];\n          localSymbol = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar = (ulong *)((long)symbolMultiplier[8] - (long)pointerVar);\n          ppuVar18 = symbolTable;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = localSymbol;\n          ppuVar12 = unaff_RBX;\n          symbolTable = dynamicSection;\n          if (pointerVar != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = pointerVar;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          dynamicSection = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)symbolDataStack >> 4);\n          qsort(symbolDataStack,(size_t)ppuVar14,0x10,size_forward2);\n          pointerVar = ppuVar13[1];\n          symbolTable = ppuVar13;\n          ppuVar18 = symbolDataStack;\nLAB_00104be5:\n          unaff_RBX = localSymbolArr[0];\n          symbolMultiplier = (ulong **)(ulong)sort_by_size;\n          unaff_R14 = (ulong **)(ulong)(dynamic != 0);\n          if (sort_by_size != 0) {\n            ppuVar17 = (ulong **)(*(code *)pointerVar[0x41])(symbolTable);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          symbolMultiplier = (ulong **)(ulong)localVar_4c;\n          unaff_R15 = (ulong **)(*(code *)pointerVar[0x41])(symbolTable);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)symbolMultiplier + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_fatal(*symbolTable);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          localSymbol = symbolMultiplier;\n          if (dynamic != 0) {\n            unaff_RBX = localSymbolArr[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          longVar2 = (*(code *)symbolTable[1][0x6a])(symbolTable);\n          ppuVar14 = localSymbolArr[0];\n          ppuVar17 = symbolMultiplier;\n          ppuVar12 = unaff_R15;\n          if (longVar2 < 1) {\n            symbolMultiplier = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        dynamicSection = &localVar_48;\n        sectionTable = unaff_RBX;\n        longVar2 = (*(code *)symbolTable[1][0x6c])(symbolTable,ppuVar17,ppuVar14,symbolMultiplier);\n        symbolMultiplier = localSymbol;\n        if (0 < longVar2) {\n          symbolMultiplier = (ulong **)((long)localSymbol + longVar2);\n          localSymbolArr[0] = (ulong **)xrealloc(localSymbolArr[0]);\n          longVar = 0;\n          do {\n            localSymbolArr[0][(long)localSymbol + longVar] = localVar_48 + longVar * 6;\n            longVar = longVar + 1;\n          } while (longVar2 != longVar);\n          localSymbolArr[0][(long)localSymbol + longVar2] = (ulong *)0x0;\n        }\n        if ((dynamic == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)symbolTable + 0x4a);\n        ppuVar13 = symbolTable;\n      } while( true );\n    }\n  }\n  if (quiet == 0) {\n    pointerVar = *symbolTable;\n    undefined8Var = dcgettext(0,\"%s: no symbols\",5);\n    non_fatal(undefined8Var,pointerVar);\n  }\n  return;\ncode_r0x00104b01:\n  symbolTable = (ulong **)((long)symbolTable + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)sectionTable);\n  if (unaff_R14 <= unaff_RBX) {\n    symbolMultiplier = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    localSymbol = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = symbolTable;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      pointerVar = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar = ppuVar14[2];\n    if ((*(byte *)((long)symbolMultiplier + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  symbolMultiplier = symbolTable;\n  ppuVar15 = sectionTable;\n  ppuVar16 = dynamicSection;\n  localSymbol = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (localSymbol == (ulong **)0x0) goto LAB_00102edb;\n  symbolMultiplier = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (localVar_48 == (ulong *)0x0) {\n      free(localSymbolArr[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(localVar_48);\n    free(localSymbolArr[0]);\n    free(ppuVar18);\n    return;\n  }\n  symbolMultiplier = ppuVar17;\n  longVar2 = (*(code *)symbolTable[1][0x4e])(symbolTable,unaff_R14,*ppuVar14);\n  if (longVar2 == 0) goto LAB_00102ec9;\n  symbolMultiplier = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  print_symbol(symbolTable,longVar2,*symbolMultiplier,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_fatal(*symbolTable,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*symbolTable;\n  bfd_fatal();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = sectionTable;\n  ppuVar16 = dynamicSection;\nLAB_00102edb:\n  dynamicSection = ppuVar16;\n  sectionTable = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  localSymbol = (ulong **)bfd_fatal();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  pointerVar = ppuVar14[2];\nLAB_00102ee7:\n  if (symbolMultiplier != (ulong **)localSymbol[4]) goto LAB_00102dc4;\n  pointerVar = (ulong *)((long)localSymbol[2] - (long)pointerVar);\n  ppuVar18 = symbolTable;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (localSymbol = unaff_R15, longVar2 = (*(code *)symbolTable[1][0x4e])(symbolTable,unaff_R14,unaff_RBX),\n        longVar2 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)symbolMultiplier);\n    print_symbol(symbolTable,longVar2,0,param2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_fatal(*symbolTable);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  bfd_fatal(*symbolTable);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  bfd_fatal(*ppuVar13);\n  ppuVar13 = symbolTable;\nLAB_00102eb9:\n  bfd_fatal(*ppuVar13);\n  symbolTable = dynamicSection;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  sectionTable = symbolMultiplier;\n  ppuVar18 = localSymbol;\n  symbolDataStack = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_fatal",
                "bfd_get_error",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "process_symbols_001048e0"
        },
        "FUN_0010c248": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c248",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_0010c248"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_001065a0": {
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_001065a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "get_relocs",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_0010c008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010c008"
        },
        "FUN_0010c240": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c240",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010c240"
        },
        "FUN_0010c088": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c088",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c088"
        },
        "FUN_0010c0a8": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0a8",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c0a8"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "set_print_width",
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "list_matching_formats",
                "usage.cold",
                "main",
                "bfd_nonfatal",
                "usage",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_filename_001062d0",
                "param_1": "filename",
                "filename_per_file": "is_filename_per_file",
                "filename_per_symbol": "is_filename_per_symbol"
            },
            "code": "\nvoid print_filename_001062d0(undefined8 filename)\n\n{\n  if ((is_filename_per_file != 0) && (is_filename_per_symbol == 0)) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_filename_001062d0"
        },
        "FUN_0010c0c0": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c0",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_sections_00103238",
                "__ptr": "ptr",
                "__s1": "s1",
                "plVar1": "ptrVar1",
                "lVar2": "var2",
                "cVar3": "var3",
                "iVar4": "var4",
                "unaff_RBX": "RBX",
                "pvVar5": "var5",
                "uVar6": "var6",
                "unaff_R13": "R13",
                "lVar7": "var7",
                "param_10": "param10",
                "param_12": "param12"
            },
            "code": "\n\n\nvoid processSections_00103238(void)\n\n{\n  long *ptrVar1;\n  void *ptr;\n  char *s1;\n  long var2;\n  char var3;\n  int var4;\n  long RBX;\n  void *var5;\n  uint var6;\n  long R13;\n  long var7;\n  ulong param10;\n  void *param12;\n  \n  var5 = relocs_3;\n  if (lineno_cache_rel_bfd == R13) {\n    if (relocs_3 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    var6 = 0;\n    if (relocs_3 != (void *)0x0) {\n      for (; var6 < seccount_2; var6 = var6 + 1) {\n        ptr = *(void **)((long)var5 + (ulong)var6 * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(secs_1);\n      free(var5);\n      free(relcount_0);\n      secs_1 = (void *)0x0;\n      relocs_3 = (void *)0x0;\n      relcount_0 = (void *)0x0;\n    }\n  }\n  seccount_2 = *(uint *)(R13 + 0xa0);\n  secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n  relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n  relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n  param12 = secs_1;\n  bfd_map_over_sections();\n  lineno_cache_rel_bfd = R13;\nLAB_00103296:\n  s1 = *(char **)(RBX + 8);\n  var6 = 0;\n  do {\n    if (seccount_2 <= var6) {\n      putc(10,_stdout);\n      return;\n    }\n    var5 = relcount_0;\n    for (var7 = 0; ptrVar1 = (long *)((long)var5 + (ulong)var6 * 8),\n        *ptrVar1 != var7 && var7 <= *ptrVar1; var7 = var7 + 1) {\n      ptrVar1 = **(long ***)(*(long *)((long)relocs_3 + (ulong)var6 * 8) + var7 * 8);\n      if ((((ptrVar1 != (long *)0x0) &&\n           (var2 = *ptrVar1, *(long *)(var2 + 0x20) == *(long *)(RBX + 0x20))) &&\n          (*(long *)(var2 + 0x10) == *(long *)(RBX + 0x10))) &&\n         (((var4 = strcmp(s1,*(char **)(var2 + 8)), var4 == 0 &&\n           (var3 = (**(code **)(*(long *)(R13 + 8) + 0x240))(), var5 = relcount_0,\n           var3 != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        var6 = seccount_2;\n        break;\n      }\n    }\n    var6 = var6 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "get_relocs",
                "xmalloc",
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_sections_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "label",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *label,undefined8 *message)\n\n{\n  if (label != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*label);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "print_symbol_filename_posix"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_and_free_001047d0",
                "unaff_RBX": "buffer",
                "unaff_R12": "flag_ptr",
                "unaff_R13": "str_ptr",
                "unaff_R14": "format_str",
                "unaff_R15": "context",
                "with_symbol_versions": "use_symbol_versions",
                "pcVar1": "result"
            },
            "code": "\nvoid print_and_free_001047d0(void)\n\n{\n  char *result;\n  void *buffer;\n  undefined *flag_ptr;\n  void *str_ptr;\n  char *format_str;\n  long context;\n  \n  if (((use_symbol_versions != 0) &&\n      (result = (char *)(**(code **)(*(long *)(context + 8) + 0x220))(), result != (char *)0x0))\n     && (*result != '\\0')) {\n    buffer = (void *)reconcat();\n    str_ptr = buffer;\n  }\n  printf(format_str,str_ptr);\n  if (flag_ptr != (undefined *)0x0) {\n    *flag_ptr = 0x40;\n  }\n  free(buffer);\n  return;\n}\n\n",
            "called": [
                "free",
                "printf",
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00102739",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "print_and_free_001047d0"
        },
        "FUN_0010c138": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c138",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010c138"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "handle_non_ordinary_file_warning_0010249f",
                "uVar1": "warningMessage",
                "dcgettext": "getWarningMessage",
                "non_fatal": "reportWarning"
            },
            "code": "\nundefined8 handleNonOrdinaryFileWarning_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = getWarningMessage(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  reportWarning(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "handle_non_ordinary_file_warning_0010249f"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "file_path",
                "cVar1": "check_result",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "error_ptr",
                "uVar5": "message",
                "puVar6": "file_handle",
                "puVar9": "archived_file",
                "puVar10": "prev_archived_file",
                "lVar7": "map_entry",
                "pcVar8": "error_msg",
                "local_c8": "file_info",
                "target": "target_option",
                "line_numbers": "line_numbers_option",
                "format": "output_format",
                "print_armap": "print_armap_option"
            },
            "code": "\nundefined4 check_file_001043d0(char *file_path)\n\n{\n  char check_result;\n  int status;\n  undefined4 result;\n  int *error_ptr;\n  undefined8 message;\n  undefined8 *file_handle;\n  long map_entry;\n  char *error_msg;\n  undefined8 *archived_file;\n  undefined8 *prev_archived_file;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_info);\n    if (status < 0) {\nLAB_00102522:\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(message,file_path);\n      }\n      else {\n        error_msg = strerror(*error_ptr);\n        message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(message,file_path,error_msg);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (file_info.st_size < 0) {\n        message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(message,file_path);\n      }\n      else if (file_info.st_size != 0) {\n        if (target_option == 0) {\n          file_handle = (undefined8 *)bfd_openr(file_path,\"plugin\");\n        }\n        else {\n          file_handle = (undefined8 *)bfd_openr(file_path);\n        }\n        if (file_handle != (undefined8 *)0x0) {\n          if (line_numbers_option != 0) {\n            *(uint *)((long)file_handle + 0x44) = *(uint *)((long)file_handle + 0x44) | 0x8000;\n          }\n          check_result = bfd_check_output_format(file_handle,2);\n          if (check_result == '\\0') {\n            result = bfd_check_output_format_matches(file_handle,1,&file_info);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            set_print_width(file_handle);\n            (**(code **)output_format)(file_path);\n            display_rel_file(file_handle,0);\n          }\n          else {\n            (**(code **)(output_format + 8))(*file_handle);\n            if ((print_armap_option != 0) &&\n               (map_entry = bfd_get_next_mapent(file_handle,0xffffffffffffffff,&file_info), map_entry != -1)) {\n              error_msg = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_msg);\n              do {\n                archived_file = (undefined8 *)(**(code **)(file_handle[1] + 0x1e0))(file_handle,map_entry);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_info.st_dev != 0) {\n                  print_symname(&DAT_0010712d,0,*(long *)file_info.st_dev,file_handle);\n                  printf(\" in %s\\n\",*archived_file);\n                }\n                map_entry = bfd_get_next_mapent(file_handle,map_entry,&file_info);\n              } while (map_entry != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                prev_archived_file = archived_file;\n                archived_file = (undefined8 *)bfd_openr_next_archived_file(file_handle,prev_archived_file);\n                if (archived_file == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    bfd_fatal(*file_handle);\nLAB_00102516:\n                    bfd_fatal(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (prev_archived_file != (undefined8 *)0x0) {\n                    bfd_close(prev_archived_file);\n                    lineno_cache_bfd = 0;\n                    lineno_cache_rel_bfd = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                check_result = bfd_check_output_format_matches(archived_file,1,&file_info);\n                if (check_result == '\\0') {\n                  bfd_nonfatal(*archived_file);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    list_matching_output_formats(file_info.st_dev);\n                  }\n                }\n                else {\n                  set_print_width(archived_file);\n                  (**(code **)(output_format + 0x10))(*file_handle,*archived_file);\n                  display_rel_file(archived_file,file_handle);\n                }\n              } while (prev_archived_file == (undefined8 *)0x0);\n              bfd_close(prev_archived_file);\n              lineno_cache_bfd = 0;\n              lineno_cache_rel_bfd = 0;\n            } while (prev_archived_file != archived_file);\n          }\nLAB_001044b4:\n          result = 1;\n          while (check_result = bfd_close(file_handle), check_result == '\\0') {\n            bfd_fatal(file_path);\nLAB_001025ac:\n            bfd_nonfatal(file_path);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              list_matching_output_formats(file_info.st_dev);\n            }\n          }\n          lineno_cache_rel_bfd = 0;\n          lineno_cache_bfd = 0;\n          return result;\n        }\n        bfd_nonfatal(file_path);\n      }\n    }\n    else {\n      message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(message,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "print_archive_filename_bsd",
                "strerror",
                "non_fatal",
                "set_print_width",
                "print_archive_member_bsd",
                "display_file.cold",
                "list_matching_formats",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "print_symname",
                "bfd_openr",
                "print_object_filename_bsd",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "bfd_get_error",
                "bfd_fatal",
                "display_rel_file",
                "bfd_close",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "FUN_001055e0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001055e0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_0010c010": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c010",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_0010c010"
        },
        "FUN_0010c098": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c098",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010c098"
        },
        "FUN_0010c130": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c130",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010c130"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "prefix",
                "param_2": "suffix",
                "print_format_string": "result"
            },
            "code": "\nvoid concatenate_strings_001025f5(undefined8 prefix,undefined8 suffix)\n\n{\n  result = concat(&DAT_001071d7,suffix,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_file_name_00102670",
                "param_1": "file_name",
                "filename_per_file": "should_print_filename"
            },
            "code": "\nvoid print_file_name_00102670(undefined8 file_name)\n\n{\n  if (should_print_filename != 0) {\n    printf(\"\\n%s:\\n\",file_name);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_name_00102670"
        },
        "FUN_0010c0b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b8",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b8"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_value.constprop.0.cold",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "display_file.cold",
                "list_matching_formats",
                "usage.cold",
                "FUN_00104d5b",
                "print_object_filename_sysv",
                "main",
                "set_output_format",
                "bfd_nonfatal.cold",
                "print_symbol_info_sysv",
                "display_rel_file",
                "display_file",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "FUN_0010c0d0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0d0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010c0d0"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_and_sort_strings_00104fa0",
                "param_1": "string_1",
                "param_2": "string_2",
                "__s2": "string_2_ptr",
                "__s1": "string_1_ptr",
                "uVar1": "string_comparison_result",
                "lVar2": "string_1_length",
                "lVar3": "string_2_length"
            },
            "code": "\nuint compare_and_sort_strings_00104fa0(undefined8 string_1,undefined8 string_2)\n\n{\n  char *string_2_ptr;\n  char *string_1_ptr;\n  uint string_comparison_result;\n  long string_1_length;\n  long string_2_length;\n  \n  string_1_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string_1,sort_x);\n  string_2_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string_2,sort_y);\n  if ((string_1_length == 0) || (string_2_length == 0)) {\n    bfd_fatal(*sort_bfd);\n  }\n  else {\n    string_2_ptr = *(char **)(string_2_length + 8);\n    string_1_ptr = *(char **)(string_1_length + 8);\n    if (string_2_ptr == (char *)0x0) {\n      return (uint)(string_1_ptr != (char *)0x0);\n    }\n    if (string_1_ptr != (char *)0x0) {\n      if (*string_2_ptr == '\\0') {\n        return (uint)(*string_1_ptr != '\\0');\n      }\n      if (*string_1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      string_comparison_result = strcoll(string_1_ptr,string_2_ptr);\n      return string_comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "non_numeric_forward.cold",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "numeric_forward",
                "size_forward1",
                "non_numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_and_sort_strings_00104fa0"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010c028": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c028",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_0010c028"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_symbol_info_001064a0",
                "param_1": "filenamePtr",
                "param_2": "symbolPtr",
                "filename_per_symbol": "useFilenameInfo",
                "printf": "print"
            },
            "code": "\nvoid printSymbolInfo_001064a0(undefined8 *filenamePtr,undefined8 *symbolPtr)\n\n{\n  if (useFilenameInfo == 0) {\n    return;\n  }\n  if (filenamePtr != (undefined8 *)0x0) {\n    print(\"%s[%s]: \",*filenamePtr);\n    return;\n  }\n  print(\"%s: \",*symbolPtr);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_posix.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064a0"
        },
        "FUN_0010c148": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c148",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c148"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "symClassBitShifted",
                "iVar3": "formatResult",
                "plVar4": "symInfo",
                "piVar5": "errnoPtr",
                "uVar6": "errorString",
                "lVar7": "infoAddress",
                "uVar8": "width",
                "bVar9": "typeByte",
                "uVar10": "printWidth",
                "pcVar11": "typeName",
                "in_R8": "unknown1",
                "in_R9": "unknown2"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort symClassBitShifted;\n  int formatResult;\n  long *symInfo;\n  int *errnoPtr;\n  undefined8 errorString;\n  long infoAddress;\n  ulong width;\n  byte typeByte;\n  ulong printWidth;\n  char *typeName;\n  undefined8 unknown1;\n  undefined8 unknown2;\n  \n  width = (ulong)print_width;\n  if ((print_width - 0x20 & 0xffffffdf) == 0) {\n    printf(print_format_string,symbol);\n    return;\n  }\n  symInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  printWidth = width;\n  fatal(symInfo,width);\n  print_symname(\"%-20s|\",symInfo,0,printWidth,unknown1,unknown2,width);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symInfo);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symInfo + 8));\n  if (*(char *)(*symInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symInfo + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symInfo[2] == 0) {\n    if (symInfo[3] != 0) {\n      infoAddress = *(long *)(symInfo[3] + 0x30);\n      isUndefined = *(char *)(infoAddress + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        typeName = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        typeName = \"Block\";\n      }\n      else if (*(ushort *)(infoAddress + 0x26) == 0) {\n        typeName = \"None\";\n      }\n      else {\n        symClassBitShifted = *(ushort *)(infoAddress + 0x26) >> 4 & 3;\n        if (symClassBitShifted == 2) {\n          typeName = \"Function\";\n        }\n        else if (symClassBitShifted == 3) {\n          typeName = \"Array\";\n        }\n        else {\n          if (symClassBitShifted != 1) {\n            free(bufp_6);\n            symClassBitShifted = *(ushort *)(infoAddress + 0x26);\n            typeByte = *(byte *)(infoAddress + 0x28);\n            typeName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            formatResult = asprintf(&bufp_6,typeName,(ulong)typeByte,(ulong)symClassBitShifted);\n            typeName = bufp_6;\n            goto joined_r0x00103964;\n          }\n          typeName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    typeByte = *(byte *)(symInfo[2] + 0x48) & 0xf;\n    switch(typeByte) {\n    case 0:\n      typeName = \"NOTYPE\";\n      break;\n    case 1:\n      typeName = \"OBJECT\";\n      break;\n    case 2:\n      typeName = \"FUNC\";\n      break;\n    case 3:\n      typeName = \"SECTION\";\n      break;\n    case 4:\n      typeName = \"FILE\";\n      break;\n    case 5:\n      typeName = \"COMMON\";\n      break;\n    case 6:\n      typeName = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      typeName = \"<processor specific>: %d\";\n      if ((2 < typeByte - 0xd) && (typeName = \"<OS specific>: %d\", 2 < typeByte - 10)) {\n        typeName = \"<unknown>: %d\";\n      }\n      typeName = (char *)dcgettext(0,typeName,5);\n      formatResult = asprintf(&bufp_7,typeName,(ulong)typeByte);\n      typeName = bufp_7;\njoined_r0x00103964:\n      if (formatResult < 0) {\n        errnoPtr = __errno_location();\n        errorString = xstrerror(*errnoPtr);\n        fatal(&DAT_0010712d,errorString);\nLAB_00103983:\n        typeName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeName);\n  }\n  if (symInfo[2] == 0) {\n    if (symInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoAddress = symInfo[2];\n  if ((infoAddress != 0) || (infoAddress = symInfo[3], infoAddress != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoAddress + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_0010651a",
                "print_symbol_info_bsd",
                "print_symbol_info_bsd.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_file_info_001053b0",
                "param_1": "filename",
                "param_2": "fileContent",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printFileInfo_001053b0(undefined8 *filename,undefined8 *fileContent,undefined8 param3,undefined8 param4)\n\n{\n  if (filename_per_symbol == 0) {\n    return;\n  }\n  if (filename != (undefined8 *)0x0) {\n    printf(\"%s:\",*filename);\n  }\n  printf(\"%s:\",*fileContent,param4);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_bsd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_file_info_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "display_files_001055f0",
                "param_1": "num_files",
                "param_2": "file_names",
                "pbVar1": "byte_ptr",
                "bVar2": "byte_val",
                "bVar3": "is_at_file",
                "bVar4": "is_escape_char",
                "bVar5": "is_quoted",
                "cVar6": "other_format",
                "bVar7": "curr_char",
                "cVar8": "target_name",
                "cVar9": "unicode_display_type",
                "iVar10": "index",
                "uVar11": "count",
                "iVar12": "iter",
                "uVar13": "option",
                "uVar14": "radix",
                "__stream": "file_stream",
                "__s": "file_content",
                "piVar15": "ptr_to_int",
                "sVar16": "length",
                "__ptr": "new_str",
                "__src": "str_array",
                "lVar17": "str_length",
                "plVar18": "file_names",
                "plVar19": "curr_file_name",
                "uVar20": "error_msg",
                "uVar21": "copyright_msg",
                "pcVar22": "str_ptr",
                "pbVar23": "byte_ptr",
                "unaff_RBP": "return_ptr",
                "lVar24": "file_name",
                "pbVar25": "byte_ptr",
                "pcVar26": "error_msg",
                "unaff_R12": "counter",
                "piVar27": "opt_arg",
                "local_110": "curr_file_index",
                "local_10c": "max_files",
                "local_108": "max_name_length",
                "local_c8": "stat_result"
            },
            "code": "\n\n\nundefined1 * display_files_001055f0(int num_files,long *file_names)\n\n{\n  byte *byte_ptr;\n  byte byte_val;\n  bool is_at_file;\n  bool is_escape_char;\n  bool is_quoted;\n  char other_format;\n  byte curr_char;\n  char target_name;\n  char unicode_display_type;\n  int index;\n  uint count;\n  int iter;\n  undefined4 option;\n  undefined4 radix;\n  FILE *file_stream;\n  byte *file_content;\n  int *ptr_to_int;\n  size_t length;\n  byte *new_str;\n  long *str_array;\n  long str_length;\n  long *file_names;\n  long *curr_file_name;\n  undefined8 error_msg;\n  undefined8 copyright_msg;\n  char *str_ptr;\n  byte *byte_ptr;\n  undefined1 *return_ptr;\n  long file_name;\n  byte *byte_ptr;\n  char *error_msg;\n  int *counter;\n  int *opt_arg;\n  int curr_file_index;\n  int max_files;\n  size_t max_name_length;\n  stat stat_result;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str_ptr = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *file_names;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  file_names = file_names;\n  if (1 < num_files) {\n    max_files = 2000;\n    counter = (int *)0x1;\n    curr_file_index = 0;\n    do {\n      iter = (int)counter;\n      return_ptr = (undefined1 *)(long)iter;\n      opt_arg = (int *)((long)return_ptr * 8);\n      if (*(char *)file_names[(long)return_ptr] != '@') goto LAB_00105a70;\n      max_files = max_files + -1;\n      if (max_files == 0) {\n        file_name = *file_names;\n        error_msg = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str_ptr = (char *)file_names[(long)return_ptr] + 1;\n      index = stat(str_ptr,&stat_result);\n      if (index < 0) {\nLAB_00105a70:\n        if (num_files <= iter + 1) break;\nLAB_00105a7a:\n        count = iter + 1;\n        curr_file_index = iter;\n      }\n      else {\n        if ((stat_result.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(str_ptr,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        index = fseek(file_stream,0,2);\n        if (((index == -1) ||\n            (str_ptr = (char *)ftell(file_stream), (int *)str_ptr == (int *)0xffffffffffffffff)) ||\n           (index = fseek(file_stream,0,0), index == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (iter + 1 < num_files) goto LAB_00105a7a;\n          break;\n        }\n        file_content = (byte *)xmalloc((char *)((long)str_ptr + 1));\n        ptr_to_int = (int *)fread(file_content,1,(size_t)str_ptr,file_stream);\n        if (((int *)str_ptr != ptr_to_int) && (index = ferror(file_stream), index != 0)) {\n          free(file_content);\n          goto LAB_00105ad0;\n        }\n        file_content[(long)ptr_to_int] = 0;\n        curr_char = *file_content;\n        byte_ptr = file_content;\n        if (curr_char != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)curr_char * 2] & 0x40) != 0) goto LAB_001057c0;\n          length = strlen((char *)file_content);\n          new_str = (byte *)xmalloc(length + 1);\n          index = 0;\n          is_quoted = false;\n          is_at_file = false;\n          file_name = 0;\n          str_array = (long *)0x0;\n          is_escape_char = false;\n          byte_ptr = file_content;\n          do {\n            while (((&_sch_istable)[(ulong)*byte_ptr * 2] & 0x40) != 0) {\n              byte_ptr = byte_ptr + 1;\n            }\n            if ((index == 0) || (curr_file_name = str_array + file_name, index + -1 <= (int)file_name)) {\n              if (str_array == (long *)0x0) {\n                index = 8;\n                str_array = (long *)xmalloc(0x40);\n                curr_file_name = str_array + file_name;\n                *curr_file_name = 0;\n              }\n              else {\n                index = index * 2;\n                str_array = (long *)xrealloc(str_array,(long)index << 3);\n                curr_file_name = str_array + file_name;\n                *curr_file_name = 0;\n              }\n            }\n            curr_char = *byte_ptr;\n            byte_ptr = new_str;\n            while (curr_char != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)curr_char * 2] & 0x40) != 0) &&\n                   (!(bool)(is_quoted | is_escape_char | is_at_file))) {\n                  is_escape_char = false;\n                  is_quoted = false;\n                  is_at_file = false;\n                  goto LAB_001058e0;\n                }\n                if (!is_escape_char) break;\n                byte_ptr = byte_ptr + 1;\n                *byte_ptr = curr_char;\n                byte_ptr = byte_ptr + 1;\n                is_escape_char = false;\n                curr_char = *byte_ptr;\n                if (curr_char == 0) goto LAB_001058e0;\n              }\n              if (curr_char == 0x5c) {\n                is_escape_char = true;\n              }\n              else if (is_at_file) {\n                if (curr_char == 0x27) {\n                  is_at_file = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr = curr_char;\n                  byte_ptr = byte_ptr + 1;\n                }\n              }\n              else if (is_quoted) {\n                if (curr_char != 0x22) goto LAB_00105a55;\n                is_quoted = false;\n              }\n              else if (curr_char == 0x27) {\n                is_at_file = true;\n              }\n              else {\n                if (curr_char != 0x22) goto LAB_00105a55;\n                is_quoted = true;\n              }\n              byte_ptr = byte_ptr + 1;\n              byte_ptr = byte_ptr + 1;\n              curr_char = *byte_ptr;\n            }\nLAB_001058e0:\n            *byte_ptr = 0;\n            str_length = xstrdup(new_str);\n            *curr_file_name = str_length;\n            str_array[file_name + 1] = 0;\n            curr_char = *byte_ptr;\n            byte_val = (&_sch_istable)[(ulong)curr_char * 2];\n            while ((byte_val & 0x40) != 0) {\n              curr_char = byte_ptr[1];\n              byte_ptr = byte_ptr + 1;\n              byte_val = (&_sch_istable)[(ulong)curr_char * 2];\n            }\n            file_name = file_name + 1;\n          } while (curr_char != 0);\n          free(new_str);\n          curr_file_name = file_names;\n          if (file_names == file_names) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        str_array = (long *)xmalloc(8);\n        *str_array = 0;\n        if (file_names == file_names) {\nLAB_00105c79:\n          if (*file_names == 0) {\n            index = 0;\n          }\n          else {\n            file_name = 1;\n            do {\n              index = (int)file_name;\n              curr_file_name = file_names + file_name;\n              file_name = file_name + 1;\n            } while (*curr_file_name != 0);\n          }\n          str_length = 0;\n          curr_file_name = (long *)xmalloc((long)(index + 1) << 3);\n          file_name = *file_names;\n          while (file_name != 0) {\n            error_msg = xstrdup();\n            *(undefined8 *)((long)curr_file_name + str_length) = error_msg;\n            str_length = str_length + 8;\n            file_name = *(long *)((long)file_names + str_length);\n          }\n          *(undefined8 *)((long)curr_file_name + str_length) = 0;\nLAB_0010597d:\n          file_names = curr_file_name;\n          if (*str_array == 0) goto LAB_00105d50;\n          str_ptr = (char *)0x0;\n          do {\n            str_ptr = (char *)((long)str_ptr + 1);\n          } while (str_array[(long)str_ptr] != 0);\n          max_name_length = (long)str_ptr * 8;\n        }\n        else {\nLAB_00105d50:\n          str_ptr = (char *)0x0;\n          max_name_length = 0;\n        }\n        free((void *)file_names[(long)return_ptr]);\n        file_names = (long *)xrealloc(file_names,(long)((long)str_ptr + (long)num_files + 1) * 8);\n        index = num_files + -1 + (int)str_ptr;\n        memmove(file_names + (long)(return_ptr + (long)str_ptr),file_names + 1 + (long)return_ptr,\n                (long)(num_files - iter) << 3);\n        memcpy(file_names + (long)return_ptr,str_array,max_name_length);\n        free(str_array);\n        free(file_content);\n        fclose(file_stream);\n        count = curr_file_index + 1;\n        return_ptr = return_ptr + (long)str_ptr;\n        counter = opt_arg;\n        num_files = index;\n        if (index <= (int)count) break;\n      }\n      counter = (int *)(ulong)count;\n    } while( true );\n  }\n  iter = bfd_init();\n  error_msg = \"fatal error: libbfd ABI mismatch\";\n  if (iter != 0x118) goto LAB_00106085;\n  return_ptr = long_options;\n  target_name = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str_ptr = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  counter = (int *)\"x86_64-pc-linux-gnu\";\n  unicode_display_type = other_format._3_1_;\n  other_format = desc_format._3_1_;\n  radix = print_radix;\n  if (target_name != '\\0') {\nswitchD_00105c5a_caseD_0:\n    print_radix = radix;\n    desc_format._3_1_ = other_format;\n    other_format._3_1_ = unicode_display_type;\n    option = getopt_long(num_files,file_names,str_ptr);\n    opt_arg = _optarg;\n    ptr_to_int = (int *)str_ptr;\n    unicode_display_type = other_format._3_1_;\n    other_format = desc_format._3_1_;\n    radix = print_radix;\n    switch(option) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      opt_arg = counter;\nLAB_001061d5:\n      iter = strcmp((char *)opt_arg,\"l\");\n      if (iter == 0) goto LAB_001061a3;\n      iter = strcmp((char *)opt_arg,\"escape\");\n      counter = opt_arg;\n      if ((iter == 0) || (iter = strcmp((char *)opt_arg,\"e\"), iter == 0)) {\n        unicode_display = 2;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iter = strcmp((char *)opt_arg,\"invalid\");\n      if ((iter == 0) || (iter = strcmp((char *)opt_arg,\"i\"), iter == 0)) {\n        unicode_display = 5;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iter = strcmp((char *)opt_arg,\"hex\");\n      if ((iter == 0) || (iter = strcmp((char *)opt_arg,\"x\"), iter == 0)) {\n        unicode_display = 3;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      iter = strcmp((char *)opt_arg,\"highlight\");\n      if ((iter == 0) || (iter = strcmp((char *)opt_arg,\"h\"), iter == 0)) {\n        unicode_display = 4;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      error_msg = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      filename_per_symbol = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      dynamic = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      counter = (int *)&optarg;\n      do_demangle = 1;\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      if (_optarg != (int *)0x0) {\n        iter = cplus_demangle_name_to_style();\n        ptr_to_int = _optarg;\n        if (iter == 0) {\n          error_msg = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(error_msg,ptr_to_int);\nswitchD_00105c5a_caseD_cc:\n          demangle_flags = demangle_flags | 0x40000;\n          str_ptr = (char *)ptr_to_int;\n          unicode_display_type = other_format._3_1_;\n          other_format = desc_format._3_1_;\n          radix = print_radix;\n        }\n        else {\n          cplus_demangle_set_style();\n          unicode_display_type = other_format._3_1_;\n          other_format = desc_format._3_1_;\n          radix = print_radix;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      print_size = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      defined_only = 1;\n      undefined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      non_weak = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      iter = strcmp((char *)_optarg,\"32_64\");\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      if (iter != 0) {\n        error_msg = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        error_msg = dcgettext(0,error_msg,5);\n        fatal(error_msg);\nswitchD_00105c5a_caseD_56:\n        show_version = 1;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      print_debug_syms = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      external_only = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      line_numbers = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      sort_numerically = 1;\n      no_sort = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      no_sort = 1;\n      sort_numerically = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      reverse_sort = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      print_armap = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      unicode_display_type = *(char *)_optarg;\n      counter = opt_arg;\n      other_format = unicode_display_type;\n      radix = 10;\n      if (unicode_display_type == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < unicode_display_type) {\n        if (unicode_display_type == 'o') {\n          radix = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (unicode_display_type == 'x') {\n          radix = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      error_msg = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      undefined_only = 1;\n      defined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      target = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      unicode_display_type = other_format._3_1_;\n      other_format = desc_format._3_1_;\n      radix = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      sort_by_size = 1;\n      no_sort = 0;\n      sort_numerically = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      ifunc_type_chars = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      iter = strcmp((char *)_optarg,\"default\");\n      if ((iter == 0) || (iter = strcmp((char *)opt_arg,\"d\"), iter == 0)) {\n        unicode_display = 0;\n        counter = opt_arg;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n      }\n      else {\n        iter = strcmp((char *)opt_arg,\"locale\");\n        if (iter != 0) goto LAB_001061d5;\nLAB_001061a3:\n        unicode_display = 1;\n        counter = opt_arg;\n        unicode_display_type = other_format._3_1_;\n        other_format = desc_format._3_1_;\n        radix = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    error_msg = dcgettext(0,error_msg,5);\n    fatal(error_msg,opt_arg);\nLAB_00105f13:\n    file_name = *file_names;\n    error_msg = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,error_msg,file_name);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  radix = bfd_get_error();\n  error_msg = bfd_errmsg(radix);\n  copyright_msg = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(copyright_msg,\"x86_64-pc-linux-gnu\",error_msg);\n  goto LAB_0010613c;\nLAB_001057c0:\n  curr_char = byte_ptr[1];\n  byte_ptr = byte_ptr + 1;\n  if (curr_char == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  quiet = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  return_ptr = (undefined1 *)(ulong)show_version;\n  if (show_version != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str_ptr = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str_ptr);\n    str_ptr = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str_ptr);\n                    \n    exit(0);\n  }\n  if ((sort_by_size != 0) && (undefined_only != 0)) {\n    error_msg = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(error_msg);\n    error_msg = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(error_msg);\n    return return_ptr;\n  }\n  str_ptr = &optind;\n  if (_optind != num_files) {\n    if (1 < num_files - _optind) {\nLAB_00105f38:\n      filename_per_file = 1;\n    }\n    while( true ) {\n      iter = *(int *)str_ptr;\n      if (num_files <= iter) break;\n      file_name = file_names[iter];\n      *(int *)str_ptr = iter + 1;\n      unicode_display_type = display_file(file_name);\n      if (unicode_display_type != '\\0') {\n        iter = *(int *)str_ptr;\n        if (num_files <= iter) break;\n        file_name = file_names[iter];\n        *(int *)str_ptr = iter + 1;\n        unicode_display_type = display_file(file_name);\n        if (unicode_display_type != '\\0') {\n          iter = *(int *)str_ptr;\n          while( true ) {\n            if (num_files <= iter) goto LAB_00105bdd;\n            file_name = file_names[iter];\n            *(int *)str_ptr = iter + 1;\n            unicode_display_type = display_file(file_name);\n            if (unicode_display_type == '\\0') break;\n            iter = *(int *)str_ptr;\n          }\n        }\n      }\n      return_ptr = (undefined1 *)(ulong)((int)return_ptr + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)return_ptr);\n  }\nLAB_0010613c:\n  count = display_file(\"a.out\");\n  return (undefined1 *)(ulong)((count ^ 1) & 0xff);\n}\n\n",
            "called": [
                "xexit",
                "textdomain",
                "fseek",
                "bfd_init",
                "getopt_long",
                "bfd_plugin_set_plugin",
                "xmalloc_set_program_name",
                "bfd_plugin_set_program_name",
                "set_output_format",
                "cplus_demangle_set_style",
                "ferror",
                "strlen",
                "stat",
                "fatal",
                "fclose",
                "xstrdup",
                "setlocale",
                "xrealloc",
                "exit",
                "bfd_errmsg",
                "bfd_get_error",
                "fopen",
                "ftell",
                "display_file",
                "usage",
                "dcgettext",
                "free",
                "non_fatal",
                "xmalloc",
                "printf",
                "bindtextdomain",
                "memcpy",
                "fprintf",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "strcmp",
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "display_files_001055f0"
        },
        "FUN_0010c020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010c020"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_0010c260": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c260",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010c260"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_file_name_0010351b",
                "filename_per_symbol": "file_name_exists"
            },
            "code": "\nvoid print_file_name_0010351b(void)\n\n{\n  if (file_name_exists == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_name_0010351b"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_file_name_header_00103b2b",
                "param_1": "fileDescription",
                "param_2": "fileName",
                "filename_per_symbol": "isFilenamePerSymbol"
            },
            "code": "\nvoid printFileNameHeader_00103b2b(undefined8 fileDescription,undefined8 fileName)\n\n{\n  if (isFilenamePerSymbol == 0) {\n    printf(\"%s[%s]:\\n\",fileDescription,fileName);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_file_name_header_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_demangled_string_00104740",
                "param_1": "formatString",
                "param_2": "paramArray",
                "param_3": "demangledString",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intValue",
                "sVar5": "strLen",
                "pcVar6": "charPtr1",
                "puVar7": "ptr2",
                "pcVar8": "charPtr2",
                "__ptr": "ptr3",
                "uVar9": "ulongVar1",
                "uVar10": "ulongVar2",
                "puVar11": "ptr4",
                "puVar12": "ptr5",
                "__s": "strPtr",
                "__s_00": "strPtr2",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "bVar15": "byteVar",
                "acStack_39": "stackArray"
            },
            "code": "\nvoid printDemangledString_00104740(char *formatString,long *paramArray,undefined8 *demangledString,long param_4)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intValue;\n  size_t strLen;\n  char *charPtr1;\n  undefined8 *ptr2;\n  char *charPtr2;\n  undefined8 *ptr3;\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  undefined *ptr4;\n  undefined8 *ptr5;\n  char *strPtr;\n  undefined8 *strPtr2;\n  long longVar;\n  uint uintVar;\n  byte byteVar;\n  char stackArray [9];\n  \n  byteVar = 0;\n  if (demangledString == (undefined8 *)0x0) {\n    demangledString = *(undefined8 **)(*paramArray + 0x10);\n    if (with_symbol_versions == 0) {\n      print_unicode_string_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr5 = demangledString;\n    if (do_demangle == 0) {\n      charPtr1 = (char *)0x0;\n      if (unicode_display == 0) {\nLAB_00104794:\n        ptr5 = demangledString;\n        ptr3 = (undefined8 *)0x0;\n      }\n      else {\n        ptr3 = (undefined8 *)0x0;\n        if (demangledString != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr5 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtr1 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr5 == '\\0') ||\n         (demangledString = (undefined8 *)bfd_demangle(param_4,ptr5,demangle_flags),\n         demangledString == (undefined8 *)0x0)) {\n        demangledString = ptr5;\n        if (unicode_display != 0) goto LAB_00102698;\n        ptr3 = (undefined8 *)0x0;\n      }\n      else {\n        ptr5 = demangledString;\n        ptr3 = demangledString;\n        if (unicode_display != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr5 = demangledString;\n    if (with_symbol_versions == 0) {\n      if (*(int *)(*(long *)(param_4 + 8) + 8) != 5) goto LAB_00104775;\n      charPtr1 = strchr((char *)demangledString,0x40);\n      if (charPtr1 == (char *)0x0) {\n        if (do_demangle == 0) {\n          if (unicode_display == 0) {\n            if (paramArray == (long *)0x0) {\n              ptr3 = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            else {\n              if (paramArray[2] != 0) {\n                print_and_free_001047d0();\n                return;\n              }\n              ptr3 = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtr1 = '\\0';\n        if (do_demangle == 0) {\n          if (unicode_display == 0) goto LAB_00104794;\n          ptr3 = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtr1 = (char *)0x0;\n    if (do_demangle != 0) goto LAB_0010482b;\n    if (unicode_display == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr5 = demangledString;\n    ptr3 = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)demangledString;\n      demangledString = (undefined8 *)((long)demangledString + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    strLen = strlen((char *)ptr5);\n    strPtr2 = buffer_8;\n    if (buffer_len_9 < strLen * 9) {\n      free(buffer_8);\n      strLen = strlen((char *)ptr5);\n      buffer_len_9 = strLen * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      strPtr2 = buffer_8;\n    }\n    while( true ) {\n      ptr2 = buffer_8;\n      byte1 = *(byte *)ptr5;\n      ptr1 = (undefined8 *)((long)ptr5 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)strPtr2 = byte1;\n          strPtr2 = (undefined8 *)((long)strPtr2 + 1);\n          ptr5 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr5 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = strPtr2;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intValue = isatty(1);\n                if (intValue == 0) {\n                  byte2 = *(byte *)((long)ptr5 + 1);\n                }\n                else {\n                  *(undefined *)(strPtr2 + 1) = 0;\n                  *strPtr2 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr5 + 1);\n                  ptr2 = strPtr2 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr5 >> 2 & 7),\n                        (ulong)((*(byte *)ptr5 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr5 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar1 = (ulong)uintVar; ulongVar1 != 0; ulongVar1 = ulongVar1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr5;\n                    ptr5 = (undefined8 *)((long)ptr5 + (ulong)byteVar * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (unicode_display == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)strPtr2,\"%c\",ulongVar2);\n                  *(undefined *)((long)strPtr2 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar + (long)ptr5);\n                  *(undefined2 *)((long)strPtr2 + 1) = 0x7830;\n                  charPtr2 = (char *)((long)strPtr2 + 3);\n                  do {\n                    strPtr = charPtr2;\n                    byte1 = *(byte *)ptr5;\n                    ptr5 = (undefined8 *)((long)ptr5 + 1);\n                    sprintf(strPtr,\"%02x\",(ulong)byte1);\n                    charPtr2 = strPtr + 2;\n                  } while (ptr5 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (unicode_display == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(strPtr + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(strPtr + 3);\n                  break;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue == 0) {\n                    byte2 = *(byte *)((long)ptr5 + 2);\n                  }\n                  else {\n                    *(undefined *)(strPtr2 + 1) = 0;\n                    *strPtr2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr5 + 2);\n                    ptr2 = strPtr2 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr5 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr5 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr5 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (intValue = isatty(1), intValue != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr5 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue == 0) {\n                    byte2 = *(byte *)((long)ptr5 + 3);\n                  }\n                  else {\n                    *(undefined *)(strPtr2 + 1) = 0;\n                    *strPtr2 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr5 + 3);\n                    ptr2 = strPtr2 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intValue = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr5 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr5 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr5 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr5 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr5 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intValue);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar1 = (ulong)(uint)((int)ptr2 - (int)strPtr2);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)strPtr2 = byte1;\n            uintVar = 1;\n            ulongVar1 = 1;\n          }\n          strPtr2 = (undefined8 *)((long)strPtr2 + ulongVar1);\n          ptr5 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)strPtr2 = 0x5e;\n        *(byte *)((long)strPtr2 + 1) = byte1 + 0x40;\n        strPtr2 = (undefined8 *)((long)strPtr2 + 2);\n        ptr5 = ptr1;\n      }\n    }\n    *(undefined *)strPtr2 = 0;\n    ptr5 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((paramArray != (long *)0x0) && (paramArray[2] != 0)) && (with_symbol_versions != 0)) &&\n     ((charPtr2 = (char *)(**(code **)(*(long *)(param_4 + 8) + 0x220))\n                                  (param_4,paramArray[2],0,stackArray), charPtr2 != (char *)0x0 &&\n      (*charPtr2 != '\\0')))) {\n    ptr4 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(paramArray[2] + 0x20) != 0x10c2a8)) {\n      ptr4 = &DAT_001071df;\n    }\n    ptr3 = (undefined8 *)reconcat(ptr3,ptr5,ptr4,charPtr2,0);\n    ptr5 = ptr3;\n  }\n  printf(formatString,ptr5);\n  if (charPtr1 != (char *)0x0) {\n    *charPtr1 = '@';\n  }\nLAB_001047ba:\n  free(ptr3);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "just_print_symbol_name",
                "print_symbol_info_bsd.cold",
                "display_file",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_demangled_string_00104740"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_0010c0c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c8",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c8"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "report_function_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportParam1",
                "param_10": "reportParam2",
                "param_11": "reportParam3",
                "param_12": "reportParam4",
                "param_13": "reportParam5",
                "param_14": "reportParam6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "reportParam2",
                "local_a8": "reportParam3",
                "local_a0": "reportParam4",
                "local_98": "reportParam5",
                "local_90": "reportParam6",
                "local_88": "input1",
                "local_78": "input2",
                "local_68": "input3",
                "local_58": "input4",
                "local_48": "input5",
                "local_38": "input6",
                "local_28": "input7",
                "local_18": "input8"
            },
            "code": "\nvoid reportFunction_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportParam1,undefined8 reportParam2,undefined8 reportParam3,undefined8 reportParam4,\n                 undefined8 reportParam5,undefined8 reportParam6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 reportParam2;\n  undefined8 reportParam3;\n  undefined8 reportParam4;\n  undefined8 reportParam5;\n  undefined8 reportParam6;\n  undefined4 input1;\n  undefined4 input2;\n  undefined4 input3;\n  undefined4 input4;\n  undefined4 input5;\n  undefined4 input6;\n  undefined4 input7;\n  undefined4 input8;\n  \n  if (flag != '\\0') {\n    input1 = input1;\n    input2 = input2;\n    input3 = input3;\n    input4 = input4;\n    input5 = input5;\n    input6 = input6;\n    input7 = input7;\n    input8 = input8;\n  }\n  stackPointer = &stack0x00000008;\n  size = 8;\n  localBuffer = localArray;\n  bufferSize = 0x30;\n  reportParam2 = reportParam2;\n  reportParam3 = reportParam3;\n  reportParam4 = reportParam4;\n  reportParam5 = reportParam5;\n  reportParam6 = reportParam6;\n  report(reportParam1,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "display_file.cold",
                "display_rel_file",
                "FUN_00104d5b",
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_function_00106400"
        },
        "FUN_0010c1e8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1e8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1e8"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_print_width",
                "list_matching_formats",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "usage",
                "FUN_001047d0",
                "print_symname.cold",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "size_forward1",
                "main",
                "usage",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "print_symbol_info_bsd",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_sort_00103533",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result"
            },
            "code": "\nulong compare_and_sort_00103533(undefined8 *array1,undefined8 *array2)\n\n{\n  ulong result;\n  \n  if ((ulong)array1[1] < (ulong)array2[1]) {\n    return (ulong)(-(uint)(reverse_sort == 0) | 1);\n  }\n  if ((ulong)array2[1] < (ulong)array1[1]) {\n    return (ulong)((-(uint)(reverse_sort == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (**(code **)(sorters + (long)reverse_sort * 8))(*array1,*array2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_sort_00103533"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "list_matching_formats",
                "bfd_nonfatal",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_constant_value_0010651a"
            },
            "code": "\nvoid print_constant_value_0010651a(void)\n\n{\n  print_value_constprop_0();\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "print_symbol_info_posix.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_constant_value_0010651a"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolInfo",
                "param_2": "param",
                "iVar1": "printWidth",
                "cVar2": "isUndefinedSymclass",
                "uVar3": "symbolValue",
                "lVar4": "printValue",
                "print_width": "initialPrintWidth",
                "sort_by_size": "sortBySize",
                "print_size": "printSize",
                "print_format_string": "formatString",
                "printf": "printMessage",
                "print_symbol_info_bsd_cold": "printSymbolInfoBSDCold",
                "print_symname": "printSymbolName",
                "other_format": "otherFormat",
                "desc_format": "descriptionFormat"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolInfo,undefined8 param)\n\n{\n  int printWidth;\n  char isUndefinedSymclass;\n  undefined8 symbolValue;\n  long printValue;\n  \n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  printWidth = initialPrintWidth;\n  if (isUndefinedSymclass == '\\0') {\n    if (sortBySize == 0) {\n      if ((initialPrintWidth - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbolValue = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        fatal(symbolValue,printWidth);\n        goto LAB_00103623;\n      }\n      symbolValue = *(undefined8 *)*symbolInfo;\n    }\n    else {\n      if (printSize == 0) {\n        if (symbolInfo[2] == 0) {\n          printValue = symbolInfo[1];\n        }\n        else {\n          printValue = *(long *)(symbolInfo[2] + 0x38);\n        }\n        print_value_constprop_0(printValue);\n        if (printSize != 0) {\n          printSymbolInfo_001053c0BSDCold();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbolValue = *(undefined8 *)*symbolInfo;\n      if ((initialPrintWidth - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printMessage(formatString,symbolValue);\n    if (printSize != 0) {\n      printSymbolInfo_001053c0BSDCold();\n      return;\n    }\n  }\n  else if (initialPrintWidth == 0x40) {\n    printMessage(\"        \");\n    printMessage(\"        \");\n  }\n  else {\n    printMessage(\"        \");\n  }\nLAB_00105423:\n  printMessage(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) != '-') {\n    printSymbolName(&DAT_0010712c,symbolInfo,0,param);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printMessage((char *)&otherFormat,(ulong)(uint)(int)*(char *)(*symbolInfo + 0x19));\n  putchar(0x20);\n  printMessage((char *)&descriptionFormat,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n  printMessage(\" %5s\",*(undefined8 *)(*symbolInfo + 0x20));\n  printSymbolName(&DAT_0010712c,symbolInfo,0,param);\n  return;\n}\n\n",
            "called": [
                "fatal",
                "bfd_is_undefined_symclass",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_bsd.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbolTableEntry",
                "param_2": "unusedParam",
                "cVar1": "isUndefinedSymbolClass",
                "print_symname": "printSymbolName",
                "printf": "printFormattedOutput",
                "bfd_is_undefined_symclass": "isUndefinedSymbolClass",
                "putchar": "printChar",
                "print_value_constprop_0": "printValueConstprop",
                "print_constant_value_0010651a": "printConstantValue"
            },
            "code": "\nvoid printSymbolInfo_001064b0(long *symbolTableEntry,undefined8 unusedParam)\n\n{\n  char isUndefinedSymbolClass;\n  \n  printSymbolName(&DAT_00107363,symbolTableEntry,0,unusedParam);\n  printFormattedOutput(\"%c \",(ulong)(uint)(int)*(char *)(*symbolTableEntry + 8));\n  isUndefinedSymbolClass = isUndefinedSymbolClass((int)*(char *)(*symbolTableEntry + 8));\n  if (isUndefinedSymbolClass != '\\0') {\n    printFormattedOutput(\"        \");\n    return;\n  }\n  printValueConstprop(*(undefined8 *)*symbolTableEntry);\n  printChar(0x20);\n  if (symbolTableEntry[2] == 0) {\n    if (symbolTableEntry[1] != 0) {\n      printConstantValue();\n      return;\n    }\n  }\n  else if (*(long *)(symbolTableEntry[2] + 0x38) != 0) {\n    printValueConstprop();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_posix.cold",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_0010c030": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c030",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010c030"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010c150": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c150",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010c150"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_symbol_symname_00103b49",
                "param_1": "symbol_address",
                "param_2": "additional_param"
            },
            "code": "\nvoid print_symbol_symname_00103b49(undefined8 symbol_address,undefined8 additional_param)\n\n{\n  print_symname(&DAT_0010712d,symbol_address,0,additional_param);\n  return;\n}\n\n",
            "called": [
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_symname_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbol_information_00103abf",
                "param_1": "filename",
                "param_2": "symbol",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolInformation_00103abf(undefined8 filename,undefined8 symbol)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (undefined_only == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filename,symbol);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (print_width != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_information_00103abf"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_result_00103bf6",
                "in_RAX": "input_value",
                "iVar1": "forward_result",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] calculate_result_00103bf6(void)\n\n{\n  int forward_result;\n  undefined8 input_value;\n  undefined result [16];\n  \n  forward_result = non_numeric_forward();\n  result._0_4_ = -forward_result;\n  result._4_4_ = 0;\n  result._8_8_ = input_value;\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "unaff_RBX": "outputFile",
                "lVar1": "target",
                "pcVar2": "translation",
                "in_stack_00000008": "exitCode"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long target;\n  char *translation;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitCode;\n  \n  translation = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,translation);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    target = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (target == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_matching_formats",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "print_symbol_info_bsd.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_symbols_00102c19",
                "pcVar1": "symbolName",
                "pcVar2": "sortFunction",
                "cVar3": "flag",
                "iVar4": "comparisonResult",
                "uVar5": "isSpecialSymbol",
                "uVar6": "undefinedValue",
                "lVar7": "length",
                "puVar8": "symbol",
                "lVar9": "value",
                "puVar10": "result",
                "puVar12": "arguments",
                "puVar13": "pointer1",
                "puVar14": "pointer2",
                "unaff_RBX": "resultPointer",
                "unaff_RBP": "basePointer",
                "puVar15": "sortedSymbols",
                "unaff_R12": "count",
                "unaff_R13": "currentSymbol",
                "unaff_R14": "symbolCount",
                "unaff_R15": "symbolData",
                "bVar16": "booleanFlag",
                "bVar17": "byteFlag",
                "unaff_retaddr": "returnAddress",
                "uVar18": "size",
                "in_stack_00000008": "someValue",
                "in_stack_00000010": "tempArray",
                "in_stack_00000018": "symbolArray",
                "in_stack_00000038": "someOtherValue",
                "in_stack_00000040": "heapMemory",
                "in_stack_00000048": "dynamicData"
            },
            "code": "\nvoid processSymbols_00102c19(void)\n\n{\n  char *symbolName;\n  code *sortFunction;\n  char flag;\n  int comparisonResult;\n  uint isSpecialSymbol;\n  undefined8 undefinedValue;\n  long length;\n  undefined8 *symbol;\n  long value;\n  undefined8 *result;\n  undefined8 *resultPointer;\n  undefined8 *__ptr;\n  undefined8 *basePointer;\n  undefined8 *puVar11;\n  undefined8 *arguments;\n  undefined8 *in_R8;\n  undefined8 *pointer1;\n  undefined8 *in_R9;\n  undefined8 *pointer2;\n  undefined8 *count;\n  undefined8 *sortedSymbols;\n  undefined8 *currentSymbol;\n  undefined8 *symbolCount;\n  undefined8 *symbolData;\n  bool booleanFlag;\n  byte byteFlag;\n  ulong returnAddress;\n  ulong size;\n  undefined8 someValue;\n  undefined8 *tempArray;\n  undefined8 *symbolArray;\n  undefined8 someOtherValue;\n  void *heapMemory;\n  undefined8 *dynamicData;\n  \n  byteFlag = 0;\n  if (allow_special_symbols == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (resultPointer != currentSymbol) {\n      if (symbolCount == (undefined8 *)0x8) {\n        *resultPointer = *currentSymbol;\n        process_symbol_data_001049c0();\n        return;\n      }\n      for (; symbolCount != (undefined8 *)0x0; symbolCount = (undefined8 *)((long)symbolCount + -1)) {\n        *(undefined *)resultPointer = *(undefined *)currentSymbol;\n        currentSymbol = (undefined8 *)((long)currentSymbol + (ulong)byteFlag * -2 + 1);\n        resultPointer = (undefined8 *)((long)resultPointer + (ulong)byteFlag * -2 + 1);\n      }\n      process_symbol_data_001049c0();\n      return;\n    }\n    resultPointer = (undefined8 *)((long)resultPointer + (long)symbolCount);\nLAB_001049c3:\n    do {\n      do {\n        currentSymbol = (undefined8 *)((long)currentSymbol + (long)symbolCount);\n        sortedSymbols = count;\n        arguments = basePointer;\n        if (count <= currentSymbol) goto LAB_00104b15;\nLAB_001049cf:\n        symbol = (undefined8 *)\n                 (**(code **)(basePointer[1] + 0x270))\n                           (basePointer,returnAddress & 0xffffffff,currentSymbol,symbolData);\n        puVar11 = basePointer;\n        arguments = currentSymbol;\n        sortedSymbols = symbolData;\n        if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)symbol[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isSpecialSymbol = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isSpecialSymbol != 0) goto LAB_00104a2d;\n          currentSymbol = (undefined8 *)((long)currentSymbol + (long)symbolCount);\n          sortedSymbols = count;\n          arguments = basePointer;\n          if (count <= currentSymbol) {\nLAB_00104b15:\n            resultPointer = (undefined8 *)((long)resultPointer - (long)symbolArray);\n            if (symbolCount == (undefined8 *)0x8) {\n              value = arguments[1];\n              puVar11 = (undefined8 *)((long)resultPointer + 7);\n              if (-1 < (long)resultPointer) {\n                puVar11 = resultPointer;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              sortFunction = *(code **)(value + 0x208);\n              puVar11 = (undefined8 *)((long)puVar11 >> 3);\n            }\n            else {\n              puVar11 = (undefined8 *)((long)resultPointer / (long)symbolCount);\n              value = arguments[1];\n              sortFunction = *(code **)(value + 0x208);\n            }\n            basePointer = arguments;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = arguments;\n              sort_x = (undefined8 *)(*sortFunction)(arguments);\n              sort_y = (undefined8 *)(**(code **)(arguments[1] + 0x208))(arguments);\n              resultPointer = dynamicData;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*arguments);\n                __ptr = symbolData;\n                goto LAB_00102d8e;\n              }\n              count = (undefined8 *)(ulong)someOtherValue._4_4_;\n              if (sort_by_size != 0) {\n                size = (ulong)(dynamic != 0);\n                qsort(dynamicData,(size_t)puVar11,(size_t)count,size_forward1);\n                sortedSymbols = (undefined8 *)xmalloc((long)puVar11 << 4);\n                pointer1 = sort_x;\n                basePointer = sort_y;\n                symbolCount = (undefined8 *)((long)puVar11 * (long)count + (long)resultPointer);\n                symbol = sort_x;\n                in_R9 = sort_y;\n                if (symbolCount <= resultPointer) goto LAB_00102ec2;\n                puVar11 = (undefined8 *)\n                          (**(code **)(arguments[1] + 0x270))(arguments,size & 0xffffffff,resultPointer);\n                __ptr = resultPointer;\n                in_R8 = count;\n                tempArray = sortedSymbols;\n                if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(dynamicData,(size_t)puVar11,(size_t)count,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              value = arguments[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              arguments = dynamicData;\n              symbol = (undefined8 *)(ulong)sort_by_size;\n              symbolCount = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                sortedSymbols = (undefined8 *)(**(code **)(value + 0x208))(basePointer);\n                if (sortedSymbols == (undefined8 *)0x0) goto LAB_00102ed2;\n                resultPointer = __ptr + (long)puVar11 * 2;\n                puVar11 = __ptr;\n                do {\n                  if (resultPointer <= puVar11) {\nLAB_00104c75:\n                    if (heapMemory == (void *)0x0) {\n                      free(dynamicData);\n                      free(__ptr);\n                      return;\n                    }\n                    free(heapMemory);\n                    free(dynamicData);\n                    free(__ptr);\n                    return;\n                  }\n                  symbol = sortedSymbols;\n                  value = (**(code **)(basePointer[1] + 0x270))(basePointer,symbolCount,*puVar11);\n                  if (value == 0) {\n                    bfd_fatal(*basePointer,0);\nLAB_00102ed2:\n                    arguments = (undefined8 *)*basePointer;\n                    bfd_fatal();\n                    pointer1 = in_R8;\n                    pointer2 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  arguments = puVar11 + 1;\n                  puVar11 = puVar11 + 2;\n                  print_symbol(basePointer,value,*arguments,someValue);\n                } while( true );\n              }\n              count = (undefined8 *)(ulong)someOtherValue._4_4_;\n              symbolData = (undefined8 *)(**(code **)(value + 0x208))(basePointer);\n              if (symbolData == (undefined8 *)0x0) {\n                bfd_fatal(*basePointer);\n                arguments = count;\n                if (dynamic == 0) {\n                  value = (**(code **)(basePointer[1] + 0x350))(basePointer);\n                  puVar11 = dynamicData;\n                  sortedSymbols = count;\n                  if (value < 1) {\n                    symbol = (undefined8 *)0x0;\n                    resultPointer = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    resultPointer = (undefined8 *)xmalloc();\n                    symbol = (undefined8 *)(**(code **)(basePointer[1] + 0x358))(basePointer,resultPointer);\n                    arguments = sortedSymbols;\n                    if ((long)symbol < 0) {\n                      arguments = (undefined8 *)*basePointer;\n                      puVar11 = (undefined8 *)bfd_fatal(arguments,sortedSymbols);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol = count;\n                  resultPointer = dynamicData;\n                  puVar11 = (undefined8 *)0x0;\n                  sortedSymbols = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = resultPointer;\n                value = (**(code **)(basePointer[1] + 0x360))(basePointer,sortedSymbols,puVar11,symbol);\n                count = arguments;\n                if (0 < value) {\n                  count = (undefined8 *)((long)arguments + value);\n                  dynamicData = (undefined8 *)xrealloc(dynamicData);\n                  length = 0;\n                  do {\n                    dynamicData[(long)((long)arguments + length)] =\n                         (void *)(length * 0x30 + (long)heapMemory);\n                    length = length + 1;\n                  } while (value != length);\n                  dynamicData[(long)((long)arguments + value)] = 0;\n                }\n                if ((dynamic == 0) && (resultPointer != (undefined8 *)0x0)) {\n                  free(resultPointer);\n                }\n                if ((*(byte *)((long)basePointer + 0x4a) & 0x10) != 0) {\n                  resultPointer = (undefined8 *)*basePointer;\n                  report_plugin_err = '\\0';\n                  undefinedValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(undefinedValue);\n                }\n                symbolCount = (undefined8 *)(ulong)someOtherValue._4_4_;\n                booleanFlag = dynamic != 0;\n                puVar11 = (undefined8 *)(ulong)booleanFlag;\n                symbol = dynamicData;\n                symbolArray = dynamicData;\n                symbolData = (undefined8 *)(**(code **)(basePointer[1] + 0x208))(basePointer);\n                if (symbolData != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                puVar11 = (undefined8 *)((long)puVar11 * (long)count + (long)arguments);\n                resultPointer = arguments;\n                while( true ) {\n                  if (puVar11 <= resultPointer) goto LAB_00104c75;\n                  symbol = symbolData;\n                  value = (**(code **)(basePointer[1] + 0x270))(basePointer,symbolCount,resultPointer);\n                  if (value == 0) break;\n                  resultPointer = (undefined8 *)((long)resultPointer + (long)count);\n                  print_symbol(basePointer,value,0,someValue);\n                }\n                bfd_fatal(*basePointer,0);\n              }\n              bfd_fatal(*basePointer);\n              arguments = basePointer;\n              sortedSymbols = symbolData;\nLAB_00102eb0:\n              bfd_fatal(*puVar11);\nLAB_00102eb9:\n              bfd_fatal(*arguments);\nLAB_00102ec2:\n              puVar11 = (undefined8 *)0x0;\n              __ptr = resultPointer;\n              in_R8 = count;\n              pointer1 = symbol;\n              basePointer = in_R9;\n              tempArray = sortedSymbols;\nLAB_00104e35:\n              while (in_R9 = pointer1, __ptr < symbolCount) {\n                resultPointer = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (resultPointer < symbolCount) {\n                  symbol = basePointer;\n                  pointer1 = in_R8;\n                  pointer2 = in_R9;\n                  result = (undefined8 *)(**(code **)(arguments[1] + 0x270))();\n                  if (result == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointer2;\n                    in_R8 = pointer1;\n                    arguments = (undefined8 *)*arguments;\n                    result = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol = (undefined8 *)puVar11[4];\n                    if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  value = puVar11[2];\nLAB_00102ee7:\n                  if (symbol == (undefined8 *)result[4]) {\n                    value = result[2] - value;\n                    pointer1 = basePointer;\n                    pointer2 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  value = symbol[8] - value;\n                  pointer1 = basePointer;\n                  pointer2 = __ptr;\n                }\n                else {\n                  symbol = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    value = puVar11[2];\n                    result = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  result = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer1 = basePointer;\n                  pointer2 = __ptr;\n                  if (*(int *)(arguments[1] + 8) == 5) {\n                    value = puVar11[7];\n                  }\n                  else {\n                    value = puVar11[2];\n                    if ((*(byte *)((long)symbol + 0x25) & 0x10) == 0) {\n                      if (resultPointer < symbolCount) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                puVar11 = result;\n                __ptr = resultPointer;\n                basePointer = in_R9;\n                if (value != 0) {\n                  *sortedSymbols = pointer2;\n                  sortedSymbols[1] = value;\n                  sortedSymbols = sortedSymbols + 2;\n                }\n              }\n              puVar11 = (undefined8 *)((long)sortedSymbols - (long)tempArray >> 4);\n              qsort(tempArray,(size_t)puVar11,0x10,size_forward2);\n              value = arguments[1];\n              resultPointer = __ptr;\n              basePointer = arguments;\n              __ptr = tempArray;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        tempArray = symbol;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            tempArray = (undefined8 *)*basePointer;\n            report_plugin_err = '\\0';\n            undefinedValue = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(undefinedValue,tempArray);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          isSpecialSymbol = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbol_data_00104d5b:\n          if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol + 3) & 4) != 0);\n      if (sort_by_size != 0) goto process_symbol_data_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        flag = (**(code **)(basePointer[1] + 0x230))(basePointer);\n        if (flag != '\\0') {\n          processSymbols_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol[4] == 0x10c2a8);\nLAB_00104cba:\n    flag = (**(code **)(basePointer[1] + 0x230))(basePointer);\n    if (flag != '\\0') {\n      processSymbols_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  sortedSymbols = (undefined8 *)((long)count * (long)symbolCount);\n  count = (undefined8 *)((long)symbolArray + (long)sortedSymbols);\n  resultPointer = symbolArray;\n  arguments = basePointer;\n  if (symbolArray < count) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)booleanFlag;\n  currentSymbol = symbolArray;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "errorCode",
                "uVar2": "errorMessage",
                "lVar3": "hasError",
                "in_R10": "additionalInfo",
                "bfd_nonfatal": "handleNonFatalErrors",
                "xexit": "exitProgram",
                "bfd_get_error": "getErrorCode",
                "dcgettext": "getLocalizedErrorMessage",
                "bfd_errmsg": "getErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int errorCode;\n  undefined8 errorMessage;\n  long hasError;\n  undefined8 additionalInfo;\n  \n  handleNonFatalErrors();\n  hasError = 1;\n  exitProgram();\n  errorCode = getErrorCode();\n  if (errorCode == 0) {\n    errorMessage = getLocalizedErrorMessage(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = getErrorMessage(errorCode);\n  }\n  fflush(standardOutput);\n  if (hasError != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",programName,hasError,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",programName,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "non_numeric_forward.cold",
                "get_relocs",
                "size_forward1",
                "display_rel_file",
                "FUN_00104d5b",
                "print_symbol",
                "display_file",
                "numeric_forward.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "display_unicode_characters_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "var1",
                "sVar5": "strLen",
                "puVar6": "ptr2",
                "pcVar7": "strPtr",
                "uVar8": "ulongVal",
                "uVar9": "val",
                "puVar10": "ptr3",
                "puVar11": "ptr4",
                "unaff_RBP": "longVal1",
                "puVar12": "ptr5",
                "unaff_R12": "ptr6",
                "unaff_R13": "ptr7",
                "lVar13": "var2",
                "uVar14": "uintVal",
                "unaff_R14": "charPtr",
                "unaff_R15": "longVal2",
                "bVar15": "byte3",
                "__s": "strVar",
                "in_stack_00000038": "stackVar"
            },
            "code": "\nvoid displayUnicodeCharacters_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int var1;\n  size_t strLen;\n  undefined8 *ptr2;\n  char *strPtr;\n  ulong ulongVal;\n  undefined8 val;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  long longVal1;\n  undefined8 *ptr5;\n  undefined *ptr6;\n  undefined8 *ptr7;\n  long var2;\n  uint uintVal;\n  char *charPtr;\n  long longVal2;\n  byte byte3;\n  char *strVar;\n  undefined8 stackVar;\n  \n  byte3 = 0;\n  ptr5 = ptr7;\n  if (unicode_display != 0) {\n    do {\n      byte1 = *(byte *)ptr5;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr5 = (undefined8 *)((long)ptr5 + 1), byte1 < 0xc0));\n    strLen = strlen((char *)ptr7);\n    ptr5 = buffer_8;\n    ptr4 = ptr7;\n    if (buffer_len_9 < strLen * 9) {\n      free(buffer_8);\n      strLen = strlen((char *)ptr7);\n      buffer_len_9 = strLen * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      ptr5 = buffer_8;\n    }\n    while( true ) {\n      ptr7 = buffer_8;\n      byte1 = *(byte *)ptr4;\n      ptr = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)ptr5 = byte1;\n          ptr5 = (undefined8 *)((long)ptr5 + 1);\n          ptr4 = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr5;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                uintVal = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                var2 = 2;\n                goto LAB_00102917;\n              case 4:\n                var1 = isatty(1);\n                if (var1 == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(ptr5 + 1) = 0;\n                  *ptr5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = ptr5 + 1;\n                }\n              case 2:\n                uintVal = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVal = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  uintVal = 3;\nLAB_00102a62:\n                  for (ulongVal = (ulong)uintVal; ulongVal != 0; ulongVal = ulongVal - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  var2 = 3;\nLAB_00102917:\n                  val = 0x7b;\n                  if (unicode_display == 3) {\n                    val = 0x3c;\n                  }\n                  sprintf((char *)ptr5,\"%c\",val);\n                  *(undefined *)((long)ptr5 + 3) = 0;\n                  ptr2 = (undefined8 *)(var2 + (long)ptr4);\n                  *(undefined2 *)((long)ptr5 + 1) = 0x7830;\n                  strPtr = (char *)((long)ptr5 + 3);\n                  do {\n                    strVar = strPtr;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(strVar,\"%02x\",(ulong)byte1);\n                    strPtr = strVar + 2;\n                  } while (ptr4 != ptr2);\n                  val = 0x7d;\n                  if (unicode_display == 3) {\n                    val = 0x3e;\n                  }\n                  uintVal = (uint)var2;\n                  sprintf(strVar + 2,\"%c\",val);\n                  ptr2 = (undefined8 *)(strVar + 3);\n                  break;\n                case 4:\n                  var1 = isatty(1);\n                  if (var1 == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uintVal = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (var1 = isatty(1), var1 != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVal = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr4 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  uintVal = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  var2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  var1 = isatty(1);\n                  if (var1 != 0) {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uintVal = 4;\n                  var1 = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)var1);\n                  goto LAB_00102a27;\n                default:\n                  uintVal = 4;\n                }\n              }\n            }\n            ulongVal = (ulong)(uint)((int)ptr2 - (int)ptr5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr5 = byte1;\n            uintVal = 1;\n            ulongVal = 1;\n          }\n          ptr5 = (undefined8 *)((long)ptr5 + ulongVal);\n          ptr4 = (undefined8 *)((long)ptr + (ulong)(uintVal - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr5 = 0x5e;\n        *(byte *)((long)ptr5 + 1) = byte1 + 0x40;\n        ptr5 = (undefined8 *)((long)ptr5 + 2);\n        ptr4 = ptr;\n      }\n    }\n    *(undefined *)ptr5 = 0;\n  }\nLAB_0010485e:\n  ptr5 = (undefined8 *)0x0;\n  if ((((longVal1 != 0) && (*(long *)(longVal1 + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((strPtr = (char *)(**(code **)(*(long *)(longVal2 + 8) + 0x220))\n                                  (longVal2,*(long *)(longVal1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), strPtr != (char *)0x0 &&\n      (*strPtr != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(longVal1 + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    ptr5 = (undefined8 *)reconcat(0,ptr7,ptr3,strPtr,0);\n    ptr7 = ptr5;\n  }\n  printf(charPtr,ptr7);\n  if (ptr6 != (undefined *)0x0) {\n    *ptr6 = 0x40;\n  }\n  free(ptr5);\n  return;\n}\n\n",
            "called": [
                "free",
                "xmalloc",
                "isatty",
                "sprintf",
                "strlen",
                "FUN_001047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "display_unicode_characters_0010268b"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_negative_sum_00103bec",
                "in_RAX": "input_buffer",
                "iVar1": "forward_result",
                "auVar2": "return_value"
            },
            "code": "\nundefined  [16] calculate_negative_sum_00103bec(void)\n\n{\n  int forward_result;\n  undefined8 input_buffer;\n  undefined return_value [16];\n  \n  forward_result = numeric_forward();\n  return_value._0_4_ = -forward_result;\n  return_value._4_4_ = 0;\n  return_value._8_8_ = input_buffer;\n  return return_value;\n}\n\n",
            "called": [
                "numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_negative_sum_00103bec"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "error_message",
                "param_2": "variable_arguments",
                "_stdout": "standard_output",
                "_stderr": "standard_error",
                "program_name": "name_of_program"
            },
            "code": "\n\n\nvoid print_error_message_001063a0(char *error_message,__gnuc_va_list variable_arguments)\n\n{\n  fflush(standard_output);\n  fprintf(standard_error,\"%s: \",name_of_program);\n  vfprintf(standard_error,error_message,variable_arguments);\n  putc(10,standard_error);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fflush",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_0010c208": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c208",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c208"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_unicode_string_00102739",
                "unaff_R13": "unicodeString",
                "unaff_R15": "unicodeStringAddress",
                "unaff_RBP": "bufferAddress",
                "unicode_display": "unicodeDisplay",
                "do_demangle": "doDemangle",
                "unaff_R14": "formatString",
                "pcVar6": "atSignPosition",
                "puVar12": "outputBuffer",
                "puVar7": "outputBufferPtr",
                "pcVar8": "symbolVersion",
                "puVar11": "symbolVersionString",
                "__ptr": "demangledString",
                "puVar1": "nextUnicodeChar",
                "bVar2": "unicodeChar1",
                "bVar3": "unicodeChar2",
                "iVar4": "isTerminal",
                "sVar5": "unicodeStringLength",
                "uVar9": "outputLength",
                "uVar10": "specialCharacter",
                "lVar13": "hexStringLength",
                "uVar14": "hexStringLength",
                "bVar15": "isSecondByte"
            },
            "code": "\nvoid printUnicodeString_00102739(void)\n\n{\n  undefined8 *nextUnicodeChar;\n  byte unicodeChar1;\n  byte unicodeChar2;\n  int isTerminal;\n  size_t unicodeStringLength;\n  char *atSignPosition;\n  undefined8 *outputBufferPtr;\n  char *symbolVersion;\n  undefined8 *demangledString;\n  ulong outputLength;\n  undefined8 specialCharacter;\n  undefined *symbolVersionString;\n  long bufferAddress;\n  undefined8 *outputBuffer;\n  undefined8 *unicodeString;\n  long hexStringLength;\n  uint hexStringLength;\n  char *formatString;\n  long unicodeStringAddress;\n  byte isSecondByte;\n  char *__s;\n  undefined8 in_stack_00000038;\n  \n  isSecondByte = 0;\n  outputBuffer = unicodeString;\n  if (*(int *)(*(long *)(unicodeStringAddress + 8) + 8) != 5) {\n    if (doDemangle != 0) {\n      atSignPosition = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    atSignPosition = (char *)0x0;\n    if (unicodeDisplay == 0) {\nLAB_00104794:\n      demangledString = (undefined8 *)0x0;\n    }\n    else {\n      demangledString = (undefined8 *)0x0;\n      if (unicodeString != (undefined8 *)0x0) goto LAB_0010269d;\n      demangledString = (undefined8 *)0x0;\n      unicodeString = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  atSignPosition = strchr((char *)unicodeString,0x40);\n  if (atSignPosition == (char *)0x0) {\n    if (doDemangle != 0) goto LAB_0010482b;\n    if (unicodeDisplay == 0) {\n      if (bufferAddress == 0) {\n        demangledString = (undefined8 *)0x0;\n        printf(formatString);\n      }\n      else {\n        if (*(long *)(bufferAddress + 0x10) != 0) {\n          print_and_free_001047d0();\n          return;\n        }\n        demangledString = (undefined8 *)0x0;\n        printf(formatString);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    outputBuffer = unicodeString;\n    demangledString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      unicodeChar1 = *(byte *)outputBuffer;\n      if (unicodeChar1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)unicodeChar1 * 2] & 2) == 0) &&\n            (outputBuffer = (undefined8 *)((long)outputBuffer + 1), unicodeChar1 < 0xc0));\n    unicodeStringLength = strlen((char *)unicodeString);\n    outputBuffer = buffer_8;\n    if (buffer_len_9 < unicodeStringLength * 9) {\n      free(buffer_8);\n      unicodeStringLength = strlen((char *)unicodeString);\n      buffer_len_9 = unicodeStringLength * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      outputBuffer = buffer_8;\n    }\n    while( true ) {\n      outputBufferPtr = buffer_8;\n      unicodeChar1 = *(byte *)unicodeString;\n      nextUnicodeChar = (undefined8 *)((long)unicodeString + 1);\n      if (unicodeChar1 == 0) break;\n      if (((&_sch_istable)[(ulong)unicodeChar1 * 2] & 2) == 0) {\n        if ((unicodeChar1 < 0xc0) || (unicodeDisplay == 0)) {\n          *(byte *)outputBuffer = unicodeChar1;\n          outputBuffer = (undefined8 *)((long)outputBuffer + 1);\n          unicodeString = nextUnicodeChar;\n        }\n        else {\n          unicodeChar2 = *(byte *)((long)unicodeString + 1);\n          if ((unicodeChar2 & 0xc0) == 0x80) {\n            outputBufferPtr = outputBuffer;\n            if ((unicodeChar1 & 0x20) == 0) {\n              switch(unicodeDisplay) {\n              case 1:\n                hexStringLength = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                hexStringLength = 2;\n                goto LAB_00102917;\n              case 4:\n                isTerminal = isatty(1);\n                if (isTerminal == 0) {\n                  unicodeChar2 = *(byte *)((long)unicodeString + 1);\n                }\n                else {\n                  *(undefined *)(outputBuffer + 1) = 0;\n                  *outputBuffer = 0x6d37343b31335b1b;\n                  unicodeChar2 = *(byte *)((long)unicodeString + 1);\n                  outputBufferPtr = outputBuffer + 1;\n                }\n              case 2:\n                hexStringLength = 2;\n                sprintf((char *)outputBufferPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unicodeString >> 2 & 7)\n                        ,(ulong)((*(byte *)unicodeString & 3) << 6 | unicodeChar2 & 0x3f));\n                outputBufferPtr = (undefined8 *)((long)outputBufferPtr + 6);\n                goto LAB_00102a27;\n              default:\n                hexStringLength = 2;\n              }\n            }\n            else {\n              unicodeChar2 = *(byte *)((long)unicodeString + 2);\n              if ((unicodeChar2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((unicodeChar1 & 0x10) == 0) {\n                switch(unicodeDisplay) {\n                case 1:\n                  hexStringLength = 3;\nLAB_00102a62:\n                  for (outputLength = (ulong)hexStringLength; outputLength != 0; outputLength = outputLength - 1) {\n                    *(undefined *)outputBufferPtr = *(undefined *)unicodeString;\n                    unicodeString = (undefined8 *)((long)unicodeString + (ulong)isSecondByte * -2 + 1);\n                    outputBufferPtr = (undefined8 *)((long)outputBufferPtr + (ulong)isSecondByte * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  hexStringLength = 3;\nLAB_00102917:\n                  specialCharacter = 0x7b;\n                  if (unicodeDisplay == 3) {\n                    specialCharacter = 0x3c;\n                  }\n                  sprintf((char *)outputBuffer,\"%c\",specialCharacter);\n                  *(undefined *)((long)outputBuffer + 3) = 0;\n                  outputBufferPtr = (undefined8 *)(hexStringLength + (long)unicodeString);\n                  *(undefined2 *)((long)outputBuffer + 1) = 0x7830;\n                  symbolVersion = (char *)((long)outputBuffer + 3);\n                  do {\n                    __s = symbolVersion;\n                    unicodeChar1 = *(byte *)unicodeString;\n                    unicodeString = (undefined8 *)((long)unicodeString + 1);\n                    sprintf(__s,\"%02x\",(ulong)unicodeChar1);\n                    symbolVersion = __s + 2;\n                  } while (unicodeString != outputBufferPtr);\n                  specialCharacter = 0x7d;\n                  if (unicodeDisplay == 3) {\n                    specialCharacter = 0x3e;\n                  }\n                  hexStringLength = (uint)hexStringLength;\n                  sprintf(__s + 2,\"%c\",specialCharacter);\n                  outputBufferPtr = (undefined8 *)(__s + 3);\n                  break;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal == 0) {\n                    unicodeChar2 = *(byte *)((long)unicodeString + 2);\n                  }\n                  else {\n                    *(undefined *)(outputBuffer + 1) = 0;\n                    *outputBuffer = 0x6d37343b31335b1b;\n                    unicodeChar2 = *(byte *)((long)unicodeString + 2);\n                    outputBufferPtr = outputBuffer + 1;\n                  }\n                case 2:\n                  hexStringLength = 3;\n                  sprintf((char *)outputBufferPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unicodeString & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unicodeString + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unicodeString + 1) & 3) << 6 | unicodeChar2 & 0x3f));\n                  outputBufferPtr = (undefined8 *)((long)outputBufferPtr + 6);\nLAB_00102a27:\n                  if ((unicodeDisplay == 4) && (isTerminal = isatty(1), isTerminal != 0)) {\n                    *(undefined4 *)outputBufferPtr = 0x6d305b1b;\n                    outputBufferPtr = (undefined8 *)((long)outputBufferPtr + 4);\n                    *(undefined *)outputBufferPtr = 0;\n                  }\n                  break;\n                default:\n                  hexStringLength = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unicodeString + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicodeDisplay) {\n                case 1:\n                  hexStringLength = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  hexStringLength = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal != 0) {\n                    *(undefined *)(outputBuffer + 1) = 0;\n                    *outputBuffer = 0x6d37343b31335b1b;\n                    outputBufferPtr = outputBuffer + 1;\n                  }\n                case 2:\n                  hexStringLength = 4;\n                  isTerminal = sprintf((char *)outputBufferPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unicodeString & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unicodeString + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unicodeString + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unicodeString + 2) >> 2 & 0xfU));\n                  outputBufferPtr = (undefined8 *)((long)outputBufferPtr + (long)isTerminal);\n                  goto LAB_00102a27;\n                default:\n                  hexStringLength = 4;\n                }\n              }\n            }\n            outputLength = (ulong)(uint)((int)outputBufferPtr - (int)outputBuffer);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputBuffer = unicodeChar1;\n            hexStringLength = 1;\n            outputLength = 1;\n          }\n          outputBuffer = (undefined8 *)((long)outputBuffer + outputLength);\n          unicodeString = (undefined8 *)((long)nextUnicodeChar + (ulong)(hexStringLength - 1));\n        }\n      }\n      else {\n        *(undefined *)outputBuffer = 0x5e;\n        *(byte *)((long)outputBuffer + 1) = unicodeChar1 + 0x40;\n        outputBuffer = (undefined8 *)((long)outputBuffer + 2);\n        unicodeString = nextUnicodeChar;\n      }\n    }\n    *(undefined *)outputBuffer = 0;\n    unicodeString = outputBufferPtr;\n  }\n  else {\n    *atSignPosition = '\\0';\n    if (doDemangle == 0) {\n      if (unicodeDisplay == 0) goto LAB_00104794;\n      demangledString = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unicodeString == '\\0') ||\n       (outputBuffer = (undefined8 *)bfd_demangle(), outputBuffer == (undefined8 *)0x0)) {\n      if (unicodeDisplay != 0) goto LAB_00102698;\n      demangledString = (undefined8 *)0x0;\n    }\n    else {\n      unicodeString = outputBuffer;\n      demangledString = outputBuffer;\n      if (unicodeDisplay != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((bufferAddress != 0) && (*(long *)(bufferAddress + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((symbolVersion = (char *)(**(code **)(*(long *)(unicodeStringAddress + 8) + 0x220))\n                                  (unicodeStringAddress,*(long *)(bufferAddress + 0x10),0,\n                                   (long)&stack0x00000038 + 7), symbolVersion != (char *)0x0 &&\n      (*symbolVersion != '\\0')))) {\n    symbolVersionString = &DAT_001071e0;\n    if ((in_stack_00000038._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(bufferAddress + 0x10) + 0x20) != 0x10c2a8)) {\n      symbolVersionString = &DAT_001071df;\n    }\n    demangledString = (undefined8 *)reconcat(demangledString,unicodeString,symbolVersionString,symbolVersion,0);\n    unicodeString = demangledString;\n  }\n  printf(formatString,unicodeString);\n  if (atSignPosition != (char *)0x0) {\n    *atSignPosition = '@';\n  }\nLAB_001047ba:\n  free(demangledString);\n  return;\n}\n\n",
            "called": [
                "bfd_demangle",
                "strchr",
                "printf",
                "FUN_001047d0",
                "print_symname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "print_symname"
            ],
            "imported": false,
            "current_name": "print_unicode_string_00102739"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_dynamic_symbols_00105050",
                "param_1": "symbol1",
                "param_2": "symbol2",
                "cVar1": "lastChar",
                "__s": "symbol1Name",
                "__s_00": "symbol2Name",
                "lVar3": "symbol1Address",
                "uVar2": "symbol2Address",
                "sVar5": "symbol1NameLength",
                "sVar6": "symbol2NameLength",
                "pcVar7": "gnuCompStr1",
                "pcVar8": "gnuCompStr2",
                "lVar9": "symbol1Info",
                "lVar10": "symbol2Info",
                "uVar11": "result",
                "uVar12": "symbol2InfoAddress",
                "uVar13": "symbol1InfoAddress",
                "uVar14": "symbol1InfoPlusAddress",
                "uVar15": "bfdPtr",
                "unaff_R13": "symbol2InfoPlusAddress",
                "bVar16": "needToCompareAddresses",
                "uVar4": "flag"
            },
            "code": "\nulong compareDynamicSymbols_00105050(undefined8 symbol1,undefined8 symbol2)\n\n{\n  char lastChar;\n  ulong symbol2Address;\n  char *symbol1Name;\n  char *symbol2Name;\n  long symbol1Address;\n  uint flag;\n  size_t symbol1NameLength;\n  size_t symbol2NameLength;\n  char *gnuCompStr1;\n  char *gnuCompStr2;\n  long symbol1Info;\n  long symbol2Info;\n  ulong result;\n  ulong symbol2InfoAddress;\n  ulong symbol1InfoAddress;\n  ulong symbol1InfoPlusAddress;\n  undefined8 bfdPtr;\n  long symbol2InfoPlusAddress;\n  bool needToCompareAddresses;\n  \n  symbol1Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,symbol1,sort_x);\n  result = (ulong)sort_dynamic;\n  symbol2Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,result,symbol2,sort_y);\n  if ((symbol1Info != 0) && (symbol2Info != 0)) {\n    symbol1Address = *(long *)(symbol2Info + 0x20);\n    if (*(long *)(symbol1Info + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (symbol1Address == 0x10c2a8) {\nLAB_001050fa:\n        result = non_numeric_forward(symbol1,symbol2);\n        return result;\n      }\n    }\n    else if (symbol1Address == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      symbol1InfoAddress = *(long *)(symbol1Info + 0x10) + *(long *)(*(long *)(symbol1Info + 0x20) + 0x30);\n      result = *(long *)(symbol2Info + 0x10) + *(long *)(symbol1Address + 0x30);\n      if (symbol1InfoAddress == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(symbol1InfoAddress < result) | 1);\n    }\n    return result;\n  }\n  bfdPtr = *sort_bfd;\n  bfd_fatal();\n  symbol1Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,bfdPtr,sort_x);\n  symbol2Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,result,sort_y);\n  if ((symbol1Info == 0) || (symbol2InfoPlusAddress = symbol2Info, symbol2Info == 0)) {\n    symbol2Info = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(symbol1Info + 0x20) == 0x10c2a8) || (*(long *)(symbol2Info + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  symbol1InfoAddress = *(ulong *)(*(long *)(symbol1Info + 0x20) + 0x30);\n  symbol2Address = *(ulong *)(*(long *)(symbol2Info + 0x20) + 0x30);\n  symbol1InfoPlusAddress = *(long *)(symbol1Info + 0x10) + symbol1InfoAddress;\n  symbol2InfoAddress = *(long *)(symbol2InfoPlusAddress + 0x10) + symbol2Address;\n  needToCompareAddresses = symbol1InfoPlusAddress < symbol2InfoAddress;\n  if ((symbol1InfoPlusAddress != symbol2InfoAddress) || (needToCompareAddresses = symbol1InfoAddress < symbol2Address, symbol1InfoAddress != symbol2Address)) {\n    return (ulong)(-(uint)needToCompareAddresses | 1);\n  }\n  symbol1Name = *(char **)(symbol1Info + 8);\n  symbol2Name = *(char **)(symbol2InfoPlusAddress + 8);\n  symbol1NameLength = strlen(symbol1Name);\n  symbol2NameLength = strlen(symbol2Name);\n  gnuCompStr1 = strstr(symbol1Name,\"gnu_compiled\");\n  if (gnuCompStr1 == (char *)0x0) {\n    gnuCompStr2 = strstr(symbol1Name,\"gcc2_compiled\");\n    gnuCompStr1 = strstr(symbol2Name,\"gnu_compiled\");\n    if ((gnuCompStr1 == (char *)0x0) && (gnuCompStr1 = strstr(symbol2Name,\"gcc2_compiled\"), gnuCompStr1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (gnuCompStr2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    gnuCompStr1 = strstr(symbol2Name,\"gnu_compiled\");\n    if (gnuCompStr1 == (char *)0x0) {\n      gnuCompStr2 = strstr(symbol2Name,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (gnuCompStr2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(symbol2InfoPlusAddress + 0x18) & 0x4000;\n  if ((*(byte *)(symbol1Info + 0x19) & 0x40) == 0) {\n    if ((symbol1NameLength < 3) || (symbol1Name[symbol1NameLength - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((symbol2NameLength < 3) || (symbol2Name[symbol2NameLength - 2] != '.')) goto LAB_00103202;\n      needToCompareAddresses = false;\n      goto LAB_001031e7;\n    }\n    lastChar = symbol1Name[symbol1NameLength - 1];\n    needToCompareAddresses = lastChar == 'o' || lastChar == 'a';\n    if (flag == 0) {\n      if ((symbol2NameLength < 3) || (symbol2Name[symbol2NameLength - 2] != '.')) {\n        if (lastChar == 'o' || lastChar == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (symbol2NameLength < 3) {\n      return 0xffffffff;\n    }\n    if (symbol2Name[symbol2NameLength - 2] != '.') {\n      return 0xffffffff;\n    }\n    needToCompareAddresses = true;\nLAB_001031e7:\n    if ((symbol2Name[symbol2NameLength - 1] != 'o') && (symbol2Name[symbol2NameLength - 1] != 'a')) {\n      if (needToCompareAddresses) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!needToCompareAddresses) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(bfdPtr,result);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "numeric_forward.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_dynamic_symbols_00105050"
        },
        "FUN_0010c168": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c168",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010c168"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_symbol_data_001049c0",
                "pcVar1": "symbolName",
                "pcVar2": "sortFunction",
                "cVar3": "result",
                "iVar4": "comparisonResult",
                "uVar5": "isMatch",
                "uVar6": "errorMessage",
                "lVar7": "symbolData",
                "puVar8": "symbol",
                "puVar11": "symbolDataEnd",
                "puVar12": "symbolDataStart",
                "puVar13": "secondarySymbolData",
                "puVar14": "secondarySymbolDataEnd",
                "puVar15": "secondarySymbolDataStart",
                "unaff_RBX": "currentSymbol",
                "unaff_RBP": "baseSymbol",
                "unaff_R12": "symbolCount",
                "unaff_R13": "currentSecondarySymbol",
                "unaff_R14": "secondarySymbolCount",
                "unaff_R15": "symbolDataArray",
                "bVar16": "isDynamic",
                "bVar17": "loopIteration",
                "unaff_retaddr": "returnAddress",
                "uVar18": "isDynamic2",
                "in_stack_00000008": "someValue",
                "in_stack_00000010": "sortedSymbolData",
                "in_stack_00000018": "unsortedSymbolData",
                "in_stack_00000038": "sortOrder",
                "in_stack_00000040": "someData",
                "in_stack_00000048": "buffer"
            },
            "code": "\nvoid processSymbolData_001049c0(void)\n\n{\n  char *symbolName;\n  code *sortFunction;\n  char result;\n  int comparisonResult;\n  uint isMatch;\n  undefined8 errorMessage;\n  long symbolData;\n  undefined8 *symbol;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *currentSymbol;\n  undefined8 *__ptr;\n  undefined8 *baseSymbol;\n  undefined8 *symbolDataEnd;\n  undefined8 *symbolDataStart;\n  undefined8 *in_R8;\n  undefined8 *secondarySymbolData;\n  undefined8 *in_R9;\n  undefined8 *secondarySymbolDataEnd;\n  undefined8 *secondarySymbolDataStart;\n  undefined8 *symbolCount;\n  undefined8 *currentSecondarySymbol;\n  undefined8 *secondarySymbolCount;\n  undefined8 *symbolDataArray;\n  bool isDynamic;\n  byte loopIteration;\n  ulong returnAddress;\n  ulong isDynamic2;\n  undefined8 someValue;\n  undefined8 *sortedSymbolData;\n  undefined8 *unsortedSymbolData;\n  undefined8 sortOrder;\n  void *someData;\n  undefined8 *buffer;\n  \n  loopIteration = 0;\n  do {\n    currentSymbol = (undefined8 *)((long)currentSymbol + (long)secondarySymbolCount);\nLAB_001049c3:\n    do {\n      do {\n        currentSecondarySymbol = (undefined8 *)((long)currentSecondarySymbol + (long)secondarySymbolCount);\n        secondarySymbolDataStart = symbolCount;\n        symbolDataStart = baseSymbol;\n        if (symbolCount <= currentSecondarySymbol) goto LAB_00104b15;\nLAB_001049cf:\n        symbol = (undefined8 *)\n                 (**(code **)(baseSymbol[1] + 0x270))\n                           (baseSymbol,returnAddress & 0xffffffff,currentSecondarySymbol,symbolDataArray);\n        symbolDataEnd = baseSymbol;\n        symbolDataStart = currentSecondarySymbol;\n        secondarySymbolDataStart = symbolDataArray;\n        if (symbol == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)symbol[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          isMatch = (uint)(symbol[4] == 0x10c2a8);\nLAB_00104af9:\n          if (isMatch != 0) goto LAB_00104a2d;\n          currentSecondarySymbol = (undefined8 *)((long)currentSecondarySymbol + (long)secondarySymbolCount);\n          secondarySymbolDataStart = symbolCount;\n          symbolDataStart = baseSymbol;\n          if (symbolCount <= currentSecondarySymbol) {\nLAB_00104b15:\n            currentSymbol = (undefined8 *)((long)currentSymbol - (long)unsortedSymbolData);\n            if (secondarySymbolCount == (undefined8 *)0x8) {\n              lVar9 = symbolDataStart[1];\n              symbolDataEnd = (undefined8 *)((long)currentSymbol + 7);\n              if (-1 < (long)currentSymbol) {\n                symbolDataEnd = currentSymbol;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              sortFunction = *(code **)(lVar9 + 0x208);\n              symbolDataEnd = (undefined8 *)((long)symbolDataEnd >> 3);\n            }\n            else {\n              symbolDataEnd = (undefined8 *)((long)currentSymbol / (long)secondarySymbolCount);\n              lVar9 = symbolDataStart[1];\n              sortFunction = *(code **)(lVar9 + 0x208);\n            }\n            baseSymbol = symbolDataStart;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = symbolDataStart;\n              sort_x = (undefined8 *)(*sortFunction)(symbolDataStart);\n              sort_y = (undefined8 *)(**(code **)(symbolDataStart[1] + 0x208))(symbolDataStart);\n              currentSymbol = buffer;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*symbolDataStart);\n                __ptr = symbolDataArray;\n                goto LAB_00102d8e;\n              }\n              symbolCount = (undefined8 *)(ulong)sortOrder._4_4_;\n              if (sort_by_size != 0) {\n                isDynamic2 = (ulong)(dynamic != 0);\n                qsort(buffer,(size_t)symbolDataEnd,(size_t)symbolCount,size_forward1);\n                secondarySymbolDataStart = (undefined8 *)xmalloc((long)symbolDataEnd << 4);\n                secondarySymbolData = sort_x;\n                baseSymbol = sort_y;\n                secondarySymbolCount = (undefined8 *)((long)symbolDataEnd * (long)symbolCount + (long)currentSymbol);\n                symbol = sort_x;\n                in_R9 = sort_y;\n                if (secondarySymbolCount <= currentSymbol) goto LAB_00102ec2;\n                symbolDataEnd = (undefined8 *)\n                          (**(code **)(symbolDataStart[1] + 0x270))(symbolDataStart,isDynamic2 & 0xffffffff,currentSymbol);\n                __ptr = currentSymbol;\n                in_R8 = symbolCount;\n                sortedSymbolData = secondarySymbolDataStart;\n                if (symbolDataEnd == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(buffer,(size_t)symbolDataEnd,(size_t)symbolCount,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              lVar9 = symbolDataStart[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              symbolDataStart = buffer;\n              symbol = (undefined8 *)(ulong)sort_by_size;\n              secondarySymbolCount = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                secondarySymbolDataStart = (undefined8 *)(**(code **)(lVar9 + 0x208))(baseSymbol);\n                if (secondarySymbolDataStart == (undefined8 *)0x0) goto LAB_00102ed2;\n                currentSymbol = __ptr + (long)symbolDataEnd * 2;\n                symbolDataEnd = __ptr;\n                do {\n                  if (currentSymbol <= symbolDataEnd) {\nLAB_00104c75:\n                    if (someData == (void *)0x0) {\n                      free(buffer);\n                      free(__ptr);\n                      return;\n                    }\n                    free(someData);\n                    free(buffer);\n                    free(__ptr);\n                    return;\n                  }\n                  symbol = secondarySymbolDataStart;\n                  lVar9 = (**(code **)(baseSymbol[1] + 0x270))(baseSymbol,secondarySymbolCount,*symbolDataEnd);\n                  if (lVar9 == 0) {\n                    bfd_fatal(*baseSymbol,0);\nLAB_00102ed2:\n                    symbolDataStart = (undefined8 *)*baseSymbol;\n                    bfd_fatal();\n                    secondarySymbolData = in_R8;\n                    secondarySymbolDataEnd = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  symbolDataStart = symbolDataEnd + 1;\n                  symbolDataEnd = symbolDataEnd + 2;\n                  print_symbol(baseSymbol,lVar9,*symbolDataStart,someValue);\n                } while( true );\n              }\n              symbolCount = (undefined8 *)(ulong)sortOrder._4_4_;\n              symbolDataArray = (undefined8 *)(**(code **)(lVar9 + 0x208))(baseSymbol);\n              if (symbolDataArray == (undefined8 *)0x0) {\n                bfd_fatal(*baseSymbol);\n                symbolDataStart = symbolCount;\n                if (dynamic == 0) {\n                  lVar9 = (**(code **)(baseSymbol[1] + 0x350))(baseSymbol);\n                  symbolDataEnd = buffer;\n                  secondarySymbolDataStart = symbolCount;\n                  if (lVar9 < 1) {\n                    symbol = (undefined8 *)0x0;\n                    currentSymbol = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    currentSymbol = (undefined8 *)xmalloc();\n                    symbol = (undefined8 *)(**(code **)(baseSymbol[1] + 0x358))(baseSymbol,currentSymbol);\n                    symbolDataStart = secondarySymbolDataStart;\n                    if ((long)symbol < 0) {\n                      symbolDataStart = (undefined8 *)*baseSymbol;\n                      symbolDataEnd = (undefined8 *)bfd_fatal(symbolDataStart,secondarySymbolDataStart);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol = symbolCount;\n                  currentSymbol = buffer;\n                  symbolDataEnd = (undefined8 *)0x0;\n                  secondarySymbolDataStart = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = currentSymbol;\n                lVar9 = (**(code **)(baseSymbol[1] + 0x360))(baseSymbol,secondarySymbolDataStart,symbolDataEnd,symbol);\n                symbolCount = symbolDataStart;\n                if (0 < lVar9) {\n                  symbolCount = (undefined8 *)((long)symbolDataStart + lVar9);\n                  buffer = (undefined8 *)xrealloc(buffer);\n                  symbolData = 0;\n                  do {\n                    buffer[(long)((long)symbolDataStart + symbolData)] =\n                         (void *)(symbolData * 0x30 + (long)someData);\n                    symbolData = symbolData + 1;\n                  } while (lVar9 != symbolData);\n                  buffer[(long)((long)symbolDataStart + lVar9)] = 0;\n                }\n                if ((dynamic == 0) && (currentSymbol != (undefined8 *)0x0)) {\n                  free(currentSymbol);\n                }\n                if ((*(byte *)((long)baseSymbol + 0x4a) & 0x10) != 0) {\n                  currentSymbol = (undefined8 *)*baseSymbol;\n                  report_plugin_err = '\\0';\n                  errorMessage = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(errorMessage);\n                }\n                secondarySymbolCount = (undefined8 *)(ulong)sortOrder._4_4_;\n                isDynamic = dynamic != 0;\n                symbolDataEnd = (undefined8 *)(ulong)isDynamic;\n                symbol = buffer;\n                unsortedSymbolData = buffer;\n                symbolDataArray = (undefined8 *)(**(code **)(baseSymbol[1] + 0x208))(baseSymbol);\n                if (symbolDataArray != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                symbolDataEnd = (undefined8 *)((long)symbolDataEnd * (long)symbolCount + (long)symbolDataStart);\n                currentSymbol = symbolDataStart;\n                while( true ) {\n                  if (symbolDataEnd <= currentSymbol) goto LAB_00104c75;\n                  symbol = symbolDataArray;\n                  lVar9 = (**(code **)(baseSymbol[1] + 0x270))(baseSymbol,secondarySymbolCount,currentSymbol);\n                  if (lVar9 == 0) break;\n                  currentSymbol = (undefined8 *)((long)currentSymbol + (long)symbolCount);\n                  print_symbol(baseSymbol,lVar9,0,someValue);\n                }\n                bfd_fatal(*baseSymbol,0);\n              }\n              bfd_fatal(*baseSymbol);\n              symbolDataStart = baseSymbol;\n              secondarySymbolDataStart = symbolDataArray;\nLAB_00102eb0:\n              bfd_fatal(*symbolDataEnd);\nLAB_00102eb9:\n              bfd_fatal(*symbolDataStart);\nLAB_00102ec2:\n              symbolDataEnd = (undefined8 *)0x0;\n              __ptr = currentSymbol;\n              in_R8 = symbolCount;\n              secondarySymbolData = symbol;\n              baseSymbol = in_R9;\n              sortedSymbolData = secondarySymbolDataStart;\nLAB_00104e35:\n              while (in_R9 = secondarySymbolData, __ptr < secondarySymbolCount) {\n                currentSymbol = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (currentSymbol < secondarySymbolCount) {\n                  symbol = baseSymbol;\n                  secondarySymbolData = in_R8;\n                  secondarySymbolDataEnd = in_R9;\n                  puVar10 = (undefined8 *)(**(code **)(symbolDataStart[1] + 0x270))();\n                  if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = secondarySymbolDataEnd;\n                    in_R8 = secondarySymbolData;\n                    symbolDataStart = (undefined8 *)*symbolDataStart;\n                    puVar10 = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol = (undefined8 *)symbolDataEnd[4];\n                    if ((*(uint *)(symbolDataEnd + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  lVar9 = symbolDataEnd[2];\nLAB_00102ee7:\n                  if (symbol == (undefined8 *)puVar10[4]) {\n                    lVar9 = puVar10[2] - lVar9;\n                    secondarySymbolData = baseSymbol;\n                    secondarySymbolDataEnd = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  lVar9 = symbol[8] - lVar9;\n                  secondarySymbolData = baseSymbol;\n                  secondarySymbolDataEnd = __ptr;\n                }\n                else {\n                  symbol = (undefined8 *)symbolDataEnd[4];\n                  if ((*(uint *)(symbolDataEnd + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    lVar9 = symbolDataEnd[2];\n                    puVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  secondarySymbolData = baseSymbol;\n                  secondarySymbolDataEnd = __ptr;\n                  if (*(int *)(symbolDataStart[1] + 8) == 5) {\n                    lVar9 = symbolDataEnd[7];\n                  }\n                  else {\n                    lVar9 = symbolDataEnd[2];\n                    if ((*(byte *)((long)symbol + 0x25) & 0x10) == 0) {\n                      if (currentSymbol < secondarySymbolCount) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                symbolDataEnd = puVar10;\n                __ptr = currentSymbol;\n                baseSymbol = in_R9;\n                if (lVar9 != 0) {\n                  *secondarySymbolDataStart = secondarySymbolDataEnd;\n                  secondarySymbolDataStart[1] = lVar9;\n                  secondarySymbolDataStart = secondarySymbolDataStart + 2;\n                }\n              }\n              symbolDataEnd = (undefined8 *)((long)secondarySymbolDataStart - (long)sortedSymbolData >> 4);\n              qsort(sortedSymbolData,(size_t)symbolDataEnd,0x10,size_forward2);\n              lVar9 = symbolDataStart[1];\n              currentSymbol = __ptr;\n              baseSymbol = symbolDataStart;\n              __ptr = sortedSymbolData;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        sortedSymbolData = symbol;\n        if (comparisonResult == 0) {\n          if (report_plugin_err != '\\0') {\n            sortedSymbolData = (undefined8 *)*baseSymbol;\n            report_plugin_err = '\\0';\n            errorMessage = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(errorMessage,sortedSymbolData);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          isMatch = (*(uint *)(symbol + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol + 3) & 0x800082) == 0) && (symbol[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbol_data_00104d5b:\n          if ((symbol[4] != 0x10c2a8) && (symbol[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol + 3) & 4) != 0);\n      if (sort_by_size != 0) goto process_symbol_data_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        result = (**(code **)(baseSymbol[1] + 0x230))(baseSymbol);\n        if (result != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol[4] == 0x10c2a8);\nLAB_00104cba:\n    result = (**(code **)(baseSymbol[1] + 0x230))(baseSymbol);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (currentSymbol != currentSecondarySymbol) {\n      if (secondarySymbolCount == (undefined8 *)0x8) {\n        *currentSymbol = *currentSecondarySymbol;\n        processSymbolData_001049c0();\n        return;\n      }\n      for (; secondarySymbolCount != (undefined8 *)0x0; secondarySymbolCount = (undefined8 *)((long)secondarySymbolCount + -1)) {\n        *(undefined *)currentSymbol = *(undefined *)currentSecondarySymbol;\n        currentSecondarySymbol = (undefined8 *)((long)currentSecondarySymbol + (ulong)loopIteration * -2 + 1);\n        currentSymbol = (undefined8 *)((long)currentSymbol + (ulong)loopIteration * -2 + 1);\n      }\n      processSymbolData_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  secondarySymbolDataStart = (undefined8 *)((long)symbolCount * (long)secondarySymbolCount);\n  symbolCount = (undefined8 *)((long)unsortedSymbolData + (long)secondarySymbolDataStart);\n  currentSymbol = unsortedSymbolData;\n  symbolDataStart = baseSymbol;\n  if (unsortedSymbolData < symbolCount) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)isDynamic;\n  currentSecondarySymbol = unsortedSymbolData;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbol_data_001049c0"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_list_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "programName",
                "iVar2": "totalChars",
                "iVar3": "charsWritten",
                "pcVar4": "formatString",
                "lVar5": "offset",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "currentTarget",
                "ppcVar8": "currentDemangler",
                "pcVar9": "demanglerSeparator",
                "local_3c": "padding"
            },
            "code": "\nvoid printSymbolList_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long programName;\n  int totalChars;\n  int charsWritten;\n  char *formatString;\n  long offset;\n  size_t stringLength;\n  long *targetList;\n  long *currentTarget;\n  char **currentDemangler;\n  char *demanglerSeparator;\n  uint padding;\n  \n  programName = program_name;\n  formatString = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,formatString,programName);\n  formatString = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*formatString == ' ') {\n    programName = 1;\n    do {\n      offset = programName;\n      programName = offset + 1;\n    } while (formatString[offset] == ' ');\n    padding = (uint)offset;\n  }\n  else {\n    padding = 0;\n  }\n  totalChars = fprintf(outputFile,\"%s\",formatString);\n  demanglerSeparator = \"\";\n  for (currentDemangler = (char **)&libiberty_demanglers; *currentDemangler != (char *)0x0; currentDemangler = currentDemangler + 3) {\n    stringLength = strlen(*currentDemangler);\n    if (0x4a < (long)totalChars + stringLength) {\n      fprintf(outputFile,\"%.1s\\n\",demanglerSeparator);\n      demanglerSeparator = \"\";\n      totalChars = fprintf(outputFile,\"%.*s\",(ulong)padding,formatString);\n    }\n    charsWritten = fprintf(outputFile,\"%s\\\"%s\\\"\",demanglerSeparator,*currentDemangler);\n    totalChars = totalChars + charsWritten;\n    demanglerSeparator = \", \";\n  }\n  fputc(10,outputFile);\n  formatString = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,formatString);\n  formatString = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,formatString);\n  programName = program_name;\n  if (program_name == 0) {\n    formatString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,formatString);\n  }\n  else {\n    formatString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,formatString,programName);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    programName = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (programName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    formatString = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,formatString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "free",
                "fputc",
                "exit",
                "bfd_target_list",
                "fseek",
                "usage.cold",
                "fprintf",
                "strlen",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_symbol_list_00103ca0"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_symbol_data_00104d5b",
                "pcVar1": "symbol_name",
                "pcVar2": "sort_function",
                "cVar3": "result",
                "iVar4": "comparison_result",
                "uVar5": "is_match",
                "uVar6": "error_message",
                "puVar7": "sort_x_array",
                "lVar8": "symbol_address",
                "lVar9": "length",
                "unaff_retaddr": "unaffected_return_address",
                "uVar18": "is_dynamic",
                "param_7": "parameter_7",
                "param_8": "symbol_array",
                "param_9": "symbol_count",
                "param_13": "symbol_data",
                "param_14": "temp_symbol_array",
                "bVar16": "is_dynamic_true",
                "bVar17": "loop_condition",
                "__ptr": "ptr",
                "puVar10": "temp_array",
                "puVar11": "param_8",
                "puVar12": "base_array",
                "puVar13": "param_8_temp",
                "puVar14": "param_9_temp",
                "puVar15": "temp_symbol",
                "unaff_RBX": "temp_symbol_array",
                "unaff_RBP": "base_array",
                "unaff_R12": "symbol_size",
                "unaff_R13": "current_symbol",
                "unaff_R14": "loop_count",
                "unaff_R15": "temp_symbol",
                "sort_dynamic": "is_sort_dynamic",
                "sort_by_size": "is_sort_by_size"
            },
            "code": "\nvoid process_symbol_data_00104d5b(void)\n\n{\n  char *symbol_name;\n  code *sort_function;\n  char result;\n  int comparison_result;\n  uint is_match;\n  undefined8 error_message;\n  undefined8 *sort_x_array;\n  long symbol_address;\n  long length;\n  undefined8 *temp_array;\n  undefined8 *in_RCX;\n  undefined8 *temp_symbol_array;\n  undefined8 *ptr;\n  undefined8 *param_8;\n  undefined8 *base_array;\n  undefined8 *base_array;\n  undefined8 *in_R8;\n  undefined8 *param_8_temp;\n  undefined8 *in_R9;\n  undefined8 *param_9_temp;\n  undefined8 *temp_symbol;\n  undefined8 *symbol_size;\n  undefined8 *current_symbol;\n  undefined8 *loop_count;\n  undefined8 *temp_symbol;\n  bool is_dynamic_true;\n  byte loop_condition;\n  ulong unaffected_return_address;\n  ulong is_dynamic;\n  undefined8 parameter_7;\n  undefined8 *symbol_array;\n  undefined8 *symbol_count;\n  undefined8 in_stack_00000038;\n  void *symbol_data;\n  undefined8 *temp_symbol_array;\n  \n  loop_condition = 0;\n  do {\n    if ((in_RCX[4] != 0x10c2a8) && (in_RCX[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      current_symbol = (undefined8 *)((long)current_symbol + (long)loop_count);\n      temp_symbol = symbol_size;\n      base_array = base_array;\n      if (symbol_size <= current_symbol) goto LAB_00104b15;\nLAB_001049cf:\n      in_RCX = (undefined8 *)\n               (**(code **)(base_array[1] + 0x270))\n                         (base_array,unaffected_return_address & 0xffffffff,current_symbol,temp_symbol);\n      param_8 = base_array;\n      base_array = current_symbol;\n      temp_symbol = temp_symbol;\n      if (in_RCX == (undefined8 *)0x0) goto LAB_00102eb0;\n      symbol_name = (char *)in_RCX[1];\n      if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n        if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        is_match = (uint)(in_RCX[4] == 0x10c2a8);\nLAB_00104af9:\n        if (is_match != 0) goto LAB_00104a2d;\n        current_symbol = (undefined8 *)((long)current_symbol + (long)loop_count);\n        temp_symbol = symbol_size;\n        base_array = base_array;\n        if (symbol_size <= current_symbol) {\nLAB_00104b15:\n          temp_symbol_array = (undefined8 *)((long)temp_symbol_array - (long)symbol_count);\n          if (loop_count == (undefined8 *)0x8) {\n            length = base_array[1];\n            param_8 = (undefined8 *)((long)temp_symbol_array + 7);\n            if (-1 < (long)temp_symbol_array) {\n              param_8 = temp_symbol_array;\n            }\n            in_R8 = (undefined8 *)(ulong)no_sort;\n            sort_function = *(code **)(length + 0x208);\n            param_8 = (undefined8 *)((long)param_8 >> 3);\n          }\n          else {\n            param_8 = (undefined8 *)((long)temp_symbol_array / (long)loop_count);\n            length = base_array[1];\n            sort_function = *(code **)(length + 0x208);\n          }\n          base_array = base_array;\n          if (no_sort == 0) {\n            is_sort_dynamic = dynamic != 0;\n            sort_bfd = base_array;\n            sort_x = (undefined8 *)(*sort_function)(base_array);\n            sort_y = (undefined8 *)(**(code **)(base_array[1] + 0x208))(base_array);\n            temp_symbol_array = temp_symbol_array;\n            if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n              bfd_fatal(*base_array);\n              ptr = temp_symbol;\n              goto LAB_00102d8e;\n            }\n            symbol_size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (is_sort_by_size != 0) {\n              is_dynamic = (ulong)(dynamic != 0);\n              qsort(temp_symbol_array,(size_t)param_8,(size_t)symbol_size,size_forward1);\n              temp_symbol = (undefined8 *)xmalloc((long)param_8 << 4);\n              param_8_temp = sort_x;\n              base_array = sort_y;\n              loop_count = (undefined8 *)((long)param_8 * (long)symbol_size + (long)temp_symbol_array);\n              in_RCX = sort_x;\n              in_R9 = sort_y;\n              if (loop_count <= temp_symbol_array) goto LAB_00102ec2;\n              param_8 = (undefined8 *)\n                        (**(code **)(base_array[1] + 0x270))(base_array,is_dynamic & 0xffffffff,temp_symbol_array);\n              ptr = temp_symbol_array;\n              in_R8 = symbol_size;\n              symbol_array = temp_symbol;\n              if (param_8 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(temp_symbol_array,(size_t)param_8,(size_t)symbol_size,\n                  *(__compar_fn_t *)\n                   (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n            length = base_array[1];\n          }\n          ptr = (undefined8 *)0x0;\n          do {\n            base_array = temp_symbol_array;\n            sort_x_array = (undefined8 *)(ulong)is_sort_by_size;\n            loop_count = (undefined8 *)(ulong)(dynamic != 0);\n            if (is_sort_by_size != 0) {\n              temp_symbol = (undefined8 *)(**(code **)(length + 0x208))(base_array);\n              if (temp_symbol == (undefined8 *)0x0) goto LAB_00102ed2;\n              temp_symbol_array = ptr + (long)param_8 * 2;\n              param_8 = ptr;\n              do {\n                if (temp_symbol_array <= param_8) {\nLAB_00104c75:\n                  if (symbol_data != (void *)0x0) {\n                    free(symbol_data);\n                    free(temp_symbol_array);\n                    free(ptr);\n                    return;\n                  }\n                  free(temp_symbol_array);\n                  free(ptr);\n                  return;\n                }\n                sort_x_array = temp_symbol;\n                length = (**(code **)(base_array[1] + 0x270))(base_array,loop_count,*param_8);\n                if (length == 0) {\n                  bfd_fatal(*base_array,0);\nLAB_00102ed2:\n                  base_array = (undefined8 *)*base_array;\n                  bfd_fatal();\n                  param_8_temp = in_R8;\n                  param_9_temp = in_R9;\n                  goto LAB_00102edb;\n                }\n                base_array = param_8 + 1;\n                param_8 = param_8 + 2;\n                print_symbol(base_array,length,*base_array,parameter_7);\n              } while( true );\n            }\n            symbol_size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            temp_symbol = (undefined8 *)(**(code **)(length + 0x208))(base_array);\n            if (temp_symbol == (undefined8 *)0x0) {\n              bfd_fatal(*base_array);\n              base_array = symbol_size;\n              if (dynamic == 0) {\n                length = (**(code **)(base_array[1] + 0x350))(base_array);\n                param_8 = temp_symbol_array;\n                temp_symbol = symbol_size;\n                if (length < 1) {\n                  sort_x_array = (undefined8 *)0x0;\n                  temp_symbol_array = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  temp_symbol_array = (undefined8 *)xmalloc();\n                  sort_x_array = (undefined8 *)(**(code **)(base_array[1] + 0x358))(base_array,temp_symbol_array);\n                  base_array = temp_symbol;\n                  if ((long)sort_x_array < 0) {\n                    base_array = (undefined8 *)*base_array;\n                    param_8 = (undefined8 *)bfd_fatal(base_array,temp_symbol);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                sort_x_array = symbol_size;\n                temp_symbol_array = temp_symbol_array;\n                param_8 = (undefined8 *)0x0;\n                temp_symbol = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = temp_symbol_array;\n              length = (**(code **)(base_array[1] + 0x360))(base_array,temp_symbol,param_8,sort_x_array);\n              symbol_size = base_array;\n              if (0 < length) {\n                symbol_size = (undefined8 *)((long)base_array + length);\n                temp_symbol_array = (undefined8 *)xrealloc(temp_symbol_array);\n                symbol_address = 0;\n                do {\n                  temp_symbol_array[(long)base_array + symbol_address] = (void *)(symbol_address * 0x30 + (long)symbol_data);\n                  symbol_address = symbol_address + 1;\n                } while (length != symbol_address);\n                temp_symbol_array[(long)base_array + length] = 0;\n              }\n              if ((dynamic == 0) && (temp_symbol_array != (undefined8 *)0x0)) {\n                free(temp_symbol_array);\n              }\n              if ((*(byte *)((long)base_array + 0x4a) & 0x10) != 0) {\n                temp_symbol_array = (undefined8 *)*base_array;\n                report_plugin_err = '\\0';\n                error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(error_message);\n              }\n              loop_count = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              is_dynamic_true = dynamic != 0;\n              param_8 = (undefined8 *)(ulong)is_dynamic_true;\n              in_RCX = temp_symbol_array;\n              symbol_count = temp_symbol_array;\n              temp_symbol = (undefined8 *)(**(code **)(base_array[1] + 0x208))(base_array);\n              if (temp_symbol != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              param_8 = (undefined8 *)((long)param_8 * (long)symbol_size + (long)base_array);\n              temp_symbol_array = base_array;\n              while( true ) {\n                if (param_8 <= temp_symbol_array) goto LAB_00104c75;\n                in_RCX = temp_symbol;\n                length = (**(code **)(base_array[1] + 0x270))(base_array,loop_count,temp_symbol_array);\n                if (length == 0) break;\n                temp_symbol_array = (undefined8 *)((long)temp_symbol_array + (long)symbol_size);\n                print_symbol(base_array,length,0,parameter_7);\n              }\n              bfd_fatal(*base_array,0);\n            }\n            bfd_fatal(*base_array);\n            base_array = base_array;\n            temp_symbol = temp_symbol;\nLAB_00102eb0:\n            bfd_fatal(*param_8);\nLAB_00102eb9:\n            bfd_fatal(*base_array);\nLAB_00102ec2:\n            param_8 = (undefined8 *)0x0;\n            ptr = temp_symbol_array;\n            in_R8 = symbol_size;\n            param_8_temp = in_RCX;\n            base_array = in_R9;\n            symbol_array = temp_symbol;\nLAB_00104e35:\n            while (in_R9 = param_8_temp, ptr < loop_count) {\n              temp_symbol_array = (undefined8 *)((long)ptr + (long)in_R8);\n              if (temp_symbol_array < loop_count) {\n                sort_x_array = base_array;\n                param_8_temp = in_R8;\n                param_9_temp = in_R9;\n                temp_array = (undefined8 *)(**(code **)(base_array[1] + 0x270))();\n                if (temp_array == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = param_9_temp;\n                  in_R8 = param_8_temp;\n                  base_array = (undefined8 *)*base_array;\n                  temp_array = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  sort_x_array = (undefined8 *)param_8[4];\n                  if ((*(uint *)(param_8 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                length = param_8[2];\nLAB_00102ee7:\n                if (sort_x_array == (undefined8 *)temp_array[4]) {\n                  length = temp_array[2] - length;\n                  param_8_temp = base_array;\n                  param_9_temp = ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                length = sort_x_array[8] - length;\n                param_8_temp = base_array;\n                param_9_temp = ptr;\n              }\n              else {\n                sort_x_array = (undefined8 *)param_8[4];\n                if ((*(uint *)(param_8 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  length = param_8[2];\n                  temp_array = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                temp_array = (undefined8 *)0x0;\nLAB_00104e95:\n                param_8_temp = base_array;\n                param_9_temp = ptr;\n                if (*(int *)(base_array[1] + 8) == 5) {\n                  length = param_8[7];\n                }\n                else {\n                  length = param_8[2];\n                  if ((*(byte *)((long)sort_x_array + 0x25) & 0x10) == 0) {\n                    if (temp_symbol_array < loop_count) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              param_8 = temp_array;\n              ptr = temp_symbol_array;\n              base_array = in_R9;\n              if (length != 0) {\n                *temp_symbol = param_9_temp;\n                temp_symbol[1] = length;\n                temp_symbol = temp_symbol + 2;\n              }\n            }\n            param_8 = (undefined8 *)((long)temp_symbol - (long)symbol_array >> 4);\n            qsort(symbol_array,(size_t)param_8,0x10,size_forward2);\n            length = base_array[1];\n            temp_symbol_array = ptr;\n            base_array = base_array;\n            ptr = symbol_array;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      comparison_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n      symbol_array = in_RCX;\n      if (comparison_result == 0) {\n        if (report_plugin_err != '\\0') {\n          symbol_array = (undefined8 *)*base_array;\n          report_plugin_err = '\\0';\n          error_message = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(error_message,symbol_array);\n        }\n        goto LAB_00104a03;\n      }\n      if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (external_only == 0) {\n        if (non_weak == 0) goto LAB_00104a2d;\n        is_match = (*(uint *)(in_RCX + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(in_RCX + 3) & 0x800082) == 0) && (in_RCX[4] != 0x10c2a8)) &&\n         ((*(byte *)(in_RCX[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((print_debug_syms == 0) && ((*(byte *)(in_RCX + 3) & 4) != 0));\n  } while (is_sort_by_size != 0);\n  in_R9 = (undefined8 *)(ulong)defined_only;\n  if (defined_only == 0) {\n    result = (**(code **)(base_array[1] + 0x230))(base_array);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (in_RCX[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    result = (**(code **)(base_array[1] + 0x230))(base_array);\n    if (result != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (temp_symbol_array != current_symbol) {\n    if (loop_count != (undefined8 *)0x8) {\n      for (; loop_count != (undefined8 *)0x0; loop_count = (undefined8 *)((long)loop_count + -1)) {\n        *(undefined *)temp_symbol_array = *(undefined *)current_symbol;\n        current_symbol = (undefined8 *)((long)current_symbol + (ulong)loop_condition * -2 + 1);\n        temp_symbol_array = (undefined8 *)((long)temp_symbol_array + (ulong)loop_condition * -2 + 1);\n      }\n      process_symbol_data_00104d5b_001049c0();\n      return;\n    }\n    *temp_symbol_array = *current_symbol;\n    process_symbol_data_00104d5b_001049c0();\n    return;\n  }\n  temp_symbol_array = (undefined8 *)((long)temp_symbol_array + (long)loop_count);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  temp_symbol = (undefined8 *)((long)symbol_size * (long)loop_count);\n  symbol_size = (undefined8 *)((long)symbol_count + (long)temp_symbol);\n  temp_symbol_array = symbol_count;\n  base_array = base_array;\n  if (symbol_count < symbol_size) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaffected_return_address = (ulong)is_dynamic_true;\n  current_symbol = symbol_count;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "free",
                "non_fatal",
                "xmalloc",
                "FUN_00104d5b",
                "print_symbol",
                "size_forward2",
                "xrealloc",
                "bfd_fatal",
                "size_forward1",
                "FUN_001049c0",
                "display_rel_file.cold",
                "strcmp",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbol_data_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "error_code",
                "param_10": "file_ptr_1",
                "param_11": "file_ptr_2",
                "param_12": "file_ptr_3",
                "param_13": "file_ptr_4",
                "param_14": "file_ptr_5",
                "in_AL": "flag",
                "__arg": "arg_ptr",
                "__format": "format_str",
                "local_d8": "local_variable_1",
                "local_d4": "local_variable_2",
                "local_d0": "local_variable_3",
                "local_c8": "local_variable_4",
                "local_b8": "local_buffer",
                "local_b0": "file_ptr_1",
                "local_a8": "file_ptr_2",
                "local_a0": "file_ptr_3",
                "local_98": "file_ptr_4",
                "local_90": "file_ptr_5",
                "local_88": "param_1",
                "local_78": "param_2",
                "local_68": "param_3",
                "local_58": "param_4",
                "local_48": "param_5",
                "local_38": "param_6",
                "local_28": "param_7",
                "local_18": "param_8"
            },
            "code": "\n\n\nvoid print_error_message_00106300(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 file_ptr_1,undefined8 file_ptr_2,undefined8 file_ptr_3,\n                 undefined8 file_ptr_4,undefined8 file_ptr_5)\n\n{\n  char flag;\n  undefined4 *arg_ptr;\n  char *format_str;\n  undefined4 local_variable_1;\n  undefined4 local_variable_2;\n  undefined *local_variable_3;\n  undefined *local_variable_4;\n  undefined local_buffer [8];\n  undefined8 file_ptr_1;\n  undefined8 file_ptr_2;\n  undefined8 file_ptr_3;\n  undefined8 file_ptr_4;\n  undefined8 file_ptr_5;\n  undefined4 param_1;\n  undefined4 param_2;\n  undefined4 param_3;\n  undefined4 param_4;\n  undefined4 param_5;\n  undefined4 param_6;\n  undefined4 param_7;\n  undefined4 param_8;\n  \n  arg_ptr = &local_variable_1;\n  if (flag != '\\0') {\n    param_1 = error_code;\n    param_2 = param_2;\n    param_3 = param_3;\n    param_4 = param_4;\n    param_5 = param_5;\n    param_6 = param_6;\n    param_7 = param_7;\n    param_8 = param_8;\n  }\n  local_variable_3 = &stack0x00000008;\n  local_variable_1 = 8;\n  local_variable_4 = local_buffer;\n  local_variable_2 = 0x30;\n  file_ptr_1 = file_ptr_1;\n  file_ptr_2 = file_ptr_2;\n  file_ptr_3 = file_ptr_3;\n  file_ptr_4 = file_ptr_4;\n  file_ptr_5 = file_ptr_5;\n  report();\n  format_str = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",program_name);\n  vfprintf(_stderr,format_str,arg_ptr);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "print_value.constprop.0.cold",
                "print_symbol_info_bsd",
                "main",
                "set_output_format",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_filename_00102f7b",
                "param_1": "filename",
                "filename_per_file": "per_file",
                "filename_per_symbol": "per_symbol"
            },
            "code": "\nvoid print_filename_00102f7b(undefined8 filename)\n\n{\n  if ((per_file != 0) && (per_symbol == 0)) {\n    printf(\"%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorMessage",
                "iVar1": "error",
                "uVar2": "errorString",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorMessage)\n\n{\n  int error;\n  undefined8 errorString;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorMessage,errorString,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorString,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_nonfatal.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "bfd_fatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        },
        "FUN_0010c160": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c160",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010c160"
        }
    },
    "used_tokens": 75259,
    "layers": [
        [
            "FUN_001055a0",
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00105500",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00102000",
            "FUN_00103573",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00104370",
            "FUN_00102475",
            "FUN_00105110",
            "FUN_00103a66",
            "FUN_001064b0",
            "FUN_00102739",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0",
            "FUN_00104740"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": []
}