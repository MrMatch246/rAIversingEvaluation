{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "update_relocation_00103c00",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "relocationTable",
                "param_5": "previousValue",
                "puVar1": "newPtr",
                "auVar2": "updatedRelocationTable",
                "lVar3": "upperBound",
                "uVar4": "allocatedMemory",
                "uVar5": "canonicalizedReloc",
                "print_error_message_00106530": "printErrorMessage"
            },
            "code": "\nundefined8\nupdateRelocation_00103c00(undefined8 *destination,long source,undefined (*relocationTable) [16],undefined8 param_4,\n            undefined8 previousValue)\n\n{\n  undefined8 *newPtr;\n  undefined updatedRelocationTable [16];\n  long upperBound;\n  undefined8 allocatedMemory;\n  undefined8 canonicalizedReloc;\n  \n  **(long **)*relocationTable = source;\n  if ((*(byte *)(source + 0x24) & 4) == 0) {\n    **(undefined8 **)(*relocationTable + 8) = 0;\n    **(undefined8 **)relocationTable[1] = 0;\n  }\n  else {\n    upperBound = bfd_get_reloc_upper_bound();\n    if (-1 < upperBound) {\n      newPtr = *(undefined8 **)(*relocationTable + 8);\n      allocatedMemory = xmalloc(upperBound);\n      canonicalizedReloc = *(undefined8 *)(relocationTable[1] + 8);\n      *newPtr = allocatedMemory;\n      newPtr = *(undefined8 **)relocationTable[1];\n      canonicalizedReloc = bfd_canonicalize_reloc(destination,source,**(undefined8 **)(*relocationTable + 8),canonicalizedReloc);\n      *newPtr = canonicalizedReloc;\n      if (-1 < **(long **)relocationTable[1]) goto LAB_00103c7c;\n    }\n    printErrorMessage(*destination);\n  }\nLAB_00103c7c:\n  upperBound = *(long *)(*relocationTable + 8) + 8;\n  *(long *)relocationTable[1] = *(long *)relocationTable[1] + 8;\n  updatedRelocationTable._8_4_ = (int)upperBound;\n  updatedRelocationTable._0_8_ = *(long *)*relocationTable + 8;\n  updatedRelocationTable._12_4_ = (int)((ulong)upperBound >> 0x20);\n  *relocationTable = updatedRelocationTable;\n  return previousValue;\n}\n\n",
            "called": [
                "FUN_00106530",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "update_relocation_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "printWidth",
                "uVar9": "filteredRBX",
                "piVar5": "errnoPtr",
                "pcVar10": "symbolType",
                "cVar1": "isUndefined",
                "uVar2": "symbolInfo",
                "iVar3": "asprintfRetVal",
                "lVar7": "alternateSymbolType",
                "unaff_RBX": "inputRBX",
                "bVar8": "symbolClass"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefined;\n  ushort symbolInfo;\n  int asprintfRetVal;\n  long *printWidth;\n  int *errnoPtr;\n  undefined8 uVar6;\n  long alternateSymbolType;\n  ulong inputRBX;\n  byte symbolClass;\n  ulong filteredRBX;\n  char *symbolType;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  filteredRBX = inputRBX & 0xffffffff;\n  print_and_exit_00106300(printWidth,filteredRBX);\n  print_formatted_string_00104740(\"%-20s|\",printWidth,0,filteredRBX);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*printWidth);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      alternateSymbolType = *(long *)(printWidth[3] + 0x30);\n      isUndefined = *(char *)(alternateSymbolType + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolType = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolType = \"Block\";\n      }\n      else if (*(ushort *)(alternateSymbolType + 0x26) == 0) {\n        symbolType = \"None\";\n      }\n      else {\n        symbolInfo = *(ushort *)(alternateSymbolType + 0x26) >> 4 & 3;\n        if (symbolInfo == 2) {\n          symbolType = \"Function\";\n        }\n        else if (symbolInfo == 3) {\n          symbolType = \"Array\";\n        }\n        else {\n          if (symbolInfo != 1) {\n            free(DAT_0010b730);\n            symbolInfo = *(ushort *)(alternateSymbolType + 0x26);\n            symbolClass = *(byte *)(alternateSymbolType + 0x28);\n            symbolType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfRetVal = asprintf(&DAT_0010b730,symbolType,(ulong)symbolClass,(ulong)symbolInfo);\n            symbolType = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symbolType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolClass = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(symbolClass) {\n    case 0:\n      symbolType = \"NOTYPE\";\n      break;\n    case 1:\n      symbolType = \"OBJECT\";\n      break;\n    case 2:\n      symbolType = \"FUNC\";\n      break;\n    case 3:\n      symbolType = \"SECTION\";\n      break;\n    case 4:\n      symbolType = \"FILE\";\n      break;\n    case 5:\n      symbolType = \"COMMON\";\n      break;\n    case 6:\n      symbolType = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symbolType = \"<processor specific>: %d\";\n      if ((2 < symbolClass - 0xd) && (symbolType = \"<OS specific>: %d\", 2 < symbolClass - 10)) {\n        symbolType = \"<unknown>: %d\";\n      }\n      symbolType = (char *)dcgettext(0,symbolType,5);\n      asprintfRetVal = asprintf(&DAT_0010b728,symbolType,(ulong)symbolClass);\n      symbolType = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfRetVal < 0) {\n        errnoPtr = __errno_location();\n        uVar6 = xstrerror(*errnoPtr);\n        print_and_exit_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolType);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  alternateSymbolType = printWidth[2];\n  if ((alternateSymbolType != 0) || (alternateSymbolType = printWidth[3], alternateSymbolType != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(alternateSymbolType + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "initialize_output_format_00104370",
                "param_1": "format",
                "param_2": "data",
                "uVar1": "errorMessage",
                "ppuVar2": "initializedData"
            },
            "code": "\nundefined ** initialize_output_format_00104370(undefined *format,undefined8 data)\n\n{\n  undefined8 errorMessage;\n  undefined **initializedData;\n  \n  switch(*format) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    print_and_exit_00106300(errorMessage,format);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_error_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    initializedData = (undefined **)initialize_data_00104397(format,data,3);\n    return initializedData;\n  case 0x50:\n  case 0x70:\n    initializedData = (undefined **)initialize_data_00104397(format,data,2);\n    return initializedData;\n  case 0x53:\n  case 0x73:\n    initializedData = (undefined **)initialize_data_00104397(format,data,1);\n    return initializedData;\n  }\n}\n\n",
            "called": [
                "FUN_00106300",
                "FUN_00104397",
                "caseD_4a",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "initialize_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103c00",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "formatList",
                "uVar1": "defaultFormat",
                "__format": "formatString",
                "plVar2": "currentFormat",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *formatList)\n\n{\n  undefined8 defaultFormat;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(standardOutput);\n  defaultFormat = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(standardError,formatString,defaultFormat);\n  for (currentFormat = formatList; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(standardError,\" %s\");\n  }\n  free(formatList);\n  fputc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "fputc",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_string_information_001036a7",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2"
            },
            "code": "\nvoid printStringInformation_001036a7(undefined8 *string1,undefined8 *string2,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (string1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*string1);\n    }\n    printf(\"%s:\",*string2,unusedParam2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_string_information_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbols_00102f19",
                "param_1": "symbolFile",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbols_00102f19(undefined8 symbolFile)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,symbolFile);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_file_extension_00102fc3",
                "param_1": "file_path_1",
                "param_2": "file_path_2",
                "cVar1": "last_char",
                "__s": "file_extension_1",
                "__s_00": "file_extension_2",
                "uVar2": "file_size_2",
                "uVar3": "flags",
                "lVar4": "file_info_1",
                "lVar5": "file_info_2",
                "sVar6": "length_1",
                "sVar7": "length_2",
                "pcVar8": "str_ptr_1",
                "pcVar9": "str_ptr_2",
                "uVar10": "result",
                "uVar11": "calculated_sum_1",
                "uVar12": "calculated_sum_2",
                "uVar13": "error_message",
                "unaff_R13": "file_info_temp",
                "bVar14": "is_condition_true"
            },
            "code": "\nulong check_file_extension_00102fc3(undefined8 file_path_1,undefined8 file_path_2)\n\n{\n  char last_char;\n  ulong file_size_2;\n  char *file_extension_1;\n  char *file_extension_2;\n  uint flags;\n  long file_info_1;\n  long file_info_2;\n  size_t length_1;\n  size_t length_2;\n  char *str_ptr_1;\n  char *str_ptr_2;\n  ulong result;\n  ulong calculated_sum_1;\n  ulong calculated_sum_2;\n  undefined8 error_message;\n  long file_info_temp;\n  bool is_condition_true;\n  \n  error_message = *DAT_0010b780;\n  print_error_message_00106530();\n  file_info_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,error_message,DAT_0010b770);\n  file_info_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path_2,DAT_0010b768);\n  if ((file_info_1 == 0) || (file_info_temp = file_info_2, file_info_2 == 0)) {\n    file_info_2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file_info_1 + 0x20) == 0x10c2a8) || (*(long *)(file_info_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(file_info_1 + 0x20) + 0x30);\n  file_size_2 = *(ulong *)(*(long *)(file_info_2 + 0x20) + 0x30);\n  calculated_sum_2 = *(long *)(file_info_1 + 0x10) + result;\n  calculated_sum_1 = *(long *)(file_info_temp + 0x10) + file_size_2;\n  is_condition_true = calculated_sum_2 < calculated_sum_1;\n  if ((calculated_sum_2 != calculated_sum_1) || (is_condition_true = result < file_size_2, result != file_size_2)) {\n    return (ulong)(-(uint)is_condition_true | 1);\n  }\n  file_extension_1 = *(char **)(file_info_1 + 8);\n  file_extension_2 = *(char **)(file_info_temp + 8);\n  length_1 = strlen(file_extension_1);\n  length_2 = strlen(file_extension_2);\n  str_ptr_1 = strstr(file_extension_1,\"gnu_compiled\");\n  if (str_ptr_1 == (char *)0x0) {\n    str_ptr_2 = strstr(file_extension_1,\"gcc2_compiled\");\n    str_ptr_1 = strstr(file_extension_2,\"gnu_compiled\");\n    if ((str_ptr_1 == (char *)0x0) && (str_ptr_1 = strstr(file_extension_2,\"gcc2_compiled\"), str_ptr_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str_ptr_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str_ptr_1 = strstr(file_extension_2,\"gnu_compiled\");\n    if (str_ptr_1 == (char *)0x0) {\n      str_ptr_2 = strstr(file_extension_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str_ptr_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flags = *(uint *)(file_info_temp + 0x18) & 0x4000;\n  if ((*(byte *)(file_info_1 + 0x19) & 0x40) == 0) {\n    if ((length_1 < 3) || (file_extension_1[length_1 - 2] != '.')) {\n      if (flags != 0) {\n        return 1;\n      }\n      if ((length_2 < 3) || (file_extension_2[length_2 - 2] != '.')) goto LAB_00103202;\n      is_condition_true = false;\n      goto LAB_001031e7;\n    }\n    last_char = file_extension_1[length_1 - 1];\n    is_condition_true = last_char == 'o' || last_char == 'a';\n    if (flags == 0) {\n      if ((length_2 < 3) || (file_extension_2[length_2 - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flags != 0) goto LAB_00103202;\n    if (length_2 < 3) {\n      return 0xffffffff;\n    }\n    if (file_extension_2[length_2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_condition_true = true;\nLAB_001031e7:\n    if ((file_extension_2[length_2 - 1] != 'o') && (file_extension_2[length_2 - 1] != 'a')) {\n      if (is_condition_true) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_condition_true) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(error_message,file_path_2);\n  return result;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_file_extension_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol",
                "param_2": "info",
                "cVar1": "isUndefined",
                "uVar2": "flags",
                "iVar3": "result",
                "piVar4": "errno_loc",
                "uVar5": "error_str",
                "lVar6": "data",
                "bVar7": "type",
                "pcVar8": "type_str"
            },
            "code": "\nvoid printSymbolInfo_00103729(long *symbol,undefined8 info)\n\n{\n  char isUndefined;\n  ushort flags;\n  int result;\n  int *errno_loc;\n  undefined8 error_str;\n  long data;\n  byte type;\n  char *type_str;\n  \n  print_formatted_string_00104740(\"%-20s|\",symbol,0,info);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  if (isUndefined == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*symbol);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol[2] == 0) {\n    if (symbol[3] != 0) {\n      data = *(long *)(symbol[3] + 0x30);\n      isUndefined = *(char *)(data + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        type_str = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        type_str = \"Block\";\n      }\n      else if (*(ushort *)(data + 0x26) == 0) {\n        type_str = \"None\";\n      }\n      else {\n        flags = *(ushort *)(data + 0x26) >> 4 & 3;\n        if (flags == 2) {\n          type_str = \"Function\";\n        }\n        else if (flags == 3) {\n          type_str = \"Array\";\n        }\n        else {\n          if (flags != 1) {\n            free(DAT_0010b730);\n            flags = *(ushort *)(data + 0x26);\n            type = *(byte *)(data + 0x28);\n            type_str = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&DAT_0010b730,type_str,(ulong)type,(ulong)flags);\n            type_str = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          type_str = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    type = *(byte *)(symbol[2] + 0x48) & 0xf;\n    switch(type) {\n    case 0:\n      type_str = \"NOTYPE\";\n      break;\n    case 1:\n      type_str = \"OBJECT\";\n      break;\n    case 2:\n      type_str = \"FUNC\";\n      break;\n    case 3:\n      type_str = \"SECTION\";\n      break;\n    case 4:\n      type_str = \"FILE\";\n      break;\n    case 5:\n      type_str = \"COMMON\";\n      break;\n    case 6:\n      type_str = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      type_str = \"<processor specific>: %d\";\n      if ((2 < type - 0xd) && (type_str = \"<OS specific>: %d\", 2 < type - 10)) {\n        type_str = \"<unknown>: %d\";\n      }\n      type_str = (char *)dcgettext(0,type_str,5);\n      result = asprintf(&DAT_0010b728,type_str,(ulong)type);\n      type_str = DAT_0010b728;\njoined_r0x00103964:\n      if (result < 0) {\n        errno_loc = __errno_location();\n        error_str = xstrerror(*errno_loc);\n        print_and_exit_00106300(&DAT_0010712d,error_str);\nLAB_00103983:\n        type_str = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_str);\n  }\n  if (symbol[2] == 0) {\n    if (symbol[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  data = symbol[2];\n  if ((data != 0) || (data = symbol[3], data != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(data + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext",
                "free",
                "xstrerror",
                "FUN_00104740",
                "__errno_location",
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_with_label_00103573",
                "param_1": "label1",
                "param_2": "label2",
                "param_3": "unused_param",
                "param_4": "label4"
            },
            "code": "\nvoid print_strings_with_label_00103573(undefined8 *label1,undefined8 *label2,undefined8 unused_param,undefined8 label4)\n\n{\n  if (label1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*label1);\n  }\n  printf(\"%s:\",*label2,label4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_strings_with_label_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_relocated_sections_00105110",
                "param_1": "function_pointer",
                "param_2": "section_info",
                "param_3": "param_a",
                "param_4": "param_b",
                "__ptr": "ptr",
                "__s1": "s1",
                "pplVar1": "pptrVar1",
                "plVar2": "ptrVar2",
                "lVar3": "var3",
                "puVar4": "ptrVar4",
                "cVar5": "ch",
                "iVar6": "var6",
                "pvVar7": "ptrVar7",
                "lVar8": "var8",
                "uVar9": "var9",
                "lVar10": "var10",
                "local_b4": "local_var_b4",
                "local_b0": "local_array_b0",
                "local_a8": "local_array_a8",
                "local_a0": "local_var_a0",
                "local_98": "local_ptr_98",
                "local_90": "local_ptr_90",
                "local_88": "local_ptr_88",
                "pvStack_80": "ptrOnStack_80",
                "pvStack_78": "ptrOnStack_78",
                "pvStack_70": "ptrOnStack_70",
                "local_68": "local_array_68",
                "local_60": "local_var_60"
            },
            "code": "\n\n\nvoid print_relocated_sections_00105110(undefined8 *function_pointer,long *section_info,undefined8 param_a,undefined8 *param_b)\n\n{\n  void *ptr;\n  char *s1;\n  long **pptrVar1;\n  long *ptrVar2;\n  long var3;\n  undefined8 *ptrVar4;\n  char ch;\n  int var6;\n  void *ptrVar7;\n  long var8;\n  uint var9;\n  long var10;\n  uint local_var_b4;\n  undefined local_array_b0 [8];\n  undefined *local_array_a8;\n  undefined8 local_var_a0;\n  long *local_ptr_98;\n  long *local_ptr_90;\n  void *local_ptr_88;\n  void *ptrOnStack_80;\n  void *ptrOnStack_78;\n  void *ptrOnStack_70;\n  undefined local_array_68 [8];\n  char local_var_60;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == print_data_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (param_b != (undefined8 *)0x0) {\n        printf(\"%s:\",*param_b);\n      }\n      printf(\"%s:\",*function_pointer);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(param_b,function_pointer);\n  }\n  local_array_a8 = local_array_68;\n  (**(code **)(function_pointer[1] + 0x218))(function_pointer,section_info,local_array_a8);\n  var9 = *(uint *)(section_info + 3);\n  ch = local_var_60;\n  if (((((local_var_60 == 'i') && ((var9 & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (ch = *DAT_0010b7c8, (var9 & 2) == 0)))) &&\n     (ch = local_var_60, DAT_0010b7c8[1] != '\\0')) {\n    ch = DAT_0010b7c8[1];\n  }\n  local_var_60 = ch;\n  local_var_a0 = param_a;\n  if ((var9 & 0x200100) != 0) goto LAB_00103330;\n  var8 = *section_info;\n  var6 = *(int *)(*(long *)(var8 + 8) + 8);\n  if (((var9 & 0x200000) == 0) && (var6 == 5)) {\n    local_ptr_98 = section_info;\n    if (*(long *)(var8 + 0x110) == 0) {\n      local_ptr_98 = (long *)0x0;\n    }\n  }\n  else {\n    local_ptr_98 = (long *)0x0;\n    if (((var6 - 2U & 0xfffffffd) == 0) && (local_ptr_90 = section_info, *(long *)(var8 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  local_ptr_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_array_a8,function_pointer);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (_DAT_0010b7b8 == function_pointer) {\n      ptrVar4 = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptrVar4;\n      ptrVar7 = DAT_0010b750;\n      if (section_info[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == function_pointer) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          var9 = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; var9 < DAT_0010b748; var9 = var9 + 1) {\n              ptr = *(void **)((long)ptrVar7 + (ulong)var9 * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptrVar7);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(function_pointer + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          ptrOnStack_70 = DAT_0010b758;\n          local_ptr_88 = DAT_0010b740;\n          ptrOnStack_80 = DAT_0010b750;\n          ptrOnStack_78 = DAT_0010b738;\n          bfd_map_over_sections(function_pointer,update_relocation_00103c00,&local_ptr_88);\n          _DAT_0010b7b0 = function_pointer;\n        }\n        s1 = (char *)section_info[1];\n        for (var9 = 0; var9 < DAT_0010b748; var9 = var9 + 1) {\n          var8 = (ulong)var9 * 8;\n          ptrVar7 = DAT_0010b738;\n          for (var10 = 0;\n              *(long *)((long)ptrVar7 + var8) != var10 && var10 <= *(long *)((long)ptrVar7 + var8)\n              ; var10 = var10 + 1) {\n            pptrVar1 = *(long ***)(*(long *)((long)DAT_0010b750 + var8) + var10 * 8);\n            ptrVar2 = *pptrVar1;\n            if ((((ptrVar2 != (long *)0x0) &&\n                 (var3 = *ptrVar2, *(long *)(var3 + 0x20) == section_info[4])) &&\n                (*(long *)(var3 + 0x10) == section_info[2])) &&\n               (((var6 = strcmp(s1,*(char **)(var3 + 8)), var6 == 0 &&\n                 (ch = (**(code **)(function_pointer[1] + 0x240))\n                                    (function_pointer,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var8),pptrVar1[1],\n                                     &local_ptr_88,local_array_b0,&local_var_b4,0), ptrVar7 = DAT_0010b738,\n                 ch != '\\0')) && (local_ptr_88 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",local_ptr_88,(ulong)local_var_b4);\n              var9 = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(section_info[4] + 0xe0) == function_pointer) {\n        ch = (**(code **)(function_pointer[1] + 0x250))(function_pointer,DAT_0010b758,section_info,&local_ptr_88,&local_var_b4);\n        if (((ch != '\\0') ||\n            (ch = (**(code **)(function_pointer[1] + 0x240))\n                               (function_pointer,DAT_0010b758,section_info[4],section_info[2],&local_ptr_88,local_array_b0,\n                                &local_var_b4,0), ch != '\\0')) &&\n           ((local_ptr_88 != (void *)0x0 && (local_var_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    var8 = (**(code **)(function_pointer[1] + 0x1f8))(function_pointer);\n    if (var8 < 0) {\n      find_and_print_matching_values_00103463(var8);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var8 = (**(code **)(function_pointer[1] + 0x200))(function_pointer,DAT_0010b758);\n    ptrVar4 = function_pointer;\n    if (-1 < var8) goto LAB_00105288;\n    print_error_message_00106530(*function_pointer);\nLAB_00103330:\n    local_ptr_98 = (long *)0x0;\n    local_ptr_90 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&local_array_a8,function_pointer);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001053c0",
                "printf",
                "FUN_001053b0",
                "FUN_00103238",
                "FUN_00106530",
                "free",
                "FUN_00103463",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_relocated_sections_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "check_binary_compatibility_00102fd2",
                "param_1": "binary_path_1",
                "param_2": "binary_path_2",
                "cVar1": "last_character",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar2": "string_1_length",
                "uVar3": "string_2_length",
                "lVar4": "binary_info_1",
                "lVar5": "binary_info_2",
                "sVar6": "string_1_length",
                "sVar7": "string_2_length",
                "pcVar8": "substring_1",
                "pcVar9": "substring_2",
                "uVar10": "comparison_result",
                "uVar11": "sum_1",
                "uVar12": "sum_2",
                "unaff_R13": "binary_info_2",
                "bVar13": "is_compatible"
            },
            "code": "\nulong check_binary_compatibility_00102fd2(undefined8 binary_path_1,undefined8 binary_path_2)\n\n{\n  char last_character;\n  ulong string_1_length;\n  char *string_1;\n  char *string_2;\n  uint string_2_length;\n  long binary_info_1;\n  long binary_info_2;\n  size_t string_1_length;\n  size_t string_2_length;\n  char *substring_1;\n  char *substring_2;\n  ulong comparison_result;\n  ulong sum_1;\n  ulong sum_2;\n  long binary_info_2;\n  bool is_compatible;\n  \n  binary_info_1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binary_path_1,DAT_0010b770);\n  binary_info_2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,binary_path_2,DAT_0010b768);\n  if ((binary_info_1 == 0) || (binary_info_2 = binary_info_2, binary_info_2 == 0)) {\n    binary_info_2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(binary_info_1 + 0x20) == 0x10c2a8) || (*(long *)(binary_info_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  comparison_result = *(ulong *)(*(long *)(binary_info_1 + 0x20) + 0x30);\n  string_1_length = *(ulong *)(*(long *)(binary_info_2 + 0x20) + 0x30);\n  sum_2 = *(long *)(binary_info_1 + 0x10) + comparison_result;\n  sum_1 = *(long *)(binary_info_2 + 0x10) + string_1_length;\n  is_compatible = sum_2 < sum_1;\n  if ((sum_2 != sum_1) || (is_compatible = comparison_result < string_1_length, comparison_result != string_1_length)) {\n    return (ulong)(-(uint)is_compatible | 1);\n  }\n  string_1 = *(char **)(binary_info_1 + 8);\n  string_2 = *(char **)(binary_info_2 + 8);\n  string_1_length = strlen(string_1);\n  string_2_length = strlen(string_2);\n  substring_1 = strstr(string_1,\"gnu_compiled\");\n  if (substring_1 == (char *)0x0) {\n    substring_2 = strstr(string_1,\"gcc2_compiled\");\n    substring_1 = strstr(string_2,\"gnu_compiled\");\n    if ((substring_1 == (char *)0x0) && (substring_1 = strstr(string_2,\"gcc2_compiled\"), substring_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring_2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring_1 = strstr(string_2,\"gnu_compiled\");\n    if (substring_1 == (char *)0x0) {\n      substring_2 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring_2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  string_2_length = *(uint *)(binary_info_2 + 0x18) & 0x4000;\n  if ((*(byte *)(binary_info_1 + 0x19) & 0x40) == 0) {\n    if ((string_1_length < 3) || (string_1[string_1_length - 2] != '.')) {\n      if (string_2_length != 0) {\n        return 1;\n      }\n      if ((string_2_length < 3) || (string_2[string_2_length - 2] != '.')) goto LAB_00103202;\n      is_compatible = false;\n      goto LAB_001031e7;\n    }\n    last_character = string_1[string_1_length - 1];\n    is_compatible = last_character == 'o' || last_character == 'a';\n    if (string_2_length == 0) {\n      if ((string_2_length < 3) || (string_2[string_2_length - 2] != '.')) {\n        if (last_character == 'o' || last_character == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (string_2_length != 0) goto LAB_00103202;\n    if (string_2_length < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[string_2_length - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_compatible = true;\nLAB_001031e7:\n    if ((string_2[string_2_length - 1] != 'o') && (string_2[string_2_length - 1] != 'a')) {\n      if (is_compatible) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_compatible) {\n    return 1;\n  }\nLAB_00103202:\n  comparison_result = compare_strings_00104fa0(binary_path_1,binary_path_2);\n  return comparison_result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "strlen",
                "FUN_00106530",
                "strstr",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "check_binary_compatibility_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "print_error_message_and_return_00102f9f",
                "auVar1": "returnValue",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] print_error_message_and_return_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  print_error_message_00106530(*DAT_0010b780);\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "print_error_message_and_return_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103a78",
                "FUN_00103729",
                "FUN_00103abf",
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00102450",
                "FUN_001043d0",
                "FUN_001053c0",
                "FUN_00104370",
                "FUN_0010249f",
                "FUN_001048e0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_print_symbol_info_00103a66",
                "unaff_RBX": "rbx"
            },
            "code": "\nvoid check_and_print_symbol_info_00103a66(void)\n\n{\n  long rbx;\n  \n  if (*(long *)(rbx + 8) != 0) {\n    print_symbol_info_0010651a();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_and_print_symbol_info_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_and_format_info_001035a2",
                "unaff_RBX": "symbol_info",
                "lVar1": "symbol_address"
            },
            "code": "\nvoid print_symbol_and_format_info_001035a2(void)\n\n{\n  long *symbol_info;\n  long symbol_address;\n  \n  if (symbol_info[2] == 0) {\n    symbol_address = symbol_info[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_info[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (symbol_info[2] == 0) {\n      symbol_address = symbol_info[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_info[2] + 0x38);\n    }\n    print_symbol_info_001054d0(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_formatted_string_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_formatted_string_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "FUN_001054d0",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_symbol_and_format_info_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_and_print_matching_values_00103463",
                "unaff_R12": "inputString",
                "unaff_R13": "functionPtr",
                "unaff_R15": "inputPointer",
                "param_8": "index",
                "param_10": "value",
                "in_stack_00000050": "fileLine",
                "plVar1": "tempPointer",
                "lVar2": "tempValue",
                "cVar3": "result",
                "iVar4": "stringComparisonResult",
                "lVar5": "firstDataPointer",
                "lVar6": "currentIndex"
            },
            "code": "\n\n\nvoid findAndPrintMatchingValues_00103463(void)\n\n{\n  long *tempPointer;\n  long tempValue;\n  char result;\n  int stringComparisonResult;\n  long firstDataPointer;\n  char *inputString;\n  undefined8 *functionPtr;\n  long currentIndex;\n  long inputPointer;\n  undefined8 index;\n  ulong value;\n  long fileLine;\n  \n  print_error_message_00106530(*functionPtr);\n  do {\n    index._4_4_ = index._4_4_ + 1;\n    if (DAT_0010b748 <= index._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    firstDataPointer = DAT_0010b738;\n    for (currentIndex = 0; tempPointer = (long *)(firstDataPointer + (ulong)index._4_4_ * 8),\n        *tempPointer != currentIndex && currentIndex <= *tempPointer; currentIndex = currentIndex + 1) {\n      tempPointer = **(long ***)(*(long *)(DAT_0010b750 + (ulong)index._4_4_ * 8) + currentIndex * 8);\n      if ((((tempPointer != (long *)0x0) &&\n           (tempValue = *tempPointer, *(long *)(tempValue + 0x20) == *(long *)(inputPointer + 0x20))) &&\n          (*(long *)(tempValue + 0x10) == *(long *)(inputPointer + 0x10))) &&\n         (((stringComparisonResult = strcmp(inputString,*(char **)(tempValue + 8)), stringComparisonResult == 0 &&\n           (result = (**(code **)(functionPtr[1] + 0x240))(), firstDataPointer = DAT_0010b738, result != '\\0')) &&\n          (fileLine != 0)))) {\n        printf(\"\\t%s:%u\",fileLine,value >> 0x20);\n        index._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_and_print_matching_values_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_data_00104397",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "length"
            },
            "code": "\nvoid initializeData_00104397(undefined8 input1,undefined8 input2,int length)\n\n{\n  DAT_0010b7c0 = length;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)length * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "FUN_00104370",
                "caseD_4a"
            ],
            "imported": false,
            "current_name": "initialize_data_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00103729",
                "FUN_00103ca0",
                "FUN_00103238",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_001047d0",
                "FUN_0010268b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "determine_binary_architecture_00104670",
                "param_1": "binaryAddress",
                "iVar1": "architectureSize",
                "pcVar2": "architectureString",
                "puVar3": "concatenationResult",
                "pcVar4": "comparisonString"
            },
            "code": "\nvoid determineBinaryArchitecture_00104670(long binaryAddress)\n\n{\n  int architectureSize;\n  char *architectureString;\n  undefined *concatenationResult;\n  char *comparisonString;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    comparisonString = **(char ***)(binaryAddress + 8);\n    architectureString = strstr(comparisonString,\"64\");\n    architectureSize = 0x40;\n    if (architectureString == (char *)0x0) {\n      architectureSize = strcmp(comparisonString,\"mmo\");\n      architectureSize = (-(uint)(architectureSize == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = architectureSize;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    comparisonString = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    comparisonString = \"08\";\n  }\n  else {\n    comparisonString = \"016\";\n  }\n  concatenationResult = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        concatenationResult = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,comparisonString,0,0);\n          return;\n        }\n        concatenationResult = &DAT_001071cd;\n      }\n    }\n    else {\n      concatenationResult = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,comparisonString,concatenationResult,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001025f5",
                "bfd_get_arch_size",
                "free",
                "strstr",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "determine_binary_architecture_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_details_00103a78",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorDetails_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorFlag != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_details_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_lto_objects_001048e0",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "bVar1": "byteVar1",
                "pcVar2": "functionPtr",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "ppuVar8": "ptrPtrVar8",
                "ppuVar9": "ptrPtrVar9",
                "lVar10": "longVar10",
                "puVar11": "ptrVar11",
                "unaff_RBX": "ptrPtrVarRBX",
                "ppuVar12": "ptrPtrVar12",
                "ppuVar13": "ptrPtrVar13",
                "unaff_RBP": "ptrPtrVarRBP",
                "ppuVar14": "ptrPtrVar14",
                "ppuVar15": "ptrPtrVar15",
                "ppuVar16": "ptrPtrVar16",
                "ppuVar17": "ptrPtrVar17",
                "ppuVar18": "ptrPtrVar18",
                "unaff_R14": "ptrPtrVarR14",
                "unaff_R15": "ptrPtrVarR15",
                "bVar19": "boolVar",
                "bVar20": "byteVar20",
                "ppuStack_78": "ptrPtrVarStack78",
                "local_4c": "localVar4c",
                "local_48": "localVar48",
                "local_40": "localVar40"
            },
            "code": "\n\n\nvoid processLTOObjects_001048e0(ulong **param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **param5,ulong **param6)\n\n{\n  byte byteVar1;\n  code *functionPtr;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar;\n  ulong **ptrPtrVar8;\n  ulong **ptrPtrVar9;\n  long longVar10;\n  ulong *ptrVar11;\n  ulong **ptrPtrVarRBX;\n  ulong **ptrPtrVar12;\n  ulong **ptrPtrVar13;\n  ulong **ptrPtrVarRBP;\n  ulong **ptrPtrVar14;\n  ulong **ptrPtrVar15;\n  ulong **ptrPtrVar16;\n  ulong **ptrPtrVar17;\n  ulong **ptrPtrVar18;\n  ulong **ptrPtrVarR14;\n  ulong **ptrPtrVarR15;\n  bool boolVar;\n  byte byteVar20;\n  ulong **ptrPtrVarStack78;\n  uint localVar4c;\n  ulong *localVar48;\n  ulong **localVar40 [2];\n  \n  byteVar20 = 0;\n  localVar48 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)param1 + 0x44) & 0x10) != 0)) {\n    ptrPtrVar9 = (ulong **)&localVar4c;\n    ptrPtrVar8 = (ulong **)(*(code *)param1[1][0x4d])(param1,DAT_0010b80c != 0,localVar40);\n    if ((long)ptrPtrVar8 < 0) {\n      if ((DAT_0010b80c != 0) && (intVar = bfd_get_error(), intVar == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        ptrVar11 = *param1;\n        ulongVar = dcgettext(0,\"%s: no symbols\",5);\n        print_error_00106400(ulongVar,ptrVar11);\n        return;\n      }\n      print_error_message_00106530(*param1);\n      goto LAB_00102e9e;\n    }\n    if (ptrPtrVar8 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (localVar4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)param1 + 0x4a);\n      ptrPtrVar13 = param1;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          ptrPtrVarRBX = (ulong **)*ptrPtrVar13;\n          DAT_0010b230 = '\\0';\n          ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_error_00106400(ulongVar);\n        }\n        ptrPtrVar14 = localVar40[0];\n        ptrPtrVarR14 = (ulong **)(ulong)localVar4c;\n        boolVar = DAT_0010b80c != 0;\n        ptrPtrVar9 = localVar40[0];\n        ptrPtrVarR15 = (ulong **)(*(code *)ptrPtrVar13[1][0x41])(ptrPtrVar13);\n        ptrPtrVar12 = ptrPtrVarRBX;\n        ptrPtrVarRBP = (ulong **)(ulong)boolVar;\n        param1 = ptrPtrVar13;\n        if (ptrPtrVarR15 == (ulong **)0x0) goto LAB_00102ea7;\n        ptrPtrVar17 = (ulong **)((long)ptrPtrVar8 * (long)ptrPtrVarR14);\n        ptrPtrVar8 = (ulong **)((long)ptrPtrVar14 + (long)ptrPtrVar17);\n        param1 = ptrPtrVar14;\n        ptrPtrVar12 = ptrPtrVar14;\njoined_r0x001049a4:\n        if (param1 < ptrPtrVar8) {\n          do {\n            ptrPtrVar9 = (ulong **)(*(code *)ptrPtrVar13[1][0x4e])(ptrPtrVar13,boolVar,param1,ptrPtrVarR15);\n            ptrPtrVar17 = ptrPtrVarR15;\n            if (ptrPtrVar9 == (ulong **)0x0) goto LAB_00102eb0;\n            ptrVar11 = ptrPtrVar9[1];\n            ptrPtrVar17 = ptrPtrVar8;\n            if (((ptrVar11 == (ulong *)0x0) || (*(char *)ptrVar11 != '_')) ||\n               (*(char *)((long)ptrVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar = (uint)(ptrPtrVar9[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(ptrPtrVar9 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto process_lto_objects_00104d5b;\nLAB_00104a53:\n                  param6 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    charVar = (*(code *)ptrPtrVar13[1][0x46])(ptrPtrVar13,ptrPtrVar9);\n                    if (charVar != '\\0') {\n                      process_lto_object_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (ptrPtrVar9[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_objects_00104d5b:\n                if ((ptrPtrVar9[4] == (ulong *)0x10c2a8) || (ptrPtrVar9[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar = (*(code *)ptrPtrVar13[1][0x46])(ptrPtrVar13,ptrPtrVar9);\n                if (charVar != '\\0') {\n                  process_lto_object_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ptrPtrVar12 != param1) {\n                  if (ptrPtrVarR14 == (ulong **)0x8) {\n                    *ptrPtrVar12 = *param1;\n                    decode_and_process_data_001049c0();\n                    return;\n                  }\n                  for (; ptrPtrVarR14 != (ulong **)0x0; ptrPtrVarR14 = (ulong **)((long)ptrPtrVarR14 + -1)) {\n                    *(undefined *)ptrPtrVar12 = *(undefined *)param1;\n                    param1 = (ulong **)((long)param1 + (ulong)byteVar20 * -2 + 1);\n                    ptrPtrVar12 = (ulong **)((long)ptrPtrVar12 + (ulong)byteVar20 * -2 + 1);\n                  }\n                  decode_and_process_data_001049c0();\n                  return;\n                }\n                ptrPtrVar12 = (ulong **)((long)ptrPtrVar12 + (long)ptrPtrVarR14);\n              }\n            }\n            else {\n              intVar = strcmp((char *)((long)ptrVar11 + (ulong)(*(char *)((long)ptrVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              ptrPtrVarStack78 = ptrPtrVar9;\n              if (intVar == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  ptrPtrVarStack78 = (ulong **)*ptrPtrVar13;\n                  DAT_0010b230 = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_00106400(ulongVar,ptrPtrVarStack78);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uintVar = (*(uint *)(ptrPtrVar9 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(ptrPtrVar9 + 3) & 0x800082) != 0) || (ptrPtrVar9[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)ptrPtrVar9[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            param1 = (ulong **)((long)param1 + (long)ptrPtrVarR14);\n            if (ptrPtrVar8 <= param1) break;\n          } while( true );\n        }\n        ptrPtrVar12 = (ulong **)((long)ptrPtrVar12 - (long)ptrPtrVar14);\n        if (ptrPtrVarR14 == (ulong **)0x8) {\n          ptrVar11 = ptrPtrVar13[1];\n          ptrPtrVar14 = (ulong **)((long)ptrPtrVar12 + 7);\n          if (-1 < (long)ptrPtrVar12) {\n            ptrPtrVar14 = ptrPtrVar12;\n          }\n          param5 = (ulong **)(ulong)DAT_0010b800;\n          functionPtr = (code *)ptrVar11[0x41];\n          ptrPtrVar14 = (ulong **)((long)ptrPtrVar14 >> 3);\n        }\n        else {\n          ptrPtrVar14 = (ulong **)((long)ptrPtrVar12 / (long)ptrPtrVarR14);\n          ptrVar11 = ptrPtrVar13[1];\n          functionPtr = (code *)ptrVar11[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ptrPtrVar13;\n        DAT_0010b770 = (ulong **)(*functionPtr)(ptrPtrVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ptrPtrVar13[1][0x41])(ptrPtrVar13);\n        ptrPtrVar12 = localVar40[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          ptrPtrVar8 = (ulong **)(ulong)localVar4c;\n          if (DAT_0010b7f8 != 0) {\n            boolVar = DAT_0010b80c != 0;\n            qsort(localVar40[0],(size_t)ptrPtrVar14,(size_t)ptrPtrVar8,check_binary_compatibility_00102fd2);\n            ptrPtrVar17 = (ulong **)xmalloc((long)ptrPtrVar14 << 4);\n            ptrPtrVar18 = DAT_0010b770;\n            param1 = DAT_0010b768;\n            ptrPtrVarR14 = (ulong **)((long)ptrPtrVar14 * (long)ptrPtrVar8 + (long)ptrPtrVar12);\n            ptrPtrVar9 = DAT_0010b770;\n            if (ptrPtrVarR14 <= ptrPtrVar12) goto LAB_00102ec2;\n            param6 = DAT_0010b768;\n            ptrPtrVar14 = (ulong **)(*(code *)ptrPtrVar13[1][0x4e])(ptrPtrVar13,boolVar,ptrPtrVar12);\n            param5 = ptrPtrVar8;\n            ptrPtrVarStack78 = ptrPtrVar17;\n            if (ptrPtrVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localVar40[0],(size_t)ptrPtrVar14,(size_t)ptrPtrVar8,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          ptrVar11 = ptrPtrVar13[1];\nLAB_00104be2:\n          param1 = ptrPtrVar13;\n          ptrPtrVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        print_error_message_00106530(*ptrPtrVar13);\n        param1 = ptrPtrVar13;\n        ptrPtrVar12 = ptrPtrVarR15;\n        while( true ) {\n          ptrPtrVarRBX = (ulong **)xmalloc();\n          ptrPtrVar8 = (ulong **)(*(code *)param1[1][0x6b])(param1,ptrPtrVarRBX);\n          ptrPtrVar9 = ptrPtrVar17;\n          if (-1 < (long)ptrPtrVar8) break;\n          ptrPtrVar13 = (ulong **)*param1;\n          ptrPtrVar14 = (ulong **)print_error_message_00106530(ptrPtrVar13,ptrPtrVar17);\nLAB_00102dbe:\n          ptrVar11 = ptrPtrVar14[2];\n          ptrPtrVar9 = (ulong **)0x0;\nLAB_00102dc4:\n          ptrVar11 = (ulong *)((long)ptrPtrVar8[8] - (long)ptrVar11);\n          ptrPtrVar18 = param1;\n          ptrPtrVar15 = ptrPtrVar12;\nLAB_00104ea7:\n          ptrPtrVar14 = ptrPtrVar9;\n          ptrPtrVar12 = ptrPtrVarRBX;\n          param1 = param6;\n          if (ptrVar11 != (ulong *)0x0) {\n            *ptrPtrVar17 = (ulong *)ptrPtrVar15;\n            ptrPtrVar17[1] = ptrVar11;\n            ptrPtrVar17 = ptrPtrVar17 + 2;\n          }\nLAB_00104e35:\n          param6 = ptrPtrVar18;\n          if (ptrPtrVar12 < ptrPtrVarR14) goto code_r0x00104e3e;\n          ptrPtrVar14 = (ulong **)((long)ptrPtrVar17 - (long)ptrPtrVarStack78 >> 4);\n          qsort(ptrPtrVarStack78,(size_t)ptrPtrVar14,0x10,compare_and_execute_00103533);\n          ptrVar11 = ptrPtrVar13[1];\n          param1 = ptrPtrVar13;\n          ptrPtrVar18 = ptrPtrVarStack78;\nLAB_00104be5:\n          ptrPtrVarRBX = localVar40[0];\n          ptrPtrVar8 = (ulong **)(ulong)DAT_0010b7f8;\n          ptrPtrVarR14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ptrPtrVar17 = (ulong **)(*(code *)ptrVar11[0x41])(param1);\n            if (ptrPtrVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ptrPtrVar12 = ptrPtrVar18 + (long)ptrPtrVar14 * 2;\n            ptrPtrVar14 = ptrPtrVar18;\n            goto LAB_00104ee9;\n          }\n          ptrPtrVar8 = (ulong **)(ulong)localVar4c;\n          ptrPtrVarR15 = (ulong **)(*(code *)ptrVar11[0x41])(param1);\n          if (ptrPtrVarR15 != (ulong **)0x0) {\n            ptrPtrVarRBP = (ulong **)((long)ptrPtrVar14 * (long)ptrPtrVar8 + (long)ptrPtrVarRBX);\n            if (ptrPtrVarRBX < ptrPtrVarRBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          print_error_message_00106530(*param1);\n          ptrPtrVarR15 = ptrPtrVar18;\nLAB_00102d06:\n          ptrPtrVar9 = ptrPtrVar8;\n          if (DAT_0010b80c != 0) {\n            ptrPtrVarRBX = localVar40[0];\n            ptrPtrVar14 = (ulong **)0x0;\n            ptrPtrVar17 = (ulong **)0x0;\n            break;\n          }\n          longVar10 = (*(code *)param1[1][0x6a])(param1);\n          ptrPtrVar14 = localVar40[0];\n          ptrPtrVar17 = ptrPtrVar8;\n          ptrPtrVar12 = ptrPtrVarR15;\n          if (longVar10 < 1) {\n            ptrPtrVar8 = (ulong **)0x0;\n            ptrPtrVarRBX = (ulong **)0x0;\n            break;\n          }\n        }\n        param6 = &localVar48;\n        param5 = ptrPtrVarRBX;\n        longVar10 = (*(code *)param1[1][0x6c])(param1,ptrPtrVar17,ptrPtrVar14,ptrPtrVar8);\n        ptrPtrVar8 = ptrPtrVar9;\n        if (0 < longVar10) {\n          ptrPtrVar8 = (ulong **)((long)ptrPtrVar9 + longVar10);\n          localVar40[0] = (ulong **)xrealloc(localVar40[0]);\n          longVar = 0;\n          do {\n            localVar40[0][(long)ptrPtrVar9 + longVar] = localVar48 + longVar * 6;\n            longVar = longVar + 1;\n          } while (longVar10 != longVar);\n          localVar40[0][(long)ptrPtrVar9 + longVar10] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (ptrPtrVarRBX != (ulong **)0x0)) {\n          free(ptrPtrVarRBX);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)param1 + 0x4a);\n        ptrPtrVar13 = param1;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    ptrVar11 = *param1;\n    ulongVar = dcgettext(0,\"%s: no symbols\",5);\n    print_error_00106400(ulongVar,ptrVar11);\n  }\n  return;\ncode_r0x00104b01:\n  param1 = (ulong **)((long)param1 + (long)ptrPtrVarR14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  ptrPtrVarRBX = (ulong **)((long)ptrPtrVar12 + (long)param5);\n  if (ptrPtrVarR14 <= ptrPtrVarRBX) {\n    ptrPtrVar8 = (ulong **)ptrPtrVar14[4];\n    if ((*(uint *)(ptrPtrVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    ptrPtrVar9 = (ulong **)0x0;\nLAB_00104e95:\n    ptrPtrVar18 = param1;\n    ptrPtrVar15 = ptrPtrVar12;\n    if (*(int *)(ptrPtrVar13[1] + 1) == 5) {\n      ptrVar11 = ptrPtrVar14[7];\n      goto LAB_00104ea7;\n    }\n    ptrVar11 = ptrPtrVar14[2];\n    if ((*(byte *)((long)ptrPtrVar8 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (ptrPtrVarR14 <= ptrPtrVarRBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  ptrPtrVar8 = param1;\n  ptrPtrVar15 = param5;\n  ptrPtrVar16 = param6;\n  ptrPtrVar9 = (ulong **)(*(code *)ptrPtrVar13[1][0x4e])();\n  ptrPtrVar18 = ptrPtrVar12;\n  if (ptrPtrVar9 == (ulong **)0x0) goto LAB_00102edb;\n  ptrPtrVar8 = (ulong **)ptrPtrVar14[4];\n  if ((*(uint *)(ptrPtrVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ptrPtrVar12 <= ptrPtrVar14) {\nLAB_00104c75:\n    if (localVar48 == (ulong *)0x0) {\n      free(localVar40[0]);\n      free(ptrPtrVar18);\n      return;\n    }\n    free(localVar48);\n    free(localVar40[0]);\n    free(ptrPtrVar18);\n    return;\n  }\n  ptrPtrVar8 = ptrPtrVar17;\n  longVar10 = (*(code *)param1[1][0x4e])(param1,ptrPtrVarR14,*ptrPtrVar14);\n  if (longVar10 == 0) goto LAB_00102ec9;\n  ptrPtrVar8 = ptrPtrVar14 + 1;\n  ptrPtrVar14 = ptrPtrVar14 + 2;\n  print_relocated_sections_00105110(param1,longVar10,*ptrPtrVar8,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  print_error_message_00106530(*param1,0);\nLAB_00102ed2:\n  ptrPtrVar13 = (ulong **)*param1;\n  print_error_message_00106530();\n  ptrPtrVarRBX = ptrPtrVar12;\n  ptrPtrVar15 = param5;\n  ptrPtrVar16 = param6;\nLAB_00102edb:\n  param6 = ptrPtrVar16;\n  param5 = ptrPtrVar15;\n  ptrPtrVar13 = (ulong **)*ptrPtrVar13;\n  ptrPtrVar9 = (ulong **)print_error_message_00106530();\n  ptrPtrVar12 = ptrPtrVar18;\nLAB_00102ee3:\n  ptrVar11 = ptrPtrVar14[2];\nLAB_00102ee7:\n  if (ptrPtrVar8 != (ulong **)ptrPtrVar9[4]) goto LAB_00102dc4;\n  ptrVar11 = (ulong *)((long)ptrPtrVar9[2] - (long)ptrVar11);\n  ptrPtrVar18 = param1;\n  ptrPtrVar15 = ptrPtrVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (ptrPtrVar9 = ptrPtrVarR15, longVar10 = (*(code *)param1[1][0x4e])(param1,ptrPtrVarR14,ptrPtrVarRBX),\n        longVar10 != 0) {\n    ptrPtrVarRBX = (ulong **)((long)ptrPtrVarRBX + (long)ptrPtrVar8);\n    print_relocated_sections_00105110(param1,longVar10,0,param2);\n    if (ptrPtrVarRBP <= ptrPtrVarRBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  print_error_message_00106530(*param1);\n  ptrPtrVar12 = ptrPtrVarRBX;\nLAB_00102ea7:\n  ptrPtrVar13 = ptrPtrVarRBP;\n  print_error_message_00106530(*param1);\n  ptrPtrVar17 = ptrPtrVarR15;\nLAB_00102eb0:\n  print_error_message_00106530(*ptrPtrVar13);\n  ptrPtrVar13 = param1;\nLAB_00102eb9:\n  print_error_message_00106530(*ptrPtrVar13);\n  param1 = param6;\nLAB_00102ec2:\n  ptrPtrVar14 = (ulong **)0x0;\n  param5 = ptrPtrVar8;\n  ptrPtrVar18 = ptrPtrVar9;\n  ptrPtrVarStack78 = ptrPtrVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106530",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "process_lto_objects_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_valid_flag_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfValidFlag_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_valid_flag_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  initialize_data_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "find_matching_strings_00103238",
                "__ptr": "pointer",
                "__s1": "string1",
                "lVar2": "tempValue",
                "cVar3": "charValue",
                "iVar4": "comparisonResult",
                "unaff_RBX": "ptrRBX",
                "pvVar5": "ptrVar5",
                "uVar6": "index",
                "unaff_R13": "ptrR13",
                "lVar7": "loopCount",
                "param_10": "paramValue10",
                "param_12": "paramValue12"
            },
            "code": "\n\n\nvoid findMatchingStrings_00103238(void)\n\n{\n  long *plVar1;\n  void *pointer;\n  char *string1;\n  long tempValue;\n  char charValue;\n  int comparisonResult;\n  long ptrRBX;\n  void *ptrVar5;\n  uint index;\n  long ptrR13;\n  long loopCount;\n  ulong paramValue10;\n  void *paramValue12;\n  \n  ptrVar5 = DAT_0010b750;\n  if (_DAT_0010b7b0 == ptrR13) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    index = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; index < DAT_0010b748; index = index + 1) {\n        pointer = *(void **)((long)ptrVar5 + (ulong)index * 8);\n        if (pointer != (void *)0x0) {\n          free(pointer);\n        }\n      }\n      free(DAT_0010b740);\n      free(ptrVar5);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(ptrR13 + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  paramValue12 = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = ptrR13;\nLAB_00103296:\n  string1 = *(char **)(ptrRBX + 8);\n  index = 0;\n  do {\n    if (DAT_0010b748 <= index) {\n      putc(10,_stdout);\n      return;\n    }\n    ptrVar5 = DAT_0010b738;\n    for (loopCount = 0; plVar1 = (long *)((long)ptrVar5 + (ulong)index * 8),\n        *plVar1 != loopCount && loopCount <= *plVar1; loopCount = loopCount + 1) {\n      plVar1 = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)index * 8) + loopCount * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (tempValue = *plVar1, *(long *)(tempValue + 0x20) == *(long *)(ptrRBX + 0x20))) &&\n          (*(long *)(tempValue + 0x10) == *(long *)(ptrRBX + 0x10))) &&\n         (((comparisonResult = strcmp(string1,*(char **)(tempValue + 8)), comparisonResult == 0 &&\n           (charValue = (**(code **)(*(long *)(ptrR13 + 8) + 0x240))(), ptrVar5 = DAT_0010b738,\n           charValue != '\\0')) && (paramValue12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",paramValue12,paramValue10 >> 0x20);\n        index = DAT_0010b748;\n        break;\n      }\n    }\n    index = index + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103c00",
                "bfd_map_over_sections",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_strings_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "title",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *title,undefined8 *message)\n\n{\n  if (title != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*title);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_string_001047d0",
                "unaff_RBX": "concatenatedString",
                "unaff_R12": "flagPointer",
                "unaff_R13": "tempString",
                "unaff_R14": "formatString",
                "unaff_R15": "dataPointer",
                "pcVar1": "result"
            },
            "code": "\nvoid printFormattedString_001047d0(void)\n\n{\n  char *result;\n  void *concatenatedString;\n  undefined *flagPointer;\n  void *tempString;\n  char *formatString;\n  long dataPointer;\n  \n  if (((DAT_0010b234 != 0) &&\n      (result = (char *)(**(code **)(*(long *)(dataPointer + 8) + 0x220))(), result != (char *)0x0))\n     && (*result != '\\0')) {\n    concatenatedString = (void *)reconcat();\n    tempString = concatenatedString;\n  }\n  printf(formatString,tempString);\n  if (flagPointer != (undefined *)0x0) {\n    *flagPointer = 0x40;\n  }\n  free(concatenatedString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_string_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_warning_message_0010249f",
                "uVar1": "warningMessage",
                "dcgettext": "getTranslatedWarning",
                "print_error_00106400": "printErrorMessage"
            },
            "code": "\nundefined8 printWarningMessage_0010249f(void)\n\n{\n  undefined8 warningMessage;\n  \n  warningMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  printErrorMessage(warningMessage);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_warning_message_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_and_process_001043d0",
                "param_1": "file_path",
                "cVar1": "check_result",
                "iVar2": "status",
                "uVar3": "result",
                "piVar4": "error_ptr",
                "uVar5": "error_msg",
                "puVar6": "bfd_handle",
                "puVar9": "archive_file",
                "puVar10": "next_archive_file",
                "local_c8": "file_stats",
                "lVar7": "archive_index",
                "pcVar8": "error_msg_str"
            },
            "code": "\n\n\nundefined4 check_file_and_process_001043d0(char *file_path)\n\n{\n  char check_result;\n  int status;\n  undefined4 result;\n  int *error_ptr;\n  undefined8 error_msg;\n  undefined8 *bfd_handle;\n  long archive_index;\n  char *error_msg_str;\n  undefined8 *archive_file;\n  undefined8 *next_archive_file;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\nLAB_00102522:\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        error_msg = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_00106400(error_msg,file_path);\n      }\n      else {\n        error_msg_str = strerror(*error_ptr);\n        error_msg = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_00106400(error_msg,file_path,error_msg_str);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_00106400(error_msg,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (file_stats.st_size < 0) {\n        error_msg = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_error_00106400(error_msg,file_path);\n      }\n      else if (file_stats.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfd_handle = (undefined8 *)bfd_openr(file_path,\"plugin\");\n        }\n        else {\n          bfd_handle = (undefined8 *)bfd_openr(file_path);\n        }\n        if (bfd_handle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfd_handle + 0x44) = *(uint *)((long)bfd_handle + 0x44) | 0x8000;\n          }\n          check_result = bfd_check_format(bfd_handle,2);\n          if (check_result == '\\0') {\n            result = bfd_check_format_matches(bfd_handle,1,&file_stats);\n            if ((char)result == '\\0') goto LAB_001025ac;\n            determine_binary_architecture_00104670(bfd_handle);\n            (**(code **)PTR_PTR_FUN_0010b260)(file_path);\n            process_lto_objects_001048e0(bfd_handle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfd_handle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (archive_index = bfd_get_next_mapent(bfd_handle,0xffffffffffffffff,&file_stats), archive_index != -1)) {\n              error_msg_str = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_msg_str);\n              do {\n                archive_file = (undefined8 *)(**(code **)(bfd_handle[1] + 0x1e0))(bfd_handle,archive_index);\n                if (archive_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stats.st_dev != 0) {\n                  print_formatted_string_00104740(&DAT_0010712d,0,*(long *)file_stats.st_dev,bfd_handle);\n                  printf(\" in %s\\n\",*archive_file);\n                }\n                archive_index = bfd_get_next_mapent(bfd_handle,archive_index,&file_stats);\n              } while (archive_index != -1);\n            }\n            archive_file = (undefined8 *)0x0;\n            do {\n              do {\n                next_archive_file = archive_file;\n                archive_file = (undefined8 *)bfd_openr_next_archived_file(bfd_handle,next_archive_file);\n                if (archive_file == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    print_error_message_00106530(*bfd_handle);\nLAB_00102516:\n                    print_error_message_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (next_archive_file != (undefined8 *)0x0) {\n                    bfd_close(next_archive_file);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                check_result = bfd_check_format_matches(archive_file,1,&file_stats);\n                if (check_result == '\\0') {\n                  print_error_message_00106540(*archive_file);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    print_matching_formats_00103b5d(file_stats.st_dev);\n                  }\n                }\n                else {\n                  determine_binary_architecture_00104670(archive_file);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfd_handle,*archive_file);\n                  process_lto_objects_001048e0(archive_file,bfd_handle);\n                }\n              } while (next_archive_file == (undefined8 *)0x0);\n              bfd_close(next_archive_file);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (next_archive_file != archive_file);\n          }\nLAB_001044b4:\n          result = 1;\n          while (check_result = bfd_close(bfd_handle), check_result == '\\0') {\n            print_error_message_00106530(file_path);\nLAB_001025ac:\n            print_error_message_00106540(file_path);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              print_matching_formats_00103b5d(file_stats.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return result;\n        }\n        print_error_message_00106540(file_path);\n      }\n    }\n    else {\n      error_msg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_00106400(error_msg,file_path);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "printf",
                "FUN_00102670",
                "FUN_00103b5d",
                "FUN_00106530",
                "FUN_00106540",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "FUN_0010351b",
                "bfd_get_error",
                "strerror",
                "FUN_0010249f",
                "dcgettext",
                "FUN_001062d0",
                "FUN_001048e0",
                "__errno_location",
                "FUN_00106400",
                "FUN_00104740",
                "FUN_00104670",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "check_file_and_process_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_and_assign_001025f5",
                "param_1": "inputString1",
                "param_2": "inputString2"
            },
            "code": "\nvoid concatenateAndAssign_001025f5(undefined8 inputString1,undefined8 inputString2)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,inputString2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_and_assign_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_debug_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfDebug_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_debug_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "comparison_result",
                "lVar2": "length_string1",
                "lVar3": "length_string2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint comparison_result;\n  long length_string1;\n  long length_string2;\n  \n  length_string1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string1,DAT_0010b770);\n  length_string2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,string2,DAT_0010b768);\n  if ((length_string1 == 0) || (length_string2 == 0)) {\n    print_error_message_00106530(*DAT_0010b780);\n  }\n  else {\n    string2_ptr = *(char **)(length_string2 + 8);\n    string1_ptr = *(char **)(length_string1 + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1_ptr,string2_ptr);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_00102f9f",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_message_001064a0",
                "param_1": "messageTitle",
                "param_2": "message"
            },
            "code": "\nvoid printMessage_001064a0(undefined8 *messageTitle,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (messageTitle != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*messageTitle);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefinedSymbol",
                "uVar2": "symType",
                "iVar3": "asprintfResult",
                "plVar4": "symbolInfo",
                "piVar5": "errnoLocation",
                "uVar6": "errorString",
                "lVar7": "infoPtr",
                "uVar8": "width",
                "bVar9": "sectionIndex",
                "uVar10": "savedWidth",
                "pcVar11": "typeName",
                "in_R8": "var8",
                "in_R9": "var9"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefinedSymbol;\n  ushort symType;\n  int asprintfResult;\n  long *symbolInfo;\n  int *errnoLocation;\n  undefined8 errorString;\n  long infoPtr;\n  ulong width;\n  byte sectionIndex;\n  ulong savedWidth;\n  char *typeName;\n  undefined8 var8;\n  undefined8 var9;\n  \n  width = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  savedWidth = width;\n  print_and_exit_00106300(symbolInfo,width);\n  print_formatted_string_00104740(\"%-20s|\",symbolInfo,0,savedWidth,var8,var9,width);\n  isUndefinedSymbol = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefinedSymbol == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      infoPtr = *(long *)(symbolInfo[3] + 0x30);\n      isUndefinedSymbol = *(char *)(infoPtr + 0x28);\n      if (isUndefinedSymbol == 'g') goto LAB_00103983;\n      if (isUndefinedSymbol == 'h') {\n        typeName = \"Line\";\n      }\n      else if (isUndefinedSymbol == 'd') {\n        typeName = \"Block\";\n      }\n      else if (*(ushort *)(infoPtr + 0x26) == 0) {\n        typeName = \"None\";\n      }\n      else {\n        symType = *(ushort *)(infoPtr + 0x26) >> 4 & 3;\n        if (symType == 2) {\n          typeName = \"Function\";\n        }\n        else if (symType == 3) {\n          typeName = \"Array\";\n        }\n        else {\n          if (symType != 1) {\n            free(DAT_0010b730);\n            symType = *(ushort *)(infoPtr + 0x26);\n            sectionIndex = *(byte *)(infoPtr + 0x28);\n            typeName = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&DAT_0010b730,typeName,(ulong)sectionIndex,(ulong)symType);\n            typeName = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          typeName = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    sectionIndex = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(sectionIndex) {\n    case 0:\n      typeName = \"NOTYPE\";\n      break;\n    case 1:\n      typeName = \"OBJECT\";\n      break;\n    case 2:\n      typeName = \"FUNC\";\n      break;\n    case 3:\n      typeName = \"SECTION\";\n      break;\n    case 4:\n      typeName = \"FILE\";\n      break;\n    case 5:\n      typeName = \"COMMON\";\n      break;\n    case 6:\n      typeName = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      typeName = \"<processor specific>: %d\";\n      if ((2 < sectionIndex - 0xd) && (typeName = \"<OS specific>: %d\", 2 < sectionIndex - 10)) {\n        typeName = \"<unknown>: %d\";\n      }\n      typeName = (char *)dcgettext(0,typeName,5);\n      asprintfResult = asprintf(&DAT_0010b728,typeName,(ulong)sectionIndex);\n      typeName = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorString = xstrerror(*errnoLocation);\n        print_and_exit_00106300(&DAT_0010712d,errorString);\nLAB_00103983:\n        typeName = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",typeName);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoPtr = symbolInfo[2];\n  if ((infoPtr != 0) || (infoPtr = symbolInfo[3], infoPtr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoPtr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_0010370a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_data_001053b0",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid print_data_001053b0(undefined8 *string1,undefined8 *string2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,param4);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_data_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "process_files_001055f0",
                "param_1": "numFiles",
                "param_2": "filePaths",
                "pbVar1": "byte1",
                "bVar2": "byte2",
                "bVar3": "bool1",
                "bVar4": "bool2",
                "bVar5": "bool3",
                "cVar6": "char1",
                "bVar7": "byte3",
                "cVar8": "char2",
                "cVar9": "char3",
                "iVar10": "int1",
                "uVar11": "uint1",
                "iVar12": "int2",
                "iVar2": "int3",
                "uVar13": "uint2",
                "uVar14": "uint3",
                "__stream": "filePtr",
                "__s": "bufPtr",
                "piVar15": "intPtr1",
                "sVar16": "size1",
                "__ptr": "ptr1",
                "__src": "longPtr1",
                "lVar17": "long1",
                "plVar18": "longPtr2",
                "plVar19": "longPtr3",
                "uVar20": "uint4",
                "uVar21": "uint5",
                "pcVar22": "str1",
                "pbVar23": "bytePtr1",
                "unaff_RBP": "undefinedPtr1",
                "lVar24": "long2",
                "pbVar25": "bytePtr2",
                "pcVar26": "str2",
                "unaff_R12": "intPtr2",
                "piVar27": "intPtr3",
                "local_110": "int4",
                "local_10c": "int5",
                "local_108": "size2",
                "local_c8": "statStruct"
            },
            "code": "\n\n\nundefined ** processFiles_001055f0(int numFiles,long *filePaths)\n\n{\n  byte *byte1;\n  byte byte2;\n  bool bool1;\n  bool bool2;\n  bool bool3;\n  char char1;\n  byte byte3;\n  char char2;\n  char char3;\n  int int1;\n  uint uint1;\n  int int2;\n  undefined4 uint2;\n  undefined4 uint3;\n  FILE *filePtr;\n  byte *bufPtr;\n  int *intPtr1;\n  size_t size1;\n  byte *ptr1;\n  long *longPtr1;\n  long long1;\n  long *longPtr2;\n  long *longPtr3;\n  undefined8 uint4;\n  undefined8 uint5;\n  char *str1;\n  byte *bytePtr1;\n  undefined **undefinedPtr1;\n  long long2;\n  byte *bytePtr2;\n  char *str2;\n  int *intPtr2;\n  int *intPtr3;\n  int int4;\n  int int5;\n  size_t size2;\n  stat statStruct;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  str1 = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *filePaths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  longPtr2 = filePaths;\n  if (1 < numFiles) {\n    int5 = 2000;\n    intPtr2 = (int *)0x1;\n    int4 = 0;\n    do {\n      int2 = (int)intPtr2;\n      undefinedPtr1 = (undefined **)(long)int2;\n      intPtr3 = (int *)((long)undefinedPtr1 * 8);\n      if (*(char *)longPtr2[(long)undefinedPtr1] != '@') goto LAB_00105a70;\n      int5 = int5 + -1;\n      if (int5 == 0) {\n        long2 = *longPtr2;\n        str2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      str1 = (char *)longPtr2[(long)undefinedPtr1] + 1;\n      int1 = stat(str1,&statStruct);\n      if (int1 < 0) {\nLAB_00105a70:\n        if (numFiles <= int2 + 1) break;\nLAB_00105a7a:\n        uint1 = int2 + 1;\n        int4 = int2;\n      }\n      else {\n        if ((statStruct.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        filePtr = fopen(str1,\"r\");\n        if (filePtr == (FILE *)0x0) goto LAB_00105a70;\n        int1 = fseek(filePtr,0,2);\n        if (((int1 == -1) ||\n            (str1 = (char *)ftell(filePtr), (int *)str1 == (int *)0xffffffffffffffff)) ||\n           (int1 = fseek(filePtr,0,0), int1 == -1)) {\nLAB_00105ad0:\n          fclose(filePtr);\n          if (int2 + 1 < numFiles) goto LAB_00105a7a;\n          break;\n        }\n        bufPtr = (byte *)xmalloc((char *)((long)str1 + 1));\n        intPtr1 = (int *)fread(bufPtr,1,(size_t)str1,filePtr);\n        if (((int *)str1 != intPtr1) && (int1 = ferror(filePtr), int1 != 0)) {\n          free(bufPtr);\n          goto LAB_00105ad0;\n        }\n        bufPtr[(long)intPtr1] = 0;\n        byte3 = *bufPtr;\n        bytePtr1 = bufPtr;\n        if (byte3 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte3 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size1 = strlen((char *)bufPtr);\n          ptr1 = (byte *)xmalloc(size1 + 1);\n          int1 = 0;\n          bool3 = false;\n          bool1 = false;\n          long2 = 0;\n          longPtr1 = (long *)0x0;\n          bool2 = false;\n          bytePtr1 = bufPtr;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr1 * 2] & 0x40) != 0) {\n              bytePtr1 = bytePtr1 + 1;\n            }\n            if ((int1 == 0) || (longPtr3 = longPtr1 + long2, int1 + -1 <= (int)long2)) {\n              if (longPtr1 == (long *)0x0) {\n                int1 = 8;\n                longPtr1 = (long *)xmalloc(0x40);\n                longPtr3 = longPtr1 + long2;\n                *longPtr3 = 0;\n              }\n              else {\n                int1 = int1 * 2;\n                longPtr1 = (long *)xrealloc(longPtr1,(long)int1 << 3);\n                longPtr3 = longPtr1 + long2;\n                *longPtr3 = 0;\n              }\n            }\n            byte3 = *bytePtr1;\n            bytePtr2 = ptr1;\n            while (byte3 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte3 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool3 | bool2 | bool1))) {\n                  bool2 = false;\n                  bool3 = false;\n                  bool1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool2) break;\n                bytePtr1 = bytePtr1 + 1;\n                *bytePtr2 = byte3;\n                bytePtr2 = bytePtr2 + 1;\n                bool2 = false;\n                byte3 = *bytePtr1;\n                if (byte3 == 0) goto LAB_001058e0;\n              }\n              if (byte3 == 0x5c) {\n                bool2 = true;\n              }\n              else if (bool1) {\n                if (byte3 == 0x27) {\n                  bool1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *bytePtr2 = byte3;\n                  bytePtr2 = bytePtr2 + 1;\n                }\n              }\n              else if (bool3) {\n                if (byte3 != 0x22) goto LAB_00105a55;\n                bool3 = false;\n              }\n              else if (byte3 == 0x27) {\n                bool1 = true;\n              }\n              else {\n                if (byte3 != 0x22) goto LAB_00105a55;\n                bool3 = true;\n              }\n              byte1 = bytePtr1 + 1;\n              bytePtr1 = bytePtr1 + 1;\n              byte3 = *byte1;\n            }\nLAB_001058e0:\n            *bytePtr2 = 0;\n            long1 = xstrdup(ptr1);\n            *longPtr3 = long1;\n            longPtr1[long2 + 1] = 0;\n            byte3 = *bytePtr1;\n            byte2 = (&_sch_istable)[(ulong)byte3 * 2];\n            while ((byte2 & 0x40) != 0) {\n              byte3 = bytePtr1[1];\n              bytePtr1 = bytePtr1 + 1;\n              byte2 = (&_sch_istable)[(ulong)byte3 * 2];\n            }\n            long2 = long2 + 1;\n          } while (byte3 != 0);\n          free(ptr1);\n          longPtr3 = longPtr2;\n          if (filePaths == longPtr2) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longPtr1 = (long *)xmalloc(8);\n        *longPtr1 = 0;\n        if (filePaths == longPtr2) {\nLAB_00105c79:\n          if (*longPtr2 == 0) {\n            int1 = 0;\n          }\n          else {\n            long2 = 1;\n            do {\n              int1 = (int)long2;\n              longPtr3 = longPtr2 + long2;\n              long2 = long2 + 1;\n            } while (*longPtr3 != 0);\n          }\n          long1 = 0;\n          longPtr3 = (long *)xmalloc((long)(int1 + 1) << 3);\n          long2 = *longPtr2;\n          while (long2 != 0) {\n            uint4 = xstrdup();\n            *(undefined8 *)((long)longPtr3 + long1) = uint4;\n            long1 = long1 + 8;\n            long2 = *(long *)((long)longPtr2 + long1);\n          }\n          *(undefined8 *)((long)longPtr3 + long1) = 0;\nLAB_0010597d:\n          longPtr2 = longPtr3;\n          if (*longPtr1 == 0) goto LAB_00105d50;\n          str1 = (char *)0x0;\n          do {\n            str1 = (char *)((long)str1 + 1);\n          } while (longPtr1[(long)str1] != 0);\n          size2 = (long)str1 * 8;\n        }\n        else {\nLAB_00105d50:\n          str1 = (char *)0x0;\n          size2 = 0;\n        }\n        free((void *)longPtr2[(long)undefinedPtr1]);\n        longPtr2 = (long *)xrealloc(longPtr2,(long)((long)str1 + (long)numFiles + 1) * 8);\n        int1 = numFiles + -1 + (int)str1;\n        memmove(longPtr2 + (long)(undefined **)((long)undefinedPtr1 + (long)str1),\n                longPtr2 + 1 + (long)undefinedPtr1,(long)(numFiles - int2) << 3);\n        memcpy(longPtr2 + (long)undefinedPtr1,longPtr1,size2);\n        free(longPtr1);\n        free(bufPtr);\n        fclose(filePtr);\n        uint1 = int4 + 1;\n        undefinedPtr1 = (undefined **)((long)undefinedPtr1 + (long)str1);\n        intPtr2 = intPtr3;\n        numFiles = int1;\n        if (int1 <= (int)uint1) break;\n      }\n      intPtr2 = (int *)(ulong)uint1;\n    } while( true );\n  }\n  int2 = bfd_init();\n  str2 = \"fatal error: libbfd ABI mismatch\";\n  if (int2 != 0x118) goto LAB_00106085;\n  undefinedPtr1 = &PTR_s_debug_syms_0010b280;\n  char2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  str1 = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  intPtr2 = (int *)\"x86_64-pc-linux-gnu\";\n  char3 = DAT_0010b23b;\n  char1 = DAT_0010b240;\n  uint3 = DAT_0010b244;\n  if (char2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uint3;\n    DAT_0010b240 = char1;\n    DAT_0010b23b = char3;\n    uint2 = getopt_long(numFiles,longPtr2,str1);\n    intPtr3 = _optarg;\n    intPtr1 = (int *)str1;\n    char3 = DAT_0010b23b;\n    char1 = DAT_0010b240;\n    uint3 = DAT_0010b244;\n    switch(uint2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      print_symbol_options_00103ca0(_stderr,1);\n      intPtr3 = intPtr2;\nLAB_001061d5:\n      int2 = strcmp((char *)intPtr3,\"l\");\n      if (int2 == 0) goto LAB_001061a3;\n      int2 = strcmp((char *)intPtr3,\"escape\");\n      intPtr2 = intPtr3;\n      if ((int2 == 0) || (int2 = strcmp((char *)intPtr3,\"e\"), int2 == 0)) {\n        DAT_0010b7e0 = 2;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)intPtr3,\"invalid\");\n      if ((int2 == 0) || (int2 = strcmp((char *)intPtr3,\"i\"), int2 == 0)) {\n        DAT_0010b7e0 = 5;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)intPtr3,\"hex\");\n      if ((int2 == 0) || (int2 = strcmp((char *)intPtr3,\"x\"), int2 == 0)) {\n        DAT_0010b7e0 = 3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int2 = strcmp((char *)intPtr3,\"highlight\");\n      if ((int2 == 0) || (int2 = strcmp((char *)intPtr3,\"h\"), int2 == 0)) {\n        DAT_0010b7e0 = 4;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      str2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      initialize_output_format_00104370(&DAT_00107033);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      print_symbol_options_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      intPtr2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        int2 = cplus_demangle_name_to_style();\n        intPtr1 = _optarg;\n        if (int2 == 0) {\n          uint4 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          print_and_exit_00106300(uint4,intPtr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          str1 = (char *)intPtr1;\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uint3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char3 = DAT_0010b23b;\n          char1 = DAT_0010b240;\n          uint3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      initialize_output_format_00104370(\"posix\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int2 = strcmp((char *)_optarg,\"32_64\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      if (int2 != 0) {\n        str2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uint4 = dcgettext(0,str2,5);\n        print_and_exit_00106300(uint4);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      initialize_output_format_00104370(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      initialize_output_format_00104370(\"just-symbols\");\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char3 = *(char *)_optarg;\n      intPtr2 = intPtr3;\n      char1 = char3;\n      uint3 = 10;\n      if (char3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char3) {\n        if (char3 == 'o') {\n          uint3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char3 == 'x') {\n          uint3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      str2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char3 = DAT_0010b23b;\n      char1 = DAT_0010b240;\n      uint3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int2 = strcmp((char *)_optarg,\"default\");\n      if ((int2 == 0) || (int2 = strcmp((char *)intPtr3,\"d\"), int2 == 0)) {\n        DAT_0010b7e0 = 0;\n        intPtr2 = intPtr3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      else {\n        int2 = strcmp((char *)intPtr3,\"locale\");\n        if (int2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        intPtr2 = intPtr3;\n        char3 = DAT_0010b23b;\n        char1 = DAT_0010b240;\n        uint3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uint4 = dcgettext(0,str2,5);\n    print_and_exit_00106300(uint4,intPtr3);\nLAB_00105f13:\n    long2 = *longPtr2;\n    str2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,str2,long2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uint3 = bfd_get_error();\n  uint4 = bfd_errmsg(uint3);\n  uint5 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  print_and_exit_00106300(uint5,\"x86_64-pc-linux-gnu\",uint4);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte3 = bytePtr1[1];\n  bytePtr1 = bytePtr1 + 1;\n  if (byte3 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  undefinedPtr1 = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    str1 = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(str1);\n    str1 = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(str1);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    uint4 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    print_error_00106400(uint4);\n    uint4 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    print_error_00106400(uint4);\n    return undefinedPtr1;\n  }\n  str1 = &optind;\n  if (_optind != numFiles) {\n    if (1 < numFiles - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int2 = *(int *)str1;\n      if (numFiles <= int2) break;\n      long2 = longPtr2[int2];\n      *(int *)str1 = int2 + 1;\n      char3 = check_file_and_process_001043d0(long2);\n      if (char3 != '\\0') {\n        int2 = *(int *)str1;\n        if (numFiles <= int2) break;\n        long2 = longPtr2[int2];\n        *(int *)str1 = int2 + 1;\n        char3 = check_file_and_process_001043d0(long2);\n        if (char3 != '\\0') {\n          int2 = *(int *)str1;\n          while( true ) {\n            if (numFiles <= int2) goto LAB_00105bdd;\n            long2 = longPtr2[int2];\n            *(int *)str1 = int2 + 1;\n            char3 = check_file_and_process_001043d0(long2);\n            if (char3 == '\\0') break;\n            int2 = *(int *)str1;\n          }\n        }\n      }\n      undefinedPtr1 = (undefined **)(ulong)((int)undefinedPtr1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)undefinedPtr1);\n  }\nLAB_0010613c:\n  uint1 = check_file_and_process_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint1 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "bfd_set_default_target",
                "xexit",
                "printf",
                "getopt_long",
                "exit",
                "memmove",
                "strlen",
                "cplus_demangle_set_style",
                "FUN_001043d0",
                "ferror",
                "bfd_set_error_program_name",
                "ftell",
                "FUN_00104370",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "setlocale",
                "dcgettext",
                "bindtextdomain",
                "textdomain",
                "bfd_plugin_set_plugin",
                "xrealloc",
                "FUN_00106400",
                "strcmp",
                "xmalloc_set_program_name",
                "FUN_00106300",
                "FUN_00103ca0",
                "bfd_plugin_set_program_name",
                "fseek",
                "stat",
                "memcpy",
                "xstrdup",
                "bfd_errmsg",
                "fprintf",
                "fread",
                "fclose",
                "free",
                "bfd_init",
                "fopen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_files_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00102fd2",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_message_if_zero_0010351b"
            },
            "code": "\nvoid printMessageIfZero_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_message_if_zero_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_data_not_zero_00103b2b",
                "param_1": "message",
                "param_2": "tag"
            },
            "code": "\nvoid print_if_data_not_zero_00103b2b(undefined8 message,undefined8 tag)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",message,tag);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_data_not_zero_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_string_00104740",
                "param_1": "formatString",
                "param_2": "argList",
                "param_3": "demangledString",
                "param_4": "demanglingType",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "stringSize",
                "pcVar6": "charPtr1",
                "puVar7": "ptr2",
                "pcVar8": "charPtr2",
                "__ptr": "reconstructedString",
                "uVar9": "ulongVar1",
                "uVar10": "ulongVar2",
                "puVar11": "ptr3",
                "puVar12": "ptr4",
                "__s": "charPtr3",
                "__s_00": "charPtr4",
                "lVar13": "longVar1",
                "uVar14": "uintVar1",
                "bVar15": "byte3",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedString_00104740(char *formatString,long *argList,undefined8 *demangledString,long demanglingType)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t stringSize;\n  char *charPtr1;\n  undefined8 *ptr2;\n  char *charPtr2;\n  undefined8 *reconstructedString;\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  undefined *ptr3;\n  undefined8 *ptr4;\n  char *charPtr3;\n  undefined8 *charPtr4;\n  long longVar1;\n  uint uintVar1;\n  byte byte3;\n  char stackArray [9];\n  \n  byte3 = 0;\n  if (demangledString == (undefined8 *)0x0) {\n    demangledString = *(undefined8 **)(*argList + 0x10);\n    if (DAT_0010b234 == 0) {\n      process_string_00102739();\n      return;\n    }\nLAB_00104775:\n    ptr4 = demangledString;\n    if (DAT_0010b814 == 0) {\n      charPtr1 = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        ptr4 = demangledString;\n        reconstructedString = (undefined8 *)0x0;\n      }\n      else {\n        reconstructedString = (undefined8 *)0x0;\n        if (demangledString != (undefined8 *)0x0) goto LAB_0010269d;\n        ptr4 = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      charPtr1 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)ptr4 == '\\0') ||\n         (demangledString = (undefined8 *)bfd_demangle(demanglingType,ptr4,DAT_0010b248),\n         demangledString == (undefined8 *)0x0)) {\n        demangledString = ptr4;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        reconstructedString = (undefined8 *)0x0;\n      }\n      else {\n        ptr4 = demangledString;\n        reconstructedString = demangledString;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    ptr4 = demangledString;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(demanglingType + 8) + 8) != 5) goto LAB_00104775;\n      charPtr1 = strchr((char *)demangledString,0x40);\n      if (charPtr1 == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (argList == (long *)0x0) {\n              reconstructedString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            else {\n              if (argList[2] != 0) {\n                print_formatted_string_001047d0();\n                return;\n              }\n              reconstructedString = (undefined8 *)0x0;\n              printf(formatString,demangledString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *charPtr1 = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          reconstructedString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    charPtr1 = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    ptr4 = demangledString;\n    reconstructedString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)demangledString;\n      demangledString = (undefined8 *)((long)demangledString + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    stringSize = strlen((char *)ptr4);\n    charPtr4 = DAT_0010b790;\n    if (_DAT_0010b798 < stringSize * 9) {\n      free(DAT_0010b790);\n      stringSize = strlen((char *)ptr4);\n      _DAT_0010b798 = stringSize * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      charPtr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)ptr4;\n      ptr1 = (undefined8 *)((long)ptr4 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)charPtr4 = byte1;\n          charPtr4 = (undefined8 *)((long)charPtr4 + 1);\n          ptr4 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr4 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = charPtr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar1 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar1 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                }\n                else {\n                  *(undefined *)(charPtr4 + 1) = 0;\n                  *charPtr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr4 + 1);\n                  ptr2 = charPtr4 + 1;\n                }\n              case 2:\n                uintVar1 = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr4 >> 2 & 7),\n                        (ulong)((*(byte *)ptr4 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar1 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr4 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar1 = 3;\nLAB_00102a62:\n                  for (ulongVar1 = (ulong)uintVar1; ulongVar1 != 0; ulongVar1 = ulongVar1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar1 = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)charPtr4,\"%c\",ulongVar2);\n                  *(undefined *)((long)charPtr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar1 + (long)ptr4);\n                  *(undefined2 *)((long)charPtr4 + 1) = 0x7830;\n                  charPtr2 = (char *)((long)charPtr4 + 3);\n                  do {\n                    charPtr3 = charPtr2;\n                    byte1 = *(byte *)ptr4;\n                    ptr4 = (undefined8 *)((long)ptr4 + 1);\n                    sprintf(charPtr3,\"%02x\",(ulong)byte1);\n                    charPtr2 = charPtr3 + 2;\n                  } while (ptr4 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar1 = (uint)longVar1;\n                  sprintf(charPtr3 + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(charPtr3 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                  }\n                  else {\n                    *(undefined *)(charPtr4 + 1) = 0;\n                    *charPtr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 2);\n                    ptr2 = charPtr4 + 1;\n                  }\n                case 2:\n                  uintVar1 = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr4 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar1 = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)ptr4 + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar1 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar1 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                  }\n                  else {\n                    *(undefined *)(charPtr4 + 1) = 0;\n                    *charPtr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr4 + 3);\n                    ptr2 = charPtr4 + 1;\n                  }\n                case 2:\n                  uintVar1 = 4;\n                  intVar = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr4 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr4 + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr4 + 2) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar1 = 4;\n                }\n              }\n            }\n            ulongVar1 = (ulong)(uint)((int)ptr2 - (int)charPtr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)charPtr4 = byte1;\n            uintVar1 = 1;\n            ulongVar1 = 1;\n          }\n          charPtr4 = (undefined8 *)((long)charPtr4 + ulongVar1);\n          ptr4 = (undefined8 *)((long)ptr1 + (ulong)(uintVar1 - 1));\n        }\n      }\n      else {\n        *(undefined *)charPtr4 = 0x5e;\n        *(byte *)((long)charPtr4 + 1) = byte1 + 0x40;\n        charPtr4 = (undefined8 *)((long)charPtr4 + 2);\n        ptr4 = ptr1;\n      }\n    }\n    *(undefined *)charPtr4 = 0;\n    ptr4 = ptr2;\n  }\njoined_r0x00104864:\n  if ((((argList != (long *)0x0) && (argList[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((charPtr2 = (char *)(**(code **)(*(long *)(demanglingType + 8) + 0x220))\n                                  (demanglingType,argList[2],0,stackArray), charPtr2 != (char *)0x0 &&\n      (*charPtr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(argList[2] + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    reconstructedString = (undefined8 *)reconcat(reconstructedString,ptr4,ptr3,charPtr2,0);\n    ptr4 = reconstructedString;\n  }\n  printf(formatString,ptr4);\n  if (charPtr1 != (char *)0x0) {\n    *charPtr1 = '@';\n  }\nLAB_001047ba:\n  free(reconstructedString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_00103b49",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "print_error_00106400",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorString",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "localVar",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "charArray",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCodeCopy",
                "local_78": "param2Copy",
                "local_68": "param3Copy",
                "local_58": "param4Copy",
                "local_48": "param5Copy",
                "local_38": "param6Copy",
                "local_28": "param7Copy",
                "local_18": "param8Copy"
            },
            "code": "\nvoid printError_00106400(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorString,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 localVar;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined charArray [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCodeCopy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (flag != '\\0') {\n    errorCodeCopy = errorCode;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  buffer = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = charArray;\n  localVar = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_001063a0(errorString,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_0010249f",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "firstArray",
                "param_2": "secondArray",
                "uVar1": "returnValue"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *firstArray,undefined8 *secondArray)\n\n{\n  ulong returnValue;\n  \n  if ((ulong)firstArray[1] < (ulong)secondArray[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)secondArray[1] < (ulong)firstArray[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  returnValue = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*firstArray,*secondArray);\n  return returnValue;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_symbol_info_0010651a"
            },
            "code": "\nvoid print_symbol_info_0010651a(void)\n\n{\n  print_symbol_info_0010651a_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbolInfoPtr",
                "param_2": "formatInfo",
                "iVar1": "symbolClass",
                "cVar2": "isUndefined",
                "uVar3": "width",
                "lVar4": "infoPtr"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbolInfoPtr,undefined8 formatInfo)\n\n{\n  int symbolClass;\n  char isUndefined;\n  undefined8 width;\n  long infoPtr;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfoPtr + 8));\n  symbolClass = DAT_0010b7a8;\n  if (isUndefined == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        width = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        print_and_exit_00106300(width,symbolClass);\n        goto LAB_00103623;\n      }\n      width = *(undefined8 *)*symbolInfoPtr;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbolInfoPtr[2] == 0) {\n          infoPtr = symbolInfoPtr[1];\n        }\n        else {\n          infoPtr = *(long *)(symbolInfoPtr[2] + 0x38);\n        }\n        print_symbol_info_001054d0(infoPtr);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_and_format_info_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      width = *(undefined8 *)*symbolInfoPtr;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,width);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_and_format_info_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolInfoPtr + 8));\n  if (*(char *)(*symbolInfoPtr + 8) != '-') {\n    print_formatted_string_00104740(&DAT_0010712c,symbolInfoPtr,0,formatInfo);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbolInfoPtr + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbolInfoPtr + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolInfoPtr + 0x20));\n  print_formatted_string_00104740(&DAT_0010712c,symbolInfoPtr,0,formatInfo);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "FUN_001035a2",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "format_and_print_symbol_info_001064b0",
                "param_1": "symbolPointer",
                "cVar1": "isUndefinedSymclass",
                "print_formatted_string_00104740": "printFormattedString",
                "bfd_is_undefined_symclass": "isUndefinedSymbolClass",
                "printf": "printWithFormat",
                "print_symbol_info_001054d0": "printSymbolInfo",
                "putchar": "printCharacter",
                "print_symbol_info_0010651a": "printSymbolInfoInCase2"
            },
            "code": "\nvoid formatAndPrintSymbolInfo_001064b0(long *symbolPointer,undefined8 param_2)\n\n{\n  char isUndefinedSymclass;\n  \n  printFormattedString(&DAT_00107363,symbolPointer,0,param_2);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolPointer + 8));\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbolPointer + 8));\n  if (isUndefinedSymclass != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  printSymbolInfo(*(undefined8 *)*symbolPointer);\n  putchar(0x20);\n  if (symbolPointer[2] == 0) {\n    if (symbolPointer[1] != 0) {\n      printSymbolInfoInCase2();\n      return;\n    }\n  }\n  else if (*(long *)(symbolPointer[2] + 0x38) != 0) {\n    printSymbolInfo();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "format_and_print_symbol_info_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103573",
                "FUN_00103729",
                "FUN_00102670",
                "FUN_001035a2",
                "FUN_00103abf",
                "FUN_00102f19",
                "FUN_001055f0",
                "FUN_001047d0",
                "FUN_00105110",
                "FUN_001043d0",
                "FUN_00103463",
                "FUN_00103b2b",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010351b",
                "FUN_001054d0",
                "FUN_00102f7b",
                "FUN_001062d0",
                "FUN_00102739",
                "FUN_001036e0",
                "FUN_001036a7"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_formatted_string_00103b49",
                "param_1": "message",
                "param_2": "value"
            },
            "code": "\nvoid printFormattedString_00103b49(undefined8 message,undefined8 value)\n\n{\n  print_formatted_string_00104740(&DAT_0010712d,message,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_formatted_string_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_undefined_symbols_00103abf",
                "param_1": "filename",
                "param_2": "symbol",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printUndefinedSymbols_00103abf(undefined8 filename,undefined8 symbol)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,filename,symbol);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_undefined_symbols_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "compare_and_return_result_00103bf6",
                "iVar1": "comparison_result",
                "in_RAX": "input_value",
                "auVar2": "output_array"
            },
            "code": "\nundefined  [16] compare_and_return_result_00103bf6(void)\n\n{\n  int comparison_result;\n  undefined8 input_value;\n  undefined output_array [16];\n  \n  comparison_result = compare_strings_00104fa0();\n  output_array._0_4_ = -comparison_result;\n  output_array._4_4_ = 0;\n  output_array._8_8_ = input_value;\n  return output_array;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_result_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "pcVar2": "message",
                "__ptr": "targetList",
                "unaff_RBX": "outputFile",
                "plVar3": "currentTarget",
                "in_stack_00000008": "exitCode",
                "lVar1": "currentValue"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long currentValue;\n  char *message;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int exitCode;\n  \n  message = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,message);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "pcVar1": "pcVar",
                "pcVar2": "functionPtr",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "uint64Var",
                "lVar7": "longVar",
                "puVar8": "ptrVar1",
                "lVar9": "longVar2",
                "puVar10": "ptrVar2",
                "unaff_RBX": "rbx",
                "__ptr": "ptrVar3",
                "unaff_RBP": "rbp",
                "puVar11": "ptrVar4",
                "puVar12": "ptrVar5",
                "puVar13": "ptrVar6",
                "in_R8": "r8",
                "puVar14": "ptrVar7",
                "in_R9": "r9",
                "puVar15": "ptrVar8",
                "unaff_R12": "r12",
                "unaff_R13": "r13",
                "unaff_R14": "r14",
                "unaff_R15": "r15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "retAddr",
                "uVar18": "uint64Var2",
                "in_stack_00000008": "param1",
                "in_stack_00000010": "param2",
                "in_stack_00000018": "param3",
                "in_stack_00000038": "param4",
                "in_stack_00000040": "param5",
                "in_stack_00000048": "param6"
            },
            "code": "\n\n\nvoid processLTOObject_00102c19(void)\n\n{\n  char *pcVar;\n  code *functionPtr;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 uint64Var;\n  long longVar;\n  undefined8 *ptrVar1;\n  long longVar2;\n  undefined8 *ptrVar2;\n  undefined8 *rbx;\n  undefined8 *ptrVar3;\n  undefined8 *rbp;\n  undefined8 *ptrVar4;\n  undefined8 *ptrVar5;\n  undefined8 *r8;\n  undefined8 *ptrVar6;\n  undefined8 *r9;\n  undefined8 *ptrVar7;\n  undefined8 *r12;\n  undefined8 *ptrVar8;\n  undefined8 *r13;\n  undefined8 *r14;\n  undefined8 *r15;\n  bool boolVar;\n  byte byteVar;\n  ulong retAddr;\n  ulong uint64Var2;\n  undefined8 param1;\n  undefined8 *param2;\n  undefined8 *param3;\n  undefined8 param4;\n  void *param5;\n  undefined8 *param6;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (rbx != r13) {\n      if (r14 == (undefined8 *)0x8) {\n        *rbx = *r13;\n        FUN_001049c0();\n        return;\n      }\n      for (; r14 != (undefined8 *)0x0; r14 = (undefined8 *)((long)r14 + -1)) {\n        *(undefined *)rbx = *(undefined *)r13;\n        r13 = (undefined8 *)((long)r13 + (ulong)byteVar * -2 + 1);\n        rbx = (undefined8 *)((long)rbx + (ulong)byteVar * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    rbx = (undefined8 *)((long)rbx + (long)r14);\nLAB_001049c3:\n    do {\n      do {\n        r13 = (undefined8 *)((long)r13 + (long)r14);\n        ptrVar8 = r12;\n        ptrVar5 = rbp;\n        if (r12 <= r13) goto LAB_00104b15;\nLAB_001049cf:\n        ptrVar1 = (undefined8 *)\n                 (**(code **)(rbp[1] + 0x270))\n                           (rbp,retAddr & 0xffffffff,r13,r15);\n        ptrVar4 = rbp;\n        ptrVar5 = r13;\n        ptrVar8 = r15;\n        if (ptrVar1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pcVar = (char *)ptrVar1[1];\n        if (((pcVar == (char *)0x0) || (*pcVar != '_')) || (pcVar[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(ptrVar1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          r13 = (undefined8 *)((long)r13 + (long)r14);\n          ptrVar8 = r12;\n          ptrVar5 = rbp;\n          if (r12 <= r13) {\nLAB_00104b15:\n            rbx = (undefined8 *)((long)rbx - (long)param3);\n            if (r14 == (undefined8 *)0x8) {\n              longVar2 = ptrVar5[1];\n              ptrVar4 = (undefined8 *)((long)rbx + 7);\n              if (-1 < (long)rbx) {\n                ptrVar4 = rbx;\n              }\n              r8 = (undefined8 *)(ulong)DAT_0010b800;\n              functionPtr = *(code **)(longVar2 + 0x208);\n              ptrVar4 = (undefined8 *)((long)ptrVar4 >> 3);\n            }\n            else {\n              ptrVar4 = (undefined8 *)((long)rbx / (long)r14);\n              longVar2 = ptrVar5[1];\n              functionPtr = *(code **)(longVar2 + 0x208);\n            }\n            rbp = ptrVar5;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptrVar5;\n              DAT_0010b770 = (undefined8 *)(*functionPtr)(ptrVar5);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptrVar5[1] + 0x208))(ptrVar5);\n              rbx = param6;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*ptrVar5);\n                ptrVar3 = r15;\n                goto LAB_00102d8e;\n              }\n              r12 = (undefined8 *)(ulong)param4._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                uint64Var2 = (ulong)(DAT_0010b80c != 0);\n                qsort(param6,(size_t)ptrVar4,(size_t)r12,check_binary_compatibility_00102fd2);\n                ptrVar8 = (undefined8 *)xmalloc((long)ptrVar4 << 4);\n                ptrVar6 = DAT_0010b770;\n                rbp = DAT_0010b768;\n                r14 = (undefined8 *)((long)ptrVar4 * (long)r12 + (long)rbx);\n                ptrVar1 = DAT_0010b770;\n                r9 = DAT_0010b768;\n                if (r14 <= rbx) goto LAB_00102ec2;\n                ptrVar4 = (undefined8 *)\n                          (**(code **)(ptrVar5[1] + 0x270))(ptrVar5,uint64Var2 & 0xffffffff,rbx);\n                ptrVar3 = rbx;\n                r8 = r12;\n                param2 = ptrVar8;\n                if (ptrVar4 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(param6,(size_t)ptrVar4,(size_t)r12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar2 = ptrVar5[1];\n            }\n            ptrVar3 = (undefined8 *)0x0;\n            do {\n              ptrVar5 = param6;\n              ptrVar1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              r14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                ptrVar8 = (undefined8 *)(**(code **)(longVar2 + 0x208))(rbp);\n                if (ptrVar8 == (undefined8 *)0x0) goto LAB_00102ed2;\n                rbx = ptrVar3 + (long)ptrVar4 * 2;\n                ptrVar4 = ptrVar3;\n                do {\n                  if (rbx <= ptrVar4) {\nLAB_00104c75:\n                    if (param5 == (void *)0x0) {\n                      free(param6);\n                      free(ptrVar3);\n                      return;\n                    }\n                    free(param5);\n                    free(param6);\n                    free(ptrVar3);\n                    return;\n                  }\n                  ptrVar1 = ptrVar8;\n                  longVar2 = (**(code **)(rbp[1] + 0x270))(rbp,r14,*ptrVar4);\n                  if (longVar2 == 0) {\n                    print_error_message_00106530(*rbp,0);\nLAB_00102ed2:\n                    ptrVar5 = (undefined8 *)*rbp;\n                    print_error_message_00106530();\n                    ptrVar6 = r8;\n                    ptrVar7 = r9;\n                    goto LAB_00102edb;\n                  }\n                  ptrVar5 = ptrVar4 + 1;\n                  ptrVar4 = ptrVar4 + 2;\n                  print_relocated_sections_00105110(rbp,longVar2,*ptrVar5,param1);\n                } while( true );\n              }\n              r12 = (undefined8 *)(ulong)param4._4_4_;\n              r15 = (undefined8 *)(**(code **)(longVar2 + 0x208))(rbp);\n              if (r15 == (undefined8 *)0x0) {\n                print_error_message_00106530(*rbp);\n                ptrVar5 = r12;\n                if (DAT_0010b80c == 0) {\n                  longVar2 = (**(code **)(rbp[1] + 0x350))(rbp);\n                  ptrVar4 = param6;\n                  ptrVar8 = r12;\n                  if (longVar2 < 1) {\n                    ptrVar1 = (undefined8 *)0x0;\n                    rbx = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    rbx = (undefined8 *)xmalloc();\n                    ptrVar1 = (undefined8 *)(**(code **)(rbp[1] + 0x358))(rbp,rbx);\n                    ptrVar5 = ptrVar8;\n                    if ((long)ptrVar1 < 0) {\n                      ptrVar5 = (undefined8 *)*rbp;\n                      ptrVar4 = (undefined8 *)print_error_message_00106530(ptrVar5,ptrVar8);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptrVar1 = r12;\n                  rbx = param6;\n                  ptrVar4 = (undefined8 *)0x0;\n                  ptrVar8 = (undefined8 *)0x0;\n                }\n                r9 = &stack0x00000040;\n                r8 = rbx;\n                longVar2 = (**(code **)(rbp[1] + 0x360))(rbp,ptrVar8,ptrVar4,ptrVar1);\n                r12 = ptrVar5;\n                if (0 < longVar2) {\n                  r12 = (undefined8 *)((long)ptrVar5 + longVar2);\n                  param6 = (undefined8 *)xrealloc(param6);\n                  longVar = 0;\n                  do {\n                    param6[(long)((long)ptrVar5 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)param5);\n                    longVar = longVar + 1;\n                  } while (longVar2 != longVar);\n                  param6[(long)((long)ptrVar5 + longVar2)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (rbx != (undefined8 *)0x0)) {\n                  free(rbx);\n                }\n                if ((*(byte *)((long)rbp + 0x4a) & 0x10) != 0) {\n                  rbx = (undefined8 *)*rbp;\n                  DAT_0010b230 = '\\0';\n                  uint64Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_00106400(uint64Var);\n                }\n                r14 = (undefined8 *)(ulong)param4._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                ptrVar4 = (undefined8 *)(ulong)boolVar;\n                ptrVar1 = param6;\n                param3 = param6;\n                r15 = (undefined8 *)(**(code **)(rbp[1] + 0x208))(rbp);\n                if (r15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptrVar4 = (undefined8 *)((long)ptrVar4 * (long)r12 + (long)ptrVar5);\n                rbx = ptrVar5;\n                while( true ) {\n                  if (ptrVar4 <= rbx) goto LAB_00104c75;\n                  ptrVar1 = r15;\n                  longVar2 = (**(code **)(rbp[1] + 0x270))(rbp,r14,rbx);\n                  if (longVar2 == 0) break;\n                  rbx = (undefined8 *)((long)rbx + (long)r12);\n                  print_relocated_sections_00105110(rbp,longVar2,0,param1);\n                }\n                print_error_message_00106530(*rbp,0);\n              }\n              print_error_message_00106530(*rbp);\n              ptrVar5 = rbp;\n              ptrVar8 = r15;\nLAB_00102eb0:\n              print_error_message_00106530(*ptrVar4);\nLAB_00102eb9:\n              print_error_message_00106530(*ptrVar5);\nLAB_00102ec2:\n              ptrVar4 = (undefined8 *)0x0;\n              ptrVar3 = rbx;\n              r8 = r12;\n              ptrVar6 = ptrVar1;\n              rbp = r9;\n              param2 = ptrVar8;\nLAB_00104e35:\n              while (r9 = ptrVar6, ptrVar3 < r14) {\n                rbx = (undefined8 *)((long)ptrVar3 + (long)r8);\n                if (rbx < r14) {\n                  ptrVar1 = rbp;\n                  ptrVar6 = r8;\n                  ptrVar7 = r9;\n                  ptrVar2 = (undefined8 *)(**(code **)(ptrVar5[1] + 0x270))();\n                  if (ptrVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    r9 = ptrVar7;\n                    r8 = ptrVar6;\n                    ptrVar5 = (undefined8 *)*ptrVar5;\n                    ptrVar2 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    ptrVar1 = (undefined8 *)ptrVar4[4];\n                    if ((*(uint *)(ptrVar4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = ptrVar4[2];\nLAB_00102ee7:\n                  if (ptrVar1 == (undefined8 *)ptrVar2[4]) {\n                    longVar2 = ptrVar2[2] - longVar2;\n                    ptrVar6 = rbp;\n                    ptrVar7 = ptrVar3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = ptrVar1[8] - longVar2;\n                  ptrVar6 = rbp;\n                  ptrVar7 = ptrVar3;\n                }\n                else {\n                  ptrVar1 = (undefined8 *)ptrVar4[4];\n                  if ((*(uint *)(ptrVar4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = ptrVar4[2];\n                    ptrVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptrVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptrVar6 = rbp;\n                  ptrVar7 = ptrVar3;\n                  if (*(int *)(ptrVar5[1] + 8) == 5) {\n                    longVar2 = ptrVar4[7];\n                  }\n                  else {\n                    longVar2 = ptrVar4[2];\n                    if ((*(byte *)((long)ptrVar1 + 0x25) & 0x10) == 0) {\n                      if (rbx < r14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptrVar4 = ptrVar2;\n                ptrVar3 = rbx;\n                rbp = r9;\n                if (longVar2 != 0) {\n                  *ptrVar8 = ptrVar7;\n                  ptrVar8[1] = longVar2;\n                  ptrVar8 = ptrVar8 + 2;\n                }\n              }\n              ptrVar4 = (undefined8 *)((long)ptrVar8 - (long)param2 >> 4);\n              qsort(param2,(size_t)ptrVar4,0x10,FUN_00103533);\n              longVar2 = ptrVar5[1];\n              rbx = ptrVar3;\n              rbp = ptrVar5;\n              ptrVar3 = param2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(pcVar + (pcVar[2] == '_'),\"__gnu_lto_slim\");\n        param2 = ptrVar1;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            param2 = (undefined8 *)*rbp;\n            DAT_0010b230 = '\\0';\n            uint64Var = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_00106400(uint64Var,param2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(ptrVar1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptrVar1 + 3) & 0x800082) == 0) && (ptrVar1[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_objects_00104d5b:\n          if ((ptrVar1[4] != 0x10c2a8) && (ptrVar1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptrVar1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_objects_00104d5b;\nLAB_00104a53:\n      r9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(rbp[1] + 0x230))(rbp);\n        if (charVar != '\\0') {\n          processLTOObject_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptrVar1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(rbp[1] + 0x230))(rbp);\n    if (charVar != '\\0') {\n      processLTOObject_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptrVar8 = (undefined8 *)((long)r12 * (long)r14);\n  r12 = (undefined8 *)((long)param3 + (long)ptrVar8);\n  rbx = param3;\n  ptrVar5 = rbp;\n  if (param3 < r12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  retAddr = (ulong)boolVar;\n  r13 = param3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "lVar3": "flag",
                "in_R10": "param",
                "fflush": "flushOutput",
                "fprintf": "printToStderr",
                "print_error_message_00106540": "printErrorHeader",
                "xexit": "exitProgram",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "dcgettext": "getLocalizedErrorMessage",
                "bfd_errmsg": "getErrorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  long flag;\n  undefined8 param;\n  \n  printErrorHeader();\n  flag = 1;\n  xexit();\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(standardOutput);\n  if (flag != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820,flag,errorMessage,param);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,param);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_00106540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103c00",
                "FUN_00102f9f",
                "FUN_00102fd2",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "isTerminal",
                "sVar5": "stringLength",
                "puVar6": "destPtr",
                "pcVar7": "tempPtr",
                "uVar8": "tempVar",
                "uVar9": "specialChar",
                "puVar10": "specialString",
                "puVar11": "srcPtr",
                "unaff_RBP": "stackFramePtr",
                "puVar12": "resultPtr",
                "unaff_R12": "flag",
                "unaff_R13": "encodedString",
                "lVar13": "tempVar2",
                "uVar14": "tempVar3",
                "unaff_R14": "formatString",
                "unaff_R15": "context",
                "bVar15": "tempByte",
                "__s": "tempStr",
                "in_stack_00000038": "tempValue"
            },
            "code": "\n\n\nvoid printEncodedString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byte1;\n  byte byte2;\n  int isTerminal;\n  size_t stringLength;\n  undefined8 *destPtr;\n  char *tempPtr;\n  ulong tempVar;\n  undefined8 specialChar;\n  undefined *specialString;\n  undefined8 *srcPtr;\n  long stackFramePtr;\n  undefined8 *resultPtr;\n  undefined *flag;\n  undefined8 *encodedString;\n  long tempVar2;\n  uint tempVar3;\n  char *formatString;\n  long context;\n  byte tempByte;\n  char *tempStr;\n  undefined8 tempValue;\n  \n  tempByte = 0;\n  resultPtr = encodedString;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byte1 = *(byte *)resultPtr;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (resultPtr = (undefined8 *)((long)resultPtr + 1), byte1 < 0xc0));\n    stringLength = strlen((char *)encodedString);\n    resultPtr = DAT_0010b790;\n    srcPtr = encodedString;\n    if (_DAT_0010b798 < stringLength * 9) {\n      free(DAT_0010b790);\n      stringLength = strlen((char *)encodedString);\n      _DAT_0010b798 = stringLength * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      resultPtr = DAT_0010b790;\n    }\n    while( true ) {\n      encodedString = DAT_0010b790;\n      byte1 = *(byte *)srcPtr;\n      ptr = (undefined8 *)((long)srcPtr + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)resultPtr = byte1;\n          resultPtr = (undefined8 *)((long)resultPtr + 1);\n          srcPtr = ptr;\n        }\n        else {\n          byte2 = *(byte *)((long)srcPtr + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            destPtr = resultPtr;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                tempVar3 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                tempVar2 = 2;\n                goto LAB_00102917;\n              case 4:\n                isTerminal = isatty(1);\n                if (isTerminal == 0) {\n                  byte2 = *(byte *)((long)srcPtr + 1);\n                }\n                else {\n                  *(undefined *)(resultPtr + 1) = 0;\n                  *resultPtr = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)srcPtr + 1);\n                  destPtr = resultPtr + 1;\n                }\n              case 2:\n                tempVar3 = 2;\n                sprintf((char *)destPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)srcPtr >> 2 & 7),\n                        (ulong)((*(byte *)srcPtr & 3) << 6 | byte2 & 0x3f));\n                destPtr = (undefined8 *)((long)destPtr + 6);\n                goto LAB_00102a27;\n              default:\n                tempVar3 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)srcPtr + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar3 = 3;\nLAB_00102a62:\n                  for (tempVar = (ulong)tempVar3; tempVar != 0; tempVar = tempVar - 1) {\n                    *(undefined *)destPtr = *(undefined *)srcPtr;\n                    srcPtr = (undefined8 *)((long)srcPtr + (ulong)tempByte * -2 + 1);\n                    destPtr = (undefined8 *)((long)destPtr + (ulong)tempByte * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  tempVar2 = 3;\nLAB_00102917:\n                  specialChar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    specialChar = 0x3c;\n                  }\n                  sprintf((char *)resultPtr,\"%c\",specialChar);\n                  *(undefined *)((long)resultPtr + 3) = 0;\n                  destPtr = (undefined8 *)(tempVar2 + (long)srcPtr);\n                  *(undefined2 *)((long)resultPtr + 1) = 0x7830;\n                  tempPtr = (char *)((long)resultPtr + 3);\n                  do {\n                    tempStr = tempPtr;\n                    byte1 = *(byte *)srcPtr;\n                    srcPtr = (undefined8 *)((long)srcPtr + 1);\n                    sprintf(tempStr,\"%02x\",(ulong)byte1);\n                    tempPtr = tempStr + 2;\n                  } while (srcPtr != destPtr);\n                  specialChar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    specialChar = 0x3e;\n                  }\n                  tempVar3 = (uint)tempVar2;\n                  sprintf(tempStr + 2,\"%c\",specialChar);\n                  destPtr = (undefined8 *)(tempStr + 3);\n                  break;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal == 0) {\n                    byte2 = *(byte *)((long)srcPtr + 2);\n                  }\n                  else {\n                    *(undefined *)(resultPtr + 1) = 0;\n                    *resultPtr = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)srcPtr + 2);\n                    destPtr = resultPtr + 1;\n                  }\n                case 2:\n                  tempVar3 = 3;\n                  sprintf((char *)destPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)srcPtr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)srcPtr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)srcPtr + 1) & 3) << 6 | byte2 & 0x3f));\n                  destPtr = (undefined8 *)((long)destPtr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (isTerminal = isatty(1), isTerminal != 0)) {\n                    *(undefined4 *)destPtr = 0x6d305b1b;\n                    destPtr = (undefined8 *)((long)destPtr + 4);\n                    *(undefined *)destPtr = 0;\n                  }\n                  break;\n                default:\n                  tempVar3 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)srcPtr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  tempVar3 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  tempVar2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTerminal = isatty(1);\n                  if (isTerminal != 0) {\n                    *(undefined *)(resultPtr + 1) = 0;\n                    *resultPtr = 0x6d37343b31335b1b;\n                    destPtr = resultPtr + 1;\n                  }\n                case 2:\n                  tempVar3 = 4;\n                  isTerminal = sprintf((char *)destPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)srcPtr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)srcPtr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)srcPtr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)srcPtr + 2) >> 2 & 0xfU));\n                  destPtr = (undefined8 *)((long)destPtr + (long)isTerminal);\n                  goto LAB_00102a27;\n                default:\n                  tempVar3 = 4;\n                }\n              }\n            }\n            tempVar = (ulong)(uint)((int)destPtr - (int)resultPtr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)resultPtr = byte1;\n            tempVar3 = 1;\n            tempVar = 1;\n          }\n          resultPtr = (undefined8 *)((long)resultPtr + tempVar);\n          srcPtr = (undefined8 *)((long)ptr + (ulong)(tempVar3 - 1));\n        }\n      }\n      else {\n        *(undefined *)resultPtr = 0x5e;\n        *(byte *)((long)resultPtr + 1) = byte1 + 0x40;\n        resultPtr = (undefined8 *)((long)resultPtr + 2);\n        srcPtr = ptr;\n      }\n    }\n    *(undefined *)resultPtr = 0;\n  }\nLAB_0010485e:\n  resultPtr = (undefined8 *)0x0;\n  if ((((stackFramePtr != 0) && (*(long *)(stackFramePtr + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((tempPtr = (char *)(**(code **)(*(long *)(context + 8) + 0x220))\n                                  (context,*(long *)(stackFramePtr + 0x10),0,\n                                   (long)&stack0x00000038 + 7), tempPtr != (char *)0x0 &&\n      (*tempPtr != '\\0')))) {\n    specialString = &DAT_001071e0;\n    if ((tempValue._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(stackFramePtr + 0x10) + 0x20) != 0x10c2a8)) {\n      specialString = &DAT_001071df;\n    }\n    resultPtr = (undefined8 *)reconcat(0,encodedString,specialString,tempPtr,0);\n    encodedString = resultPtr;\n  }\n  printf(formatString,encodedString);\n  if (flag != (undefined *)0x0) {\n    *flag = 0x40;\n  }\n  free(resultPtr);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "isatty",
                "strlen",
                "free",
                "FUN_001047d0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_encoded_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "compare_and_return_value_00103bec",
                "in_RAX": "returnValue",
                "iVar1": "versionComparisonResult",
                "auVar2": "returnArray"
            },
            "code": "\nundefined  [16] compareAndReturnValue_00103bec(void)\n\n{\n  int versionComparisonResult;\n  undefined8 returnValue;\n  undefined returnArray [16];\n  \n  versionComparisonResult = compare_versions_00105050();\n  returnArray._0_4_ = -versionComparisonResult;\n  returnArray._4_4_ = 0;\n  returnArray._8_8_ = returnValue;\n  return returnArray;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_value_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "errorMessage",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *errorMessage,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010b820);\n  vfprintf(standardError,errorMessage,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "process_string_00102739",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "pcVar6": "strPtr",
                "puVar7": "ptr2",
                "pcVar8": "strPtr2",
                "__ptr": "resultPtr",
                "uVar9": "ulongVar",
                "uVar10": "ulongVar2",
                "puVar11": "ptr3",
                "unaff_RBP": "unaffRBP",
                "puVar12": "ptr4",
                "unaff_R13": "unaffR13",
                "lVar13": "ulongVar3",
                "uVar14": "uintVar",
                "unaff_R14": "unaffR14",
                "unaff_R15": "unaffR15",
                "bVar15": "byteVar",
                "__s": "strPtr3",
                "in_stack_00000038": "inStack"
            },
            "code": "\n\n\nvoid processString_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  char *strPtr;\n  undefined8 *ptr2;\n  char *strPtr2;\n  undefined8 *resultPtr;\n  ulong ulongVar;\n  undefined8 ulongVar2;\n  undefined *ptr3;\n  long unaffRBP;\n  undefined8 *ptr4;\n  undefined8 *unaffR13;\n  long ulongVar3;\n  uint uintVar;\n  char *unaffR14;\n  long unaffR15;\n  byte byteVar;\n  char *strPtr3;\n  undefined8 inStack;\n  \n  byteVar = 0;\n  ptr4 = unaffR13;\n  if (*(int *)(*(long *)(unaffR15 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      strPtr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    strPtr = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      resultPtr = (undefined8 *)0x0;\n    }\n    else {\n      resultPtr = (undefined8 *)0x0;\n      if (unaffR13 != (undefined8 *)0x0) goto LAB_0010269d;\n      resultPtr = (undefined8 *)0x0;\n      unaffR13 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  strPtr = strchr((char *)unaffR13,0x40);\n  if (strPtr == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (unaffRBP == 0) {\n        resultPtr = (undefined8 *)0x0;\n        printf(unaffR14);\n      }\n      else {\n        if (*(long *)(unaffRBP + 0x10) != 0) {\n          print_formatted_string_001047d0();\n          return;\n        }\n        resultPtr = (undefined8 *)0x0;\n        printf(unaffR14);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr4 = unaffR13;\n    resultPtr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr4;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr4 = (undefined8 *)((long)ptr4 + 1), byte1 < 0xc0));\n    size = strlen((char *)unaffR13);\n    ptr4 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)unaffR13);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      ptr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)unaffR13;\n      ptr1 = (undefined8 *)((long)unaffR13 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)ptr4 = byte1;\n          ptr4 = (undefined8 *)((long)ptr4 + 1);\n          unaffR13 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)unaffR13 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                ulongVar3 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)unaffR13 + 1);\n                }\n                else {\n                  *(undefined *)(ptr4 + 1) = 0;\n                  *ptr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)unaffR13 + 1);\n                  ptr2 = ptr4 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unaffR13 >> 2 & 7)\n                        ,(ulong)((*(byte *)unaffR13 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)unaffR13 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)ptr2 = *(undefined *)unaffR13;\n                    unaffR13 = (undefined8 *)((long)unaffR13 + (ulong)byteVar * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  ulongVar3 = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)ptr4,\"%c\",ulongVar2);\n                  *(undefined *)((long)ptr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(ulongVar3 + (long)unaffR13);\n                  *(undefined2 *)((long)ptr4 + 1) = 0x7830;\n                  strPtr2 = (char *)((long)ptr4 + 3);\n                  do {\n                    strPtr3 = strPtr2;\n                    byte1 = *(byte *)unaffR13;\n                    unaffR13 = (undefined8 *)((long)unaffR13 + 1);\n                    sprintf(strPtr3,\"%02x\",(ulong)byte1);\n                    strPtr2 = strPtr3 + 2;\n                  } while (unaffR13 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)ulongVar3;\n                  sprintf(strPtr3 + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(strPtr3 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)unaffR13 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)unaffR13 + 2);\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unaffR13 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unaffR13 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unaffR13 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unaffR13 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  ulongVar3 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unaffR13 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffR13 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unaffR13 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffR13 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)ptr2 - (int)ptr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr4 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          ptr4 = (undefined8 *)((long)ptr4 + ulongVar);\n          unaffR13 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr4 = 0x5e;\n        *(byte *)((long)ptr4 + 1) = byte1 + 0x40;\n        ptr4 = (undefined8 *)((long)ptr4 + 2);\n        unaffR13 = ptr1;\n      }\n    }\n    *(undefined *)ptr4 = 0;\n    unaffR13 = ptr2;\n  }\n  else {\n    *strPtr = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      resultPtr = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unaffR13 == '\\0') ||\n       (ptr4 = (undefined8 *)bfd_demangle(), ptr4 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      resultPtr = (undefined8 *)0x0;\n    }\n    else {\n      unaffR13 = ptr4;\n      resultPtr = ptr4;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((unaffRBP != 0) && (*(long *)(unaffRBP + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((strPtr2 = (char *)(**(code **)(*(long *)(unaffR15 + 8) + 0x220))\n                                  (unaffR15,*(long *)(unaffRBP + 0x10),0,\n                                   (long)&stack0x00000038 + 7), strPtr2 != (char *)0x0 &&\n      (*strPtr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((inStack._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaffRBP + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    resultPtr = (undefined8 *)reconcat(resultPtr,unaffR13,ptr3,strPtr2,0);\n    unaffR13 = resultPtr;\n  }\n  printf(unaffR14,unaffR13);\n  if (strPtr != (char *)0x0) {\n    *strPtr = '@';\n  }\nLAB_001047ba:\n  free(resultPtr);\n  return;\n}\n\n",
            "called": [
                "printf",
                "bfd_demangle",
                "strchr",
                "FUN_001047d0",
                "FUN_0010268b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "process_string_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_versions_00105050",
                "param_1": "version1",
                "param_2": "version2",
                "__s": "str1",
                "__s_00": "str2",
                "lVar3": "size1",
                "uVar2": "len2",
                "sVar5": "str1Len",
                "sVar6": "str2Len",
                "pcVar7": "str1Ptr",
                "pcVar8": "str2Ptr",
                "lVar9": "result1",
                "lVar10": "size2",
                "uVar11": "returnValue",
                "uVar12": "combinedSize1",
                "uVar13": "combinedSize2",
                "uVar14": "combinedSize3",
                "uVar15": "funPtr",
                "unaff_R13": "funPtr2",
                "bVar16": "comparisonFlag",
                "uVar4": "mask"
            },
            "code": "\nulong compareVersions_00105050(undefined8 version1,undefined8 version2)\n\n{\n  char cVar1;\n  ulong len2;\n  char *str1;\n  char *str2;\n  long size1;\n  uint mask;\n  size_t str1Len;\n  size_t str2Len;\n  char *str1Ptr;\n  char *str2Ptr;\n  long result1;\n  long size2;\n  ulong returnValue;\n  ulong combinedSize1;\n  ulong combinedSize2;\n  ulong combinedSize3;\n  undefined8 funPtr;\n  long funPtr2;\n  bool comparisonFlag;\n  \n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,version1,DAT_0010b770);\n  returnValue = (ulong)DAT_0010b778;\n  size2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,returnValue,version2,DAT_0010b768);\n  if ((result1 != 0) && (size2 != 0)) {\n    size1 = *(long *)(size2 + 0x20);\n    if (*(long *)(result1 + 0x20) == 0x10c2a8) {\n      returnValue = 0xffffffff;\n      if (size1 == 0x10c2a8) {\nLAB_001050fa:\n        returnValue = compare_strings_00104fa0(version1,version2);\n        return returnValue;\n      }\n    }\n    else if (size1 == 0x10c2a8) {\n      returnValue = 1;\n    }\n    else {\n      combinedSize2 = *(long *)(result1 + 0x10) + *(long *)(*(long *)(result1 + 0x20) + 0x30);\n      returnValue = *(long *)(size2 + 0x10) + *(long *)(size1 + 0x30);\n      if (combinedSize2 == returnValue) goto LAB_001050fa;\n      returnValue = (ulong)(-(uint)(combinedSize2 < returnValue) | 1);\n    }\n    return returnValue;\n  }\n  funPtr = *DAT_0010b780;\n  print_error_message_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,funPtr,DAT_0010b770);\n  size2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,returnValue,DAT_0010b768);\n  if ((result1 == 0) || (funPtr2 = size2, size2 == 0)) {\n    size2 = print_error_message_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(size2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  combinedSize2 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  len2 = *(ulong *)(*(long *)(size2 + 0x20) + 0x30);\n  combinedSize3 = *(long *)(result1 + 0x10) + combinedSize2;\n  combinedSize1 = *(long *)(funPtr2 + 0x10) + len2;\n  comparisonFlag = combinedSize3 < combinedSize1;\n  if ((combinedSize3 != combinedSize1) || (comparisonFlag = combinedSize2 < len2, combinedSize2 != len2)) {\n    return (ulong)(-(uint)comparisonFlag | 1);\n  }\n  str1 = *(char **)(result1 + 8);\n  str2 = *(char **)(funPtr2 + 8);\n  str1Len = strlen(str1);\n  str2Len = strlen(str2);\n  str1Ptr = strstr(str1,\"gnu_compiled\");\n  if (str1Ptr == (char *)0x0) {\n    str2Ptr = strstr(str1,\"gcc2_compiled\");\n    str1Ptr = strstr(str2,\"gnu_compiled\");\n    if ((str1Ptr == (char *)0x0) && (str1Ptr = strstr(str2,\"gcc2_compiled\"), str1Ptr == (char *)0x0))\n    goto joined_r0x00103157;\n    if (str2Ptr == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    str1Ptr = strstr(str2,\"gnu_compiled\");\n    if (str1Ptr == (char *)0x0) {\n      str2Ptr = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (str2Ptr != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  mask = *(uint *)(funPtr2 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((str1Len < 3) || (str1[str1Len - 2] != '.')) {\n      if (mask != 0) {\n        return 1;\n      }\n      if ((str2Len < 3) || (str2[str2Len - 2] != '.')) goto LAB_00103202;\n      comparisonFlag = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = str1[str1Len - 1];\n    comparisonFlag = cVar1 == 'o' || cVar1 == 'a';\n    if (mask == 0) {\n      if ((str2Len < 3) || (str2[str2Len - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (mask != 0) goto LAB_00103202;\n    if (str2Len < 3) {\n      return 0xffffffff;\n    }\n    if (str2[str2Len - 2] != '.') {\n      return 0xffffffff;\n    }\n    comparisonFlag = true;\nLAB_001031e7:\n    if ((str2[str2Len - 1] != 'o') && (str2[str2Len - 1] != 'a')) {\n      if (comparisonFlag) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!comparisonFlag) {\n    return 1;\n  }\nLAB_00103202:\n  returnValue = compare_strings_00104fa0(funPtr,returnValue);\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "compare_versions_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "decode_and_process_data_001049c0",
                "unaff_RBX": "temp1",
                "unaff_RBP": "temp2",
                "unaff_R12": "temp3",
                "unaff_R13": "temp4",
                "unaff_R14": "temp5",
                "unaff_R15": "temp6",
                "unaff_retaddr": "temp7",
                "uVar18": "temp8"
            },
            "code": "\nvoid decode_and_process_data_001049c0(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  long lVar7;\n  undefined8 *puVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *temp1;\n  undefined8 *__ptr;\n  undefined8 *temp2;\n  undefined8 *puVar11;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *temp3;\n  undefined8 *temp4;\n  undefined8 *temp5;\n  undefined8 *temp6;\n  bool bVar16;\n  byte bVar17;\n  ulong temp7;\n  ulong temp8;\n  undefined8 in_stack_00000008;\n  undefined8 *in_stack_00000010;\n  undefined8 *in_stack_00000018;\n  undefined8 in_stack_00000038;\n  void *in_stack_00000040;\n  undefined8 *in_stack_00000048;\n  \n  bVar17 = 0;\n  do {\n    temp1 = (undefined8 *)((long)temp1 + (long)temp5);\nLAB_001049c3:\n    do {\n      do {\n        temp4 = (undefined8 *)((long)temp4 + (long)temp5);\n        puVar15 = temp3;\n        puVar12 = temp2;\n        if (temp3 <= temp4) goto LAB_00104b15;\nLAB_001049cf:\n        puVar8 = (undefined8 *)\n                 (**(code **)(temp2[1] + 0x270))\n                           (temp2,temp7 & 0xffffffff,temp4,temp6);\n        puVar11 = temp2;\n        puVar12 = temp4;\n        puVar15 = temp6;\n        if (puVar8 == (undefined8 *)0x0) goto LAB_00102eb0;\n        pcVar1 = (char *)puVar8[1];\n        if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uVar5 = (uint)(puVar8[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uVar5 != 0) goto LAB_00104a2d;\n          temp4 = (undefined8 *)((long)temp4 + (long)temp5);\n          puVar15 = temp3;\n          puVar12 = temp2;\n          if (temp3 <= temp4) {\nLAB_00104b15:\n            temp1 = (undefined8 *)((long)temp1 - (long)in_stack_00000018);\n            if (temp5 == (undefined8 *)0x8) {\n              lVar9 = puVar12[1];\n              puVar11 = (undefined8 *)((long)temp1 + 7);\n              if (-1 < (long)temp1) {\n                puVar11 = temp1;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              pcVar2 = *(code **)(lVar9 + 0x208);\n              puVar11 = (undefined8 *)((long)puVar11 >> 3);\n            }\n            else {\n              puVar11 = (undefined8 *)((long)temp1 / (long)temp5);\n              lVar9 = puVar12[1];\n              pcVar2 = *(code **)(lVar9 + 0x208);\n            }\n            temp2 = puVar12;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = puVar12;\n              DAT_0010b770 = (undefined8 *)(*pcVar2)(puVar12);\n              DAT_0010b768 = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n              temp1 = in_stack_00000048;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_message_00106530(*puVar12);\n                __ptr = temp6;\n                goto LAB_00102d8e;\n              }\n              temp3 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                temp8 = (ulong)(DAT_0010b80c != 0);\n                qsort(in_stack_00000048,(size_t)puVar11,(size_t)temp3,check_binary_compatibility_00102fd2);\n                puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n                puVar13 = DAT_0010b770;\n                temp2 = DAT_0010b768;\n                temp5 = (undefined8 *)((long)puVar11 * (long)temp3 + (long)temp1);\n                puVar8 = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (temp5 <= temp1) goto LAB_00102ec2;\n                puVar11 = (undefined8 *)\n                          (**(code **)(puVar12[1] + 0x270))(puVar12,temp8 & 0xffffffff,temp1);\n                __ptr = temp1;\n                in_R8 = temp3;\n                in_stack_00000010 = puVar15;\n                if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(in_stack_00000048,(size_t)puVar11,(size_t)temp3,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              lVar9 = puVar12[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              puVar12 = in_stack_00000048;\n              puVar8 = (undefined8 *)(ulong)DAT_0010b7f8;\n              temp5 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                puVar15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(temp2);\n                if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n                temp1 = __ptr + (long)puVar11 * 2;\n                puVar11 = __ptr;\n                do {\n                  if (temp1 <= puVar11) {\nLAB_00104c75:\n                    if (in_stack_00000040 == (void *)0x0) {\n                      free(in_stack_00000048);\n                      free(__ptr);\n                      return;\n                    }\n                    free(in_stack_00000040);\n                    free(in_stack_00000048);\n                    free(__ptr);\n                    return;\n                  }\n                  puVar8 = puVar15;\n                  lVar9 = (**(code **)(temp2[1] + 0x270))(temp2,temp5,*puVar11);\n                  if (lVar9 == 0) {\n                    print_error_message_00106530(*temp2,0);\nLAB_00102ed2:\n                    puVar12 = (undefined8 *)*temp2;\n                    print_error_message_00106530();\n                    puVar13 = in_R8;\n                    puVar14 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  puVar12 = puVar11 + 1;\n                  puVar11 = puVar11 + 2;\n                  print_relocated_sections_00105110(temp2,lVar9,*puVar12,in_stack_00000008);\n                } while( true );\n              }\n              temp3 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              temp6 = (undefined8 *)(**(code **)(lVar9 + 0x208))(temp2);\n              if (temp6 == (undefined8 *)0x0) {\n                print_error_message_00106530(*temp2);\n                puVar12 = temp3;\n                if (DAT_0010b80c == 0) {\n                  lVar9 = (**(code **)(temp2[1] + 0x350))(temp2);\n                  puVar11 = in_stack_00000048;\n                  puVar15 = temp3;\n                  if (lVar9 < 1) {\n                    puVar8 = (undefined8 *)0x0;\n                    temp1 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    temp1 = (undefined8 *)xmalloc();\n                    puVar8 = (undefined8 *)(**(code **)(temp2[1] + 0x358))(temp2,temp1);\n                    puVar12 = puVar15;\n                    if ((long)puVar8 < 0) {\n                      puVar12 = (undefined8 *)*temp2;\n                      puVar11 = (undefined8 *)print_error_message_00106530(puVar12,puVar15);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  puVar8 = temp3;\n                  temp1 = in_stack_00000048;\n                  puVar11 = (undefined8 *)0x0;\n                  puVar15 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = temp1;\n                lVar9 = (**(code **)(temp2[1] + 0x360))(temp2,puVar15,puVar11,puVar8);\n                temp3 = puVar12;\n                if (0 < lVar9) {\n                  temp3 = (undefined8 *)((long)puVar12 + lVar9);\n                  in_stack_00000048 = (undefined8 *)xrealloc(in_stack_00000048);\n                  lVar7 = 0;\n                  do {\n                    in_stack_00000048[(long)((long)puVar12 + lVar7)] =\n                         (void *)(lVar7 * 0x30 + (long)in_stack_00000040);\n                    lVar7 = lVar7 + 1;\n                  } while (lVar9 != lVar7);\n                  in_stack_00000048[(long)((long)puVar12 + lVar9)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (temp1 != (undefined8 *)0x0)) {\n                  free(temp1);\n                }\n                if ((*(byte *)((long)temp2 + 0x4a) & 0x10) != 0) {\n                  temp1 = (undefined8 *)*temp2;\n                  DAT_0010b230 = '\\0';\n                  uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_00106400(uVar6);\n                }\n                temp5 = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n                bVar16 = DAT_0010b80c != 0;\n                puVar11 = (undefined8 *)(ulong)bVar16;\n                puVar8 = in_stack_00000048;\n                in_stack_00000018 = in_stack_00000048;\n                temp6 = (undefined8 *)(**(code **)(temp2[1] + 0x208))(temp2);\n                if (temp6 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                puVar11 = (undefined8 *)((long)puVar11 * (long)temp3 + (long)puVar12);\n                temp1 = puVar12;\n                while( true ) {\n                  if (puVar11 <= temp1) goto LAB_00104c75;\n                  puVar8 = temp6;\n                  lVar9 = (**(code **)(temp2[1] + 0x270))(temp2,temp5,temp1);\n                  if (lVar9 == 0) break;\n                  temp1 = (undefined8 *)((long)temp1 + (long)temp3);\n                  print_relocated_sections_00105110(temp2,lVar9,0,in_stack_00000008);\n                }\n                print_error_message_00106530(*temp2,0);\n              }\n              print_error_message_00106530(*temp2);\n              puVar12 = temp2;\n              puVar15 = temp6;\nLAB_00102eb0:\n              print_error_message_00106530(*puVar11);\nLAB_00102eb9:\n              print_error_message_00106530(*puVar12);\nLAB_00102ec2:\n              puVar11 = (undefined8 *)0x0;\n              __ptr = temp1;\n              in_R8 = temp3;\n              puVar13 = puVar8;\n              temp2 = in_R9;\n              in_stack_00000010 = puVar15;\nLAB_00104e35:\n              while (in_R9 = puVar13, __ptr < temp5) {\n                temp1 = (undefined8 *)((long)__ptr + (long)in_R8);\n                if (temp1 < temp5) {\n                  puVar8 = temp2;\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  puVar10 = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                  if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = puVar14;\n                    in_R8 = puVar13;\n                    puVar12 = (undefined8 *)*puVar12;\n                    puVar10 = (undefined8 *)print_error_message_00106530();\n                  }\n                  else {\n                    puVar8 = (undefined8 *)puVar11[4];\n                    if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  lVar9 = puVar11[2];\nLAB_00102ee7:\n                  if (puVar8 == (undefined8 *)puVar10[4]) {\n                    lVar9 = puVar10[2] - lVar9;\n                    puVar13 = temp2;\n                    puVar14 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  lVar9 = puVar8[8] - lVar9;\n                  puVar13 = temp2;\n                  puVar14 = __ptr;\n                }\n                else {\n                  puVar8 = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    lVar9 = puVar11[2];\n                    puVar10 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                  puVar13 = temp2;\n                  puVar14 = __ptr;\n                  if (*(int *)(puVar12[1] + 8) == 5) {\n                    lVar9 = puVar11[7];\n                  }\n                  else {\n                    lVar9 = puVar11[2];\n                    if ((*(byte *)((long)puVar8 + 0x25) & 0x10) == 0) {\n                      if (temp1 < temp5) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                puVar11 = puVar10;\n                __ptr = temp1;\n                temp2 = in_R9;\n                if (lVar9 != 0) {\n                  *puVar15 = puVar14;\n                  puVar15[1] = lVar9;\n                  puVar15 = puVar15 + 2;\n                }\n              }\n              puVar11 = (undefined8 *)((long)puVar15 - (long)in_stack_00000010 >> 4);\n              qsort(in_stack_00000010,(size_t)puVar11,0x10,FUN_00103533);\n              lVar9 = puVar12[1];\n              temp1 = __ptr;\n              temp2 = puVar12;\n              __ptr = in_stack_00000010;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n        in_stack_00000010 = puVar8;\n        if (iVar4 == 0) {\n          if (DAT_0010b230 != '\\0') {\n            in_stack_00000010 = (undefined8 *)*temp2;\n            DAT_0010b230 = '\\0';\n            uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_00106400(uVar6,in_stack_00000010);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uVar5 = (*(uint *)(puVar8 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(puVar8 + 3) & 0x800082) == 0) && (puVar8[4] != 0x10c2a8)) &&\n           ((*(byte *)(puVar8[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_objects_00104d5b:\n          if ((puVar8[4] != 0x10c2a8) && (puVar8[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(puVar8 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_objects_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        cVar3 = (**(code **)(temp2[1] + 0x230))(temp2);\n        if (cVar3 != '\\0') {\n          process_lto_object_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (puVar8[4] == 0x10c2a8);\nLAB_00104cba:\n    cVar3 = (**(code **)(temp2[1] + 0x230))(temp2);\n    if (cVar3 != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (temp1 != temp4) {\n      if (temp5 == (undefined8 *)0x8) {\n        *temp1 = *temp4;\n        decode_and_process_data_001049c0();\n        return;\n      }\n      for (; temp5 != (undefined8 *)0x0; temp5 = (undefined8 *)((long)temp5 + -1)) {\n        *(undefined *)temp1 = *(undefined *)temp4;\n        temp4 = (undefined8 *)((long)temp4 + (ulong)bVar17 * -2 + 1);\n        temp1 = (undefined8 *)((long)temp1 + (ulong)bVar17 * -2 + 1);\n      }\n      decode_and_process_data_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)temp3 * (long)temp5);\n  temp3 = (undefined8 *)((long)in_stack_00000018 + (long)puVar15);\n  temp1 = in_stack_00000018;\n  puVar12 = temp2;\n  if (in_stack_00000018 < temp3) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  temp7 = (ulong)bVar16;\n  temp4 = in_stack_00000018;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "decode_and_process_data_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_options_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "targetName",
                "iVar2": "totalLength",
                "iVar3": "currentLength",
                "pcVar4": "localizedString",
                "lVar5": "currentIndex",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "targetPtr",
                "ppcVar8": "demanglerPtr",
                "pcVar9": "separator",
                "local_3c": "spaces"
            },
            "code": "\nvoid printSymbolOptions_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long targetName;\n  int totalLength;\n  int currentLength;\n  char *localizedString;\n  long currentIndex;\n  size_t stringLength;\n  long *targetList;\n  long *targetPtr;\n  char **demanglerPtr;\n  char *separator;\n  uint spaces;\n  \n  targetName = DAT_0010b820;\n  localizedString = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,localizedString,targetName);\n  localizedString = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*localizedString == ' ') {\n    targetName = 1;\n    do {\n      currentIndex = targetName;\n      targetName = currentIndex + 1;\n    } while (localizedString[currentIndex] == ' ');\n    spaces = (uint)currentIndex;\n  }\n  else {\n    spaces = 0;\n  }\n  totalLength = fprintf(outputFile,\"%s\",localizedString);\n  separator = \"\";\n  for (demanglerPtr = (char **)&libiberty_demanglers; *demanglerPtr != (char *)0x0; demanglerPtr = demanglerPtr + 3) {\n    stringLength = strlen(*demanglerPtr);\n    if (0x4a < (long)totalLength + stringLength) {\n      fprintf(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalLength = fprintf(outputFile,\"%.*s\",(ulong)spaces,localizedString);\n    }\n    currentLength = fprintf(outputFile,\"%s\\\"%s\\\"\",separator,*demanglerPtr);\n    totalLength = totalLength + currentLength;\n    separator = \", \";\n  }\n  fputc(10,outputFile);\n  localizedString = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,localizedString);\n  localizedString = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,localizedString);\n  targetName = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    localizedString = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,localizedString);\n  }\n  else {\n    localizedString = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,localizedString,targetName);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    targetName = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (targetName == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fseek",
                "bfd_target_list",
                "exit",
                "fprintf",
                "strlen",
                "dcgettext",
                "fputc",
                "free",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "print_symbol_options_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_lto_objects_00104d5b",
                "in_RCX": "param1",
                "pcVar1": "str",
                "pcVar2": "func",
                "cVar3": "charVal",
                "iVar4": "intVal",
                "uVar5": "uintVal",
                "uVar6": "ulongVal",
                "puVar7": "ptrVal",
                "lVar8": "longVal1",
                "lVar9": "longVal2",
                "puVar10": "ptrVal2",
                "__ptr": "ptrVal3",
                "puVar11": "ptrVal4",
                "puVar12": "ptrVal5",
                "puVar13": "ptrVal6",
                "puVar14": "ptrVal7",
                "puVar15": "ptrVal8",
                "unaff_RBX": "ptrVal9",
                "unaff_RBP": "ptrVal10",
                "unaff_R12": "ptrVal11",
                "unaff_R13": "ptrVal12",
                "unaff_R14": "ptrVal13",
                "unaff_R15": "ptrVal14",
                "bVar16": "boolVal",
                "bVar17": "byteVal",
                "unaff_retaddr": "ulongVal2",
                "uVar18": "ulongVal3",
                "param_7": "paramVal1",
                "param_8": "paramVal2",
                "param_9": "paramVal3",
                "param_13": "paramVal4",
                "param_14": "paramVal5",
                "in_stack_00000038": "stackVal",
                "undefined8": "ptrVal",
                "bool": "boolVal",
                "byte": "byteVal",
                "int": "intVal",
                "uint": "uintVal",
                "long": "longVal",
                "ulong": "ulongVal",
                "char": "charVal",
                "undefined": "undefinedVal"
            },
            "code": "\nvoid process_lto_objects_00104d5b(void)\n\n{\n  charVal *str;\n  code *func;\n  charVal charVal;\n  intVal intVal;\n  uintVal uintVal;\n  ptrVal ulongVal;\n  ptrVal *ptrVal;\n  longVal longVal1;\n  longVal longVal2;\n  ptrVal *ptrVal2;\n  ptrVal *param1;\n  ptrVal *ptrVal9;\n  ptrVal *ptrVal3;\n  ptrVal *ptrVal4;\n  ptrVal *ptrVal10;\n  ptrVal *ptrVal5;\n  ptrVal *in_R8;\n  ptrVal *ptrVal6;\n  ptrVal *in_R9;\n  ptrVal *ptrVal7;\n  ptrVal *ptrVal8;\n  ptrVal *ptrVal11;\n  ptrVal *ptrVal12;\n  ptrVal *ptrVal13;\n  ptrVal *ptrVal14;\n  boolVal boolVal;\n  byteVal byteVal;\n  ulongVal ulongVal2;\n  ulongVal ulongVal3;\n  ptrVal paramVal1;\n  ptrVal *paramVal2;\n  ptrVal *paramVal3;\n  ptrVal stackVal;\n  void *paramVal4;\n  ptrVal *paramVal5;\n  \n  byteVal = 0;\n  do {\n    if ((param1[4] != 0x10c2a8) && (param1[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      ptrVal12 = (ptrVal *)((longVal)ptrVal12 + (longVal)ptrVal13);\n      ptrVal8 = ptrVal11;\n      ptrVal5 = ptrVal10;\n      if (ptrVal11 <= ptrVal12) goto LAB_00104b15;\nLAB_001049cf:\n      param1 = (ptrVal *)\n               (**(code **)(ptrVal10[1] + 0x270))\n                         (ptrVal10,ulongVal2 & 0xffffffff,ptrVal12,ptrVal14);\n      ptrVal4 = ptrVal10;\n      ptrVal5 = ptrVal12;\n      ptrVal8 = ptrVal14;\n      if (param1 == (ptrVal *)0x0) goto LAB_00102eb0;\n      str = (charVal *)param1[1];\n      if (((str == (charVal *)0x0) || (*str != '_')) || (str[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        uintVal = (uintVal)(param1[4] == 0x10c2a8);\nLAB_00104af9:\n        if (uintVal != 0) goto LAB_00104a2d;\n        ptrVal12 = (ptrVal *)((longVal)ptrVal12 + (longVal)ptrVal13);\n        ptrVal8 = ptrVal11;\n        ptrVal5 = ptrVal10;\n        if (ptrVal11 <= ptrVal12) {\nLAB_00104b15:\n          ptrVal9 = (ptrVal *)((longVal)ptrVal9 - (longVal)paramVal3);\n          if (ptrVal13 == (ptrVal *)0x8) {\n            longVal2 = ptrVal5[1];\n            ptrVal4 = (ptrVal *)((longVal)ptrVal9 + 7);\n            if (-1 < (longVal)ptrVal9) {\n              ptrVal4 = ptrVal9;\n            }\n            in_R8 = (ptrVal *)(ulongVal)DAT_0010b800;\n            func = *(code **)(longVal2 + 0x208);\n            ptrVal4 = (ptrVal *)((longVal)ptrVal4 >> 3);\n          }\n          else {\n            ptrVal4 = (ptrVal *)((longVal)ptrVal9 / (longVal)ptrVal13);\n            longVal2 = ptrVal5[1];\n            func = *(code **)(longVal2 + 0x208);\n          }\n          ptrVal10 = ptrVal5;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = ptrVal5;\n            DAT_0010b770 = (ptrVal *)(*func)(ptrVal5);\n            DAT_0010b768 = (ptrVal *)(**(code **)(ptrVal5[1] + 0x208))(ptrVal5);\n            ptrVal9 = paramVal5;\n            if ((DAT_0010b770 == (ptrVal *)0x0) || (DAT_0010b768 == (ptrVal *)0x0)) {\n              printVal_error_message_00106530(*ptrVal5);\n              ptrVal3 = ptrVal14;\n              goto LAB_00102d8e;\n            }\n            ptrVal11 = (ptrVal *)(ulongVal)stackVal._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              ulongVal3 = (ulongVal)(DAT_0010b80c != 0);\n              qsort(paramVal5,(size_t)ptrVal4,(size_t)ptrVal11,check_binary_compatibility_00102fd2);\n              ptrVal8 = (ptrVal *)xmalloc((longVal)ptrVal4 << 4);\n              ptrVal6 = DAT_0010b770;\n              ptrVal10 = DAT_0010b768;\n              ptrVal13 = (ptrVal *)((longVal)ptrVal4 * (longVal)ptrVal11 + (longVal)ptrVal9);\n              param1 = DAT_0010b770;\n              in_R9 = DAT_0010b768;\n              if (ptrVal13 <= ptrVal9) goto LAB_00102ec2;\n              ptrVal4 = (ptrVal *)\n                        (**(code **)(ptrVal5[1] + 0x270))(ptrVal5,ulongVal3 & 0xffffffff,ptrVal9);\n              ptrVal3 = ptrVal9;\n              in_R8 = ptrVal11;\n              paramVal2 = ptrVal8;\n              if (ptrVal4 == (ptrVal *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(paramVal5,(size_t)ptrVal4,(size_t)ptrVal11,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(longVal)DAT_0010b7f4 + (longVal)DAT_0010b7fc * 2]);\n            longVal2 = ptrVal5[1];\n          }\n          ptrVal3 = (ptrVal *)0x0;\n          do {\n            ptrVal5 = paramVal5;\n            ptrVal = (ptrVal *)(ulongVal)DAT_0010b7f8;\n            ptrVal13 = (ptrVal *)(ulongVal)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              ptrVal8 = (ptrVal *)(**(code **)(longVal2 + 0x208))(ptrVal10);\n              if (ptrVal8 == (ptrVal *)0x0) goto LAB_00102ed2;\n              ptrVal9 = ptrVal3 + (longVal)ptrVal4 * 2;\n              ptrVal4 = ptrVal3;\n              do {\n                if (ptrVal9 <= ptrVal4) {\nLAB_00104c75:\n                  if (paramVal4 != (void *)0x0) {\n                    free(paramVal4);\n                    free(paramVal5);\n                    free(ptrVal3);\n                    return;\n                  }\n                  free(paramVal5);\n                  free(ptrVal3);\n                  return;\n                }\n                ptrVal = ptrVal8;\n                longVal2 = (**(code **)(ptrVal10[1] + 0x270))(ptrVal10,ptrVal13,*ptrVal4);\n                if (longVal2 == 0) {\n                  printVal_error_message_00106530(*ptrVal10,0);\nLAB_00102ed2:\n                  ptrVal5 = (ptrVal *)*ptrVal10;\n                  printVal_error_message_00106530();\n                  ptrVal6 = in_R8;\n                  ptrVal7 = in_R9;\n                  goto LAB_00102edb;\n                }\n                ptrVal5 = ptrVal4 + 1;\n                ptrVal4 = ptrVal4 + 2;\n                printVal_relocated_sections_00105110(ptrVal10,longVal2,*ptrVal5,paramVal1);\n              } while( true );\n            }\n            ptrVal11 = (ptrVal *)(ulongVal)stackVal._4_4_;\n            ptrVal14 = (ptrVal *)(**(code **)(longVal2 + 0x208))(ptrVal10);\n            if (ptrVal14 == (ptrVal *)0x0) {\n              printVal_error_message_00106530(*ptrVal10);\n              ptrVal5 = ptrVal11;\n              if (DAT_0010b80c == 0) {\n                longVal2 = (**(code **)(ptrVal10[1] + 0x350))(ptrVal10);\n                ptrVal4 = paramVal5;\n                ptrVal8 = ptrVal11;\n                if (longVal2 < 1) {\n                  ptrVal = (ptrVal *)0x0;\n                  ptrVal9 = (ptrVal *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  ptrVal9 = (ptrVal *)xmalloc();\n                  ptrVal = (ptrVal *)(**(code **)(ptrVal10[1] + 0x358))(ptrVal10,ptrVal9);\n                  ptrVal5 = ptrVal8;\n                  if ((longVal)ptrVal < 0) {\n                    ptrVal5 = (ptrVal *)*ptrVal10;\n                    ptrVal4 = (ptrVal *)printVal_error_message_00106530(ptrVal5,ptrVal8);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                ptrVal = ptrVal11;\n                ptrVal9 = paramVal5;\n                ptrVal4 = (ptrVal *)0x0;\n                ptrVal8 = (ptrVal *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = ptrVal9;\n              longVal2 = (**(code **)(ptrVal10[1] + 0x360))(ptrVal10,ptrVal8,ptrVal4,ptrVal);\n              ptrVal11 = ptrVal5;\n              if (0 < longVal2) {\n                ptrVal11 = (ptrVal *)((longVal)ptrVal5 + longVal2);\n                paramVal5 = (ptrVal *)xrealloc(paramVal5);\n                longVal1 = 0;\n                do {\n                  paramVal5[(longVal)ptrVal5 + longVal1] = (void *)(longVal1 * 0x30 + (longVal)paramVal4);\n                  longVal1 = longVal1 + 1;\n                } while (longVal2 != longVal1);\n                paramVal5[(longVal)ptrVal5 + longVal2] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (ptrVal9 != (ptrVal *)0x0)) {\n                free(ptrVal9);\n              }\n              if ((*(byteVal *)((longVal)ptrVal10 + 0x4a) & 0x10) != 0) {\n                ptrVal9 = (ptrVal *)*ptrVal10;\n                DAT_0010b230 = '\\0';\n                ulongVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                printVal_error_00106400(ulongVal);\n              }\n              ptrVal13 = (ptrVal *)(ulongVal)stackVal._4_4_;\n              boolVal = DAT_0010b80c != 0;\n              ptrVal4 = (ptrVal *)(ulongVal)boolVal;\n              param1 = paramVal5;\n              paramVal3 = paramVal5;\n              ptrVal14 = (ptrVal *)(**(code **)(ptrVal10[1] + 0x208))(ptrVal10);\n              if (ptrVal14 != (ptrVal *)0x0) goto code_r0x00104992;\n            }\n            else {\n              ptrVal4 = (ptrVal *)((longVal)ptrVal4 * (longVal)ptrVal11 + (longVal)ptrVal5);\n              ptrVal9 = ptrVal5;\n              while( true ) {\n                if (ptrVal4 <= ptrVal9) goto LAB_00104c75;\n                param1 = ptrVal14;\n                longVal2 = (**(code **)(ptrVal10[1] + 0x270))(ptrVal10,ptrVal13,ptrVal9);\n                if (longVal2 == 0) break;\n                ptrVal9 = (ptrVal *)((longVal)ptrVal9 + (longVal)ptrVal11);\n                printVal_relocated_sections_00105110(ptrVal10,longVal2,0,paramVal1);\n              }\n              printVal_error_message_00106530(*ptrVal10,0);\n            }\n            printVal_error_message_00106530(*ptrVal10);\n            ptrVal5 = ptrVal10;\n            ptrVal8 = ptrVal14;\nLAB_00102eb0:\n            printVal_error_message_00106530(*ptrVal4);\nLAB_00102eb9:\n            printVal_error_message_00106530(*ptrVal5);\nLAB_00102ec2:\n            ptrVal4 = (ptrVal *)0x0;\n            ptrVal3 = ptrVal9;\n            in_R8 = ptrVal11;\n            ptrVal6 = param1;\n            ptrVal10 = in_R9;\n            paramVal2 = ptrVal8;\nLAB_00104e35:\n            while (in_R9 = ptrVal6, ptrVal3 < ptrVal13) {\n              ptrVal9 = (ptrVal *)((longVal)ptrVal3 + (longVal)in_R8);\n              if (ptrVal9 < ptrVal13) {\n                ptrVal = ptrVal10;\n                ptrVal6 = in_R8;\n                ptrVal7 = in_R9;\n                ptrVal2 = (ptrVal *)(**(code **)(ptrVal5[1] + 0x270))();\n                if (ptrVal2 == (ptrVal *)0x0) {\nLAB_00102edb:\n                  in_R9 = ptrVal7;\n                  in_R8 = ptrVal6;\n                  ptrVal5 = (ptrVal *)*ptrVal5;\n                  ptrVal2 = (ptrVal *)printVal_error_message_00106530();\n                }\n                else {\n                  ptrVal = (ptrVal *)ptrVal4[4];\n                  if ((*(uintVal *)(ptrVal4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                longVal2 = ptrVal4[2];\nLAB_00102ee7:\n                if (ptrVal == (ptrVal *)ptrVal2[4]) {\n                  longVal2 = ptrVal2[2] - longVal2;\n                  ptrVal6 = ptrVal10;\n                  ptrVal7 = ptrVal3;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                longVal2 = ptrVal[8] - longVal2;\n                ptrVal6 = ptrVal10;\n                ptrVal7 = ptrVal3;\n              }\n              else {\n                ptrVal = (ptrVal *)ptrVal4[4];\n                if ((*(uintVal *)(ptrVal4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  longVal2 = ptrVal4[2];\n                  ptrVal2 = (ptrVal *)0x0;\n                  goto LAB_00102dc4;\n                }\n                ptrVal2 = (ptrVal *)0x0;\nLAB_00104e95:\n                ptrVal6 = ptrVal10;\n                ptrVal7 = ptrVal3;\n                if (*(intVal *)(ptrVal5[1] + 8) == 5) {\n                  longVal2 = ptrVal4[7];\n                }\n                else {\n                  longVal2 = ptrVal4[2];\n                  if ((*(byteVal *)((longVal)ptrVal + 0x25) & 0x10) == 0) {\n                    if (ptrVal9 < ptrVal13) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              ptrVal4 = ptrVal2;\n              ptrVal3 = ptrVal9;\n              ptrVal10 = in_R9;\n              if (longVal2 != 0) {\n                *ptrVal8 = ptrVal7;\n                ptrVal8[1] = longVal2;\n                ptrVal8 = ptrVal8 + 2;\n              }\n            }\n            ptrVal4 = (ptrVal *)((longVal)ptrVal8 - (longVal)paramVal2 >> 4);\n            qsort(paramVal2,(size_t)ptrVal4,0x10,compare_and_execute_00103533);\n            longVal2 = ptrVal5[1];\n            ptrVal9 = ptrVal3;\n            ptrVal10 = ptrVal5;\n            ptrVal3 = paramVal2;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      intVal = strcmp(str + (str[2] == '_'),\"__gnu_lto_slim\");\n      paramVal2 = param1;\n      if (intVal == 0) {\n        if (DAT_0010b230 != '\\0') {\n          paramVal2 = (ptrVal *)*ptrVal10;\n          DAT_0010b230 = '\\0';\n          ulongVal = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          printVal_error_00106400(ulongVal,paramVal2);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        uintVal = (*(uintVal *)(param1 + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uintVal *)(param1 + 3) & 0x800082) == 0) && (param1[4] != 0x10c2a8)) &&\n         ((*(byteVal *)(param1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byteVal *)(param1 + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  in_R9 = (ptrVal *)(ulongVal)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    charVal = (**(code **)(ptrVal10[1] + 0x230))(ptrVal10);\n    if (charVal != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  }\n  else {\n    if (param1[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    charVal = (**(code **)(ptrVal10[1] + 0x230))(ptrVal10);\n    if (charVal != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  }\n  if (ptrVal9 != ptrVal12) {\n    if (ptrVal13 != (ptrVal *)0x8) {\n      for (; ptrVal13 != (ptrVal *)0x0; ptrVal13 = (ptrVal *)((longVal)ptrVal13 + -1)) {\n        *(undefinedVal *)ptrVal9 = *(undefinedVal *)ptrVal12;\n        ptrVal12 = (ptrVal *)((longVal)ptrVal12 + (ulongVal)byteVal * -2 + 1);\n        ptrVal9 = (ptrVal *)((longVal)ptrVal9 + (ulongVal)byteVal * -2 + 1);\n      }\n      decode_and_process_data_001049c0();\n      return;\n    }\n    *ptrVal9 = *ptrVal12;\n    decode_and_process_data_001049c0();\n    return;\n  }\n  ptrVal9 = (ptrVal *)((longVal)ptrVal9 + (longVal)ptrVal13);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  ptrVal8 = (ptrVal *)((longVal)ptrVal11 * (longVal)ptrVal13);\n  ptrVal11 = (ptrVal *)((longVal)paramVal3 + (longVal)ptrVal8);\n  ptrVal9 = paramVal3;\n  ptrVal5 = ptrVal10;\n  if (paramVal3 < ptrVal11) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongVal2 = (ulongVal)boolVal;\n  ptrVal12 = paramVal3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00102c19",
                "qsort",
                "FUN_001049c0",
                "FUN_00106530",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00103533",
                "FUN_00102fd2",
                "dcgettext",
                "free",
                "xrealloc",
                "FUN_00106400",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_objects_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_and_exit_00106300",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "__arg": "args",
                "__format": "format",
                "local_d8": "localErrorCode",
                "local_d4": "localParam",
                "local_d0": "localPtr",
                "local_c8": "localArray",
                "local_b8": "localBuffer",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "param1_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\n\n\nvoid print_and_exit_00106300(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 param9,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 *args;\n  char *format;\n  undefined4 localErrorCode;\n  undefined4 localParam;\n  undefined *localPtr;\n  undefined *localArray;\n  undefined localBuffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  args = &localErrorCode;\n  if (flag != '\\0') {\n    param1_copy = errorCode;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  localPtr = &stack0x00000008;\n  localErrorCode = 8;\n  localArray = localBuffer;\n  localParam = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_001063a0();\n  format = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,format,args);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_001053c0",
                "FUN_00103729",
                "FUN_00104370",
                "FUN_001055f0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "print_and_exit_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_valid_00102f7b",
                "param_1": "fileName"
            },
            "code": "\n\n\nvoid printIfValid_00102f7b(undefined8 fileName)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",fileName);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_valid_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "unknown",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "bfd_get_error": "getBfdError",
                "dcgettext": "getTranslatedMessage",
                "bfd_errmsg": "getErrorMessage",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 unknown;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820,errorCode,errorMessage,unknown);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMessage,unknown);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        }
    },
    "used_tokens": 82019,
    "layers": [
        [
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00103573",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00103533",
            "FUN_00103abf",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_0010268b",
            "FUN_001063a0",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00106400",
            "FUN_00106530",
            "FUN_00102739",
            "FUN_00106300"
        ],
        [
            "FUN_00103c00",
            "FUN_00104370",
            "FUN_00102f9f",
            "FUN_00103463",
            "FUN_0010249f",
            "FUN_00104fa0",
            "FUN_00104740"
        ],
        [
            "FUN_00102fc3",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00103b49",
            "FUN_00103bf6",
            "FUN_00105050"
        ],
        [
            "FUN_00103bec",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0"
        ],
        [
            "FUN_001043d0"
        ],
        [
            "FUN_001055f0"
        ],
        [
            "FUN_001054d0"
        ],
        [
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_001035a2",
            "FUN_0010651a"
        ],
        [
            "FUN_00103a66",
            "FUN_001053c0",
            "FUN_001064b0"
        ]
    ],
    "locked_functions": []
}