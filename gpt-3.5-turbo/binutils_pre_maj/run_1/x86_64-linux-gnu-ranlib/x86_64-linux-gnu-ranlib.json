{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_entry_00102cd9",
                "in_EAX": "comparisonValue",
                "iVar1": "comparisonResult",
                "unaff_RBX": "entryPointer",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingEntry_00102cd9(void)\n\n{\n  int comparisonValue;\n  int comparisonResult;\n  long *entryPointer;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (comparisonValue == 3) {\n    for (; *entryPointer != 0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*entryPointer != (undefined8 *)0x0; entryPointer = (long *)(*entryPointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*entryPointer,targetFilename);\n      if (comparisonResult == 0) {\n        if (comparisonValue != 2) {\n          return entryPointer;\n        }\n        return (long *)(*entryPointer + 0xf0);\n      }\n    }\n  }\n  return entryPointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_metadata_001079c0",
                "param_1": "file",
                "param_2": "metadata",
                "param_3": "shouldPrintMetadata",
                "param_4": "shouldPrintHex",
                "iVar1": "result",
                "ppcVar2": "ptrMetadata",
                "pcVar3": "timeData",
                "uVar4": "filePermissions",
                "local_100": "currentTime",
                "uStack_f3": "permissionChar",
                "cStack_f2": "userReadPermission",
                "cStack_f1": "userWritePermission",
                "cStack_f0": "userExecutePermission",
                "cStack_ef": "groupReadPermission",
                "cStack_ee": "groupWritePermission",
                "cStack_ed": "groupExecutePermission",
                "cStack_ec": "otherReadPermission",
                "cStack_eb": "otherWritePermission",
                "cStack_ea": "otherExecutePermission",
                "local_e8": "formattedTime",
                "local_b8": "unknownData",
                "uStack_a0": "mode",
                "uStack_9c": "uid",
                "uStack_98": "gid",
                "uStack_88": "size",
                "local_60": "modificationTime"
            },
            "code": "\nvoid printFileMetadata_001079c0(FILE *file,char **metadata,char shouldPrintMetadata,char shouldPrintHex)\n\n{\n  int result;\n  char **ptrMetadata;\n  char *timeData;\n  uint filePermissions;\n  time_t currentTime;\n  undefined permissionChar;\n  char userReadPermission;\n  char userWritePermission;\n  char userExecutePermission;\n  char groupReadPermission;\n  char groupWritePermission;\n  char groupExecutePermission;\n  char otherReadPermission;\n  char otherWritePermission;\n  char otherExecutePermission;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined unknownData [24];\n  uint mode;\n  uint uid;\n  uint gid;\n  undefined8 size;\n  time_t modificationTime;\n  \n  if (shouldPrintMetadata != '\\0') {\n    ptrMetadata = (char **)metadata[0x1d];\n    if ((char **)metadata[0x1d] == (char **)0x0) {\n      ptrMetadata = metadata;\n    }\n    result = (**(code **)(ptrMetadata[1] + 0x1e8))(metadata,unknownData);\n    if (result == 0) {\n      currentTime = modificationTime;\n      timeData = ctime(&currentTime);\n      if (timeData == (char *)0x0) {\n        timeData = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeData);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeData + 4);\n      }\n      filePermissions = mode & 0xf000;\n      if (filePermissions == 0x4000) {\n        permissionChar = 100;\n      }\n      else if (filePermissions == 0xa000) {\n        permissionChar = 0x6c;\n      }\n      else if (filePermissions == 0x6000) {\n        permissionChar = 0x62;\n      }\n      else if (filePermissions == 0x2000) {\n        permissionChar = 99;\n      }\n      else if (filePermissions == 0xc000) {\n        permissionChar = 0x73;\n      }\n      else {\n        permissionChar = 0x70;\n        if (filePermissions != 0x1000) {\n          permissionChar = 0x2d;\n        }\n      }\n      userReadPermission = (-((mode & 0x100) == 0) & 0xbbU) + 0x72;\n      userWritePermission = (-((mode & 0x80) == 0) & 0xb6U) + 0x77;\n      userExecutePermission = (-((mode & 0x40) == 0) & 0xb5U) + 0x78;\n      groupReadPermission = (-((mode & 0x20) == 0) & 0xbbU) + 0x72;\n      groupWritePermission = (-((mode & 0x10) == 0) & 0xb6U) + 0x77;\n      groupExecutePermission = (-((mode & 8) == 0) & 0xb5U) + 0x78;\n      otherReadPermission = (-((mode & 4) == 0) & 0xbbU) + 0x72;\n      otherWritePermission = (-((mode & 2) == 0) & 0xb6U) + 0x77;\n      otherExecutePermission = (-((mode & 1) == 0) & 0xb5U) + 0x78;\n      if ((mode & 0x800) != 0) {\n        if (userExecutePermission == 'x') {\n          userExecutePermission = 's';\n        }\n        else {\n          userExecutePermission = 'S';\n        }\n      }\n      if ((mode & 0x400) != 0) {\n        if (groupExecutePermission == 'x') {\n          groupExecutePermission = 's';\n        }\n        else {\n          groupExecutePermission = 'S';\n        }\n      }\n      if ((mode & 0x200) != 0) {\n        if (otherExecutePermission == 'x') {\n          otherExecutePermission = 't';\n        }\n        else {\n          otherExecutePermission = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&userReadPermission,(ulong)uid,(ulong)gid,size,\n              formattedTime,(ulong)mode);\n    }\n  }\n  fputs(*metadata,file);\n  if (shouldPrintHex != '\\0') {\n    if ((*(byte *)((long)metadata + 0x49) & 0x10) == 0) {\n      if (metadata[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (metadata[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_metadata_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_and_save_file_00105a68",
                "pcVar1": "directory_path",
                "pFVar2": "file_pointer",
                "sVar3": "string_length"
            },
            "code": "\nvoid process_and_save_file_00105a68(void)\n\n{\n  char *directory_path;\n  FILE *file_pointer;\n  size_t string_length;\n  \n  directory_path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    string_length = strlen(DAT_0010d5e8);\n    if (string_length != 0) {\n      if (directory_path[string_length - 1] == '/') {\n        DAT_0010d618 = (char *)concat(directory_path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(directory_path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file_pointer = fopen(DAT_0010d618,\"w\");\n  if (file_pointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "strlen",
                "perror",
                "FUN_00102e57",
                "xexit",
                "concat",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_and_save_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "extract_archive_entries_001032a8",
                "param_1": "entries",
                "param_2": "callback",
                "param_3": "filenames",
                "param_4": "result",
                "lVar1": "nextEntry",
                "uVar2": "filename",
                "bVar3": "found",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorFormat",
                "plVar6": "nextEntry",
                "lVar7": "currentEntry",
                "plVar8": "previousEntry"
            },
            "code": "\n\n\nundefined8 extractArchiveEntries_001032a8(long *entries,code *callback,undefined8 *filenames,undefined8 result)\n\n{\n  long nextEntry;\n  undefined8 filename;\n  bool found;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorFormat;\n  long *nextEntry;\n  long currentEntry;\n  long *previousEntry;\n  \n  currentEntry = entries[0x1e];\n  if (filenames == (undefined8 *)0x0) {\n    while (currentEntry != 0) {\n      nextEntry = *(long *)(currentEntry + 0xf0);\n      (*callback)(currentEntry,0);\n      currentEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      found = false;\n      currentEntry = (long *)entries[0x1e];\n      previousEntry = entries;\n      while (nextEntry = currentEntry, nextEntry != (long *)0x0) {\n        if (*nextEntry != 0) {\n          comparisonResult = filename_cmp(*filenames);\n          if (comparisonResult == 0) {\n            found = true;\n            (*callback)(nextEntry,previousEntry);\n          }\n        }\n        previousEntry = nextEntry;\n        currentEntry = (long *)nextEntry[0x1e];\n      }\n      if (!found) {\n        filename = *filenames;\n        errorFormat = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorFormat,filename);\n      }\n      filenames = (undefined8 *)filenames[1];\n    } while (filenames != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_archive_entries_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_missing_entries_in_archive_0010285f",
                "__format": "errorMessageFormat",
                "lVar2": "currentEntry",
                "plVar3": "nextEntry",
                "uVar4": "currentEntryName",
                "plVar5": "entryList",
                "unaff_RBP": "callbackFunction",
                "unaff_R12": "archivePointer",
                "unaff_R13D": "numEntries",
                "unaff_R14": "entryNameList",
                "iStack000000000000000c": "numFoundEntries"
            },
            "code": "\n\n\nvoid printMissingEntriesInArchive_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessageFormat;\n  long currentEntry;\n  long *nextEntry;\n  undefined8 currentEntryName;\n  long *entryList;\n  code *callbackFunction;\n  long archivePointer;\n  int numEntries;\n  undefined8 *entryNameList;\n  int numFoundEntries;\n  \ncode_r0x0010285f:\n  currentEntryName = *entryNameList;\n  errorMessageFormat = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessageFormat,currentEntryName);\nLAB_0010553e:\n  entryNameList = entryNameList + 1;\n  numEntries = numEntries + -1;\n  if (numEntries == 0) {\n    return;\n  }\n  entryList = *(long **)(archivePointer + 0xf0);\n  numFoundEntries = 0;\n  do {\n    if (entryList == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)entryList + 0xac) == 0) {\n      currentEntry = *entryList;\n      if (currentEntry == 0) {\n        nextEntry = (long *)entryList[0x1d];\n        if ((long *)entryList[0x1d] == (long *)0x0) {\n          nextEntry = entryList;\n        }\n        (**(code **)(nextEntry[1] + 0x1e8))(entryList,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePointer + 0x49) & 0x10) == 0) || (currentEntry = extracted_function_00105830(), currentEntry != 0))\n      {\n        currentEntryName = extracted_function_00105830(*entryNameList);\n        iVar1 = filename_cmp(currentEntryName,currentEntry);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (numFoundEntries = numFoundEntries + 1,\n            numFoundEntries == _DAT_0010d630)))) break;\n      }\n    }\n    entryList = (long *)entryList[0x1e];\n  } while( true );\n  (*callbackFunction)();\n  *(undefined4 *)((long)entryList + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_missing_entries_in_archive_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102c25",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_0010342d",
                "param_1": "isVerbose",
                "uVar1": "formatSpecifier",
                "pcVar2": "string",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010342d(uint isVerbose)\n\n{\n  undefined8 formatSpecifier;\n  char *string;\n  FILE *outputStream;\n  \n  string = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,string,DAT_0010d660);\n  formatSpecifier = DAT_0010d660;\n  string = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,string,formatSpecifier);\n  string = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,string);\n  string = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,string);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (isVerbose != 0) {\n    string = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,string,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "FUN_0010336b",
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_archive_usage_0010394a",
                "param_1": "isVerbose",
                "uVar1": "defaultString",
                "__stream": "outputStream",
                "pcVar2": "localizedString"
            },
            "code": "\n\n\nvoid printArchiveUsage_0010394a(uint isVerbose)\n\n{\n  undefined8 defaultString;\n  char *localizedString;\n  FILE *outputStream;\n  \n  defaultString = DAT_0010d660;\n  outputStream = _stderr;\n  if (isVerbose != 0) {\n    outputStream = _stdout;\n  }\n  localizedString = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,localizedString,defaultString);\n  localizedString = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (isVerbose != 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isVerbose ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_00107920",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "bufferSize",
                "local_d4": "constant1",
                "local_d0": "bufferPtr",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCodeCopy",
                "local_78": "param2Copy",
                "local_68": "param3Copy",
                "local_58": "param4Copy",
                "local_48": "param5Copy",
                "local_38": "param6Copy",
                "local_28": "param7Copy",
                "local_18": "param8Copy"
            },
            "code": "\nvoid printError_00107920(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 bufferSize;\n  undefined4 constant1;\n  undefined *bufferPtr;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCodeCopy;\n  undefined4 param2Copy;\n  undefined4 param3Copy;\n  undefined4 param4Copy;\n  undefined4 param5Copy;\n  undefined4 param6Copy;\n  undefined4 param7Copy;\n  undefined4 param8Copy;\n  \n  if (flag != '\\0') {\n    errorCodeCopy = errorCode;\n    param2Copy = param2;\n    param3Copy = param3;\n    param4Copy = param4;\n    param5Copy = param5;\n    param6Copy = param6;\n    param7Copy = param7;\n    param8Copy = param8;\n  }\n  bufferPtr = &stack0x00000008;\n  bufferSize = 8;\n  localBuffer = localArray;\n  constant1 = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_001078c0(errorMessage,&bufferSize);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "print_error_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0"
            },
            "code": "\nundefined8 getOne_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_00107640"
            },
            "code": "\nundefined8 initialize_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "process_and_save_file_00102e6f",
                "pcVar1": "base_path",
                "in_RAX": "file_path",
                "uVar2": "basename",
                "uVar3": "error_message",
                "pFVar4": "file",
                "sVar5": "path_length",
                "pcVar6": "current_character"
            },
            "code": "\nvoid process_and_save_file_00102e6f(void)\n\n{\n  char *base_path;\n  char *file_path;\n  undefined8 basename;\n  undefined8 error_message;\n  FILE *file;\n  size_t path_length;\n  char *current_character;\n  \n  base_path = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (path_length = strlen(DAT_0010d5e8), path_length != 0)) {\n          if (base_path[path_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(base_path,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(base_path,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file = fopen(DAT_0010d618,\"w\");\n        if (file == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_character = file_path;\n      if ((*file_path == '.') && (current_character = file_path + 1, file_path[1] == '.')) {\n        current_character = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          basename = lbasename();\n          base_path = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_00107920(error_message,base_path,basename);\n          DAT_0010d618 = (char *)basename;\n          process_and_save_file_00102e6f_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_character, *current_character != '\\0' && (*current_character != '/')); current_character = current_character + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00107920",
                "dcgettext",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_and_save_file_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_initialized_exit_0010315d"
            },
            "code": "\n\n\nvoid checkInitializedExit_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_initialized_exit_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_metadata_00107890",
                "param_1": "filePointer"
            },
            "code": "\n\n\nvoid printFileMetadata_00107890(undefined8 filePointer)\n\n{\n  print_file_metadata_001079c0(_stdout,filePointer,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *data;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data;\n  } while (data == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_param_and_return_00103172",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "flag",
                "param_4": "value",
                "uVar1": "old_input1",
                "auVar2": "result",
                "printf": "print_result"
            },
            "code": "\nundefined  [16]\nupdate_param_and_return_00103172(undefined8 *input1,undefined8 *input2,char flag,undefined8 value)\n\n{\n  undefined8 old_input1;\n  undefined result [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*input2);\n  }\n  old_input1 = *input1;\n  input2[0x1e] = old_input1;\n  result._1_7_ = (undefined7)((ulong)old_input1 >> 8);\n  result[0] = 1;\n  *input1 = input2;\n  result._8_8_ = value;\n  return result;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_param_and_return_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_next_object_position_00105870",
                "param_1": "objectList",
                "param_2": "comparisonFlag",
                "param_3": "targetFilename",
                "iVar1": "comparisonResult",
                "iVar3": "loopCondition",
                "uVar2": "defaultFilename"
            },
            "code": "\nlong * findNextObjectPosition_00105870(long *objectList,int comparisonFlag,undefined8 targetFilename)\n\n{\n  int comparisonResult;\n  undefined8 defaultFilename;\n  int loopCondition;\n  \n  defaultFilename = DAT_0010d638;\n  loopCondition = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFilename = targetFilename;\n    loopCondition = comparisonFlag;\n  }\n  if (loopCondition == 3) {\n    for (; *objectList != 0; objectList = (long *)(*objectList + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*objectList != (undefined8 *)0x0; objectList = (long *)(*objectList + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*objectList,defaultFilename);\n      if (comparisonResult == 0) {\n        if (loopCondition != 2) {\n          return objectList;\n        }\n        return (long *)(*objectList + 0xf0);\n      }\n    }\n  }\n  return objectList;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_next_object_position_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_function_data_001030ed",
                "puVar1": "functionPointer"
            },
            "code": "\nvoid extractFunctionData_001030ed(void)\n\n{\n  undefined8 *functionPointer;\n  \n  functionPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)functionPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)functionPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *functionPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_function_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "dataFlag",
                "param_4": "result",
                "uVar1": "dataSize",
                "piVar2": "errorNumber",
                "pcVar3": "errorString",
                "uVar4": "errorFormat",
                "uVar5": "unlinked",
                "auVar6": "returnValues"
            },
            "code": "\nundefined  [16] copyAndDeleteFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 dataFlag,undefined8 result)\n\n{\n  uint dataSize;\n  int *errorNumber;\n  char *errorString;\n  undefined8 errorFormat;\n  ulong unlinked;\n  undefined returnValues [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinked = 0;\n  }\n  else {\n    dataSize = extract_and_save_data_00105c00(dataFlag);\n    unlinked = (ulong)dataSize;\n    if (dataSize != 0) {\n      errorNumber = __errno_location();\n      errorString = strerror(*errorNumber);\n      errorFormat = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_00107920(errorFormat,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  returnValues._8_8_ = result;\n  returnValues._0_8_ = unlinked;\n  return returnValues;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "process_file_00107650",
                "param_1": "fileHandle",
                "uVar1": "result",
                "lVar2": "fileProperties"
            },
            "code": "\nundefined8 processFile_00107650(undefined8 fileHandle)\n\n{\n  undefined8 result;\n  long fileProperties;\n  \n  fileProperties = check_file_properties_001052a0();\n  if (fileProperties < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileProperties = convert_library_format_00105300(fileHandle,0);\n    if (fileProperties == 0) {\n                    \n      xexit(1);\n    }\n    write_archive_to_file_001058b0(fileProperties);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "FUN_001052a0",
                "xexit",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_file_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_handle_error_00102f1e",
                "unaff_RBP": "offset",
                "unaff_R12": "filepath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation",
                "uVar2": "errorString"
            },
            "code": "\nundefined  [16] copyFileAndHandleError_00102f1e(void)\n\n{\n  int *errnoLocation;\n  undefined8 errorString;\n  ulong offset;\n  char *filepath;\n  undefined auVar3 [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  errorString = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_00107920(errorString);\n  unlink(filepath);\n  auVar3._0_8_ = offset & 0xffffffff;\n  auVar3._8_8_ = returnAddress;\n  return auVar3;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "unlink",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_handle_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_error_message_00102fd7",
                "piVar1": "errorPointer",
                "uVar2": "errorString"
            },
            "code": "\nvoid printErrorMessage_00102fd7(void)\n\n{\n  int *errorPointer;\n  undefined8 errorString;\n  \n  errorPointer = __errno_location();\n  strerror(*errorPointer);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_00107920(errorString);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_error_message_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_ar_status_00103ba8",
                "printf": "printStatus",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid checkARStatus_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(_stdout);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_ar_status_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00102cd9",
                "FUN_00105db0",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103c60",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102fd7",
                "FUN_00102d8c",
                "FUN_001031a5",
                "FUN_00102e6f",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_001028ed",
                "FUN_001025a0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_001075e0",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001032a8",
                "FUN_0010266f",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_metadata_00103ddc",
                "param_1": "file_path",
                "print_file_metadata_001079c0": "print_file_metadata_helper"
            },
            "code": "\nvoid print_file_metadata_00103ddc(undefined8 file_path)\n\n{\n  print_file_metadata_00103ddc_helper(DAT_0010d578,file_path,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_metadata_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "arguments",
                "fflush": "flushStandardOutput",
                "_stdout": "standardOutput",
                "fprintf": "printToStandardError",
                "_stderr": "standardError",
                "vfprintf": "printFormattedToStandardError",
                "putc": "writeCharacterToStandardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010d660);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fflush",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "archivePtr",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "__format": "formatString",
                "lVar2": "entryPtr",
                "plVar3": "fallbackEntryPtr",
                "uVar4": "filename",
                "plVar5": "currentEntryPtr",
                "local_cc": "entryCount",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long archivePtr,code *callback,undefined8 *entryNames,int numEntries)\n\n{\n  int iVar1;\n  char *formatString;\n  long entryPtr;\n  long *fallbackEntryPtr;\n  undefined8 filename;\n  long *currentEntryPtr;\n  int entryCount;\n  undefined buffer [152];\n  \n  entryPtr = *(long *)(archivePtr + 0xf0);\n  if (numEntries == 0) {\n    for (; entryPtr != 0; entryPtr = *(long *)(entryPtr + 0xf0)) {\n      (*callback)(entryPtr);\n    }\n  }\n  else {\n    for (; entryPtr != 0; entryPtr = *(long *)(entryPtr + 0xf0)) {\n      *(undefined4 *)(entryPtr + 0xac) = 0;\n    }\n    do {\n      currentEntryPtr = *(long **)(archivePtr + 0xf0);\n      entryCount = 0;\n      for (; currentEntryPtr != (long *)0x0; currentEntryPtr = (long *)currentEntryPtr[0x1e]) {\n        if (*(int *)((long)currentEntryPtr + 0xac) == 0) {\n          entryPtr = *currentEntryPtr;\n          if (entryPtr == 0) {\n            fallbackEntryPtr = (long *)currentEntryPtr[0x1d];\n            if ((long *)currentEntryPtr[0x1d] == (long *)0x0) {\n              fallbackEntryPtr = currentEntryPtr;\n            }\n            (**(code **)(fallbackEntryPtr[1] + 0x1e8))(currentEntryPtr,buffer);\n          }\n          else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) ||\n                  (entryPtr = extracted_function_00105830(entryPtr,archivePtr), entryPtr != 0)) {\n            filename = extracted_function_00105830(*entryNames,archivePtr);\n            iVar1 = filename_cmp(filename,entryPtr);\n            if ((iVar1 == 0) &&\n               ((DAT_0010d634 == '\\0' || (entryCount = entryCount + 1, entryCount == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)currentEntryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      filename = *entryNames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,filename);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_archive_script_error_001031a5",
                "__format": "errorFormat",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printArchiveScriptError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *errorFormat;\n  \n  lineNumber = DAT_0010d554 + 1;\n  errorFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorFormat,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_archive_script_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102d2f",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_00107690",
                "FUN_00107c10",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_0010315d",
                "FUN_00102d2f",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "__size": "buffer_size",
                "lVar1": "index",
                "lVar2": "new_buffer_size",
                "puVar3": "buffer_ptr",
                "bVar4": "byte_value"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 input;\n  long index;\n  long new_buffer_size;\n  undefined4 *buffer_ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return input;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return input;\n    }\n    new_buffer_size = DAT_0010d580 + 8;\n    buffer_size = new_buffer_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_buffer_size;\n      for (index = 0x10; index != 0; index = index + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n      }\n      return input;\n    }\n  }\n  print_error_message_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return input;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "input_params",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive_ptr",
                "uVar3": "bytes_read",
                "uVar4": "error_message",
                "sVar5": "bytes_written",
                "piVar6": "errno_ptr",
                "unaff_RBP": "remaining_bytes",
                "pcVar7": "error_string",
                "unaff_R13": "bytes_processed",
                "unaff_R14": "archive_size",
                "auStack_b8": "stack_buffer",
                "local_88": "max_bytes_to_process"
            },
            "code": "\n\n\nvoid extract_and_print_archive_00103a78(undefined8 *input_params)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive_ptr;\n  ulong bytes_read;\n  undefined8 error_message;\n  size_t bytes_written;\n  int *errno_ptr;\n  size_t remaining_bytes;\n  char *error_string;\n  ulong bytes_processed;\n  ulong archive_size;\n  undefined stack_buffer [48];\n  ulong max_bytes_to_process;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive_ptr = (undefined8 *)input_params[0x1d];\n  if ((undefined8 *)input_params[0x1d] == (undefined8 *)0x0) {\n    archive_ptr = input_params;\n  }\n  result = (**(code **)(archive_ptr[1] + 0x1e8))(input_params,stack_buffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*input_params);\n    }\n    bytes_processed = 0;\n    bfd_seek(input_params,0,0);\n    goto LAB_00103afd;\n  }\n  input_params = (undefined8 *)*input_params;\n  error_string = \"internal stat error on %s\";\n  do {\n    error_message = dcgettext(0,error_string,5);\n    print_and_exit_00107690(error_message,input_params);\n    max_bytes_to_process = archive_size;\n    do {\n      bytes_written = fwrite(buffer,1,remaining_bytes,_stdout);\n      if (bytes_written != remaining_bytes) {\n        errno_ptr = __errno_location();\n        error_string = strerror(*errno_ptr);\n        print_and_exit_00107690(\"stdout: %s\",error_string);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      bytes_processed = bytes_processed + bytes_written;\nLAB_00103afd:\n      if (max_bytes_to_process <= bytes_processed) goto LAB_00103b91;\n      remaining_bytes = max_bytes_to_process - bytes_processed;\n      if (0x2000 < remaining_bytes) {\n        remaining_bytes = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,remaining_bytes,input_params);\n    } while (remaining_bytes == bytes_read);\n    error_string = \"%s is not a valid archive\";\n    input_params = *(undefined8 **)input_params[0x1d];\n    archive_size = max_bytes_to_process;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107690",
                "bfd_seek",
                "xmalloc",
                "free",
                "strerror",
                "bfd_bread",
                "printf",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_001078c0",
                "FUN_00102d8c",
                "FUN_00105300",
                "FUN_0010336b",
                "FUN_001033b0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "write_archive_to_file_001058b0",
                "param_1": "args",
                "cVar1": "result",
                "uVar2": "flag",
                "uVar4": "file_size",
                "__format": "msg_format",
                "__ptr": "file_path",
                "__stream": "file_stream",
                "ppcVar5": "file_buffer",
                "uStack0000000000000020": "file_mode",
                "in_stack_00000028": "file_type",
                "in_stack_00000038": "file_permissions",
                "local_3c": "err_code",
                "uStack_33": "file_type_char_1",
                "cStack_32": "file_type_char_2",
                "cStack_31": "file_type_char_3"
            },
            "code": "\n\n\nvoid write_archive_to_file_001058b0(undefined8 *args)\n\n{\n  char result;\n  uint flag;\n  int iVar3;\n  undefined8 file_size;\n  char *msg_format;\n  void *file_path;\n  FILE *file_stream;\n  char **file_buffer;\n  uint file_mode;\n  uint file_type;\n  undefined8 file_permissions;\n  int err_code [2];\n  undefined file_type_char_1;\n  char file_type_char_2;\n  char file_type_char_3;\n  \n  file_size = args[0x1e];\n  err_code[0] = -1;\n  file_path = (void *)xstrdup(*args);\n  file_stream = (FILE *)extract_base_name_001057a0(file_path,err_code);\n  iVar3 = err_code[0];\n  if (file_stream != (FILE *)0x0) {\n    DAT_0010d618 = file_stream;\n    file_buffer = (char **)bfd_fdopenw(file_stream,*(undefined8 *)args[1],err_code[0]);\n    if (file_buffer != (char **)0x0) {\n      DAT_0010d5e0 = file_buffer;\n      bfd_set_format(file_buffer,2);\n      flag = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)file_buffer + 0x49) & 0xfffffff7;\n      *(char *)((long)file_buffer + 0x49) = (char)flag;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)file_buffer + 0x44) = *(uint *)((long)file_buffer + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)file_buffer + 0x44) = *(uint *)((long)file_buffer + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)args + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)file_buffer + 0x49) = (byte)flag | 0x10;\n        }\n        result = bfd_set_archive_head(file_buffer,file_size);\n        if (result != '\\0') break;\n        flag = exit_with_error_message_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)file_buffer + 0x44) = *(uint *)((long)file_buffer + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      result = bfd_close(file_buffer);\n      if (result == '\\0') {\n        exit_with_error_message_00107c10(file_path);\n        msg_format = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,msg_format);\n        flag = file_mode & 0xf000;\n        if (flag == 0x4000) {\n          file_type_char_1 = 100;\n        }\n        else if (flag == 0xa000) {\n          file_type_char_1 = 0x6c;\n        }\n        else if (flag == 0x6000) {\n          file_type_char_1 = 0x62;\n        }\n        else if (flag == 0x2000) {\n          file_type_char_1 = 99;\n        }\n        else if (flag == 0xc000) {\n          file_type_char_1 = 0x73;\n        }\n        else {\n          file_type_char_1 = 0x70;\n          if (flag != 0x1000) {\n            file_type_char_1 = 0x2d;\n          }\n        }\n        file_type_char_2 = (-((_file_mode & 0x100) == 0) & 0xbbU) + 0x72;\n        file_type_char_3 = (-((_file_mode & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(file_stream,\"%s %ld/%ld %6lu %s \",&file_type_char_2,_file_mode >> 0x20,\n                (ulong)file_type,file_permissions,&stack0xffffffffffffffd8,\n                _file_mode & 0xffffffff);\n        fputs(*file_buffer,file_stream);\n        if ((char)args != '\\0') {\n          if ((*(byte *)((long)file_buffer + 0x49) & 0x10) == 0) {\n            if (file_buffer[0xb] != (char *)0x0) {\n              fprintf(file_stream,\" 0x%lx\");\n            }\n          }\n          else if (file_buffer[0xc] != (char *)0x0) {\n            fprintf(file_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,file_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(args);\n      iVar3 = copy_and_delete_file_00105bc0(file_stream,file_path,iVar3);\n      if (iVar3 == 0) {\n        free(file_path);\n        free(file_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    exit_with_error_message_00107c10(file_path);\n  }\n  file_size = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  exit_with_error_message_00107c10(file_size);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "FUN_001057a0",
                "xstrdup",
                "FUN_00107c10",
                "bfd_fdopenw",
                "bfd_set_format",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "write_archive_to_file_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "clean_up_binary_resources_00102bf5"
            },
            "code": "\nvoid cleanUpBinaryResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "unlink_if_ordinary",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "clean_up_binary_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_bootloader_function_00102020"
            },
            "code": "\nvoid execute_bootloader_function_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_bootloader_function_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103ba8",
                "FUN_00102f96",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errorLocation",
                "pcVar3": "errorMessage",
                "uVar4": "errorText",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "createTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errorLocation;\n  char *errorMessage;\n  undefined8 errorText;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 createTime;\n  undefined4 local_28;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  local_28 = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  createTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    errorLocation = __errno_location();\n    errorMessage = strerror(*errorLocation);\n    errorText = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_00107920(errorText,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_output_path_00105a20",
                "param_1": "inputPath",
                "pcVar1": "baseDir",
                "pcVar2": "currentPath",
                "uVar3": "lastPathComponent",
                "uVar4": "errorMessage",
                "pFVar5": "file",
                "sVar6": "baseDirLength"
            },
            "code": "\nvoid extractOutputPath_00105a20(char *inputPath)\n\n{\n  char *baseDir;\n  char *currentPath;\n  undefined8 lastPathComponent;\n  undefined8 errorMessage;\n  FILE *file;\n  size_t baseDirLength;\n  \n  baseDir = DAT_0010d5e8;\n  DAT_0010d618 = inputPath;\n  if (*inputPath == '/') {\nLAB_00102e9a:\n    lastPathComponent = lbasename();\n    baseDir = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_00107920(errorMessage,baseDir,lastPathComponent);\n    DAT_0010d618 = (char *)lastPathComponent;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*inputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (baseDirLength = strlen(DAT_0010d5e8), baseDirLength != 0)) {\n        if (baseDir[baseDirLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(baseDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(baseDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file = fopen(DAT_0010d618,\"w\");\n      if (file == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    currentPath = inputPath;\n    if ((*inputPath == '.') && (currentPath = inputPath + 1, inputPath[1] == '.')) {\n      currentPath = inputPath + 2;\n      if ((inputPath[2] == '/') || (inputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*currentPath != '\\0' && (*currentPath != '/')); currentPath = currentPath + 1) {\n    }\n    for (; inputPath = currentPath, *currentPath == '/'; currentPath = currentPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_output_path_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_handle_errors_00102f55",
                "piVar2": "errorPointer",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "previousError"
            },
            "code": "\nundefined8 closeFileAndHandleErrors_00102f55(void)\n\n{\n  int previousError;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  previousError = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = previousError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_and_handle_errors_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_base_name_001057a0",
                "param_1": "path",
                "param_2": "file_descriptor",
                "param_3": "unused_param",
                "param_4": "data",
                "iVar1": "status",
                "pcVar2": "last_slash",
                "lVar3": "base_name_length",
                "lVar4": "i",
                "lVar5": "last_slash_offset",
                "pcVar6": "base_name",
                "bVar7": "zero",
                "auVar8": "result",
                "auVar8._8_8_": "result_data",
                "auVar8._0_8_": "result_base_name"
            },
            "code": "\nundefined  [16] extract_base_name_001057a0(char *path,int *file_descriptor,undefined8 unused_param,undefined8 data)\n\n{\n  int status;\n  char *last_slash;\n  long base_name_length;\n  long i;\n  long last_slash_offset;\n  char *base_name;\n  byte zero;\n  undefined result [16];\n  \n  zero = 0;\n  last_slash = strrchr(path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    base_name_length = 0;\n  }\n  else {\n    last_slash_offset = (long)last_slash - (long)path;\n    last_slash = (char *)xmalloc(last_slash_offset + 0xb);\n    base_name_length = last_slash_offset + 1;\n    base_name = last_slash;\n    for (i = last_slash_offset; i != 0; i = i + -1) {\n      *base_name = *path;\n      path = path + (ulong)zero * -2 + 1;\n      base_name = base_name + (ulong)zero * -2 + 1;\n    }\n    last_slash[last_slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + base_name_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + base_name_length) + 8) = 0;\n  status = mkstemp(last_slash);\n  if (status == -1) {\n    base_name = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = status;\n    base_name = last_slash;\n  }\n  result_data = data;\n  result_base_name = base_name;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_base_name_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_permissions_00102d8c",
                "__format": "errorMessage",
                "uVar1": "fileTypeBits",
                "unaff_RBX": "fileContents",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "includeAddressFlag",
                "uStack0000000000000015": "fileTypeCode",
                "cStack0000000000000016": "readableOwnerPermission",
                "cStack0000000000000017": "writableOwnerPermission",
                "param_9": "executableOwnerPermission",
                "cStack0000000000000019": "readableGroupPermission",
                "cStack000000000000001a": "writableGroupPermission",
                "cStack000000000000001b": "executableGroupPermission",
                "cStack000000000000001c": "readableOtherPermission",
                "cStack000000000000001d": "writableOtherPermission",
                "cStack000000000000001e": "executableOtherPermission",
                "uStack000000000000001f": "printAddressFlag",
                "param_19": "filePermissionBits",
                "uStack000000000000006c": "inodeNumber",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "stack0x00000020": "errorMessageBuffer"
            },
            "code": "\nvoid printFilePermissions_00102d8c(void)\n\n{\n  char *errorMessage;\n  uint fileTypeBits;\n  char **fileContents;\n  FILE *outputFile;\n  char includeAddressFlag;\n  undefined fileTypeCode;\n  char readableOwnerPermission;\n  char writableOwnerPermission;\n  char executableOwnerPermission;\n  char readableGroupPermission;\n  char writableGroupPermission;\n  char executableGroupPermission;\n  char readableOtherPermission;\n  char writableOtherPermission;\n  char executableOtherPermission;\n  undefined printAddressFlag;\n  uint filePermissionBits;\n  uint inodeNumber;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&errorMessageBuffer,errorMessage);\n  fileTypeBits = filePermissionBits & 0xf000;\n  if (fileTypeBits == 0x4000) {\n    fileTypeCode = 100;\n  }\n  else if (fileTypeBits == 0xa000) {\n    fileTypeCode = 0x6c;\n  }\n  else if (fileTypeBits == 0x6000) {\n    fileTypeCode = 0x62;\n  }\n  else if (fileTypeBits == 0x2000) {\n    fileTypeCode = 99;\n  }\n  else if (fileTypeBits == 0xc000) {\n    fileTypeCode = 0x73;\n  }\n  else {\n    fileTypeCode = 0x70;\n    if (fileTypeBits != 0x1000) {\n      fileTypeCode = 0x2d;\n    }\n  }\n  readableOwnerPermission = (-((filePermissionBits & 0x100) == 0) & 0xbbU) + 0x72;\n  writableOwnerPermission = (-((filePermissionBits & 0x80) == 0) & 0xb6U) + 0x77;\n  executableOwnerPermission = (-((filePermissionBits & 0x40) == 0) & 0xb5U) + 0x78;\n  readableGroupPermission = (-((filePermissionBits & 0x20) == 0) & 0xbbU) + 0x72;\n  writableGroupPermission = (-((filePermissionBits & 0x10) == 0) & 0xb6U) + 0x77;\n  executableGroupPermission = (-((filePermissionBits & 8) == 0) & 0xb5U) + 0x78;\n  readableOtherPermission = (-((filePermissionBits & 4) == 0) & 0xbbU) + 0x72;\n  writableOtherPermission = (-((filePermissionBits & 2) == 0) & 0xb6U) + 0x77;\n  executableOtherPermission = (-((filePermissionBits & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissionBits & 0x800) != 0) {\n    if (executableOwnerPermission == 'x') {\n      executableOwnerPermission = 's';\n    }\n    else {\n      executableOwnerPermission = 'S';\n    }\n  }\n  if ((filePermissionBits & 0x400) != 0) {\n    if (executableGroupPermission == 'x') {\n      executableGroupPermission = 's';\n    }\n    else {\n      executableGroupPermission = 'S';\n    }\n  }\n  if ((filePermissionBits & 0x200) != 0) {\n    if (executableOtherPermission == 'x') {\n      executableOtherPermission = 't';\n    }\n    else {\n      executableOtherPermission = 'T';\n    }\n  }\n  printAddressFlag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)inodeNumber,\n          (ulong)fileSize,timestamp,&errorMessageBuffer,(ulong)filePermissionBits);\n  fputs(*fileContents,outputFile);\n  if (includeAddressFlag != '\\0') {\n    if ((*(byte *)((long)fileContents + 0x49) & 0x10) == 0) {\n      if (fileContents[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileContents[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fputs",
                "sprintf",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_permissions_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00102c25",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_001031cf",
                "FUN_001025a0",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "convert_library_format_00105300",
                "param_1": "filename",
                "param_2": "archivedFiles",
                "plVar1": "archivedFilePtr",
                "pcVar2": "defaultPlugin",
                "bVar3": "isThinLibrary",
                "cVar4": "conversionStatus",
                "iVar5": "statResult",
                "uVar6": "message",
                "uVar7": "libraryName",
                "piVar8": "errnoLocation",
                "lVar9": "archivedFileOffset",
                "puVar10": "loadedLibraries",
                "local_b0": "formatMatch",
                "local_a8": "fileStat",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nundefined8 * convertLibraryFormat_00105300(char *filename,undefined8 *archivedFiles)\n\n{\n  long *archivedFilePtr;\n  char *defaultPlugin;\n  byte isThinLibrary;\n  char conversionStatus;\n  int statResult;\n  undefined8 message;\n  undefined8 libraryName;\n  int *errnoLocation;\n  long archivedFileOffset;\n  undefined8 *loadedLibraries;\n  undefined8 formatMatch;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  statResult = stat(filename,&fileStat);\n  defaultPlugin = DAT_0010d618;\n  if (statResult == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(errorStream,\"%s: \",DAT_0010d660);\n      perror(filename);\n      check_initialized_exit_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (archivedFiles != (undefined8 *)0x0)) {\n      loadedLibraries = (undefined8 *)load_bfd_libraries_00102710();\n      return loadedLibraries;\n    }\n    archivedFiles = (undefined8 *)bfd_openw(filename,DAT_0010d5f0);\n    if (((archivedFiles != (undefined8 *)0x0) && (conversionStatus = bfd_set_format(archivedFiles,2), conversionStatus != '\\0')) &&\n       (conversionStatus = bfd_close(archivedFiles), conversionStatus != '\\0')) {\n      defaultPlugin = filename;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  exit_with_error_message_00107c10(filename);\n  do {\n    isThinLibrary = *(byte *)((long)archivedFiles + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *archivedFiles;\n        message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_and_exit_00107690(message,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *archivedFiles;\n      message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_and_exit_00107690(message,libraryName);\nLAB_001027cb:\n      print_error_message_00107c20(filename);\n      statResult = bfd_get_error();\n      if (statResult == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(formatMatch);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePtr = archivedFiles + 0x1e;\n      for (archivedFileOffset = bfd_openr_next_archived_file(archivedFiles,0); archivedFileOffset != 0;\n          archivedFileOffset = bfd_openr_next_archived_file(archivedFiles,archivedFileOffset)) {\n        *archivedFilePtr = archivedFileOffset;\n        archivedFilePtr = (long *)(archivedFileOffset + 0xf0);\n      }\n      *archivedFilePtr = 0;\n      statResult = bfd_get_error();\n      if (statResult == 9) {\n        return archivedFiles;\n      }\n      do {\n        exit_with_error_message_00107c10(filename);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        print_error_00107920(libraryName,filename);\n        defaultPlugin = filename;\nLAB_001053be:\n        DAT_0010d618 = defaultPlugin;\n        archivedFiles = (undefined8 *)bfd_openr(filename,DAT_0010d5f0);\n      } while (archivedFiles == (undefined8 *)0x0);\n      conversionStatus = bfd_check_format_matches(archivedFiles,2,&formatMatch);\n      if (conversionStatus == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFileOffset = bfd_openr_next_archived_file(archivedFiles,0), archivedFileOffset == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_error",
                "FUN_00102710",
                "FUN_00107c10",
                "bfd_close",
                "stat",
                "perror",
                "bfd_openw",
                "FUN_00107690",
                "bfd_openr_next_archived_file",
                "bfd_check_format_matches",
                "bfd_set_format",
                "FUN_00107c20",
                "bfd_openr",
                "xexit",
                "FUN_00107920",
                "fprintf",
                "dcgettext",
                "FUN_0010315d",
                "bfd_get_error",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "convert_library_format_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte1",
                "puVar2": "ptrUint2",
                "bVar3": "byteVar3",
                "plVar4": "ptrLong4",
                "puVar5": "ptrUndefined8_5",
                "uVar6": "uintVar6",
                "uVar7": "uintVar7",
                "bVar8": "boolVar8",
                "bVar9": "boolVar9",
                "ppcVar10": "ptrPtrChar10",
                "piVar11": "ptrInt11",
                "puVar12": "ptrUndefined12",
                "bVar13": "byteVar13",
                "cVar14": "charVar14",
                "iVar15": "intVar15",
                "uVar16": "uintVar16",
                "uVar17": "uintVar17",
                "pFVar18": "filePtr18",
                "sVar19": "size_tVar19",
                "sVar20": "size_tVar20",
                "__ptr": "ptrByte",
                "plVar21": "ptrLong21",
                "pFVar22": "filePtr22",
                "pcVar23": "ptrChar23",
                "lVar24": "longVar24",
                "uVar25": "ulongVar25",
                "puVar26": "ptrUndefined8_26",
                "uVar27": "undefined8Var27",
                "pFVar28": "filePtr28",
                "lVar34": "longVar34",
                "lVar35": "longVar35",
                "uVar40": "ulongVar40",
                "uVar41": "ulongVar41",
                "uVar42": "ulongVar42",
                "uVar44": "uintVar44",
                "iVar45": "intVar45"
            },
            "code": "\n\n\nvoid processFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *ptrByte1;\n  uint *ptrUint2;\n  byte byteVar3;\n  long *ptrLong4;\n  undefined8 *ptrUndefined8_5;\n  undefined4 uintVar6;\n  undefined4 uintVar7;\n  bool boolVar8;\n  bool boolVar9;\n  char **ptrPtrChar10;\n  int *ptrInt11;\n  undefined *ptrUndefined12;\n  byte byteVar13;\n  char charVar14;\n  int intVar15;\n  uint uintVar16;\n  undefined4 uintVar17;\n  FILE *filePtr18;\n  size_t size_tVar19;\n  size_t size_tVar20;\n  byte *ptrByte;\n  long *ptrLong21;\n  FILE *filePtr22;\n  char *ptrChar23;\n  long longVar24;\n  ulong ulongVar25;\n  undefined8 *ptrUndefined8_26;\n  undefined8 undefined8Var27;\n  FILE *filePtr28;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar33;\n  long longVar34;\n  long longVar35;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVar38;\n  char *pcVar39;\n  ulong ulongVar40;\n  ulong ulongVar41;\n  ulong ulongVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar44;\n  int intVar45;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 local_130;\n  FILE *local_128;\n  byte *local_118;\n  char **local_110;\n  size_t local_108;\n  long local_100;\n  undefined local_c8 [2];\n  undefined uStack_c6;\n  undefined5 uStack_c5;\n  uint local_b0;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePtr18 = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  local_110 = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  local_128 = (FILE *)0x0;\n  filePtr22 = argv;\n  do {\n    uintVar16 = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar16;\n    local_130 = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePtr22;\n    if (**(char **)(&filePtr22->_flags + (long)unaff_RBP * 2) == '@') {\n      uintVar44 = (int)local_110 - 1;\n      local_110 = (char **)(ulong)uintVar44;\n      if (uintVar44 == 0) {\n        ptrLong21 = *(long **)filePtr22;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,ptrLong21);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePtr22->_flags + (long)unaff_RBP * 2) + 1;\n      intVar15 = stat(pcVar39,(stat *)local_c8);\n      if (-1 < intVar15) {\n        if ((local_b0 & 0xf000) == 0x4000) {\n          ptrLong21 = *(long **)filePtr22;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr18 = fopen(pcVar39,\"r\");\n        if (filePtr18 != (FILE *)0x0) {\n          intVar15 = fseek(filePtr18,0,2);\n          if (((intVar15 != -1) && (size_tVar19 = ftell(filePtr18), size_tVar19 != 0xffffffffffffffff)) &&\n             (intVar15 = fseek(filePtr18,0,0), intVar15 != -1)) {\n            local_118 = (byte *)xmalloc(size_tVar19 + 1);\n            size_tVar20 = fread(local_118,1,size_tVar19,filePtr18);\n            if ((size_tVar19 == size_tVar20) || (intVar15 = ferror(filePtr18), intVar15 == 0)) {\n              local_118[size_tVar20] = 0;\n              byteVar13 = *local_118;\n              pbyteVar33 = local_118;\n              while( true ) {\n                if (byteVar13 == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) == 0) break;\n                byteVar13 = pbyteVar33[1];\n                pbyteVar33 = pbyteVar33 + 1;\n              }\n              size_tVar19 = strlen((char *)local_118);\n              ptrByte = (byte *)xmalloc(size_tVar19 + 1);\n              filePtr28 = (FILE *)0x0;\n              intVar15 = 0;\n              boolVar9 = false;\n              bVar47 = false;\n              boolVar8 = false;\n              local_100 = 0;\n              pbyteVar33 = local_118;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar33 * 2] & 0x40) != 0) {\n                  pbyteVar33 = pbyteVar33 + 1;\n                }\n                if ((intVar15 == 0) || (intVar15 + -1 <= (int)local_100)) {\n                  if (filePtr28 == (FILE *)0x0) {\n                    intVar15 = 8;\n                    filePtr28 = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar15 = intVar15 * 2;\n                    filePtr28 = (FILE *)xrealloc(filePtr28,(long)intVar15 << 3);\n                    ppcVar31 = (char **)((long)&filePtr28->_flags + local_100 * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr28->_flags + local_100 * 8);\n                }\n                byteVar13 = *pbyteVar33;\n                pbyteVar38 = ptrByte;\n                while (byteVar13 != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar13 * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar9 | boolVar8 | bVar47))) {\n                      boolVar8 = false;\n                      boolVar9 = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar8) break;\n                    pbyteVar33 = pbyteVar33 + 1;\n                    *pbyteVar38 = byteVar13;\n                    pbyteVar38 = pbyteVar38 + 1;\n                    boolVar8 = false;\n                    byteVar13 = *pbyteVar33;\n                    if (byteVar13 == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar13 == 0x5c) {\n                    boolVar8 = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar13 == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVar38 = byteVar13;\n                      pbyteVar38 = pbyteVar38 + 1;\n                    }\n                  }\n                  else if (boolVar9) {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = false;\n                  }\n                  else if (byteVar13 == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar13 != 0x22) goto LAB_001061f1;\n                    boolVar9 = true;\n                  }\n                  ptrByte1 = pbyteVar33 + 1;\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar13 = *ptrByte1;\n                }\nLAB_0010606f:\n                *pbyteVar38 = 0;\n                ptrLong21 = (long *)xstrdup(ptrByte);\n                *ppcVar31 = (char *)ptrLong21;\n                *(undefined8 *)(filePtr28->_shortbuf + local_100 * 8 + -0x7b) = 0;\n                byteVar13 = *pbyteVar33;\n                byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                while ((byteVar3 & 0x40) != 0) {\n                  byteVar13 = pbyteVar33[1];\n                  pbyteVar33 = pbyteVar33 + 1;\n                  byteVar3 = (&_sch_istable)[(ulong)byteVar13 * 2];\n                }\n                local_100 = local_100 + 1;\n                if (byteVar13 == 0) {\n                  free(ptrByte);\n                  if (filePtr22 == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(local_118);\n          }\n          fclose(filePtr18);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar16 + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar16 = (uint)unaff_R12;\n        intVar15 = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar15 != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar16 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        ptrUndefined12 = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar16;\n        if ((char)uintVar16 != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = execute_function_chain_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            ptrUndefined12 = PTR_DAT_0010d2e0;\n            intVar15 = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar15 + 1;\n            *(code **)(ptrUndefined12 + (long)intVar15 * 8 + 0x10) = cleanup_file_00107730;\n          }\n          else {\n            ptrUndefined8_26 = (undefined8 *)malloc(0x110);\n            if (ptrUndefined8_26 != (undefined8 *)0x0) {\n              *ptrUndefined8_26 = ptrUndefined12;\n              *(undefined4 *)(ptrUndefined8_26 + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)ptrUndefined8_26;\n              goto LAB_0010632b;\n            }\n          }\n          longVar24 = 1;\n          do {\n            longVar35 = longVar24;\n            intVar15 = (int)pcVar46;\n            if (intVar15 <= (int)longVar35) break;\n            charVar14 = initialize_00107640(*(undefined8 *)((int *)pcVar43 + longVar35 * 2));\n            longVar24 = longVar35 + 1;\n          } while (charVar14 != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar35 * 8 + -8);\n          uintVar44 = intVar15 - ((int)longVar35 + -1);\n          filePtr18 = (FILE *)(ulong)uintVar44;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar15 = getopt_long(filePtr18,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar15 != -1)\n            {\n              if (intVar15 < 0x77) {\n                if (0x43 < intVar15) {\n                  switch(intVar15) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVar16;\n                  }\n                }\n              }\n              else if (intVar15 == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar44 < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              print_archive_usage_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_archive_usage_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar44 <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVar16 = process_file_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              }\n            }\n            while (longVar24 = check_file_properties_001052a0(pcVar39), longVar24 < 1) {\n              uintVar16 = 1;\nLAB_001071c4:\n              ptrInt11 = (int *)pcVar43;\n              pcVar43 = (char *)((long)ptrInt11 + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar16);\n              if ((int)uintVar44 <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)ptrInt11 * 8 + -0x7b);\n            }\n            intVar15 = open(pcVar39,2,0);\n            if (intVar15 < 0) {\n              bfd_set_error(1);\n              exit_with_error_message_00107c10(pcVar39);\nLAB_0010737f:\n              exit_with_error_message_00107c10(pcVar39);\nLAB_00107387:\n              print_error_message_00107c20(pcVar39);\n              intVar15 = bfd_get_error();\n              if (intVar15 == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(uStack_c5,\n                                      CONCAT12(uStack_c6,CONCAT11(local_c8[1],local_c8[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar14 = bfd_check_format_matches(unaff_RBP,2,local_c8);\n            if (charVar14 == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                ptrUint2 = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *ptrUint2 = *ptrUint2 | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar14 = bfd_close(unaff_RBP);\n              if (charVar14 != '\\0') {\n                uintVar16 = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var27 = dcgettext(0,\"%s: no archive map to update\",5);\n            print_and_exit_00107690(undefined8Var27,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            size_tVar19 = strlen(pcVar39);\n            if ((size_tVar19 < 6) ||\n               (intVar15 = filename_cmp(pcVar39 + (size_tVar19 - 6),\"ranlib\"), intVar15 != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePtr22 = (FILE *)unaff_RBP;\n          filePtr28 = filePtr18;\n          if ((int)uintVar44 < 2) goto switchD_00107462_caseD_1;\n          local_130 = (FILE *)CONCAT71(local_130._1_7_,(char)uintVar16);\nLAB_001063a3:\n          filePtr22 = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            local_c8[0] = 0x2d;\n            uStack_c6 = 0;\n            size_tVar19 = strlen(*(char **)((long)pcVar46 + 8));\n            intVar15 = (int)size_tVar19 + (int)filePtr18;\n            unaff_R12 = (FILE *)xmalloc((long)intVar15 * 8);\n            uintVar17 = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uintVar17;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            local_128 = (FILE *)((long)pcVar46 + 0x10);\n            local_110 = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              local_118 = local_c8;\n              local_c8[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                local_c8[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(local_118);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  local_c8[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(local_118);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    local_c8[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(local_118);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar14 = *(char *)((long)ppcVar31 + 4);\n                    local_110 = ppcVar32;\n                    if (charVar14 != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        local_c8[1] = charVar14;\n                        ptrChar23 = (char *)xstrdup(local_118);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = ptrChar23;\n                        charVar14 = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        local_110 = ppcVar32;\n                      } while (charVar14 != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar24 = (long)(int)filePtr18;\n            ptrInt11 = (int *)pcVar46 + longVar24 * 2;\n            if (local_128 < ptrInt11) {\n              ulongVar25 = longVar24 * 8 - 0x11;\n              if ((ulongVar25 < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < ptrInt11) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < ptrInt11 &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < ptrInt11)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < ptrInt11)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < ptrInt11)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  ptrPtrChar10 = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < ptrInt11;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *ptrPtrChar10 = *ppcVar31;\n                    ptrPtrChar10 = ptrPtrChar10 + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uintVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uintVar6 = *(undefined4 *)((long)pcVar46 + 0x18);\n                uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                ulongVar40 = (ulongVar25 >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uintVar17;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar6;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar7;\n                uintVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uintVar6 = *(undefined4 *)((long)pcVar46 + 0x28);\n                uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar25 = ulongVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uintVar17;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar6;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar7;\n                if (ulongVar25 != 2) {\n                  uintVar17 = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uintVar6 = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uintVar7 = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uintVar17;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar6;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar7;\n                  if (ulongVar25 != 3) {\n                    ulongVar41 = 3;\n                    do {\n                      ulongVar42 = ulongVar41 + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + ulongVar41 * 0x10 + -0x73;\n                      uintVar17 = *(undefined4 *)(pcVar39 + 4);\n                      uintVar6 = *(undefined4 *)(pcVar39 + 8);\n                      uintVar7 = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uintVar17;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar6;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar7;\n                      ulongVar41 = ulongVar42;\n                    } while (ulongVar42 != ulongVar25);\n                  }\n                }\n                if ((ulongVar40 & 1) != 0) {\n                  ppcVar32[ulongVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)local_128 + (ulongVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar24 + -2;\n            }\n            filePtr18 = (FILE *)(ulong)(intVar15 - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar16 = (uint)unaff_R12;\n            uintVar44 = getopt_long((ulong)filePtr18 & 0xffffffff,pcVar46,filePtr22,ppuVar36,0);\n            unaff_RBP = (char *)filePtr22;\n            if (uintVar44 == 0xffffffff) break;\n            if (((uintVar44 - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar44 - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePtr28 = (FILE *)pcVar46;\n            if (uintVar44 < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar44]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_0010342d(0);\n            pcVar46 = (char *)filePtr28;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintVar44 = DAT_0010d64c;\n          filePtr22 = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePtr18 <= _optind || (_optind < 1)))) {\n              uintVar44 = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar16 = (int)filePtr18 - (_optind + -1);\n            filePtr18 = (FILE *)(ulong)uintVar16;\n            _optind = 0;\n            if (1 < (int)uintVar16) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)local_130 & 0xff);\n          uintVar16 = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePtr28 = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintVar44 == 3) goto LAB_00106abc;\n                  if (uintVar44 != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar44 == 3) || (uintVar44 == 0)) {\n                if (DAT_0010d648 == 1) {\n                  uintVar17 = process_file_00107650();\n                    \n                  xexit(uintVar17);\n                }\nLAB_00106abc:\n                if (uintVar44 == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar15 = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4) == (char *)0x0) {\n                    undefined8Var27 = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_and_exit_00107690(undefined8Var27);\n                    uintVar44 = extraout_EDX;\nLAB_00107548:\n                    if (uintVar44 == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar15 + 1);\n                  longVar24 = strtol(*(char **)((long)ppuVar36 + (long)intVar15 * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar24;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar24 = (long)(int)unaff_RBP;\n              filePtr22 = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + longVar24 * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr22 = (FILE *)((long)ppuVar36 + (longVar24 + 1) * 2 * 4);\n              if (*(FILE **)filePtr22 == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePtr22 = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar24 + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePtr18 = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePtr18;\n                  filePtr18 = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar24 * 2 * 4) + (long)filePtr18 * 2) !=\n                         0);\n              }\n              ptrUndefined8_26 = (undefined8 *)convert_library_format_00105300();\n              filePtr18 = filePtr22;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)ptrUndefined8_26 + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePtr22;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_entries_00105480(ptrUndefined8_26,extract_and_save_from_binary_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                size_tVar19 = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(size_tVar19 + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",ptrUndefined8_26);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar24 = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar24 != 0) {\n                    charVar14 = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    charVar14 = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    filePtr28 = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePtr28 != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar14 = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar14 == '\\0') goto LAB_00106803;\n                    longVar24 = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVar24 == 0) goto LAB_00106803;\n                    intVar15 = (int)pcVar43;\n                    local_130 = (FILE *)((long)(intVar15 + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(local_130,\"Cannot reset libdeps record type.\");\n                    if (intVar15 == 0) {\n                      longVar24 = 0;\n                    }\n                    else {\n                      uintVar17 = *(undefined4 *)&filePtr22->field_0x4;\n                      *(int *)unaff_RBP = filePtr22->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uintVar17;\n                      longVar24 = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = local_130[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr22->_flags;\n                        filePtr22 = (FILE *)((long)filePtr22 + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar24) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar15 + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)local_130) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr22 = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)filePtr22;\n                if (filePtr22 == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr18 = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePtr22;\n                if ((filePtr22 != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_files_00105570(ptrUndefined8_26,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePtr22;\nswitchD_00106ed8_caseD_3:\n                process_entries_00105480(ptrUndefined8_26,print_file_metadata_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePtr22;\nswitchD_00106ed8_caseD_4:\n                process_entries_00105480(ptrUndefined8_26,extract_and_print_archive_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr22 == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr18 = (FILE *)(ptrUndefined8_26 + 0x1e);\n                do {\n                  unaff_R12 = filePtr18;\n                  if (*(FILE **)filePtr22 == (FILE *)0x0) {\nLAB_00106b9f:\n                    write_archive_to_file_001058b0(ptrUndefined8_26);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    ptrLong21 = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePtr22;\n                    if (ptrLong21 == (long *)0x0) {\n                      undefined8Var27 = *ptrUndefined8_26;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_and_exit_00107690(uVar30,pcVar46,undefined8Var27);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar24 = *ptrLong21;\n                    undefined8Var27 = extracted_function_00105830(pcVar46,ptrUndefined8_26);\n                    intVar15 = filename_cmp(undefined8Var27,longVar24);\n                    if (intVar15 == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)ptrLong21[0x1e];\n                  pplVar29 = (long **)find_next_object_position_00105870(filePtr18,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  ptrLong4 = *pplVar29;\n                  *pplVar29 = ptrLong21;\n                  ptrLong21[0x1e] = (long)ptrLong4;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr22);\n                  }\n                  filePtr22 = (FILE *)&filePtr22->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar15 = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar15);\n          extract_and_process_archive_script_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uintVar17 = bfd_get_error();\n        filePtr22 = (FILE *)bfd_errmsg(uintVar17);\n        undefined8Var27 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar15 = print_and_exit_00107690(undefined8Var27,\"x86_64-pc-linux-gnu\",filePtr22);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          filePtr28 = (FILE *)pcVar46;\n          switch(intVar15) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar16 = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePtr22;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePtr22;\nLAB_00106803:\n        undefined8Var27 = dcgettext(0,pcVar39,5);\n        print_and_exit_00107690(undefined8Var27);\nLAB_00106814:\n        intVar15 = (int)pcVar46;\n        filePtr28 = (FILE *)xmalloc(8);\n        *(long **)filePtr28 = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar15 = 0;\n          }\n          else {\n            longVar24 = 1;\n            do {\n              intVar15 = (int)longVar24;\n              longVar35 = longVar24 * 2;\n              longVar24 = longVar24 + 1;\n            } while (*(long *)((int *)pcVar43 + longVar35) != 0);\n          }\n          filePtr22 = (FILE *)xmalloc((long)(intVar15 + 1) << 3);\n          ptrLong21 = *(long **)pcVar43;\n          longVar24 = 0;\n          while (ptrLong21 != (long *)0x0) {\n            undefined8Var27 = xstrdup();\n            *(undefined8 *)((long)&filePtr22->_flags + longVar24) = undefined8Var27;\n            ptrLong21 = *(long **)((char *)((long)pcVar43 + 0x83) + longVar24 + -0x7b);\n            longVar24 = longVar24 + 8;\n          }\n          *(undefined8 *)((long)&filePtr22->_flags + longVar24) = 0;\nLAB_0010610a:\n          intVar15 = (int)pcVar46;\n          pcVar43 = (char *)filePtr22;\n          if (*(long **)filePtr28 == (long *)0x0) goto LAB_00106a80;\n          longVar24 = 0;\n          do {\n            longVar34 = longVar24 + 1;\n            longVar35 = longVar24 * 8;\n            longVar24 = longVar34;\n          } while (*(long *)(filePtr28->_shortbuf + longVar35 + -0x7b) != 0);\n          local_108 = longVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar34 = 0;\n          local_108 = 0;\n        }\n        longVar24 = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + longVar34);\n        free(*(void **)((int *)pcVar43 + longVar24));\n        filePtr22 = (FILE *)xrealloc(pcVar43,(longVar34 + 1 + (long)intVar15) * 8);\n        uintVar44 = intVar15 + -1 + (int)longVar34;\n        pcVar46 = (char *)(ulong)uintVar44;\n        memmove(&filePtr22->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePtr22->_IO_read_ptr + (long)local_130),\n                (long)(int)(intVar15 - uintVar16) << 3);\n        memcpy((void *)((long)&local_130->_flags + (long)&filePtr22->_flags),filePtr28,local_108);\n        free(filePtr28);\n        free(local_118);\n        fclose(filePtr18);\n        uintVar16 = (int)local_128 + 1;\n        unaff_R12 = local_130;\n        pcVar43 = (char *)filePtr22;\n        local_130 = filePtr28;\n        if ((int)uintVar16 < (int)uintVar44) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar16 = uintVar16 + 1;\n    local_128 = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar16;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar15 = getopt_long((ulong)filePtr18 & 0xffffffff,pcVar46,filePtr22,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePtr22;\n  if (intVar15 == -1) goto LAB_00106680;\n  if ((0x14 < intVar15 - 100U) || ((0x117201UL >> ((byte)(intVar15 - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var27 = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_00107920(undefined8Var27);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePtr18 != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar45 = 0;\n  intVar15 = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  ptrUndefined8_5 = ptrUndefined8_26;\n  if (intVar15 == 0) {\n    *(byte *)((long)ptrUndefined8_26 + 0x49) = *(byte *)((long)ptrUndefined8_26 + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      ptrLong21 = ptrUndefined8_5 + 0x1e;\n      if ((undefined8 *)*ptrLong21 == (undefined8 *)0x0) break;\n      undefined8Var27 = *(undefined8 *)*ptrLong21;\n      uVar30 = extracted_function_00105830(*(FILE **)unaff_RBP,ptrUndefined8_26);\n      intVar15 = filename_cmp(uVar30,undefined8Var27);\n      if ((intVar15 == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar45 = intVar45 + 1, intVar45 == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *ptrLong21 = *(long *)(*ptrLong21 + 0xf0);\n        filePtr18 = unaff_R12;\n        goto LAB_00106d38;\n      }\n      ptrUndefined8_5 = (undefined8 *)*ptrLong21;\n    }\n    if (DAT_0010d60c != 0) {\n      filePtr22 = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePtr22);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "fseek",
                "ftell",
                "fread",
                "memcpy",
                "FUN_00107cc0",
                "bfd_make_writable",
                "bfd_check_format_matches",
                "free",
                "setlocale",
                "FUN_00105830",
                "memmove",
                "FUN_00107c20",
                "bfd_make_readable",
                "FUN_00107640",
                "xexit",
                "FUN_0010394a",
                "FUN_00107890",
                "textdomain",
                "printf",
                "FUN_00103a78",
                "bfd_find_target",
                "isatty",
                "FUN_001052a0",
                "open",
                "bindtextdomain",
                "FUN_00103e95",
                "bfd_close",
                "stat",
                "strcmp",
                "bfd_create",
                "malloc",
                "bfd_plugin_set_program_name",
                "getopt_long",
                "bfd_set_format",
                "strtol",
                "xrealloc",
                "lbasename",
                "FUN_00107920",
                "FUN_0010342d",
                "fprintf",
                "bfd_set_error_program_name",
                "dcgettext",
                "bfd_get_error",
                "FUN_00103bd1",
                "filename_cmp",
                "bfd_fdopenr",
                "FUN_00105870",
                "bfd_set_error",
                "FUN_00107740",
                "bfd_set_default_target",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "FUN_00105300",
                "bfd_init",
                "ferror",
                "fileno",
                "fopen",
                "FUN_001058b0",
                "FUN_00105480",
                "bfd_bwrite",
                "FUN_00107c10",
                "FUN_00107730",
                "FUN_00107650",
                "bfd_plugin_set_plugin",
                "FUN_00107690",
                "xstrdup",
                "FUN_001075e0",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "__format": "formatString",
                "plVar2": "currentString",
                "uVar1": "dataValue"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 dataValue;\n  char *formatString;\n  long *currentString;\n  \n  fflush(_stdout);\n  dataValue = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,dataValue);\n  for (currentString = formatStrings; *currentString != 0; currentString = currentString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_message_00107c10",
                "print_error_message_00107c20": "printErrorMessage",
                "xexit": "exitCode"
            },
            "code": "\nvoid exitWithErrorMessage_00107c10(void)\n\n{\n  printErrorMessage();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "exit_with_error_message_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "load_bfd_libraries_00102710",
                "plVar1": "ptr_archived_file",
                "cVar2": "format_valid",
                "bVar3": "thin_library",
                "iVar4": "error_code",
                "lVar5": "bfd_file_descriptor",
                "uVar6": "error_message",
                "uVar7": "library_path",
                "puVar8": "bfd_output",
                "unaff_RBP": "return_address",
                "in_stack_00000008": "matching_format"
            },
            "code": "\n\n\nundefined8 * load_bfd_libraries_00102710(void)\n\n{\n  long *ptr_archived_file;\n  char format_valid;\n  byte thin_library;\n  int error_code;\n  long bfd_file_descriptor;\n  undefined8 error_message;\n  undefined8 library_path;\n  undefined8 *bfd_output;\n  undefined8 return_address;\n  undefined8 matching_format;\n  \n  bfd_file_descriptor = bfd_openr();\n  if (bfd_file_descriptor != 0) {\n    format_valid = bfd_check_format(bfd_file_descriptor,1);\n    if (format_valid != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(bfd_file_descriptor + 8);\n    }\n    bfd_close(bfd_file_descriptor);\n  }\n  bfd_output = (undefined8 *)bfd_openw();\n  if (((bfd_output != (undefined8 *)0x0) && (format_valid = bfd_set_format(bfd_output,2), format_valid != '\\0')) &&\n     (format_valid = bfd_close(bfd_output), format_valid != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  exit_with_error_message_00107c10();\n  do {\n    thin_library = *(byte *)((long)bfd_output + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (thin_library != 0) {\n        library_path = *bfd_output;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_and_exit_00107690(error_message,library_path);\n        goto LAB_00102812;\n      }\n    }\n    else if (thin_library == 0) {\n      library_path = *bfd_output;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_and_exit_00107690(error_message,library_path);\nLAB_001027cb:\n      print_error_message_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matching_format);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      ptr_archived_file = bfd_output + 0x1e;\n      for (bfd_file_descriptor = bfd_openr_next_archived_file(bfd_output,0); bfd_file_descriptor != 0;\n          bfd_file_descriptor = bfd_openr_next_archived_file(bfd_output,bfd_file_descriptor)) {\n        *ptr_archived_file = bfd_file_descriptor;\n        ptr_archived_file = (long *)(bfd_file_descriptor + 0xf0);\n      }\n      *ptr_archived_file = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return bfd_output;\n      }\n      do {\n        exit_with_error_message_00107c10();\nLAB_00102826:\n        library_path = dcgettext(0,\"creating %s\",5);\n        print_error_00107920(library_path);\nLAB_001053b7:\n        DAT_0010d618 = return_address;\n        bfd_output = (undefined8 *)bfd_openr();\n      } while (bfd_output == (undefined8 *)0x0);\n      format_valid = bfd_check_format_matches(bfd_output,2,&stack0x00000008);\n      if (format_valid == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (bfd_file_descriptor = bfd_openr_next_archived_file(bfd_output,0), bfd_file_descriptor == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "load_bfd_libraries_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "extract_and_process_archive_script_00103e95",
                "pplVar1": "double_pointer_to_long",
                "cVar2": "character",
                "ppFVar3": "double_pointer_to_FILE",
                "pFVar4": "pointer_to_FILE",
                "plVar5": "pointer_to_long",
                "uVar6": "undefined8",
                "pbVar7": "pointer_to_byte",
                "iVar8": "integer",
                "pcVar10": "pointer_to_character",
                "uVar11": "undefined8",
                "iVar9": "integer",
                "plVar12": "pointer_to_long",
                "sVar13": "size_t",
                "pvVar14": "pointer_to_void",
                "pcVar15": "pointer_to_character",
                "pcVar16": "pointer_to_character",
                "lVar17": "long",
                "lVar18": "long",
                "lVar21": "long",
                "lVar31": "long",
                "uVar19": "ulong",
                "uVar20": "uint",
                "puVar22": "pointer_to_undefined8",
                "puVar23": "pointer_to_undefined8",
                "uVar24": "uint",
                "iVar25": "integer",
                "uVar26": "ulong",
                "ppcVar27": "pointer_to_pointer_to_character",
                "bVar28": "boolean",
                "bVar30": "byte",
                "pbVar32": "pointer_to_byte",
                "pbVar33": "pointer_to_byte",
                "piVar34": "pointer_to_integer",
                "pbVar35": "pointer_to_byte",
                "uVar36": "uint"
            },
            "code": "\n\n\nvoid extract_and_process_archive_script_00103e95(void)\n\n{\n  long **double_pointer_to_long;\n  char character;\n  FILE **double_pointer_to_FILE;\n  FILE *pointer_to_FILE;\n  long *pointer_to_long;\n  undefined8 undefined8;\n  byte *pointer_to_byte;\n  int integer;\n  char *pointer_to_character;\n  undefined8 undefined8;\n  int integer;\n  long *pointer_to_long;\n  size_t size_t;\n  void *pointer_to_void;\n  char *pointer_to_character;\n  char *pointer_to_character;\n  long long;\n  long long;\n  ulong ulong;\n  uint uint;\n  long long;\n  undefined8 *pointer_to_undefined8;\n  undefined8 *pointer_to_undefined8;\n  uint uint;\n  int integer;\n  ulong ulong;\n  char **pointer_to_pointer_to_character;\n  bool boolean;\n  char **ppcharacter9;\n  byte byte;\n  long long;\n  byte *pointer_to_byte;\n  byte *pointer_to_byte;\n  int *pointer_to_integer;\n  byte *pointer_to_byte;\n  uint uint;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *local_828;\n  char *local_820;\n  long local_818;\n  char **local_810;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  long = 0;\n  DAT_0010d550 = -2;\n  ppcharacter9 = local_678;\n  local_800 = 0;\n  local_828 = local_740;\n  local_818 = 200;\n  local_820 = local_828;\n  local_810 = ppcharacter9;\nLAB_00103ee9:\n  *local_828 = (char)long;\n  if (local_820 + local_818 + -1 <= local_828) {\n    long = (long)local_828 - (long)local_820;\n    long = long + 1;\n    if (local_818 < 10000) {\n      long = local_818 * 2;\n      local_818 = 10000;\n      if (long < 0x2711) {\n        local_818 = long;\n      }\n      pointer_to_character = (char *)malloc(local_818 * 9 + 7);\n      if (pointer_to_character != (char *)0x0) {\n        long = long * 8;\n        pointer_to_character = local_820;\n        pointer_to_character = pointer_to_character;\n        for (; long != 0; long = long + -1) {\n          *pointer_to_character = *pointer_to_character;\n          pointer_to_character = pointer_to_character + (ulong)bVar39 * -2 + 1;\n          pointer_to_character = pointer_to_character + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pointer_to_character + local_818);\n        ppcharacter9 = ppcVar38;\n        for (; long != 0; long = long + -1) {\n          *(undefined *)ppcharacter9 = *(undefined *)local_810;\n          local_810 = (char **)((long)local_810 + (ulong)bVar39 * -2 + 1);\n          ppcharacter9 = (char **)((long)ppcharacter9 + (ulong)bVar39 * -2 + 1);\n        }\n        if (local_820 != local_740) {\n          free(local_820);\n        }\n        local_828 = pointer_to_character + long;\n        ppcharacter9 = ppcVar38 + long;\n        local_820 = pointer_to_character;\n        local_810 = ppcVar38;\n        if (pointer_to_character + local_818 + -1 <= local_828) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_archive_script_error_001031a5();\nLAB_0010524c:\n    pointer_to_character = local_820;\n    if (local_820 == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pointer_to_character);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)long;\n  if (iVar37 == 3) goto LAB_0010524c;\n  character = (&DAT_0010a200)[iVar37];\n  if (character != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          pointer_to_undefined8 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          undefined8 = create_buffer_001033d6(DAT_0010d590);\n          *pointer_to_undefined8 = undefined8;\n        }\n        extract_function_data_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pointer_to_byte = DAT_0010d5b0;\n      pointer_to_byte = DAT_0010d5b0;\n      uint = DAT_0010d5d0;\nLAB_001040d4:\n      ulong = (ulong)uint;\n      ulong = (ulong)local_7fc;\n      boolean = false;\n      do {\n        byte = (&DAT_0010ab00)[*pointer_to_byte];\n        if (*(short *)(&DAT_0010a980 + (long)(int)ulong * 2) != 0) {\n          boolean = true;\n          ulong = ulong & 0xffffffff;\n          local_7f8 = pointer_to_byte;\n        }\n        while( true ) {\n          integer = (int)ulong;\n          long = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)integer * 2) + (uint)byte);\n          if (integer == *(short *)(&DAT_0010a440 + long * 2)) break;\n          ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)integer * 2)) {\n            byte = (&DAT_0010a7c0)[(int)(uint)byte];\n          }\n        }\n        pointer_to_byte = pointer_to_byte + 1;\n        ulong = (ulong)*(short *)(&DAT_0010a240 + long * 2);\n      } while (*(short *)(&DAT_0010a640 + ulong * 2) != 0xc2);\n      local_7fc = (uint)ulong;\n      pointer_to_byte = pointer_to_byte;\n      if (boolean) {\n        DAT_0010d5b8 = local_7f8;\n        DAT_0010d5c0 = local_7fc;\n      }\nLAB_0010419f:\n      integer = (int)*(short *)(&DAT_0010a980 + (long)(int)ulong * 2);\n      if (integer == 0) {\n        integer = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pointer_to_byte = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pointer_to_byte - (int)pointer_to_byte;\n      DAT_0010d588 = *pointer_to_byte;\n      DAT_0010d5b0 = pointer_to_byte;\n      DAT_0010d5c8 = pointer_to_byte;\n      *pointer_to_byte = 0;\nLAB_001041f0:\n      pointer_to_byte = DAT_0010d5c8;\n      long = DAT_0010d5a0;\n      switch(integer) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      long = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uint = character + iVar37;\n    if ((0x22 < uint) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uint])) goto LAB_001049db;\n    character = (&DAT_0010a060)[(int)uint];\n    long = (long)character;\n    if (character < '\\x01') {\n      iVar37 = -(int)character;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    ppcharacter9 = ppcharacter9 + 1;\n    *ppcharacter9 = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)long];\n  if ((&DAT_0010a020)[(int)long] == '\\0') {\n    if (local_800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_archive_script_error_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[long] != -0xe) &&\n             (uint = (int)(char)(&DAT_0010a200)[long] + 1, uint < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uint] == '\\x01')) &&\n           (long = (long)(char)(&DAT_0010a060)[(int)uint],\n           '\\0' < (char)(&DAT_0010a060)[(int)uint])) goto LAB_00105227;\n        if (local_820 == local_828) goto LAB_0010524c;\n        local_828 = local_828 + -1;\n        ppcharacter9 = ppcharacter9 + -1;\n        long = (long)*local_828;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  undefined8 = DAT_0010d660;\n  pointer_to_pointer_to_character = DAT_0010d558;\n  character = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)ppcharacter9[1 - character];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    check_ar_status_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_archive_script_error_001031a5();\n    break;\n  case 0x17:\n    pointer_to_undefined8 = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pointer_to_character = (char *)dcgettext(0,pointer_to_character,5);\n      fprintf(_stderr,pointer_to_character,undefined8);\n      check_initialized_exit_0010315d();\n    }\n    else {\n      for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n        for (pointer_to_undefined8 = (undefined8 *)DAT_0010d558[0x1f]; pointer_to_undefined8 != (undefined8 *)0x0;\n            pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[0x1e]) {\n          integer = filename_cmp(*pointer_to_undefined8);\n          if (integer == 0) {\n            extract_and_save_from_binary_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*pointer_to_undefined8,0);\n        undefined8 = DAT_0010d660;\n        undefined8 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined8,undefined8);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    pointer_to_undefined8 = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pointer_to_character = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      boolean = false;\n      pointer_to_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (pointer_to_character = DAT_0010d558[0x1f]; pointer_to_character != (char *)0x0;\n          pointer_to_character = *(char **)(pointer_to_character + 0xf0)) {\n        integer = filename_cmp();\n        if (integer == 0) {\n          pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,0);\n          undefined8 = DAT_0010d660;\n          if (pointer_to_character == (char *)0x0) {\n            undefined8 = *pointer_to_undefined8;\n            pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pointer_to_character,undefined8,undefined8);\n            check_initialized_exit_0010315d();\n          }\n          else {\n            *pointer_to_pointer_to_character = pointer_to_character;\n            boolean = true;\n            *(undefined8 *)(pointer_to_character + 0xf0) = *(undefined8 *)(pointer_to_character + 0xf0);\n          }\n        }\n        else {\n          pointer_to_pointer_to_character = (char **)(pointer_to_character + 0xf0);\n        }\n      }\n      if (!boolean) {\n        pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,0);\n        undefined8 = DAT_0010d660;\n        undefined8 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined8,undefined8);\n        undefined8 = DAT_0010d660;\n        if (pointer_to_character == (char *)0x0) {\n          undefined8 = *pointer_to_undefined8;\n          pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pointer_to_character,undefined8,undefined8);\n          check_initialized_exit_0010315d();\n        }\n        else {\n          *pointer_to_pointer_to_character = pointer_to_character;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    pointer_to_undefined8 = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      boolean = false;\n      pointer_to_pointer_to_character = DAT_0010d558 + 0x1f;\n      for (pointer_to_undefined8 = (undefined8 *)DAT_0010d558[0x1f]; undefined8 = DAT_0010d660,\n          pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[0x1e]) {\n        integer = filename_cmp(*pointer_to_undefined8,*pointer_to_undefined8);\n        if (integer == 0) {\n          boolean = true;\n          *pointer_to_pointer_to_character = (char *)pointer_to_undefined8[0x1e];\n        }\n        else {\n          pointer_to_pointer_to_character = (char **)(pointer_to_undefined8 + 0x1e);\n        }\n      }\n      if (!boolean) {\n        undefined8 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined8,undefined8);\n        check_initialized_exit_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    pointer_to_undefined8 = (undefined8 *)*ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; pointer_to_undefined8 != (undefined8 *)0x0; pointer_to_undefined8 = (undefined8 *)pointer_to_undefined8[1]) {\n      pointer_to_character = (char *)bfd_openr(*pointer_to_undefined8,\"plugin\");\n      undefined8 = DAT_0010d660;\n      pointer_to_pointer_to_character = DAT_0010d558;\n      if (pointer_to_character == (char *)0x0) {\n        undefined8 = *pointer_to_undefined8;\n        pointer_to_character = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pointer_to_character,undefined8,undefined8);\n        check_initialized_exit_0010315d();\n      }\n      else {\n        *(char **)(pointer_to_character + 0xf0) = DAT_0010d558[0x1f];\n        pointer_to_pointer_to_character[0x1f] = pointer_to_character;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pointer_to_character = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pointer_to_character = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pointer_to_character,pointer_to_character);\n    for (pointer_to_character = DAT_0010d558[0x1f]; pointer_to_character != (char *)0x0; pointer_to_character = *(char **)(pointer_to_character + 0xf0))\n    {\n      print_file_metadata_00103ddc(pointer_to_character,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(pointer_to_pointer_to_character);\n    pointer_to_character = DAT_0010d570;\n    integer = stat(DAT_0010d570,&local_7d0);\n    if ((integer != 0) && (DAT_0010d558 = (char **)bfd_openw(pointer_to_character,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_delete_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    process_archive_file_00103c60(*ppcharacter9,0);\n    break;\n  case 0x1f:\n    process_archive_file_00103c60(*ppcharacter9,1);\n    break;\n  case 0x20:\n    pointer_to_character = *ppcharacter9;\n    if (DAT_0010d558 == (char **)0x0) {\n      pointer_to_character = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    long = convert_library_format_00105300(ppcharacter9[-1],0);\n    if (long != 0) {\n      extract_archive_entries_001032a8(long,copy_data_0010312d,pointer_to_character);\n    }\n    break;\n  case 0x21:\n    pointer_to_character = *ppcharacter9;\n    pointer_to_character = ppcharacter9[-1];\n    undefined8 = convert_library_format_00105300(ppcharacter9[-2],0);\n    if (pointer_to_character == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pointer_to_character,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        extract_archive_entries_001032a8(undefined8,print_file_metadata_00103ddc,pointer_to_character);\n        bfd_close(undefined8);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pointer_to_character = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pointer_to_character,pointer_to_character);\n    }\n    extract_archive_entries_001032a8(undefined8,print_file_metadata_00103ddc,pointer_to_character);\n    bfd_close(undefined8);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*ppcharacter9;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)ppcharacter9[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pointer_to_character = ppcharacter9[-2];\n    *ppcVar38 = *ppcharacter9;\n    ppcVar38[1] = pointer_to_character;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  long = (long)character;\n  local_828 = local_828 + -long;\n  ppcharacter9[1 - long] = (char *)ppcVar38;\n  ppcharacter9 = ppcharacter9 + (1 - long);\n  uint = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*local_828;\n  if ((uint < 0x23) && (*local_828 == (&DAT_0010a0a0)[(int)uint])) {\n    long = (long)(char)(&DAT_0010a060)[(int)uint];\n  }\n  else {\n    long = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  integer = ((int)pointer_to_byte - (int)DAT_0010d5c8) + -1;\n  *pointer_to_byte = DAT_0010d588;\n  double_pointer_to_long = (long **)(DAT_0010d5a8 + long * 8);\n  double_pointer_to_FILE = (FILE **)*double_pointer_to_long;\n  if (*(int *)(double_pointer_to_FILE + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)double_pointer_to_FILE + 0x1c);\n    *(undefined4 *)(double_pointer_to_FILE + 7) = 1;\n    *double_pointer_to_FILE = DAT_0010d590;\n  }\n  pointer_to_byte = DAT_0010d5b0;\n  pointer_to_FILE = double_pointer_to_FILE[1];\n  auVar40._8_8_ = pointer_to_FILE;\n  auVar40._0_8_ = double_pointer_to_FILE;\n  if ((byte *)((long)&pointer_to_FILE->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pointer_to_FILE->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uint = (int)((long)pointer_to_byte - (long)pointer_to_byte) - 1;\n      for (long = 0; (int)long < (int)uint; long = long + 1) {\n        *(byte *)(auVar40._8_8_ + long) = pointer_to_byte[long];\n      }\n      pointer_to_long = *double_pointer_to_long;\n      if (*(int *)(pointer_to_long + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)pointer_to_long + 0x1c) = 0;\nLAB_0010475e:\n        pointer_to_FILE = DAT_0010d590;\n        if (uint == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            pointer_to_undefined8 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            undefined8 = create_buffer_001033d6(pointer_to_FILE);\n            *pointer_to_undefined8 = undefined8;\n          }\n          long = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            long = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          integer = 1;\n          initialize_file_001031cf(long);\n          extract_function_data_001030ed();\n        }\n        else {\n          integer = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          pointer_to_long = *double_pointer_to_long;\n          uint = ~uint + *(int *)(pointer_to_long + 3);\n          if (0 < (int)uint) break;\n          uint = (int)DAT_0010d5b0 - (int)(void *)pointer_to_long[1];\n          if (*(int *)(pointer_to_long + 4) == 0) {\n            pointer_to_long[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          integer = *(int *)(pointer_to_long + 3);\n          integer = integer;\n          if (integer < 1) {\n            integer = integer / 8;\n          }\n          *(int *)(pointer_to_long + 3) = integer + integer;\n          pointer_to_void = realloc((void *)pointer_to_long[1],(long)(integer + integer + 2));\n          pointer_to_long[1] = (long)pointer_to_void;\n          if (pointer_to_void == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pointer_to_void + (long)(int)uint);\n          pointer_to_long = *double_pointer_to_long;\n        }\n        if (0x2000 < (int)uint) {\n          uint = 0x2000;\n        }\n        ulong = (ulong)uint;\n        if (*(int *)((long)pointer_to_long + 0x24) == 0) {\n          pointer_to_integer = __errno_location();\n          ulong = (ulong)(int)uint;\n          ulong = (ulong)(int)uint;\n          *pointer_to_integer = 0;\n          goto LAB_001046c7;\n        }\n        ulong = 0;\n        pointer_to_integer = (int *)(long)(int)uint;\n        do {\n          integer = getc(DAT_0010d590);\n          uint = (uint)ulong;\n          if (integer == -1) {\n            integer = ferror(DAT_0010d590);\n            uint = uint;\n            if (integer != 0) {\n              do {\n                pointer_to_character = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *pointer_to_integer = 0;\n                  clearerr((FILE *)pointer_to_character);\nLAB_001046c7:\n                  size_t = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + ulong),1,ulong,DAT_0010d590);\n                  pointer_to_character = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)size_t;\n                  uint = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (integer = ferror(DAT_0010d590), uint = DAT_0010d598, integer == 0))\n                  goto LAB_00104738;\n                } while (*pointer_to_integer == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (integer == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uint +\n             (long)(int)uint + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uint = uint + 1;\n            break;\n          }\n          ulong = (ulong)(uint + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)pointer_to_integer) =\n               (char)integer;\n          pointer_to_integer = (int *)((long)pointer_to_integer + 1);\n        } while (uint != uint + 1);\nLAB_00104738:\n        DAT_0010d598 = uint;\n        uint = DAT_0010d598;\n        integer = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uint == 0) goto LAB_0010475e;\n      }\n      pointer_to_long = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      long = *pointer_to_long;\n      uint = uint + DAT_0010d598;\n      if (*(int *)(long + 0x18) < (int)uint) {\n        integer = ((int)DAT_0010d598 >> 1) + uint;\n        pointer_to_void = realloc(*(void **)(long + 8),(long)integer);\n        *(void **)(long + 8) = pointer_to_void;\n        auVar41._8_8_ = pointer_to_long;\n        auVar41._0_8_ = *pointer_to_long;\n        if (*(long *)(*pointer_to_long + 8) == 0) {\n          auVar41 = print_error_message_and_exit_001033b0();\n        }\n        pointer_to_long = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = integer + -2;\n      }\n      DAT_0010d598 = uint;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + (long)(int)uint) = 0;\n      *(undefined *)(*(long *)(*pointer_to_long + 8) + 1 + (long)(int)uint) = 0;\n      pointer_to_byte = *(byte **)(*pointer_to_long + 8);\n      DAT_0010d5c8 = pointer_to_byte;\n      if (integer == 1) goto LAB_001048a4;\n      if (integer == 2) goto LAB_001048ca;\n      pointer_to_byte = pointer_to_byte + integer;\n      DAT_0010d5b0 = pointer_to_byte;\n      uint = find_matching_values_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pointer_to_byte - (long)pointer_to_byte == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pointer_to_byte = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pointer_to_byte;\n    ulong = find_matching_values_0010300e();\n    pointer_to_byte = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pointer_to_byte = pointer_to_byte + integer;\n  DAT_0010d5b0 = pointer_to_byte;\n  ulong = find_matching_values_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)ulong * 2) != 0) {\n    DAT_0010d5b8 = pointer_to_byte;\n    DAT_0010d5c0 = (uint)ulong;\n  }\n  ulong = ulong & 0xffffffff;\n  while( true ) {\n    integer = (int)ulong;\n    if (integer == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2)) break;\n    ulong = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)integer * 2);\n  }\n  uint = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2);\n  pointer_to_byte = pointer_to_byte;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)integer * 2) + 1) * 2) == 0)\n     || (uint == 0xb0)) goto LAB_0010419f;\n  pointer_to_byte = pointer_to_byte + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  integer = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pointer_to_byte = DAT_0010d588;\n  ulong = (ulong)DAT_0010d5c0;\n  pointer_to_byte = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  ppcharacter9 = ppcharacter9 + 1;\n  local_800 = 3;\n  *ppcharacter9 = DAT_0010d548;\nLAB_001049d1:\n  local_828 = local_828 + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00103c60",
                "filename_cmp",
                "FUN_001033d6",
                "bfd_openw",
                "FUN_001031cf",
                "FUN_00107740",
                "fread",
                "FUN_00105300",
                "FUN_001030ed",
                "FUN_00105bc0",
                "free",
                "ferror",
                "dup",
                "fwrite",
                "printf",
                "FUN_0010315d",
                "fopen",
                "bfd_close",
                "stat",
                "clearerr",
                "FUN_00103df9",
                "malloc",
                "FUN_0010312d",
                "FUN_001031a5",
                "FUN_0010300e",
                "realloc",
                "FUN_00103ba8",
                "bfd_cache_close",
                "xstrdup",
                "FUN_001033b0",
                "bfd_openr",
                "bfd_set_format",
                "FUN_00103ddc",
                "fprintf",
                "fclose",
                "dcgettext",
                "FUN_001032a8",
                "unlink",
                "__errno_location",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_process_archive_script_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "execute_function_chain_00107cc0",
                "lVar1": "index",
                "lVar2": "prevIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionChain",
                "uVar5": "flag"
            },
            "code": "\nvoid executeFunctionChain_00107cc0(void)\n\n{\n  long index;\n  long prevIndex;\n  long tempIndex;\n  long *functionChain;\n  uint flag;\n  \n  functionChain = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      flag = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)flag) {\n        index = (long)(int)flag;\n        flag = flag & 7;\n        (*(code *)functionChain[index + 2])();\n        prevIndex = index + -1;\n        if (-1 < (int)prevIndex) {\n          tempIndex = prevIndex;\n          if (flag != 0) {\n            if (flag != 1) {\n              if (flag != 2) {\n                if (flag != 3) {\n                  if (flag != 4) {\n                    if (flag != 5) {\n                      if (flag != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        prevIndex = index + -2;\n                      }\n                      (*(code *)functionChain[prevIndex + 2])();\n                      prevIndex = prevIndex + -1;\n                    }\n                    (*(code *)functionChain[prevIndex + 2])();\n                    prevIndex = prevIndex + -1;\n                  }\n                  (*(code *)functionChain[prevIndex + 2])();\n                  prevIndex = prevIndex + -1;\n                }\n                (*(code *)functionChain[prevIndex + 2])();\n                prevIndex = prevIndex + -1;\n              }\n              (*(code *)functionChain[prevIndex + 2])();\n              prevIndex = prevIndex + -1;\n            }\n            (*(code *)functionChain[prevIndex + 2])();\n            tempIndex = prevIndex + -1;\n            if ((int)(prevIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "execute_function_chain_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "file_buffer",
                "param_2": "file_size",
                "param_3": "option_1",
                "param_4": "option_2"
            },
            "code": "\nvoid process_archived_files_00105ae0(undefined8 file_buffer,undefined8 file_size,undefined option_1,undefined option_2)\n\n{\n  process_archived_files_00105ae0_00105af0(file_buffer,file_size,option_1,option_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(process_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_and_exit_00107690",
                "param_1": "error_code",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "param_5": "value_5",
                "param_6": "value_6",
                "param_7": "value_7",
                "param_8": "value_8",
                "param_9": "param_ptr",
                "in_AL": "condition",
                "local_d8": "buffer_size",
                "local_d4": "value_0x30",
                "local_d0": "buffer_ptr",
                "local_c8": "local_buffer",
                "local_b8": "error_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "param_1_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_and_exit_00107690(undefined4 error_code,undefined4 value_2,undefined4 value_3,undefined4 value_4,\n                 undefined4 value_5,undefined4 value_6,undefined4 value_7,undefined4 value_8,\n                 undefined8 param_ptr,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char condition;\n  undefined4 buffer_size;\n  undefined4 value_0x30;\n  undefined *buffer_ptr;\n  undefined *local_buffer;\n  undefined error_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (condition != '\\0') {\n    param_1_copy = error_code;\n    param_2_copy = value_2;\n    param_3_copy = value_3;\n    param_4_copy = value_4;\n    param_5_copy = value_5;\n    param_6_copy = value_6;\n    param_7_copy = value_7;\n    param_8_copy = value_8;\n  }\n  buffer_ptr = &stack0x00000008;\n  buffer_size = 8;\n  local_buffer = error_buffer;\n  value_0x30 = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_001078c0(param_ptr,&buffer_size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00102c25",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "bfd_target_list",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010394a",
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extracted_function_00105830",
                "param_1": "inputString",
                "param_2": "paramPointer",
                "param_3": "unusedParam",
                "param_4": "outputParam",
                "lVar1": "pointer",
                "__s": "basenameResult",
                "uVar3": "length",
                "pcVar4": "outputString",
                "bVar5": "byteVar",
                "auVar6": "returnValue",
                "sVar2": "stringLength"
            },
            "code": "\nundefined  [16] extractedFunction_00105830(char *inputString,long paramPointer,undefined8 unusedParam,undefined8 outputParam)\n\n{\n  long pointer;\n  size_t stringLength;\n  char *basenameResult;\n  ulong length;\n  char *outputString;\n  byte byteVar;\n  undefined returnValue [16];\n  \n  byteVar = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    basenameResult = (char *)lbasename();\n    inputString = basenameResult;\n    if ((DAT_0010d5fa != '\\0') && (paramPointer != 0)) {\n      stringLength = strlen(basenameResult);\n      length = (ulong)*(byte *)(*(long *)(paramPointer + 8) + 0x1e);\n      if (length < stringLength) {\n        inputString = (char *)xmalloc(length + 1);\n        pointer = *(long *)(paramPointer + 8);\n        outputString = inputString;\n        for (length = (ulong)*(byte *)(pointer + 0x1e); length != 0; length = length - 1) {\n          *outputString = *basenameResult;\n          basenameResult = basenameResult + (ulong)byteVar * -2 + 1;\n          outputString = outputString + (ulong)byteVar * -2 + 1;\n        }\n        inputString[*(byte *)(pointer + 0x1e)] = '\\0';\n      }\n    }\n  }\n  returnValue._8_8_ = outputParam;\n  returnValue._0_8_ = inputString;\n  return returnValue;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extracted_function_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_file_00107730"
            },
            "code": "\nvoid cleanup_file_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorDescription",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorDescription)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00102f96",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00107c10",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePointer",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileNo",
                "piVar4": "errnoPtr",
                "lVar5": "globalVar"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePointer,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileNo;\n  int *errnoPtr;\n  long globalVar;\n  \n  errnoPtr = __errno_location();\n  globalVar = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (filePointer == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePointer == *(FILE ***)(globalVar + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePointer + 0x1c) = 0;\n    *(undefined *)&filePointer[1]->_flags = 0;\n    *(undefined *)((long)&filePointer[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePointer + 5) = 1;\n    filePointer[2] = filePointer[1];\n    *(undefined4 *)(filePointer + 7) = 0;\n    if (globalVar != 0) {\n      if (filePointer == *(FILE ***)(globalVar + DAT_0010d5a0 * 8)) {\n        extract_function_data_001030ed();\n      }\n      *filePointer = inputFile;\n      *(undefined4 *)((long)filePointer + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePointer = inputFile;\n    *(undefined4 *)((long)filePointer + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePointer + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileNo = fileno(inputFile);\n    fileNo = isatty(fileNo);\n    isTerminal = (uint)(0 < fileNo);\n  }\n  *(uint *)((long)filePointer + 0x24) = isTerminal;\n  *errnoPtr = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "FUN_001030ed",
                "fileno",
                "__errno_location",
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "extract_and_save_data_00105c00",
                "param_1": "input_file_descriptor",
                "param_2": "output_file_path",
                "_Var3": "file_position",
                "uVar4": "bytes_written",
                "sVar5": "write_result",
                "iVar1": "original_errno",
                "iVar2": "current_errno",
                "__fd": "output_file_descriptor",
                "piVar6": "errno_location",
                "auStack_2038": "data_buffer"
            },
            "code": "\nulong extract_and_save_data_00105c00(int input_file_descriptor,char *output_file_path)\n\n{\n  int original_errno;\n  int output_file_descriptor;\n  int current_errno;\n  __off_t file_position;\n  ulong bytes_written;\n  size_t write_result;\n  int *errno_location;\n  undefined data_buffer [8200];\n  \n  if ((-1 < input_file_descriptor) && (file_position = lseek(input_file_descriptor,0,0), file_position == 0)) {\n    output_file_descriptor = open(output_file_path,0x201);\n    if (output_file_descriptor < 0) {\n      bytes_written = close_file_and_handle_errors_00102f55();\n      return bytes_written;\n    }\n    do {\n      bytes_written = read(input_file_descriptor,data_buffer,0x2000);\n      current_errno = (int)bytes_written;\n      if (current_errno < 1) {\n        errno_location = __errno_location();\n        original_errno = *errno_location;\n        close(input_file_descriptor);\n        close(output_file_descriptor);\n        if (current_errno != 0) {\n          *errno_location = original_errno;\n          return 0xffffffff;\n        }\n        return bytes_written & 0xffffffff;\n      }\n      write_result = write(output_file_descriptor,data_buffer,(long)current_errno);\n    } while (write_result == (long)current_errno);\n    errno_location = __errno_location();\n    current_errno = *errno_location;\n    close(input_file_descriptor);\n    close(output_file_descriptor);\n    *errno_location = current_errno;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "open",
                "read",
                "close",
                "lseek",
                "write",
                "FUN_00102f55",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "extract_and_save_data_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_properties_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "error_code_ptr",
                "uVar3": "error_msg_offset",
                "pcVar4": "error_msg",
                "sStack_a8": "file_stats"
            },
            "code": "\nlong check_file_properties_001052a0(char *file_path)\n\n{\n  int status;\n  int *error_code_ptr;\n  undefined8 error_msg_offset;\n  char *error_msg;\n  stat file_stats;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_stats);\n    if (status < 0) {\n      error_code_ptr = __errno_location();\n      if (*error_code_ptr == 2) {\n        error_msg_offset = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_00107920(error_msg_offset,file_path);\n      }\n      else {\n        error_msg = strerror(*error_code_ptr);\n        error_msg_offset = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_00107920(error_msg_offset,file_path,error_msg);\n      }\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x4000) {\n      error_msg_offset = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_00107920(error_msg_offset,file_path);\n    }\n    else if ((file_stats.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stats.st_size) {\n        return file_stats.st_size;\n      }\n      error_msg_offset = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_00107920(error_msg_offset,file_path);\n    }\n    else {\n      error_msg_offset = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_00107920(error_msg_offset,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "check_file_properties_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptionsString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptionsString;\n  \n  emulationOptionsString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptionsString);\n  emulationOptionsString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptionsString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103172",
                "FUN_00103ba8",
                "FUN_00103e95",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "process_archive_file_00103c60",
                "param_1": "file_path",
                "param_2": "is_compressed",
                "cVar1": "check_result",
                "piVar2": "error_code_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "current_file_ptr"
            },
            "code": "\n\n\nvoid process_archive_file_00103c60(char *file_path,int is_compressed)\n\n{\n  char check_result;\n  int *error_code_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *current_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_base_name_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    error_code_ptr = __errno_location();\n    file_path = strerror(*error_code_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      file_path = DAT_0010d560;\n    }\n    else {\n      if (is_compressed != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(file_path,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_result = bfd_check_format(input_archive,2);\n        if (check_result != '\\0') {\n          current_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *current_file_ptr = archived_file;\n            current_file_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,file_path);\n  check_initialized_exit_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "FUN_001057a0",
                "bfd_set_format",
                "strerror",
                "bfd_fdopenw",
                "bfd_openr",
                "fprintf",
                "FUN_0010315d",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_file_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "write_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid writeToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "write_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_1": "file_list",
                "param_2": "archive_file",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "is_bfd_valid",
                "uVar2": "result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_archived_files_00105af0(long *file_list,long archive_file,char flag1,char flag2)\n\n{\n  char is_bfd_valid;\n  uint result;\n  long archived_file;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    is_bfd_valid = bfd_check_format(archive_file,2);\n    if (is_bfd_valid != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(archive_file,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(archive_file,archived_file)) {\n        result = process_archived_files_00105af0(file_list,archived_file,flag1,1);\n        if ((char)result != '\\0') {\n          return_value = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(archive_file + 0xf0) = *file_list;\n  *file_list = archive_file;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105af0",
                "FUN_001028ed",
                "FUN_00105ae0"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_values_0010300e"
            },
            "code": "\nvoid findMatchingValues_0010300e(void)\n\n{\n  bool bVar1;\n  int iVar2;\n  long lVar3;\n  byte bVar4;\n  byte *pbVar5;\n  byte *in_R9;\n  int in_R10D;\n  \n  bVar1 = false;\n  iVar2 = DAT_0010d5d0;\n  for (pbVar5 = DAT_0010d5c8; pbVar5 < DAT_0010d5b0; pbVar5 = pbVar5 + 1) {\n    bVar4 = 1;\n    if (*pbVar5 != 0) {\n      bVar4 = (&DAT_0010ab00)[*pbVar5];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)iVar2 * 2) != 0) {\n      bVar1 = true;\n      in_R9 = pbVar5;\n      in_R10D = iVar2;\n    }\n    while( true ) {\n      lVar3 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)iVar2 * 2) + (uint)bVar4);\n      if (*(short *)(&DAT_0010a440 + lVar3 * 2) == iVar2) break;\n      iVar2 = (int)*(short *)(&DAT_0010a800 + (long)iVar2 * 2);\n      if (0xb0 < iVar2) {\n        bVar4 = (&DAT_0010a7c0)[(int)(uint)bVar4];\n      }\n    }\n    iVar2 = (int)*(short *)(&DAT_0010a240 + lVar3 * 2);\n  }\n  if (bVar1) {\n    DAT_0010d5b8 = in_R9;\n    DAT_0010d5c0 = in_R10D;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_values_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_00102ba1",
                "unaff_RBP": "bufferAddress",
                "unaff_retaddr": "returnAddress",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] freeAndReturn_00102ba1(void)\n\n{\n  undefined returnValue [16];\n  void *bufferAddress;\n  ulong returnAddress;\n  \n  free(bufferAddress);\n  returnValue._8_8_ = 0;\n  returnValue._0_8_ = returnAddress;\n  return returnValue << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_save_from_binary_00107740",
                "param_1": "file_info",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "piVar3": "error_number",
                "pcVar4": "error_message",
                "uVar5": "error_text",
                "pplVar6": "pointer_param",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "loop_counter",
                "plVar8": "current_entry",
                "puVar9": "local_array",
                "uVar10": "bytes_processed",
                "sVar11": "bytes_to_process",
                "local_c8": "local_values",
                "_Stack_b0": "permission_mode",
                "uStack_98": "file_size",
                "uStack_80": "file_time_1",
                "uStack_70": "file_time_2"
            },
            "code": "\n\n\nlong * extract_and_save_from_binary_00107740(long **file_info)\n\n{\n  int comparison_result;\n  int error_code;\n  int *error_number;\n  char *error_message;\n  undefined8 error_text;\n  long **pointer_param;\n  void *buffer;\n  size_t bytes_read;\n  long loop_counter;\n  long *current_entry;\n  undefined4 *local_array;\n  ulong bytes_processed;\n  size_t bytes_to_process;\n  undefined4 local_values [6];\n  __mode_t permission_mode;\n  ulong file_size;\n  undefined8 file_time_1;\n  undefined8 file_time_2;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array = local_values;\n    for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *local_array = 0;\n      local_array = local_array + 1;\n    }\n  }\n  pointer_param = (long **)file_info[0x1d];\n  if ((long **)file_info[0x1d] == (long **)0x0) {\n    pointer_param = file_info;\n  }\n  error_code = (*(code *)pointer_param[1][0x3d])(file_info,local_values);\n  if (error_code != 0) {\n    current_entry = *file_info;\n    error_text = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_and_exit_00107690(error_text,current_entry);\n    error_text = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_entry != 0; current_entry = (long *)(*current_entry + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_entry != (undefined8 *)0x0; current_entry = (long *)(*current_entry + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_entry,error_text);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_entry;\n          }\n          return (long *)(*current_entry + 0xf0);\n        }\n      }\n    }\n    return current_entry;\n  }\n  bfd_seek(file_info,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_output_path_00105a20(*file_info);\n  }\n  else {\n    bytes_processed = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_process = file_size - bytes_processed;\n      if (0x2000 < bytes_to_process) {\n        bytes_to_process = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_process,file_info);\n      if (bytes_to_process != bytes_read) {\nLAB_00102c78:\n        file_info = (long **)*file_info[0x1d];\n        error_text = dcgettext(0,\"%s is not a valid archive\",5);\n        print_and_exit_00107690(error_text,file_info);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_output_path_00105a20(*file_info);\n      }\n      bytes_to_process = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_process != bytes_read) {\n        error_number = __errno_location();\n        error_message = strerror(*error_number);\n        print_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_processed = bytes_processed + bytes_read;\n    } while (bytes_processed < file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,permission_mode);\n  if (_DAT_0010d600 != 0) {\n    file_time_1 = file_time_2;\n    set_file_time_00107c80(error_message,local_values);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_save_from_binary_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "unaff_RBX": "fileInfo",
                "unaff_RBP": "outputFile",
                "unaff_R12": "isHexadecimal",
                "unaff_R13": "fileContent",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "permissionsChar1",
                "cStack0000000000000017": "permissionsChar2",
                "in_stack_00000018": "permissionsChar3",
                "cStack0000000000000019": "permissionsChar4",
                "cStack000000000000001a": "permissionsChar5",
                "cStack000000000000001b": "permissionsChar6",
                "cStack000000000000001c": "permissionsChar7",
                "cStack000000000000001d": "permissionsChar8",
                "cStack000000000000001e": "permissionsChar9",
                "uStack000000000000001f": "isExecutable",
                "uStack0000000000000068": "filePermissions",
                "uStack000000000000006c": "numberOfLinks",
                "in_stack_00000070": "fileSize",
                "in_stack_00000080": "modifiedTime",
                "__format": "errorMessage"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte bVar1;\n  char cVar2;\n  int iVar3;\n  char *errorMessage;\n  uint uVar4;\n  char **fileInfo;\n  FILE *outputFile;\n  long isHexadecimal;\n  void *fileContent;\n  int fileDescriptor;\n  undefined fileTypeChar;\n  char permissionsChar1;\n  char permissionsChar2;\n  char permissionsChar3;\n  char permissionsChar4;\n  char permissionsChar5;\n  char permissionsChar6;\n  char permissionsChar7;\n  char permissionsChar8;\n  char permissionsChar9;\n  undefined isExecutable;\n  uint filePermissions;\n  uint numberOfLinks;\n  uint fileSize;\n  undefined8 modifiedTime;\n  \n  do {\n    bVar1 = exit_with_error_message_00107c10();\n    *(uint *)((long)fileInfo + 0x44) = *(uint *)((long)fileInfo + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(isHexadecimal + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInfo + 0x49) = bVar1 | 0x10;\n    }\n    cVar2 = bfd_set_archive_head();\n  } while (cVar2 == '\\0');\n  dup(fileDescriptor);\n  cVar2 = bfd_close();\n  if (cVar2 != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    iVar3 = copy_and_delete_file_00105bc0();\n    if (iVar3 == 0) {\n      free(fileContent);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  exit_with_error_message_00107c10();\n  errorMessage = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorMessage);\n  uVar4 = filePermissions & 0xf000;\n  if (uVar4 == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (uVar4 == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (uVar4 == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (uVar4 == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (uVar4 == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (uVar4 != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  permissionsChar1 = (-((filePermissions & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionsChar2 = (-((filePermissions & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionsChar3 = (-((filePermissions & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionsChar4 = (-((filePermissions & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionsChar5 = (-((filePermissions & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionsChar6 = (-((filePermissions & 8) == 0) & 0xb5U) + 0x78;\n  permissionsChar7 = (-((filePermissions & 4) == 0) & 0xbbU) + 0x72;\n  permissionsChar8 = (-((filePermissions & 2) == 0) & 0xb6U) + 0x77;\n  permissionsChar9 = (-((filePermissions & 1) == 0) & 0xb5U) + 0x78;\n  if ((filePermissions & 0x800) != 0) {\n    if (permissionsChar3 == 'x') {\n      permissionsChar3 = 's';\n    }\n    else {\n      permissionsChar3 = 'S';\n    }\n  }\n  if ((filePermissions & 0x400) != 0) {\n    if (permissionsChar6 == 'x') {\n      permissionsChar6 = 's';\n    }\n    else {\n      permissionsChar6 = 'S';\n    }\n  }\n  if ((filePermissions & 0x200) != 0) {\n    if (permissionsChar9 == 'x') {\n      permissionsChar9 = 't';\n    }\n    else {\n      permissionsChar9 = 'T';\n    }\n  }\n  isExecutable = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)numberOfLinks,\n          (ulong)fileSize,modifiedTime,&stack0x00000020,(ulong)filePermissions)\n  ;\n  fputs(*fileInfo,outputFile);\n  if ((char)isHexadecimal != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "free",
                "bfd_set_archive_head",
                "bfd_close",
                "FUN_00107c10",
                "dup",
                "xexit",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "inputFilePath",
                "param_2": "flags",
                "uVar1": "undefinedVar1",
                "bVar2": "byteVar2",
                "iVar3": "fileCmpResult",
                "sVar4": "size",
                "piVar5": "pointerVar5",
                "pcVar6": "currentFileName",
                "pcVar7": "basenameVar1",
                "ppcVar8": "currentNamePtr",
                "uVar9": "undefinedVar9",
                "lVar10": "currentPtr",
                "__s": "basenameVar2",
                "__s_00": "basenameVar3",
                "lVar11": "tempPtr",
                "uVar12": "undefinedVar12",
                "uVar13": "ulongVar13",
                "unaff_RBX": "currentFilePath",
                "ppcVar14": "currentPtr2",
                "unaff_RBP": "filePaths",
                "unaff_R12": "currentPtr3",
                "unaff_R13D": "flagVar",
                "ppcVar15": "currentPtr4",
                "unaff_R14": "listPtr",
                "bVar16": "boolVar",
                "bVar17": "byteVar17",
                "param_7": "paramPtr",
                "param_9": "outputFilePath",
                "in_stack_00000078": "stackVar1",
                "in_stack_00000108": "stackVar2"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 inputFilePath,long flags)\n\n{\n  undefined undefinedVar1;\n  byte byteVar2;\n  int fileCmpResult;\n  size_t size;\n  int *pointerVar5;\n  char *currentFileName;\n  char *basenameVar1;\n  char **currentNamePtr;\n  undefined8 undefinedVar9;\n  long currentPtr;\n  char *basenameVar2;\n  char *basenameVar3;\n  long tempPtr;\n  undefined8 undefinedVar12;\n  ulong ulongVar13;\n  char *currentFilePath;\n  char **currentPtr2;\n  char **filePaths;\n  char **currentPtr3;\n  uint flagVar;\n  char **currentPtr4;\n  long listPtr;\n  bool boolVar;\n  byte byteVar17;\n  char **paramPtr;\n  undefined8 outputFilePath;\n  long stackVar1;\n  long stackVar2;\n  \n  byteVar17 = 0;\ncode_r0x001028ed:\n  exit_with_error_message_00107c10(currentFilePath,flags);\nLAB_001028f5:\n  undefinedVar12 = DAT_0010d638;\n  if (flagVar != 3) {\n    while( true ) {\n      if ((undefined8 *)*currentPtr3 == (undefined8 *)0x0) goto LAB_0010571f;\n      fileCmpResult = filename_cmp(*(undefined8 *)*currentPtr3,undefinedVar12);\n      if (fileCmpResult == 0) break;\n      currentPtr3 = (char **)(*currentPtr3 + 0xf0);\n    }\n    if (flagVar != 2) goto LAB_0010571f;\n    currentPtr3 = (char **)(*currentPtr3 + 0xf0);\n    goto LAB_0010571f;\n  }\n  currentPtr = *(long *)(listPtr + 0xf0);\n  if (*(long *)(listPtr + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    tempPtr = currentPtr;\n    currentPtr = *(long *)(tempPtr + 0xf0);\n  } while (currentPtr != 0);\n  currentPtr3 = (char **)(tempPtr + 0xf0);\n  currentFilePath = *filePaths;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefinedVar1 = DAT_0010d5f8;\n  flagVar = (uint)(DAT_0010d60c != 0);\n  flags = bfd_openr(currentFilePath,DAT_0010d5f0);\n  if (flags != 0) {\n    filePaths = filePaths + 1;\n    byteVar2 = process_archived_files_00105af0(currentPtr3,flags,flagVar,undefinedVar1);\n    outputFilePath._6_1_ = outputFilePath._6_1_ | byteVar2;\n    currentFileName = *filePaths;\n    do {\n      if (currentFileName == (char *)0x0) {\n        if (outputFilePath._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefinedVar12 = write_archive_to_file_001058b0();\n        return undefinedVar12;\n      }\n      currentPtr2 = *(char ***)(listPtr + 0xf0);\n      currentPtr3 = paramPtr;\n      if (outputFilePath._7_1_ == '\\0') {\n        currentPtr4 = paramPtr;\n        if (currentPtr2 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              basenameVar2 = (char *)lbasename(*currentPtr2);\n              basenameVar1 = basenameVar2;\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basenameVar2);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(listPtr + 8) + 0x1e);\n                if (ulongVar13 < size) {\n                  basenameVar1 = (char *)xmalloc(ulongVar13 + 1);\n                  currentPtr = *(long *)(listPtr + 8);\n                  currentFileName = basenameVar1;\n                  for (ulongVar13 = (ulong)*(byte *)(currentPtr + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *currentFileName = *basenameVar2;\n                    basenameVar2 = basenameVar2 + (ulong)byteVar17 * -2 + 1;\n                    currentFileName = currentFileName + (ulong)byteVar17 * -2 + 1;\n                  }\n                  basenameVar1[*(byte *)(currentPtr + 0x1e)] = '\\0';\n                }\n                currentFileName = *filePaths;\n                basenameVar2 = basenameVar1;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              currentFileName = *filePaths;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              basenameVar3 = (char *)lbasename(currentFileName);\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(basenameVar3);\n                ulongVar13 = (ulong)*(byte *)(*(long *)(listPtr + 8) + 0x1e);\n                currentFileName = basenameVar3;\n                basenameVar2 = basenameVar1;\n                if (ulongVar13 < size) {\n                  currentFileName = (char *)xmalloc(ulongVar13 + 1);\n                  currentPtr = *(long *)(listPtr + 8);\n                  basenameVar1 = currentFileName;\n                  for (ulongVar13 = (ulong)*(byte *)(currentPtr + 0x1e); ulongVar13 != 0; ulongVar13 = ulongVar13 - 1) {\n                    *basenameVar1 = *basenameVar3;\n                    basenameVar3 = basenameVar3 + (ulong)byteVar17 * -2 + 1;\n                    basenameVar1 = basenameVar1 + (ulong)byteVar17 * -2 + 1;\n                  }\n                  currentFileName[*(byte *)(currentPtr + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              fileCmpResult = filename_cmp(basenameVar3,basenameVar1);\n            }\n            else {\n              currentFileName = *filePaths;\n              basenameVar2 = *currentPtr2;\nLAB_00102980:\n              fileCmpResult = filename_cmp(currentFileName,basenameVar2);\n            }\n            if ((fileCmpResult == 0) && (currentPtr2[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                fileCmpResult = stat(*filePaths,(stat *)&stack0x000000b0);\n                if (fileCmpResult != 0) {\n                  pointerVar5 = __errno_location();\n                  if (*pointerVar5 != 2) {\n                    exit_with_error_message_00107c10(*filePaths);\nLAB_00102b7e:\n                    currentFileName = *currentPtr2;\n                    undefinedVar12 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_and_exit_00107690(undefinedVar12,currentFileName);\n                    free(filePaths);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                currentNamePtr = (char **)currentPtr2[0x1d];\n                if ((char **)currentPtr2[0x1d] == (char **)0x0) {\n                  currentNamePtr = currentPtr2;\n                }\n                fileCmpResult = (**(code **)(currentNamePtr[1] + 0x1e8))(currentPtr2,&stack0x00000020);\n                if (fileCmpResult != 0) goto LAB_00102b7e;\n                if (stackVar2 <= stackVar1) goto LAB_0010577e;\n              }\n              undefinedVar12 = find_next_object_position_00105870(paramPtr,2,*currentPtr2);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                currentFileName = *filePaths;\n                boolVar = DAT_0010d60c != 0;\n                currentPtr = bfd_openr(currentFileName,DAT_0010d5f0);\n                if (currentPtr == 0) {\n                  exit_with_error_message_00107c10(currentFileName,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar2 = update_param_and_return_00103172(undefinedVar12,currentPtr,boolVar);\n              }\n              else {\n                undefinedVar9 = extracted_function_00105830(*filePaths);\n                fileCmpResult = filename_cmp(undefinedVar9,\"__.LIBDEP\");\n                if (fileCmpResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar2 = update_param_and_return_00103172(undefinedVar12,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar2 != 0) {\n                *currentPtr4 = *(char **)(*currentPtr4 + 0xf0);\n                outputFilePath._6_1_ = byteVar2;\n              }\n              goto LAB_0010577e;\n            }\n            currentPtr4 = currentPtr2 + 0x1e;\n            currentPtr2 = (char **)currentPtr2[0x1e];\n          } while (currentPtr2 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        flagVar = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        flagVar = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        currentPtr = *(long *)(listPtr + 0xf0);\n        if (*(long *)(listPtr + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      currentFilePath = *filePaths;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefinedVar12 = extracted_function_00105830(currentFilePath);\n      fileCmpResult = filename_cmp(undefinedVar12,\"__.LIBDEP\");\n      if (fileCmpResult != 0) goto code_r0x0010574f;\n      byteVar2 = process_archived_files_00105ae0(currentPtr3,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      outputFilePath._6_1_ = byteVar2 | outputFilePath._6_1_;\nLAB_0010577e:\n      filePaths = filePaths + 1;\n      currentFileName = *filePaths;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  currentFilePath = *filePaths;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "xmalloc",
                "filename_cmp",
                "FUN_00103172",
                "FUN_00105870",
                "strlen",
                "FUN_00107c10",
                "stat",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_00105af0",
                "FUN_00105830",
                "bfd_openr",
                "FUN_001028ed",
                "lbasename",
                "dcgettext",
                "FUN_001058b0",
                "FUN_00105ae0",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "exit": "terminateExecution"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(standardError,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "errno_ptr",
                "uVar2": "error_message"
            },
            "code": "\nundefined8 handle_file_error_001025a0(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  \n  errno_ptr = __errno_location();\n  if (*errno_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_00107920(error_message);\n  }\n  else {\n    strerror(*errno_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_00107920(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_0010284b",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "output_array_size",
                "param_11": "file_permission",
                "param_12": "archive_size",
                "iVar1": "comparison_result",
                "iVar2": "error_code",
                "piVar3": "errno_ptr",
                "pcVar4": "error_message",
                "uVar5": "text_identifier",
                "pplVar6": "pointer_array",
                "__ptr": "buffer_ptr",
                "__n": "read_bytes",
                "lVar7": "loop_counter",
                "unaff_RBX": "file_info_ptr",
                "plVar8": "current_file_ptr",
                "puVar9": "memset_ptr",
                "uVar10": "total_bytes_read",
                "sVar11": "bytes_to_read"
            },
            "code": "\n\n\nlong * extract_and_write_archive_00102c25(void)\n\n{\n  int comparison_result;\n  int error_code;\n  int *errno_ptr;\n  char *error_message;\n  undefined8 text_identifier;\n  long **pointer_array;\n  void *buffer_ptr;\n  size_t read_bytes;\n  long loop_counter;\n  long **file_info_ptr;\n  long *current_file_ptr;\n  undefined4 *memset_ptr;\n  ulong total_bytes_read;\n  size_t bytes_to_read;\n  undefined4 *output_array_size;\n  __mode_t file_permission;\n  ulong archive_size;\n  \n  memset_ptr = output_array_size;\n  for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n    *memset_ptr = 0;\n    memset_ptr = memset_ptr + 1;\n  }\n  pointer_array = (long **)file_info_ptr[0x1d];\n  if ((long **)file_info_ptr[0x1d] == (long **)0x0) {\n    pointer_array = file_info_ptr;\n  }\n  error_code = (*(code *)pointer_array[1][0x3d])();\n  if (error_code != 0) {\n    current_file_ptr = *file_info_ptr;\n    text_identifier = dcgettext(0,\"internal stat error on %s\",5);\n    error_code = print_and_exit_00107690(text_identifier,current_file_ptr);\n    text_identifier = DAT_0010d638;\n    if (error_code == 3) {\n      for (; *current_file_ptr != 0; current_file_ptr = (long *)(*current_file_ptr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_file_ptr != (undefined8 *)0x0; current_file_ptr = (long *)(*current_file_ptr + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*current_file_ptr,text_identifier);\n        if (comparison_result == 0) {\n          if (error_code != 2) {\n            return current_file_ptr;\n          }\n          return (long *)(*current_file_ptr + 0xf0);\n        }\n      }\n    }\n    return current_file_ptr;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_output_path_00105a20(*file_info_ptr);\n  }\n  else {\n    total_bytes_read = 0;\n    buffer_ptr = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_read = archive_size - total_bytes_read;\n      if (0x2000 < bytes_to_read) {\n        bytes_to_read = 0x2000;\n      }\n      read_bytes = bfd_bread(buffer_ptr,bytes_to_read);\n      if (bytes_to_read != read_bytes) {\nLAB_00102c78:\n        file_info_ptr = (long **)*file_info_ptr[0x1d];\n        text_identifier = dcgettext(0,\"%s is not a valid archive\",5);\n        print_and_exit_00107690(text_identifier,file_info_ptr);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_output_path_00105a20(*file_info_ptr);\n      }\n      bytes_to_read = fwrite(buffer_ptr,1,read_bytes,DAT_0010d5d8);\n      if (bytes_to_read != read_bytes) {\n        errno_ptr = __errno_location();\n        error_message = strerror(*errno_ptr);\n        print_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      total_bytes_read = total_bytes_read + read_bytes;\n    } while (total_bytes_read < archive_size);\n    free(buffer_ptr);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permission);\n  if (_DAT_0010d600 != 0) {\n    set_file_time_00107c80(error_message,output_array_size);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_seek",
                "xmalloc",
                "strerror",
                "FUN_00105a20",
                "bfd_bread",
                "chmod",
                "FUN_00107690",
                "free",
                "FUN_00107c80",
                "fclose",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "reverse_string_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "outputString",
                "uVar4": "limit",
                "unaff_RBX": "sourcePointer",
                "unaff_RBP": "stackBasePointer",
                "puVar5": "destinationPointer",
                "bVar6": "increment",
                "auVar7": "result",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] reverseString_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t stringLength;\n  undefined *outputString;\n  ulong limit;\n  undefined *sourcePointer;\n  long stackBasePointer;\n  undefined *destinationPointer;\n  byte increment;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  increment = 0;\n  stringLength = strlen(inputString);\n  limit = (ulong)*(byte *)(*(long *)(stackBasePointer + 8) + 0x1e);\n  outputString = sourcePointer;\n  if (limit < stringLength) {\n    outputString = (undefined *)xmalloc(limit + 1);\n    lVar1 = *(long *)(stackBasePointer + 8);\n    destinationPointer = outputString;\n    for (limit = (ulong)*(byte *)(lVar1 + 0x1e); limit != 0; limit = limit - 1) {\n      *destinationPointer = *sourcePointer;\n      sourcePointer = sourcePointer + (ulong)increment * -2 + 1;\n      destinationPointer = destinationPointer + (ulong)increment * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  result._8_8_ = returnAddress;\n  result._0_8_ = outputString;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "reverse_string_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_00102f08",
                "unaff_RBX": "arrayPointer",
                "unaff_R12": "valuePointer"
            },
            "code": "\nundefined8 printAndAssign_00102f08(void)\n\n{\n  undefined8 *arrayPointer;\n  undefined8 *valuePointer;\n  \n  printf(\"a - %s\\n\",*arrayPointer);\n  arrayPointer[0x1e] = *valuePointer;\n  *valuePointer = arrayPointer;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "param",
                "param_2": "filePaths",
                "param_3": "isArchive",
                "ppcVar1": "currentFilePath",
                "uVar2": "undefinedVar",
                "bVar3": "exitStatus",
                "iVar4": "cmpResult",
                "sVar5": "len",
                "piVar6": "errnoPtr",
                "pcVar7": "currentFileName",
                "pcVar8": "tempFileName",
                "uVar9": "libdepFileName",
                "pcVar10": "fileName",
                "__s": "baseName",
                "lVar11": "prevFilePath",
                "lVar12": "nextFilePath",
                "uVar13": "returnValue",
                "uVar14": "maxLength",
                "ppcVar15": "fileNode",
                "ppcVar16": "currentNode",
                "uVar17": "fileType",
                "ppcVar18": "prevNode",
                "bVar19": "isLink",
                "bVar20": "byteValue",
                "local_15a": "hasModifiedFiles",
                "auStack_158": "charArray",
                "lStack_100": "latestModificationTime",
                "sStack_c8": "fileStatus"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long param,char **filePaths,char isArchive)\n\n{\n  char **currentFilePath;\n  undefined undefinedVar;\n  byte exitStatus;\n  int cmpResult;\n  size_t len;\n  int *errnoPtr;\n  char *currentFileName;\n  char *tempFileName;\n  undefined8 libdepFileName;\n  char *fileName;\n  char *baseName;\n  long prevFilePath;\n  long nextFilePath;\n  undefined8 returnValue;\n  ulong maxLength;\n  char **fileNode;\n  char **currentNode;\n  uint fileType;\n  char **prevNode;\n  bool isLink;\n  byte byteValue;\n  byte hasModifiedFiles;\n  undefined charArray [88];\n  long latestModificationTime;\n  stat fileStatus;\n  \n  byteValue = 0;\n  currentFilePath = (char **)(param + 0xf0);\n  hasModifiedFiles = 0;\n  if (filePaths == (char **)0x0) {\n    returnValue = initialize_data_00102943();\n    return returnValue;\n  }\n  do {\n    fileName = *filePaths;\njoined_r0x001055aa:\n    if (fileName == (char *)0x0) {\n      if (hasModifiedFiles != 0) {\n        returnValue = write_archive_to_file_001058b0(param);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    fileNode = *(char ***)(param + 0xf0);\n    currentNode = currentFilePath;\n    if (isArchive != '\\0') {\nLAB_0010564c:\n      fileType = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextFilePath = *(long *)(param + 0xf0);\n      if (*(long *)(param + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        prevFilePath = nextFilePath;\n        nextFilePath = *(long *)(prevFilePath + 0xf0);\n      } while (nextFilePath != 0);\n      currentNode = (char **)(prevFilePath + 0xf0);\n      fileName = *filePaths;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = extracted_function_00105830(fileName,param);\n          cmpResult = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (cmpResult == 0) {\n            exitStatus = process_archived_files_00105ae0(currentNode,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            hasModifiedFiles = exitStatus | hasModifiedFiles;\n            goto LAB_0010577e;\n          }\n          fileName = *filePaths;\n        }\n        undefinedVar = DAT_0010d5f8;\n        isLink = DAT_0010d60c != 0;\n        nextFilePath = bfd_openr(fileName,DAT_0010d5f0);\n        if (nextFilePath != 0) {\n          filePaths = filePaths + 1;\n          exitStatus = process_archived_files_00105af0(currentNode,nextFilePath,(uint)isLink,undefinedVar);\n          hasModifiedFiles = hasModifiedFiles | exitStatus;\n          fileName = *filePaths;\n          goto joined_r0x001055aa;\n        }\n        exit_with_error_message_00107c10(fileName,0);\n        fileType = (uint)isLink;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (fileType == 3) {\n          nextFilePath = *(long *)(param + 0xf0);\n          if (*(long *)(param + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentNode != (undefined8 *)0x0;\n              currentNode = (char **)(*currentNode + 0xf0)) {\n            cmpResult = filename_cmp(*(undefined8 *)*currentNode,returnValue);\n            if (cmpResult == 0) {\n              if (fileType == 2) {\n                currentNode = (char **)(*currentNode + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        fileName = *filePaths;\n      } while( true );\n    }\n    prevNode = currentFilePath;\n    if (fileNode == (char **)0x0) {\n      fileType = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      fileName = (char *)lbasename(*fileNode);\n      tempFileName = fileName;\n      if (DAT_0010d5fa != '\\0') {\n        len = strlen(fileName);\n        maxLength = (ulong)*(byte *)(*(long *)(param + 8) + 0x1e);\n        if (maxLength < len) {\n          tempFileName = (char *)xmalloc(maxLength + 1);\n          nextFilePath = *(long *)(param + 8);\n          currentFileName = tempFileName;\n          for (maxLength = (ulong)*(byte *)(nextFilePath + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *currentFileName = *fileName;\n            fileName = fileName + (ulong)byteValue * -2 + 1;\n            currentFileName = currentFileName + (ulong)byteValue * -2 + 1;\n          }\n          tempFileName[*(byte *)(nextFilePath + 0x1e)] = '\\0';\n        }\n        currentFileName = *filePaths;\n        fileName = tempFileName;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFileName = *filePaths;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      baseName = (char *)lbasename(currentFileName);\n      if (DAT_0010d5fa != '\\0') {\n        len = strlen(baseName);\n        maxLength = (ulong)*(byte *)(*(long *)(param + 8) + 0x1e);\n        currentFileName = baseName;\n        fileName = tempFileName;\n        if (maxLength < len) {\n          currentFileName = (char *)xmalloc(maxLength + 1);\n          nextFilePath = *(long *)(param + 8);\n          tempFileName = currentFileName;\n          for (maxLength = (ulong)*(byte *)(nextFilePath + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *tempFileName = *baseName;\n            baseName = baseName + (ulong)byteValue * -2 + 1;\n            tempFileName = tempFileName + (ulong)byteValue * -2 + 1;\n          }\n          currentFileName[*(byte *)(nextFilePath + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      cmpResult = filename_cmp(baseName,tempFileName);\n      if (cmpResult == 0) goto LAB_00102993;\nLAB_00105639:\n      prevNode = fileNode + 0x1e;\n      fileNode = (char **)fileNode[0x1e];\n      if (fileNode == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFileName = *filePaths;\n    fileName = *fileNode;\nLAB_00102980:\n    cmpResult = filename_cmp(currentFileName,fileName);\n    if (cmpResult != 0) goto LAB_00105639;\nLAB_00102993:\n    if (fileNode[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      cmpResult = stat(*filePaths,&fileStatus);\n      if (cmpResult != 0) {\n        errnoPtr = __errno_location();\n        if (*errnoPtr != 2) {\n          exit_with_error_message_00107c10(*filePaths);\nLAB_00102b7e:\n          fileName = *fileNode;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          print_and_exit_00107690(returnValue,fileName);\n          free(filePaths);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentNode = (char **)fileNode[0x1d];\n      if ((char **)fileNode[0x1d] == (char **)0x0) {\n        currentNode = fileNode;\n      }\n      cmpResult = (**(code **)(currentNode[1] + 0x1e8))(fileNode,charArray);\n      if (cmpResult != 0) goto LAB_00102b7e;\n      if (fileStatus.st_mtim.tv_sec <= latestModificationTime) goto LAB_0010577e;\n    }\n    returnValue = find_next_object_position_00105870(currentFilePath,2,*fileNode);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      fileName = *filePaths;\n      isLink = DAT_0010d60c != 0;\n      nextFilePath = bfd_openr(fileName,DAT_0010d5f0);\n      if (nextFilePath == 0) {\n        exit_with_error_message_00107c10(fileName,0);\n        goto LAB_00102b3e;\n      }\n      exitStatus = update_param_and_return_00103172(returnValue,nextFilePath,isLink);\n    }\n    else {\n      libdepFileName = extracted_function_00105830(*filePaths,param);\n      cmpResult = filename_cmp(libdepFileName,\"__.LIBDEP\");\n      if (cmpResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      exitStatus = update_param_and_return_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (exitStatus != 0) {\n      *prevNode = *(char **)(*prevNode + 0xf0);\n      hasModifiedFiles = exitStatus;\n    }\nLAB_0010577e:\n    filePaths = filePaths + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 83000,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}