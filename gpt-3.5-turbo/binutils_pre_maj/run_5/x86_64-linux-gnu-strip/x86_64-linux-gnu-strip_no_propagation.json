{
    "functions": {
        "FUN_00113dfe": {
            "renaming": {
                "FUN_00113dfe": "update_memory_00113dfe",
                "param_1": "address",
                "param_2": "value",
                "lVar1": "result"
            },
            "code": "\nvoid updateMemory_00113dfe(undefined4 address,undefined value)\n\n{\n  long result;\n  \n  result = FUN_00112904(3,address);\n  if (result != 0) {\n    *(undefined *)(result + 0x10) = value;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113dfe",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "update_memory_00113dfe"
        },
        "bfd_get_mach": {
            "renaming": {},
            "code": "\nvoid bfd_get_mach(void)\n\n{\n  bfd_get_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_get_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104650",
            "calling": [
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_mach"
        },
        "bfd_close_all_done": {
            "renaming": {},
            "code": "\nvoid bfd_close_all_done(void)\n\n{\n  bfd_close_all_done();\n  return;\n}\n\n",
            "called": [
                "bfd_close_all_done"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104900",
            "calling": [
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close_all_done"
        },
        "bfd_get_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_contents(void)\n\n{\n  bfd_get_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104260",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_contents"
        },
        "FUN_0010ab4d": {
            "renaming": {
                "FUN_0010ab4d": "append_string_to_global_0010ab4d",
                "param_2": "input_string",
                "uVar1": "global_ptr",
                "lVar2": "global_ptr_temp",
                "auVar3": "result",
                "sVar4": "input_len",
                "pcVar5": "global_char_ptr",
                "sVar6": "current_len",
                "auVar7": "return_value"
            },
            "code": "\nundefined  [16] appendStringToGlobal_0010ab4d(long param_1,char *input_string,undefined8 param_3,undefined8 param_4)\n\n{\n  ulong global_ptr;\n  long global_ptr_temp;\n  undefined result [16];\n  size_t input_len;\n  char *global_char_ptr;\n  size_t current_len;\n  undefined return_value [16];\n  \n  global_ptr = *(ulong *)(param_1 + 0x60);\n  if ((global_ptr != 0) && (*(long *)(global_ptr + 0x20) != 0)) {\n    global_char_ptr = *(char **)(global_ptr + 0x30);\n    input_len = strlen(input_string);\n    if (global_char_ptr == (char *)0x0) {\n      global_char_ptr = (char *)xmalloc(input_len + 3);\n      *global_char_ptr = '\\0';\n    }\n    else {\n      current_len = strlen(global_char_ptr);\n      global_char_ptr = (char *)xrealloc(global_char_ptr,input_len + 4 + current_len);\n    }\n    input_len = strlen(global_char_ptr);\n    sprintf(global_char_ptr + input_len,\"%s::\",input_string);\n    global_ptr_temp = *(long *)(param_1 + 0x60);\n    *(char **)(global_ptr_temp + 0x30) = global_char_ptr;\n    return_value._1_7_ = (undefined7)((ulong)global_ptr_temp >> 8);\n    return_value[0] = 1;\n    return_value._8_8_ = param_4;\n    return return_value;\n  }\n  result._8_8_ = 0;\n  result._0_8_ = global_ptr;\n  return result << 0x40;\n}\n\n",
            "called": [
                "xmalloc",
                "xrealloc",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ab4d",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_string_to_global_0010ab4d"
        },
        "FUN_0010c218": {
            "renaming": {
                "FUN_0010c218": "process_file_name_type_0010c218",
                "param_1": "file_info",
                "param_2": "param_check1",
                "param_3": "param_check2",
                "uVar1": "error_message",
                "lVar2": "result",
                "pauVar3": "ptr_alloc",
                "lVar4": "file_ptr"
            },
            "code": "\n\n\nlong process_file_name_type_0010c218(long file_info,long param_check1,long param_check2)\n\n{\n  undefined8 error_message;\n  long result;\n  undefined (*ptr_alloc) [16];\n  long file_ptr;\n  \n  if ((param_check1 != 0) && (param_check2 != 0)) {\n    if ((*(long *)(file_info + 8) == 0) || (*(long *)(file_info + 0x10) == 0)) {\n      error_message = dcgettext(0,\"debug_name_type: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",error_message);\n    }\n    else {\n      result = FUN_00112904(0x16,0);\n      if (result != 0) {\n        ptr_alloc = (undefined (*) [16])xmalloc(0x10);\n        file_ptr = *(long *)(file_info + 0x10);\n        *ptr_alloc = ZEXT816(0);\n        *(long *)(*ptr_alloc + 8) = param_check2;\n        *(undefined (**) [16])(result + 0x10) = ptr_alloc;\n        file_ptr = FUN_00112925(file_ptr + 0x10,param_check1,0,3);\n        if (file_ptr != 0) {\n          *(long *)(file_ptr + 0x20) = result;\n          *(long *)*ptr_alloc = file_ptr;\n          return result;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c218",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010dac0",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "process_file_name_type_0010c218"
        },
        "strncmp": {
            "renaming": {},
            "code": "\n\n\nint strncmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040e0",
            "calling": [
                "FUN_00113fb0",
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "strncmp"
        },
        "FUN_00116b90": {
            "renaming": {
                "FUN_00116b90": "FUNC_00116b90"
            },
            "code": "\n\n\nuint FUNC_00116b90(uint param_1,char **param_2)\n\n{\n  byte *pbVar1;\n  byte bVar2;\n  undefined8 uVar3;\n  bool bVar4;\n  bool bVar5;\n  undefined *puVar6;\n  byte bVar7;\n  char cVar8;\n  int iVar9;\n  uint uVar10;\n  int iVar11;\n  undefined4 uVar12;\n  int iVar13;\n  FILE *pFVar14;\n  size_t sVar15;\n  byte *__s;\n  size_t sVar16;\n  byte *__ptr;\n  long lVar17;\n  char **ppcVar18;\n  long *__src;\n  char **ppcVar19;\n  undefined8 *puVar20;\n  char *__template;\n  FILE *pFVar21;\n  undefined8 uVar22;\n  FILE **ppFVar23;\n  undefined8 uVar24;\n  int *piVar25;\n  char *pcVar26;\n  ulong uVar27;\n  byte *pbVar28;\n  undefined **ppuVar29;\n  long lVar30;\n  byte *pbVar31;\n  char *pcVar32;\n  FILE *pFVar33;\n  char *pcVar34;\n  FILE *unaff_R12;\n  int iVar35;\n  uint uVar36;\n  char *unaff_R13;\n  byte bVar37;\n  FILE *pFVar38;\n  bool bVar39;\n  FILE *local_130;\n  FILE *local_120;\n  size_t local_118;\n  ulong local_110;\n  long *local_108;\n  FILE *local_d8;\n  FILE *local_d0;\n  undefined local_c8 [152];\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00127600 = *param_2;\n  xmalloc_set_program_name();\n  ppcVar18 = param_2;\n  if (1 < (int)param_1) {\n    local_120 = (FILE *)0x7d0;\n    unaff_R13 = (char *)(ulong)param_1;\n    unaff_R12 = (FILE *)0x1;\n    iVar11 = 0;\n    do {\n      iVar13 = (int)unaff_R12;\n      lVar30 = (long)iVar13;\n      iVar35 = (int)unaff_R13;\n      if (*ppcVar18[lVar30] == '@') {\n        uVar10 = (int)local_120 - 1;\n        local_120 = (FILE *)(ulong)uVar10;\n        if (uVar10 == 0) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: too many @-files encountered\\n\";\nLAB_00118365:\n          fprintf(_stderr,pcVar26,pcVar32);\n                    \n          xexit(1);\n        }\n        pcVar32 = ppcVar18[lVar30] + 1;\n        iVar9 = stat(pcVar32,(stat *)local_c8);\n        if (iVar9 < 0) goto LAB_00116fd0;\n        if ((local_c8._24_4_ & 0xf000) == 0x4000) {\n          pcVar32 = *ppcVar18;\n          pcVar26 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00118365;\n        }\n        pFVar14 = fopen(pcVar32,\"r\");\n        if (pFVar14 == (FILE *)0x0) goto LAB_00116fd0;\n        iVar9 = fseek(pFVar14,0,2);\n        if (((iVar9 == -1) || (sVar15 = ftell(pFVar14), sVar15 == 0xffffffffffffffff)) ||\n           (iVar9 = fseek(pFVar14,0,0), iVar9 == -1)) {\nLAB_00117070:\n          fclose(pFVar14);\n          if (iVar13 + 1 < iVar35) goto LAB_00116fde;\n          goto LAB_00117086;\n        }\n        __s = (byte *)xmalloc(sVar15 + 1);\n        sVar16 = fread(__s,1,sVar15,pFVar14);\n        if ((sVar15 != sVar16) && (iVar9 = ferror(pFVar14), iVar9 != 0)) {\n          free(__s);\n          goto LAB_00117070;\n        }\n        __s[sVar16] = 0;\n        bVar7 = *__s;\n        pbVar28 = __s;\n        if (bVar7 != 0) {\nLAB_00116d58:\n          if (((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) goto LAB_00116d48;\n          sVar15 = strlen((char *)__s);\n          __ptr = (byte *)xmalloc(sVar15 + 1);\n          __src = (long *)0x0;\n          iVar9 = 0;\n          bVar39 = false;\n          bVar5 = false;\n          bVar4 = false;\n          local_110 = 0;\n          pbVar28 = __s;\n          do {\n            while (((&_sch_istable)[(ulong)*pbVar28 * 2] & 0x40) != 0) {\n              pbVar28 = pbVar28 + 1;\n            }\n            if ((iVar9 == 0) || (iVar9 + -1 <= (int)local_110)) {\n              if (__src == (long *)0x0) {\n                iVar9 = 8;\n                __src = (long *)xmalloc(0x40);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n              else {\n                iVar9 = iVar9 * 2;\n                __src = (long *)xrealloc(__src,(long)iVar9 << 3);\n                local_108 = __src + local_110;\n                *local_108 = 0;\n              }\n            }\n            else {\n              local_108 = __src + local_110;\n            }\n            bVar7 = *pbVar28;\n            pbVar31 = __ptr;\n            while (bVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)bVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(bVar5 | bVar4 | bVar39))) {\n                  bVar4 = false;\n                  bVar39 = false;\n                  bVar5 = false;\n                  goto LAB_00116e3f;\n                }\n                if (!bVar4) break;\n                pbVar28 = pbVar28 + 1;\n                *pbVar31 = bVar7;\n                pbVar31 = pbVar31 + 1;\n                bVar4 = false;\n                bVar7 = *pbVar28;\n                if (bVar7 == 0) goto LAB_00116e3f;\n              }\n              if (bVar7 == 0x5c) {\n                bVar4 = true;\n              }\n              else if (bVar5) {\n                if (bVar7 == 0x27) {\n                  bVar5 = false;\n                }\n                else {\nLAB_00116fb1:\n                  *pbVar31 = bVar7;\n                  pbVar31 = pbVar31 + 1;\n                }\n              }\n              else if (bVar39) {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = false;\n              }\n              else if (bVar7 == 0x27) {\n                bVar5 = true;\n              }\n              else {\n                if (bVar7 != 0x22) goto LAB_00116fb1;\n                bVar39 = true;\n              }\n              pbVar1 = pbVar28 + 1;\n              pbVar28 = pbVar28 + 1;\n              bVar7 = *pbVar1;\n            }\nLAB_00116e3f:\n            *pbVar31 = 0;\n            lVar17 = xstrdup(__ptr);\n            *local_108 = lVar17;\n            __src[local_110 + 1] = 0;\n            bVar7 = *pbVar28;\n            bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            while ((bVar2 & 0x40) != 0) {\n              bVar7 = pbVar28[1];\n              pbVar28 = pbVar28 + 1;\n              bVar2 = (&_sch_istable)[(ulong)bVar7 * 2];\n            }\n            local_110 = local_110 + 1;\n          } while (bVar7 != 0);\n          free(__ptr);\n          ppcVar19 = ppcVar18;\n          if (param_2 == ppcVar18) goto LAB_001172ad;\n          goto LAB_00116ed7;\n        }\nLAB_0011728f:\n        __src = (long *)xmalloc(8);\n        *__src = 0;\n        if (param_2 == ppcVar18) {\nLAB_001172ad:\n          if (*ppcVar18 == (char *)0x0) {\n            iVar9 = 0;\n          }\n          else {\n            lVar17 = 1;\n            do {\n              iVar9 = (int)lVar17;\n              ppcVar19 = ppcVar18 + lVar17;\n              lVar17 = lVar17 + 1;\n            } while (*ppcVar19 != (char *)0x0);\n          }\n          lVar17 = 0;\n          ppcVar19 = (char **)xmalloc((long)(iVar9 + 1) << 3);\n          pcVar32 = *ppcVar18;\n          while (pcVar32 != (char *)0x0) {\n            uVar24 = xstrdup();\n            *(undefined8 *)((long)ppcVar19 + lVar17) = uVar24;\n            lVar17 = lVar17 + 8;\n            pcVar32 = *(char **)((long)ppcVar18 + lVar17);\n          }\n          *(undefined8 *)((long)ppcVar19 + lVar17) = 0;\nLAB_00116ed7:\n          ppcVar18 = ppcVar19;\n          if (*__src == 0) goto LAB_00117768;\n          lVar17 = 0;\n          do {\n            lVar17 = lVar17 + 1;\n          } while (__src[lVar17] != 0);\n          local_118 = lVar17 * 8;\n        }\n        else {\nLAB_00117768:\n          lVar17 = 0;\n          local_118 = 0;\n        }\n        free(ppcVar18[lVar30]);\n        ppcVar18 = (char **)xrealloc(ppcVar18,(lVar17 + 1 + (long)iVar35) * 8);\n        uVar36 = iVar35 + -1 + (int)lVar17;\n        unaff_R13 = (char *)(ulong)uVar36;\n        memmove(ppcVar18 + lVar30 + lVar17,ppcVar18 + 1 + lVar30,(long)(iVar35 - iVar13) << 3);\n        memcpy(ppcVar18 + lVar30,__src,local_118);\n        free(__src);\n        free(__s);\n        fclose(pFVar14);\n        uVar10 = iVar11 + 1;\n        unaff_R12 = (FILE *)(lVar30 * 8);\n        if ((int)uVar36 <= (int)uVar10) goto LAB_00117086;\n      }\n      else {\nLAB_00116fd0:\n        if (iVar35 <= iVar13 + 1) goto LAB_00117086;\nLAB_00116fde:\n        uVar10 = iVar13 + 1;\n        iVar11 = iVar13;\n      }\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    } while( true );\n  }\nLAB_0011708b:\n  DAT_00127a48 = 0;\n  DAT_00127a44 = 0;\n  iVar11 = bfd_init();\n  pcVar32 = \"fatal error: libbfd ABI mismatch\";\n  if (iVar11 != 0x118) {\nLAB_00117aed:\n    uVar24 = dcgettext(0,pcVar32,5);\n                    \n    FUN_00119dd0(uVar24);\n  }\n  pcVar32 = \"x86_64-pc-linux-gnu\";\n  bVar7 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  pcVar26 = DAT_00127600;\n  if (bVar7 == 0) {\n    uVar12 = bfd_get_error();\n    pcVar26 = (char *)bfd_errmsg(uVar12);\n    pcVar34 = \"can\\'t set BFD default target to `%s\\': %s\";\nLAB_00118de6:\n    uVar24 = dcgettext(0,pcVar34,5);\n                    \n    FUN_00119dd0(uVar24,pcVar32,pcVar26);\n  }\n  uVar10 = _DAT_001264c0;\n  if ((int)_DAT_001264c0 < 0) {\n    sVar15 = strlen(DAT_00127600);\n    uVar10 = 0;\n    if (4 < (int)sVar15) {\n      iVar11 = filename_cmp(pcVar26 + (long)(int)sVar15 + -5,\"strip\");\n      uVar10 = (uint)(iVar11 == 0);\n    }\n  }\n  _DAT_001264c0 = uVar10;\n  DAT_00127a18 = FUN_00113f20();\n  DAT_00127a10 = FUN_00113f20();\n  DAT_00127a28 = FUN_00113f20();\n  DAT_00127a08 = FUN_00113f20();\n  DAT_00127a00 = FUN_00113f20();\n  DAT_001279f8 = FUN_00113f20();\n  DAT_001279f0 = FUN_00113f20();\n  DAT_001278f0 = htab_create_alloc(0x10,FUN_00108800,FUN_00108898);\n  DAT_001278e8 = FUN_00113f20();\n  puVar6 = PTR_DAT_001264e0;\n  if (__xexit_cleanup == (code *)0x0) {\n    __xexit_cleanup = FUN_0011a390;\n  }\n  if (0x1f < *(int *)(PTR_DAT_001264e0 + 8)) {\n    puVar20 = (undefined8 *)malloc(0x110);\n    if (puVar20 == (undefined8 *)0x0) goto LAB_001171a7;\n    *puVar20 = puVar6;\n    *(undefined4 *)(puVar20 + 1) = 0;\n    PTR_DAT_001264e0 = (undefined *)puVar20;\n  }\n  puVar6 = PTR_DAT_001264e0;\n  iVar11 = *(int *)(PTR_DAT_001264e0 + 8);\n  *(int *)(PTR_DAT_001264e0 + 8) = iVar11 + 1;\n  *(code **)(puVar6 + (long)iVar11 * 8 + 0x10) = FUN_001054af;\nLAB_001171a7:\n  bfd_set_error_program_name(*ppcVar18);\n  if (_DAT_001264c0 != 0) {\n    local_130 = (FILE *)0x0;\n    unaff_R12 = (FILE *)0x0;\n    ppuVar29 = (undefined **)(FILE *)0x0;\n    pFVar14 = (FILE *)0x0;\n    bVar37 = 0;\n    bVar2 = 0;\nswitchD_001177df_caseD_0:\n    do {\n      uVar12 = getopt_long(param_1,ppcVar18,\"I:O:F:K:MN:R:o:sSpdgxXHhVvwDU\",\n                           &PTR_s_disable_deterministic_archives_00126500);\n      pFVar21 = _optarg;\n      switch(uVar12) {\n      case 0x44:\n        _DAT_001264b0 = 1;\n        break;\n      case 0x48:\n      case 0x68:\n        FUN_00108a2a(_stdout,0);\n      case 0x46:\n        local_130 = _optarg;\n        pFVar14 = _optarg;\n        break;\n      case 0x49:\n        local_130 = _optarg;\n        break;\n      case 0x4b:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4d:\n        DAT_00127a20 = bVar7;\n        bVar2 = bVar7;\n        break;\n      case 0x4e:\n        local_120 = _optarg;\n        ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n        *ppFVar23 = pFVar21;\n        break;\n      case 0x4f:\n        pFVar14 = _optarg;\n        break;\n      case 0x52:\n        FUN_00114c20(_optarg);\n        break;\n      case 0x53:\n      case 100:\n      case 0x67:\n        DAT_00127a48 = 2;\n        break;\n      case 0x55:\n        _DAT_001264b0 = 0;\n        break;\n      case 0x56:\n        unaff_R12 = (FILE *)(ulong)bVar7;\n        break;\n      case 0x58:\n        DAT_00127a44 = 1;\n        break;\n      case 0x6f:\n        ppuVar29 = (undefined **)_optarg;\n        break;\n      case 0x70:\n        DAT_001279eb = 1;\n        break;\n      case 0x73:\n        DAT_00127a48 = 7;\n        break;\n      case 0x76:\n        DAT_001279e9 = 1;\n        break;\n      case 0x77:\n        DAT_001279ea = 1;\n        break;\n      case 0x78:\n        DAT_00127a44 = 2;\n        break;\n      case 0xa9:\n        bVar37 = bVar7;\n        break;\n      case 0xb2:\n        DAT_00127a38 = 1;\n        break;\n      case 0xb3:\n        FUN_00114190(_optarg,1,4);\n        break;\n      case 0xb5:\n        DAT_00127959 = 1;\n        break;\n      case 0xba:\n        DAT_00127a20 = 0;\n        bVar2 = bVar7;\n        break;\n      case 0xbc:\n        DAT_00127a48 = 4;\n        break;\n      case 0xc6:\n        FUN_00114190(_optarg,1,0x100);\n        break;\n      case 0xd0:\n        DAT_00127a48 = 5;\n        break;\n      case 0xd2:\n        goto switchD_001177df_caseD_d2;\n      default:\n        if (((bVar2 == 0) && (DAT_00127a48 < 8)) &&\n           ((-0xdaL >> ((byte)DAT_00127a48 & 0x3f) & 1U) == 0)) {\n          DAT_00127a20 = 1;\n        }\n        if (bVar37 != 0) goto LAB_00118a4c;\n        if ((char)unaff_R12 != '\\0') {\n          FUN_00119970(\"strip\");\n          goto LAB_001189a2;\n        }\n        if (_DAT_001264b0 < 0) {\n          _DAT_001264b0 = 1;\n        }\n        if (((DAT_00127a48 | DAT_00127a44) == 0) &&\n           (lVar30 = htab_elements(DAT_00127a18), lVar30 == 0)) {\n          DAT_00127a48 = 7;\n        }\n        if (pFVar14 == (FILE *)0x0) {\n          pFVar14 = local_130;\n        }\n        unaff_R12 = (FILE *)(long)(int)_optind;\n        if ((_optind != param_1) &&\n           (((FILE *)ppuVar29 == (FILE *)0x0 || ((int)param_1 <= (int)(_optind + 1)))))\n        goto LAB_00117888;\n      case 1:\n      case 2:\n      case 3:\n      case 4:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n      case 9:\n      case 10:\n      case 0xb:\n      case 0xc:\n      case 0xd:\n      case 0xe:\n      case 0xf:\n      case 0x10:\n      case 0x11:\n      case 0x12:\n      case 0x13:\n      case 0x14:\n      case 0x15:\n      case 0x16:\n      case 0x17:\n      case 0x18:\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x1c:\n      case 0x1d:\n      case 0x1e:\n      case 0x1f:\n      case 0x20:\n      case 0x21:\n      case 0x22:\n      case 0x23:\n      case 0x24:\n      case 0x25:\n      case 0x26:\n      case 0x27:\n      case 0x28:\n      case 0x29:\n      case 0x2a:\n      case 0x2b:\n      case 0x2c:\n      case 0x2d:\n      case 0x2e:\n      case 0x2f:\n      case 0x30:\n      case 0x31:\n      case 0x32:\n      case 0x33:\n      case 0x34:\n      case 0x35:\n      case 0x36:\n      case 0x37:\n      case 0x38:\n      case 0x39:\n      case 0x3a:\n      case 0x3b:\n      case 0x3c:\n      case 0x3d:\n      case 0x3e:\n      case 0x3f:\n      case 0x40:\n      case 0x41:\n      case 0x42:\n      case 0x43:\n      case 0x45:\n      case 0x47:\n      case 0x4a:\n      case 0x4c:\n      case 0x50:\n      case 0x51:\n      case 0x54:\n      case 0x57:\n      case 0x59:\n      case 0x5a:\n      case 0x5b:\n      case 0x5c:\n      case 0x5d:\n      case 0x5e:\n      case 0x5f:\n      case 0x60:\n      case 0x61:\n      case 0x62:\n      case 99:\n      case 0x65:\n      case 0x66:\n      case 0x69:\n      case 0x6a:\n      case 0x6b:\n      case 0x6c:\n      case 0x6d:\n      case 0x6e:\n      case 0x71:\n      case 0x72:\n      case 0x74:\n      case 0x75:\n      case 0x79:\n      case 0x7a:\n      case 0x7b:\n      case 0x7c:\n      case 0x7d:\n      case 0x7e:\n      case 0x7f:\n      case 0x80:\n      case 0x81:\n      case 0x82:\n      case 0x83:\n      case 0x84:\n      case 0x85:\n      case 0x86:\n      case 0x87:\n      case 0x88:\n      case 0x89:\n      case 0x8a:\n      case 0x8b:\n      case 0x8c:\n      case 0x8d:\n      case 0x8e:\n      case 0x8f:\n      case 0x90:\n      case 0x91:\n      case 0x92:\n      case 0x93:\n      case 0x94:\n      case 0x95:\n      case 0x96:\n      case 0x97:\n      case 0x98:\n      case 0x99:\n      case 0x9a:\n      case 0x9b:\n      case 0x9c:\n      case 0x9d:\n      case 0x9e:\n      case 0x9f:\n      case 0xa0:\n      case 0xa1:\n      case 0xa2:\n      case 0xa3:\n      case 0xa4:\n      case 0xa5:\n      case 0xa6:\n      case 0xa7:\n      case 0xa8:\n      case 0xaa:\n      case 0xab:\n      case 0xac:\n      case 0xad:\n      case 0xae:\n      case 0xaf:\n      case 0xb0:\n      case 0xb1:\n      case 0xb4:\n      case 0xb6:\n      case 0xb7:\n      case 0xb8:\n      case 0xb9:\n      case 0xbb:\n      case 0xbd:\n      case 0xbe:\n      case 0xbf:\n      case 0xc0:\n      case 0xc1:\n      case 0xc2:\n      case 0xc3:\n      case 0xc4:\n      case 0xc5:\n      case 199:\n      case 200:\n      case 0xc9:\n      case 0xca:\n      case 0xcb:\n      case 0xcc:\n      case 0xcd:\n      case 0xce:\n      case 0xcf:\n      case 0xd1:\n        FUN_00108a2a(_stderr,1);\n        unaff_R13 = (char *)&PTR_s_disable_deterministic_archives_00126500;\n        goto switchD_00117234_caseD_c1;\n      }\n    } while( true );\n  }\n  local_108 = (long *)0x0;\n  local_d8 = (FILE *)0x0;\n  local_d0 = (FILE *)0x0;\n  local_130 = (FILE *)(ulong)bVar7;\n  local_120 = (FILE *)0x0;\n  local_118 = 0;\n  local_110 = 0;\n  ppuVar29 = (undefined **)(FILE *)0x0;\n  bVar2 = 0;\nswitchD_00117234_caseD_0:\n  uVar36 = getopt_long(param_1,ppcVar18,\"b:B:i:I:j:K:MN:s:O:d:F:L:G:R:SpgxXHhVvW:wDU\",\n                       &PTR_s_add_gnu_debuglink_00126900);\n  pFVar14 = _optarg;\n  uVar10 = DAT_00127908;\n  pcVar26 = (char *)(ulong)uVar36;\n  if (uVar36 != 0xffffffff) goto code_r0x00117223;\n  if (bVar2 != 0) {\n    pcVar32 = \"--globalize-symbol(s) is incompatible with -G/--keep-global-symbol(s)\";\n    if ((char)local_108 != '\\0') goto LAB_00117aed;\n  }\n  if ((char)local_118 != '\\0') {\nLAB_00118a4c:\n    FUN_001199d0();\n    return DAT_00127a40;\n  }\n  if ((char)local_110 != '\\0') {\n    FUN_00119970(\"objcopy\");\n    goto LAB_00118398;\n  }\n  if ((DAT_00127a3c != 0) && (DAT_001264bc == -1)) {\n    pcVar32 = \"interleave start byte must be set with --byte\";\n    goto LAB_00117aed;\n  }\n  if (DAT_00127a3c <= DAT_001264bc) {\n    pcVar32 = \"byte number must be less than interleave\";\n    goto LAB_00117aed;\n  }\n  pcVar32 = \"interleave width must be less than or equal to interleave - byte`\";\n  if (DAT_00127a3c - DAT_001264bc < DAT_001264b8) goto LAB_00117aed;\n  if ((_optind == param_1) || ((int)(_optind + 2) < (int)param_1)) goto switchD_00117234_caseD_1;\n  pcVar32 = ppcVar18[(int)_optind];\n  if ((int)(_optind + 1) < (int)param_1) {\n    pcVar34 = ppcVar18[(long)(int)_optind + 1];\n  }\n  else {\n    pcVar34 = (char *)0x0;\n  }\n  if (_DAT_001264b0 < 0) {\n    _DAT_001264b0 = 1;\n  }\n  if ((DAT_00127a48 | DAT_00127a44) == 0) {\n    DAT_00127a48 = 1;\n  }\n  if (local_d0 == (FILE *)0x0) {\n    local_d0 = local_d8;\n    if (local_d8 != (FILE *)0x0) {\nLAB_00117661:\n      cVar8 = FUN_00113fb0(local_d8,&DAT_0011b300);\n      if (cVar8 != '\\0') {\n        iVar11 = FUN_00108c86(&local_d8);\n        if (iVar11 < 0) {\n          pcVar32 = \"unknown input EFI target: %s\";\n          pFVar14 = local_d8;\n          goto LAB_001176c2;\n        }\n        if (local_d0 == (FILE *)0x0) goto LAB_0011743e;\n      }\n      goto LAB_001175b1;\n    }\n  }\n  else {\n    if (local_d8 != (FILE *)0x0) goto LAB_00117661;\nLAB_001175b1:\n    cVar8 = FUN_00113fb0(local_d0,&DAT_0011b300);\n    if (cVar8 != '\\0') {\n      iVar11 = FUN_00108c86(&local_d0);\n      if (iVar11 < 0) {\n        pcVar32 = \"unknown output EFI target: %s\";\n        pFVar14 = local_d0;\n        goto LAB_001176c2;\n      }\n      if (DAT_00126474 == -1) {\n        DAT_00126474 = (short)iVar11;\n      }\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n  }\nLAB_0011743e:\n  if ((pcVar34 == (char *)0x0) || (uVar10 = filename_cmp(pcVar32,pcVar34), uVar10 == 0)) {\n    __template = (char *)FUN_00114cf0(pcVar32);\n    uVar36 = mkstemp(__template);\n    if (uVar36 == 0xffffffff) {\n      free(__template);\n      piVar25 = __errno_location();\n      pcVar26 = strerror(*piVar25);\n      pcVar34 = \"warning: could not create temporary file whilst copying \\'%s\\', (error: %s)\";\n      goto LAB_00118de6;\n    }\n    uVar10 = uVar36;\n    if (-1 < (int)uVar36) {\n      uVar10 = dup(uVar36);\n      pcVar26 = (char *)(ulong)uVar10;\n    }\n  }\n  else {\n    uVar36 = 0xffffffff;\n    __template = pcVar34;\n  }\n  FUN_00114690(pcVar32,__template,uVar36,local_c8,local_d8,local_d0,local_120,uVar10);\n  if (DAT_00127a40 == 0) {\n    if (pcVar34 != (char *)0x0) {\n      pcVar32 = pcVar34;\n    }\n    iVar11 = FUN_00115970(__template,pcVar32,pcVar26,local_c8,DAT_001279eb);\n    DAT_00127a40 = (uint)(iVar11 != 0);\n  }\n  else {\n    if (-1 < (int)pcVar26) {\n      close((int)pcVar26);\n    }\n    unlink_if_ordinary(__template);\n  }\n  if (pcVar34 != __template) {\n    free(__template);\n  }\n  puVar20 = DAT_00127900;\n  if ((char)local_130 != '\\0') {\n    for (; puVar20 != (undefined8 *)0x0; puVar20 = (undefined8 *)*puVar20) {\n      if (*(char *)(puVar20 + 2) == '\\0') {\n        uVar10 = *(uint *)((long)puVar20 + 0x14);\n        if ((uVar10 & 0x18) != 0) {\n          uVar24 = puVar20[3];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-vma\",uVar3,\n                       (-(uint)((uVar10 & 8) == 0) & 0xffffffee) + 0x3d,uVar24);\n          uVar10 = *(uint *)((long)puVar20 + 0x14);\n        }\n        if ((uVar10 & 0x60) != 0) {\n          uVar24 = puVar20[4];\n          uVar3 = puVar20[1];\n          uVar22 = dcgettext(0,\"%s %s%c0x%lx never used\",5);\n          FUN_00119ed0(uVar22,\"--change-section-lma\",uVar3,\n                       (-(uint)((uVar10 & 0x20) == 0) & 0xffffffee) + 0x3d,uVar24);\n        }\n      }\n    }\n  }\n  free(DAT_00127970);\n  free(DAT_00127968);\n  free(DAT_00127960);\n  free(DAT_00127950);\n  free(DAT_00127948);\n  free(DAT_00127940);\n  free(DAT_00127938);\n  return DAT_00127a40;\nLAB_00116d48:\n  bVar7 = pbVar28[1];\n  pbVar28 = pbVar28 + 1;\n  if (bVar7 == 0) goto LAB_0011728f;\n  goto LAB_00116d58;\nLAB_00117086:\n  param_1 = (uint)unaff_R13;\n  goto LAB_0011708b;\nLAB_00117888:\n  uVar10 = DAT_00127a40;\n  if ((int)param_1 <= (int)unaff_R12) {\n    return DAT_00127a40;\n  }\n  lVar30 = FUN_00113f50(ppcVar18[(long)unaff_R12]);\n  if (lVar30 < 1) {\nLAB_00118edb:\n    DAT_00127a40 = 1;\n  }\n  else {\n    pcVar32 = ppcVar18[(long)unaff_R12];\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\nLAB_001178b9:\n      pFVar21 = (FILE *)FUN_00114cf0(pcVar32);\n      iVar11 = mkstemp((char *)pFVar21);\n      if (iVar11 == -1) {\n        free(pFVar21);\n        uVar24 = dcgettext(0,\"could not create temporary file to hold stripped copy\",5);\n        FUN_001126c0(ppcVar18[(long)unaff_R12],0,0,uVar24);\n        goto LAB_00118edb;\n      }\n      iVar13 = -1;\n      if (-1 < iVar11) {\n        iVar13 = dup(iVar11);\n      }\n    }\n    else {\n      iVar11 = filename_cmp(pcVar32,ppuVar29);\n      if (iVar11 == 0) {\n        pcVar32 = ppcVar18[(long)unaff_R12];\n        goto LAB_001178b9;\n      }\n      iVar11 = -1;\n      iVar13 = -1;\n      pFVar21 = (FILE *)ppuVar29;\n    }\n    DAT_00127a40 = 0;\n    FUN_00114690(ppcVar18[(long)unaff_R12],pFVar21,iVar11,local_c8,local_130,pFVar14,0);\n    if (DAT_00127a40 == 0) {\n      pFVar33 = (FILE *)ppuVar29;\n      if ((FILE *)ppuVar29 == (FILE *)0x0) {\n        pFVar33 = (FILE *)ppcVar18[(long)unaff_R12];\n      }\n      iVar11 = FUN_00115970(pFVar21,pFVar33,iVar13,local_c8,DAT_001279eb);\n      DAT_00127a40 = uVar10;\n      if (iVar11 != 0) {\n        DAT_00127a40 = 1;\n      }\n    }\n    else {\n      if (-1 < iVar13) {\n        close(iVar13);\n      }\n      unlink_if_ordinary(pFVar21);\n    }\n    if ((FILE *)ppuVar29 != pFVar21) {\n      free(pFVar21);\n    }\n  }\n  unaff_R12 = (FILE *)((long)&unaff_R12->_flags + 1);\n  goto LAB_00117888;\nswitchD_001177df_caseD_d2:\n  DAT_00127a48 = 3;\n  goto switchD_001177df_caseD_0;\nLAB_001189a2:\n  pcVar32 = \"bad format for --set-section-alignment: numeric argument needed\";\n  goto LAB_00117aed;\nLAB_00119858:\n  if (iVar13 == 10) goto LAB_0011902d;\n  if (iVar13 == 0xd) goto LAB_00119866;\n  if (iVar13 + 1U < 2) goto LAB_001198cd;\n  if ((iVar13 != 0x20) && (iVar13 != 9)) {\n    if (iVar13 != 0x23) goto LAB_001198d6;\n    goto LAB_001198ec;\n  }\n  iVar13 = getc((FILE *)ppuVar29);\n  goto LAB_00119858;\nLAB_0011902d:\n  if (iVar13 == 0xd) {\nLAB_00119866:\n    iVar13 = getc((FILE *)ppuVar29);\n    if (iVar13 == 10) {\n      if (*(char *)(int *)unaff_R13 != '\\0') {\n        FUN_00108d9a(pFVar14,unaff_R13,\n                     (undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13));\n      }\n      goto LAB_0011988e;\n    }\nLAB_001198cd:\n    if (iVar13 != -1) {\nLAB_001198d6:\n      pcVar32 = \"%s:%d: garbage found at end of line\";\nLAB_00119756:\n      uVar24 = dcgettext(0,pcVar32,5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,iVar11 + -1);\n    }\n  }\n  else {\n    iVar13 = 10;\n  }\nLAB_0011903b:\n  if (*(char *)(int *)unaff_R13 != '\\0') {\n    FUN_00108d9a(pFVar14,unaff_R13,(undefined *)((long)&unaff_R12->_flags + (long)(int *)unaff_R13))\n    ;\n  }\n  unaff_R12 = (FILE *)ppuVar29;\n  if (iVar13 == -1) goto LAB_00119065;\nLAB_0011988e:\n  iVar13 = getc((FILE *)ppuVar29);\n  iVar11 = iVar11 + 1;\n  goto LAB_00118ace;\nswitchD_00117234_caseD_c7:\n  pcVar32 = strchr((char *)_optarg,0x3d);\n  if ((pcVar32 != (char *)0x0) && ((int)pcVar32 != iVar11)) {\n    uVar27 = (long)pcVar32 - (long)pFVar14 & 0xffffffff;\n    pcVar34 = pcVar32 + 1;\n    pcVar26 = (char *)xmalloc((int)((long)pcVar32 - (long)pFVar14) + 1);\n    strncpy(pcVar26,(char *)_optarg,uVar27);\n    pcVar26[uVar27] = '\\0';\n    pcVar32 = strchr(pcVar34,0x2c);\n    if (pcVar32 == (char *)0x0) {\n      unaff_R12 = (FILE *)0xffffffff;\n      sVar15 = strlen(pcVar34);\n      sVar15 = sVar15 & 0xffffffff;\n    }\n    else {\n      sVar15 = (size_t)(uint)((int)pcVar32 - (int)pcVar34);\n      uVar10 = FUN_00113fe0(pcVar32 + 1);\n      unaff_R12 = (FILE *)(ulong)uVar10;\n    }\n    if ((int)sVar15 != 0) {\n      unaff_R13 = (char *)xmalloc((int)sVar15 + 1);\n      strncpy(unaff_R13,pcVar34,sVar15);\n      *(undefined *)((long)(int *)unaff_R13 + sVar15) = 0;\n      ppuVar29 = (undefined **)DAT_001278f8;\n      goto LAB_00117f6f;\n    }\n  }\n  uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(uVar24,\"--rename-section\");\ncode_r0x00117223:\n  iVar11 = (int)_optarg;\n  switch(pcVar26) {\n  case (char *)0x0:\n    goto switchD_00117234_caseD_0;\n  default:\nswitchD_00117234_caseD_1:\n    FUN_00108916(_stderr,1);\n    do {\n      iVar11 = strcmp(*ppuVar29,pcVar26);\n      if (iVar11 == 0) {\n        iVar11 = strcmp(*(char **)((long)ppuVar29 + 8),unaff_R13);\n        if ((iVar11 != 0) || ((int)unaff_R12 != *(int *)((long)ppuVar29 + 0x10))) {\n          uVar24 = dcgettext(0,\"Multiple renames of section %s\",5);\n                    \n          FUN_00119dd0(uVar24,pcVar26);\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      ppuVar29 = (undefined **)*(FILE **)((long)ppuVar29 + 0x18);\nLAB_00117f6f:\n    } while ((FILE *)ppuVar29 != (FILE *)0x0);\n    pFVar14 = (FILE *)xmalloc(0x20);\n    *(char **)pFVar14 = pcVar26;\n    pFVar14->_IO_read_ptr = unaff_R13;\n    *(int *)&pFVar14->_IO_read_end = (int)unaff_R12;\n    pFVar14->_IO_read_base = (char *)DAT_001278f8;\n    DAT_001278f8 = pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x42:\n    ppuVar29 = (undefined **)&optarg;\n    local_120 = (FILE *)bfd_scan_arch(_optarg);\n    if (local_120 != (FILE *)0x0) goto switchD_00117234_caseD_0;\n    pcVar32 = \"architecture %s unknown\";\n    pFVar14 = _optarg;\n    break;\n  case (char *)0x44:\n    _DAT_001264b0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x46:\n    local_d0 = _optarg;\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x47:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f8,_optarg,1);\n    *ppFVar23 = pFVar14;\n    local_108 = (long *)(ulong)bVar7;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x48:\n  case (char *)0x68:\n    FUN_00108916(_stdout,0);\n  case (char *)0xcd:\n    _bfd_srec_forceS3 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x49:\n  case (char *)0x73:\n    local_d8 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4b:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a28,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4c:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a08,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4d:\n    DAT_00127a20 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4e:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a18,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x4f:\n  case (char *)0x64:\n    local_d0 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x52:\n    FUN_00114c20(_optarg);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x53:\n    DAT_00127a48 = 7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x55:\n    _DAT_001264b0 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x56:\n    local_110 = (ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x57:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_001279f0,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x58:\n    DAT_00127a44 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x62:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264bc = (int)lVar30;\n    if (DAT_001264bc < 0) {\n      pcVar32 = \"byte number must be non-negative\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x67:\n    DAT_00127a48 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x69:\n    if (_optarg == (FILE *)0x0) {\n      DAT_00127a3c = 4;\n    }\n    else {\n      lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n      DAT_00127a3c = (int)lVar30;\n      if (DAT_00127a3c < 1) {\n        pcVar32 = \"interleave must be positive\";\n        goto LAB_00117aed;\n      }\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x6a:\n    FUN_00114190(_optarg,1,2);\n    DAT_00127a39 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x70:\n    DAT_001279eb = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x76:\n    DAT_001279e9 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x77:\n    DAT_001279ea = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x78:\n    DAT_00127a44 = 2;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x96:\n    DAT_001279e0 = FUN_00114c80(_optarg,DAT_001279e0,\"--add-section\");\n    FUN_00114d60(DAT_001279e0);\n    goto switchD_00117234_caseD_0;\n  case (char *)0x97:\n    DAT_001264b4 = 1;\n    DAT_00127a30 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x98:\n    puVar20 = (undefined8 *)xmalloc(0x30);\n    *puVar20 = 0;\n    unaff_R13 = (char *)_optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--add-symbol\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    pcVar32 = strchr((char *)ppuVar29,0x3a);\n    uVar24 = FUN_0011a480(unaff_R13);\n    puVar20[1] = uVar24;\n    if (pcVar32 == (char *)0x0) {\n      puVar20[4] = 0;\n      lVar30 = strtol((char *)ppuVar29,(char **)0x0,0);\n    }\n    else {\n      uVar24 = FUN_0011a480(ppuVar29);\n      puVar20[4] = uVar24;\n      lVar30 = strtol((char *)(FILE *)(pcVar32 + 1),(char **)0x0,0);\n      ppuVar29 = (undefined **)(FILE *)(pcVar32 + 1);\n    }\n    puVar20[2] = lVar30;\n    pcVar32 = strchr((char *)ppuVar29,0x2c);\n    puVar20[5] = 0;\n    if (pcVar32 == (char *)0x0) {\n      *(undefined4 *)(puVar20 + 3) = 2;\n      unaff_R12 = (FILE *)0x0;\n    }\n    else {\n      ppuVar29 = (undefined **)0x0;\n      pFVar14 = (FILE *)(pcVar32 + 1);\n      do {\n        unaff_R12 = pFVar14;\n        pcVar32 = strchr((char *)unaff_R12,0x2c);\n        if (pcVar32 == (char *)0x0) {\n          sVar15 = strlen((char *)unaff_R12);\n          pFVar14 = (FILE *)0x0;\n        }\n        else {\n          pFVar14 = (FILE *)(pcVar32 + 1);\n          sVar15 = (long)pcVar32 - (long)unaff_R12;\n        }\n        uVar10 = (uint)ppuVar29;\n        if (sVar15 == 5) {\n          iVar11 = strncasecmp(\"local\",(char *)unaff_R12,5);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 1);\n          }\n          else {\n            iVar11 = strncasecmp(\"debug\",(char *)unaff_R12,5);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 4);\n          }\n        }\n        else if (sVar15 == 6) {\n          iVar11 = strncasecmp(\"global\",(char *)unaff_R12,6);\n          if ((iVar11 == 0) || (iVar11 = strncasecmp(\"export\",(char *)unaff_R12,6), iVar11 == 0)) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 2);\n          }\n          else {\n            iVar11 = strncasecmp(\"object\",(char *)unaff_R12,6);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 0x10000);\n          }\n        }\n        else if (sVar15 == 8) {\n          iVar11 = strncasecmp(\"function\",(char *)unaff_R12,8);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)(ulong)(uVar10 | 8);\n          }\n          else {\n            iVar11 = strncasecmp(\"indirect\",(char *)unaff_R12,8);\n            if (iVar11 != 0) goto LAB_0011862f;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x2000);\n          }\n        }\n        else if (sVar15 == 4) {\n          iVar11 = strncasecmp(\"weak\",(char *)unaff_R12,4);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x80);\n          }\n          else {\n            iVar11 = strncasecmp(\"file\",(char *)unaff_R12,4);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x4000);\n          }\n        }\n        else if (sVar15 == 7) {\n          iVar11 = strncasecmp(\"section\",(char *)unaff_R12,7);\n          if (iVar11 == 0) {\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x100);\n          }\n          else {\n            iVar11 = strncasecmp(\"warning\",(char *)unaff_R12,7);\n            if (iVar11 != 0) goto LAB_001186b2;\n            ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x1000);\n          }\n        }\n        else {\n          if (sVar15 == 0xb) {\n            iVar11 = strncasecmp(\"constructor\",(char *)unaff_R12,0xb);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)((ulong)ppuVar29 | 0x800);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 9) {\n            iVar11 = strncasecmp(\"synthetic\",(char *)unaff_R12,9);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x200000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0x11) {\n            iVar11 = strncasecmp(\"indirect-function\",(char *)unaff_R12,0x11);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x400008);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 == 0xd) {\n            iVar11 = strncasecmp(\"unique-object\",(char *)unaff_R12,0xd);\n            if (iVar11 == 0) {\n              ppuVar29 = (undefined **)(ulong)(uVar10 | 0x810000);\n              goto LAB_00117e3d;\n            }\n          }\n          else if (sVar15 < 8) goto LAB_001186b2;\nLAB_0011862f:\n          iVar11 = strncasecmp(\"before=\",(char *)unaff_R12,7);\n          if (iVar11 != 0) {\nLAB_001186b2:\n            pcVar32 = (char *)xmalloc(sVar15 + 1);\n            strncpy(pcVar32,(char *)unaff_R12,sVar15);\n            pcVar32[sVar15] = '\\0';\n            uVar24 = dcgettext(0,\"unrecognized symbol flag `%s\\'\",5);\n            FUN_00119ed0(uVar24,pcVar32);\n            uVar24 = dcgettext(0,\"supported flags: %s\",5);\n                    \n            FUN_00119dd0(uVar24,\n                         \"local, global, export, debug, function, weak, section, constructor, warning, indirect, file, object, synthetic, indirect-function, unique-object, before=<othersym>\"\n                        );\n          }\n          uVar24 = FUN_0011a480(&unaff_R12->field_0x7,sVar15 - 7);\n          puVar20[5] = uVar24;\n        }\nLAB_00117e3d:\n      } while (pFVar14 != (FILE *)0x0);\n      *(int *)(puVar20 + 3) = (int)ppuVar29;\n      unaff_R13 = (char *)0x0;\n      if (puVar20[5] != 0) {\n        *puVar20 = DAT_001279c8;\n        bVar39 = DAT_001279c8 == (undefined8 *)0x0;\n        DAT_001279c8 = puVar20;\n        if (bVar39) {\n          PTR_DAT_001275c0 = (undefined *)puVar20;\n        }\n        goto LAB_00117e65;\n      }\n    }\n    *(undefined8 **)PTR_DAT_001275c0 = puVar20;\n    PTR_DAT_001275c0 = (undefined *)puVar20;\nLAB_00117e65:\n    DAT_001279c0 = DAT_001279c0 + 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x99:\n    DAT_00127930 = strtoul((char *)_optarg,(char **)0x0,0);\n    if (DAT_00127930 == 0) {\n      pcVar32 = \"unable to parse alternative machine code\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9a:\n    _DAT_001279b0 = FUN_00119940(_optarg,\"--change-addresses\");\n    DAT_001279b8 = _DAT_001279b0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9b:\n    DAT_001279a8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9c:\n  case (char *)0x9d:\n  case (char *)0x9e:\n    ppuVar29 = (undefined **)strchr((char *)_optarg,0x3d);\n    if (uVar36 == 0x9d) {\n      uVar12 = 0x40;\n      unaff_R13 = \"--change-section-lma\";\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        uVar12 = 0x20;\n        goto LAB_00117a19;\n      }\n    }\n    else if (uVar36 == 0x9e) {\n      if ((FILE *)ppuVar29 != (FILE *)0x0) {\n        unaff_R13 = \"--change-section-vma\";\n        uVar12 = 8;\n        goto LAB_00117a19;\n      }\n      uVar12 = 0x10;\n      unaff_R13 = \"--change-section-vma\";\n    }\n    else {\n      unaff_R13 = \"--change-section-address\";\n      uVar12 = 0x28;\n      if ((FILE *)ppuVar29 != (FILE *)0x0) goto LAB_00117a19;\n      uVar12 = 0x50;\n    }\n    ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2b);\n    if (((FILE *)ppuVar29 == (FILE *)0x0) &&\n       (ppuVar29 = (undefined **)strchr((char *)pFVar14,0x2d), (FILE *)ppuVar29 == (FILE *)0x0)) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,unaff_R13);\n    }\nLAB_00117a19:\n    iVar11 = (int)ppuVar29 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    unaff_R12 = (FILE *)(long)iVar11;\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)unaff_R12);\n    pcVar32[(long)unaff_R12] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,uVar12);\n    lVar17 = FUN_00119940((undefined *)((long)(int *)ppuVar29 + 1),unaff_R13);\n    if (*(char *)(int *)ppuVar29 == '-') {\n      lVar17 = -lVar17;\n    }\n    if ((uVar36 == 0x9d) || (*(long *)(lVar30 + 0x18) = lVar17, uVar36 != 0x9e)) {\n      *(long *)(lVar30 + 0x20) = lVar17;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0x9f:\n    DAT_001279b8 = FUN_00119940(_optarg,\"--change-start\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa0:\n    local_130 = (FILE *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa1:\n    ppuVar29 = (undefined **)_optarg;\n    if (_optarg == (FILE *)0x0) {\nLAB_00118398:\n      DAT_001279a4 = 1;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)_optarg,\"none\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x20;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 3;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gnu\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 5;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zlib-gabi\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 9;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"zstd\");\n    if (iVar11 == 0) {\n      DAT_001279a4 = 0x11;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --compress-debug-sections type `%s\\'\";\n    break;\n  case (char *)0xa2:\n    DAT_001279a0 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa3:\n    DAT_001279a4 = 0x20;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa4:\n    DAT_001279d0 = FUN_00114c80(_optarg,DAT_001279d0,\"--dump-section\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa5:\n    iVar11 = strcasecmp((char *)_optarg,\"yes\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcasecmp((char *)pFVar14,\"no\");\n    if (iVar11 == 0) {\n      DAT_0012799c = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unrecognized --elf-stt-common= option `%s\\'\";\n    break;\n  case (char *)0xa6:\n    DAT_00127a48 = 6;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa7:\n    DAT_0012790c = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa8:\n    DAT_001264a8 = FUN_00119940(_optarg,\"--file-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xa9:\n    local_118 = (size_t)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaa:\n    ppuVar29 = (undefined **)FUN_00119940(_optarg,\"--gap-fill\");\n    DAT_00127999 = SUB81(ppuVar29,0);\n    if ((FILE *)0xff < ppuVar29) {\n      uVar24 = dcgettext(0,\"Warning: truncating gap-fill from 0x%lx to 0x%x\",5);\n      FUN_00119ed0(uVar24,ppuVar29,(ulong)ppuVar29 & 0xff);\n    }\n    DAT_00127998 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xab:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a00,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xac:\n    FUN_00114460(_optarg,DAT_00127a00,&DAT_00127948);\n    bVar2 = bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xad:\n    DAT_001264a0 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126498 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --heap\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --heap\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xae:\n    DAT_00126490 = FUN_00119940(_optarg,\"--image-base\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xaf:\n    DAT_00127910 = DAT_00127910 | 0x100;\n    DAT_00127914 = DAT_00127914 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb0:\n    lVar30 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_001264b8 = (int)lVar30;\n    if (DAT_001264b8 < 1) {\n      pcVar32 = \"interleave width must be positive\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb1:\n    FUN_00114460(_optarg,DAT_001279f8,&DAT_00127940);\n    local_108 = (long *)(ulong)bVar7;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb2:\n    DAT_00127a38 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb3:\n    FUN_00114190(_optarg,1,4);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb4:\n    FUN_00114460(_optarg,DAT_00127a28,&DAT_00127960);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb5:\n    DAT_00127959 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb6:\n    DAT_00127958 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb7:\n    FUN_00114460(_optarg,DAT_00127a08,&DAT_00127950);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xb8:\n    iVar11 = strcmp(\"enable\",(char *)_optarg);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 1;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"disable\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 0;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    iVar11 = strcmp(\"keep\",(char *)pFVar14);\n    if (iVar11 == 0) {\n      DAT_001264b4 = 2;\n      ppuVar29 = (undefined **)pFVar14;\n      goto switchD_00117234_caseD_0;\n    }\n    pcVar32 = \"unknown long section names option \\'%s\\'\";\n    break;\n  case (char *)0xba:\n    DAT_00127a20 = 0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbb:\n    local_130 = (FILE *)0x0;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbc:\n    DAT_00127a48 = 4;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbd:\n    DAT_00127990 = FUN_00119940(_optarg,\"--pad-to\");\n    DAT_00127989 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbe:\n    DAT_00127918 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xbf:\n    DAT_00127920 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc0:\n    DAT_00127928 = _optarg;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc1:\nswitchD_00117234_caseD_c1:\n    DAT_00127914 = DAT_00127914 | 0x100;\n    DAT_00127910 = DAT_00127910 & 0xfffffeff;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc2:\n    DAT_00127914 = DAT_00127914 | 0x80;\n    DAT_00127910 = DAT_00127910 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc3:\n    unaff_R13 = &optarg;\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--redefine-sym\");\n    }\n    ppuVar29 = (undefined **)(pcVar32 + 1);\n    iVar11 = (int)pcVar32 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    sVar15 = strlen((char *)ppuVar29);\n    unaff_R12 = (FILE *)xmalloc((long)((int)sVar15 + 1));\n    strcpy((char *)unaff_R12,(char *)ppuVar29);\n    FUN_00108d9a(\"--redefine-sym\",pcVar32,unaff_R12);\n    free(pcVar32);\n    free(unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc4:\n    ppuVar29 = (undefined **)fopen((char *)_optarg,\"r\");\n    if ((FILE *)ppuVar29 == (FILE *)0x0) {\n      piVar25 = __errno_location();\n      pcVar32 = strerror(*piVar25);\n      uVar24 = dcgettext(0,\"couldn\\'t open symbol redefinition file %s (error: %s)\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14,pcVar32);\n    }\n    pFVar21 = (FILE *)0x64;\n    unaff_R13 = (char *)xmalloc(0x65);\n    iVar13 = getc((FILE *)ppuVar29);\n    iVar11 = 2;\nLAB_00118ace:\n    unaff_R12 = (FILE *)ppuVar29;\n    if (iVar13 != -1) {\n      pFVar33 = (FILE *)0x0;\n      while ((iVar13 != 0x20 && (iVar13 != 9))) {\n        if ((iVar13 == 10) || (iVar13 == 0xd)) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          goto LAB_00118faa;\n        }\n        if (iVar13 == 0) break;\n        if (iVar13 == -1) {\n          *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n          unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n          goto LAB_00119803;\n        }\n        unaff_R12 = pFVar33;\n        if (iVar13 == 0x23) goto LAB_00119745;\n        pFVar38 = (FILE *)((long)&pFVar33->_flags + 1);\n        *(char *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n        if (pFVar21 <= pFVar38) {\n          pFVar21 = (FILE *)((long)pFVar21 * 2);\n          unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n        }\n        iVar13 = getc((FILE *)ppuVar29);\n        pFVar33 = pFVar38;\n      }\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n      while ((iVar13 == 0x20 || (iVar13 == 9))) {\n        iVar13 = getc((FILE *)ppuVar29);\n      }\n      if (iVar13 == 0x23) {\nLAB_00119745:\n        if (unaff_R12 != (FILE *)0x0) goto LAB_0011974a;\n        pFVar33 = (FILE *)0x0;\n        unaff_R12 = (FILE *)0x0;\nLAB_001197ca:\n        *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n        while ((iVar13 != 10 && (iVar13 != -1))) {\n          iVar13 = getc((FILE *)ppuVar29);\n        }\n        goto LAB_0011903b;\n      }\nLAB_00118faa:\n      unaff_R12 = (FILE *)((long)&pFVar33->_flags + 1);\n      if (((iVar13 == 10) || (iVar13 == 0xd)) || (iVar13 == 0)) goto LAB_00119745;\n      pFVar38 = unaff_R12;\n      if (iVar13 != -1) {\n        do {\n          pFVar33 = (FILE *)((long)&pFVar38->_flags + 1);\n          *(char *)((long)&pFVar38->_flags + (long)(int *)unaff_R13) = (char)iVar13;\n          if (pFVar21 <= pFVar33) {\n            pFVar21 = (FILE *)((long)pFVar21 * 2);\n            unaff_R13 = (char *)xrealloc(unaff_R13,(undefined *)((long)&pFVar21->_flags + 1));\n          }\n          iVar13 = getc((FILE *)ppuVar29);\n          if ((iVar13 == 0x20) || (iVar13 == 9)) {\nLAB_001198b6:\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            pFVar33 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119858;\n          }\n          if ((iVar13 == 10) || (iVar13 == 0xd)) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            goto LAB_0011902d;\n          }\n          if (iVar13 == 0) goto LAB_001198b6;\n          if (iVar13 == -1) {\n            *(undefined *)((long)&pFVar33->_flags + (long)(int *)unaff_R13) = 0;\n            unaff_R12 = (FILE *)((long)&pFVar38->_flags + 2);\n            goto LAB_00119803;\n          }\n          pFVar38 = pFVar33;\n        } while (iVar13 != 0x23);\nLAB_001198ec:\n        if ((pFVar33 == (FILE *)0x0) || ((unaff_R12 != (FILE *)0x0 && (unaff_R12 != pFVar33)))) {\n          iVar13 = 0x23;\n          goto LAB_001197ca;\n        }\nLAB_0011974a:\n        pcVar32 = \"%s:%d: missing new symbol name\";\n        goto LAB_00119756;\n      }\nLAB_00119803:\n      if (unaff_R12 != (FILE *)0x0) {\n        pcVar32 = \"%s:%d: premature end of file\";\n        goto LAB_00119756;\n      }\n    }\nLAB_00119065:\n    free(unaff_R13);\n    fclose((FILE *)ppuVar29);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc5:\n    DAT_00127988 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc6:\n    FUN_00114190(_optarg,1,0x100);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc7:\n    goto switchD_00117234_caseD_c7;\n  case (char *)0xc8:\n    ppuVar29 = (undefined **)(ulong)DAT_00127908;\n    uVar27 = strtol((char *)_optarg,(char **)0x0,10);\n    DAT_00127908 = (uint)uVar27;\n    if (((int)DAT_00127908 < 1) || ((uVar27 & 1) != 0)) {\n      pcVar32 = \"number of bytes to reverse must be positive and even\";\n      goto LAB_00117aed;\n    }\n    if ((uVar10 != DAT_00127908) && (uVar10 != 0)) {\n      uVar24 = dcgettext(0,\"Warning: ignoring previous --reverse-bytes value of %d\",5);\n      FUN_00119ed0(uVar24,uVar10);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xc9:\n    DAT_00126488 = FUN_00119940(_optarg,\"--section-alignment\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xca:\n    unaff_R12 = (FILE *)strchr((char *)_optarg,0x3d);\n    if (unaff_R12 == (FILE *)0x0) {\n      uVar24 = dcgettext(0,\"bad format for %s\",5);\n                    \n      FUN_00119dd0(uVar24,\"--set-section-flags\");\n    }\n    iVar11 = (int)unaff_R12 - iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(long)iVar11);\n    pcVar32[iVar11] = '\\0';\n    ppuVar29 = (undefined **)FUN_00114190(pcVar32,1,0x80);\n    uVar12 = FUN_00113fe0((undefined *)((long)&unaff_R12->_flags + 1));\n    *(undefined4 *)((long)ppuVar29 + 0x28) = uVar12;\n    unaff_R13 = (char *)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcb:\n    pcVar32 = strchr((char *)_optarg,0x3d);\n    if (pcVar32 == (char *)0x0) {\n      pcVar32 = \"bad format for --set-section-alignment: argument needed\";\n      goto LAB_00117aed;\n    }\n    uVar27 = strtol(pcVar32 + 1,(char **)0x0,10);\n    if ((int)uVar27 < 1) goto LAB_001189a2;\n    unaff_R12 = (FILE *)0x0;\n    while( true ) {\n      if ((uVar27 & 1) != 0) break;\n      uVar27 = (ulong)(uint)((int)uVar27 >> 1);\n      unaff_R12 = (FILE *)(ulong)((int)unaff_R12 + 1);\n    }\n    if ((int)uVar27 != 1) {\n      pcVar32 = \"bad format for --set-section-alignment: alignment is not a power of two\";\n      goto LAB_00117aed;\n    }\n    iVar11 = (int)pcVar32 - (int)_optarg;\n    ppuVar29 = (undefined **)(long)iVar11;\n    pcVar32 = (char *)xmalloc((long)(iVar11 + 1));\n    pcVar32 = strncpy(pcVar32,(char *)_optarg,(size_t)ppuVar29);\n    pcVar32[(long)ppuVar29] = '\\0';\n    lVar30 = FUN_00114190(pcVar32,1,0x200);\n    if (lVar30 != 0) {\n      *(int *)(lVar30 + 0x2c) = (int)unaff_R12;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcc:\n    _DAT_00127980 = FUN_00119940(_optarg,\"--set-start\");\n    DAT_00127978 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xce:\n    __bfd_srec_len = FUN_00119940(_optarg,\"--srec-len\");\n    goto switchD_00117234_caseD_0;\n  case (char *)0xcf:\n    DAT_00126480 = strtoul((char *)_optarg,(char **)(FILE *)local_c8,0);\n    unaff_R12 = _optarg;\n    ppuVar29 = (undefined **)(FILE *)local_c8;\n    if ((FILE *)local_c8._0_8_ != _optarg) {\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        DAT_00126478 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)(FILE *)local_c8,0\n                              );\n        pFVar14 = _optarg;\n        if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n          uVar24 = dcgettext(0,\"%s: invalid commit value for --stack\",5);\n          FUN_00119ed0(uVar24,pFVar14);\n          ppuVar29 = (undefined **)pFVar14;\n        }\n        goto switchD_00117234_caseD_0;\n      }\n      if (*(char *)(int *)local_c8._0_8_ == '\\0') goto switchD_00117234_caseD_0;\n    }\n    uVar24 = dcgettext(0,\"%s: invalid reserve value for --stack\",5);\n    FUN_00119ed0(uVar24,unaff_R12);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd0:\n    DAT_00127a48 = 5;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd1:\n    FUN_00114460(_optarg,DAT_00127a18,&DAT_00127970);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd2:\n    DAT_00127a48 = 3;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd3:\n    ppFVar23 = (FILE **)htab_find_slot(DAT_00127a10,_optarg,1);\n    *ppFVar23 = pFVar14;\n    ppuVar29 = (undefined **)pFVar14;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd4:\n    FUN_00114460(_optarg,DAT_00127a10,&DAT_00127968);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd5:\n    pcVar32 = strchr((char *)_optarg,0x3a);\n    pFVar21 = pFVar14;\n    if (pcVar32 != (char *)0x0) {\n      pFVar21 = (FILE *)xstrdup(pFVar14);\n      lVar30 = (long)((int)pcVar32 - iVar11);\n      *(undefined *)((long)&pFVar21->_flags + lVar30) = 0;\n      local_c8._0_8_ = pFVar21;\n      uVar27 = strtoul((char *)((long)&pFVar21->_flags + lVar30 + 1),(char **)local_c8,0);\n      DAT_00126472 = (undefined2)uVar27;\n      if (*(char *)(int *)local_c8._0_8_ == '.') {\n        uVar27 = strtoul((char *)((long)(int *)local_c8._0_8_ + 1),(char **)local_c8,0);\n        DAT_00126470 = (undefined2)uVar27;\n      }\n      if (*(char *)(int *)local_c8._0_8_ != '\\0') {\n        uVar24 = dcgettext(0,\"%s: bad version in PE subsystem\",5);\n        FUN_00119ed0(uVar24,pFVar14);\n      }\n    }\n    lVar30 = strtol((char *)pFVar21,(char **)local_c8,0);\n    if (*(char *)(int *)local_c8._0_8_ == '\\0') {\n      lVar17 = 0;\n      while ((short)lVar30 != (&DAT_00125caa)[lVar17 * 8]) {\n        lVar17 = lVar17 + 1;\n        if (lVar17 == 10) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0;\n      cVar8 = (&DAT_00125ca8)[lVar17 * 0x10];\n      DAT_00126474 = (short)lVar30;\n    }\n    else {\n      unaff_R13 = (char *)0x0;\n      while( true ) {\n        iVar11 = strcmp((char *)pFVar21,(&PTR_s_native_00125ca0)[(long)unaff_R13 * 2]);\n        if (iVar11 == 0) break;\n        unaff_R13 = (char *)((long)(int *)unaff_R13 + 1);\n        if ((FILE *)unaff_R13 == (FILE *)0xa) goto LAB_00119248;\n      }\n      ppuVar29 = &PTR_s_native_00125ca0 + (long)unaff_R13 * 2;\n      DAT_00126474 = (&DAT_00125caa)[(long)unaff_R13 * 8];\n      cVar8 = (&DAT_00125ca8)[(long)unaff_R13 * 0x10];\n    }\n    if (cVar8 == -1) {\nLAB_00119248:\n      uVar24 = dcgettext(0,\"unknown PE subsystem: %s\",5);\n                    \n      FUN_00119dd0(uVar24,pFVar14);\n    }\n    if (cVar8 != '\\0') {\n      if (DAT_001264a8 == -1) {\n        DAT_001264a8 = 0x200;\n      }\n      if (DAT_00126488 == -1) {\n        DAT_00126488 = 0x1000;\n      }\n    }\n    unaff_R12 = pFVar14;\n    if (pFVar14 != pFVar21) {\n      free(pFVar21);\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd6:\n    DAT_001279d8 = FUN_00114c80(_optarg,DAT_001279d8,\"--update-section\");\n    FUN_00114d60(DAT_001279d8);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd7:\n    _VerilogDataWidth = FUN_00119940(_optarg,\"--verilog-data-width\");\n    if ((0x10 < _VerilogDataWidth) || ((0x10116UL >> ((byte)_VerilogDataWidth & 0x3f) & 1) == 0)) {\n      pcVar32 = \"error: verilog data width must be 1, 2, 4, 8 or 16\";\n      goto LAB_00117aed;\n    }\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd8:\n    DAT_001279e8 = 1;\n    goto switchD_00117234_caseD_0;\n  case (char *)0xd9:\n    FUN_00114460(_optarg,DAT_001279f0,&DAT_00127938);\n    goto switchD_00117234_caseD_0;\n  case (char *)0xda:\n    DAT_00127910 = DAT_00127910 | 0x80;\n    DAT_00127914 = DAT_00127914 & 0xffffff7f;\n    goto switchD_00117234_caseD_0;\n  }\nLAB_001176c2:\n  uVar24 = dcgettext(0,pcVar32,5);\n                    \n  FUN_00119dd0(uVar24,pFVar14);\n}\n\n",
            "called": [
                "htab_find_slot",
                "FUN_00113f50",
                "getopt_long",
                "FUN_0011a390",
                "FUN_00108c86",
                "mkstemp",
                "FUN_00108d9a",
                "strncasecmp",
                "fseek",
                "FUN_00114460",
                "ftell",
                "strcmp",
                "FUN_00108898",
                "FUN_00119dd0",
                "dup",
                "FUN_00108a2a",
                "FUN_00114c20",
                "getc",
                "FUN_00114190",
                "xmalloc",
                "unlink_if_ordinary",
                "htab_create_alloc",
                "xrealloc",
                "strtol",
                "bfd_errmsg",
                "textdomain",
                "fopen",
                "strlen",
                "strcpy",
                "FUN_00114cf0",
                "bfd_scan_arch",
                "close",
                "FUN_0011a480",
                "FUN_00114690",
                "FUN_00113fe0",
                "memcpy",
                "free",
                "dcgettext",
                "FUN_00113fb0",
                "FUN_00119940",
                "xstrdup",
                "filename_cmp",
                "xcalloc",
                "strerror",
                "FUN_001126c0",
                "bfd_init",
                "FUN_001054af",
                "fread",
                "FUN_00108800",
                "fprintf",
                "FUN_00119970",
                "bfd_set_default_target",
                "strncpy",
                "bfd_get_error",
                "htab_elements",
                "FUN_001199d0",
                "FUN_00114d60",
                "strcasecmp",
                "FUN_00108916",
                "bfd_set_error_program_name",
                "malloc",
                "stat",
                "strchr",
                "FUN_00119ed0",
                "FUN_00115970",
                "strtoul",
                "FUN_00114c80",
                "memmove",
                "ferror",
                "free",
                "__errno_location",
                "fclose",
                "setlocale",
                "bindtextdomain",
                "xmalloc_set_program_name",
                "FUN_00113f20",
                "xexit"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b90",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "FUNC_00116b90"
        },
        "FUN_0010be88": {
            "renaming": {
                "FUN_0010be88": "initialize_debugging_0010be88",
                "param_1": "debugger_state",
                "param_2": "block_start_address",
                "param_3": "placeholder_1",
                "param_4": "placeholder_2",
                "puVar1": "prev_block",
                "uVar2": "success_flag",
                "puVar3": "new_block",
                "puVar4": "current_block",
                "lVar5": "block_address",
                "puVar6": "last_block_next_pointer",
                "puVar7": "new_block_iterator",
                "bVar8": "counter",
                "auVar9": "result"
            },
            "code": "\n\n\nundefined  [16] initialize_debugging_0010be88(long debugger_state,undefined8 block_start_address,undefined8 placeholder_1,undefined8 placeholder_2)\n\n{\n  undefined8 *prev_block;\n  undefined8 success_flag;\n  undefined4 *new_block;\n  undefined8 *current_block;\n  long block_address;\n  undefined8 *last_block_next_pointer;\n  undefined4 *new_block_iterator;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  if ((*(long *)(debugger_state + 8) == 0) || (*(long *)(debugger_state + 0x20) == 0)) {\n    success_flag = dcgettext(0,\"debug_start_block: no current block\",5);\n    fprintf(_stderr,\"%s\\n\",success_flag);\n    success_flag = 0;\n  }\n  else {\n    new_block = (undefined4 *)xmalloc(0x30);\n    new_block_iterator = new_block;\n    for (block_address = 0xc; block_address != 0; block_address = block_address + -1) {\n      *new_block_iterator = 0;\n      new_block_iterator = new_block_iterator + (ulong)counter * -2 + 1;\n    }\n    block_address = *(long *)(debugger_state + 0x20);\n    *(undefined8 *)(new_block + 6) = block_start_address;\n    *(undefined8 *)(new_block + 8) = 0xffffffffffffffff;\n    *(long *)(new_block + 2) = block_address;\n    prev_block = *(undefined8 **)(block_address + 0x10);\n    last_block_next_pointer = (undefined8 *)(block_address + 0x10);\n    while (current_block = prev_block, current_block != (undefined8 *)0x0) {\n      last_block_next_pointer = current_block;\n      prev_block = (undefined8 *)*current_block;\n    }\n    *last_block_next_pointer = new_block;\n    success_flag = 1;\n    *(undefined4 **)(debugger_state + 0x20) = new_block;\n  }\n  result._8_8_ = placeholder_2;\n  result._0_8_ = success_flag;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be88",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debugging_0010be88"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_001126c0",
                "FUN_00119f70",
                "FUN_0010e6a8",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048d0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "FUN_0010ba08": {
            "renaming": {
                "FUN_0010ba08": "generate_warning_message_0010ba08",
                "param_1": "parameters",
                "param_2": "fieldName",
                "param_3": "param3",
                "param_4": "size",
                "param_5": "flag",
                "cVar1": "flagValue",
                "iVar2": "fieldSize",
                "lVar3": "localVar",
                "__s": "string1",
                "sVar4": "length1",
                "sVar5": "length2",
                "sVar6": "length3",
                "__s_00": "string2",
                "uVar7": "warningMessage",
                "uVar8": "returnValue",
                "pcVar9": "flagString"
            },
            "code": "\nundefined8\ngenerateWarningMessage_0010ba08(undefined8 *parameters,char *fieldName,undefined8 param3,ulong size,int flag)\n\n{\n  char flagValue;\n  int fieldSize;\n  long localVar;\n  char *string1;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  char *string2;\n  undefined8 warningMessage;\n  undefined8 returnValue;\n  char *flagString;\n  \n  flagValue = *(char *)(parameters[0xc] + 0x1c);\n  fieldSize = *(int *)(parameters[0xc] + 0x18);\n  string1 = (char *)FUN_00109b2f();\n  if (*(char **)(parameters[0xc] + 0x20) == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(*(char **)(parameters[0xc] + 0x20));\n    length2 = strlen(fieldName);\n    length3 = strlen(string1);\n    string2 = (char *)xmalloc(length1 + 0x32 + length2 + length3);\n    if (flag == 1) {\n      flagString = \"/1\";\n    }\n    else {\n      flagString = \"/0\";\n      if ((flag != 2) && (flagString = \"\", flag != 0)) {\n                    \n        abort();\n      }\n    }\n    if ((size == 0) && (size = (ulong)(uint)(fieldSize * 8), size == 0)) {\n      returnValue = *(undefined8 *)*parameters;\n      warningMessage = dcgettext(0,\"%s: warning: unknown size for field `%s\\' in struct\",5);\n      FUN_00119ed0(warningMessage,returnValue,fieldName);\n    }\n    sprintf(string2,\"%s%s:%s%s,%ld,%ld;\",*(undefined8 *)(parameters[0xc] + 0x20),fieldName,flagString,string1,\n            param3,size);\n    free(*(void **)(parameters[0xc] + 0x20));\n    localVar = parameters[0xc];\n    *(char **)(localVar + 0x20) = string2;\n    if (flagValue != '\\0') {\n      *(undefined *)(localVar + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)localVar >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ba08",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_warning_message_0010ba08"
        },
        "FUN_0010aa53": {
            "renaming": {
                "FUN_0010aa53": "store_data_0010aa53",
                "param_1": "dataStructure",
                "param_2": "value",
                "param_3": "flagChar",
                "param_4": "flagType",
                "cVar1": "flag",
                "lVar2": "dataPtr",
                "cVar3": "subFlagChar",
                "uVar4": "counter",
                "__s": "string",
                "sVar5": "stringLength",
                "pcVar6": "dynamicString",
                "lVar7": "reallocPtr",
                "uVar8": "returnValue",
                "uVar9": "loopCounter",
                "uVar10": "indexStorage"
            },
            "code": "\nundefined8 storeData_0010aa53(long dataStructure,undefined8 value,char flagChar,int flagType)\n\n{\n  char flag;\n  long dataPtr;\n  char subFlagChar;\n  uint counter;\n  char *string;\n  size_t stringLength;\n  char *dynamicString;\n  long reallocPtr;\n  undefined8 returnValue;\n  ulong loopCounter;\n  ulong indexStorage;\n  \n  flag = *(char *)(*(long *)(dataStructure + 0x60) + 0x1c);\n  string = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  dynamicString = (char *)xmalloc(stringLength + 0x19);\n  *dynamicString = flagChar + '0';\n  if (flagType == 1) {\n    subFlagChar = '1';\n  }\n  else {\n    subFlagChar = '0';\n    if ((flagType != 2) && (subFlagChar = '2', flagType != 0)) {\n                    \n      abort();\n    }\n  }\n  dynamicString[1] = subFlagChar;\n  sprintf(dynamicString + 2,\"%ld,%s;\",value);\n  free(string);\n  dataPtr = *(long *)(dataStructure + 0x60);\n  returnValue = 0;\n  if ((dataPtr != 0) && (*(long *)(dataPtr + 0x20) != 0)) {\n    dataPtr = *(long *)(dataPtr + 0x28);\n    indexStorage = 0;\n    if (dataPtr != 0) {\n      counter = 0;\n      do {\n        loopCounter = (ulong)counter;\n        indexStorage = (ulong)counter;\n        counter = counter + 1;\n      } while (*(long *)(dataPtr + loopCounter * 8) != 0);\n    }\n    reallocPtr = xrealloc(dataPtr,(ulong)((int)indexStorage + 2) << 3);\n    *(char **)(reallocPtr + indexStorage * 8) = dynamicString;\n    *(undefined8 *)(reallocPtr + (ulong)((int)indexStorage + 1) * 8) = 0;\n    dataPtr = *(long *)(dataStructure + 0x60);\n    *(long *)(dataPtr + 0x28) = reallocPtr;\n    if (flag != '\\0') {\n      *(undefined *)(dataPtr + 0x1c) = 1;\n    }\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010aa53",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "store_data_0010aa53"
        },
        "FUN_0011173a": {
            "renaming": {
                "FUN_0011173a": "FUNC_0011173a"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0011244f) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined FUNC_0011173a(undefined8 param_1,long *param_2,int param_3,int param_4,ulong param_5,\n                      char *param_6)\n\n{\n  char cVar1;\n  byte bVar2;\n  void *__ptr;\n  char cVar3;\n  undefined uVar4;\n  int iVar5;\n  undefined8 *puVar6;\n  long *plVar7;\n  char *pcVar8;\n  undefined8 uVar9;\n  long lVar10;\n  long lVar11;\n  long lVar12;\n  long **pplVar13;\n  ulong uVar14;\n  ulong uVar15;\n  char *pcVar16;\n  uint uVar17;\n  long **pplVar18;\n  double dVar19;\n  char *local_48;\n  long **local_40 [2];\n  \n  if (param_2[4] != 0) {\n    if (((param_3 == 100) && (*param_6 != '\\0')) && (param_2[5] == param_5)) goto LAB_00111a06;\n    cVar3 = FUN_0010bbd3(param_1);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    *(undefined *)((long)param_2 + 0x44) = 0;\n    *(undefined4 *)(param_2 + 8) = 0;\n    param_2[9] = param_2[4];\n    if (*(char *)(param_2 + 1) == '\\0') {\n      param_2[6] = param_2[5];\n    }\n    *(undefined4 *)(param_2 + 0x10) = 1;\n    puVar6 = (undefined8 *)xmalloc(8);\n    param_2[0x11] = (long)puVar6;\n    *puVar6 = 0;\n    param_2[4] = 0;\n  }\n  strlen(param_6);\n  if (param_3 == 0x84) {\nLAB_00111ab7:\n    uVar4 = FUN_00108f08(param_1,param_6);\n    return uVar4;\n  }\n  if (param_3 < 0x85) {\n    if (param_3 == 0x3c) {\n      iVar5 = strcmp(param_6,\"gcc2_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 2;\n        return 1;\n      }\n      iVar5 = strcmp(param_6,\"gcc_compiled.\");\n      if (iVar5 == 0) {\n        *(undefined4 *)(param_2 + 8) = 1;\n        return 1;\n      }\n      *(undefined *)((long)param_2 + 0x44) = 1;\n      return 1;\n    }\n    if (param_3 < 0x3d) {\n      if (param_3 == 0x24) {\n        if (*param_6 == '\\0') {\n          if (*(char *)(param_2 + 0xc) == '\\0') {\n            return 1;\n          }\n          if (*(char *)(param_2 + 1) != '\\0') {\n            param_5 = param_5 + param_2[7];\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 != '\\0') {\n            cVar3 = FUN_0010be1a(param_1,param_5);\n            if (cVar3 != '\\0') {\n              *(undefined *)(param_2 + 0xc) = 0;\n              param_2[0xd] = -1;\n              return 1;\n            }\n            return 0;\n          }\n          return 0;\n        }\n        if ((*(char *)(param_2 + 0xc) != '\\0') &&\n           ((param_5 < (ulong)param_2[0xd] || (param_2[0xd] == 0xffffffffffffffff)))) {\n          param_2[0xd] = param_5;\n        }\n      }\n      else if (param_3 < 0x25) {\n        if (param_3 == 0xc) {\n          return 1;\n        }\n        if (param_3 - 0x1eU < 2) {\n          return 1;\n        }\n      }\n      else {\n        if (param_3 == 0x2a) {\n          return 1;\n        }\n        if (param_3 == 0x38) {\n          return 1;\n        }\n      }\n    }\n    else {\n      if (param_3 == 100) {\nLAB_00111a06:\n        if (*(char *)(param_2 + 0xc) != '\\0') {\n          uVar14 = param_5;\n          if (((*param_6 != '\\0') && (uVar15 = param_2[0xd], uVar15 != 0xffffffffffffffff)) &&\n             (uVar14 = uVar15, param_5 < uVar15)) {\n            uVar14 = param_5;\n          }\n          cVar3 = FUN_0010c1c6(param_1,param_2);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          cVar3 = FUN_0010be1a(param_1,uVar14);\n          if (cVar3 == '\\0') {\n            return 0;\n          }\n          *(undefined *)(param_2 + 0xc) = 0;\n          param_2[0xd] = -1;\n        }\n        if (*param_6 == '\\0') {\n          return 1;\n        }\n        __ptr = (void *)param_2[4];\n        if (__ptr == (void *)0x0) {\n          lVar12 = xstrdup(param_6);\n          param_2[4] = lVar12;\n        }\n        else {\n          if (*param_6 == '/') {\n            lVar12 = xstrdup(param_6);\n          }\n          else {\n            lVar12 = concat(__ptr,param_6,0);\n          }\n          param_2[4] = lVar12;\n          free(__ptr);\n        }\n        param_2[5] = param_5;\n        return 1;\n      }\n      if (param_3 < 0x65) {\n        if (param_3 == 0x44) {\n          lVar12 = 0;\n          if (*(char *)(param_2 + 0xc) != '\\0') {\n            lVar12 = param_2[7];\n          }\n          uVar4 = FUN_0010bf86(param_1,(long)param_4,lVar12 + param_5);\n          return uVar4;\n        }\n        if (param_3 == 0x62) {\n          return 1;\n        }\n      }\n      else if (param_3 == 0x82) {\n        plVar7 = (long *)xmalloc();\n        iVar5 = *(int *)(param_2 + 0x10);\n        lVar10 = param_2[10];\n        lVar11 = param_2[0xb];\n        plVar7[5] = 0;\n        lVar12 = param_2[0x11];\n        *(int *)(plVar7 + 4) = iVar5;\n        uVar17 = iVar5 + 1;\n        *(uint *)(param_2 + 0x10) = uVar17;\n        *plVar7 = lVar11;\n        plVar7[1] = lVar10;\n        plVar7[2] = (long)param_6;\n        plVar7[3] = param_5;\n        param_2[10] = (long)plVar7;\n        param_2[0xb] = (long)plVar7;\n        lVar12 = xrealloc(lVar12,(ulong)uVar17 << 3);\n        uVar17 = *(uint *)(plVar7 + 4);\n        param_2[0x11] = lVar12;\n        *(undefined8 *)(lVar12 + (ulong)uVar17 * 8) = 0;\n        goto LAB_00111ab7;\n      }\n    }\nLAB_00111c29:\n    pcVar8 = strchr(param_6,0x3a);\n    if ((pcVar8 != (char *)0x0) && ((pcVar8[1] & 0xdfU) == 0x46)) {\n      if (*(char *)(param_2 + 0xc) != '\\0') {\n        uVar14 = param_2[0xd];\n        uVar15 = param_5;\n        if ((uVar14 != 0xffffffffffffffff) && (uVar15 = uVar14, param_5 < uVar14)) {\n          uVar15 = param_5;\n        }\n        cVar3 = FUN_0010c1c6(param_1,param_2);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        cVar3 = FUN_0010be1a(param_1,uVar15);\n        if (cVar3 == '\\0') {\n          return 0;\n        }\n        param_2[0xd] = -1;\n      }\n      if (*(char *)(param_2 + 1) != '\\0') {\n        param_2[7] = param_5;\n      }\n      *(undefined *)(param_2 + 0xc) = 1;\n    }\n    local_48 = strchr(param_6,0x3a);\n    if (local_48 == (char *)0x0) {\n      return 1;\n    }\nLAB_00111cbc:\n    if (local_48[1] == ':') goto code_r0x00111cc7;\n    if (*param_6 == '$') {\n      cVar3 = param_6[1];\n      pcVar16 = \"eh_throw\";\n      if (cVar3 != 'e') {\n        if (cVar3 < 'f') {\n          if ((cVar3 != 'X') && (cVar3 != '_')) {\nLAB_00111d1a:\n            uVar9 = dcgettext(0,\"unknown C++ encoded name\",5);\n            FUN_00108fe8(param_6,uVar9);\n          }\n        }\n        else {\n          pcVar16 = \"this\";\n          if (cVar3 == 't') goto LAB_00111d62;\n          if (cVar3 != 'v') goto LAB_00111d1a;\n        }\n        goto LAB_00111d38;\n      }\n    }\n    else {\nLAB_00111d38:\n      pcVar16 = (char *)0x0;\n      if ((param_6 != local_48) && ((*param_6 != ' ' || (local_48 != param_6 + 1)))) {\n        pcVar16 = (char *)FUN_00109a0b(param_6,(int)local_48 - (int)param_6);\n      }\n    }\nLAB_00111d62:\n    bVar2 = local_48[1];\n    pcVar8 = local_48 + 1;\n    if (((byte)(*(ushort *)(&_sch_istable + (ulong)bVar2 * 2) >> 2) & 1 |\n        (bVar2 == 0x2d || bVar2 == 0x28)) != 0) {\nswitchD_00111de5_caseD_58:\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      goto LAB_001123e8;\n    }\n    if (bVar2 == 0) goto switchD_00111de5_caseD_44;\n    pcVar8 = local_48 + 2;\n    cVar3 = local_48[1];\n    switch(cVar3) {\n    case 'C':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      pcVar8 = \"debug_record_label: not implemented\";\n      if (lVar12 == 0) {\n        return 0;\n      }\n      goto LAB_00111b96;\n    default:\n      goto switchD_00111de5_caseD_44;\n    case 'F':\n    case 'f':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      cVar3 = FUN_0010bc80(param_1,pcVar16,lVar12,cVar3 == 'F',param_5);\n      if (cVar3 != '\\0') {\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n      return 0;\n    case 'G':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) goto LAB_0011208f;\n      lVar10 = param_2[3];\n      plVar7 = (long *)param_2[2];\n      cVar3 = *(char *)(*(long *)(*param_2 + 8) + 0x1c);\n      goto LAB_00112045;\n    case 'P':\n      if (param_3 == 0x24) {\n        local_48 = pcVar8;\n        do {\n          if (*local_48 != ';') {\n            return 1;\n          }\n          local_48 = local_48 + 1;\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        } while (lVar12 != 0);\n        return 0;\n      }\n    case 'R':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      break;\n    case 'S':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 2;\n      goto LAB_001121c4;\n    case 'T':\n      cVar3 = local_48[2];\n      if (cVar3 == 't') {\n        pcVar8 = local_48 + 3;\n      }\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      cVar1 = *(char *)(param_2 + 0x35);\n      plVar7 = (long *)FUN_0010c6be(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] != (long **)0x0) {\n        *local_40[0] = plVar7;\n      }\n      if (cVar1 != '\\0') goto LAB_001122f0;\n      pplVar13 = (long **)(param_2 + 0x34);\n      pplVar18 = (long **)param_2[0x34];\n      goto LAB_001122b2;\n    case 'V':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n      goto LAB_001123e8;\n    case 'X':\n    case 'l':\n    case 's':\n      goto switchD_00111de5_caseD_58;\n    case 'Y':\n      pcVar8 = local_48 + 3;\n      if (((local_48[2] != '\\0') && (pcVar8 = local_48 + 4, local_48[3] == 'n')) &&\n         (pcVar8 = local_48 + 5, pcVar16 = local_48 + 4, local_48 = pcVar8, *pcVar16 == '0')) {\n        for (; pcVar8 = local_48, *local_48 != '\\0'; local_48 = local_48 + 1) {\n          if (*local_48 == ';') {\n            return 1;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'a':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 4;\n      break;\n    case 'c':\n      if (local_48[2] == '=') {\n        pcVar8 = local_48 + 4;\n        cVar3 = local_48[3];\n        local_48 = pcVar8;\n        if (cVar3 == 'i') {\n          lVar12 = strtol(pcVar8,(char **)0x0,10);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar10 = FUN_00112996(param_1,pcVar16,4);\n          if (lVar10 != 0) {\n            *(long *)(lVar10 + 0x20) = (long)(int)lVar12;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'r') {\n          dVar19 = strtod(pcVar8,(char **)0x0);\n          if (pcVar16 == (char *)0x0) {\n            return 0;\n          }\n          lVar12 = FUN_00112996(param_1,pcVar16,5);\n          if (lVar12 != 0) {\n            *(double *)(lVar12 + 0x20) = dVar19;\n            return 1;\n          }\n          return 0;\n        }\n        if (cVar3 == 'e') {\n          lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n          if (lVar12 == 0) {\n            return 0;\n          }\n          pcVar8 = local_48;\n          if (*local_48 == ',') {\n            lVar10 = strtol(local_48,(char **)0x0,10);\n            if (pcVar16 == (char *)0x0) {\n              return 0;\n            }\n            lVar11 = FUN_00112996(param_1,pcVar16,6);\n            if (lVar11 != 0) {\n              plVar7 = (long *)xmalloc(0x10);\n              *plVar7 = lVar12;\n              plVar7[1] = (long)(int)lVar10;\n              *(long **)(lVar11 + 0x20) = plVar7;\n              return 1;\n            }\n            return 0;\n          }\n        }\n      }\n      goto switchD_00111de5_caseD_44;\n    case 'p':\n      if (local_48[2] == 'F') {\n        local_48 = local_48 + 3;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n        if (lVar12 == 0) {\n          return 0;\n        }\n        uVar9 = FUN_00113ce0(lVar12,0,0);\n        lVar12 = FUN_00113d3a(uVar9);\n      }\n      else {\n        local_48 = pcVar8;\n        lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      }\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 1;\n      break;\n    case 'r':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 5;\nLAB_001123e8:\n      cVar3 = FUN_0010c139(param_1,param_2,pcVar16,lVar12,uVar9,param_5);\n      goto joined_r0x001123f8;\n    case 't':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,pcVar16,&local_48,local_40);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      if (pcVar16 == (char *)0x0) {\n        return 1;\n      }\n      plVar7 = (long *)FUN_0010c218(param_1,pcVar16,lVar12);\n      if (plVar7 == (long *)0x0) {\n        return 0;\n      }\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    case 'v':\n      local_48 = pcVar8;\n      lVar12 = FUNC_0010ee3f(param_1,param_2,0,&local_48,0);\n      if (lVar12 == 0) {\n        return 0;\n      }\n      uVar9 = 3;\n    }\n    cVar3 = FUN_0010bd62(param_1,pcVar16,lVar12,uVar9,param_5);\n    goto joined_r0x001123f8;\n  }\n  if (param_3 == 0xe0) {\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    cVar3 = FUN_0010c1c6(param_1,param_2);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    cVar3 = FUN_0010bf20(param_1,param_2[7] + param_2[6] + param_5);\n    if (cVar3 == '\\0') {\n      return 0;\n    }\n    param_2 = param_2 + 0xe;\n    *(int *)param_2 = *(int *)param_2 + -1;\n    pcVar8 = \"Too many N_RBRACs\\n\";\n    if (-1 < *(int *)param_2) {\n      return 1;\n    }\n  }\n  else {\n    if (0xe0 < param_3) {\n      if (param_3 == 0xe2) {\n        pcVar8 = \"debug_start_common_block: not implemented\";\n      }\n      else {\n        pcVar8 = \"debug_end_common_block: not implemented\";\n        if (param_3 != 0xe4) goto LAB_00111c29;\n      }\nLAB_00111b96:\n      uVar9 = dcgettext(0,pcVar8,5);\n      fprintf(_stderr,\"%s\\n\",uVar9);\n      return 0;\n    }\n    if (param_3 != 0xc0) {\n      if (param_3 == 0xc2) {\n        iVar5 = *(int *)(param_2 + 0x10);\n        *(uint *)(param_2 + 0x10) = iVar5 + 1U;\n        lVar12 = xrealloc(param_2[0x11],(ulong)(iVar5 + 1U) << 3);\n        puVar6 = (undefined8 *)param_2[0xb];\n        param_2[0x11] = lVar12;\n        while( true ) {\n          if (puVar6 == (undefined8 *)0x0) {\n            uVar9 = dcgettext(0,\"Undefined N_EXCL\",5);\n            FUN_00108fe8(param_6,uVar9);\n            *(undefined8 *)(param_2[0x11] + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = 0;\n            return 1;\n          }\n          if ((param_5 == puVar6[3]) && (iVar5 = strcmp((char *)puVar6[2],param_6), iVar5 == 0))\n          break;\n          puVar6 = (undefined8 *)*puVar6;\n        }\n        *(undefined8 *)(lVar12 + (ulong)(*(int *)(param_2 + 0x10) - 1) * 8) = puVar6[5];\n        return 1;\n      }\n      if (param_3 == 0xa2) {\n        lVar12 = param_2[10];\n        if (lVar12 != 0) {\n          lVar10 = *(long *)(lVar12 + 8);\n          uVar17 = *(uint *)(lVar12 + 0x20);\n          param_2[10] = lVar10;\n          if ((uVar17 < *(uint *)(param_2 + 0x10)) &&\n             (*(undefined8 *)(lVar12 + 0x28) = *(undefined8 *)(param_2[0x11] + (ulong)uVar17 * 8),\n             lVar10 != 0)) {\n            param_6 = *(char **)(lVar10 + 0x10);\n            goto LAB_00111ab7;\n          }\n        }\n        param_6 = (char *)param_2[9];\n        goto LAB_00111ab7;\n      }\n      goto LAB_00111c29;\n    }\n    if ((*(char *)((long)param_2 + 0x44) != '\\0') && (param_4 == 1)) {\n      return 1;\n    }\n    if (*(char *)(param_2 + 0xc) != '\\0') {\n      cVar3 = FUN_0010be88(param_1,param_2[7] + param_2[6] + param_5);\n      if (cVar3 == '\\0') {\n        return 0;\n      }\n      cVar3 = FUN_0010c1c6(param_1,param_2);\n      if (cVar3 != '\\0') {\n        *(int *)(param_2 + 0xe) = *(int *)(param_2 + 0xe) + 1;\n        return 1;\n      }\n      return 0;\n    }\n    pcVar8 = \"N_LBRAC not within function\\n\";\n  }\n  pcVar8 = (char *)dcgettext(0,pcVar8,5);\n  fprintf(_stderr,pcVar8);\n  return 0;\ncode_r0x00111cc7:\n  local_48 = local_48 + 2;\n  local_48 = strchr(local_48,0x3a);\n  if (local_48 == (char *)0x0) {\n    pcVar8 = (char *)0x0;\nswitchD_00111de5_caseD_44:\n    local_48 = pcVar8;\n    FUN_00108fb9(param_6);\n    return 0;\n  }\n  goto LAB_00111cbc;\nLAB_001122b2:\n  if (pplVar18 == (long **)0x0) {\nLAB_001122f0:\n    if (cVar3 != 't') {\n      return 1;\n    }\n    plVar7 = (long *)FUN_0010c218(param_1,pcVar16,plVar7);\n    if (plVar7 != (long *)0x0) {\n      if (local_40[0] == (long **)0x0) {\n        return 1;\n      }\n      *local_40[0] = plVar7;\n      return 1;\n    }\n    return 0;\n  }\n  if ((*(char *)pplVar18[1] == *pcVar16) &&\n     (iVar5 = strcmp((char *)pplVar18[1],pcVar16), iVar5 == 0)) {\n    pplVar18[3] = plVar7;\n    *pplVar13 = *pplVar18;\n    goto LAB_001122f0;\n  }\n  pplVar13 = pplVar18;\n  pplVar18 = (long **)*pplVar18;\n  goto LAB_001122b2;\nLAB_00112045:\n  if (lVar10 < 1) {\nLAB_0011208f:\n    uVar9 = 1;\nLAB_001121c4:\n    cVar3 = FUN_0010c05d(param_1,pcVar16,lVar12,uVar9,param_5);\njoined_r0x001123f8:\n    if (cVar3 != '\\0') {\n      return 1;\n    }\n    return 0;\n  }\n  pcVar8 = *(char **)(*plVar7 + 8);\n  if ((cVar3 != '\\0') && (cVar3 == *pcVar8)) {\n    pcVar8 = pcVar8 + 1;\n  }\n  if ((*pcVar8 == *pcVar16) && (iVar5 = strcmp(pcVar8,pcVar16), iVar5 == 0)) {\n    param_5 = *(long *)(*plVar7 + 0x10) + *(long *)(*(long *)(*plVar7 + 0x20) + 0x30);\n    goto LAB_0011208f;\n  }\n  lVar10 = lVar10 + -1;\n  plVar7 = plVar7 + 1;\n  goto LAB_00112045;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c05d",
                "xstrdup",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "fprintf",
                "FUN_00108fb9",
                "FUN_00113ce0",
                "FUN_0010c139",
                "strcmp",
                "FUN_00113d3a",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "xmalloc",
                "FUN_0010bbd3",
                "strchr",
                "xrealloc",
                "FUN_0010c1c6",
                "FUN_0010c6be",
                "strtod",
                "FUN_00112996",
                "strtol",
                "strlen",
                "FUN_0010bf86",
                "FUN_0010be1a",
                "free",
                "FUN_0010bc80",
                "FUN_0010be88",
                "concat",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0011173a",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "FUNC_0011173a"
        },
        "FUN_00115dc0": {
            "renaming": {
                "FUN_00115dc0": "decode_and_process_binary_00115dc0",
                "param_1": "param",
                "param_2": "info",
                "param_3": "data",
                "cVar1": "result",
                "iVar2": "error_code",
                "uVar3": "reloc_upper_bound",
                "lVar4": "reloc_size",
                "puVar5": "reloc_data",
                "uVar6": "reloc_count",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "puVar7": "new_reloc_data",
                "puVar8": "new_reloc_data_ptr",
                "uVar9": "iteration_count",
                "uStack_38": "unknown_variable"
            },
            "code": "\nvoid decode_and_process_binary_00115dc0(undefined8 param,undefined8 *info,long data)\n\n{\n  char result;\n  int error_code;\n  undefined8 reloc_upper_bound;\n  long reloc_size;\n  undefined8 *reloc_data;\n  ulong reloc_count;\n  code *jump_table;\n  undefined8 *new_reloc_data;\n  undefined8 *new_reloc_data_ptr;\n  ulong iteration_count;\n  undefined8 unknown_variable;\n  \n  result = FUN_00115f50(param,info,0);\n  if (result != '\\0') {\n    return;\n  }\n  reloc_upper_bound = info[0xc];\n  if ((((*(byte *)(data + 0x48) & 7) != 3) && (DAT_00127a48 != 6)) &&\n     (reloc_size = FUN_00114190(*info,0,0x100), reloc_size == 0)) {\n    reloc_size = bfd_get_reloc_upper_bound(param,info);\n    if (reloc_size < 0) {\n      if ((reloc_size != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n        DAT_00127a40 = 1;\n        reloc_upper_bound = 0;\nLAB_00108315:\n        FUN_001126c0(0,param,info,reloc_upper_bound,unknown_variable);\n        return;\n      }\n    }\n    else if (reloc_size != 0) {\n      reloc_data = (undefined8 *)info[0xe];\n      if (reloc_data == (undefined8 *)0x0) {\n        reloc_data = (undefined8 *)bfd_alloc(data);\n        if (reloc_data == (undefined8 *)0x0) {\n          FUN_0011a110(0);\n                    \n          xexit(1);\n        }\n        reloc_count = bfd_canonicalize_reloc(param,info,reloc_data,DAT_001278d0);\n        if ((long)reloc_count < 0) {\n          DAT_00127a40 = 1;\n          reloc_upper_bound = dcgettext(0,\"relocation count is negative\",5);\n          goto LAB_00108315;\n        }\n      }\n      else {\n        reloc_count = (ulong)*(uint *)(info + 0xf);\n      }\n      if (DAT_00127a48 == 7) {\n        new_reloc_data = reloc_data;\n        for (iteration_count = 0; iteration_count != reloc_count; iteration_count = iteration_count + 1) {\n          new_reloc_data_ptr = new_reloc_data;\n          if (((*(long **)reloc_data[iteration_count] != (long *)0x0) &&\n              (reloc_size = **(long **)reloc_data[iteration_count], reloc_size != 0)) &&\n             (result = FUN_00115d70(*(undefined8 *)(reloc_size + 8),DAT_00127a28), result != '\\0')) {\n            new_reloc_data_ptr = new_reloc_data + 1;\n            *new_reloc_data = reloc_data[iteration_count];\n          }\n          new_reloc_data = new_reloc_data_ptr;\n        }\n        *new_reloc_data = 0;\n        reloc_count = (long)new_reloc_data - (long)reloc_data >> 3;\n      }\n      jump_table = *(code **)(*(long *)(data + 8) + 0x288);\n      if (reloc_count == 0) {\n        reloc_count = 0;\n        reloc_data = (undefined8 *)0x0;\n      }\n      else {\n        reloc_count = reloc_count & 0xffffffff;\n      }\n      goto LAB_00115e9a;\n    }\n  }\n  reloc_count = 0;\n  reloc_data = (undefined8 *)0x0;\n  jump_table = *(code **)(*(long *)(data + 8) + 0x288);\nLAB_00115e9a:\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)(data,reloc_upper_bound,reloc_data,reloc_count);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_0011a110",
                "FUN_001082df",
                "bfd_get_error",
                "bfd_canonicalize_reloc",
                "bfd_alloc",
                "FUN_001126c0",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115dc0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decode_and_process_binary_00115dc0"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104320",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "FUN_0010d559": {
            "renaming": {
                "FUN_0010d559": "parse_and_process_data_0010d559",
                "param_1": "input_array",
                "param_2": "data_ptr",
                "param_3": "result_ptr",
                "bVar1": "first_byte",
                "pbVar2": "current_byte_ptr",
                "cVar3": "is_valid",
                "uVar4": "data_length",
                "iVar5": "comparison_result",
                "ppcVar6": "optional_data_ptr",
                "sVar7": "length",
                "lVar8": "parsed_value",
                "plVar9": "existing_data_ptr",
                "pcVar10": "temp_string",
                "__s1": "result_string",
                "__ptr": "temp_data_ptr",
                "pbVar11": "next_byte_ptr",
                "uVar12": "status",
                "local_64": "loop_counter",
                "local_40": "optional_data_buffer"
            },
            "code": "\nundefined8 parse_and_process_data_0010d559(undefined8 *input_array,byte **data_ptr,long *result_ptr)\n\n{\n  byte first_byte;\n  byte *current_byte_ptr;\n  char is_valid;\n  uint data_length;\n  int comparison_result;\n  char **optional_data_ptr;\n  size_t length;\n  long parsed_value;\n  long *existing_data_ptr;\n  char *temp_string;\n  char *result_string;\n  void *temp_data_ptr;\n  byte *next_byte_ptr;\n  undefined8 status;\n  byte *__nptr;\n  int loop_counter;\n  char *optional_data_buffer [2];\n  \n  current_byte_ptr = *data_ptr;\n  first_byte = current_byte_ptr[1];\n  if ((char)first_byte < ':') {\n    if ((char)first_byte < '1') goto LAB_0010d5d8;\n    loop_counter = (char)first_byte + -0x30;\n    if (current_byte_ptr[2] == 0x5f) {\n      *data_ptr = current_byte_ptr + 1;\n    }\n    next_byte_ptr = *data_ptr + 2;\n  }\n  else {\n    if (((first_byte != 0x5f) || (((&_sch_istable)[(ulong)current_byte_ptr[2] * 2] & 4) == 0)) ||\n       (current_byte_ptr[2] == 0x30)) goto LAB_0010d5d8;\n    __nptr = current_byte_ptr + 2;\n    parsed_value = strtol((char *)__nptr,(char **)0x0,10);\n    loop_counter = (int)parsed_value;\n    while (((&_sch_istable)[(ulong)*__nptr * 2] & 4) != 0) {\n      __nptr = __nptr + 1;\n    }\n    next_byte_ptr = __nptr + 1;\n    if (*__nptr != 0x5f) goto LAB_0010d5d8;\n  }\n  *data_ptr = next_byte_ptr;\n  optional_data_ptr = (char **)0x0;\n  if (result_ptr != (long *)0x0) {\n    optional_data_ptr = optional_data_buffer;\n  }\n  parsed_value = 0;\n  while( true ) {\n    while( true ) {\n      loop_counter = loop_counter + -1;\n      if (loop_counter == -1) {\n        if (result_ptr != (long *)0x0) {\n          *result_ptr = parsed_value;\n        }\n        return 1;\n      }\n      if (**data_ptr == 0x5f) {\n        *data_ptr = *data_ptr + 1;\n      }\n      if (**data_ptr != 0x74) break;\n      is_valid = FUN_0010d21c(input_array,data_ptr,optional_data_ptr);\n      temp_string = optional_data_buffer[0];\n      if (is_valid == '\\0') {\n        return 0;\n      }\n      if (result_ptr != (long *)0x0) {\n        length = strlen(optional_data_buffer[0]);\n        parsed_value = FUN_0010afd5(*input_array,input_array[1],temp_string,length & 0xffffffff,9);\n        free(temp_string);\n        if (parsed_value == 0) {\n          return 0;\n        }\n      }\n    }\n    data_length = FUN_00108e76(data_ptr);\n    length = strlen((char *)*data_ptr);\n    if (length < data_length) break;\n    if (result_ptr != (long *)0x0) {\n      if ((parsed_value != 0) && (existing_data_ptr = (long *)FUN_00113b1e(parsed_value), existing_data_ptr != (long *)0x0)) {\n        temp_string = (char *)FUN_00109a0b(*data_ptr,data_length);\n        for (; parsed_value = *existing_data_ptr, parsed_value != 0; existing_data_ptr = existing_data_ptr + 1) {\n          parsed_value = *(long *)(parsed_value + 8);\n          if (parsed_value == 0) {\n            free(temp_string);\n            return 0;\n          }\n          result_string = (char *)FUN_001129f4(parsed_value);\n          if ((result_string != (char *)0x0) && (comparison_result = strcmp(result_string,temp_string), comparison_result == 0)) break;\n        }\n        free(temp_string);\n        if (parsed_value != 0) goto LAB_0010d7ad;\n      }\n      status = 9;\n      if (loop_counter == 0) {\n        temp_data_ptr = (void *)FUN_00109a0b(*data_ptr,data_length);\n        parsed_value = FUN_0010914e(*input_array,temp_data_ptr);\n        free(temp_data_ptr);\n        if (parsed_value != 0) goto LAB_0010d7ad;\n        status = 0;\n      }\n      parsed_value = FUN_0010afd5(*input_array,input_array[1],*data_ptr,data_length,status);\n      if (parsed_value == 0) {\n        return 0;\n      }\n    }\nLAB_0010d7ad:\n    *data_ptr = *data_ptr + data_length;\n  }\nLAB_0010d5d8:\n  FUN_0010911f(current_byte_ptr);\n  return 0;\n}\n\n",
            "called": [
                "free",
                "FUN_0010d21c",
                "strcmp",
                "FUN_0010911f",
                "FUN_00113b1e",
                "FUN_0010914e",
                "FUN_00108e76",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "strtol",
                "FUN_001129f4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d559",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_and_process_data_0010d559"
        },
        "FUN_00119e70": {
            "renaming": {
                "FUN_00119e70": "print_error_message_00119e70",
                "param_1": "message",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_00119e70(char *message,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00127600);\n  vfprintf(standardError,message,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "putc",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119e70",
            "calling": [
                "FUN_00119ed0",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "print_error_message_00119e70"
        },
        "FUN_00108466": {
            "renaming": {
                "FUN_00108466": "cleanup_function_00108466",
                "param_7": "cleanupParameter"
            },
            "code": "\nvoid cleanupFunction_00108466(void)\n\n{\n  void *cleanupParameter;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0);\n  free(cleanupParameter);\n  return;\n}\n\n",
            "called": [
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108466",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "cleanup_function_00108466"
        },
        "mkstemps": {
            "renaming": {},
            "code": "\n\n\nint mkstemps(char *__template,int __suffixlen)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemps(__template,__suffixlen);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemps"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104030",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "mkstemps"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104680",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00108e76": {
            "renaming": {
                "FUN_00108e76": "convert_string_to_int_00108e76",
                "param_1": "stringPtr",
                "bVar1": "currentChar",
                "iVar2": "result"
            },
            "code": "\nint convertStringToInt_00108e76(byte **stringPtr)\n\n{\n  byte currentChar;\n  int result;\n  \n  result = 0;\n  while( true ) {\n    currentChar = **stringPtr;\n    if (((&_sch_istable)[(ulong)currentChar * 2] & 4) == 0) break;\n    *stringPtr = *stringPtr + 1;\n    result = result * 10 + -0x30 + (int)(char)currentChar;\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108e76",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "convert_string_to_int_00108e76"
        },
        "FUN_0010bb52": {
            "renaming": {
                "FUN_0010bb52": "allocate_and_initialize_hash_0010bb52",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "lVar1": "hash_object"
            },
            "code": "\nlong allocate_and_initialize_hash_0010bb52(long input,undefined8 param2,undefined8 param3)\n\n{\n  long hash_object;\n  \n  if (((input != 0) || (input = bfd_hash_allocate(param2,0x30), input != 0)) &&\n     (hash_object = bfd_hash_newfunc(input,param2,param3), hash_object != 0)) {\n    *(undefined8 *)(hash_object + 0x20) = 0xffffffffffffffff;\n    *(undefined8 *)(hash_object + 0x18) = 0;\n    *(undefined4 *)(hash_object + 0x28) = 0;\n    return hash_object;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_allocate",
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bb52",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_hash_0010bb52"
        },
        "thunk_FUN_0010e439": {
            "renaming": {
                "thunk_FUN_0010e439": "update_param_and_call_function_thunk_0010e439",
                "param_1": "base_address",
                "param_2": "value"
            },
            "code": "\nvoid update_param_and_call_function_thunk_0010e439(long base_address,undefined8 value)\n\n{\n  *(undefined8 *)(base_address + 0x210) = value;\n  FUN_0010e2f0(base_address,0x84,0,0,value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e439"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e451",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "update_param_and_call_function_thunk_0010e439"
        },
        "FUN_0011283f": {
            "renaming": {
                "FUN_0011283f": "find_executable_file_0011283f",
                "param_1": "file_path",
                "param_2": "executable_file",
                "iVar1": "access_result",
                "sStack_a8": "file_info"
            },
            "code": "\nchar * find_executable_file_0011283f(char *file_path,char *executable_file)\n\n{\n  int access_result;\n  stat file_info;\n  \n  if ((executable_file == (char *)0x0) && (file_path != (char *)0x0)) {\n    access_result = access(file_path,7);\n    if (access_result == 0) {\n      access_result = stat(file_path,&file_info);\n      if ((access_result == 0) && ((file_info.st_mode & 0xf000) == 0x4000)) {\n        executable_file = file_path;\n      }\n    }\n  }\n  return executable_file;\n}\n\n",
            "called": [
                "stat",
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011283f",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "find_executable_file_0011283f"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_set_section_size": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_size(void)\n\n{\n  bfd_set_section_size();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045f0",
            "calling": [
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_size"
        },
        "FUN_00108237": {
            "renaming": {
                "FUN_00108237": "close_file_00108237",
                "piVar2": "errorPointer",
                "iVar1": "originalError",
                "unaff_R12D": "fileDescriptor"
            },
            "code": "\nundefined8 closeFile_00108237(void)\n\n{\n  int originalError;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  originalError = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = originalError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "__errno_location",
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108237",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "close_file_00108237"
        },
        "bfd_hash_allocate": {
            "renaming": {},
            "code": "\nvoid bfd_hash_allocate(void)\n\n{\n  bfd_hash_allocate();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_allocate"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104450",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_allocate"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043c0",
            "calling": [
                "FUN_00115a90",
                "FUN_00116b90",
                "FUN_001199d0",
                "FUN_00114690",
                "FUN_00108237"
            ],
            "imported": false,
            "current_name": "close"
        },
        "getenv": {
            "renaming": {},
            "code": "\n\n\nchar * getenv(char *__name)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = getenv(__name);\n  return pcVar1;\n}\n\n",
            "called": [
                "getenv"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104040",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "getenv"
        },
        "fnmatch": {
            "renaming": {},
            "code": "\n\n\nint fnmatch(char *__pattern,char *__name,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = fnmatch(__pattern,__name,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104340",
            "calling": [
                "FUN_00114190",
                "FUN_0011a170"
            ],
            "imported": false,
            "current_name": "fnmatch"
        },
        "FUN_0010bc80": {
            "renaming": {
                "FUN_0010bc80": "record_debug_function_0010bc80",
                "param_1": "debugContext",
                "param_2": "filename",
                "param_3": "recordSize",
                "param_4": "recordType",
                "uVar1": "errorMessage",
                "plVar2": "recordPtr",
                "puVar3": "bufferPtr",
                "lVar4": "loopCounter",
                "puVar5": "tempPtr",
                "pcVar6": "tempFilename",
                "bVar7": "zeroFlag",
                "auVar8": "returnValue"
            },
            "code": "\n\n\nundefined  [16]\nrecordDebugFunction_0010bc80(long debugContext,char *filename,long recordSize,uint recordType,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined8 errorMessage;\n  long *recordPtr;\n  undefined4 *bufferPtr;\n  long loopCounter;\n  undefined4 *tempPtr;\n  char *tempFilename;\n  byte zeroFlag;\n  undefined returnValue [16];\n  \n  zeroFlag = 0;\n  tempFilename = \"\";\n  if (filename != (char *)0x0) {\n    tempFilename = filename;\n  }\n  if (recordSize != 0) {\n    if (*(long *)(debugContext + 8) == 0) {\n      errorMessage = dcgettext(0,\"debug_record_function: no debug_set_filename call\",5);\n      fprintf(_stderr,\"%s\\n\",errorMessage);\n    }\n    else {\n      recordPtr = (long *)xmalloc(0x18);\n      *recordPtr = recordSize;\n      *(undefined (*) [16])(recordPtr + 1) = ZEXT816(0);\n      bufferPtr = (undefined4 *)xmalloc(0x30);\n      *(long **)(debugContext + 0x18) = recordPtr;\n      recordPtr[2] = (long)bufferPtr;\n      tempPtr = bufferPtr;\n      for (loopCounter = 0xc; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *tempPtr = 0;\n        tempPtr = tempPtr + (ulong)zeroFlag * -2 + 1;\n      }\n      *(undefined4 **)(debugContext + 0x20) = bufferPtr;\n      loopCounter = *(long *)(debugContext + 0x10);\n      *(undefined8 *)(bufferPtr + 6) = param_5;\n      *(undefined8 *)(bufferPtr + 8) = 0xffffffffffffffff;\n      loopCounter = FUN_00112925(loopCounter + 0x10,tempFilename,3,(recordType & 0xff) + 1);\n      if (loopCounter != 0) {\n        *(long **)(loopCounter + 0x20) = recordPtr;\n        errorMessage = CONCAT71((int7)((ulong)loopCounter >> 8),1);\n        goto LAB_0010bd56;\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_0010bd56:\n  returnValue._8_8_ = param_6;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bc80",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "record_debug_function_0010bc80"
        },
        "fchmod": {
            "renaming": {},
            "code": "\n\n\nint fchmod(int __fd,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = fchmod(__fd,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "fchmod"
        },
        "FUN_001152b6": {
            "renaming": {
                "FUN_001152b6": "FUNC_001152b6"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_001152b6(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  undefined4 unaff_EBX;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  long unaff_RBP;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  int unaff_R12D;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong uStack0000000000000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  if (unaff_R12D == 0) {\n    unaff_R12D = *(int *)(unaff_RBP + 0xc);\n    unaff_EBX = *(undefined4 *)(unaff_RBP + 0x10);\n    if (((unaff_R12D == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) {\n      uVar28 = FUNC_00107880();\n      return uVar28;\n    }\n  }\n  else {\n    uVar19 = FUN_001125fa();\n    uVar18 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar18,uVar19);\n  }\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))(param_7,unaff_R12D,unaff_EBX);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack0000000000000010 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)uStack0000000000000010 < 0) goto LAB_00107a82;\n  if (uStack0000000000000010 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) &&\n                (sVar21 = fwrite(in_stack_00000140,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar28;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack0000000000000020;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + uStack0000000000000010; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + uStack0000000000000010))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar30)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar27,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (uStack0000000000000010 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = uStack0000000000000010;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack0000000000000010 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack0000000000000010 != 0) {\n        plVar6 = DAT_001278d0 + uStack0000000000000010;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (uStack0000000000000010 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            in_stack_00000140 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (uStack0000000000000010 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack0000000000000010 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar17,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,uStack0000000000000010 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar27 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "FUN_00107880",
                "FUN_00119ed0"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001152b6",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "FUNC_001152b6"
        },
        "FUN_00114cf0": {
            "renaming": {
                "FUN_00114cf0": "allocate_file_path_00114cf0",
                "param_1": "filePath",
                "pcVar1": "lastSlash",
                "lVar2": "offset",
                "lVar3": "filePathLength",
                "lVar4": "lastSlashIndex",
                "pcVar5": "newFilePath",
                "bVar6": "foundSlash"
            },
            "code": "\nvoid allocateFilePath_00114cf0(char *filePath)\n\n{\n  char *lastSlash;\n  long offset;\n  long filePathLength;\n  long lastSlashIndex;\n  char *newFilePath;\n  byte foundSlash;\n  \n  foundSlash = 0;\n  lastSlash = strrchr(filePath,0x2f);\n  if (lastSlash == (char *)0x0) {\n    lastSlash = (char *)xmalloc(9);\n    filePathLength = 0;\n  }\n  else {\n    lastSlashIndex = (long)lastSlash - (long)filePath;\n    lastSlash = (char *)xmalloc(lastSlashIndex + 0xb);\n    filePathLength = lastSlashIndex + 1;\n    newFilePath = lastSlash;\n    for (offset = lastSlashIndex; offset != 0; offset = offset + -1) {\n      *newFilePath = *filePath;\n      filePath = filePath + (ulong)foundSlash * -2 + 1;\n      newFilePath = newFilePath + (ulong)foundSlash * -2 + 1;\n    }\n    lastSlash[lastSlashIndex] = '/';\n  }\n  *(undefined8 *)(lastSlash + filePathLength) = 0x5858585858587473;\n  *(undefined *)((long)(lastSlash + filePathLength) + 8) = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc",
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114cf0",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "allocate_file_path_00114cf0"
        },
        "FUN_0010a181": {
            "renaming": {
                "FUN_0010a181": "generate_data_0010a181",
                "param_1": "dataStruct",
                "param_2": "startValue",
                "param_3": "endValue",
                "param_4": "flag",
                "cVar1": "flagChar",
                "__s": "stringValue1",
                "__s_00": "stringValue2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "resultString",
                "lVar7": "counter",
                "local_41": "localFlag",
                "iVar2": "var1",
                "iVar3": "var2",
                "uVar4": "returnValue"
            },
            "code": "\nundefined4 generateData_0010a181(long dataStruct,long startValue,long endValue,byte flag)\n\n{\n  char flagChar;\n  int var1;\n  int var2;\n  undefined4 returnValue;\n  char *stringValue1;\n  char *stringValue2;\n  size_t length1;\n  size_t length2;\n  char *resultString;\n  long counter;\n  byte localFlag;\n  \n  flagChar = *(char *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  stringValue1 = (char *)FUN_00109b2f();\n  localFlag = 1;\n  if (flagChar == '\\0') {\n    localFlag = *(byte *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  }\n  var1 = *(int *)(*(long *)(dataStruct + 0x60) + 0x18);\n  stringValue2 = (char *)FUN_00109b2f(dataStruct);\n  length1 = strlen(stringValue1);\n  length2 = strlen(stringValue2);\n  resultString = (char *)xmalloc(length1 + 100 + length2);\n  if (flag == 0) {\n    *resultString = '\\0';\n    counter = 0;\n    localFlag = localFlag & 1;\n  }\n  else {\n    counter = *(long *)(dataStruct + 0x68);\n    *(long *)(dataStruct + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n    localFlag = flag;\n  }\n  length1 = strlen(resultString);\n  sprintf(resultString + length1,\"ar%s;%ld;%ld;%s\",stringValue1,startValue,endValue,stringValue2);\n  free(stringValue1);\n  free(stringValue2);\n  var2 = 0;\n  if (startValue <= endValue) {\n    var2 = var1 * (((int)endValue - (int)startValue) + 1);\n  }\n  returnValue = FUN_00109b52(dataStruct,resultString,counter,localFlag,var2);\n  if ((char)returnValue != '\\0') {\n    free(resultString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a181",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_data_0010a181"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104540",
            "calling": [
                "FUN_00116b90",
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_001199d0": {
            "renaming": {
                "FUN_001199d0": "print_bfd_info_001199d0",
                "iVar1": "desiredWidth",
                "iVar2": "target",
                "iVar3": "comparisonResult",
                "pcVar4": "formatString",
                "sVar5": "stringLength",
                "pcVar6": "tempString",
                "uVar7": "result",
                "piVar8": "errnoLocation",
                "iVar9": "loopVariable",
                "lVar10": "loopVariable1",
                "lVar11": "loopVariable2",
                "ppcVar12": "archMachPointer",
                "uVar13": "maxArchMachLength",
                "uVar14": "archMachLength",
                "local_70": "loopVariable3"
            },
            "code": "\n\n\nvoid printBFDInfo_001199d0(void)\n\n{\n  int desiredWidth;\n  int target;\n  int comparisonResult;\n  char *formatString;\n  size_t stringLength;\n  char *tempString;\n  undefined8 result;\n  int *errnoLocation;\n  int loopVariable;\n  long loopVariable1;\n  long loopVariable2;\n  char **archMachPointer;\n  uint maxArchMachLength;\n  ulong archMachLength;\n  int loopVariable3;\n  \n  formatString = (char *)dcgettext(0,\"BFD header file version %s\\n\",5);\n  printf(formatString,\"(GNU Binutils for Debian) 2.40\");\n  if (DAT_001278e0 == (char *)0x0) {\n    formatString = getenv(\"TMPDIR\");\n    result = FUN_0011283f(formatString,0);\n    formatString = getenv(\"TMP\");\n    result = FUN_0011283f(formatString,result);\n    formatString = getenv(\"TEMP\");\n    result = FUN_0011283f(formatString,result);\n    result = FUN_0011283f(&DAT_0011b39a,result);\n    result = FUN_0011283f(\"/var/tmp\",result);\n    formatString = (char *)FUN_0011283f(&DAT_00120324,result);\n    if (formatString == (char *)0x0) {\n      formatString = \".\";\n    }\n    stringLength = strlen(formatString);\n    tempString = (char *)xmalloc((int)stringLength + 2);\n    DAT_001278e0 = strcpy(tempString,formatString);\n    DAT_001278e0[stringLength & 0xffffffff] = '/';\n    DAT_001278e0[(int)stringLength + 1] = '\\0';\n  }\n  formatString = DAT_001278e0;\n  stringLength = strlen(DAT_001278e0);\n  loopVariable1 = (long)(int)stringLength;\n  tempString = (char *)xmalloc(loopVariable1 + 9);\n  strcpy(tempString,formatString);\n  *(undefined2 *)(tempString + loopVariable1) = 0x6363;\n  *(undefined4 *)(tempString + loopVariable1 + 2) = 0x58585858;\n  *(undefined4 *)((long)(tempString + loopVariable1 + 2) + 3) = 0x585858;\n  tempString[loopVariable1 + 8] = '\\0';\n  target = mkstemps(tempString,0);\n  if (target == -1) {\n    errnoLocation = __errno_location();\n    tempString = strerror(*errnoLocation);\n    fprintf(_stderr,\"Cannot create temporary file in %s: %s\\n\",formatString,tempString);\n                    \n    abort();\n  }\n  target = close(target);\n  if (target != 0) {\n                    \n    abort();\n  }\n  maxArchMachLength = 0;\n  target = 2;\n  bfd_iterate_over_targets(FUN_00119f70);\n  unlink(tempString);\n  free(tempString);\n  loopVariable3 = 0;\n  do {\n    formatString = (char *)bfd_printable_arch_mach(target);\n    stringLength = strlen(formatString);\n    if ((int)maxArchMachLength < (int)(uint)stringLength) {\n      maxArchMachLength = (uint)stringLength;\n    }\n    target = target + 1;\n  } while (target != 0x57);\n  formatString = getenv(\"COLUMNS\");\n  target = loopVariable3;\n  if (formatString != (char *)0x0) {\n    loopVariable1 = strtol(formatString,(char **)0x0,10);\n    desiredWidth = (int)loopVariable1;\n    if (desiredWidth != 0) goto LAB_00119b11;\n  }\n  desiredWidth = 0x50;\nLAB_00119b11:\n  do {\n    loopVariable3 = target;\n    if (-1 < loopVariable3) {\n      return;\n    }\n    loopVariable2 = (long)loopVariable3;\n    loopVariable = (desiredWidth - maxArchMachLength) + -1;\n    loopVariable1 = loopVariable2;\n    do {\n      target = (int)loopVariable1;\n      if (-1 < target) break;\n      stringLength = strlen(*(char **)(loopVariable1 * 0x60));\n      loopVariable1 = loopVariable1 + 1;\n      loopVariable = (loopVariable - (int)stringLength) + -1;\n    } while (-1 < loopVariable);\n    printf(\"\\n%*s\",(ulong)(maxArchMachLength + 1),&DAT_0011b4a1);\n    for (archMachPointer = (char **)(loopVariable2 * 0x60);\n        ((ulong)(uint)(target - loopVariable3) + loopVariable2) * 0x60 - (long)archMachPointer != 0;\n        archMachPointer = archMachPointer + 0xc) {\n      printf(\"%s \",*archMachPointer);\n    }\n    loopVariable = 2;\n    putc(10,_stdout);\n    do {\n      formatString = (char *)bfd_printable_arch_mach(loopVariable,0);\n      comparisonResult = strcmp(formatString,\"UNKNOWN!\");\n      if (comparisonResult != 0) {\n        result = bfd_printable_arch_mach(loopVariable,0);\n        printf(\"%*s \",(ulong)maxArchMachLength,result);\n        archMachPointer = (char **)(loopVariable2 * 0x60);\n        comparisonResult = loopVariable3;\n        while (target != comparisonResult) {\n          if (*(char *)((long)archMachPointer + (ulong)(loopVariable - 2) + 8) == '\\0') {\n            stringLength = strlen(*archMachPointer);\n            for (archMachLength = stringLength & 0xffffffff; (int)archMachLength != 0; archMachLength = (ulong)((int)archMachLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(*archMachPointer,_stdout);\n          }\n          comparisonResult = comparisonResult + 1;\n          if (target != comparisonResult) {\n            putc(0x20,_stdout);\n          }\n          archMachPointer = archMachPointer + 0xc;\n        }\n        putc(10,_stdout);\n      }\n      loopVariable = loopVariable + 1;\n    } while (loopVariable != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strerror",
                "mkstemps",
                "bfd_printable_arch_mach",
                "FUN_00119f70",
                "strlen",
                "strcpy",
                "getenv",
                "fprintf",
                "__errno_location",
                "free",
                "bfd_iterate_over_targets",
                "unlink",
                "FUN_0011283f",
                "abort",
                "close",
                "FUN_00104943",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001199d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_bfd_info_001199d0"
        },
        "FUN_0010847a": {
            "renaming": {
                "FUN_0010847a": "execute_initialization_0010847a"
            },
            "code": "\nvoid execute_initialization_0010847a(void)\n\n{\n  FUN_00116490();\n  return;\n}\n\n",
            "called": [
                "FUN_00116490"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010847a",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "execute_initialization_0010847a"
        },
        "FUN_0010d21c": {
            "renaming": {
                "FUN_0010d21c": "reverse_and_improve_0010d21c",
                "param_1": "input",
                "param_2": "buffer",
                "param_3": "output",
                "bVar1": "byte1",
                "pbVar2": "current_byte",
                "bVar3": "temp1",
                "cVar4": "temp2",
                "bVar5": "temp3",
                "uVar6": "result",
                "iVar7": "temp4",
                "uVar8": "temp5",
                "sVar9": "buffer_length",
                "pbVar10": "buffer_current",
                "__ptr": "ptr1",
                "__ptr_00": "ptr2",
                "__haystack": "text",
                "pcVar11": "substring",
                "uVar12": "concatenated_string",
                "pcVar13": "substring_current",
                "bVar14": "temp6",
                "pcVar15": "substring_new",
                "bVar16": "temp7",
                "bVar17": "temp8",
                "bVar18": "temp9",
                "bVar19": "temp10",
                "uVar20": "loop_counter",
                "uVar21": "length",
                "local_3c": "array"
            },
            "code": "\nundefined4 reverse_and_improve_0010d21c(undefined8 input,byte **buffer,undefined8 *output)\n\n{\n  byte byte1;\n  byte *current_byte;\n  byte temp1;\n  char temp2;\n  byte temp3;\n  undefined4 result;\n  int temp4;\n  uint temp5;\n  size_t buffer_length;\n  byte *buffer_current;\n  void *ptr1;\n  void *ptr2;\n  char *text;\n  char *substring;\n  undefined8 concatenated_string;\n  char *substring_current;\n  byte temp6;\n  char *substring_new;\n  byte temp7;\n  byte temp8;\n  byte temp9;\n  byte temp10;\n  uint loop_counter;\n  ulong length;\n  uint array [3];\n  \n  current_byte = *buffer;\n  *buffer = current_byte + 1;\n  array[0] = FUN_00108e76(buffer);\n  length = (ulong)array[0];\n  if (array[0] != 0) {\n    buffer_current = *buffer;\n    buffer_length = strlen((char *)buffer_current);\n    if (length <= buffer_length) {\n      *buffer = buffer_current + length;\n      loop_counter = 0;\n      result = FUN_00108ea1(buffer,array);\n      if ((char)result != '\\0') {\nLAB_0010d2b4:\n        if (array[0] <= loop_counter) {\n          if (output == (undefined8 *)0x0) {\n            return result;\n          }\n          ptr1 = (void *)FUN_00109a0b(current_byte,(int)*buffer - (int)current_byte);\n          ptr2 = (void *)concat(\"NoSuchStrinG__\",ptr1,0);\n          free(ptr1);\n          text = (char *)cplus_demangle(ptr2,2);\n          free(ptr2);\n          if ((text != (char *)0x0) &&\n             (substring = strstr(text,\"::NoSuchStrinG\"), substring_current = text,\n             substring_new = text, substring != (char *)0x0)) {\n            for (; substring_current != substring; substring_current = substring_current + 1) {\n              if ((*substring_current != ' ') ||\n                 (((substring_current[1] == '>' && (text < substring_current)) && (substring_current[-1] == '>')))) {\n                *substring_new = *substring_current;\n                substring_new = substring_new + 1;\n              }\n            }\n            concatenated_string = FUN_00109a0b(text,(int)substring_new - (int)text);\n            *output = concatenated_string;\n            free(text);\n            return result;\n          }\n          FUN_0010911f(current_byte);\n          free(text);\n          return 0;\n        }\n        buffer_current = *buffer;\n        if (*buffer_current != 0x5a) {\n          temp3 = FUN_0010c95e(input,buffer,0);\n          if (temp3 == 0) {\n            return 0;\n          }\n          temp1 = 0;\n          temp6 = 0;\n          temp9 = 0;\n          temp8 = 0;\n          temp10 = 0;\nLAB_0010d2e9:\n          do {\n            do {\n              temp7 = temp1;\n              byte1 = *buffer_current;\n              if ((temp6 | byte1 == 0) != 0) {\n                temp3 = 0;\n                goto switchD_0010d329_caseD_70;\n              }\n              temp1 = temp3;\n              temp6 = temp3;\n            } while ('v' < (char)byte1);\n            if ((char)byte1 < 'b') {\n              if ((char)byte1 < 'U') {\n                if ((char)byte1 < 'C') goto LAB_0010d2e9;\n                length = 1L << (byte1 + 0xbd & 0x3f);\n                if ((length & 0x11409) == 0) {\n                  if ((length & 0xa000) != 0) goto switchD_0010d329_caseD_70;\n                  if (byte1 == 0x54) goto switchD_0010d329_caseD_76;\n                  goto LAB_0010d2e9;\n                }\n              }\n              else if (1 < (byte)(byte1 + 0xab)) goto LAB_0010d2e9;\n              buffer_current = buffer_current + 1;\n              temp1 = temp7;\n              temp6 = 0;\n              goto LAB_0010d2e9;\n            }\n            switch(byte1) {\n            case 0x62:\n              temp1 = temp7;\n              temp9 = temp3;\n              break;\n            case 99:\n              temp1 = temp7;\n              temp10 = temp3;\n              break;\n            case 100:\n            case 0x66:\n            case 0x72:\n              temp1 = temp7;\n              temp8 = temp3;\n              break;\n            case 0x70:\n              goto switchD_0010d329_caseD_70;\n            case 0x76:\nswitchD_0010d329_caseD_76:\n                    \n              abort();\n            }\n          } while( true );\n        }\n        *buffer = buffer_current + 1;\n        temp2 = FUN_0010c95e(input,buffer,0);\n        if (temp2 == '\\0') {\n          return 0;\n        }\n        goto LAB_0010d2b1;\n      }\n    }\n  }\nLAB_0010d280:\n  FUN_0010911f(current_byte);\n  return 0;\nswitchD_0010d329_caseD_70:\n  if (temp7 == 0) {\n    if (temp10 == 0) {\n      if (temp9 == 0) {\n        if (temp8 == 0) {\n          if (temp3 != 0) {\n            temp5 = FUN_00108e76(buffer);\n            if (temp5 == 0) goto LAB_0010d280;\n            *buffer = *buffer + temp5;\n          }\n        }\n        else {\n          if (**buffer == 0x6d) {\n            *buffer = *buffer + 1;\n          }\n          while( true ) {\n            buffer_current = *buffer;\n            if (((&_sch_istable)[(ulong)*buffer_current * 2] & 4) == 0) break;\n            *buffer = buffer_current + 1;\n          }\n          if (*buffer_current == 0x2e) {\n            do {\n              buffer_current = buffer_current + 1;\n              *buffer = buffer_current;\n            } while (((&_sch_istable)[(ulong)*buffer_current * 2] & 4) != 0);\n          }\n          buffer_current = *buffer;\n          if (*buffer_current == 0x65) {\n            do {\n              buffer_current = buffer_current + 1;\n              *buffer = buffer_current;\n            } while (((&_sch_istable)[(ulong)*buffer_current * 2] & 4) != 0);\n          }\n        }\n      }\n      else {\n        temp5 = FUN_00108e76(buffer);\n        if (1 < temp5) goto LAB_0010d280;\n      }\n    }\n    else {\n      if (**buffer == 0x6d) {\n        *buffer = *buffer + 1;\n      }\n      temp4 = FUN_00108e76(buffer);\n      if (temp4 == 0) goto LAB_0010d280;\n    }\n  }\n  else {\n    if (**buffer == 0x6d) {\n      *buffer = *buffer + 1;\n    }\n    while (((&_sch_istable)[(ulong)**buffer * 2] & 4) != 0) {\n      *buffer = *buffer + 1;\n    }\n  }\nLAB_0010d2b1:\n  loop_counter = loop_counter + 1;\n  goto LAB_0010d2b4;\n}\n\n",
            "called": [
                "free",
                "strstr",
                "abort",
                "FUN_0010911f",
                "cplus_demangle",
                "FUN_00108e76",
                "FUN_0010c95e",
                "FUN_00109a0b",
                "FUN_00108ea1",
                "concat",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d21c",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "reverse_and_improve_0010d21c"
        },
        "FUN_001054af": {
            "renaming": {
                "FUN_001054af": "cleanup_and_delete_hash_tables_001054af",
                "param_1": "unusedParam1",
                "param_2": "unusedParam2",
                "in_RAX": "returnValue"
            },
            "code": "\nvoid cleanupAndDeleteHashTables_001054af(undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  undefined8 returnValue;\n  \n  htab_delete(DAT_00127a18);\n  htab_delete(DAT_00127a10);\n  htab_delete(DAT_00127a28);\n  htab_delete(DAT_00127a08);\n  htab_delete(DAT_00127a00);\n  htab_delete(DAT_001279f8);\n  htab_delete(DAT_001279f0);\n  htab_delete(DAT_001278f0);\n  htab_delete(DAT_001278e8,unusedParam2,returnValue);\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054af",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "cleanup_and_delete_hash_tables_001054af"
        },
        "FUN_0010c139": {
            "renaming": {
                "FUN_0010c139": "allocate_and_initialize_0010c139",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "uVar1": "oldVar1",
                "cVar2": "flag",
                "uVar3": "result",
                "puVar4": "allocatedMemory",
                "in_R10": "inRegister10",
                "unaff_R15": "unaffectedRegister15"
            },
            "code": "\nulong allocate_and_initialize_0010c139(undefined8 param1,long param2,undefined8 param3,undefined8 param4,\n                  undefined4 param5,undefined8 param6)\n\n{\n  undefined8 oldVar1;\n  char flag;\n  ulong result;\n  undefined8 *allocatedMemory;\n  undefined8 inRegister10;\n  undefined8 unaffectedRegister15;\n  \n  flag = *(char *)(param2 + 0x60);\n  if ((flag != '\\0') && ((*(int *)(param2 + 0x40) != 0 || (*(char *)(param2 + 0x44) == '\\0')))) {\n    allocatedMemory = (undefined8 *)xmalloc(0x28);\n    oldVar1 = *(undefined8 *)(param2 + 0x78);\n    *(undefined8 *)((long)allocatedMemory + 0x1c) = 0;\n    allocatedMemory[2] = param4;\n    *(undefined4 *)(allocatedMemory + 3) = param5;\n    allocatedMemory[4] = param6;\n    *(undefined8 **)(param2 + 0x78) = allocatedMemory;\n    *allocatedMemory = oldVar1;\n    allocatedMemory[1] = param3;\n    return CONCAT71((int7)((ulong)unaffectedRegister15 >> 8),flag) & 0xffffffff;\n  }\n  result = FUN_0010c05d(param1,param3,param4,param5,param6,inRegister10);\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010c05d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c139",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_0010c139"
        },
        "FUN_0010e439": {
            "renaming": {
                "FUN_0010e439": "set_param_value_0010e439",
                "param_1": "object_ptr",
                "param_2": "new_value"
            },
            "code": "\nvoid set_param_value_0010e439(long object_ptr,undefined8 new_value)\n\n{\n  *(undefined8 *)(object_ptr + 0x210) = new_value;\n  FUN_0010e2f0(object_ptr,0x84,0,0,new_value);\n  return;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e439",
            "calling": [
                "FUN_0011378f",
                "thunk_FUN_0010e439"
            ],
            "imported": false,
            "current_name": "set_param_value_0010e439"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047e0",
            "calling": [
                "FUN_001125fa",
                "FUN_0010abdd",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010e6a8",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_00109dfe",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104270",
            "calling": [
                "FUN_001125fa",
                "FUN_00113fb0",
                "FUN_00116b90",
                "FUN_0010abdd",
                "FUN_0010a181",
                "FUN_00113ede",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00115530",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_0010ae0e",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a377",
                "FUN_00104ad6",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "memcmp": {
            "renaming": {},
            "code": "\n\n\nint memcmp(void *__s1,void *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = memcmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104420",
            "calling": [
                "FUN_0011a1b0",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "memcmp"
        },
        "FUN_00109d3e": {
            "renaming": {
                "FUN_00109d3e": "process_data_00109d3e",
                "param_1": "data",
                "param_2": "size",
                "uVar1": "result"
            },
            "code": "\nvoid processData_00109d3e(undefined8 data,int size)\n\n{\n  undefined8 result;\n  \n  result = 0xfffffffffffffff0;\n  if (size - 1U < 8) {\n    result = *(undefined8 *)(&DAT_00121360 + (ulong)(size - 1U) * 8);\n  }\n  FUN_00109cf4(data,result,size);\n  return;\n}\n\n",
            "called": [
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d3e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109d3e"
        },
        "FUN_00112502": {
            "renaming": {
                "FUN_00112502": "check_conditions_00112502",
                "param_1": "input",
                "param_2": "param",
                "param_3": "threshold",
                "uVar1": "counter",
                "puVar2": "dataPtr",
                "uVar3": "value",
                "cVar4": "result"
            },
            "code": "\nundefined checkConditions_00112502(long input,undefined8 param,ulong threshold)\n\n{\n  uint counter;\n  undefined8 *dataPtr;\n  undefined8 value;\n  char result;\n  \n  do {\n    dataPtr = *(undefined8 **)(input + 0x40);\n    if (dataPtr == (undefined8 *)0x0) {\n      return 1;\n    }\n    while ((counter = *(uint *)(input + 0x48), counter < 10 && (dataPtr[(ulong)counter + 2] != -1))) {\n      if (threshold <= (ulong)dataPtr[(ulong)counter + 0xc]) {\n        return 1;\n      }\n      result = FUN_0010edb4(param,*(undefined8 *)(dataPtr[1] + 8));\n      if (result == '\\0') {\n        return 0;\n      }\n      *(int *)(input + 0x48) = *(int *)(input + 0x48) + 1;\n    }\n    value = *dataPtr;\n    *(undefined4 *)(input + 0x48) = 0;\n    *(undefined8 *)(input + 0x40) = value;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_0010edb4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112502",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "check_conditions_00112502"
        },
        "bfd_fill_in_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_fill_in_gnu_debuglink_section(void)\n\n{\n  bfd_fill_in_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_fill_in_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104600",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_fill_in_gnu_debuglink_section"
        },
        "FUN_00104cc1": {
            "renaming": {
                "FUN_00104cc1": "process_lines_00104cc1",
                "unaff_RBX": "currentLine",
                "param_9": "inputLine",
                "unaff_EBP": "lineIndex",
                "in_R10": "nextChar",
                "unaff_R13": "message",
                "unaff_R14": "lineStart",
                "unaff_R15": "lineEnd",
                "param_7": "param1",
                "param_8": "param2",
                "uVar1": "errorMsg",
                "ppbVar2": "slotPtr",
                "pbVar3": "currentChar",
                "bVar4": "temp",
                "pbVar5": "linePtr"
            },
            "code": "\nvoid processLines_00104cc1(void)\n\n{\n  undefined8 errorMsg;\n  byte **slotPtr;\n  byte *currentChar;\n  byte temp;\n  byte *currentLine;\n  byte *linePtr;\n  int lineIndex;\n  byte *nextChar;\n  undefined8 message;\n  byte *lineStart;\n  byte *lineEnd;\n  undefined8 param1;\n  undefined8 *param2;\n  byte *inputLine;\n  \ncode_r0x00104cc1:\n  inputLine = nextChar;\n  errorMsg = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n  FUN_00119ed0(errorMsg,param1,lineIndex);\n  linePtr = currentLine;\n  nextChar = inputLine;\nLAB_00114599:\n  do {\n    *nextChar = 0;\n    if (lineEnd < nextChar) {\n      slotPtr = (byte **)htab_find_slot();\n      *slotPtr = lineEnd;\n    }\n    lineIndex = lineIndex + 1;\n    currentChar = linePtr;\n    if (lineStart[1] == 0) {\n      *param2 = message;\n      return;\n    }\n    for (; temp = *currentChar, lineStart = currentChar, temp != 10; currentChar = currentChar + 1) {\n      if ((char)temp < '\\v') {\n        if (temp == 0) {\n          currentLine = currentChar + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (temp == 0xd) {\n          *currentChar = 0;\n          currentLine = currentChar + 1;\n          if (currentChar[1] == 10) {\n            currentLine = currentChar + 2;\n            lineStart = currentChar + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (temp == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *currentChar = 0;\n    if (currentChar[1] == 0xd) {\n      lineStart = currentChar + 1;\n      currentLine = currentChar + 2;\n    }\n    else {\n      currentLine = currentChar + 1;\n    }\nLAB_00114553:\n    temp = *linePtr;\n    lineEnd = linePtr;\n    while ((temp == 0x20 || (nextChar = lineEnd, temp == 9))) {\n      linePtr = lineEnd + 1;\n      lineEnd = lineEnd + 1;\n      temp = *linePtr;\n    }\n    do {\n      linePtr = currentLine;\n      if ((temp == 10) || (temp == 0xd)) goto LAB_00114676;\n      if (temp == 0) goto LAB_00114599;\n      temp = nextChar[1];\n      nextChar = nextChar + 1;\n    } while ((temp != 0x20) && (temp != 9));\n    if ((char)temp < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (temp & 0x3f) & 1U) == 0) goto LAB_00114599;\n    }\n    temp = nextChar[1];\n    if ((((((temp == 9) || (temp == 0x20)) && ((temp = nextChar[2], temp == 9 || (temp == 0x20)))\n          ) && ((temp = nextChar[3], temp == 9 || (temp == 0x20)))) &&\n        ((temp = nextChar[4], temp == 9 || (temp == 0x20)))) &&\n       ((temp = nextChar[5], temp == 9 || (temp == 0x20)))) {\n      temp = nextChar[6];\n      currentChar = nextChar + 6;\n      if ((temp == 9) || (temp == 0x20)) {\n        do {\n          do {\n            temp = currentChar[1];\n            currentChar = currentChar + 1;\n          } while (temp == 0x20);\n        } while (temp == 9);\n      }\n    }\n    if ((0xd < temp) || ((-0x2402L >> (temp & 0x3f) & 1U) != 0)) goto code_r0x00104cc1;\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104cc1",
                "FUN_00119ed0",
                "FUN_00104c36",
                "htab_find_slot",
                "FUN_00104d1c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104cc1",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "process_lines_00104cc1"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010abdd",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00114dc7",
                "FUN_0010d7d4",
                "FUN_00119f70",
                "FUN_0011173a",
                "FUN_0010b6ea",
                "FUN_00109c2e",
                "FUN_00109be3",
                "FUN_0010e07c",
                "FUN_0010e2f0",
                "FUN_0010dac0",
                "FUN_0010ab4d"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00113bfa": {
            "renaming": {
                "FUN_00113bfa": "create_data_object_00113bfa",
                "param_1": "data_1",
                "param_2": "data_2",
                "lVar1": "result",
                "plVar2": "data_object"
            },
            "code": "\nlong create_data_object_00113bfa(long data_1,long data_2)\n\n{\n  long result;\n  long *data_object;\n  \n  if (((data_1 != 0) && (data_2 != 0)) && (result = FUN_00112904(0x12,0), result != 0)) {\n    data_object = (long *)xmalloc(0x10);\n    *data_object = data_1;\n    data_object[1] = data_2;\n    *(long **)(result + 0x10) = data_object;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113bfa",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "create_data_object_00113bfa"
        },
        "FUN_00108375": {
            "renaming": {
                "FUN_00108375": "check_output_format_00108375",
                "param_1": "unused",
                "param_2": "arguments",
                "param_3": "outputFormat",
                "uVar1": "firstArgument",
                "uVar2": "noteMessage",
                "unaff_EBX": "returnValue"
            },
            "code": "\nuint checkOutputFormat_00108375(undefined8 unused,undefined8 *arguments,undefined8 outputFormat)\n\n{\n  undefined8 firstArgument;\n  undefined8 noteMessage;\n  uint returnValue;\n  \n  if (*(int *)(arguments[1] + 8) != 2) {\n    firstArgument = *arguments;\n    returnValue = returnValue & 0xf7ffffff;\n    noteMessage = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(noteMessage,firstArgument,outputFormat);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119ed0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108375",
            "calling": [
                "FUN_00115f30"
            ],
            "imported": false,
            "current_name": "check_output_format_00108375"
        },
        "bfd_get_arch": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch(void)\n\n{\n  bfd_get_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104570",
            "calling": [
                "FUN_00107880",
                "FUN_00104ea2",
                "FUN_00105828",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_get_arch"
        },
        "FUN_00109e76": {
            "renaming": {
                "FUN_00109e76": "increase_and_print_value_00109e76",
                "param_1": "baseAddress",
                "param_2": "multiplier",
                "lVar1": "currentValue",
                "local_5a": "outputString"
            },
            "code": "\nvoid increaseAndPrintValue_00109e76(long baseAddress,uint multiplier)\n\n{\n  long currentValue;\n  char outputString [58];\n  \n  currentValue = *(long *)(baseAddress + 0x68);\n  *(long *)(baseAddress + 0x68) = currentValue + 1;\n  sprintf(outputString,\"%ld=r%ld;%u;0;\",currentValue,currentValue,(ulong)multiplier);\n  FUN_00109b52(baseAddress,outputString,currentValue,1,multiplier * 2);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109e76",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "increase_and_print_value_00109e76"
        },
        "FUN_001088ae": {
            "renaming": {
                "FUN_001088ae": "update_data_001088ae",
                "param_1": "data1",
                "param_2": "data2",
                "param_3": "data3",
                "param_4": "str",
                "lVar2": "index",
                "lVar3": "offset",
                "uVar4": "duplicatedStr",
                "iVar1": "newIndex"
            },
            "code": "\nulong updateData_001088ae(undefined4 data1,undefined4 data2,undefined8 data3,undefined8 str)\n\n{\n  int newIndex;\n  long index;\n  long offset;\n  undefined8 duplicatedStr;\n  \n  index = (long)DAT_001278c0;\n  offset = index * 0x18;\n  free((void *)(&DAT_00127750)[index * 3]);\n  *(undefined4 *)(&DAT_00127740 + offset) = data1;\n  *(undefined4 *)(&DAT_00127744 + offset) = data2;\n  *(undefined8 *)(&DAT_00127748 + offset) = data3;\n  duplicatedStr = xstrdup(str);\n  (&DAT_00127750)[index * 3] = duplicatedStr;\n  newIndex = DAT_001278c0 + 1;\n  DAT_001278c0 = newIndex % 0x10;\n  return (long)newIndex / 0x10 & 0xffffffff;\n}\n\n",
            "called": [
                "xstrdup",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001088ae",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_data_001088ae"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a4b4",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_0010afd5": {
            "renaming": {
                "FUN_0010afd5": "find_and_free_string_0010afd5",
                "param_1": "input_data",
                "param_2": "context",
                "param_3": "str",
                "param_4": "val1",
                "param_5": "val2",
                "param_6": "result",
                "iVar1": "cmp_result",
                "__s2": "search_str",
                "puVar2": "current_node1",
                "uVar3": "temp",
                "lVar4": "temp_val",
                "puVar5": "current_node2",
                "puVar6": "temp_ptr",
                "bVar7": "flag",
                "auVar8": "return_val"
            },
            "code": "\nundefined  [16]\nfind_and_free_string_0010afd5(undefined8 *input_data,long context,undefined8 str,undefined4 val1,\n            undefined4 val2,undefined8 result)\n\n{\n  int cmp_result;\n  char *search_str;\n  undefined8 *current_node1;\n  undefined8 temp;\n  long temp_val;\n  undefined8 *current_node2;\n  undefined4 *temp_ptr;\n  byte flag;\n  undefined return_val [16];\n  \n  flag = 0;\n  search_str = (char *)FUN_00109a0b(str,val1);\n  for (input_data = (undefined8 *)*input_data; input_data != (undefined8 *)0x0;\n      input_data = (undefined8 *)*input_data) {\n    for (current_node1 = (undefined8 *)input_data[1]; current_node1 != (undefined8 *)0x0;\n        current_node1 = (undefined8 *)*current_node1) {\n      if ((undefined8 *)current_node1[2] != (undefined8 *)0x0) {\n        for (current_node2 = *(undefined8 **)(undefined8 *)current_node1[2]; current_node2 != (undefined8 *)0x0;\n            current_node2 = (undefined8 *)*current_node2) {\n          if ((*(int *)((long)current_node2 + 0x14) == 1) && (*(char *)current_node2[1] == *search_str)) {\n            cmp_result = strcmp((char *)current_node2[1],search_str);\n            if (cmp_result == 0) {\n              temp_val = current_node2[4];\n              if (temp_val == 0) goto LAB_0010b05b;\n              free(search_str);\n              goto LAB_0010b0eb;\n            }\n          }\n        }\n      }\n    }\n  }\nLAB_0010b05b:\n  current_node1 = *(undefined8 **)(context + 0x1a0);\n  do {\n    if (current_node1 == (undefined8 *)0x0) {\n      current_node1 = (undefined8 *)xmalloc(0x28);\n      temp = *(undefined8 *)(context + 0x1a0);\n      temp_ptr = (undefined4 *)((long)current_node1 + 0x14);\n      for (temp_val = 5; temp_val != 0; temp_val = temp_val + -1) {\n        *temp_ptr = 0;\n        temp_ptr = temp_ptr + (ulong)flag * -2 + 1;\n      }\n      *(undefined4 *)(current_node1 + 2) = val2;\n      *current_node1 = temp;\n      current_node1[1] = search_str;\n      temp = FUN_00113e23(current_node1 + 3,search_str);\n      *(undefined8 **)(context + 0x1a0) = current_node1;\n      current_node1[4] = temp;\nLAB_0010b0e7:\n      temp_val = current_node1[4];\nLAB_0010b0eb:\n      return_val._8_8_ = result;\n      return_val._0_8_ = temp_val;\n      return return_val;\n    }\n    if (*(char *)current_node1[1] == *search_str) {\n      cmp_result = strcmp((char *)current_node1[1],search_str);\n      if (cmp_result == 0) {\n        if (*(int *)(current_node1 + 2) == 0) {\n          *(undefined4 *)(current_node1 + 2) = val2;\n        }\n        free(search_str);\n        goto LAB_0010b0e7;\n      }\n    }\n    current_node1 = (undefined8 *)*current_node1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "strcmp",
                "FUN_00109a0b",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010afd5",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_and_free_string_0010afd5"
        },
        "FUN_0010ee3f": {
            "renaming": {
                "FUN_0010ee3f": "FUNC_0010ee3f"
            },
            "code": "\n\n\nvoid * FUNC_0010ee3f(undefined8 param_1,long param_2,char *param_3,byte **param_4,undefined8 *param_5\n                   ,byte *param_6)\n\n{\n  byte bVar1;\n  byte bVar2;\n  byte *pbVar3;\n  long lVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  char cVar8;\n  byte bVar9;\n  int iVar10;\n  undefined4 uVar11;\n  uint uVar12;\n  undefined4 uVar13;\n  int iVar14;\n  undefined8 uVar15;\n  char *pcVar16;\n  void *pvVar17;\n  void **ppvVar18;\n  long lVar19;\n  long lVar20;\n  int *piVar21;\n  undefined *puVar22;\n  char **ppcVar23;\n  void *pvVar24;\n  void *pvVar25;\n  ulong uVar26;\n  byte *pbVar27;\n  byte *pbVar28;\n  char *pcVar29;\n  size_t sVar30;\n  byte *pbVar31;\n  undefined8 *puVar32;\n  size_t sVar33;\n  byte **ppbVar34;\n  void **ppvVar35;\n  undefined8 uVar36;\n  undefined8 uVar37;\n  long lVar38;\n  long *plVar39;\n  char *pcVar40;\n  bool bVar41;\n  byte *pbVar42;\n  char cVar43;\n  undefined uVar44;\n  ulong uVar45;\n  char *pcVar46;\n  byte bVar47;\n  byte bVar48;\n  ulong uVar49;\n  byte *pbVar50;\n  bool bVar51;\n  bool bVar52;\n  undefined auVar53 [16];\n  undefined auVar54 [16];\n  void *local_158;\n  char *local_150;\n  byte *local_140;\n  char local_138;\n  char local_130;\n  uint local_12c;\n  char *local_128;\n  byte *local_120;\n  void *local_118;\n  byte *local_110;\n  undefined4 local_100;\n  uint local_fc;\n  uint local_f0;\n  uint local_ec;\n  uint local_e0;\n  int local_d0;\n  char local_a9;\n  undefined8 local_a8;\n  byte *local_a0;\n  undefined8 local_98;\n  long local_90;\n  long local_88;\n  char local_80;\n  undefined7 uStack_7f;\n  void *local_78;\n  undefined4 local_70;\n  int local_6c;\n  void *local_68;\n  int local_5c;\n  \n  bVar48 = 0;\n  if (param_5 != (undefined8 *)0x0) {\n    *param_5 = 0;\n  }\n  pbVar3 = *param_4;\n  if (param_6 <= pbVar3) {\n    return (void *)0x0;\n  }\n  *(undefined *)(param_2 + 0x1a8) = 0;\n  bVar9 = *pbVar3;\n  if (((bVar9 != 0x28 && bVar9 != 0x2d) &\n      ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1)) == 0) {\n    cVar6 = FUN_00109ab1(param_4,&local_a8,param_6);\n    if (cVar6 == '\\0') {\n      return (void *)0x0;\n    }\n    if (**param_4 != 0x3d) {\n      pvVar17 = (void *)FUN_0010c2d2(param_1,param_2,&local_a8);\n      return pvVar17;\n    }\n    if (param_5 != (undefined8 *)0x0) {\n      if (-1 < (int)((uint)local_a8 | local_a8._4_4_)) {\n        uVar15 = FUN_00109022(param_2);\n        *param_5 = uVar15;\n      }\n    }\n    *param_4 = *param_4 + 1;\n    local_12c = 0xffffffff;\n    cVar8 = '\\0';\n    do {\n      while( true ) {\n        do {\n          cVar43 = cVar8;\n          pbVar27 = *param_4;\n          if (((*pbVar27 != 0x40) ||\n              (bVar9 = pbVar27[1], ((&_sch_istable)[(ulong)bVar9 * 2] & 4) != 0)) ||\n             (pbVar50 = pbVar27, bVar9 == 0x28 || bVar9 == 0x2d)) goto LAB_0010efe0;\n          while( true ) {\n            bVar9 = pbVar50[1];\n            if (bVar9 == 0x3b) break;\n            pbVar50 = pbVar50 + 1;\n            if (bVar9 == 0) goto switchD_0010f055_caseD_24;\n          }\n          *param_4 = pbVar50 + 2;\n          bVar9 = pbVar27[1];\n          cVar8 = cVar6;\n        } while (bVar9 == 0x53);\n        cVar8 = cVar43;\n        if (bVar9 != 0x73) break;\n        lVar38 = strtol((char *)(pbVar27 + 2),(char **)0x0,10);\n        local_12c = 0xffffffff;\n        if (7 < (int)lVar38) {\n          local_12c = (int)lVar38 >> 3;\n        }\n      }\n    } while (bVar9 != 0);\n    goto switchD_0010f055_caseD_24;\n  }\n  local_12c = 0xffffffff;\n  cVar43 = '\\0';\n  local_a8 = 0xffffffffffffffff;\nLAB_0010efe0:\n  pbVar50 = *param_4;\n  bVar9 = *pbVar50;\n  pbVar27 = pbVar50 + 1;\n  *param_4 = pbVar27;\n  if ('x' < (char)bVar9) goto switchD_0010f055_caseD_24;\n  if ((char)bVar9 < 'a') {\n    if (bVar9 == 0x40) {\n      lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar38 == 0) {\n        return (void *)0x0;\n      }\n      if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      pvVar17 = (void *)FUN_00113bfa(lVar38,lVar19);\n    }\n    else if ((char)bVar9 < 'A') {\n      if ('-' < (char)bVar9) {\n        if (9 < (byte)(bVar9 - 0x30)) goto switchD_0010f055_caseD_24;\nswitchD_0010f055_caseD_28:\n        *param_4 = pbVar50;\n        cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n        if (cVar6 == '\\0') {\n          return (void *)0x0;\n        }\n        iVar10 = (uint)local_a8;\n        if ((uint)local_a8 == (uint)local_98) {\n          if (local_a8._4_4_ == local_98._4_4_) {\n            pvVar17 = (void *)FUN_00113e17();\n            if (iVar10 != -1) {\n              ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n              if (ppvVar18 == (void **)0x0) {\n                return (void *)0x0;\n              }\n              *ppvVar18 = pvVar17;\n            }\n            goto LAB_001115e2;\n          }\n        }\n        *param_4 = pbVar50;\n        pvVar17 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        if (iVar10 != -1) {\n          ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n          if (ppvVar18 == (void **)0x0) {\n            return (void *)0x0;\n          }\n          *ppvVar18 = pvVar17;\n        }\n        goto LAB_001115eb;\n      }\n      if ((char)bVar9 < '#') goto switchD_0010f055_caseD_24;\n      switch(bVar9) {\n      case 0x23:\n        if (pbVar50[1] == 0x23) {\n          *param_4 = pbVar50 + 2;\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x3b) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          pvVar17 = (void *)FUN_00113b98(lVar38,0,0,0);\n        }\n        else {\n          lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar38 == 0) {\n            return (void *)0x0;\n          }\n          if (**param_4 != 0x2c) goto switchD_0010f055_caseD_24;\n          *param_4 = *param_4 + 1;\n          lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n          if (lVar19 == 0) {\n            return (void *)0x0;\n          }\n          uVar45 = 10;\n          uVar49 = 0;\n          auVar53 = xmalloc(0x50);\n          while( true ) {\n            lVar20 = auVar53._0_8_;\n            pbVar27 = *param_4;\n            iVar10 = (int)uVar49;\n            if (*pbVar27 == 0x3b) break;\n            if (*pbVar27 != 0x2c) {\n              FUN_00108fb9(pbVar3);\n              return (void *)0x0;\n            }\n            *param_4 = pbVar27 + 1;\n            if ((uint)uVar45 <= iVar10 + 1U) {\n              uVar45 = (ulong)((uint)uVar45 + 10);\n              lVar20 = xrealloc(lVar20,uVar45 << 3);\n            }\n            auVar54 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n            auVar53._8_8_ = auVar54._8_8_;\n            auVar53._0_8_ = lVar20;\n            *(long *)(lVar20 + uVar49 * 8) = auVar54._0_8_;\n            if (auVar54._0_8_ == 0) {\n              return (void *)0x0;\n            }\n            uVar49 = (ulong)(iVar10 + 1U);\n          }\n          uVar15 = 1;\n          *param_4 = pbVar27 + 1;\n          uVar45 = uVar49;\n          if (iVar10 != 0) {\n            uVar45 = (ulong)(iVar10 - 1);\n            lVar4 = *(long *)(lVar20 + uVar45 * 8);\n            if (((lVar4 == 0) ||\n                (piVar21 = (int *)FUN_00112b6e(lVar4,0,0x3b,1), piVar21 == (int *)0x0)) ||\n               (*piVar21 != 2)) {\n              uVar15 = 1;\n              uVar45 = uVar49;\n            }\n            else {\n              uVar15 = 0;\n            }\n          }\n          *(undefined8 *)(lVar20 + uVar45 * 8) = 0;\n          pvVar17 = (void *)FUN_00113b98(lVar19,lVar38,lVar20,uVar15);\n        }\n        break;\n      default:\n        goto switchD_0010f055_caseD_24;\n      case 0x26:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113cb9(uVar15);\n        break;\n      case 0x28:\n      case 0x2d:\n        goto switchD_0010f055_caseD_28;\n      case 0x2a:\n        uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        pvVar17 = (void *)FUN_00113d3a(uVar15);\n      }\n    }\n    else if (bVar9 == 0x52) {\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      lVar38 = FUN_00109a32(param_4,0,param_6);\n      if ((**param_4 != 0x3b) || (uVar11 = FUN_00109a32(param_4,0,param_6), **param_4 != 0x3b))\n      goto LAB_0010fb4c;\n      if (lVar38 - 3U < 3) {\n        pvVar17 = (void *)FUN_00112904(5);\n      }\n      else {\n        pvVar17 = (void *)FUN_00113df2(uVar11);\n      }\n    }\n    else {\n      if (bVar9 == 0x53) {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n        pvVar17 = (void *)FUN_00112904(0x11,0);\n        if (pvVar17 == (void *)0x0) {\n          return (void *)0x0;\n        }\n        plVar39 = (long *)xmalloc(0x10);\n        *(undefined4 *)((long)plVar39 + 9) = 0;\n        *plVar39 = lVar38;\n        *(undefined4 *)((long)plVar39 + 0xc) = 0;\n        *(char *)(plVar39 + 1) = cVar43;\n        *(long **)((long)pvVar17 + 0x10) = plVar39;\n        goto LAB_001115eb;\n      }\n      if (bVar9 != 0x42) goto switchD_0010f055_caseD_24;\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b4a(uVar15);\n    }\n  }\n  else {\n    switch(bVar9) {\n    case 0x61:\n      if (pbVar50[1] != 0x72) goto switchD_0010f055_caseD_24;\n      pbVar50 = pbVar50 + 2;\n      *param_4 = pbVar50;\n      if (param_6 <= pbVar50) {\n        return (void *)0x0;\n      }\n      local_a0 = pbVar50;\n      cVar6 = FUN_00109ab1(&local_a0,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      if ((((uint)local_98 | local_98._4_4_) == 0) && (**param_4 != 0x3d)) {\n        lVar38 = FUN_0010914e(param_1,\"int\");\n        if ((lVar38 == 0) && (lVar38 = FUN_00113dfe(4,0), lVar38 == 0)) {\n          return (void *)0x0;\n        }\n        *param_4 = local_a0;\n      }\n      else {\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      }\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) {\nLAB_0011151b:\n        FUN_00108fb9(pbVar50);\n        return (void *)0x0;\n      }\n      *param_4 = pbVar3 + 1;\n      bVar48 = pbVar3[1];\n      bVar48 = (bVar48 != 0x2d && bVar48 != 0) &\n               ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar48 * 2) >> 2) ^ 1);\n      if (bVar48 != 0) {\n        *param_4 = pbVar3 + 2;\n      }\n      uVar15 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (*pbVar3 != 0x3b) goto LAB_0011151b;\n      *param_4 = pbVar3 + 1;\n      bVar9 = pbVar3[1];\n      bVar9 = (bVar9 != 0x2d && bVar9 != 0) &\n              ((byte)(*(ushort *)(&_sch_istable + (ulong)bVar9 * 2) >> 2) ^ 1);\n      if (bVar9 != 0) {\n        *param_4 = pbVar3 + 2;\n        bVar48 = bVar9;\n      }\n      uVar36 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0011151b;\n      *param_4 = *param_4 + 1;\n      lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      if (lVar19 == 0) {\n        return (void *)0x0;\n      }\n      if (bVar48 != 0) {\n        uVar15 = 0;\n      }\n      uVar37 = 0xffffffffffffffff;\n      if (bVar48 == 0) {\n        uVar37 = uVar36;\n      }\n      pvVar17 = (void *)FUN_00113c43(lVar19,lVar38,uVar15,uVar37,cVar43);\n      break;\n    case 0x62:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x73) {\n        uVar44 = 0;\n      }\n      else {\n        if (pbVar50[1] != 0x75) goto LAB_0010fb4c;\n        uVar44 = 1;\n      }\n      *param_4 = pbVar50 + 2;\n      if (((byte)(pbVar50[2] + 0x9e) < 2) || (pbVar50[2] == 0x76)) {\n        *param_4 = pbVar50 + 3;\n      }\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      FUN_00109a32(param_4,0,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      if (uVar49 != 0) {\n        pvVar17 = (void *)FUN_00113dfe(uVar49 >> 3 & 0xffffffff,uVar44);\n        break;\n      }\nLAB_0010fa8f:\n      pvVar17 = (void *)FUN_00113e17();\n      break;\n    default:\n      goto switchD_0010f055_caseD_24;\n    case 0x65:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      if (pbVar50[1] == 0x2d) {\n        while( true ) {\n          pbVar3 = *param_4;\n          if (*pbVar3 == 0x3a) break;\n          if (*pbVar3 == 0) goto LAB_0010fb4c;\n          *param_4 = pbVar3 + 1;\n        }\n        *param_4 = pbVar3 + 1;\n      }\n      uVar45 = 10;\n      pvVar17 = (void *)xmalloc(0x50);\n      pvVar24 = (void *)xmalloc(0x50);\n      uVar49 = 0;\n      while( true ) {\n        pbVar3 = *param_4;\n        pbVar50 = pbVar3;\n        if ((*pbVar3 < 0x3c) && ((-0x800100000000002 >> (*pbVar3 & 0x3f) & 1U) == 0)) break;\n        for (; *pbVar50 != 0x3a; pbVar50 = pbVar50 + 1) {\n          if (*pbVar50 == 0) {\n            FUN_00108fb9(pbVar27);\n            free(pvVar17);\n            free(pvVar24);\n            return (void *)0x0;\n          }\n        }\n        pvVar25 = (void *)FUN_00109a0b(pbVar3,(int)pbVar50 - (int)pbVar3);\n        *param_4 = pbVar50 + 1;\n        uVar15 = FUN_00109a32(param_4,0,param_6);\n        if (**param_4 != 0x2c) {\n          FUN_00108fb9(pbVar27);\n          free(pvVar25);\n          free(pvVar17);\n          free(pvVar24);\n          return (void *)0x0;\n        }\n        uVar12 = (int)uVar49 + 1;\n        *param_4 = *param_4 + 1;\n        if ((uint)uVar45 <= uVar12) {\n          uVar45 = (ulong)((uint)uVar45 + 10);\n          pvVar17 = (void *)xrealloc(pvVar17,uVar45 << 3);\n          pvVar24 = (void *)xrealloc(pvVar24,uVar45 << 3);\n        }\n        *(void **)((long)pvVar17 + uVar49 * 8) = pvVar25;\n        *(undefined8 *)((long)pvVar24 + uVar49 * 8) = uVar15;\n        uVar49 = (ulong)uVar12;\n      }\n      *(undefined8 *)((long)pvVar17 + uVar49 * 8) = 0;\n      *(undefined8 *)((long)pvVar24 + uVar49 * 8) = 0;\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pvVar17 = (void *)FUN_00113d6e(pvVar17,pvVar24);\n      break;\n    case 0x66:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113ce0(uVar15,0,0);\n      break;\n    case 0x6b:\n      uVar15 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n      pvVar17 = (void *)FUN_00113b71(uVar15);\n      break;\n    case 0x72:\n      if (param_6 <= pbVar27) {\n        return (void *)0x0;\n      }\n      cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n      if (cVar6 == '\\0') {\n        return (void *)0x0;\n      }\n      bVar51 = false;\n      if ((uint)local_98 == (uint)local_a8) {\n        bVar51 = local_98._4_4_ == local_a8._4_4_;\n      }\n      lVar38 = 0;\n      if (**param_4 == 0x3d) {\n        *param_4 = pbVar27;\n        lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n        if (lVar38 == 0) {\n          return (void *)0x0;\n        }\n      }\n      if (**param_4 == 0x3b) {\n        *param_4 = *param_4 + 1;\n      }\n      pbVar3 = *param_4;\n      uVar49 = FUN_00109a32(param_4,&local_a9,param_6);\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      pbVar50 = *param_4 + 1;\n      *param_4 = pbVar50;\n      uVar45 = FUN_00109a32(param_4,&local_a0,param_6);\n      cVar6 = local_a9;\n      if (**param_4 != 0x3b) goto LAB_0010fb4c;\n      *param_4 = *param_4 + 1;\n      if ((local_a9 == '\\0') && ((char)local_a0 == '\\0')) {\nLAB_0010f700:\n        if (lVar38 != 0) goto LAB_0010f956;\n        if ((!bVar51) || (uVar49 != 0)) {\n          bVar52 = uVar45 != 0;\n          if ((!bVar51) || (bVar52)) {\n            if (((long)uVar49 < 1) || (bVar52)) {\n              if ((uVar45 == 0xffffffffffffffff) && (uVar49 == 0)) goto LAB_0010f788;\n              if (uVar49 == 0) goto LAB_0010f829;\n              if ((-1 < (long)uVar49) || (bVar52)) goto LAB_0010f8cd;\n              if ((uVar49 == 0xfffffffffffffff8) || (bVar51)) goto LAB_0010f89d;\n              if (uVar49 != 0xffffffffffffffff) {\n                if (uVar49 != 1) goto LAB_0010f956;\n                goto LAB_0010f8eb;\n              }\nLAB_0010f8ff:\n              if (uVar45 == 0x7f) goto LAB_0010f810;\n              if (uVar45 == 0x7fff) {\nLAB_0010f912:\n                pvVar17 = (void *)FUN_00113dfe(2,0);\n              }\n              else {\n                if (uVar45 != 0x7fffffff) {\n                  if (uVar45 == 0x7fffffffffffffff) goto LAB_0010f7a5;\n                  goto LAB_0010f956;\n                }\nLAB_0010f92f:\n                pvVar17 = (void *)FUN_00113dfe(4,0);\n              }\n            }\n            else {\n              pvVar17 = (void *)FUN_00113df2(uVar49 & 0xffffffff);\n            }\n          }\n          else if ((long)uVar49 < 1) {\n            if (-1 < (long)uVar49) {\nLAB_0010f8cd:\n              if (uVar49 == ~uVar45) goto LAB_0010f8ff;\n              if (uVar49 == uVar45 + 1) {\n                if (uVar45 == 0x7f) goto LAB_0010f810;\nLAB_0010f8eb:\n                if (uVar45 == 0x7fff) goto LAB_0010f912;\n                if (uVar45 == 0x7fffffff) goto LAB_0010f92f;\n              }\nLAB_0010f956:\n              if (bVar51) {\nLAB_0010fb4c:\n                FUN_00108fb9(pbVar27);\n                return (void *)0x0;\n              }\n              lVar38 = FUN_0010c2d2(param_1,param_2,&local_98);\n              if (lVar38 == 0) {\n                uVar15 = dcgettext(0,\"missing index type\",5);\n                FUN_00108fe8(pbVar27,uVar15);\n                lVar38 = FUN_00113dfe(4,0);\n                if (lVar38 == 0) {\n                  return (void *)0x0;\n                }\n              }\n              pvVar17 = (void *)FUN_00112904(0xf,0);\n              if (pvVar17 == (void *)0x0) {\n                return (void *)0x0;\n              }\n              plVar39 = (long *)xmalloc(0x18);\n              *plVar39 = lVar38;\n              plVar39[1] = uVar49;\n              plVar39[2] = uVar45;\n              *(long **)((long)pvVar17 + 0x10) = plVar39;\n              goto LAB_001115eb;\n            }\nLAB_0010f89d:\n            pvVar17 = (void *)FUN_00113dfe(-(int)uVar49,1);\n          }\n          else {\n            pvVar17 = (void *)FUN_00112904(5,uVar49 & 0xffffffff);\n          }\n        }\n        else {\n          if (uVar45 == 0) goto LAB_0010fa8f;\n          if (uVar45 == 0xffffffffffffffff) {\nLAB_0010f788:\n            if (param_3 != (char *)0x0) {\n              iVar10 = strcmp(param_3,\"long long int\");\n              if (iVar10 == 0) goto LAB_0010f7a5;\n              iVar10 = strcmp(param_3,\"long long unsigned int\");\n              if (iVar10 == 0) goto LAB_0010f7ce;\n            }\nLAB_0010f7f3:\n            pvVar17 = (void *)FUN_00113dfe(4,1);\n          }\n          else if (uVar45 == 0x7f) {\nLAB_0010f810:\n            pvVar17 = (void *)FUN_00113dfe(1,0);\n          }\n          else {\nLAB_0010f829:\n            if ((long)uVar45 < 0) {\n              pvVar17 = (void *)FUN_00113dfe(-(int)uVar45,1);\n            }\n            else if (uVar45 == 0xff) {\n              pvVar17 = (void *)FUN_00113dfe(1,1);\n            }\n            else {\n              if (uVar45 != 0xffff) {\n                if (uVar45 != 0xffffffff) goto LAB_0010f956;\n                goto LAB_0010f7f3;\n              }\n              pvVar17 = (void *)FUN_00113dfe(2,1);\n            }\n          }\n        }\n      }\n      else {\n        if (lVar38 != 0) {\nLAB_0010f6e2:\n          uVar15 = dcgettext(0,\"numeric overflow\",5);\n          FUN_00108fe8(pbVar27,uVar15);\n          goto LAB_0010f700;\n        }\n        cVar8 = FUN_00113fb0(pbVar3,\"01000000000000000000000;\");\n        if ((cVar8 == '\\0') ||\n           (cVar8 = FUN_00113fb0(pbVar50,\"0777777777777777777777;\"), cVar8 == '\\0')) {\n          if ((cVar6 == '\\x01') ||\n             ((uVar49 != 0 ||\n              (cVar6 = FUN_00113fb0(pbVar50,\"01777777777777777777777;\"), cVar6 == '\\0'))))\n          goto LAB_0010f6e2;\nLAB_0010f7ce:\n          pvVar17 = (void *)FUN_00113dfe(8,1);\n        }\n        else {\nLAB_0010f7a5:\n          pvVar17 = (void *)FUN_00113dfe(8,0);\n        }\n      }\n      break;\n    case 0x73:\n    case 0x75:\n      uVar49 = FUN_00109a32(param_4,0,param_6);\n      pbVar3 = *param_4;\n      if (pbVar3 < param_6) {\n        local_118 = (void *)0x0;\n        if (*pbVar3 == 0x21) {\n          *param_4 = pbVar3 + 1;\n          uVar12 = FUN_00109a32(param_4,0,param_6);\n          if (**param_4 != 0x2c) {\nLAB_0010fe26:\n            FUN_00108fb9(pbVar3);\n            goto LAB_0010fe2e;\n          }\n          *param_4 = *param_4 + 1;\n          lVar38 = 0;\n          local_118 = (void *)xmalloc();\n          while ((uint)lVar38 < uVar12) {\n            bVar1 = **param_4;\n            if (bVar1 == 0x30) {\nLAB_0010fe06:\n              uVar44 = 0;\n            }\n            else {\n              if (bVar1 != 0x31) {\n                if (bVar1 != 0) {\n                  uVar15 = dcgettext(0,\"unknown virtual character for baseclass\",5);\n                  FUN_00108fe8(pbVar3,uVar15);\n                  goto LAB_0010fe06;\n                }\n                goto LAB_0010fe26;\n              }\n              uVar44 = 1;\n            }\n            pbVar27 = *param_4;\n            *param_4 = pbVar27 + 1;\n            bVar1 = pbVar27[1];\n            if (bVar1 == 0x31) {\n              uVar11 = 1;\n            }\n            else {\n              if ((char)bVar1 < '2') {\n                if (bVar1 == 0) goto LAB_0010fe26;\n                uVar11 = 2;\n                if (bVar1 == 0x30) goto LAB_0010fd53;\nLAB_0010fe6c:\n                uVar15 = dcgettext(0,\"unknown visibility character for baseclass\",5);\n                FUN_00108fe8(pbVar3,uVar15);\n              }\n              else if (bVar1 != 0x32) goto LAB_0010fe6c;\n              uVar11 = 0;\n            }\nLAB_0010fd53:\n            *param_4 = *param_4 + 1;\n            uVar13 = FUN_00109a32(param_4,0,param_6);\n            if (**param_4 != 0x2c) goto LAB_0010fe26;\n            *param_4 = *param_4 + 1;\n            lVar19 = FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (lVar19 == 0) goto LAB_0010fe2e;\n            plVar39 = (long *)xmalloc();\n            *(undefined8 *)((long)plVar39 + 0xd) = 0;\n            *(undefined4 *)(plVar39 + 1) = uVar13;\n            *(undefined4 *)((long)plVar39 + 0x14) = 0;\n            *plVar39 = lVar19;\n            *(long **)((long)local_118 + lVar38 * 8) = plVar39;\n            lVar38 = lVar38 + 1;\n            *(undefined *)((long)plVar39 + 0xc) = uVar44;\n            *(undefined4 *)(plVar39 + 2) = uVar11;\n            if (**param_4 != 0x3b) goto LAB_0010fe2e;\n            *param_4 = *param_4 + 1;\n          }\n          *(undefined8 *)((long)local_118 + lVar38 * 8) = 0;\n        }\n        pbVar3 = *param_4;\n        if (pbVar3 < param_6) {\n          uVar45 = 0;\n          local_158 = (void *)xmalloc(0x50);\n          bVar51 = false;\n          local_150._0_4_ = 10;\n          while (pbVar27 = *param_4, *pbVar27 != 0x3b) {\n            uVar12 = (int)uVar45 + 1;\n            if ((uint)local_150 <= uVar12) {\n              local_150._0_4_ = (uint)local_150 + 10;\n              local_158 = (void *)xrealloc(local_158);\n            }\n            if (((*pbVar27 == 0x24) || (*pbVar27 == 0x2e)) && (pbVar27[1] != 0x5f)) {\n              *param_4 = *param_4 + 1;\n              plVar39 = (long *)((long)local_158 + uVar45 * 8);\n              *plVar39 = 0;\n              pbVar27 = *param_4;\n              if (pbVar27 < param_6) {\n                if (*pbVar27 == 0x76) {\n                  *param_4 = pbVar27 + 1;\n                  bVar1 = pbVar27[1];\n                  if (bVar1 != 0) {\n                    *param_4 = pbVar27 + 2;\n                    lVar38 = FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n                    if (lVar38 == 0) goto LAB_001102dc;\n                    if (bVar1 == 0x62) {\n                      puVar22 = (undefined *)FUN_001129f4();\n                      if (puVar22 == (undefined *)0x0) {\n                        uVar15 = dcgettext(0,\"unnamed $vb type\",5);\n                        FUN_00108fe8(pbVar27,uVar15);\n                        puVar22 = &DAT_001206ea;\n                      }\n                      pcVar40 = (char *)concat(&DAT_0012077e,puVar22,0);\n                    }\n                    else {\n                      pcVar40 = \"_vptr$\";\n                      if (bVar1 != 0x66) {\n                        uVar15 = dcgettext(0,\"unrecognized C++ abbreviation\",5);\n                        pcVar40 = \"INVALID_CPLUSPLUS_ABBREV\";\n                        FUN_00108fe8(pbVar27,uVar15);\n                      }\n                    }\n                    if (**param_4 == 0x3a) {\n                      *param_4 = *param_4 + 1;\n                      pcVar16 = (char *)FUNC_0010ee3f(param_1,param_2,0);\n                      if (**param_4 == 0x2c) {\n                        *param_4 = *param_4 + 1;\n                        uVar11 = FUN_00109a32(param_4,0,param_6);\n                        if (**param_4 == 0x3b) {\n                          *param_4 = *param_4 + 1;\n                          ppcVar23 = (char **)xmalloc(0x20);\n                          *(undefined8 *)((long)ppcVar23 + 0x14) = 0;\n                          *(undefined4 *)((long)ppcVar23 + 0x1c) = 0;\n                          *ppcVar23 = pcVar40;\n                          ppcVar23[1] = pcVar16;\n                          *(undefined4 *)(ppcVar23 + 3) = uVar11;\n                          *(undefined4 *)(ppcVar23 + 2) = 2;\n                          *plVar39 = (long)ppcVar23;\n                          goto LAB_001102eb;\n                        }\n                      }\n                    }\n                  }\n                }\n                FUN_00108fb9(pbVar27);\n              }\nLAB_001102dc:\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            pcVar40 = strchr((char *)pbVar27,0x3a);\n            if (pcVar40 == (char *)0x0) {\n              FUN_00108fb9(pbVar3);\n              free(local_158);\n              goto LAB_0010fe2e;\n            }\n            if (pcVar40[1] == ':') break;\n            pbVar27 = *param_4;\n            if (param_6 <= pbVar27) goto LAB_001102dc;\n            pvVar17 = (void *)FUN_00109a0b(pbVar27,(int)pcVar40 - (int)pbVar27);\n            *param_4 = (byte *)(pcVar40 + 1);\n            if (pcVar40[1] == '/') {\n              *param_4 = (byte *)(pcVar40 + 2);\n              cVar6 = pcVar40[2];\n              if (cVar6 == '1') {\n                uVar11 = 1;\n              }\n              else if (cVar6 < '2') {\n                if (cVar6 == '\\0') {\n                  FUN_00108fb9(pbVar27);\n                  goto LAB_001102dc;\n                }\n                uVar11 = 2;\n                if (cVar6 != '0') goto LAB_00110152;\n              }\n              else {\n                if (cVar6 != '2') {\nLAB_00110152:\n                  uVar15 = dcgettext(0,\"unknown visibility character for field\",5);\n                  FUN_00108fe8(pbVar27,uVar15);\n                }\n                uVar11 = 0;\n              }\n              *param_4 = *param_4 + 1;\n            }\n            else {\n              uVar11 = 0;\n            }\n            pvVar24 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n            if (pvVar24 == (void *)0x0) {\nLAB_001101e1:\n              free(pvVar17);\n              goto LAB_001102dc;\n            }\n            puVar32 = (undefined8 *)((long)local_158 + uVar45 * 8);\n            pbVar50 = *param_4;\n            if (*pbVar50 != 0x3a) {\n              if (*pbVar50 == 0x2c) {\n                *param_4 = pbVar50 + 1;\n                uVar45 = FUN_00109a32(param_4,0,param_6);\n                if (**param_4 == 0x2c) {\n                  *param_4 = *param_4 + 1;\n                  uVar26 = FUN_00109a32(param_4,0,param_6);\n                  if (**param_4 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    if ((uVar45 | uVar26) == 0) {\n                      uVar11 = 3;\n                    }\n                    ppvVar18 = (void **)xmalloc(0x20);\n                    *(undefined8 *)((long)ppvVar18 + 0x14) = 0;\n                    *ppvVar18 = pvVar17;\n                    ppvVar18[1] = pvVar24;\n                    *(int *)(ppvVar18 + 3) = (int)uVar45;\n                    *(int *)((long)ppvVar18 + 0x1c) = (int)uVar26;\n                    *(undefined4 *)(ppvVar18 + 2) = uVar11;\n                    *puVar32 = ppvVar18;\n                    goto LAB_001102eb;\n                  }\n                }\n              }\nLAB_001101d9:\n              FUN_00108fb9(pbVar27);\n              goto LAB_001101e1;\n            }\n            pbVar50 = pbVar50 + 1;\n            *param_4 = pbVar50;\n            pcVar40 = strchr((char *)pbVar50,0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_001101d9;\n            pvVar25 = (void *)FUN_00109a0b(pbVar50);\n            *param_4 = (byte *)(pcVar40 + 1);\n            ppvVar18 = (void **)xmalloc(0x20);\n            bVar51 = true;\n            *(undefined8 *)((long)ppvVar18 + 0x15) = 0;\n            *ppvVar18 = pvVar17;\n            ppvVar18[1] = pvVar24;\n            *(undefined *)((long)ppvVar18 + 0x14) = 1;\n            ppvVar18[3] = pvVar25;\n            *(undefined4 *)(ppvVar18 + 2) = uVar11;\n            *puVar32 = ppvVar18;\nLAB_001102eb:\n            uVar45 = (ulong)uVar12;\n          }\n          *(undefined8 *)((long)local_158 + uVar45 * 8) = 0;\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          local_128 = (char *)0x0;\n          pbVar27 = (byte *)0x0;\n          pvVar24 = (void *)0x0;\n          local_150 = (char *)0x0;\n          local_e0 = 0;\n          local_fc = 0;\nLAB_00110345:\n          pbVar50 = *param_4;\n          bVar1 = *pbVar50;\n          if (((bVar1 != 0x3b) && (pcVar40 = strchr((char *)pbVar50,0x3a), pcVar40 != (char *)0x0))\n             && (pcVar40[1] == ':')) {\n            pbVar28 = (byte *)(pcVar40 + 2);\n            if (((bVar1 == 0x6f) && (pbVar50[1] == 0x70)) && (pbVar50[2] == 0x24)) {\n              *param_4 = pbVar28;\n              for (pbVar50 = pbVar28; *pbVar50 != 0x2e; pbVar50 = pbVar50 + 1) {\n                if (*pbVar50 == 0) goto LAB_00110788;\n              }\n              pbVar50 = pbVar50 + 1;\n              local_150 = (char *)FUN_00109a0b(pbVar28);\n            }\n            else {\n              local_150 = (char *)FUN_00109a0b(pbVar50);\n              pbVar50 = pbVar28;\n            }\n            *param_4 = pbVar50;\n            local_128 = (char *)xmalloc();\n            local_ec = 10;\n            local_140 = (byte *)0x0;\n            local_f0 = 0;\nLAB_00110406:\n            pbVar50 = local_140;\n            if (local_140 == (byte *)0x0) {\n              pbVar50 = (byte *)FUNC_0010ee3f(param_1,param_2,0);\n              if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n              if (**param_4 != 0x3a) goto LAB_00110788;\n            }\n            pbVar28 = *param_4;\n            *param_4 = pbVar28 + 1;\n            pcVar40 = strchr((char *)(pbVar28 + 1),0x3b);\n            if (pcVar40 == (char *)0x0) goto LAB_00110788;\n            piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n            bVar52 = false;\n            if ((piVar21 != (int *)0x0) && (bVar52 = false, *piVar21 == 0x13)) {\n              bVar52 = true;\n              piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n              if (piVar21 != (int *)0x0) {\n                if (*piVar21 == 0xd) {\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 8);\n                }\n                else {\n                  if (*piVar21 != 0x13) goto LAB_001104b1;\n                  lVar38 = *(long *)(*(long *)(piVar21 + 4) + 0x10);\n                }\n                bVar52 = lVar38 == 0;\n              }\n            }\nLAB_001104b1:\n            pbVar27 = (byte *)FUN_00109a0b(*param_4,(int)pcVar40 - (int)*param_4);\n            *param_4 = (byte *)(pcVar40 + 1);\n            cVar6 = pcVar40[1];\n            if (cVar6 == '0') {\n              local_100 = 2;\n            }\n            else if (cVar6 == '1') {\n              local_100 = 1;\n            }\n            else {\n              if (cVar6 == '\\0') goto LAB_00110788;\n              local_100 = 0;\n            }\n            *param_4 = (byte *)(pcVar40 + 2);\n            bVar1 = pcVar40[2];\n            if ('D' < (char)bVar1) {\nswitchD_00110537_caseD_40:\n              uVar15 = dcgettext(0,\"const/volatile indicator missing\",5);\n              FUN_00108fe8(pbVar3,uVar15);\n              goto switchD_00110537_caseD_3f;\n            }\n            if ((char)bVar1 < '?') {\n              if ((bVar1 & 0xfb) != 0x2a) goto switchD_00110537_caseD_40;\n              goto switchD_00110537_caseD_3f;\n            }\n            switch(bVar1) {\n            default:\n              goto switchD_00110537_caseD_40;\n            case 0x41:\n              *param_4 = (byte *)(pcVar40 + 3);\n            case 0x3f:\nswitchD_00110537_caseD_3f:\n              local_130 = '\\0';\n              local_138 = '\\0';\n              break;\n            case 0x42:\n              local_130 = '\\0';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n              break;\n            case 0x43:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\0';\n              break;\n            case 0x44:\n              local_130 = '\\x01';\n              *param_4 = (byte *)(pcVar40 + 3);\n              local_138 = '\\x01';\n            }\n            pbVar28 = *param_4;\n            bVar1 = *pbVar28;\n            pbVar31 = pbVar27;\n            if (bVar1 == 0x2e) {\n              *param_4 = pbVar28 + 1;\nLAB_001106bd:\n              bVar41 = false;\n              local_120 = (byte *)0x0;\n              local_110 = (byte *)0x0;\n              local_140 = (byte *)0x0;\n            }\n            else {\n              if (bVar1 == 0x3f) {\n                *param_4 = pbVar28 + 1;\n                sVar33 = strlen(local_150);\n                iVar10 = strncmp((char *)pbVar27,local_150,sVar33);\n                if (iVar10 == 0) {\n                  bVar41 = true;\n                  local_120 = (byte *)0x0;\n                  local_110 = (byte *)0x0;\n                  local_140 = (byte *)0x0;\n                  goto LAB_00110703;\n                }\n                bVar41 = true;\n                local_140 = (byte *)0x0;\n                local_120 = (byte *)0x0;\n                local_110 = (byte *)0x0;\nLAB_0011072b:\n                lVar38 = FUN_0010c2d2(param_1,param_2,&local_a8);\n                if (lVar38 == 0) goto LAB_001111e9;\n                piVar21 = (int *)FUN_00112b6e(pbVar50,0);\n                if ((piVar21 == (int *)0x0) ||\n                   (((*piVar21 != 0xd && (*piVar21 != 0x13)) ||\n                    (lVar19 = **(long **)(piVar21 + 4), lVar19 == 0)))) goto LAB_00110788;\n                bVar1 = *pbVar27;\n                if (((bVar1 == 0x5f) && (pbVar27[1] == 0x5f)) &&\n                   ((bVar47 = pbVar27[2], ((&_sch_istable)[(ulong)bVar47 * 2] & 4) != 0 ||\n                    (bVar47 == 0x51 || bVar47 == 0x74)))) {\n                  bVar52 = true;\n                  bVar47 = 1;\nLAB_00110827:\n                  bVar2 = pbVar27[1];\n                  if ((bVar2 == 0x24) || (bVar2 == 0x2e)) {\n                    if (pbVar27[2] != 0x5f) goto LAB_0011085d;\n                    goto LAB_00110a69;\n                  }\n                  bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\n                  if (bVar2 != 0x5a) goto LAB_0011086f;\n                  if ((bVar47 | bVar7) != 0) goto LAB_00110a58;\n                  uVar45 = 0;\nLAB_00110a9d:\n                  local_a0 = pbVar31;\n                  if ((*pbVar31 == 0x5f) && (pbVar31[1] == 0x5a)) {\n                    sVar33 = strlen((char *)pbVar31);\n                    cplus_demangle_init_info(pbVar31,3,sVar33,&local_98);\n                    pvVar17 = malloc((long)local_6c << 5);\n                    local_78 = pvVar17;\n                    pvVar25 = malloc((long)local_5c << 3);\n                    local_68 = pvVar25;\n                    if ((pvVar17 == (void *)0x0) || (pvVar25 == (void *)0x0)) {\n                      free(pvVar17);\n                      free(pvVar25);\n                    }\n                    else {\n                      piVar21 = (int *)cplus_demangle_mangled_name(&local_98,1);\n                      if (*(char *)CONCAT71(uStack_7f,local_80) == '\\0') {\n                        free(local_68);\n                        pvVar17 = local_78;\n                        if (piVar21 != (int *)0x0) {\n                          if ((*piVar21 == 3) && (**(int **)(piVar21 + 6) == 0x29)) {\n                            lVar20 = FUN_0010b6ea(param_1,param_2,\n                                                  *(undefined8 *)(*(int **)(piVar21 + 6) + 6),\n                                                  &local_a9);\n                            free(pvVar17);\n                            goto LAB_001110a9;\n                          }\n                          pcVar40 = (char *)dcgettext(0,\"Demangled name is not a function\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                          free(pvVar17);\n                          goto LAB_001111e9;\n                        }\n                      }\n                      else {\n                        free(local_68);\n                      }\n                      free(local_78);\n                    }\n                    FUN_0010911f(pbVar31);\n                  }\n                  else {\n                    local_80 = '\\0';\n                    local_88 = 0;\n                    local_6c = 10;\n                    local_98 = param_1;\n                    local_90 = param_2;\n                    local_78 = (void *)xmalloc(0xa0);\n                    pbVar50 = local_a0;\n                    local_70 = 0;\n                    pbVar28 = local_a0;\n                    if ((int)uVar45 == 0) {\n                      do {\n                        pbVar42 = (byte *)strchr((char *)pbVar28,0x5f);\n                        if (pbVar42 == (byte *)0x0) {\n                          FUN_0010911f(pbVar50);\n                          goto LAB_00111097;\n                        }\n                        pbVar28 = pbVar42 + 1;\n                      } while (pbVar42[1] != 0x5f);\n                      sVar33 = strspn((char *)pbVar42,\"_\");\n                      if (2 < (uint)sVar33) {\n                        pbVar42 = pbVar42 + ((uint)sVar33 - 2);\n                      }\n                    }\n                    else {\n                      pbVar42 = local_a0 + uVar45;\n                    }\n                    bVar1 = pbVar42[2];\n                    if (local_a0 == pbVar42) {\n                      if ((((&_sch_istable)[(ulong)bVar1 * 2] & 4) != 0) ||\n                         (pbVar50 = pbVar42, bVar1 == 0x51 || bVar1 == 0x74)) {\n                        local_a0 = pbVar42 + 2;\nLAB_00110d86:\n                        pbVar50 = local_a0;\n                        if (*local_a0 != 0) {\n                          pbVar28 = (byte *)0x0;\n                          cVar8 = '\\0';\n                          cVar6 = '\\0';\n                          while (pbVar42 = local_a0, bVar1 = *local_a0, bVar1 != 0) {\n                            if (bVar1 == 0x51) {\n                              cVar6 = FUN_0010d559(&local_98,&local_a0,0);\n                              if (cVar6 != '\\0') {\n                                cVar6 = FUN_00109be3(&local_98,pbVar42,(int)local_a0 - (int)pbVar42)\n                                ;\njoined_r0x00110fbc:\n                                if (cVar6 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  goto LAB_0011100c;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if ('Q' < (char)bVar1) {\n                              if (bVar1 == 0x5f) {\n                                FUN_0010911f(pbVar50);\n                              }\n                              else {\n                                if (bVar1 != 0x74) {\n                                  if (bVar1 != 0x53) goto LAB_00110fd7;\n                                  goto LAB_00110ead;\n                                }\n                                if (pbVar28 == (byte *)0x0) {\n                                  pbVar28 = local_a0;\n                                }\n                                cVar6 = FUN_0010d21c(&local_98,&local_a0,0);\n                                if (cVar6 != '\\0') {\n                                  cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                       (int)local_a0 - (int)pbVar28);\n                                  goto joined_r0x00110fbc;\n                                }\n                              }\n                              goto LAB_00111097;\n                            }\n                            if (bVar1 != 0x43) {\n                              if ((char)bVar1 < 'D') {\n                                if ((byte)(bVar1 - 0x30) < 10) {\n                                  if (pbVar28 == (byte *)0x0) {\n                                    pbVar28 = local_a0;\n                                  }\n                                  uVar12 = FUN_00108e76(&local_a0);\n                                  pbVar5 = local_a0;\n                                  sVar33 = strlen((char *)local_a0);\n                                  if (uVar12 <= sVar33) {\n                                    local_a0 = pbVar5 + uVar12;\n                                    cVar6 = FUN_00109be3(&local_98,pbVar28,\n                                                         (int)local_a0 - (int)pbVar28);\n                                    goto joined_r0x00110fbc;\n                                  }\n                                  FUN_0010911f(pbVar42);\n                                  goto LAB_00111097;\n                                }\n                              }\n                              else if (bVar1 == 0x46) {\n                                local_a0 = local_a0 + 1;\n                                cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                                if (cVar8 != '\\0') {\n                                  pbVar28 = (byte *)0x0;\n                                  pbVar42 = local_a0;\n                                  goto LAB_00111004;\n                                }\n                                goto LAB_00111097;\n                              }\nLAB_00110fd7:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              pbVar42 = local_a0;\n                              if (cVar8 != '\\0') goto LAB_00111004;\n                              goto LAB_00111097;\n                            }\nLAB_00110ead:\n                            pbVar42 = local_a0 + 1;\n                            if (pbVar28 == (byte *)0x0) {\n                              pbVar28 = local_a0;\n                            }\nLAB_00111004:\n                            local_a0 = pbVar42;\n                            if (cVar6 != '\\0') {\nLAB_0011100c:\n                              cVar8 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80);\n                              cVar6 = cVar8;\n                              if (cVar8 == '\\0') goto LAB_00111097;\n                            }\n                          }\n                          if ((cVar8 == '\\0') &&\n                             (cVar6 = FUN_0010d882(&local_98,&local_a0,&local_88,&local_80),\n                             cVar6 == '\\0')) goto LAB_00111097;\n                        }\n                        free(local_78);\n                        local_78 = (void *)0x0;\n                        if (local_88 == 0) {\n                          pcVar40 = (char *)dcgettext(0,\"no argument types in mangled string\\n\",5);\n                          fprintf(_stderr,pcVar40);\n                        }\n                        local_a9 = local_80;\n                        lVar20 = local_88;\nLAB_001110a9:\n                        if (lVar20 != 0) {\n                          pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,lVar20,local_a9);\n                          goto LAB_001110d5;\n                        }\n                        goto LAB_001111e9;\n                      }\n                      for (; *pbVar50 == 0x5f; pbVar50 = pbVar50 + 1) {\n                      }\n                      pcVar40 = strstr((char *)pbVar50,\"__\");\n                      if ((pcVar40 != (char *)0x0) && (pcVar40[2] != '\\0')) {\n                        cVar6 = FUN_00113e5e(&local_98,&local_a0,pcVar40);\n                        goto LAB_00110d7e;\n                      }\n                      FUN_0010911f(pbVar42);\n                    }\n                    else if (bVar1 == 0) {\n                      FUN_0010911f(local_a0);\n                    }\n                    else {\n                      cVar6 = FUN_00113e5e(&local_98,&local_a0,pbVar42);\nLAB_00110d7e:\n                      if (cVar6 != '\\0') goto LAB_00110d86;\n                    }\nLAB_00111097:\n                    free(local_78);\n                  }\n                  goto LAB_001111e9;\n                }\n                cVar6 = FUN_00113fb0(pbVar27,&DAT_001207be);\n                if (cVar6 == '\\0') {\n                  if (param_3 == (char *)0x0) {\n                    bVar47 = 0;\n                    bVar52 = false;\n                  }\n                  else {\n                    iVar10 = strcmp(local_150,param_3);\n                    bVar52 = iVar10 == 0;\n                    bVar47 = 0;\n                  }\n                }\n                else {\n                  bVar47 = 1;\n                  bVar52 = true;\n                }\n                if (bVar1 == 0x5f) goto LAB_00110827;\nLAB_0011085d:\n                bVar7 = FUN_00113fb0(pbVar27,&DAT_001207c3);\nLAB_0011086f:\n                if ((bVar47 | bVar7) == 0) {\n                  pcVar40 = param_3;\n                  if (param_3 == (char *)0x0) {\n                    if (local_138 == '\\0') {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"\";\n                    }\n                    else {\n                      pcVar16 = \"\";\n                      if (local_130 != '\\0') {\n                        pcVar16 = \"V\";\n                      }\n                      pcVar46 = \"C\";\n                    }\nLAB_00110917:\n                    iVar10 = 0;\n                    sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                  }\n                  else {\n                    pcVar46 = \"C\";\n                    pcVar16 = \"V\";\n                    sVar33 = strlen(param_3);\n                    iVar10 = (int)sVar33;\n                    if (local_138 == '\\0') {\n                      pcVar46 = \"\";\n                    }\n                    if (local_130 == '\\0') {\n                      pcVar16 = \"\";\n                    }\n                    if (iVar10 == 0) goto LAB_00110917;\n                    pcVar29 = strchr(param_3,0x3c);\n                    if (pcVar29 == (char *)0x0) {\n                      sprintf((char *)&local_98,\"__%s%s%d\",pcVar46,pcVar16);\n                    }\n                    else {\n                      iVar10 = 0;\n                      sprintf((char *)&local_98,\"__%s%s\",pcVar46,pcVar16);\n                      pcVar40 = (char *)0x0;\n                    }\n                  }\n                  iVar14 = 0;\n                  if (!bVar52) {\n                    sVar33 = strlen(local_150);\n                    iVar14 = (int)sVar33;\n                  }\n                  sVar33 = strlen((char *)&local_98);\n                  sVar30 = strlen((char *)pbVar27);\n                  local_d0 = (int)sVar33;\n                  if (((*local_150 == 'o') && (local_150[1] == 'p')) &&\n                     ((local_150[2] == '$' || (local_150[2] == '.')))) goto LAB_001111e9;\n                  pbVar31 = (byte *)xmalloc(iVar10 + 1 + iVar14 + local_d0 + (int)sVar30);\n                  if (bVar52) {\n                    *pbVar31 = 0;\n                  }\n                  else {\n                    strcpy((char *)pbVar31,local_150);\n                  }\n                  sVar33 = strlen((char *)pbVar31);\n                  uVar45 = sVar33 & 0xffffffff;\n                  strcpy((char *)(pbVar31 + sVar33),(char *)&local_98);\n                  if (pcVar40 != (char *)0x0) {\n                    strcat((char *)pbVar31,pcVar40);\n                  }\n                  strcat((char *)pbVar31,(char *)pbVar27);\n                  if (*pbVar27 != 0) goto LAB_00110a9d;\n                }\n                else {\nLAB_00110a58:\n                  if ((bVar1 != 0) && ((bVar7 & 1) == 0)) {\n                    uVar45 = 0;\n                    goto LAB_00110a9d;\n                  }\n                }\nLAB_00110a69:\n                puVar32 = (undefined8 *)xmalloc(8);\n                *puVar32 = 0;\n                pbVar50 = (byte *)FUN_00113b98(lVar19,lVar38,puVar32,0);\nLAB_001110d5:\n                if (pbVar50 == (byte *)0x0) goto LAB_001111e9;\n                goto LAB_001110de;\n              }\n              if (bVar1 != 0x2a) {\n                FUN_00108fe8(pbVar3,\"member function type missing\");\n                goto LAB_001106bd;\n              }\n              *param_4 = pbVar28 + 1;\n              uVar12 = FUN_00109a32(param_4,0,param_6);\n              pbVar28 = *param_4;\n              if (*pbVar28 != 0x3b) goto LAB_00110788;\n              local_110 = (byte *)(ulong)(uVar12 & 0x7fffffff);\n              *param_4 = pbVar28 + 1;\n              bVar41 = pbVar28[1] == 0x3b || pbVar28[1] == 0;\n              if (bVar41) {\n                bVar41 = false;\n                local_120 = (byte *)0x0;\n                local_140 = (byte *)0x0;\n              }\n              else {\n                pbVar28 = (byte *)FUNC_0010ee3f(param_1,param_2,0,param_4);\n                bVar1 = **param_4;\n                if (bVar1 != 0x3a) {\n                  if (bVar1 == 0x3b) {\n                    *param_4 = *param_4 + 1;\n                    local_140 = (byte *)0x0;\n                    local_120 = pbVar28;\n                    goto LAB_00110703;\n                  }\n                  goto LAB_00110788;\n                }\n                local_120 = (byte *)0x0;\n                local_140 = pbVar28;\n              }\n            }\nLAB_00110703:\n            if (bVar52) goto LAB_0011072b;\nLAB_001110de:\n            uVar12 = local_f0 + 1;\n            if (local_ec <= uVar12) {\n              local_ec = local_ec + 10;\n              local_128 = (char *)xrealloc(local_128,(ulong)local_ec << 3);\n            }\n            if (bVar41) {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              ppbVar34[3] = (byte *)0xffffffffffffffff;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n            }\n            else {\n              ppbVar34 = (byte **)xmalloc(0x28);\n              puVar22 = (undefined *)((long)ppbVar34 + 0x16);\n              for (lVar38 = 0x12; lVar38 != 0; lVar38 = lVar38 + -1) {\n                *puVar22 = 0;\n                puVar22 = puVar22 + (ulong)bVar48 * -2 + 1;\n              }\n              *ppbVar34 = pbVar31;\n              ppbVar34[1] = pbVar50;\n              *(undefined4 *)(ppbVar34 + 2) = local_100;\n              *(char *)((long)ppbVar34 + 0x14) = local_138;\n              *(char *)((long)ppbVar34 + 0x15) = local_130;\n              ppbVar34[3] = local_110;\n              ppbVar34[4] = local_120;\n            }\n            *(byte ***)(local_128 + (ulong)local_f0 * 8) = ppbVar34;\n            pbVar50 = *param_4;\n            if ((*pbVar50 == 0x3b) || (local_f0 = uVar12, *pbVar50 == 0)) goto LAB_00111678;\n            goto LAB_00110406;\n          }\n          if (pvVar24 != (void *)0x0) {\n            *(undefined8 *)((long)pvVar24 + (ulong)local_fc * 8) = 0;\n          }\n          pbVar3 = *param_4;\n          if (param_6 <= pbVar3) goto LAB_001112f3;\n          if (*pbVar3 == 0x3b) {\n            *param_4 = pbVar3 + 1;\n          }\n          pbVar27 = *param_4;\n          if (*pbVar27 == 0x7e) {\n            *param_4 = pbVar27 + 1;\n            if (((pbVar27[1] & 0xef) == 0x2d) || (pbVar27[1] == 0x2b)) {\n              *param_4 = pbVar27 + 2;\n            }\n            if (**param_4 != 0x25) goto LAB_001112ee;\n            pbVar27 = *param_4 + 1;\n            *param_4 = pbVar27;\n            cVar6 = FUN_00109ab1(param_4,&local_98,param_6);\n            if (cVar6 == '\\0') goto LAB_001112f3;\n            if ((uint)local_98 != (uint)local_a8) {\nLAB_001112a2:\n              *param_4 = pbVar27;\n              pvVar25 = (void *)FUNC_0010ee3f(param_1,param_2,0,param_4,0,param_6);\n              for (pbVar27 = *param_4; *pbVar27 != 0x3b; pbVar27 = pbVar27 + 1) {\n                if (*pbVar27 == 0) {\n                  FUN_00108fb9(pbVar3);\n                  goto LAB_001112f3;\n                }\n              }\n              *param_4 = pbVar27 + 1;\n              goto LAB_00111307;\n            }\n            if (local_98._4_4_ != local_a8._4_4_) goto LAB_001112a2;\n            pvVar25 = (void *)0x0;\n          }\n          else {\nLAB_001112ee:\n            pvVar25 = (void *)0x0;\nLAB_00111307:\n            if ((((ulong)local_118 | (ulong)pvVar24 | (ulong)pvVar25) == 0) && (!bVar51)) {\n              pvVar17 = (void *)FUN_00113da9(bVar9 == 0x73,uVar49,local_158);\n              break;\n            }\n            cVar6 = '\\0';\n          }\n          pvVar17 = (void *)FUN_00112904((bVar9 != 0x73) + '\\t',uVar49 & 0xffffffff);\n          if (pvVar17 == (void *)0x0) {\n            return (void *)0x0;\n          }\n          ppvVar35 = (void **)xmalloc(0x28);\n          lVar38 = 8;\n          ppvVar18 = ppvVar35 + 1;\n          if (cVar6 != '\\0') {\n            pvVar25 = pvVar17;\n          }\n          for (; lVar38 != 0; lVar38 = lVar38 + -1) {\n            *(undefined4 *)ppvVar18 = 0;\n            ppvVar18 = (void **)((long)ppvVar18 + (ulong)bVar48 * -8 + 4);\n          }\n          ppvVar35[3] = pvVar24;\n          ppvVar35[4] = pvVar25;\n          *ppvVar35 = local_158;\n          ppvVar35[2] = local_118;\n          *(void ***)((long)pvVar17 + 0x10) = ppvVar35;\n          goto LAB_001115eb;\n        }\n      }\nLAB_0010fe2e:\n      local_158 = (void *)0x0;\nLAB_001112f3:\n      free(local_158);\n      return (void *)0x0;\n    case 0x78:\n      bVar48 = pbVar50[1];\n      if (bVar48 == 0x73) {\nLAB_0010f0fd:\n        uVar15 = 7;\n      }\n      else if ((char)bVar48 < 't') {\n        if (bVar48 == 0) goto switchD_0010f055_caseD_24;\n        uVar15 = 0xb;\n        if (bVar48 != 0x65) goto LAB_0010f0df;\n      }\n      else {\n        uVar15 = 8;\n        if (bVar48 != 0x75) {\nLAB_0010f0df:\n          uVar15 = dcgettext(0,\"unrecognized cross reference type\",5);\n          FUN_00108fe8(pbVar3,uVar15);\n          goto LAB_0010f0fd;\n        }\n      }\n      pbVar27 = *param_4 + 1;\n      *param_4 = pbVar27;\n      pcVar16 = strchr((char *)pbVar27,0x3c);\n      pcVar40 = strchr((char *)pbVar27,0x3a);\n      if (pcVar40 == (char *)0x0) {\nswitchD_0010f055_caseD_24:\n        FUN_00108fb9(pbVar3);\n        return (void *)0x0;\n      }\n      if (((pcVar16 != (char *)0x0) && (pcVar16 < pcVar40)) && (pcVar40[1] == ':')) {\n        iVar10 = 0;\n        for (; cVar6 = *pcVar16, cVar6 != '\\0'; pcVar16 = pcVar16 + 1) {\n          if (cVar6 == '<') {\n            iVar10 = iVar10 + 1;\n          }\n          else if (cVar6 == '>') {\n            iVar10 = iVar10 + -1;\n          }\n          else if ((iVar10 == 0) && (pcVar40 = pcVar16, cVar6 == ':')) goto LAB_0010f176;\n        }\n        goto switchD_0010f055_caseD_24;\n      }\nLAB_0010f176:\n      uVar49 = (long)pcVar40 - (long)pbVar27;\n      if ((param_3 != (char *)0x0) &&\n         ((iVar10 = strncmp(param_3,(char *)pbVar27,uVar49), iVar10 == 0 &&\n          (param_3[uVar49] == '\\0')))) {\n        *(undefined *)(param_2 + 0x1a8) = 1;\n      }\n      pvVar17 = (void *)FUN_0010afd5(param_1,param_2,pbVar27,uVar49 & 0xffffffff,uVar15);\n      *param_4 = (byte *)(pcVar40 + 1);\n    }\n  }\nLAB_001115e2:\n  if (pvVar17 == (void *)0x0) {\n    return (void *)0x0;\n  }\nLAB_001115eb:\n  if ((uint)local_a8 != -1) {\n    ppvVar18 = (void **)FUN_00109022(param_2,&local_a8);\n    if (ppvVar18 == (void **)0x0) {\n      return (void *)0x0;\n    }\n    *ppvVar18 = pvVar17;\n  }\n  if (local_12c != 0xffffffff) {\n    uVar12 = *(uint *)((long)pvVar17 + 4);\n    if ((uVar12 != 0) && (local_12c != uVar12)) {\n      pcVar40 = (char *)dcgettext(0,\"Warning: changing type size from %d to %d\\n\",5);\n      fprintf(_stderr,pcVar40,(ulong)uVar12,(ulong)local_12c);\n    }\n    *(uint *)((long)pvVar17 + 4) = local_12c;\n    return pvVar17;\n  }\n  return pvVar17;\nLAB_00110788:\n  FUN_00108fb9(pbVar3);\nLAB_001111e9:\n  free(local_150);\n  free(local_128);\n  free(pbVar27);\n  goto LAB_001112f3;\nLAB_00111678:\n  *(undefined8 *)(local_128 + (ulong)uVar12 * 8) = 0;\n  if (*pbVar50 != 0) {\n    *param_4 = pbVar50 + 1;\n  }\n  if (local_e0 <= local_fc + 1) {\n    local_e0 = local_e0 + 10;\n    pvVar24 = (void *)xrealloc(pvVar24,(ulong)local_e0 << 3);\n  }\n  ppcVar23 = (char **)xmalloc(0x10);\n  *ppcVar23 = local_150;\n  ppcVar23[1] = local_128;\n  *(char ***)((long)pvVar24 + (ulong)local_fc * 8) = ppcVar23;\n  local_fc = local_fc + 1;\n  goto LAB_00110345;\n}\n\n",
            "called": [
                "FUN_00109a32",
                "cplus_demangle_init_info",
                "FUN_00113bfa",
                "FUN_001129f4",
                "FUN_00113df2",
                "FUN_00108fb9",
                "cplus_demangle_mangled_name",
                "strcmp",
                "FUN_00113d3a",
                "FUN_00109022",
                "FUN_00108fe8",
                "xmalloc",
                "strspn",
                "xrealloc",
                "strcat",
                "FUN_00113e5e",
                "FUN_00113e17",
                "strtol",
                "FUN_0010d559",
                "FUN_00113c43",
                "strlen",
                "FUN_00112b6e",
                "strcpy",
                "FUN_00113b4a",
                "strstr",
                "FUN_00109ab1",
                "concat",
                "FUN_0010afd5",
                "FUN_00113fb0",
                "dcgettext",
                "FUN_00113dfe",
                "fprintf",
                "strncmp",
                "FUN_00113ce0",
                "FUN_00109be3",
                "FUN_00113cb9",
                "FUN_0010911f",
                "sprintf",
                "malloc",
                "FUN_0010ee3f",
                "strchr",
                "FUN_0010d21c",
                "FUN_00113b71",
                "FUN_00108e76",
                "FUN_0010b6ea",
                "FUN_0010c2d2",
                "FUN_00113da9",
                "FUN_00113d6e",
                "free",
                "FUN_00112904",
                "FUN_0010d882",
                "FUN_00113b98",
                "FUN_0010914e",
                "FUN_00109a0b"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010ee3f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "FUNC_0010ee3f"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104890",
            "calling": [
                "FUN_00116b90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00104966",
                "FUN_00114460",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_0010882c",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "bfd_decode_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_decode_symclass(void)\n\n{\n  bfd_decode_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_decode_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104490",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_decode_symclass"
        },
        "FUN_00108b3e": {
            "renaming": {
                "FUN_00108b3e": "print_last_stab_entries_00108b3e",
                "__format": "formatString",
                "lVar1": "stabName",
                "lVar2": "index",
                "lVar3": "offset",
                "piVar4": "entryPtr",
                "iVar5": "count"
            },
            "code": "\n\n\nundefined8 printLastStabEntries_00108b3e(undefined8 param_1,undefined8 param_2,undefined8 param_3)\n\n{\n  char *formatString;\n  long stabName;\n  long index;\n  long offset;\n  int *entryPtr;\n  int count;\n  \n  formatString = (char *)dcgettext(0,\"Last stabs entries before error:\\n\",5);\n  fprintf(_stderr,formatString);\n  fwrite(\"n_type n_desc n_value  string\\n\",1,0x1e,_stderr);\n  count = DAT_001278c0;\n  do {\n    index = (long)count;\n    offset = index * 0x18;\n    entryPtr = (int *)(&DAT_00127740 + offset);\n    if ((&DAT_00127750)[index * 3] != 0) {\n      stabName = bfd_get_stab_name(*entryPtr);\n      if (stabName == 0) {\n        if (*entryPtr == 0) {\n          fwrite(\"HdrSym\",1,6,_stderr);\n        }\n        else {\n          fprintf(_stderr,\"%-6d\");\n        }\n      }\n      else {\n        fprintf(_stderr,\"%-6s\",stabName);\n      }\n      fprintf(_stderr,\" %-6d \",(ulong)*(uint *)(&DAT_00127744 + offset));\n      fprintf(_stderr,\"%08lx\",*(undefined8 *)(&DAT_00127748 + offset));\n      if (*entryPtr != 0) {\n        fprintf(_stderr,\" %s\",(&DAT_00127750)[index * 3]);\n      }\n      fputc(10,_stderr);\n    }\n    count = (count + 1) % 0x10;\n  } while (DAT_001278c0 != count);\n  return param_3;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "bfd_get_stab_name",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108b3e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "print_last_stab_entries_00108b3e"
        },
        "FUN_0010a083": {
            "renaming": {
                "FUN_0010a083": "initialize_data_0010a083",
                "param_1": "dataPtr"
            },
            "code": "\nvoid initializeData_0010a083(long dataPtr)\n\n{\n  FUN_00109ed3(dataPtr,0x2a,4,dataPtr + 0x178,dataPtr + 0x180);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a083",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a083"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_00109c2e": {
            "renaming": {
                "FUN_00109c2e": "resize_and_initialize_array_00109c2e",
                "param_1": "array",
                "param_2": "value",
                "param_3": "size",
                "param_4": "flag",
                "param_5": "ptrFlag",
                "param_6": "param",
                "lVar1": "newArrayAddress",
                "plVar2": "arrayElement",
                "lVar3": "remainingSize",
                "puVar4": "currentElement",
                "uVar5": "currentSize",
                "bVar6": "boolVar",
                "auVar7": "returnValue"
            },
            "code": "\nundefined  [16]\nresizeAndInitializeArray_00109c2e(long array,long value,ulong size,int flag,undefined4 *ptrFlag,\n            undefined8 param)\n\n{\n  long newArrayAddress;\n  long *arrayElement;\n  long remainingSize;\n  undefined *currentElement;\n  ulong currentSize;\n  byte boolVar;\n  undefined returnValue [16];\n  \n  boolVar = 0;\n  size = size & 0xffffffff;\n  currentSize = *(ulong *)(array + 0x1b0);\n  if (currentSize <= size) {\n    if (currentSize == 0) {\n      currentSize = 10;\n    }\n    for (; currentSize <= size; currentSize = currentSize * 2) {\n    }\n    newArrayAddress = xrealloc(*(undefined8 *)(array + 0x1a8),currentSize * 0x18);\n    *(long *)(array + 0x1a8) = newArrayAddress;\n    currentElement = (undefined *)(*(long *)(array + 0x1b0) * 0x18 + newArrayAddress);\n    for (remainingSize = (currentSize - *(long *)(array + 0x1b0)) * 0x18; remainingSize != 0; remainingSize = remainingSize + -1) {\n      *currentElement = 0;\n      currentElement = currentElement + (ulong)boolVar * -2 + 1;\n    }\n    *(ulong *)(array + 0x1b0) = currentSize;\n  }\n  arrayElement = (long *)(size * 0x18 + *(long *)(array + 0x1a8));\n  if (*arrayElement == 0) {\n    newArrayAddress = *(long *)(array + 0x68);\n    *arrayElement = newArrayAddress;\n    *(long *)(array + 0x68) = newArrayAddress + 1;\n    arrayElement[1] = value;\n    *(int *)(arrayElement + 2) = flag;\n  }\n  if (flag == 0) {\n    *(undefined4 *)(arrayElement + 2) = 0;\n    *(undefined4 *)((long)arrayElement + 0x14) = *ptrFlag;\n  }\n  else {\n    *ptrFlag = *(undefined4 *)((long)arrayElement + 0x14);\n  }\n  returnValue._8_8_ = param;\n  returnValue._0_8_ = *arrayElement;\n  return returnValue;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109c2e",
            "calling": [
                "FUN_0010a69a",
                "FUN_00109d5c"
            ],
            "imported": false,
            "current_name": "resize_and_initialize_array_00109c2e"
        },
        "FUN_001053b5": {
            "renaming": {
                "FUN_001053b5": "print_bad_format_error_message_001053b5",
                "uVar1": "errorMessage",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid printBadFormatErrorMessage_001053b5(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b5",
            "calling": [
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "print_bad_format_error_message_001053b5"
        },
        "FUN_00112996": {
            "renaming": {
                "FUN_00112996": "add_to_current_namespace_00112996",
                "param_1": "input_ptr",
                "param_2": "param_ptr",
                "param_3": "context_ptr",
                "uVar1": "error_msg",
                "lVar2": "temp_ptr"
            },
            "code": "\n\n\nundefined8 add_to_current_namespace_00112996(long input_ptr,undefined8 param_ptr,undefined8 context_ptr)\n\n{\n  undefined8 error_msg;\n  long temp_ptr;\n  \n  if ((*(long *)(input_ptr + 8) != 0) && (*(long *)(input_ptr + 0x10) != 0)) {\n    temp_ptr = *(long *)(input_ptr + 0x10) + 0x10;\n    if (*(long *)(input_ptr + 0x20) != 0) {\n      temp_ptr = *(long *)(input_ptr + 0x20) + 0x28;\n    }\n    error_msg = FUN_00112925(temp_ptr,param_ptr,context_ptr,3);\n    return error_msg;\n  }\n  error_msg = dcgettext(0,\"debug_add_to_current_namespace_00112996: no current file\",5);\n  fprintf(_stderr,\"%s\\n\",error_msg);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112996",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "add_to_current_namespace_00112996"
        },
        "FUN_0010c7a0": {
            "renaming": {
                "FUN_0010c7a0": "set_debug_class_id_0010c7a0",
                "param_1": "classPtr",
                "param_2": "className",
                "param_3": "typePtr",
                "uVar1": "result",
                "uVar2": "typeId",
                "lVar3": "typeInfoPtr",
                "piVar4": "typeKind",
                "__s1": "existingClassName",
                "cVar5": "successFlag",
                "iVar6": "newTypeId",
                "puVar7": "entry",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] setDebugClassID_0010c7a0(long classPtr,char *className,int *typePtr,undefined8 param_4)\n\n{\n  undefined8 result;\n  uint typeId;\n  long typeInfoPtr;\n  int *typeKind;\n  char *existingClassName;\n  char successFlag;\n  int newTypeId;\n  undefined8 *entry;\n  undefined returnValue [16];\n  \n  if (3 < *typePtr - 7U) {\n                    \n    __assert_fail(\"type->kind == DEBUG_KIND_STRUCT || type->kind == DEBUG_KIND_UNION || type->kind == DEBUG_KIND_CLASS || type->kind == DEBUG_KIND_UNION_CLASS\"\n                  ,\"../../binutils/debug.c\",0xb87,\"debug_set_class_id\");\n  }\n  typeInfoPtr = *(long *)(typePtr + 4);\n  entry = (undefined8 *)(ulong)*(uint *)(typeInfoPtr + 0xc);\n  if (*(uint *)(typeInfoPtr + 0xc) <= *(uint *)(classPtr + 0x38)) {\n    for (entry = *(undefined8 **)(classPtr + 0x50); entry != (undefined8 *)0x0;\n        entry = (undefined8 *)*entry) {\n      typeKind = (int *)entry[1];\n      if (*typeKind == *typePtr) {\n        existingClassName = (char *)entry[2];\n        if (className == (char *)0x0) {\n          if (existingClassName == (char *)0x0) {\nLAB_0010c82c:\n            successFlag = FUN_0010922b(classPtr,typeKind,typePtr);\n            if (successFlag != '\\0') {\n              typeId = *(uint *)(*(long *)(entry[1] + 0x10) + 0xc);\n              entry = (undefined8 *)(ulong)typeId;\n              *(uint *)(typeInfoPtr + 0xc) = typeId;\n              goto LAB_0010c884;\n            }\n          }\n        }\n        else if (((existingClassName != (char *)0x0) && (*existingClassName == *className)) &&\n                (newTypeId = strcmp(existingClassName,className), newTypeId == 0)) goto LAB_0010c82c;\n      }\n    }\n    newTypeId = *(int *)(classPtr + 0x34) + 1;\n    *(int *)(classPtr + 0x34) = newTypeId;\n    *(int *)(typeInfoPtr + 0xc) = newTypeId;\n    entry = (undefined8 *)xmalloc(0x18);\n    result = *(undefined8 *)(classPtr + 0x50);\n    entry[2] = className;\n    *(undefined8 **)(classPtr + 0x50) = entry;\n    *entry = result;\n    entry[1] = typePtr;\n  }\nLAB_0010c884:\n  returnValue._1_7_ = (undefined7)((ulong)entry >> 8);\n  returnValue[0] = 1;\n  returnValue._8_8_ = param_4;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strcmp",
                "FUN_0010922b",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c7a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "set_debug_class_id_0010c7a0"
        },
        "htab_create_alloc": {
            "renaming": {},
            "code": "\nvoid htab_create_alloc(void)\n\n{\n  htab_create_alloc();\n  return;\n}\n\n",
            "called": [
                "htab_create_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104720",
            "calling": [
                "FUN_00116b90",
                "FUN_00113f20"
            ],
            "imported": false,
            "current_name": "htab_create_alloc"
        },
        "FUN_0010922b": {
            "renaming": {
                "FUN_0010922b": "check_equality_0010922b",
                "param_1": "param1",
                "param_2": "arr1",
                "param_3": "arr2",
                "uVar1": "type1",
                "uVar2": "type2",
                "pplVar3": "arr1PtrPtr",
                "ppcVar4": "strPtrPtr1",
                "ppcVar5": "strPtrPtr2",
                "lVar6": "l1",
                "lVar7": "l2",
                "lVar8": "l3",
                "pcVar9": "str1",
                "pcVar10": "str2",
                "cVar11": "flag",
                "bVar12": "result",
                "iVar13": "cmpResult",
                "uVar14": "u1",
                "uVar15": "u2",
                "puVar16": "ptr1",
                "puVar17": "ptr2",
                "plVar18": "lPtr1",
                "lVar19": "offset",
                "plVar20": "lPtr2",
                "plVar21": "lPtr3",
                "lVar22": "l4",
                "local_70": "arrPtr",
                "local_58": "ptrPtrList",
                "plStack_50": "lPtrStack",
                "local_48": "arrStack"
            },
            "code": "\nbyte checkEquality_0010922b(long param1,long *arr1,long *arr2)\n\n{\n  uint type1;\n  uint type2;\n  long **arr1PtrPtr;\n  char **strPtrPtr1;\n  char **strPtrPtr2;\n  long l1;\n  long l2;\n  long l3;\n  char *str1;\n  char *str2;\n  char flag;\n  byte result;\n  int cmpResult;\n  undefined8 u1;\n  undefined8 u2;\n  undefined8 *ptr1;\n  undefined8 *ptr2;\n  long *lPtr1;\n  long offset;\n  long *lPtr2;\n  long *lPtr3;\n  long l4;\n  long *arrPtr;\n  undefined8 *ptrPtrList;\n  long *lPtrStack;\n  long *arrStack;\n  \n  lPtr1 = arr2;\n  if (arr1 == (long *)0x0) {\nLAB_00109241:\n    return arr2 == (long *)0x0;\n  }\njoined_r0x00109255:\n  if (lPtr1 == (long *)0x0) {\n    return false;\n  }\n  while( true ) {\n    type1 = *(uint *)arr1;\n    if (type1 == 1) goto code_r0x00109263;\n    while (type2 = *(uint *)arr2, type2 == 1) {\n      arr2 = **(long ***)arr2[2];\n      if (arr2 == (long *)0x0) {\n        return false;\n      }\n    }\n    if (arr1 == arr2) {\n      return true;\n    }\n    if (type1 != 0x16) break;\n    if (type2 != 0x17) goto LAB_001092cb;\n    arr1 = *(long **)(arr1[2] + 8);\n    if (arr1 == (long *)0x0) goto LAB_00109241;\n  }\n  if ((type1 == 0x17) && (type2 == 0x16)) {\n    arr2 = *(long **)(arr2[2] + 8);\n    lPtr1 = arr2;\n    goto joined_r0x00109255;\n  }\nLAB_001092cb:\n  if (*arr1 != *arr2) {\n    return false;\n  }\n  if (type1 == 3) {\n    return *(char *)(arr1 + 2) == *(char *)(arr2 + 2);\n  }\n  if (type1 < 4) {\n    if (type1 == 2) {\n      return true;\n    }\n  }\n  else if (type1 - 4 < 3) {\n    return true;\n  }\n  ptrPtrList = *(undefined8 **)(param1 + 0x58);\n  for (ptr2 = ptrPtrList; ptr2 != (undefined8 *)0x0; ptr2 = (undefined8 *)*ptr2) {\n    if (((long *)ptr2[1] == arr1) && ((long *)ptr2[2] == arr2)) {\n      return true;\n    }\n  }\n  *(undefined8 ***)(param1 + 0x58) = &ptrPtrList;\n  lPtrStack = arr1;\n  arrStack = arr2;\n  switch(type1) {\n  case 7:\n  case 8:\n  case 9:\n  case 10:\n    lPtr1 = (long *)arr1[2];\n    arr1PtrPtr = (long **)arr2[2];\n    if (lPtr1 == (long *)0x0) {\n      result = arr1PtrPtr == (long **)0x0;\n      goto LAB_001099c4;\n    }\n    if (arr1PtrPtr == (long **)0x0) goto LAB_00109382;\n    if ((*(uint *)(param1 + 0x38) < *(uint *)((long)lPtr1 + 0xc)) &&\n       (*(uint *)((long)lPtr1 + 0xc) == *(uint *)((long)arr1PtrPtr + 0xc))) goto LAB_001097af;\n    ptr2 = (undefined8 *)*lPtr1;\n    arrPtr = *arr1PtrPtr;\n    if (((ptr2 == (undefined8 *)0x0) == (arrPtr == (long *)0x0)) &&\n       ((((lPtr1[2] == 0) == (arr1PtrPtr[2] == (long *)0x0) &&\n         ((lPtr1[3] == 0) == (arr1PtrPtr[3] == (long *)0x0))) &&\n        ((lPtr1[4] == 0) == (arr1PtrPtr[4] == (long *)0x0))))) {\n      if (ptr2 == (undefined8 *)0x0) {\nLAB_001093fd:\n        if ((lPtr1[4] != 0) &&\n           (flag = checkEquality_0010922b(param1,lPtr1[4],arr1PtrPtr[4]), flag == '\\0'))\n        goto LAB_00109382;\n        lPtr3 = (long *)lPtr1[2];\n        if (lPtr3 == (long *)0x0) {\nLAB_00109540:\n          ptr2 = (undefined8 *)lPtr1[3];\n          if (ptr2 == (undefined8 *)0x0) goto LAB_001097af;\n          lPtr1 = arr1PtrPtr[3];\n          while( true ) {\n            strPtrPtr2 = (char **)*ptr2;\n            if (strPtrPtr2 == (char **)0x0) {\n              result = *lPtr1 == 0;\n              goto LAB_001099c4;\n            }\n            strPtrPtr1 = (char **)*lPtr1;\n            if (strPtrPtr1 == (char **)0x0) break;\n            if ((**strPtrPtr2 != **strPtrPtr1) || (cmpResult = strcmp(*strPtrPtr2,*strPtrPtr1), cmpResult != 0))\n            break;\n            str1 = strPtrPtr2[1];\n            str2 = strPtrPtr1[1];\n            if ((str1 == (char *)0x0) != (str2 == (char *)0x0)) break;\n            if (str1 != (char *)0x0) {\n              l4 = 0;\n              while( true ) {\n                strPtrPtr2 = *(char ***)(str1 + l4);\n                strPtrPtr1 = *(char ***)(str2 + l4);\n                if (strPtrPtr2 == (char **)0x0) break;\n                if (strPtrPtr1 == (char **)0x0) goto LAB_00109382;\n                if ((((**strPtrPtr2 != **strPtrPtr1) ||\n                     ((((ulong)strPtrPtr2[2] ^ (ulong)strPtrPtr1[2]) & 0xffffffffffff) != 0)) ||\n                    ((strPtrPtr2[3] != strPtrPtr1[3] ||\n                     ((((strPtrPtr2[4] == (char *)0x0) != (strPtrPtr1[4] == (char *)0x0) ||\n                       (cmpResult = strcmp(*strPtrPtr2,*strPtrPtr1), cmpResult != 0)) ||\n                      (flag = checkEquality_0010922b(param1,strPtrPtr2[1],strPtrPtr1[1]), flag == '\\0')))))) ||\n                   ((strPtrPtr2[4] != (char *)0x0 &&\n                    (flag = checkEquality_0010922b(param1,strPtrPtr2[4],strPtrPtr1[4]), flag == '\\0'))))\n                goto LAB_00109382;\n                l4 = l4 + 8;\n              }\n              if (strPtrPtr1 == (char **)0x0) goto LAB_001095f1;\n              break;\n            }\nLAB_001095f1:\n            ptr2 = ptr2 + 1;\n            lPtr1 = lPtr1 + 1;\n          }\n        }\n        else {\n          lPtr2 = arr1PtrPtr[2];\n          for (; ptr2 = (undefined8 *)*lPtr3, ptr2 != (undefined8 *)0x0;\n              lPtr3 = lPtr3 + 1) {\n            ptr1 = (undefined8 *)*lPtr2;\n            if ((((ptr1 == (undefined8 *)0x0) ||\n                 (((ptr2[1] ^ ptr1[1]) & 0xffffffffff) != 0)) ||\n                (*(int *)(ptr2 + 2) != *(int *)(ptr1 + 2))) ||\n               (flag = checkEquality_0010922b(param1,*ptr2,*ptr1), flag == '\\0'))\n            goto LAB_00109382;\n            lPtr2 = lPtr2 + 1;\n          }\n          if (*lPtr2 == 0) goto LAB_00109540;\n        }\n      }\n      else {\n        for (; strPtrPtr2 = (char **)*ptr2, strPtrPtr2 != (char **)0x0; ptr2 = ptr2 + 1) {\n          strPtrPtr1 = (char **)*arrPtr;\n          if (strPtrPtr1 == (char **)0x0) goto LAB_00109382;\n          str1 = *strPtrPtr1;\n          str2 = *strPtrPtr2;\n          if ((*str2 != *str1) ||\n             ((((ulong)strPtrPtr2[2] ^ (ulong)strPtrPtr1[2]) & 0xffffffffff) != 0)) goto LAB_00109382;\n          if (*(char *)((long)strPtrPtr2 + 0x14) == '\\0') {\n            if (strPtrPtr2[3] == strPtrPtr1[3]) goto LAB_00109480;\n            goto LAB_00109382;\n          }\n          cmpResult = strcmp(strPtrPtr2[3],strPtrPtr1[3]);\n          if (cmpResult != 0) goto LAB_00109382;\nLAB_00109480:\n          cmpResult = strcmp(str2,str1);\n          if (((cmpResult != 0) || (strPtrPtr2[1] == (char *)0x0)) || (strPtrPtr1[1] == (char *)0x0))\n          goto LAB_00109382;\n          u1 = FUN_00112b6e(strPtrPtr1[1],0);\n          u2 = FUN_00112b6e(strPtrPtr2[1],0);\n          flag = checkEquality_0010922b(param1,u2,u1);\n          if (flag == '\\0') goto LAB_00109382;\n          arrPtr = arrPtr + 1;\n        }\n        if (*arrPtr == 0) goto LAB_001093fd;\n      }\n    }\n    goto LAB_00109382;\n  case 0xb:\n    lPtr1 = (long *)arr1[2];\n    lPtr3 = (long *)arr2[2];\n    if (lPtr1 == (long *)0x0) {\n      result = lPtr3 == (long *)0x0;\n      goto LAB_001099c4;\n    }\n    if (lPtr3 == (long *)0x0) goto LAB_00109382;\n    l4 = *lPtr1;\n    l1 = *lPtr3;\n    offset = 0;\n    l2 = lPtr1[1];\n    l3 = lPtr3[1];\n    do {\n      str1 = *(char **)(l4 + offset);\n      if (str1 == (char *)0x0) {\n        result = *(long *)(l1 + offset) == 0;\n        goto LAB_001099c1;\n      }\n      str2 = *(char **)(l1 + offset);\n      if (((str2 == (char *)0x0) || (*str1 != *str2)) ||\n         (*(long *)(l2 + offset) != *(long *)(l3 + offset))) break;\n      cmpResult = strcmp(str1,str2);\n      offset = offset + 8;\n    } while (cmpResult == 0);\nLAB_00109964:\n    result = 0;\n    break;\n  case 0xc:\n  case 0xe:\n  case 0x14:\n  case 0x15:\n    result = checkEquality_0010922b(param1,arr1[2],arr2[2]);\n    goto LAB_001099c4;\n  case 0xd:\n    if ((*(char *)((undefined8 *)arr1[2] + 2) == *(char *)((undefined8 *)arr2[2] + 2)) &&\n       (flag = checkEquality_0010922b(param1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]),\n       flag != '\\0')) {\n      lPtr1 = *(long **)(arr1[2] + 8);\n      lPtr3 = *(long **)(arr2[2] + 8);\n      if ((lPtr1 == (long *)0x0) == (lPtr3 == (long *)0x0)) {\n        if (lPtr1 == (long *)0x0) goto LAB_001097af;\n        while (((*lPtr1 != 0 && (*lPtr3 != 0)) &&\n               (flag = checkEquality_0010922b(param1), flag != '\\0'))) {\n          lPtr1 = lPtr1 + 1;\n          lPtr3 = lPtr3 + 1;\n        }\nLAB_0010995d:\n        if (*lPtr1 != 0) goto LAB_00109964;\n        result = *lPtr3 == 0;\n        break;\n      }\n    }\n    goto LAB_00109382;\n  case 0xf:\n    ptr2 = (undefined8 *)arr2[2];\n    ptr1 = (undefined8 *)arr1[2];\n    result = 0;\n    if ((ptr1[1] == ptr2[1]) && (ptr1[2] == ptr2[2])) {\nLAB_00109862:\n      result = checkEquality_0010922b(param1,*ptr1,*ptr2);\n    }\n    break;\n  case 0x10:\n    ptr2 = (undefined8 *)arr2[2];\n    ptr1 = (undefined8 *)arr1[2];\n    result = 0;\n    if (((ptr1[2] == ptr2[2]) && (ptr1[3] == ptr2[3])) &&\n       (*(char *)(ptr1 + 4) == *(char *)(ptr2 + 4))) goto LAB_00109862;\n    break;\n  case 0x11:\n    ptr2 = (undefined8 *)arr2[2];\n    ptr1 = (undefined8 *)arr1[2];\n    result = 0;\n    if (*(char *)(ptr1 + 1) == *(char *)(ptr2 + 1)) goto LAB_00109862;\n    break;\n  case 0x12:\n    flag = checkEquality_0010922b(param1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]);\n    result = 0;\n    if (flag != '\\0') {\n      result = checkEquality_0010922b(param1,*(undefined8 *)(arr1[2] + 8),*(undefined8 *)(arr2[2] + 8))\n      ;\n    }\n    break;\n  case 0x13:\n    if (((*(char *)((undefined8 *)arr1[2] + 3) == *(char *)((undefined8 *)arr2[2] + 3)) &&\n        (flag = checkEquality_0010922b(param1,*(undefined8 *)arr1[2],*(undefined8 *)arr2[2]),\n        flag != '\\0')) &&\n       (flag = checkEquality_0010922b(param1,*(undefined8 *)(arr1[2] + 8),\n                              *(undefined8 *)(arr2[2] + 8)), flag != '\\0')) {\n      lPtr1 = *(long **)(arr1[2] + 0x10);\n      lPtr3 = *(long **)(arr2[2] + 0x10);\n      if ((lPtr1 == (long *)0x0) == (lPtr3 == (long *)0x0)) {\n        if (lPtr1 != (long *)0x0) {\n          while (((*lPtr1 != 0 && (*lPtr3 != 0)) &&\n                 (flag = checkEquality_0010922b(param1), flag != '\\0'))) {\n            lPtr1 = lPtr1 + 1;\n            lPtr3 = lPtr3 + 1;\n          }\n          goto LAB_0010995d;\n        }\nLAB_001097af:\n        result = 1;\n        goto LAB_001099c4;\n      }\n    }\nLAB_00109382:\n    result = 0;\n    goto LAB_001099c4;\n  case 0x16:\n  case 0x17:\n    lPtr1 = (long *)arr2[2];\n    lPtr3 = (long *)arr1[2];\n    cmpResult = strcmp(*(char **)(*lPtr3 + 8),*(char **)(*lPtr1 + 8));\n    result = 0;\n    if (cmpResult == 0) {\n      result = checkEquality_0010922b(param1,lPtr3[1],lPtr1[1]);\n    }\n    break;\n  default:\n                    \n    abort();\n  }\nLAB_001099c1:\n  result = result & 1;\nLAB_001099c4:\n  *(undefined8 **)(param1 + 0x58) = ptrPtrList;\n  return result;\ncode_r0x00109263:\n  arr1 = **(long ***)arr1[2];\n  lPtr1 = arr1;\n  goto joined_r0x00109255;\n}\n\n",
            "called": [
                "strcmp",
                "abort",
                "FUN_0010922b",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010922b",
            "calling": [
                "FUN_0010c7a0",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "check_equality_0010922b"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104640",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044c0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001052a2": {
            "renaming": {
                "FUN_001052a2": "copy_archive_001052a2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "sourcePath",
                "cVar1": "charVar",
                "iVar2": "intVar1",
                "iVar3": "intVar2",
                "ppcVar4": "doublePointerVar1",
                "lVar5": "longVar1",
                "uVar6": "unknownVar1",
                "__format": "stringFormat",
                "puVar7": "pointerVar1",
                "piVar8": "pointerVar2",
                "uVar9": "unknownVar2",
                "in_RAX": "raxValue",
                "pcVar10": "currentChar",
                "ppcVar11": "doublePointerVar2",
                "lVar12": "longVar2",
                "pvVar13": "pointerVar3",
                "pcVar14": "pointerVar4",
                "lVar15": "longVar3",
                "pcVar16": "currentChar2",
                "psVar17": "statVar",
                "bVar18": "byteVar",
                "unaff_retaddr": "returnAddress",
                "in_stack_00000008": "stackParam1",
                "in_stack_00000010": "stackParam2",
                "in_stack_00000018": "stackParam3",
                "in_stack_00000020": "stackParam4",
                "in_stack_00000028": "stackParam5",
                "in_stack_00000030": "stackParam6",
                "in_stack_000000f8": "stackParam7",
                "in_stack_00000110": "stackParam8"
            },
            "code": "\nvoid copyArchive_001052a2(undefined8 param1,undefined8 param2,char *sourcePath)\n\n{\n  char charVar;\n  int intVar1;\n  int intVar2;\n  char **doublePointerVar1;\n  long longVar1;\n  undefined8 unknownVar1;\n  char *stringFormat;\n  undefined8 *pointerVar1;\n  int *pointerVar2;\n  undefined8 unknownVar2;\n  long raxValue;\n  char *currentChar;\n  char **doublePointerVar2;\n  long longVar2;\n  void *pointerVar3;\n  code *pointerVar4;\n  long longVar3;\n  char *currentChar2;\n  stat *statVar;\n  undefined8 *unaff_R14;\n  char **unaff_R15;\n  byte byteVar;\n  undefined8 returnAddress;\n  undefined8 *stackParam1;\n  long *stackParam2;\n  char *stackParam3;\n  undefined8 *stackParam4;\n  undefined8 stackParam5;\n  undefined8 stackParam6;\n  uint stackParam7;\n  long stackParam8;\n  \n  byteVar = 0;\n  currentChar = (char *)(raxValue + 1);\n  do {\n    if (*currentChar == '/') {\n      copyArchive_001052a2();\n      return;\n    }\n    while (*currentChar == '\\0') {\n      currentChar = (char *)concat(stackParam3,&DAT_0011b47d);\n      intVar2 = stat(currentChar,(stat *)&stack0x00000050);\n      pointerVar1 = unaff_R14;\n      if (-1 < intVar2) {\n        longVar2 = FUN_0011a0e0(currentChar);\n        free(currentChar);\n        if (longVar2 == 0) {\n          pointerVar2 = __errno_location();\n          currentChar = strerror(*pointerVar2);\n          unknownVar2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(unknownVar2,currentChar);\n          goto LAB_00104e93;\n        }\n        pointerVar1 = (undefined8 *)xmalloc(0x18);\n        currentChar = *unaff_R15;\n        *pointerVar1 = unaff_R14;\n        pointerVar1[2] = 0;\n        pointerVar1[1] = longVar2;\n        currentChar = (char *)concat(longVar2,&DAT_0011b47d,currentChar);\n      }\n      intVar2 = 0;\n      if (DAT_001279eb != '\\0') {\n        statVar = (stat *)&stack0x00000050;\n        for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n          *(undefined4 *)&statVar->st_dev = 0;\n          statVar = (stat *)((long)statVar + (ulong)byteVar * -8 + 4);\n        }\n        doublePointerVar2 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          doublePointerVar2 = unaff_R15;\n        }\n        intVar2 = (**(code **)(doublePointerVar2[1] + 0x1e8))(unaff_R15,(stat *)&stack0x00000050);\n        if (intVar2 != 0) {\n          currentChar2 = *unaff_R15;\n          unknownVar2 = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(unknownVar2,currentChar2);\n        }\n      }\n      unaff_R14 = (undefined8 *)xmalloc(0x18);\n      unaff_R14[1] = currentChar;\n      *unaff_R14 = pointerVar1;\n      unaff_R14[2] = 0;\n      charVar = bfd_check_format(unaff_R15,1);\n      if (charVar == '\\0') {\n        unknownVar2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n        FUN_001126c0(0,unaff_R15,0,unknownVar2);\n        doublePointerVar2 = (char **)bfd_openw(currentChar,stackParam5);\n        if (doublePointerVar2 == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n        doublePointerVar1 = (char **)unaff_R15[0x1d];\n        if ((char **)unaff_R15[0x1d] == (char **)0x0) {\n          doublePointerVar1 = unaff_R15;\n        }\n        intVar1 = (**(code **)(doublePointerVar1[1] + 0x1e8))(unaff_R15,&stack0x000000e0);\n        longVar2 = stackParam8;\n        if (intVar1 == 0) {\n          if (stackParam8 < 0) {\n            unknownVar2 = FUN_001125fa(unaff_R15);\n            unknownVar1 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n            FUN_00119ed0(unknownVar1,unknownVar2);\n          }\n          else {\n            intVar1 = bfd_seek(unaff_R15,0,0);\n            if (intVar1 == 0) {\n              if (DAT_001279e9 != '\\0') {\n                currentChar2 = *doublePointerVar2;\n                unknownVar2 = FUN_001125fa(unaff_R15);\n                stringFormat = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                printf(stringFormat,unknownVar2,currentChar2);\n              }\n              pointerVar3 = (void *)xmalloc(0x2000);\n              for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                longVar3 = 0x2000;\n                if (longVar2 < 0x2001) {\n                  longVar3 = longVar2;\n                }\n                longVar1 = bfd_bread(pointerVar3,longVar3,unaff_R15);\n                doublePointerVar1 = unaff_R15;\n                if ((longVar3 != longVar1) ||\n                   (longVar1 = bfd_bwrite(pointerVar3,longVar3,doublePointerVar2), doublePointerVar1 = doublePointerVar2, longVar3 != longVar1\n                   )) {\n                  FUN_001126c0(0,doublePointerVar1,0,0);\n                  free(pointerVar3);\n                  goto LAB_00104f00;\n                }\n              }\n              chmod(*doublePointerVar2,stackParam7 | 0x100);\n              free(pointerVar3);\n              charVar = bfd_close_all_done(doublePointerVar2);\n              if (charVar == '\\0') {\n                FUN_001126c0(currentChar,0,0,0);\n                DAT_00127a40 = 1;\n              }\n              goto LAB_00114a86;\n            }\n            unknownVar2 = FUN_001125fa(unaff_R15);\n            FUN_0011a110(unknownVar2);\n          }\n        }\n        else {\n          FUN_001126c0(0,unaff_R15,0,0);\n        }\nLAB_00104f00:\n        charVar = bfd_close_all_done(doublePointerVar2);\n        if (charVar == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n        }\nLAB_00104ec9:\n        unlink(currentChar);\n        DAT_00127a40 = 1;\n      }\n      else {\n        if (stackParam6._7_1_ == '\\0') {\n          doublePointerVar2 = (char **)bfd_openw(currentChar,*(undefined8 *)unaff_R15[1]);\n        }\n        else {\n          doublePointerVar2 = (char **)bfd_openw(currentChar,stackParam5);\n        }\n        if (doublePointerVar2 == (char **)0x0) {\nLAB_00104e80:\n          FUN_001126c0(currentChar,0,0,0);\n          goto LAB_00104e93;\n        }\n        charVar = FUNC_00114e50(unaff_R15,doublePointerVar2,returnAddress);\n        if (charVar == '\\0') {\n          intVar1 = bfd_get_arch(unaff_R15);\n          if (intVar1 == 0) goto LAB_00104d75;\n          charVar = bfd_close_all_done(doublePointerVar2);\n          if (charVar == '\\0') {\n            FUN_001126c0(currentChar,0,0,0);\n          }\n          goto LAB_00104ec9;\n        }\n        charVar = bfd_close(doublePointerVar2);\n        if (charVar == '\\0') {\n          FUN_001126c0(currentChar,0,0,0);\n          DAT_00127a40 = 1;\n        }\nLAB_00114a86:\n        if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n          FUN_0011a350(currentChar,(stat *)&stack0x00000050);\n        }\n        longVar2 = bfd_openr(currentChar,stackParam5);\n        unaff_R14[2] = longVar2;\n        *stackParam2 = longVar2;\n        stackParam2 = (long *)(longVar2 + 0xf0);\n        doublePointerVar2 = (char **)bfd_openr_next_archived_file(stackParam4,unaff_R15);\n        bfd_close(unaff_R15);\n        unaff_R15 = doublePointerVar2;\n      }\n      if ((DAT_00127a40 != 0) || (unaff_R15 == (char **)0x0)) {\n        *stackParam2 = 0;\n        pointerVar3 = (void *)xstrdup(*stackParam1);\n        if (DAT_00127a40 == 0) {\n          pointerVar4 = bfd_close;\n        }\n        else {\n          pointerVar4 = bfd_close_all_done;\n        }\n        charVar = (*pointerVar4)(stackParam1);\n        if (charVar == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(pointerVar3,0,0,0);\n        }\n        free(pointerVar3);\n        pointerVar3 = (void *)xstrdup(*stackParam4);\n        charVar = bfd_close(stackParam4);\n        if (charVar == '\\0') {\n          DAT_00127a40 = 1;\n          FUN_001126c0(pointerVar3,0,0,0);\n        }\n        free(pointerVar3);\n        goto LAB_00114b4b;\n      }\n      currentChar = *unaff_R15;\n      sourcePath = currentChar;\n      if (*currentChar == '/') goto LAB_0010527d;\n    }\n    currentChar2 = currentChar;\n    if ((*currentChar == '.') && (currentChar2 = currentChar + 1, currentChar[1] == '.')) {\n      currentChar2 = currentChar + 2;\n      if ((currentChar[2] == '\\0') || (currentChar[2] == '/')) {\nLAB_0010527d:\n        unknownVar2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(unknownVar2,sourcePath);\nLAB_00104e93:\n        DAT_00127a40 = 1;\nLAB_00114b4b:\n        while (unaff_R14 != (undefined8 *)0x0) {\n          if (unaff_R14[2] == 0) {\n            rmdir((char *)unaff_R14[1]);\n          }\n          else {\n            bfd_close();\n            unlink((char *)unaff_R14[1]);\n          }\n          free((void *)unaff_R14[1]);\n          pointerVar1 = (undefined8 *)*unaff_R14;\n          free(unaff_R14);\n          unaff_R14 = pointerVar1;\n        }\n        rmdir(stackParam3);\n        free(stackParam3);\n        return;\n      }\n    }\n    for (; (currentChar = currentChar2, *currentChar2 != '\\0' && (*currentChar2 != '/')); currentChar2 = currentChar2 + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_001052a2"
        },
        "FUN_0010e453": {
            "renaming": {
                "FUN_0010e453": "extract_and_process_data_0010e453",
                "param_1": "dataPointer",
                "param_2": "inputString",
                "param_3": "stringArray",
                "lVar1": "pointer",
                "cVar2": "character",
                "sVar3": "stringLength",
                "__s": "outputString",
                "uVar4": "returnValue",
                "lVar5": "totalLength",
                "ppcVar6": "arrayPointer",
                "lVar7": "loopVariable"
            },
            "code": "\nundefined8 extractAndProcessData_0010e453(long dataPointer,char *inputString,char **stringArray)\n\n{\n  long pointer;\n  char character;\n  size_t stringLength;\n  undefined2 *outputString;\n  undefined8 returnValue;\n  long totalLength;\n  char **arrayPointer;\n  long loopVariable;\n  \n  if (stringArray == (char **)0x0) {\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      outputString = (undefined2 *)xmalloc(stringLength + 10);\n      sprintf((char *)outputString,\"xe%s:\",inputString);\nLAB_0010e578:\n      character = FUN_00109b52(dataPointer,outputString,0,0,4);\n      if (character != '\\0') goto LAB_0010e58b;\n    }\nLAB_0010e475:\n    returnValue = 0;\n  }\n  else {\n    totalLength = 10;\n    arrayPointer = stringArray;\n    if (inputString != (char *)0x0) {\n      stringLength = strlen(inputString);\n      totalLength = stringLength + 10;\n    }\n    for (; *arrayPointer != (char *)0x0; arrayPointer = arrayPointer + 1) {\n      stringLength = strlen(*arrayPointer);\n      totalLength = totalLength + 0x14 + stringLength;\n    }\n    outputString = (undefined2 *)xmalloc(totalLength);\n    if (inputString == (char *)0x0) {\n      *outputString = 0x65;\n      totalLength = 0;\n    }\n    else {\n      totalLength = *(long *)(dataPointer + 0x68);\n      *(long *)(dataPointer + 0x68) = totalLength + 1;\n      sprintf((char *)outputString,\"%s:T%ld=e\",inputString,totalLength);\n    }\n    loopVariable = 0;\n    while( true ) {\n      pointer = *(long *)((long)stringArray + loopVariable);\n      stringLength = strlen((char *)outputString);\n      if (pointer == 0) break;\n      loopVariable = loopVariable + 8;\n      sprintf((char *)(undefined2 *)((long)outputString + stringLength),\"%s:%ld,\");\n    }\n    *(undefined2 *)((long)outputString + stringLength) = 0x3b;\n    if (inputString == (char *)0x0) goto LAB_0010e578;\n    character = FUN_0010e2f0(dataPointer,0x80,0,0,outputString);\n    if ((character == '\\0') || (character = FUN_00109cf4(dataPointer,totalLength,4), character == '\\0'))\n    goto LAB_0010e475;\nLAB_0010e58b:\n    free(outputString);\n    returnValue = 1;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e453",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "extract_and_process_data_0010e453"
        },
        "FUN_00109d5c": {
            "renaming": {
                "FUN_00109d5c": "check_and_call_function_00109d5c",
                "param_1": "input_value",
                "lVar1": "result",
                "uVar2": "called_function_result"
            },
            "code": "\nundefined8 check_and_call_function_00109d5c(undefined8 input_value)\n\n{\n  long result;\n  undefined8 called_function_result;\n  \n  result = FUN_00109c2e();\n  if (-1 < result) {\n    called_function_result = FUN_00109cf4(input_value,result,0);\n    return called_function_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d5c",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "check_and_call_function_00109d5c"
        },
        "FUN_0010ed2c": {
            "renaming": {
                "FUN_0010ed2c": "update_parameters_0010ed2c",
                "param_1": "param_address",
                "param_2": "new_value",
                "param_3": "extra_param",
                "cVar1": "char_flag",
                "iVar2": "int_value",
                "uVar3": "concat_value",
                "in_R10": "aux_param",
                "auVar4": "return_value"
            },
            "code": "\nundefined  [16] update_parameters_0010ed2c(long param_address,ulong new_value,undefined8 extra_param)\n\n{\n  char char_flag;\n  int int_value;\n  undefined8 extraout_RDX;\n  ulong concat_value;\n  undefined8 aux_param;\n  undefined return_value [16];\n  \n  if (*(ulong *)(param_address + 0x1f0) < new_value) {\n    *(ulong *)(param_address + 0x1f0) = new_value;\n  }\n  if (*(long *)(param_address + 0x208) == -1) {\nLAB_0010ed78:\n    if (*(int *)(param_address + 0x1f8) != 0) {\n      int_value = *(int *)(param_address + 0x1f8) + -1;\n      concat_value = CONCAT71((int7)((ulong)extra_param >> 8),1);\n      *(int *)(param_address + 0x1f8) = int_value;\n      if (int_value != 0) {\n        return_value = FUN_0010e2f0(param_address,0xe0,0,new_value - *(long *)(param_address + 0x200),0,aux_param);\n        return return_value;\n      }\n      goto LAB_0010edae;\n    }\n  }\n  else {\n    char_flag = FUN_0010e2f0(param_address,0xc0,0,*(long *)(param_address + 0x208),0);\n    if (char_flag != '\\0') {\n      *(undefined8 *)(param_address + 0x208) = 0xffffffffffffffff;\n      extra_param = extraout_RDX;\n      goto LAB_0010ed78;\n    }\n  }\n  concat_value = 0;\nLAB_0010edae:\n  return_value._0_8_ = concat_value & 0xffffffff;\n  return_value._8_8_ = aux_param;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ed2c",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "update_parameters_0010ed2c"
        },
        "FUN_0011a1b0": {
            "renaming": {
                "FUN_0011a1b0": "validate_data_0011a1b0",
                "param_1": "source_data",
                "param_2": "target_data",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "source_data_length",
                "uVar2": "target_data_length",
                "iVar3": "comparison_result",
                "extraout_var": "unused_result",
                "uVar4": "final_result",
                "auVar5": "output_data"
            },
            "code": "\nundefined  [16] validate_data_0011a1b0(ulong *source_data,ulong *target_data,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  ulong source_data_length;\n  ulong target_data_length;\n  int comparison_result;\n  undefined4 unused_result;\n  ulong final_result;\n  undefined output_data [16];\n  \n  final_result = *source_data;\n  if (*target_data <= *source_data) {\n    final_result = *target_data;\n  }\n  comparison_result = memcmp((void *)(source_data[3] + 3),(void *)(target_data[3] + 3),final_result - 3);\n  final_result = CONCAT44(unused_result,comparison_result);\n  if (comparison_result == 0) {\n    source_data_length = source_data[8];\n    if (source_data_length < target_data[7]) {\n      final_result = 0xffffffff;\n    }\n    else {\n      target_data_length = target_data[8];\n      if (target_data_length < source_data[7]) {\n        final_result = 1;\n      }\n      else {\n        final_result = 0xffffffff;\n        if (target_data[7] <= source_data[7]) {\n          if (target_data_length < source_data_length) {\n            final_result = 1;\n          }\n          else {\n            final_result = 0xffffffff;\n            if (target_data_length <= source_data_length) {\n              if (source_data[2] == 0x100) {\n                final_result = (ulong)-(uint)(target_data[2] != 0x100);\n              }\n              else {\n                final_result = (ulong)(target_data[2] == 0x100);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  output_data._8_8_ = unused_param_2;\n  output_data._0_8_ = final_result;\n  return output_data;\n}\n\n",
            "called": [
                "FUN_001087da",
                "memcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a1b0",
            "calling": [
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "validate_data_0011a1b0"
        },
        "FUN_001163d0": {
            "renaming": {
                "FUN_001163d0": "merge_relocations_001163d0",
                "param_1": "reloc_upper_bound",
                "param_2": "reloc_canonicalize",
                "param_3": "num_relocations",
                "param_4": "section",
                "uVar1": "result",
                "uVar2": "var2",
                "uVar3": "var3",
                "bVar4": "boolVar",
                "puVar5": "var5",
                "iVar6": "var6",
                "uVar7": "var7",
                "lVar8": "var8",
                "__ptr": "ptr",
                "uVar9": "var9",
                "uVar10": "var10",
                "uVar11": "var11",
                "uVar12": "var12",
                "__ptr_00": "ptr2",
                "uVar13": "var13",
                "uVar14": "var14",
                "uVar15": "var15",
                "uVar16": "var16",
                "puVar17": "var17",
                "puVar18": "var18",
                "cVar19": "charVar",
                "puVar20": "var20",
                "iVar21": "var21",
                "puVar22": "var22",
                "puVar23": "var23",
                "uVar24": "var24",
                "__nmemb": "nmemb",
                "puVar25": "var25",
                "bVar26": "byteVar",
                "local_88": "localVar88",
                "uStack_80": "stackVar80",
                "local_70": "localVar70",
                "local_68": "localVar68",
                "local_60": "localArray"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001166ef) */\n/* WARNING: Removing unreachable block (ram,0x001166df) */\n/* WARNING: Removing unreachable block (ram,0x001166d7) */\n/* WARNING: Removing unreachable block (ram,0x001166ea) */\n/* WARNING: Removing unreachable block (ram,0x00116716) */\n/* WARNING: Removing unreachable block (ram,0x0010858b) */\n\n\nulong merge_relocations_001163d0(undefined8 *reloc_upper_bound,undefined8 *reloc_canonicalize,ulong num_relocations,undefined *section)\n\n{\n  ulong result;\n  undefined8 var2;\n  undefined8 var3;\n  bool boolVar;\n  ulong *var5;\n  int var6;\n  undefined8 var7;\n  long var8;\n  void *ptr;\n  ulong var9;\n  ulong var10;\n  ulong var11;\n  ulong var12;\n  undefined *ptr2;\n  ulong var13;\n  ulong var14;\n  ulong var15;\n  ulong var16;\n  ulong *var17;\n  undefined *var18;\n  char charVar;\n  undefined *var20;\n  int var21;\n  undefined *var22;\n  ulong *var23;\n  ulong var24;\n  size_t nmemb;\n  ulong *var25;\n  byte byteVar;\n  ulong localVar88;\n  ulong stackVar80;\n  ulong localVar70;\n  ulong localVar68;\n  ulong *localArray;\n  \n  byteVar = 0;\n  var8 = bfd_get_reloc_upper_bound();\n  localVar68 = num_relocations;\n  if (0 < var8) {\n    ptr = (void *)xmalloc(var8);\n    var8 = bfd_canonicalize_reloc(reloc_upper_bound,reloc_canonicalize,ptr,DAT_001278d0);\n    free(ptr);\n    if (var8 != 0) {\n      if (_DAT_001264c0 == 0) {\n        var2 = *reloc_upper_bound;\n        var3 = *reloc_canonicalize;\n        var7 = dcgettext(0,\"%s[%s]: Cannot merge - there are relocations against this section\",5);\n        FUN_00119ed0(var7,var2,var3);\n      }\n      localArray = (ulong *)0x0;\n      goto LAB_001166f8;\n    }\n  }\n  localArray = (ulong *)xcalloc(num_relocations / 0xc,0x48,num_relocations % 0xc);\n  localVar88 = 0;\n  localVar70 = 0;\n  var16 = num_relocations;\n  var15 = 0;\n  var23 = localArray;\n  var14 = 0;\n  var22 = section;\n  while (0xb < var16) {\n    var10 = (**(code **)(reloc_upper_bound[1] + 0x40))(var22);\n    *var23 = var10;\n    var10 = (**(code **)(reloc_upper_bound[1] + 0x40))(var22 + 4);\n    var23[1] = var10;\n    var11 = (**(code **)(reloc_upper_bound[1] + 0x40))(var22 + 8);\n    var10 = *var23;\n    var23[2] = var11;\n    var12 = var23[1];\n    var13 = var10 + 3 & 0xfffffffffffffffc;\n    var23[6] = var13;\n    if (var12 != (var12 + 3 & 0xfffffffffffffffc)) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < var11 - 0x100) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    result = var13 + var12 + 0xc;\n    if (var16 < result) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (var10 < 2) {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    var23[3] = (ulong)(var22 + 0xc);\n    var23[4] = (ulong)(var22 + var13 + 0xc);\n    var16 = var16 + (-0xc - (var13 + var12));\n    if (var10 != 2) {\n      if (var22[0xc] == '$') {\n        if ((var22[0xd] == '\\x01') && (var22[0xe] == '1')) {\n          var16 = FUN_00116490();\n          return var16;\n        }\n      }\n      else if ((((4 < var10) && (var22[0xc] == 'G')) && (var22[0xd] == 'A')) &&\n              ((var22[0xe] == '$' && (var22[0xf] == '\\x01')))) {\n        if (var22[0x10] == '2') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        if (var22[0x10] == '3') {\n          var16 = FUN_00116490();\n          return var16;\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    var9 = var15;\n    var24 = var14;\n    if (var12 == 0) {\n      if (var11 == 0x100) {\n        var23[7] = localVar88;\nLAB_001164af:\n        var12 = var14;\n        var24 = var14;\n      }\n      else {\n        var23[7] = localVar70;\nLAB_0011669e:\n        var9 = var15;\n        var12 = var15;\n      }\n    }\n    else {\n      if (var12 != 0x10) {\n        if (var12 < 0x11) {\n          if (var12 == 4) {\n            var11 = (**(code **)(reloc_upper_bound[1] + 0x40))();\n            var12 = 0xffffffffffffffff;\n            goto LAB_00116631;\n          }\n          if (var12 == 8) {\n            var16 = FUN_001086af();\n            return var16;\n          }\n        }\n        var8 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n        goto LAB_0010849a;\n      }\n      var11 = (**(code **)(reloc_upper_bound[1] + 0x28))(var22 + var13 + 0xc);\n      var12 = (**(code **)(reloc_upper_bound[1] + 0x28))();\n      if (var12 < var11) {\n        var11 = var12;\n      }\nLAB_00116631:\n      if (var23[2] == 0x100) {\n        if (var11 == 0) {\n          var11 = localVar88;\n        }\n        var10 = *var23;\n        var23[7] = var11;\n        var24 = var12;\n        localVar88 = var11;\n        if (var12 == 0) goto LAB_001164af;\n      }\n      else {\n        if (var11 == 0) {\n          var11 = localVar70;\n        }\n        var10 = *var23;\n        var23[7] = var11;\n        var9 = var12;\n        localVar70 = var11;\n        if (var12 == 0) goto LAB_0011669e;\n      }\n    }\n    var23[8] = var12;\n    if (*(char *)((var23[3] - 1) + var10) != '\\0') {\n      var8 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    var23 = var23 + 9;\n    var15 = var9;\n    var14 = var24;\n    var22 = var22 + result;\n  }\n  if (var16 == 0) {\n    var2 = *reloc_upper_bound;\n    var3 = *reloc_canonicalize;\n    var7 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n    FUN_00119ed0(var7,var2,var3);\n    nmemb = ((long)var23 - (long)localArray >> 3) * -0x71c71c71c71c71c7;\n    qsort(localArray,nmemb,0x48,FUN_0011a1b0);\n    for (var17 = localArray; var17 < var23; var17 = var17 + 9) {\n      var16 = var17[2];\n      if (var16 != 0) {\n        var15 = var17[7];\n        var14 = var17[8];\n        var25 = var17;\n        var21 = 0;\n        if (var15 == var14) {\n          var17[2] = 0;\n        }\n        else {\n          do {\n            do {\n              var5 = var25;\n              var25 = var5 + -9;\n              if (var25 < localArray) goto LAB_001167f5;\n              var10 = var5[-7];\n            } while (var10 == 0);\n            if ((*var25 != *var17) ||\n               (var6 = memcmp((void *)var5[-6],(void *)var17[3],*var17), var6 != 0)) break;\n            var12 = var5[-2];\n            var11 = var5[-1];\n            if (var15 == var12) {\n              if (var14 == var11) {\n                var17[2] = 0;\n                break;\n              }\nLAB_001167a6:\n              if (var14 <= var11) {\n                var17[2] = 0;\n                break;\n              }\n              if (var11 < var15) {\nLAB_0010852c:\n                if ((0xfffffffffffffff0 < var11) || (var15 <= (var11 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n              }\nLAB_001167b8:\n              if ((var16 == 0x101) == (var10 == 0x101)) {\n                if (var11 <= var14) {\n                  var11 = var14;\n                }\n                if (var12 < var15) {\n                  var15 = var12;\n                }\n                var5[-1] = var11;\n                var5[-2] = var15;\n                var17[2] = 0;\n                break;\n              }\n            }\n            else {\n              if (var12 <= var15) goto LAB_001167a6;\n              if (var11 < var15) goto LAB_0010852c;\n              if (var14 < var15) {\n                if ((0xfffffffffffffff0 < var14) || (var12 <= (var14 + 0xf & 0xfffffffffffffff0))\n                   ) goto FUN_00116852;\n                goto LAB_001167b8;\n              }\n              if (var14 != var11) goto LAB_001167b8;\n            }\nFUN_00116852:\n            boolVar = var21 < 0x11;\n            var21 = var21 + 1;\n          } while (boolVar);\n        }\n      }\nLAB_001167f5:\n    }\n    qsort(localArray,nmemb,0x48,FUN_0011a250);\n    ptr2 = (undefined *)xmalloc(num_relocations * 2);\n    stackVar80 = 0;\n    localVar70 = 0;\n    var22 = ptr2;\n    for (var17 = localArray; var17 < var23; var17 = var17 + 9) {\n      if (var17[2] != 0) {\n        var18 = var22 + 0xc;\n        if ((var17[7] == localVar70) && (var17[8] == stackVar80)) {\n          (**(code **)(reloc_upper_bound[1] + 0x50))(*var17,var22);\n          (**(code **)(reloc_upper_bound[1] + 0x50))(0,var22 + 4);\n          (**(code **)(reloc_upper_bound[1] + 0x50))(var17[2],var22 + 8);\n          var15 = var17[6];\n          var16 = *var17;\n          var22 = (undefined *)var17[3];\n          var20 = var18;\n          for (var14 = var16; var14 != 0; var14 = var14 - 1) {\n            *var20 = *var22;\n            var22 = var22 + (ulong)byteVar * -2 + 1;\n            var20 = var20 + (ulong)byteVar * -2 + 1;\n          }\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *var20 = 0;\n              var20 = var20 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          var22 = var18 + var15;\n        }\n        else {\n          (**(code **)(reloc_upper_bound[1] + 0x50))();\n          if (*(int *)(reloc_upper_bound[1] + 8) == 5) {\n            charVar = (*(char *)(reloc_upper_bound[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            charVar = '\\b';\n          }\n          (**(code **)(reloc_upper_bound[1] + 0x50))(charVar,var22 + 4);\n          (**(code **)(reloc_upper_bound[1] + 0x50))(var17[2],var22 + 8);\n          var16 = *var17;\n          var22 = (undefined *)var17[3];\n          var20 = var18;\n          for (var15 = var16; var15 != 0; var15 = var15 - 1) {\n            *var20 = *var22;\n            var22 = var22 + (ulong)byteVar * -2 + 1;\n            var20 = var20 + (ulong)byteVar * -2 + 1;\n          }\n          var15 = var17[6];\n          if (var16 < var15) {\n            for (var8 = var15 - var16; var8 != 0; var8 = var8 + -1) {\n              *var20 = 0;\n              var20 = var20 + (ulong)byteVar * -2 + 1;\n            }\n          }\n          var8 = reloc_upper_bound[1];\n          var18 = var18 + var15;\n          var22 = var18 + 8;\n          if ((*(int *)(var8 + 8) == 5) && (*(char *)(reloc_upper_bound[0x22] + 4) == '\\x02')) {\n            (**(code **)(var8 + 0x38))(var17[7],var18);\n            (**(code **)(reloc_upper_bound[1] + 0x38))(var17[8],var22);\n            var22 = var18 + 0x10;\n          }\n          else {\n            (**(code **)(var8 + 0x50))(var17[7],var18);\n            (**(code **)(reloc_upper_bound[1] + 0x50))(var17[8],var18 + 4);\n          }\n          localVar70 = var17[7];\n          stackVar80 = var17[8];\n        }\n      }\n    }\n    var15 = (long)var22 - (long)ptr2;\n    var16 = var15;\n    var22 = ptr2;\n    localVar68 = num_relocations;\n    if (var15 < num_relocations) {\n      for (; localVar68 = var15, var16 != 0; var16 = var16 - 1) {\n        *section = *var22;\n        var22 = var22 + (ulong)byteVar * -2 + 1;\n        section = section + (ulong)byteVar * -2 + 1;\n      }\n    }\n    free(ptr2);\n  }\n  else {\n    var8 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\nLAB_0010849a:\n    if (var8 != 0) {\n      bfd_set_error(0x11);\n      FUN_001126c0(0,reloc_upper_bound,reloc_canonicalize,var8);\n      DAT_00127a40 = 1;\n    }\n  }\nLAB_001166f8:\n  free(localArray);\n  return localVar68;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "FUN_00119ed0",
                "xcalloc",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001163d0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "merge_relocations_001163d0"
        },
        "FUN_00108a2a": {
            "renaming": {
                "FUN_00108a2a": "print_usage_00108a2a",
                "param_1": "output_file",
                "param_2": "exit_code",
                "uVar1": "program_name",
                "pcVar2": "message",
                "fprintf": "format_output",
                "dcgettext": "get_text_message",
                "exit": "exit_program"
            },
            "code": "\nvoid print_usage_00108a2a(FILE *output_file,int exit_code)\n\n{\n  undefined8 program_name;\n  char *message;\n  \n  program_name = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s <option(s)> in-file(s)\\n\",5);\n  fprintf(output_file,message,program_name);\n  message = (char *)dcgettext(0,\" Removes symbols and sections from files\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target=<bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target=<bfdname>     Create an output file in format <bfdname>\\n  -F --target=<bfdname>            Set both input and output format to <bfdname>\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  message = (char *)dcgettext(0,\n                             \"  -R --remove-section=<name>       Also remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -s --strip-all                   Remove all symbol and relocation information\\n  -g -S -d --strip-debug           Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n     --only-keep-debug             Strip everything but the debug information\\n  -M  --merge-notes                Remove redundant entries in note sections (default)\\n      --no-merge-notes             Do not attempt to remove redundant notes\\n  -N --strip-symbol=<name>         Do not copy symbol <name>\\n     --keep-section=<name>         Do not strip section <name>\\n  -K --keep-symbol=<name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -v --verbose                     List all object files modified\\n  -V --version                     Display this program\\'s version number\\n  -h --help                        Display this output\\n     --info                        List object formats & architectures supported\\n  -o <file>                        Place stripped output into <file>\\n\"\n                             ,5);\n  fprintf(output_file,message);\n  FUN_00104a35(DAT_00127600,output_file);\n  if (exit_code == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(output_file,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit_program(exit_code);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108a2a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108a2a"
        },
        "FUN_00108c86": {
            "renaming": {
                "FUN_00108c86": "parse_header_00108c86",
                "param_1": "header_ptr",
                "cVar1": "result",
                "iVar2": "comparison_result",
                "sVar3": "header_length",
                "puVar4": "new_header_ptr",
                "lVar5": "header_offset",
                "__s": "header_string",
                "__s1": "arch_string",
                "puVar6": "new_header_ptr_iterator",
                "uVar7": "header_type",
                "bVar8": "boolean_flag"
            },
            "code": "\nundefined8 parse_header_00108c86(long *header_ptr)\n\n{\n  char result;\n  int comparison_result;\n  size_t header_length;\n  undefined2 *new_header_ptr;\n  long header_offset;\n  char *header_string;\n  char *arch_string;\n  undefined2 *new_header_ptr_iterator;\n  undefined8 header_type;\n  byte boolean_flag;\n  \n  boolean_flag = 0;\n  header_offset = *header_ptr;\n  header_string = (char *)(header_offset + 4);\n  result = FUN_00113fb0(header_string,&DAT_0011b73b);\n  if (result == '\\0') {\n    result = FUN_00113fb0(header_string,\"bsdrv-\");\n    if (result == '\\0') {\n      result = FUN_00113fb0(header_string,\"rtdrv-\");\n      if (result == '\\0') {\n        return 0xffffffff;\n      }\n      header_string = (char *)(header_offset + 6);\n      header_type = 0xc;\n    }\n    else {\n      header_string = (char *)(header_offset + 6);\n      header_type = 0xb;\n    }\n  }\n  else {\n    header_type = 10;\n  }\n  header_length = strlen(header_string);\n  new_header_ptr = (undefined2 *)xmalloc(header_length + 8);\n  arch_string = header_string + 4;\n  new_header_ptr_iterator = new_header_ptr;\n  for (header_offset = header_length + 1; header_offset != 0; header_offset = header_offset + -1) {\n    *(char *)new_header_ptr_iterator = *header_string;\n    header_string = header_string + (ulong)boolean_flag * -2 + 1;\n    new_header_ptr_iterator = (undefined2 *)((long)new_header_ptr_iterator + (ulong)boolean_flag * -2 + 1);\n  }\n  *(undefined *)(new_header_ptr + 1) = 0x69;\n  *new_header_ptr = 0x6570;\n  comparison_result = strcmp(arch_string,\"ia32\");\n  if (comparison_result == 0) {\n    *(undefined *)((long)new_header_ptr + 7) = 0x36;\n    *(undefined2 *)((long)new_header_ptr + 5) = 0x3833;\n  }\n  else {\n    comparison_result = strcmp(arch_string,\"x86_64\");\n    if (comparison_result == 0) {\n      *(undefined *)((long)new_header_ptr + 7) = 0x2d;\n    }\n    else {\n      comparison_result = strcmp(arch_string,\"aarch64\");\n      if (comparison_result == 0) {\n        *(undefined8 *)((long)new_header_ptr + 0xb) = 0x656c7474696c2d;\n      }\n    }\n  }\n  *header_ptr = (long)new_header_ptr;\n  return header_type;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "xmalloc",
                "strcmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108c86",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_header_00108c86"
        },
        "FUN_0010911f": {
            "renaming": {
                "FUN_0010911f": "print_error_message_0010911f",
                "param_1": "errorMessage",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printErrorMessage_0010911f(undefined8 errorMessage)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"bad mangled name `%s\\'\\n\",5);\n  fprintf(_stderr,formatString,errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010911f",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "print_error_message_0010911f"
        },
        "bfd_get_stab_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_stab_name(void)\n\n{\n  bfd_get_stab_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_stab_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104110",
            "calling": [
                "FUN_00108b3e"
            ],
            "imported": false,
            "current_name": "bfd_get_stab_name"
        },
        "FUN_001053d5": {
            "renaming": {
                "FUN_001053d5": "update_return_value_001053d5",
                "unaff_R12": "ptrToMemory",
                "unaff_R14": "ptrToData",
                "bfd_close_all_done": "closeBfdAllDone"
            },
            "code": "\nundefined4 updateReturnValue_001053d5(void)\n\n{\n  long ptrToMemory;\n  undefined8 *ptrToData;\n  \n  FUN_0011a110(*ptrToData);\n  *(undefined4 *)(ptrToMemory + 8) = 1;\n  bfd_close_all_done();\n  return *(undefined4 *)(ptrToMemory + 8);\n}\n\n",
            "called": [
                "FUN_0011a110"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053d5",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "update_return_value_001053d5"
        },
        "FUN_00104bba": {
            "renaming": {
                "FUN_00104bba": "check_and_modify_flags_00104bba",
                "in_EAX": "flags",
                "uVar1": "errorMessage",
                "unaff_EBP": "registerValue",
                "unaff_R14": "baseAddress"
            },
            "code": "\nvoid check_and_modify_flags_00104bba(void)\n\n{\n  uint flags;\n  undefined8 errorMessage;\n  uint registerValue;\n  long baseAddress;\n  \n  if ((flags & 2) != 0) {\n    errorMessage = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  if ((((flags & 8) == 0) || ((registerValue & 0x10) == 0)) && ((registerValue & 0x18) != 0x18)) {\n    if ((((flags & 0x20) == 0) || ((registerValue & 0x40) == 0)) && ((registerValue & 0x60) != 0x60)) {\n      *(uint *)(baseAddress + 0x14) = flags | registerValue;\n      return;\n    }\n    errorMessage = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n    FUN_00119dd0(errorMessage);\n  }\n  errorMessage = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104bba",
            "calling": [
                "FUN_00114190"
            ],
            "imported": false,
            "current_name": "check_and_modify_flags_00104bba"
        },
        "FUN_00109a0b": {
            "renaming": {
                "FUN_00109a0b": "copy_and_null_terminate_00109a0b",
                "param_1": "source",
                "param_2": "length",
                "puVar1": "destination",
                "lVar2": "i",
                "puVar3": "dest_ptr",
                "bVar4": "offset"
            },
            "code": "\nvoid copyAndNullTerminate_00109a0b(undefined *source,int length)\n\n{\n  undefined *destination;\n  long i;\n  undefined *dest_ptr;\n  byte offset;\n  \n  offset = 0;\n  destination = (undefined *)xmalloc((long)(length + 1));\n  dest_ptr = destination;\n  for (i = (long)length; i != 0; i = i + -1) {\n    *dest_ptr = *source;\n    source = source + (ulong)offset * -2 + 1;\n    dest_ptr = dest_ptr + (ulong)offset * -2 + 1;\n  }\n  destination[length] = 0;\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a0b",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d21c",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_0011173a",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "copy_and_null_terminate_00109a0b"
        },
        "bfd_coff_get_syment": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_syment(void)\n\n{\n  bfd_coff_get_syment();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046a0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_syment"
        },
        "FUN_0010da0b": {
            "renaming": {
                "FUN_0010da0b": "allocate_and_initialize_slots_0010da0b",
                "param_1": "slotPointer",
                "param_2": "slotIndex",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "errMsg",
                "plVar2": "newSlot",
                "lVar3": "l3",
                "lVar4": "l4",
                "uVar5": "remainingSlots",
                "bVar6": "counter",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] allocateAndInitializeSlots_0010da0b(long **slotPointer,ulong slotIndex,undefined8 param3,undefined8 param4)\n\n{\n  undefined8 errMsg;\n  long *newSlot;\n  long l3;\n  long l4;\n  ulong remainingSlots;\n  byte counter;\n  undefined result [16];\n  \n  counter = 0;\n  remainingSlots = slotIndex;\n  if ((long)slotIndex < 0x3e90) {\n    for (; 0xf < (long)remainingSlots; remainingSlots = remainingSlots - 0x10) {\n      if (*slotPointer == (long *)0x0) {\n        newSlot = (long *)xmalloc(0x88);\n        *slotPointer = newSlot;\n        for (l3 = 0x22; l3 != 0; l3 = l3 + -1) {\n          *(undefined4 *)newSlot = 0;\n          newSlot = (long *)((long)newSlot + (ulong)counter * -8 + 4);\n        }\n      }\n      slotPointer = (long **)*slotPointer;\n    }\n    l3 = (slotIndex >> 4) * -0x10;\n    if ((long)slotIndex < 0) {\n      l3 = 0;\n    }\n    if (*slotPointer == (long *)0x0) {\n      newSlot = (long *)xmalloc(0x88);\n      *slotPointer = newSlot;\n      for (l4 = 0x22; l4 != 0; l4 = l4 + -1) {\n        *(undefined4 *)newSlot = 0;\n        newSlot = (long *)((long)newSlot + (ulong)counter * -8 + 4);\n      }\n    }\n    result._8_8_ = param4;\n    result._0_8_ = *slotPointer + slotIndex + l3 + 1;\n    return result;\n  }\n  errMsg = dcgettext(0,\"Excessively large slot index: %lx\",5);\n                    \n  FUN_00119dd0(errMsg,slotIndex);\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010da0b",
            "calling": [
                "FUN_0010dac0",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_slots_0010da0b"
        },
        "FUN_00112894": {
            "renaming": {
                "FUN_00112894": "initialize_array_00112894",
                "param_1": "value",
                "param_2": "byte",
                "param_3": "param2",
                "param_4": "param3",
                "puVar1": "array",
                "puVar2": "ptr",
                "lVar3": "count",
                "bVar4": "idx"
            },
            "code": "\nundefined8 *\ninitializeArray_00112894(undefined8 value,undefined byte,undefined8 param2,undefined8 param3)\n\n{\n  undefined8 *array;\n  undefined8 *ptr;\n  long count;\n  byte idx;\n  \n  idx = 0;\n  array = (undefined8 *)xmalloc(0x1b0);\n  ptr = array;\n  for (count = 0x6c; count != 0; count = count + -1) {\n    *(undefined4 *)ptr = 0;\n    ptr = (undefined8 *)((long)ptr + (ulong)idx * -8 + 4);\n  }\n  *array = value;\n  *(undefined *)(array + 1) = byte;\n  array[2] = param2;\n  array[3] = param3;\n  *(undefined4 *)(array + 0x10) = 1;\n  ptr = (undefined8 *)xmalloc(8);\n  array[0xd] = 0xffffffffffffffff;\n  array[0x11] = ptr;\n  *ptr = 0;\n  return array;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112894",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "initialize_array_00112894"
        },
        "FUN_00109b2f": {
            "renaming": {
                "FUN_00109b2f": "extract_and_free_00109b2f",
                "param_1": "resource",
                "__ptr": "linked_list",
                "puVar1": "next_element"
            },
            "code": "\nundefined8 * extract_and_free_00109b2f(long resource)\n\n{\n  undefined8 *linked_list;\n  undefined8 *next_element;\n  \n  linked_list = *(undefined8 **)(resource + 0x60);\n  if (linked_list != (undefined8 *)0x0) {\n    next_element = (undefined8 *)linked_list[1];\n    *(undefined8 *)(resource + 0x60) = *linked_list;\n    free(linked_list);\n    return next_element;\n  }\n  return linked_list;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b2f",
            "calling": [
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010a181",
                "FUN_0010a83e",
                "FUN_0010b948",
                "FUN_0010e6a8",
                "FUN_0010a424",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "extract_and_free_00109b2f"
        },
        "strdup": {
            "renaming": {},
            "code": "\n\n\nchar * strdup(char *__s)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strdup(__s);\n  return pcVar1;\n}\n\n",
            "called": [
                "strdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104880",
            "calling": [
                "FUN_00108d9a"
            ],
            "imported": false,
            "current_name": "strdup"
        },
        "FUN_00108d9a": {
            "renaming": {
                "FUN_00108d9a": "validate_symbol_00108d9a",
                "param_1": "output",
                "param_2": "symbolName1",
                "param_3": "symbolName2",
                "param_4": "returnValue",
                "ppcVar1": "symbolArray",
                "pcVar2": "symbolNameCopy",
                "lVar3": "result",
                "uVar4": "translation",
                "plVar5": "arrayEntry"
            },
            "code": "\nundefined8 validateSymbol_00108d9a(undefined8 output,char *symbolName1,char *symbolName2,undefined8 returnValue)\n\n{\n  char **symbolArray;\n  char *symbolNameCopy;\n  long result;\n  undefined8 translation;\n  long *arrayEntry;\n  \n  symbolArray = (char **)xmalloc(0x10);\n  symbolNameCopy = strdup(symbolName1);\n  *symbolArray = symbolNameCopy;\n  symbolNameCopy = strdup(symbolName2);\n  translation = DAT_001278f0;\n  symbolArray[1] = symbolNameCopy;\n  result = htab_find(translation,symbolArray);\n  if (result != 0) {\n    translation = dcgettext(0,\"%s: Multiple redefinition of symbol \\\"%s\\\"\",5);\n                    \n    FUN_00119dd0(translation,output,symbolName1);\n  }\n  result = htab_find(DAT_001278e8,symbolName2);\n  if (result != 0) {\n    translation = dcgettext(0,\"%s: Symbol \\\"%s\\\" is target of more than one redefinition\",5);\n                    \n    FUN_00119dd0(translation,output,symbolName2);\n  }\n  arrayEntry = (long *)htab_find_slot(DAT_001278f0,symbolArray,1);\n  translation = DAT_001278e8;\n  *arrayEntry = (long)symbolArray;\n  symbolNameCopy = symbolArray[1];\n  symbolArray = (char **)htab_find_slot(translation,symbolNameCopy,1);\n  *symbolArray = symbolNameCopy;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "htab_find_slot",
                "strdup",
                "FUN_00119dd0",
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108d9a",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_symbol_00108d9a"
        },
        "FUN_0010e9a0": {
            "renaming": {
                "FUN_0010e9a0": "format_and_send_data_0010e9a0",
                "param_1": "input",
                "param_2": "prefix",
                "param_3": "type",
                "param_4": "param",
                "lVar1": "counter",
                "uVar2": "result",
                "__s": "data",
                "__s_00": "formatted_data",
                "sVar3": "prefix_len",
                "sVar4": "data_len",
                "__s_01": "formatted_str",
                "pcVar5": "type_str",
                "uVar6": "flag"
            },
            "code": "\nundefined4 formatAndSendData_0010e9a0(long input,char *prefix,undefined4 type,undefined8 param)\n\n{\n  long counter;\n  undefined4 result;\n  byte *data;\n  byte *formatted_data;\n  size_t prefix_len;\n  size_t data_len;\n  char *formatted_str;\n  char *type_str;\n  undefined8 flag;\n  \n  data = (byte *)FUN_00109b2f();\n  switch(type) {\n  case 1:\n    type_str = \"G\";\n    flag = 0x20;\n    break;\n  case 2:\n    type_str = \"S\";\n    flag = 0x26;\n    break;\n  case 3:\n    type_str = \"V\";\n    flag = 0x26;\n    break;\n  case 4:\n    type_str = \"\";\n    flag = 0x80;\n    if (((&_sch_istable)[(ulong)*data * 2] & 4) == 0) {\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      prefix_len = strlen((char *)data);\n      formatted_data = (byte *)xmalloc(prefix_len + 0x14);\n      sprintf((char *)formatted_data,\"%ld=%s\",counter,data);\n      free(data);\n      data = formatted_data;\n    }\n    break;\n  case 5:\n    type_str = \"r\";\n    flag = 0x40;\n    break;\n  default:\n                    \n    abort();\n  }\n  prefix_len = strlen(prefix);\n  data_len = strlen((char *)data);\n  formatted_str = (char *)xmalloc(prefix_len + 3 + data_len);\n  sprintf(formatted_str,\"%s:%s%s\",prefix,type_str,data);\n  free(data);\n  result = FUN_0010e2f0(input,flag,0,param,formatted_str);\n  if ((char)result != '\\0') {\n    free(formatted_str);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e9a0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e9a0"
        },
        "FUN_0010827b": {
            "renaming": {
                "FUN_0010827b": "handle_section_match_conflict_error_0010827b",
                "unaff_RBX": "sectionList",
                "uVar1": "section",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid handleSectionMatchConflictError_0010827b(void)\n\n{\n  undefined8 section;\n  undefined8 errorMessage;\n  undefined8 *sectionList;\n  \n  section = *sectionList;\n  errorMessage = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n  FUN_00119dd0(errorMessage,section);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010827b",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "handle_section_match_conflict_error_0010827b"
        },
        "bfd_set_symtab": {
            "renaming": {},
            "code": "\nvoid bfd_set_symtab(void)\n\n{\n  bfd_set_symtab();\n  return;\n}\n\n",
            "called": [
                "bfd_set_symtab"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104460",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_symtab"
        },
        "FUN_00104920": {
            "renaming": {
                "FUN_00104920": "check_number_validity_00104920",
                "uVar1": "errorMessage",
                "dcgettext": "getErrorMessage"
            },
            "code": "\nvoid checkNumberValidity_00104920(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104920",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "check_number_validity_00104920"
        },
        "FUN_00113f20": {
            "renaming": {
                "FUN_00113f20": "initialize_hash_table_00113f20",
                "htab_create_alloc": "createHashTableWithAlloc",
                "htab_hash_string": "hashFunctionForStrings",
                "htab_eq_string": "equalityFunctionForStrings",
                "xcalloc": "allocateMemory",
                "free": "deallocateMemory"
            },
            "code": "\nvoid initializeHashTable_00113f20(void)\n\n{\n  htab_create_alloc(0x10,htab_hash_string,equalityFunctionForStrings,0,xcalloc,free);\n  return;\n}\n\n",
            "called": [
                "htab_eq_string",
                "htab_create_alloc",
                "htab_hash_string",
                "xcalloc",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_hash_table_00113f20"
        },
        "htab_find_slot": {
            "renaming": {},
            "code": "\nvoid htab_find_slot(void)\n\n{\n  htab_find_slot();\n  return;\n}\n\n",
            "called": [
                "htab_find_slot"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044a0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108d9a",
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "htab_find_slot"
        },
        "mkdtemp": {
            "renaming": {},
            "code": "\n\n\nchar * mkdtemp(char *__template)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = mkdtemp(__template);\n  return pcVar1;\n}\n\n",
            "called": [
                "mkdtemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "mkdtemp"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104770",
            "calling": [
                "FUN_00119e70",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104150",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041c0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00108179": {
            "renaming": {
                "FUN_00108179": "set_alignment_00108179",
                "unaff_RBX": "baseAddress",
                "unaff_RBP": "framePointer",
                "unaff_R12": "functionPointer",
                "unaff_R14B": "checkFlag",
                "unaff_R15": "sourceAddress",
                "lVar1": "localVar1",
                "lVar2": "localVar2",
                "cVar3": "checkResult",
                "lVar4": "errorString",
                "lVar5": "result",
                "dcgettext": "getLocalizedString"
            },
            "code": "\nvoid setAlignment_00108179(void)\n\n{\n  long localVar1;\n  long localVar2;\n  char checkResult;\n  long errorString;\n  long result;\n  long baseAddress;\n  long framePointer;\n  long functionPointer;\n  char checkFlag;\n  long sourceAddress;\n  \n  errorString = dcgettext(0,\"failed to set alignment\",5);\n  *(undefined4 *)(sourceAddress + 0xb4) = *(undefined4 *)(baseAddress + 0xb4);\n  *(byte *)(sourceAddress + 0x28) =\n       *(byte *)(sourceAddress + 0x28) & 0xcf | *(byte *)(baseAddress + 0x28) & 0x30;\n  *(long *)(baseAddress + 0x60) = sourceAddress;\n  *(undefined8 *)(baseAddress + 0x58) = 0;\n  if ((*(byte *)(baseAddress + 0x27) & 2) != 0) {\n    localVar1 = *(long *)(baseAddress + 0xd0);\n    result = FUN_00115d00(localVar1,*(undefined8 *)(baseAddress + 0xe0));\n    if ((result != 0) &&\n       (localVar2 = *(long *)(functionPointer + 8), *(uint *)(result + 0x18) = *(uint *)(result + 0x18) | 0x20,\n       *(int *)(localVar2 + 8) == 5)) {\n      *(long *)(localVar1 + 0xb0) = result;\n      checkResult = (**(code **)(*(long *)(framePointer + 8) + 0x158))();\n      if (checkResult == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  checkResult = (**(code **)(*(long *)(framePointer + 8) + 0x158))();\n  if (checkResult == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (checkFlag != '\\0') {\n    *(undefined4 *)(*(long *)(sourceAddress + 0xd0) + 4) = 8;\n  }\n  if (errorString != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00115d00",
                "FUN_0010808f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108179",
            "calling": [
                "FUN_00108072"
            ],
            "imported": false,
            "current_name": "set_alignment_00108179"
        },
        "FUN_00109022": {
            "renaming": {
                "FUN_00109022": "validate_and_get_type_file_00109022",
                "param_1": "file_index",
                "param_2": "type_indexes",
                "param_3": "arg3",
                "param_4": "arg4",
                "uVar1": "file_count",
                "pcVar2": "error_message",
                "plVar3": "result",
                "lVar4": "loop_counter",
                "uVar5": "type_index",
                "pplVar6": "type_files",
                "bVar7": "temp_byte",
                "auVar8": "return_value"
            },
            "code": "\n\n\nundefined  [16] validate_and_get_type_file_00109022(long file_index,uint *type_indexes,undefined8 arg3,undefined8 arg4)\n\n{\n  uint file_count;\n  char *error_message;\n  long *result;\n  long loop_counter;\n  uint type_index;\n  long **type_files;\n  byte temp_byte;\n  undefined return_value [16];\n  \n  temp_byte = 0;\n  type_index = *type_indexes;\n  file_count = type_indexes[1];\n  if (((int)type_index < 0) || (*(uint *)(file_index + 0x80) <= type_index)) {\n    error_message = (char *)dcgettext(0,\"Type file number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)type_index);\n  }\n  else {\n    if (-1 < (int)file_count) {\n      type_files = (long **)(*(long *)(file_index + 0x88) + (long)(int)type_index * 8);\n      for (type_index = file_count; 0xf < (int)type_index; type_index = type_index - 0x10) {\n        if (*type_files == (long *)0x0) {\n          result = (long *)xmalloc(0x88);\n          *type_files = result;\n          for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n            *(undefined4 *)result = 0;\n            result = (long *)((long)result + (ulong)temp_byte * -8 + 4);\n          }\n        }\n        type_files = (long **)*type_files;\n      }\n      if (*type_files == (long *)0x0) {\n        result = (long *)xmalloc(0x88);\n        *type_files = result;\n        for (loop_counter = 0x22; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *(undefined4 *)result = 0;\n          result = (long *)((long)result + (ulong)temp_byte * -8 + 4);\n        }\n      }\n      result = *type_files + (long)(int)((file_count >> 4) * -0x10 + file_count) + 1;\n      goto LAB_00109117;\n    }\n    error_message = (char *)dcgettext(0,\"Type index number %d out of range\\n\",5);\n    fprintf(_stderr,error_message,(ulong)file_count);\n  }\n  result = (long *)0x0;\nLAB_00109117:\n  return_value._8_8_ = arg4;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109022",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_and_get_type_file_00109022"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104910",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_0010c05d": {
            "renaming": {
                "FUN_0010c05d": "debug_record_variable_0010c05d",
                "param_1": "file_ptr",
                "param_2": "variable_name",
                "param_3": "variable_type",
                "param_4": "scope_level",
                "auVar1": "result",
                "uVar2": "success",
                "piVar3": "new_variable",
                "cVar4": "is_valid",
                "lVar5": "loop_counter",
                "lVar6": "current_file",
                "piVar7": "current_var",
                "bVar8": "byte_value",
                "auVar9": "return_value"
            },
            "code": "\n\n\nundefined  [16]\ndebug_record_variable_0010c05d(long file_ptr,long variable_name,ulong variable_type,int scope_level,undefined8 param_5,\n            undefined8 param_6)\n\n{\n  undefined result [16];\n  undefined8 success;\n  int *new_variable;\n  char is_valid;\n  long loop_counter;\n  long current_file;\n  int *current_var;\n  byte byte_value;\n  undefined return_value [16];\n  \n  byte_value = 0;\n  if (variable_name == 0) {\n    result._8_8_ = 0;\n    result._0_8_ = variable_type;\n    return result << 0x40;\n  }\n  if (variable_type != 0) {\n    if ((*(long *)(file_ptr + 8) == 0) || (current_file = *(long *)(file_ptr + 0x10), current_file == 0)) {\n      success = dcgettext(0,\"debug_record_variable_0010c05d: no current file\",5);\n      fprintf(_stderr,\"%s\\n\",success);\n    }\n    else {\n      if (scope_level - 1U < 2) {\n        current_file = current_file + 0x10;\n        is_valid = (scope_level == 1) + '\\x01';\n      }\n      else if (*(long *)(file_ptr + 0x20) == 0) {\n        current_file = current_file + 0x10;\n        is_valid = '\\0';\n      }\n      else {\n        current_file = *(long *)(file_ptr + 0x20) + 0x28;\n        is_valid = '\\0';\n      }\n      current_file = FUN_00112925(current_file,variable_name,2,is_valid);\n      if (current_file != 0) {\n        new_variable = (int *)xmalloc(0x18);\n        current_var = new_variable + 1;\n        for (loop_counter = 5; loop_counter != 0; loop_counter = loop_counter + -1) {\n          *current_var = 0;\n          current_var = current_var + (ulong)byte_value * -2 + 1;\n        }\n        *new_variable = scope_level;\n        success = 1;\n        *(ulong *)(new_variable + 2) = variable_type;\n        *(undefined8 *)(new_variable + 4) = param_5;\n        *(int **)(current_file + 0x20) = new_variable;\n        goto LAB_0010c12e;\n      }\n    }\n  }\n  success = 0;\nLAB_0010c12e:\n  return_value._8_8_ = param_6;\n  return_value._0_8_ = success;\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112925"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c05d",
            "calling": [
                "FUN_0010c139",
                "FUN_0010c1c6",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "debug_record_variable_0010c05d"
        },
        "FUN_00109d97": {
            "renaming": {
                "FUN_00109d97": "format_and_print_00109d97",
                "param_1": "ptrToStruct",
                "lVar1": "localVariable1",
                "local_40": "buffer"
            },
            "code": "\nvoid formatAndPrint_00109d97(long ptrToStruct)\n\n{\n  long localVariable1;\n  char buffer [40];\n  \n  if (*(long *)(ptrToStruct + 0x70) != 0) {\n    FUN_00109cf4(ptrToStruct,*(long *)(ptrToStruct + 0x70),0);\n    return;\n  }\n  localVariable1 = *(long *)(ptrToStruct + 0x68);\n  *(long *)(ptrToStruct + 0x68) = localVariable1 + 1;\n  sprintf(buffer,\"%ld=%ld\",localVariable1,localVariable1);\n  FUN_00109b52(ptrToStruct,buffer,localVariable1,0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109d97",
            "calling": [
                "FUN_0010a424",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "format_and_print_00109d97"
        },
        "FUN_001086af": {
            "renaming": {
                "FUN_001086af": "extract_build_attributes_001086af",
                "param_7": "inputSize",
                "uVar1": "outputSize",
                "uVar2": "versionNoteSize",
                "uVar3": "noteType",
                "bVar4": "isNoteDifferentVersion",
                "puVar5": "attributeNote",
                "iVar6": "comparisonResult",
                "lVar7": "errorString",
                "uVar8": "warningMessage",
                "uVar9": "nameSize",
                "uVar10": "descriptionSize",
                "uVar11": "currentNoteSize",
                "__ptr": "outputBuffer",
                "in_RCX": "inputBuffer",
                "uVar12": "tempSize",
                "uVar13": "currentDescriptionSize",
                "uVar14": "attributeNoteAddress",
                "unaff_RBX": "bytesRemaining",
                "unaff_RBP": "temp1",
                "puVar15": "attributeNotes",
                "puVar16": "currentOutput",
                "cVar17": "version",
                "puVar18": "temp2",
                "puVar19": "temp3",
                "unaff_R12": "currentAttributeNote",
                "unaff_R13": "temp4",
                "uVar20": "temp5",
                "__nmemb": "numberOfAttributeNotes",
                "unaff_R14": "parameters",
                "puVar21": "temp6",
                "bVar22": "temp7",
                "iVar23": "temp8",
                "unaff_retaddr": "returnAddress",
                "param_9": "version",
                "param_10": "outputBufferSize",
                "param_11": "attributeNoteArray",
                "in_stack_00000030": "temp9",
                "in_stack_00000038": "temp10",
                "param_13": "temp11",
                "param_14": "temp12"
            },
            "code": "\nulong extractBuildAttributes_001086af(void)\n\n{\n  ulong outputSize;\n  undefined8 versionNoteSize;\n  undefined8 noteType;\n  bool isNoteDifferentVersion;\n  ulong *attributeNote;\n  int comparisonResult;\n  long errorString;\n  undefined8 warningMessage;\n  ulong nameSize;\n  ulong descriptionSize;\n  ulong currentNoteSize;\n  undefined *outputBuffer;\n  ulong inputBuffer;\n  ulong tempSize;\n  ulong currentDescriptionSize;\n  ulong attributeNoteAddress;\n  ulong bytesRemaining;\n  ulong temp1;\n  ulong *attributeNotes;\n  undefined *currentOutput;\n  char version;\n  undefined *temp2;\n  undefined *temp3;\n  ulong *currentAttributeNote;\n  ulong temp4;\n  ulong temp5;\n  size_t numberOfAttributeNotes;\n  undefined8 *parameters;\n  ulong *temp6;\n  byte temp7;\n  int temp8;\n  ulong returnAddress;\n  ulong inputSize;\n  uint param_8;\n  ulong version;\n  ulong outputBufferSize;\n  ulong *attributeNoteArray;\n  undefined *temp9;\n  uint temp10;\n  uint temp11;\n  undefined8 *temp12;\n  \n  temp7 = 0;\n  inputSize = inputBuffer;\n  nameSize = (**(code **)(parameters[1] + 0x40))();\n  descriptionSize = (**(code **)(parameters[1] + 0x40))(currentAttributeNote[4] + 4);\nLAB_0011662a:\n  currentDescriptionSize = temp1;\n  temp5 = temp4;\n  if (descriptionSize < nameSize) {\n    nameSize = descriptionSize;\n  }\n  do {\n    currentNoteSize = inputSize;\n    tempSize = inputSize;\n    attributeNotes = currentAttributeNote;\n    if (currentAttributeNote[2] == 0x100) {\n      if (nameSize == 0) {\n        nameSize = returnAddress;\n      }\n      attributeNoteAddress = *currentAttributeNote;\n      currentAttributeNote[7] = nameSize;\n      temp1 = currentDescriptionSize;\n      temp4 = descriptionSize;\n      returnAddress = nameSize;\n      if (descriptionSize == 0) goto LAB_001164af;\n    }\n    else {\n      if (nameSize == 0) {\n        nameSize = version;\n      }\n      attributeNoteAddress = *currentAttributeNote;\n      currentAttributeNote[7] = nameSize;\n      temp1 = descriptionSize;\n      temp4 = temp5;\n      version = nameSize;\n      if (descriptionSize == 0) goto LAB_0011669e;\n    }\nLAB_001164bb:\n    attributeNotes[8] = descriptionSize;\n    if (*(char *)((attributeNotes[3] - 1) + attributeNoteAddress) != '\\0') {\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    currentAttributeNote = attributeNotes + 9;\n    if (bytesRemaining < 0xc) {\n      if (bytesRemaining != 0) {\n        errorString = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n        goto LAB_0010849a;\n      }\n      if ((temp10 | temp11 | param_8) != 0) {\n        if (((temp11 | param_8) == 0) || (temp10 == 0)) {\n          if (temp11 == 0) {\n            if (param_8 != 0) goto LAB_0011671b;\n            goto LAB_001166f8;\n          }\n          if (param_8 == 0) goto LAB_001166f8;\n        }\n        errorString = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n        goto LAB_0010849a;\n      }\n      versionNoteSize = *parameters;\n      noteType = *temp12;\n      warningMessage = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(warningMessage,versionNoteSize,noteType);\nLAB_0011671b:\n      numberOfAttributeNotes = ((long)currentAttributeNote - (long)attributeNoteArray >> 3) * -0x71c71c71c71c71c7;\n      qsort(attributeNoteArray,numberOfAttributeNotes,0x48,FUN_0011a1b0);\n      attributeNotes = attributeNoteArray;\n      goto LAB_001167f9;\n    }\n    descriptionSize = (**(code **)(parameters[1] + 0x40))(tempSize);\n    *currentAttributeNote = descriptionSize;\n    descriptionSize = (**(code **)(parameters[1] + 0x40))(tempSize + 4);\n    attributeNotes[10] = descriptionSize;\n    nameSize = (**(code **)(parameters[1] + 0x40))(tempSize + 8);\n    attributeNoteAddress = *currentAttributeNote;\n    attributeNotes[0xb] = nameSize;\n    descriptionSize = attributeNotes[10];\n    currentDescriptionSize = attributeNoteAddress + 3 & 0xfffffffffffffffc;\n    attributeNotes[0xf] = currentDescriptionSize;\n    if (descriptionSize != (descriptionSize + 3 & 0xfffffffffffffffc)) {\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5);\n      goto LAB_0010849a;\n    }\n    if (1 < nameSize - 0x100) {\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n      goto LAB_0010849a;\n    }\n    currentNoteSize = currentDescriptionSize + descriptionSize + 0xc;\n    if (bytesRemaining < currentNoteSize) {\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n      goto LAB_0010849a;\n    }\n    if (attributeNoteAddress < 2) {\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n      goto LAB_0010849a;\n    }\n    attributeNotes[0xc] = tempSize + 0xc;\n    outputSize = tempSize + 0xc + currentDescriptionSize;\n    attributeNotes[0xd] = outputSize;\n    bytesRemaining = bytesRemaining + (-0xc - (currentDescriptionSize + descriptionSize));\n    currentNoteSize = tempSize + currentNoteSize;\n    if (attributeNoteAddress != 2) {\n      if (*(char *)(tempSize + 0xc) == '$') {\n        if ((*(char *)(tempSize + 0xd) == '\\x01') && (*(char *)(tempSize + 0xe) == '1')) {\n          descriptionSize = FUN_00116490();\n          return descriptionSize;\n        }\n      }\n      else if ((((4 < attributeNoteAddress) && (*(char *)(tempSize + 0xc) == 'G')) &&\n               (*(char *)(tempSize + 0xd) == 'A')) &&\n              ((*(char *)(tempSize + 0xe) == '$' && (*(char *)(tempSize + 0xf) == '\\x01')))) {\n        if (*(char *)(tempSize + 0x10) == '2') {\n          descriptionSize = FUN_00116490();\n          return descriptionSize;\n        }\n        if (*(char *)(tempSize + 0x10) == '3') {\n          descriptionSize = FUN_00116490();\n          return descriptionSize;\n        }\n        errorString = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n        goto LAB_0010849a;\n      }\n    }\n    currentDescriptionSize = temp1;\n    temp5 = temp4;\n    if (descriptionSize == 0) {\n      if (nameSize == 0x100) {\n        attributeNotes[0x10] = returnAddress;\nLAB_001164af:\n        tempSize = currentNoteSize;\n        descriptionSize = temp5;\n        attributeNotes = currentAttributeNote;\n        temp4 = temp5;\n      }\n      else {\n        attributeNotes[0x10] = version;\nLAB_0011669e:\n        temp1 = currentDescriptionSize;\n        tempSize = currentNoteSize;\n        descriptionSize = currentDescriptionSize;\n        attributeNotes = currentAttributeNote;\n        temp4 = temp5;\n      }\n      goto LAB_001164bb;\n    }\n    if (descriptionSize == 0x10) break;\n    if (0x10 < descriptionSize) {\nLAB_00116679:\n      errorString = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\nLAB_0010849a:\n      if (errorString != 0) {\n        bfd_set_error(0x11);\n        FUN_001126c0(0,parameters,temp12,errorString);\n        DAT_00127a40 = 1;\n      }\n      goto LAB_001166f8;\n    }\n    if (descriptionSize != 4) {\n      if (descriptionSize == 8) {\n        descriptionSize = extractBuildAttributes_001086af();\n        return descriptionSize;\n      }\n      goto LAB_00116679;\n    }\n    inputSize = currentNoteSize;\n    nameSize = (**(code **)(parameters[1] + 0x40))();\n    descriptionSize = 0xffffffffffffffff;\n  } while( true );\n  inputSize = currentNoteSize;\n  nameSize = (**(code **)(parameters[1] + 0x28))(outputSize);\n  descriptionSize = (**(code **)(parameters[1] + 0x28))();\n  goto LAB_0011662a;\nLAB_001167f9:\n  if (currentAttributeNote <= attributeNotes) {\n    qsort(attributeNoteArray,numberOfAttributeNotes,0x48,FUN_0011a250);\n    outputBuffer = (undefined *)xmalloc(outputBufferSize * 2);\n    inputSize = 0;\n    version = 0;\n    temp3 = outputBuffer;\n    for (attributeNotes = attributeNoteArray; attributeNotes < currentAttributeNote; attributeNotes = attributeNotes + 9) {\n      if (attributeNotes[2] != 0) {\n        temp2 = temp3 + 4;\n        currentOutput = temp3 + 0xc;\n        if ((attributeNotes[7] == version) && (attributeNotes[8] == inputSize)) {\n          (**(code **)(parameters[1] + 0x50))(*attributeNotes,temp3);\n          (**(code **)(parameters[1] + 0x50))(0,temp2);\n          (**(code **)(parameters[1] + 0x50))(attributeNotes[2],temp3 + 8);\n          nameSize = attributeNotes[6];\n          descriptionSize = *attributeNotes;\n          temp3 = (undefined *)attributeNotes[3];\n          temp2 = currentOutput;\n          for (currentDescriptionSize = descriptionSize; currentDescriptionSize != 0; currentDescriptionSize = currentDescriptionSize - 1) {\n            *temp2 = *temp3;\n            temp3 = temp3 + (ulong)temp7 * -2 + 1;\n            temp2 = temp2 + (ulong)temp7 * -2 + 1;\n          }\n          if (descriptionSize < nameSize) {\n            for (errorString = nameSize - descriptionSize; errorString != 0; errorString = errorString + -1) {\n              *temp2 = 0;\n              temp2 = temp2 + (ulong)temp7 * -2 + 1;\n            }\n          }\n          temp3 = currentOutput + nameSize;\n        }\n        else {\n          (**(code **)(parameters[1] + 0x50))();\n          if (*(int *)(parameters[1] + 8) == 5) {\n            version = (*(char *)(parameters[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n          }\n          else {\n            version = '\\b';\n          }\n          (**(code **)(parameters[1] + 0x50))(version,temp2);\n          (**(code **)(parameters[1] + 0x50))(attributeNotes[2],temp3 + 8);\n          descriptionSize = *attributeNotes;\n          temp3 = (undefined *)attributeNotes[3];\n          temp2 = currentOutput;\n          for (nameSize = descriptionSize; nameSize != 0; nameSize = nameSize - 1) {\n            *temp2 = *temp3;\n            temp3 = temp3 + (ulong)temp7 * -2 + 1;\n            temp2 = temp2 + (ulong)temp7 * -2 + 1;\n          }\n          nameSize = attributeNotes[6];\n          if (descriptionSize < nameSize) {\n            for (errorString = nameSize - descriptionSize; errorString != 0; errorString = errorString + -1) {\n              *temp2 = 0;\n              temp2 = temp2 + (ulong)temp7 * -2 + 1;\n            }\n          }\n          errorString = parameters[1];\n          currentOutput = currentOutput + nameSize;\n          temp3 = currentOutput + 8;\n          if ((*(int *)(errorString + 8) == 5) && (*(char *)(parameters[0x22] + 4) == '\\x02')) {\n            (**(code **)(errorString + 0x38))(attributeNotes[7],currentOutput);\n            (**(code **)(parameters[1] + 0x38))(attributeNotes[8],temp3);\n            temp3 = currentOutput + 0x10;\n          }\n          else {\n            (**(code **)(errorString + 0x50))(attributeNotes[7],currentOutput);\n            (**(code **)(parameters[1] + 0x50))(attributeNotes[8],currentOutput + 4);\n          }\n          version = attributeNotes[7];\n          inputSize = attributeNotes[8];\n        }\n      }\n    }\n    nameSize = (long)temp3 - (long)outputBuffer;\n    descriptionSize = nameSize;\n    temp3 = outputBuffer;\n    if (nameSize < outputBufferSize) {\n      for (; outputBufferSize = nameSize, descriptionSize != 0; descriptionSize = descriptionSize - 1) {\n        *temp9 = *temp3;\n        temp3 = temp3 + (ulong)temp7 * -2 + 1;\n        temp9 = temp9 + (ulong)temp7 * -2 + 1;\n      }\n    }\n    free(outputBuffer);\nLAB_001166f8:\n    free(attributeNoteArray);\n    return outputBufferSize;\n  }\n  if (attributeNotes[2] != 0) {\n    descriptionSize = attributeNotes[7];\n    nameSize = attributeNotes[8];\n    currentDescriptionSize = attributeNotes[2];\n    temp6 = attributeNotes;\n    temp8 = 0;\n    if (descriptionSize == nameSize) {\n      attributeNotes[2] = 0;\n    }\n    else {\n      do {\n        do {\n          attributeNote = temp6;\n          temp6 = attributeNote + -9;\n          if (temp6 < attributeNoteArray) goto LAB_001167f5;\n          temp5 = attributeNote[-7];\n        } while (temp5 == 0);\n        inputSize = currentDescriptionSize;\n        if ((*temp6 != *attributeNotes) ||\n           (comparisonResult = memcmp((void *)attributeNote[-6],(void *)attributeNotes[3],*attributeNotes), comparisonResult != 0)) break;\n        currentDescriptionSize = attributeNote[-2];\n        currentNoteSize = attributeNote[-1];\n        if (descriptionSize == currentDescriptionSize) {\n          if (nameSize == currentNoteSize) {\n            attributeNotes[2] = 0;\n            break;\n          }\nLAB_001167a6:\n          if (nameSize <= currentNoteSize) {\n            attributeNotes[2] = 0;\n            break;\n          }\n          if (currentNoteSize < descriptionSize) {\nLAB_0010852c:\n            if ((0xfffffffffffffff0 < currentNoteSize) || (descriptionSize <= (currentNoteSize + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n          }\nLAB_001167b8:\n          if ((inputSize == 0x101) == (temp5 == 0x101)) {\n            if (currentNoteSize <= nameSize) {\n              currentNoteSize = nameSize;\n            }\n            if (currentDescriptionSize < descriptionSize) {\n              descriptionSize = currentDescriptionSize;\n            }\n            attributeNote[-1] = currentNoteSize;\n            attributeNote[-2] = descriptionSize;\n            attributeNotes[2] = 0;\n            break;\n          }\n        }\n        else {\n          if (currentDescriptionSize <= descriptionSize) goto LAB_001167a6;\n          if (currentNoteSize < descriptionSize) goto LAB_0010852c;\n          if (nameSize < descriptionSize) {\n            if ((0xfffffffffffffff0 < nameSize) || (currentDescriptionSize <= (nameSize + 0xf & 0xfffffffffffffff0)))\n            goto FUN_00116852;\n            goto LAB_001167b8;\n          }\n          if (nameSize != currentNoteSize) goto LAB_001167b8;\n        }\nFUN_00116852:\n        isNoteDifferentVersion = temp8 < 0x11;\n        currentDescriptionSize = inputSize;\n        temp8 = temp8 + 1;\n      } while (isNoteDifferentVersion);\n    }\n  }\nLAB_001167f5:\n  attributeNotes = attributeNotes + 9;\n  goto LAB_001167f9;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_error",
                "FUN_00119ed0",
                "FUN_0011a1b0",
                "FUN_0010847a",
                "FUN_00116490",
                "qsort",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001086af",
            "calling": [
                "FUN_00116490"
            ],
            "imported": false,
            "current_name": "extract_build_attributes_001086af"
        },
        "bfd_octets_per_byte": {
            "renaming": {},
            "code": "\nvoid bfd_octets_per_byte(void)\n\n{\n  bfd_octets_per_byte();\n  return;\n}\n\n",
            "called": [
                "bfd_octets_per_byte"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104520",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_octets_per_byte"
        },
        "FUN_0010add5": {
            "renaming": {
                "FUN_0010add5": "execute_top_level_function_0010add5"
            },
            "code": "\nvoid executeTopLevelFunction_0010add5(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010add5",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_top_level_function_0010add5"
        },
        "FUN_00113e17": {
            "renaming": {
                "FUN_00113e17": "initialize_system_00113e17"
            },
            "code": "\nvoid initializeSystem_00113e17(void)\n\n{\n  FUN_00112904(2,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e17",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_system_00113e17"
        },
        "FUN_00109b52": {
            "renaming": {
                "FUN_00109b52": "initialize_data_00109b52",
                "param_1": "dataStructureAddress",
                "param_2": "sourceString",
                "param_3": "extraData",
                "param_4": "flag",
                "param_5": "status",
                "uVar1": "tempVar1",
                "puVar2": "dataPointer",
                "uVar3": "tempVar2"
            },
            "code": "\nundefined initializeData_00109b52(long dataStructureAddress,undefined8 sourceString,undefined8 extraData,undefined flag,\n                      undefined4 status)\n\n{\n  undefined8 tempVar1;\n  undefined8 *dataPointer;\n  undefined8 tempVar2;\n  \n  dataPointer = (undefined8 *)xmalloc(0x40);\n  tempVar2 = xstrdup(sourceString);\n  dataPointer[2] = extraData;\n  *(undefined (*) [16])(dataPointer + 4) = ZEXT816(0);\n  *(undefined (*) [16])(dataPointer + 6) = ZEXT816(0);\n  tempVar1 = *(undefined8 *)(dataStructureAddress + 0x60);\n  *(undefined *)((long)dataPointer + 0x1c) = flag;\n  *(undefined4 *)(dataPointer + 3) = status;\n  *(undefined8 **)(dataStructureAddress + 0x60) = dataPointer;\n  *dataPointer = tempVar1;\n  dataPointer[1] = tempVar2;\n  return 1;\n}\n\n",
            "called": [
                "xmalloc",
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109b52",
            "calling": [
                "FUN_0010e453",
                "FUN_0010a69a",
                "FUN_00109ed3",
                "FUN_00109e76",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_00109cf4",
                "FUN_0010a424",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_0010a0e9",
                "FUN_0010a2b9",
                "FUN_0010a377",
                "FUN_0010a77a",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "initialize_data_00109b52"
        },
        "FUN_00109a32": {
            "renaming": {
                "FUN_00109a32": "convert_and_check_string_to_unsigned_long_00109a32",
                "param_1": "stringPointer",
                "param_2": "isOverflowPointer",
                "param_3": "endPointer",
                "param_4": "unusedParam1",
                "param_5": "unusedParam2",
                "__nptr": "numberString",
                "piVar1": "errorCodePointer",
                "uVar2": "convertedValue",
                "uVar3": "errorString",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nconvertAndCheckStringToUnsignedLong_00109a32(char **stringPointer,undefined *isOverflowPointer,char *endPointer,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  char *numberString;\n  int *errorCodePointer;\n  ulong convertedValue;\n  undefined8 errorString;\n  undefined returnValue [16];\n  \n  if (isOverflowPointer != (undefined *)0x0) {\n    *isOverflowPointer = 0;\n  }\n  numberString = *stringPointer;\n  if ((numberString < endPointer) && (*numberString != '\\0')) {\n    errorCodePointer = __errno_location();\n    *errorCodePointer = 0;\n    convertedValue = strtoul(numberString,stringPointer,0);\n    if ((convertedValue != 0xffffffffffffffff) || (*errorCodePointer == 0)) goto LAB_00109aa9;\n    if (isOverflowPointer == (undefined *)0x0) {\n      errorString = dcgettext(0,\"numeric overflow\",5);\n      FUN_00108fe8(numberString,errorString);\n    }\n    else {\n      *isOverflowPointer = 1;\n    }\n  }\n  convertedValue = 0;\nLAB_00109aa9:\n  returnValue._8_8_ = unusedParam2;\n  returnValue._0_8_ = convertedValue;\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00108fe8",
                "__errno_location",
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109a32",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1"
            ],
            "imported": false,
            "current_name": "convert_and_check_string_to_unsigned_long_00109a32"
        },
        "FUN_0010c6be": {
            "renaming": {
                "FUN_0010c6be": "check_debug_tag_type_0010c6be",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "iVar1": "comparison_result",
                "uVar2": "localized_string",
                "piVar3": "allocated_memory",
                "pauVar4": "dynamic_array",
                "lVar5": "offset",
                "pcVar6": "error_message"
            },
            "code": "\n\n\nint * check_debug_tag_type_0010c6be(long param1,char *param2,int *param3)\n\n{\n  int comparison_result;\n  undefined8 localized_string;\n  int *allocated_memory;\n  undefined (*dynamic_array) [16];\n  long offset;\n  char *error_message;\n  \n  if ((param2 != (char *)0x0) && (param3 != (int *)0x0)) {\n    if (*(long *)(param1 + 0x10) == 0) {\n      error_message = \"debug_tag_type: no current file\";\n    }\n    else {\n      if (*param3 != 0x17) {\n        allocated_memory = (int *)FUN_00112904(0x17,0);\n        if (allocated_memory == (int *)0x0) {\n          return (int *)0x0;\n        }\n        dynamic_array = (undefined (*) [16])xmalloc(0x10);\n        offset = *(long *)(param1 + 0x10);\n        *dynamic_array = ZEXT816(0);\n        *(int **)(*dynamic_array + 8) = param3;\n        *(undefined (**) [16])(allocated_memory + 4) = dynamic_array;\n        offset = FUN_00112925(offset + 0x10,param2,1,3);\n        if (offset == 0) {\n          return (int *)0x0;\n        }\n        *(int **)(offset + 0x20) = allocated_memory;\n        *(long *)*dynamic_array = offset;\n        return allocated_memory;\n      }\n      comparison_result = strcmp(*(char **)(**(long **)(param3 + 4) + 8),param2);\n      error_message = \"debug_tag_type: extra tag attempted\";\n      if (comparison_result == 0) {\n        return param3;\n      }\n    }\n    localized_string = dcgettext(0,error_message,5);\n    fprintf(_stderr,\"%s\\n\",localized_string);\n  }\n  return (int *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "FUN_00112904",
                "FUN_00112925",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c6be",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "check_debug_tag_type_0010c6be"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047f0",
            "calling": [
                "FUN_00119970",
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "FUN_0010b6ea": {
            "renaming": {
                "FUN_0010b6ea": "demangle_v3_arglist_0010b6ea",
                "param_1": "ptr_func1",
                "param_2": "ptr_func2",
                "param_3": "ptr_arglist",
                "param_4": "ptr_error",
                "__ptr": "result_ptr",
                "__format": "error_message",
                "lVar1": "len",
                "uVar2": "count",
                "uVar3": "capacity",
                "uVar4": "new_count",
                "local_39": "buffer"
            },
            "code": "\n\n\nvoid * demangle_v3_arglist_0010b6ea(undefined8 ptr_func1,undefined8 ptr_func2,int *ptr_arglist,undefined *ptr_error)\n\n{\n  void *result_ptr;\n  char *error_message;\n  long len;\n  ulong count;\n  ulong capacity;\n  uint new_count;\n  char buffer [9];\n  \n  capacity = 10;\n  count = 0;\n  result_ptr = (void *)xmalloc(0x50);\n  *ptr_error = 0;\n  for (; ptr_arglist != (int *)0x0; ptr_arglist = *(int **)(ptr_arglist + 6)) {\n    if (*ptr_arglist != 0x2e) {\n      error_message = (char *)dcgettext(0,\"Unexpected type in v3 arglist demangling\\n\",5);\n      fprintf(_stderr,error_message);\n      free(result_ptr);\n      return (void *)0x0;\n    }\n    if (*(long *)(ptr_arglist + 4) == 0) break;\n    len = FUN_0010b0fa(ptr_func1,ptr_func2,*(long *)(ptr_arglist + 4),0,buffer);\n    if (len == 0) {\n      if (buffer[0] == '\\0') {\n        free(result_ptr);\n        return (void *)0x0;\n      }\n      *ptr_error = 1;\n    }\n    else {\n      new_count = (int)count + 1;\n      if ((uint)capacity <= new_count) {\n        capacity = (ulong)((uint)capacity + 10);\n        result_ptr = (void *)xrealloc(result_ptr,capacity << 3);\n      }\n      *(long *)((long)result_ptr + count * 8) = len;\n      count = (ulong)new_count;\n    }\n  }\n  *(undefined8 *)((long)result_ptr + count * 8) = 0;\n  return result_ptr;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "free",
                "xrealloc",
                "FUN_0010b0fa"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b6ea",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "demangle_v3_arglist_0010b6ea"
        },
        "FUN_0011a2e0": {
            "renaming": {
                "FUN_0011a2e0": "extract_section_from_binary_0011a2e0",
                "param_1": "binary_header",
                "param_2": "binary_file",
                "uVar1": "section_offset",
                "uVar2": "section_name",
                "lVar3": "section_header",
                "lVar4": "section_index"
            },
            "code": "\nlong extract_section_from_binary_0011a2e0(long binary_header,long binary_file)\n\n{\n  undefined8 section_offset;\n  undefined8 section_name;\n  long section_header;\n  long section_index;\n  \n  section_header = (**(code **)(*(long *)(binary_file + 8) + 0x208))(binary_file);\n  section_index = *(long *)(binary_header + 0x20);\n  *(undefined8 *)(section_header + 8) = *(undefined8 *)(binary_header + 8);\n  *(undefined8 *)(section_header + 0x10) = *(undefined8 *)(binary_header + 0x10);\n  *(undefined4 *)(section_header + 0x18) = *(undefined4 *)(binary_header + 0x18);\n  if (section_index == 0) {\n    section_index = 0x128598;\n  }\n  else {\n    section_index = bfd_get_section_by_name(binary_file);\n    if (section_index == 0) {\n      section_offset = *(undefined8 *)(binary_header + 0x20);\n      section_name = dcgettext(0,\"Section %s not found\",5);\n                    \n      FUN_00119dd0(section_name,section_offset);\n    }\n  }\n  *(long *)(section_header + 0x20) = section_index;\n  return section_header;\n}\n\n",
            "called": [
                "FUN_00108808",
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a2e0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "extract_section_from_binary_0011a2e0"
        },
        "FUN_0010e8a9": {
            "renaming": {
                "FUN_0010e8a9": "format_and_send_data_0010e8a9",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "data",
                "uVar1": "status",
                "sVar2": "dataLength",
                "__s": "formattedData"
            },
            "code": "\nundefined4 formatAndSendData_0010e8a9(undefined8 input1,undefined8 input2,char *data)\n\n{\n  undefined4 status;\n  size_t dataLength;\n  char *formattedData;\n  \n  dataLength = strlen(data);\n  formattedData = (char *)xmalloc(dataLength + 0x14);\n  sprintf(formattedData,\"%s:c=f%g\",input1,data);\n  status = FUN_0010e2f0(input2,0x80,0,0,formattedData);\n  if ((char)status != '\\0') {\n    free(formattedData);\n  }\n  return status;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e8a9",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e8a9"
        },
        "FUN_00104ad6": {
            "renaming": {
                "FUN_00104ad6": "identify_section_flags_00104ad6",
                "unaff_RBP": "currentFlag",
                "__s": "sectionName",
                "sVar4": "sectionNameLength",
                "iVar1": "comparisonResult",
                "unaff_R14D": "flag",
                "unaff_R15": "supportedFlags",
                "auVar6": "returnValue",
                "unaff_retaddr": "returnAddress",
                "pcVar3": "commaPosition",
                "iVar5": "sectionNameDiff"
            },
            "code": "\nundefined  [16] identifySectionFlags_00104ad6(void)\n\n{\n  int comparisonResult;\n  undefined8 uVar2;\n  char *commaPosition;\n  char *currentFlag;\n  char *sectionName;\n  size_t sectionNameLength;\n  int sectionNameDiff;\n  uint flag;\n  char *supportedFlags;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  do {\n    flag = flag | 0x2000;\n    sectionName = currentFlag;\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              if (sectionName == (char *)0x0) {\n                returnValue._4_4_ = 0;\n                returnValue._0_4_ = flag;\n                returnValue._8_8_ = returnAddress;\n                return returnValue;\n              }\n              commaPosition = strchr(sectionName,0x2c);\n              if (commaPosition == (char *)0x0) {\n                sectionNameLength = strlen(sectionName);\n                sectionNameDiff = (int)sectionNameLength;\n                currentFlag = (char *)0x0;\n              }\n              else {\n                currentFlag = commaPosition + 1;\n                sectionNameDiff = (int)commaPosition - (int)sectionName;\n              }\n              sectionNameLength = (size_t)sectionNameDiff;\n              comparisonResult = strncasecmp(supportedFlags,sectionName,sectionNameLength);\n              if (comparisonResult != 0) break;\n              flag = flag | 1;\n              sectionName = currentFlag;\n            }\n            comparisonResult = strncasecmp(\"load\",sectionName,sectionNameLength);\n            if (comparisonResult != 0) break;\n            flag = flag | 2;\n            sectionName = currentFlag;\n          }\n          comparisonResult = strncasecmp(\"noload\",sectionName,sectionNameLength);\n          if (comparisonResult != 0) break;\n          flag = flag | 0x200;\n          sectionName = currentFlag;\n        }\n        comparisonResult = strncasecmp(\"readonly\",sectionName,sectionNameLength);\n        if (comparisonResult != 0) break;\n        flag = flag | 8;\n        sectionName = currentFlag;\n      }\n      comparisonResult = strncasecmp(\"debug\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) break;\n      comparisonResult = strncasecmp(\"code\",sectionName,sectionNameLength);\n      if (comparisonResult == 0) {\n        flag = flag | 0x10;\n        sectionName = currentFlag;\n      }\n      else {\n        comparisonResult = strncasecmp(\"data\",sectionName,sectionNameLength);\n        if (comparisonResult == 0) {\n          flag = flag | 0x20;\n          sectionName = currentFlag;\n        }\n        else {\n          comparisonResult = strncasecmp(\"rom\",sectionName,sectionNameLength);\n          if (comparisonResult == 0) {\n            flag = flag | 0x40;\n            sectionName = currentFlag;\n          }\n          else {\n            comparisonResult = strncasecmp(\"exclude\",sectionName,sectionNameLength);\n            if (comparisonResult == 0) {\n              flag = flag | 0x8000;\n              sectionName = currentFlag;\n            }\n            else {\n              comparisonResult = strncasecmp(\"share\",sectionName,sectionNameLength);\n              if (comparisonResult == 0) {\n                flag = flag | 0x8000000;\n                sectionName = currentFlag;\n              }\n              else {\n                comparisonResult = strncasecmp(\"contents\",sectionName,sectionNameLength);\n                if (comparisonResult == 0) {\n                  flag = flag | 0x100;\n                  sectionName = currentFlag;\n                }\n                else {\n                  comparisonResult = strncasecmp(\"merge\",sectionName,sectionNameLength);\n                  if (comparisonResult == 0) {\n                    flag = flag | 0x800000;\n                    sectionName = currentFlag;\n                  }\n                  else {\n                    comparisonResult = strncasecmp(\"strings\",sectionName,sectionNameLength);\n                    if (comparisonResult != 0) {\n                      commaPosition = (char *)xmalloc((long)(sectionNameDiff + 1));\n                      strncpy(commaPosition,sectionName,sectionNameLength);\n                      commaPosition[sectionNameLength] = '\\0';\n                      uVar2 = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                      FUN_00119ed0(uVar2,commaPosition);\n                      uVar2 = dcgettext(0,\"supported flags: %s\",5);\n                    \n                      FUN_00119dd0(uVar2,\n                                   \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                  );\n                    }\n                    flag = flag | 0x1000000;\n                    sectionName = currentFlag;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "strncasecmp",
                "strncpy",
                "strchr",
                "FUN_00119ed0",
                "FUN_00104ad6",
                "FUN_00119dd0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ad6",
            "calling": [
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "identify_section_flags_00104ad6"
        },
        "htab_find": {
            "renaming": {},
            "code": "\nvoid htab_find(void)\n\n{\n  htab_find();\n  return;\n}\n\n",
            "called": [
                "htab_find"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00108d9a",
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_find"
        },
        "FUN_001087da": {
            "renaming": {
                "FUN_001087da": "check_if_rax_equals100_001087da",
                "in_RAX": "inputValue",
                "auVar1": "resultArray",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] checkIfRAXEquals100_001087da(void)\n\n{\n  long inputValue;\n  undefined resultArray [16];\n  undefined8 returnAddress;\n  \n  resultArray._1_7_ = 0;\n  resultArray[0] = inputValue == 0x100;\n  resultArray._8_8_ = returnAddress;\n  return resultArray;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087da",
            "calling": [
                "FUN_0011a1b0"
            ],
            "imported": false,
            "current_name": "check_if_rax_equals100_001087da"
        },
        "__assert_fail": {
            "renaming": {},
            "code": "\n\n\nvoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\n\n{\n                    \n  __assert_fail(__assertion,__file,__line,__function);\n}\n\n",
            "called": [
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104300",
            "calling": [
                "FUN_001125fa",
                "FUN_0010c7a0",
                "FUN_0010bbd3",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "__assert_fail"
        },
        "FUN_0010914e": {
            "renaming": {
                "FUN_0010914e": "find_named_type_0010914e",
                "param_1": "compilationUnit",
                "param_2": "typeName",
                "param_3": "param3",
                "param_4": "param4",
                "lVar1": "currentCompUnit",
                "iVar2": "comparisonResult",
                "uVar3": "errorMessage",
                "puVar4": "currStruct",
                "lVar5": "currCompUnit",
                "puVar6": "structList",
                "auVar7": "returnValue"
            },
            "code": "\n\n\nundefined  [16] findNamedType_0010914e(long compilationUnit,char *typeName,undefined8 param3,undefined8 param4)\n\n{\n  long currentCompUnit;\n  int comparisonResult;\n  undefined8 errorMessage;\n  undefined8 *currStruct;\n  long currCompUnit;\n  undefined8 *structList;\n  undefined returnValue [16];\n  \n  currentCompUnit = *(long *)(compilationUnit + 8);\n  if (currentCompUnit == 0) {\n    errorMessage = dcgettext(0,\"debug_find_named_type: no current compilation unit\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  else {\n    for (currCompUnit = *(long *)(compilationUnit + 0x20); currCompUnit != 0; currCompUnit = *(long *)(currCompUnit + 8)) {\n      if (*(undefined8 **)(currCompUnit + 0x28) != (undefined8 *)0x0) {\n        for (currStruct = (undefined8 *)**(undefined8 **)(currCompUnit + 0x28); currStruct != (undefined8 *)0x0;\n            currStruct = (undefined8 *)*currStruct) {\n          if (*(int *)((long)currStruct + 0x14) == 0) {\n            if (*(char *)currStruct[1] == *typeName) {\n              comparisonResult = strcmp((char *)currStruct[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n    for (structList = *(undefined8 **)(currentCompUnit + 8); structList != (undefined8 *)0x0;\n        structList = (undefined8 *)*structList) {\n      if ((undefined8 *)structList[2] != (undefined8 *)0x0) {\n        for (currStruct = *(undefined8 **)(undefined8 *)structList[2]; currStruct != (undefined8 *)0x0;\n            currStruct = (undefined8 *)*currStruct) {\n          if (*(int *)((long)currStruct + 0x14) == 0) {\n            if (*(char *)currStruct[1] == *typeName) {\n              comparisonResult = strcmp((char *)currStruct[1],typeName);\n              if (comparisonResult == 0) goto LAB_00109216;\n            }\n          }\n        }\n      }\n    }\n  }\n  errorMessage = 0;\nLAB_00109223:\n  returnValue._8_8_ = param4;\n  returnValue._0_8_ = errorMessage;\n  return returnValue;\nLAB_00109216:\n  errorMessage = currStruct[4];\n  goto LAB_00109223;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010914e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "find_named_type_0010914e"
        },
        "FUN_0010829e": {
            "renaming": {
                "FUN_0010829e": "check_input_0010829e",
                "unaff_EBP": "userInput",
                "uVar1": "result"
            },
            "code": "\nundefined8 checkInput_0010829e(void)\n\n{\n  undefined8 result;\n  int userInput;\n  \n  if (userInput == 5) {\n    result = FUN_00113ede();\n    return result;\n  }\n  if ((userInput != 4) && (userInput == 6)) {\n    result = FUN_001082b3();\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001082b3",
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010829e",
            "calling": [
                "FUN_00115b70"
            ],
            "imported": false,
            "current_name": "check_input_0010829e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043a0",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104220",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041a0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010edb4",
                "FUN_00108f08"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "FUN_00104943": {
            "renaming": {
                "FUN_00104943": "print_binary_info_00104943",
                "in_RAX": "binaryFile",
                "iVar1": "defaultSize",
                "iVar2": "archIndex",
                "lVar3": "binaryIndex",
                "sVar4": "length",
                "pcVar5": "printableArch",
                "uVar6": "archString",
                "iVar7": "archStart",
                "lVar8": "startIndex",
                "iVar9": "currentIndex",
                "unaff_R15D": "archCount",
                "uVar10": "stringLength",
                "uVar11": "archOffset",
                "param_7": "maxIndex",
                "uStack000000000000000c": "padding",
                "param_11": "binaryData",
                "param_13": "binaryInfo"
            },
            "code": "\n\n\nvoid printBinaryInfo_00104943(void)\n\n{\n  int defaultSize;\n  int archIndex;\n  char *binaryFile;\n  long binaryIndex;\n  size_t length;\n  char *printableArch;\n  undefined8 archString;\n  int archStart;\n  long startIndex;\n  int currentIndex;\n  uint archCount;\n  ulong stringLength;\n  uint archOffset;\n  int maxIndex;\n  uint padding;\n  undefined8 binaryData;\n  long binaryInfo;\n  \n  binaryIndex = strtol(binaryFile,(char **)0x0,10);\n  defaultSize = (int)binaryIndex;\n  currentIndex = maxIndex;\n  padding = archCount;\n  if (defaultSize == 0) {\n    defaultSize = 0x50;\n  }\n  do {\n    maxIndex = currentIndex;\n    if (binaryData._4_4_ <= maxIndex) {\n      return;\n    }\n    startIndex = (long)maxIndex;\n    archStart = (defaultSize - padding) + -1;\n    binaryIndex = startIndex;\n    do {\n      currentIndex = (int)binaryIndex;\n      if (binaryData._4_4_ <= currentIndex) break;\n      length = strlen(*(char **)(binaryInfo + binaryIndex * 0x60));\n      binaryIndex = binaryIndex + 1;\n      archStart = (archStart - (int)length) + -1;\n    } while (-1 < archStart);\n    printf(\"\\n%*s\",(ulong)(padding + 1),&DAT_0011b4a1);\n    for (binaryIndex = startIndex * 0x60; ((ulong)(uint)(currentIndex - maxIndex) + startIndex) * 0x60 - binaryIndex != 0;\n        binaryIndex = binaryIndex + 0x60) {\n      printf(\"%s \",*(undefined8 *)(binaryInfo + binaryIndex));\n    }\n    archStart = 2;\n    putc(10,_stdout);\n    do {\n      printableArch = (char *)bfd_printable_arch_mach(archStart,0);\n      archIndex = strcmp(printableArch,\"UNKNOWN!\");\n      if (archIndex != 0) {\n        archString = bfd_printable_arch_mach(archStart,0);\n        printf(\"%*s \",(ulong)padding,archString);\n        archOffset = archStart - 2;\n        binaryIndex = startIndex * 0x60;\n        archIndex = maxIndex;\n        while (currentIndex != archIndex) {\n          printableArch = *(char **)(binaryInfo + binaryIndex);\n          if (*(char *)((long)(char **)(binaryInfo + binaryIndex) + (ulong)archOffset + 8) == '\\0') {\n            length = strlen(printableArch);\n            for (stringLength = length & 0xffffffff; (int)stringLength != 0; stringLength = (ulong)((int)stringLength - 1)) {\n              putc(0x2d,_stdout);\n            }\n          }\n          else {\n            fputs(printableArch,_stdout);\n          }\n          archIndex = archIndex + 1;\n          if (currentIndex != archIndex) {\n            putc(0x20,_stdout);\n          }\n          binaryIndex = binaryIndex + 0x60;\n        }\n        putc(10,_stdout);\n      }\n      archStart = archStart + 1;\n    } while (archStart != 0x57);\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "fputs",
                "bfd_printable_arch_mach",
                "strtol",
                "putc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104943",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "print_binary_info_00104943"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046e0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00113e23": {
            "renaming": {
                "FUN_00113e23": "add_data_to_linked_list_00113e23",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "result",
                "puVar2": "newNode"
            },
            "code": "\nlong addDataToLinkedList_00113e23(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *newNode;\n  \n  result = FUN_00112904(1,0);\n  if (result != 0) {\n    newNode = (undefined8 *)xmalloc(0x10);\n    *newNode = data1;\n    newNode[1] = data2;\n    *(undefined8 **)(result + 0x10) = newNode;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e23",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010afd5",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "add_data_to_linked_list_00113e23"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043f0",
            "calling": [
                "FUN_00104a35",
                "FUN_00108b3e",
                "FUN_0011256b"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_scan_arch": {
            "renaming": {},
            "code": "\nvoid bfd_scan_arch(void)\n\n{\n  bfd_scan_arch();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104710",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_scan_arch"
        },
        "FUN_00108fb9": {
            "renaming": {
                "FUN_00108fb9": "print_bad_stab_error_00108fb9",
                "param_1": "stab",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printBadStabError_00108fb9(undefined8 stab)\n\n{\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Bad stab: %s\\n\",5);\n  fprintf(_stderr,formatString,stab);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109ab1",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_bad_stab_error_00108fb9"
        },
        "xcalloc": {
            "renaming": {},
            "code": "\nvoid xcalloc(void)\n\n{\n  xcalloc();\n  return;\n}\n\n",
            "called": [
                "xcalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104918",
            "calling": [
                "FUN_001163d0"
            ],
            "imported": false,
            "current_name": "xcalloc"
        },
        "FUN_00108ea1": {
            "renaming": {
                "FUN_00108ea1": "parse_number_00108ea1",
                "param_1": "input_bytes",
                "param_2": "parsed_number",
                "iVar1": "current_digit",
                "pbVar2": "current_byte",
                "pbVar3": "next_byte",
                "uVar4": "result"
            },
            "code": "\nulong parse_number_00108ea1(byte **input_bytes,int *parsed_number)\n\n{\n  int current_digit;\n  byte *current_byte;\n  byte *next_byte;\n  ulong result;\n  \n  current_byte = *input_bytes;\n  result = 0;\n  if (((&_sch_istable)[(ulong)*current_byte * 2] & 4) != 0) {\n    next_byte = current_byte + 1;\n    current_digit = (char)*current_byte + -0x30;\n    *parsed_number = current_digit;\n    *input_bytes = next_byte;\n    if (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0) {\n      do {\n        current_byte = next_byte;\n        current_digit = current_digit * 10 + -0x30 + (int)(char)*current_byte;\n        next_byte = current_byte + 1;\n      } while (((&_sch_istable)[(ulong)current_byte[1] * 2] & 4) != 0);\n      if (current_byte[1] == 0x5f) {\n        next_byte = current_byte + 2;\n        *input_bytes = next_byte;\n        *parsed_number = current_digit;\n      }\n    }\n    result = CONCAT71((int7)((ulong)next_byte >> 8),1);\n  }\n  return result & 0xffffffff;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108ea1",
            "calling": [
                "FUN_0010d21c",
                "FUN_0010d882",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_number_00108ea1"
        },
        "FUN_00108072": {
            "renaming": {
                "FUN_00108072": "set_memory_sizes_00108072",
                "unaff_RBX": "pointerRBX",
                "unaff_RBP": "pointerRBP",
                "unaff_R12": "pointerR12",
                "unaff_R15": "pointerR15",
                "lVar5": "errorMessage",
                "lVar6": "tempVar1",
                "lVar7": "tempVar2",
                "lVar8": "tempVar3",
                "bVar1": "byteVar",
                "uVar2": "undefined8Var",
                "uVar4": "uintVar"
            },
            "code": "\n\n\nvoid setMemorySizes_00108072(void)\n\n{\n  byte byteVar;\n  undefined8 undefined8Var;\n  char cVar3;\n  uint uintVar;\n  long errorMessage;\n  long tempVar1;\n  long tempVar2;\n  undefined8 *pointerRBX;\n  long pointerRBP;\n  long pointerR12;\n  long tempVar3;\n  char unaff_R14B;\n  long pointerR15;\n  \n  errorMessage = dcgettext(0,\"failed to set size\",5);\n  tempVar3 = pointerRBX[6];\n  tempVar1 = FUN_00114190(*pointerRBX,0,0x18);\n  if (tempVar1 == 0) {\n    *(byte *)(pointerR15 + 0x28) = *(byte *)(pointerR15 + 0x28) | 1;\n    undefined8Var = *pointerRBX;\n    tempVar3 = tempVar3 + _DAT_001279b0;\n    *(long *)(pointerR15 + 0x30) = tempVar3;\n    *(long *)(pointerR15 + 0x38) = tempVar3;\n    tempVar3 = pointerRBX[7];\n    tempVar1 = FUN_00114190(undefined8Var,0,0x60);\n    if (tempVar1 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempVar2 = *(long *)(tempVar1 + 0x20);\n    if ((*(byte *)(tempVar1 + 0x14) & 0x40) != 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(long *)(pointerR15 + 0x38) = tempVar2;\n    tempVar3 = FUN_00114190(*pointerRBX,0,0x200);\n    if (tempVar3 != 0) goto LAB_00115889;\nLAB_001156b8:\n    uintVar = *(uint *)((long)pointerRBX + 0x7c);\n    if (uintVar < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(pointerR15 + 0xb4) = *(undefined4 *)((long)pointerRBX + 0xb4);\n    *(byte *)(pointerR15 + 0x28) =\n         *(byte *)(pointerR15 + 0x28) & 0xcf | *(byte *)(pointerRBX + 5) & 0x30;\n    pointerRBX[0xc] = pointerR15;\n    pointerRBX[0xb] = 0;\n    byteVar = *(byte *)((long)pointerRBX + 0x27);\n  }\n  else {\n    tempVar2 = *(long *)(tempVar1 + 0x18);\n    if ((*(byte *)(tempVar1 + 0x14) & 8) == 0) {\n      tempVar2 = tempVar2 + tempVar3;\n    }\n    *(byte *)(pointerR15 + 0x28) = *(byte *)(pointerR15 + 0x28) | 1;\n    undefined8Var = *pointerRBX;\n    *(long *)(pointerR15 + 0x30) = tempVar2;\n    *(long *)(pointerR15 + 0x38) = tempVar2;\n    tempVar3 = pointerRBX[7];\n    tempVar1 = FUN_00114190(undefined8Var,0,0x60);\n    if (tempVar1 != 0) goto LAB_00115860;\nLAB_00115695:\n    undefined8Var = *pointerRBX;\n    *(long *)(pointerR15 + 0x38) = tempVar3 + _DAT_001279b0;\n    tempVar3 = FUN_00114190(undefined8Var,0,0x200);\n    if (tempVar3 == 0) goto LAB_001156b8;\nLAB_00115889:\n    uintVar = *(uint *)(tempVar3 + 0x2c);\n    if (0x3e < uintVar) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(pointerR15 + 0x7c) = uintVar;\n    *(undefined4 *)(pointerR15 + 0xb4) = *(undefined4 *)((long)pointerRBX + 0xb4);\n    *(byte *)(pointerR15 + 0x28) =\n         *(byte *)(pointerR15 + 0x28) & 0xcf | *(byte *)(pointerRBX + 5) & 0x30;\n    pointerRBX[0xc] = pointerR15;\n    pointerRBX[0xb] = 0;\n    byteVar = *(byte *)((long)pointerRBX + 0x27);\n  }\n  if ((byteVar & 2) != 0) {\n    tempVar3 = pointerRBX[0x1a];\n    tempVar1 = FUN_00115d00(tempVar3,pointerRBX[0x1c]);\n    if ((tempVar1 != 0) &&\n       (tempVar2 = *(long *)(pointerR12 + 8), *(uint *)(tempVar1 + 0x18) = *(uint *)(tempVar1 + 0x18) | 0x20,\n       *(int *)(tempVar2 + 8) == 5)) {\n      *(long *)(tempVar3 + 0xb0) = tempVar1;\n      cVar3 = (**(code **)(*(long *)(pointerRBP + 8) + 0x158))();\n      if (cVar3 == '\\0') {\n        FUN_0010808f();\n        return;\n      }\n      goto LAB_0011571e;\n    }\n  }\n  cVar3 = (**(code **)(*(long *)(pointerRBP + 8) + 0x158))();\n  if (cVar3 == '\\0') {\n    FUN_0010808f();\n    return;\n  }\nLAB_0011571e:\n  if (unaff_R14B != '\\0') {\n    *(undefined4 *)(*(long *)(pointerR15 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00108179"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108072",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "set_memory_sizes_00108072"
        },
        "htab_hash_string": {
            "renaming": {},
            "code": "\nvoid htab_hash_string(void)\n\n{\n  htab_hash_string();\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f8",
            "calling": [
                "FUN_00108800"
            ],
            "imported": false,
            "current_name": "htab_hash_string"
        },
        "FUN_0010a2b9": {
            "renaming": {
                "FUN_0010a2b9": "generate_data_string_0010a2b9",
                "param_1": "baseAddress",
                "param_2": "condition",
                "param_3": "arg1",
                "param_4": "arg2",
                "cVar1": "value",
                "__s": "sourceString",
                "sVar2": "sourceLength",
                "__s_00": "resultString",
                "lVar3": "counter",
                "auVar4": "result"
            },
            "code": "\nundefined  [16] generateDataString_0010a2b9(long baseAddress,char condition,undefined8 arg1,undefined8 arg2)\n\n{\n  char value;\n  char *sourceString;\n  size_t sourceLength;\n  char *resultString;\n  long counter;\n  undefined result [16];\n  \n  value = *(char *)(*(long *)(baseAddress + 0x60) + 0x1c);\n  sourceString = (char *)FUN_00109b2f();\n  sourceLength = strlen(sourceString);\n  resultString = (char *)xmalloc(sourceLength + 0x1e);\n  if (condition == '\\0') {\n    *resultString = '\\0';\n    counter = 0;\n    condition = value;\n  }\n  else {\n    counter = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = counter + 1;\n    sprintf(resultString,\"%ld=@S;\",counter);\n  }\n  sourceLength = strlen(resultString);\n  sprintf(resultString + sourceLength,\"S%s\",sourceString);\n  free(sourceString);\n  result._0_4_ = FUN_00109b52(baseAddress,resultString,counter,condition,0);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(resultString);\n  }\n  result._8_8_ = arg2;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a2b9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_data_string_0010a2b9"
        },
        "bfd_set_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_set_section_contents(void)\n\n{\n  bfd_set_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_set_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104330",
            "calling": [
                "FUN_00116110",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_set_section_contents"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045c0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "FUN_00116ad0": {
            "renaming": {
                "FUN_00116ad0": "FUNC_00116ad0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116ae3) */\n/* WARNING: Removing unreachable block (ram,0x00116aef) */\n\nvoid FUNC_00116ad0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116ad0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116ad0"
        },
        "FUN_0010ec73": {
            "renaming": {
                "FUN_0010ec73": "handle_data_0010ec73",
                "param_1": "dataPtr",
                "param_2": "param",
                "param_3": "arg1",
                "param_4": "arg2",
                "param_5": "arg3",
                "param_6": "arg4",
                "iVar1": "counter",
                "cVar2": "result"
            },
            "code": "\nundefined handleData_0010ec73(long *dataPtr,long param,undefined8 arg1,undefined8 arg2,\n                      undefined8 arg3,undefined8 arg4)\n\n{\n  int counter;\n  char result;\n  \n  if (dataPtr[0x3c] != -1) {\n    (**(code **)(*(long *)(*dataPtr + 8) + 0x50))(param,dataPtr[1] + 8 + dataPtr[0x3c]);\n    dataPtr[0x3c] = -1;\n  }\n  if (dataPtr[0x3d] != -1) {\n    (**(code **)(*(long *)(*dataPtr + 8) + 0x50))(param,dataPtr[1] + 8 + dataPtr[0x3d]);\n    dataPtr[0x3d] = -1;\n  }\n  counter = *(int *)(dataPtr + 0x3f);\n  *(int *)(dataPtr + 0x3f) = counter + 1;\n  if (counter == 0) {\n    dataPtr[0x40] = param;\n  }\n  else {\n    if ((dataPtr[0x41] != -1) &&\n       (result = FUN_0010e2f0(dataPtr,0xc0,0,dataPtr[0x41],0,arg4,arg2), result == '\\0')) {\n      return 0;\n    }\n    dataPtr[0x41] = param - dataPtr[0x40];\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ec73",
            "calling": [
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "handle_data_0010ec73"
        },
        "FUN_00114e00": {
            "renaming": {
                "FUN_00114e00": "get_endianness_string_00114e00",
                "param_1": "endiannessType",
                "dcgettext": "translateText"
            },
            "code": "\nvoid getEndiannessString_00114e00(int endiannessType)\n\n{\n  if (endiannessType == 0) {\n    dcgettext(0,\"big endian\",5);\n    return;\n  }\n  if (endiannessType == 1) {\n    dcgettext(0,\"little endian\",5);\n    return;\n  }\n  dcgettext(0,\"endianness unknown\",5);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114e00",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "get_endianness_string_00114e00"
        },
        "FUN_00115970": {
            "renaming": {
                "FUN_00115970": "copy_and_unlink_file_00115970",
                "param_1": "sourcePath",
                "param_2": "destinationPath",
                "param_3": "flags",
                "param_4": "mode",
                "param_5": "shouldCopy",
                "param_6": "result",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "error",
                "auVar6": "returnValue"
            },
            "code": "\nundefined  [16]\ncopyAndUnlinkFile_00115970(char *sourcePath,char *destinationPath,undefined4 flags,undefined8 mode,char shouldCopy,\n            undefined8 result)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong error;\n  undefined returnValue [16];\n  \n  if (destinationPath == sourcePath) {\n    error = 0;\n  }\n  else {\n    copyResult = FUN_00115a90(flags,destinationPath,mode);\n    error = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      FUN_00119ed0(errorMessage,destinationPath,errorString);\n    }\n    unlink(sourcePath);\n  }\n  if (shouldCopy != '\\0') {\n    FUN_0011a350(destinationPath,mode);\n  }\n  returnValue._8_8_ = result;\n  returnValue._0_8_ = error;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00115a90",
                "FUN_00108200"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_and_unlink_file_00115970"
        },
        "FUN_0010adf2": {
            "renaming": {
                "FUN_0010adf2": "initialize_system_0010adf2"
            },
            "code": "\nvoid initialize_system_0010adf2(void)\n\n{\n  FUN_0010abdd();\n  return;\n}\n\n",
            "called": [
                "FUN_0010abdd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010adf2",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_system_0010adf2"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104310",
            "calling": [
                "FUN_00104943",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "FUN_0010d7d4": {
            "renaming": {
                "FUN_0010d7d4": "extract_and_append_0010d7d4",
                "param_1": "data_ptr",
                "param_2": "original_data_ptr",
                "param_3": "output_ptr",
                "param_4": "output_count",
                "param_5": "output_capacity",
                "uVar1": "first_data_ptr",
                "cVar2": "result",
                "uVar3": "is_valid",
                "lVar4": "output_data",
                "plVar5": "output_ptr_temp",
                "local_40": "temp_output_data"
            },
            "code": "\nundefined4\nextract_and_append_0010d7d4(undefined8 data_ptr,undefined8 *original_data_ptr,long *output_ptr,uint *output_count,uint *output_capacity)\n\n{\n  undefined8 first_data_ptr;\n  char result;\n  undefined4 is_valid;\n  long output_data;\n  long *output_ptr_temp;\n  uint uVar6;\n  long temp_output_data [2];\n  \n  first_data_ptr = *original_data_ptr;\n  output_ptr_temp = temp_output_data;\n  if (output_ptr == (long *)0x0) {\n    output_ptr_temp = (long *)0x0;\n  }\n  result = FUN_0010c95e(data_ptr,original_data_ptr,output_ptr_temp);\n  if ((result != '\\0') &&\n     (is_valid = FUN_00109be3(data_ptr,first_data_ptr,(int)*original_data_ptr - (int)first_data_ptr), (char)is_valid != '\\0')) {\n    if (output_ptr == (long *)0x0) {\n      return is_valid;\n    }\n    if (temp_output_data[0] != 0) {\n      if (*output_capacity <= *output_count + 1) {\n        uVar6 = *output_capacity + 10;\n        output_data = *output_ptr;\n        *output_capacity = uVar6;\n        output_data = xrealloc(output_data,(ulong)uVar6 << 3);\n        *output_ptr = output_data;\n      }\n      uVar6 = *output_count;\n      *(long *)(*output_ptr + (ulong)uVar6 * 8) = temp_output_data[0];\n      *output_count = uVar6 + 1;\n      return is_valid;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xrealloc",
                "FUN_00109be3",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d7d4",
            "calling": [
                "FUN_0010d882"
            ],
            "imported": false,
            "current_name": "extract_and_append_0010d7d4"
        },
        "FUN_00113f50": {
            "renaming": {
                "FUN_00113f50": "check_file_00113f50",
                "param_1": "filePath",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "uVar3": "errorMessage",
                "pcVar4": "errorReason",
                "sStack_a8": "fileStat"
            },
            "code": "\nlong checkFile_00113f50(char *filePath)\n\n{\n  int result;\n  int *errnoPtr;\n  undefined8 errorMessage;\n  char *errorReason;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    result = stat(filePath,&fileStat);\n    if (result < 0) {\n      errnoPtr = __errno_location();\n      if (*errnoPtr == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        FUN_00119ed0(errorMessage,filePath);\n      }\n      else {\n        errorReason = strerror(*errnoPtr);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        FUN_00119ed0(errorMessage,filePath,errorReason);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < fileStat.st_size) {\n        return fileStat.st_size;\n      }\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      FUN_00119ed0(errorMessage,filePath);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "dcgettext",
                "stat",
                "FUN_00119ed0",
                "FUN_00104966"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113f50",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "check_file_00113f50"
        },
        "FUN_001087fd": {
            "renaming": {
                "FUN_001087fd": "initialize_program_001087fd",
                "undefined8": "void"
            },
            "code": "\nvoid initializeProgram_001087fd(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001087fd",
            "calling": [
                "FUN_0011a250"
            ],
            "imported": false,
            "current_name": "initialize_program_001087fd"
        },
        "FUN_0011256b": {
            "renaming": {
                "FUN_0011256b": "print_matching_formats_0011256b",
                "__format": "formatMessage"
            },
            "code": "\n\n\nvoid printMatchingFormats_0011256b(long *param_1)\n\n{\n  undefined8 uVar1;\n  char *formatMessage;\n  long *plVar2;\n  \n  fflush(_stdout);\n  uVar1 = DAT_00127600;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatMessage,uVar1);\n  for (plVar2 = param_1; *plVar2 != 0; plVar2 = plVar2 + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(param_1);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011256b",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "print_matching_formats_0011256b"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045e0",
            "calling": [
                "FUN_0010871c",
                "FUN_00119e70",
                "FUN_0011256b",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_0011378f": {
            "renaming": {
                "FUN_0011378f": "decompile_and_improve_0011378f",
                "param_1": "input_ptr",
                "param_2": "output_ptr",
                "param_3": "output_len",
                "param_4": "output_size",
                "param_5": "output_data",
                "param_6": "output_count",
                "auVar1": "temp_buffer",
                "cVar2": "result",
                "uVar3": "error_code",
                "uVar4": "error_msg",
                "puVar5": "malloc_ptr",
                "sVar6": "str_len",
                "lVar7": "loop_var",
                "puVar8": "inner_loop_ptr",
                "puVar9": "local_buffer",
                "__dest": "dest_buffer",
                "puVar10": "ptr",
                "plVar11": "nested_ptr",
                "bVar12": "flag",
                "local_258": "ptr_1",
                "local_250": "allocated_size",
                "local_248": "value_1",
                "uStack_244": "value_2",
                "uStack_240": "value_3",
                "uStack_23c": "value_4",
                "local_238": "temp_array",
                "local_228": "value_5",
                "local_220": "temp_buffer_2",
                "local_1f8": "value_6",
                "local_1f0": "value_7",
                "local_1e8": "array",
                "local_a0": "temp_buffer_3",
                "local_78": "value_8",
                "uStack_70": "value_9",
                "local_68": "value_10",
                "local_60": "value_11",
                "local_58": "value_12",
                "uStack_54": "value_13",
                "uStack_50": "value_14",
                "uStack_4c": "value_15"
            },
            "code": "\nundefined4\ndecompile_and_improve_0011378f(undefined8 *input_ptr,undefined8 *output_ptr,long *output_len,undefined8 *output_size,\n            undefined8 *output_data,undefined8 *output_count)\n\n{\n  undefined temp_buffer [16];\n  char result;\n  undefined4 error_code;\n  undefined8 error_msg;\n  undefined *malloc_ptr;\n  size_t str_len;\n  long loop_var;\n  undefined8 *inner_loop_ptr;\n  undefined4 *local_buffer;\n  char *dest_buffer;\n  undefined8 *ptr;\n  long *nested_ptr;\n  byte flag;\n  undefined8 *ptr_1;\n  long allocated_size;\n  undefined4 value_1;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 value_4;\n  undefined temp_array [16];\n  undefined8 value_5;\n  undefined temp_buffer_2 [40];\n  undefined8 value_6;\n  undefined8 value_7;\n  undefined4 array [82];\n  undefined temp_buffer_3 [40];\n  undefined value_8 [8];\n  undefined8 value_9;\n  undefined8 value_10;\n  undefined4 value_11;\n  undefined4 value_12;\n  undefined4 value_13;\n  undefined4 value_14;\n  undefined4 value_15;\n  \n  flag = 0;\n  value_1 = 0;\n  value_2 = 0;\n  value_3 = 500;\n  value_4 = 0;\n  ptr_1 = input_ptr;\n  allocated_size = xmalloc(500);\n  value_5 = 1;\n  temp_array = ZEXT816(0);\n  result = bfd_hash_table_init(temp_buffer_2,FUN_0010bb52,0x30);\n  if ((result == '\\0') || (result = bfd_hash_table_init(temp_buffer_3,FUN_0010bb52,0x30), result == '\\0')) {\n    error_code = bfd_get_error();\n    error_msg = bfd_errmsg(error_code);\n    FUN_00119ed0(\"bfd_hash_table_init_failed: %s\",error_msg);\n  }\n  else {\n    value_6 = 0;\n    unique0x100000e9 = 0xffffffff;\n    value_8 = (undefined  [8])0xffffffffffffffff;\n    unique0x100000ed = 0xffffffff;\n    local_buffer = array;\n    for (loop_var = 0x52; loop_var != 0; loop_var = loop_var + -1) {\n      *local_buffer = 0;\n      local_buffer = local_buffer + (ulong)flag * -2 + 1;\n    }\n    value_10 = 0;\n    value_11 = 0;\n    value_7 = 1;\n    value_12 = 0;\n    value_13 = 0;\n    value_14 = 0xffffffff;\n    value_15 = 0xffffffff;\n    result = FUN_0010e2f0(&ptr_1,0,0,0,0);\n    temp_buffer = _value_8;\n    if (result != '\\0') {\n      value_8._4_4_ = value_2;\n      value_8._0_4_ = value_1;\n      value_9 = temp_buffer._8_8_;\n      result = FUN_0010e2f0(&ptr_1,100,0,0,*input_ptr);\n      if (result != '\\0') {\n        *(int *)(output_ptr + 6) = *(int *)(output_ptr + 6) + 1;\n        output_ptr[10] = 0;\n        ptr = (undefined8 *)*output_ptr;\n        *(undefined4 *)(output_ptr + 7) = *(undefined4 *)((long)output_ptr + 0x34);\n        for (; ptr != (undefined8 *)0x0; ptr = (undefined8 *)*ptr) {\n          output_ptr[8] = ptr[2];\n          *(undefined4 *)(output_ptr + 9) = 0;\n          result = thunk_FUN_0010e439(&ptr_1,*(undefined8 *)(ptr[1] + 8));\n          if (result == '\\0') {\n            return 0;\n          }\n          nested_ptr = (long *)ptr[1];\n          if (nested_ptr != (long *)0x0) {\n            while( true ) {\n              if ((undefined8 *)nested_ptr[2] != (undefined8 *)0x0) {\n                for (inner_loop_ptr = *(undefined8 **)(undefined8 *)nested_ptr[2]; inner_loop_ptr != (undefined8 *)0x0;\n                    inner_loop_ptr = (undefined8 *)*inner_loop_ptr) {\n                  result = FUN_001135a5(output_ptr,&ptr_1);\n                  if (result == '\\0') {\n                    return 0;\n                  }\n                }\n              }\n              nested_ptr = (long *)*nested_ptr;\n              if (nested_ptr == (long *)0x0) break;\n              result = FUN_0010e439(&ptr_1,nested_ptr[1]);\n              if (result == '\\0') {\n                return 0;\n              }\n            }\n          }\n          result = FUN_00112502(output_ptr,&ptr_1,0xffffffffffffffff);\n          if (result == '\\0') {\n            return 0;\n          }\n        }\n        if ((CONCAT44(value_15,value_14) == -1) &&\n           (error_code = FUN_0010e2f0(&ptr_1,100,0,value_10,0), (char)error_code != '\\0')) {\n          (**(code **)(input_ptr[1] + 0x50))(value_5,allocated_size + 8);\n          *output_len = allocated_size;\n          *output_size = CONCAT44(value_2,value_1);\n          *output_count = value_5;\n          malloc_ptr = (undefined *)xmalloc();\n          *malloc_ptr = 0;\n          dest_buffer = malloc_ptr + 1;\n          *output_data = malloc_ptr;\n          for (loop_var = temp_array._0_8_; loop_var != 0; loop_var = *(long *)(loop_var + 0x18)) {\n            strcpy(dest_buffer,*(char **)(loop_var + 8));\n            str_len = strlen(dest_buffer);\n            dest_buffer = dest_buffer + str_len + 1;\n          }\n          return error_code;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "xmalloc",
                "FUN_00119ed0",
                "bfd_errmsg",
                "thunk_FUN_0010e439",
                "bfd_hash_table_init",
                "FUN_0010e439",
                "strlen",
                "strcpy",
                "FUN_00112502",
                "bfd_get_error",
                "FUN_0010e2f0",
                "FUN_0010bb52"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011378f",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "decompile_and_improve_0011378f"
        },
        "FUN_00104966": {
            "renaming": {
                "FUN_00104966": "handle_error_00104966",
                "piVar1": "errnoPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nundefined8 handleError_00104966(void)\n\n{\n  int *errnoPtr;\n  undefined8 errorMessage;\n  \n  errnoPtr = __errno_location();\n  if (*errnoPtr == 2) {\n    errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  else {\n    strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    FUN_00119ed0(errorMessage);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104966",
            "calling": [
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "handle_error_00104966"
        },
        "FUN_0010a0a0": {
            "renaming": {
                "FUN_0010a0a0": "initialize_data_0010a0a0",
                "param_1": "dataPointer"
            },
            "code": "\nvoid initializeData_0010a0a0(long dataPointer)\n\n{\n  FUN_00109ed3(dataPointer,0x26,4,dataPointer + 0x198,dataPointer + 0x1a0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0a0",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "initialize_data_0010a0a0"
        },
        "FUN_00119ed0": {
            "renaming": {
                "FUN_00119ed0": "convert_data_00119ed0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "sourceData",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "size",
                "local_d4": "offset",
                "local_d0": "bufferPtr",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "localVar1",
                "local_a8": "localVar2",
                "local_a0": "localVar3",
                "local_98": "localVar4",
                "local_90": "localVar5",
                "local_88": "localInput1",
                "local_78": "localInput2",
                "local_68": "localInput3",
                "local_58": "localInput4",
                "local_48": "localInput5",
                "local_38": "localInput6",
                "local_28": "localInput7",
                "local_18": "localInput8"
            },
            "code": "\nvoid convertData_00119ed0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 sourceData,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 size;\n  undefined4 offset;\n  undefined *bufferPtr;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 localVar1;\n  undefined8 localVar2;\n  undefined8 localVar3;\n  undefined8 localVar4;\n  undefined8 localVar5;\n  undefined4 localInput1;\n  undefined4 localInput2;\n  undefined4 localInput3;\n  undefined4 localInput4;\n  undefined4 localInput5;\n  undefined4 localInput6;\n  undefined4 localInput7;\n  undefined4 localInput8;\n  \n  if (condition != '\\0') {\n    localInput1 = input1;\n    localInput2 = input2;\n    localInput3 = input3;\n    localInput4 = input4;\n    localInput5 = input5;\n    localInput6 = input6;\n    localInput7 = input7;\n    localInput8 = input8;\n  }\n  bufferPtr = &stack0x00000008;\n  size = 8;\n  buffer = localBuffer;\n  offset = 0x30;\n  localVar1 = param10;\n  localVar2 = param11;\n  localVar3 = param12;\n  localVar4 = param13;\n  localVar5 = param14;\n  FUN_00119e70(sourceData,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_00119e70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119ed0",
            "calling": [
                "FUN_00104cc1",
                "FUN_00108375",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00113f50",
                "FUN_001086af",
                "FUN_0010882c",
                "FUN_00105828",
                "FUN_0010e6a8",
                "FUN_0010b800",
                "FUN_00108200",
                "FUN_00107880",
                "FUN_0010e07c",
                "FUN_00104ad6",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001152b6",
                "FUN_0010dac0",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "convert_data_00119ed0"
        },
        "FUN_00112c1f": {
            "renaming": {
                "FUN_00112c1f": "decode_and_process_00112c1f",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "input_array",
                "param_4": "param4",
                "plVar1": "ptrVar1",
                "lVar2": "var1",
                "puVar3": "ptrVar3",
                "puVar4": "ptrVar4",
                "cVar5": "tempChar",
                "piVar6": "ptrVar6",
                "uVar7": "result",
                "uVar8": "tempResult",
                "iVar9": "tempInt",
                "uVar10": "tempUint",
                "uVar11": "tempUint2",
                "uVar12": "tempUlong",
                "uVar13": "tempUint3",
                "bVar14": "tempBool",
                "local_3c": "tempUint4"
            },
            "code": "\n\n\nundefined8 decode_and_process_00112c1f(ulong param1,undefined8 param2,int *input_array,long param4)\n\n{\n  long *ptrVar1;\n  long var1;\n  undefined8 *ptrVar3;\n  undefined8 *ptrVar4;\n  char tempChar;\n  int *ptrVar6;\n  undefined8 result;\n  undefined8 tempResult;\n  int tempInt;\n  undefined4 tempUint;\n  undefined8 tempUint2;\n  ulong tempUlong;\n  uint tempUint3;\n  bool tempBool;\n  uint tempUint4;\n  \n  tempUlong = param1;\nLAB_00112c39:\n  if (input_array != (int *)0x0) {\n    tempInt = *input_array;\n    if (tempInt - 0x16U < 2) {\n      do {\n        ptrVar1 = *(long **)(input_array + 4);\n        tempUint3 = *(uint *)(param1 + 0x30);\n        tempUlong = (ulong)tempUint3;\n        var1 = *ptrVar1;\n        if (*(uint *)(var1 + 0x10) == tempUint3) {\n          if (tempInt == 0x16) {\n            result = FUN_0010bba1(param2,*(undefined8 *)(var1 + 8));\n            return result;\n          }\nLAB_00112c94:\n          ptrVar6 = (int *)FUN_00112b6e(input_array,0);\n          if (ptrVar6 == (int *)0x0) goto LAB_00112dd6;\n          if ((*ptrVar6 - 7U < 4) && (*(long *)(ptrVar6 + 4) != 0)) {\n            if ((*(uint *)(*(long *)(ptrVar6 + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n               (tempChar = FUN_0010c7a0(param1,*(undefined8 *)(**(long **)(input_array + 4) + 8),ptrVar6),\n               tempChar == '\\0')) {\n              return 0;\n            }\n            tempUint3 = *(uint *)(*(long *)(ptrVar6 + 4) + 0xc);\n          }\n          else {\n            tempUint3 = 0;\n          }\n          tempInt = *ptrVar6;\n          result = *(undefined8 *)(**(long **)(input_array + 4) + 8);\n          goto LAB_00112ed2;\n        }\n        if (tempInt == 0x17) {\n          if (var1 != param4) goto LAB_00112c94;\n          *(uint *)(param4 + 0x10) = tempUint3;\n          param4 = *ptrVar1;\n          input_array = (int *)ptrVar1[1];\n          goto LAB_00112c39;\n        }\n        if (param4 != 0) {\n          *(uint *)(param4 + 0x10) = tempUint3;\n        }\n        input_array = (int *)ptrVar1[1];\n        if (input_array == (int *)0x0) goto LAB_00112dd6;\n        tempInt = *input_array;\n        param4 = 0;\n      } while (tempInt - 0x16U < 2);\nLAB_00112d74:\n      result = 0;\n    }\n    else {\n      if (param4 == 0) goto LAB_00112d74;\n      *(undefined4 *)(param4 + 0x10) = *(undefined4 *)(param1 + 0x30);\n      if (*(int *)(param4 + 0x14) != 1) {\n                    \n        __assert_fail(\"name->kind == DEBUG_OBJECT_TAG\",\"../../binutils/debug.c\",0x9b3,\n                      \"debug_write_type\");\n      }\n      result = *(undefined8 *)(param4 + 8);\n    }\n    switch(tempInt) {\n    case 0:\n      result = dcgettext(0,\"debug_write_type: illegal type encountered\",5);\n      fprintf(_stderr,\"%s\\n\",result);\n      return 0;\n    case 1:\n      goto switchD_00112d8e_caseD_1;\n    case 2:\n      result = FUN_00109dfe(param2);\n      return result;\n    case 3:\n      result = FUN_0010b800(param2,input_array[1],*(undefined *)(input_array + 4));\n      return result;\n    case 4:\n      result = FUN_0010b948(param2,input_array[1]);\n      return result;\n    case 5:\n      result = FUN_00109e76(param2,input_array[1]);\n      return result;\n    case 6:\n      result = FUN_00109d3e(param2,input_array[1]);\n      return result;\n    case 7:\n    case 8:\n      if (*(long *)(input_array + 4) != 0) {\n        if ((*(uint *)(*(long *)(input_array + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (tempChar = FUN_0010c7a0(param1,result,input_array), tempChar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(input_array + 4);\n        if (*(int *)(param1 + 0x30) == *(int *)(var1 + 8)) {\n          tempUint3 = *(uint *)(var1 + 0xc);\n          if (tempUint3 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0x9db,\n                          \"debug_write_type\");\n          }\n          tempInt = *input_array;\nLAB_00112ed2:\n          result = FUN_00109d5c(param2,result,tempUint3,tempInt);\n          return result;\n        }\n        *(int *)(var1 + 8) = *(int *)(param1 + 0x30);\n      }\n      tempUint = 0;\n      if (*(long *)(input_array + 4) != 0) {\n        tempUint = *(undefined4 *)(*(long *)(input_array + 4) + 0xc);\n      }\n      tempChar = FUN_0010a69a(param2,result,tempUint,*input_array == 7,input_array[1]);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      if ((*(long **)(input_array + 4) != (long *)0x0) && (tempUlong = 0, **(long **)(input_array + 4) != 0)) {\n        while( true ) {\n          ptrVar4 = *(undefined8 **)(**(long **)(input_array + 4) + tempUlong * 8);\n          if (ptrVar4 == (undefined8 *)0x0) break;\n          tempChar = decode_and_process_00112c1f(param1,param2,ptrVar4[1],0);\n          if (tempChar == '\\0') {\n            return 0;\n          }\n          tempChar = FUN_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3),\n                               *(undefined4 *)((long)ptrVar4 + 0x1c),*(undefined4 *)(ptrVar4 + 2));\n          if (tempChar == '\\0') {\n            return 0;\n          }\n          tempUlong = (ulong)((int)tempUlong + 1);\n        }\n      }\n      result = FUN_0010a77a(param2);\n      return result;\n    case 9:\n    case 10:\n      if (*(long *)(input_array + 4) == 0) {\n        tempUint3 = 0;\n        ptrVar6 = (int *)0x0;\n      }\n      else {\n        if ((*(uint *)(*(long *)(input_array + 4) + 0xc) <= *(uint *)(param1 + 0x38)) &&\n           (tempUlong = param1, tempChar = FUN_0010c7a0(param1,result,input_array), tempChar == '\\0')) {\n          return 0;\n        }\n        var1 = *(long *)(input_array + 4);\n        tempUint3 = *(uint *)(var1 + 0xc);\n        if (*(int *)(param1 + 0x30) == *(int *)(var1 + 8)) {\n          if (tempUint3 <= *(uint *)(param1 + 0x38)) {\n                    \n            __assert_fail(\"type->u.kclass->id > info->base_id\",\"../../binutils/debug.c\",0xa87,\n                          \"debug_write_class_type\");\n          }\n          tempInt = *input_array;\n          goto LAB_00112ed2;\n        }\n        ptrVar6 = *(int **)(var1 + 0x20);\n        *(int *)(var1 + 8) = *(int *)(param1 + 0x30);\n        if (((ptrVar6 != (int *)0x0) && (input_array != ptrVar6)) &&\n           (tempUlong = param1, tempChar = decode_and_process_00112c1f(param1,param2,ptrVar6,0), tempChar == '\\0')) {\n          return 0;\n        }\n      }\n      tempChar = FUN_0010a83e(param2,result,tempUint3,*input_array == 9,input_array[1],ptrVar6 != (int *)0x0,\n                           input_array == ptrVar6,tempUlong);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      if (*(long **)(input_array + 4) != (long *)0x0) {\n        tempUint3 = 0;\n        if (**(long **)(input_array + 4) != 0) {\n          while (ptrVar4 = *(undefined8 **)(**(long **)(input_array + 4) + (ulong)tempUint3 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            tempChar = decode_and_process_00112c1f(param1,param2,ptrVar4[1],0);\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            if (*(char *)((long)ptrVar4 + 0x14) == '\\0') {\n              tempChar = FUN_0010ba08(param2,*ptrVar4,*(undefined4 *)(ptrVar4 + 3));\n            }\n            else {\n              tempChar = FUN_0010a94e(param2,*ptrVar4,ptrVar4[3]);\n            }\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            tempUint3 = tempUint3 + 1;\n          }\n        }\n        tempUint3 = 0;\n        if (*(long *)(*(long *)(input_array + 4) + 0x10) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(input_array + 4) + 0x10) + (ulong)tempUint3 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            tempChar = decode_and_process_00112c1f(param1,param2,*ptrVar4,0);\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            tempChar = FUN_0010aa53(param2,*(undefined4 *)(ptrVar4 + 1),\n                                 *(undefined *)((long)ptrVar4 + 0xc));\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            tempUint3 = tempUint3 + 1;\n          }\n        }\n        tempUint4 = 0;\n        if (*(long *)(*(long *)(input_array + 4) + 0x18) != 0) {\n          while (ptrVar4 = *(undefined8 **)\n                           (*(long *)(*(long *)(input_array + 4) + 0x18) + (ulong)tempUint4 * 8),\n                ptrVar4 != (undefined8 *)0x0) {\n            tempChar = FUN_0010ab4d(param2,*ptrVar4);\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            tempUint3 = 0;\n            while (ptrVar3 = *(undefined8 **)(ptrVar4[1] + (ulong)tempUint3 * 8),\n                  ptrVar3 != (undefined8 *)0x0) {\n              if ((ptrVar3[4] != 0) &&\n                 (tempChar = decode_and_process_00112c1f(param1,param2,ptrVar3[4],0), tempChar == '\\0')) {\n                return 0;\n              }\n              tempChar = decode_and_process_00112c1f(param1,param2,ptrVar3[1],0);\n              if (tempChar == '\\0') {\n                return 0;\n              }\n              if (ptrVar3[3] == -1) {\n                tempChar = FUN_0010adf2(param2,*ptrVar3,*(undefined4 *)(ptrVar3 + 2),\n                                     *(undefined *)((long)ptrVar3 + 0x14),\n                                     *(undefined *)((long)ptrVar3 + 0x15));\n              }\n              else {\n                tempChar = FUN_0010add5(param2);\n              }\n              if (tempChar == '\\0') {\n                return 0;\n              }\n              tempUint3 = tempUint3 + 1;\n            }\n            tempChar = FUN_00109bbb(param2);\n            if (tempChar == '\\0') {\n              return 0;\n            }\n            tempUint4 = tempUint4 + 1;\n          }\n        }\n      }\n      result = FUN_0010ae0e(param2);\n      return result;\n    case 0xb:\n      ptrVar4 = *(undefined8 **)(input_array + 4);\n      if (ptrVar4 == (undefined8 *)0x0) {\n        tempResult = 0;\n        tempUint2 = 0;\n      }\n      else {\n        tempResult = ptrVar4[1];\n        tempUint2 = *ptrVar4;\n      }\n      result = FUN_0010e453(param2,result,tempUint2,tempResult);\n      return result;\n    case 0xc:\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a083(param2);\n      return result;\n    case 0xd:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      tempUlong = 0;\n      if (*(long *)(*(long *)(input_array + 4) + 8) == 0) {\n        tempUlong = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(input_array + 4) + 8) + tempUlong * 8), var1 != 0) {\n          tempUlong = tempUlong + 1;\n          tempChar = decode_and_process_00112c1f(param1,param2,var1,0);\n          if (tempChar == '\\0') {\n            return 0;\n          }\n        }\n        tempUlong = tempUlong & 0xffffffff;\n      }\n      result = FUN_0010e5db(param2,tempUlong,*(undefined *)(*(long *)(input_array + 4) + 0x10));\n      return result;\n    case 0xe:\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0a0(param2);\n      return result;\n    case 0xf:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0e9(param2,*(undefined8 *)(*(long *)(input_array + 4) + 8),\n                           *(undefined8 *)(*(long *)(input_array + 4) + 0x10));\n      return result;\n    case 0x10:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(*(long *)(input_array + 4) + 8),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      var1 = *(long *)(input_array + 4);\n      result = FUN_0010a181(param2,*(undefined8 *)(var1 + 0x10),*(undefined8 *)(var1 + 0x18),\n                           *(undefined *)(var1 + 0x20));\n      return result;\n    case 0x11:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a2b9(param2,*(undefined *)(*(long *)(input_array + 4) + 8));\n      return result;\n    case 0x12:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(*(long *)(input_array + 4) + 8),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a377(param2);\n      return result;\n    case 0x13:\n      tempChar = decode_and_process_00112c1f(param1,param2,**(undefined8 **)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      tempUlong = 0;\n      if (*(long *)(*(long *)(input_array + 4) + 0x10) == 0) {\n        tempUlong = 0xffffffff;\n      }\n      else {\n        while (var1 = *(long *)(*(long *)(*(long *)(input_array + 4) + 0x10) + tempUlong * 8), var1 != 0)\n        {\n          tempUlong = tempUlong + 1;\n          tempChar = decode_and_process_00112c1f(param1,param2,var1,0);\n          if (tempChar == '\\0') {\n            return 0;\n          }\n        }\n      }\n      if ((*(long *)(*(long *)(input_array + 4) + 8) != 0) &&\n         (tempChar = decode_and_process_00112c1f(param1,param2,*(long *)(*(long *)(input_array + 4) + 8),0),\n         tempChar == '\\0')) {\n        return 0;\n      }\n      result = FUN_0010a424(param2,*(long *)(*(long *)(input_array + 4) + 8) != 0,tempUlong & 0xffffffff,\n                           *(undefined *)(*(long *)(input_array + 4) + 0x18));\n      return result;\n    case 0x14:\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0bd(param2);\n      return result;\n    case 0x15:\n      tempChar = decode_and_process_00112c1f(param1,param2,*(undefined8 *)(input_array + 4),0);\n      if (tempChar == '\\0') {\n        return 0;\n      }\n      result = FUN_0010a0d3(param2);\n      return result;\n    default:\n                    \n      abort();\n    }\n  }\n  goto LAB_00112dd6;\nswitchD_00112d8e_caseD_1:\n  tempBool = *(int **)**(undefined8 **)(input_array + 4) == input_array;\n  input_array = *(int **)**(undefined8 **)(input_array + 4);\n  if (tempBool) {\nLAB_00112dd6:\n    result = FUN_00109d97(param2);\n    return result;\n  }\n  goto LAB_00112c39;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c7a0",
                "FUN_0010a181",
                "FUN_00109e76",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "fprintf",
                "FUN_00109d97",
                "FUN_0010a2b9",
                "FUN_0010a77a",
                "FUN_0010adf2",
                "FUN_00109dfe",
                "__assert_fail",
                "FUN_0010ba08",
                "FUN_0010e453",
                "FUN_0010a0bd",
                "FUN_0010a69a",
                "FUN_0010aa53",
                "FUN_0010a83e",
                "FUN_00109bbb",
                "FUN_0010ae0e",
                "FUN_00112b6e",
                "FUN_0010a94e",
                "FUN_0010a424",
                "FUN_0010b800",
                "FUN_0010e5db",
                "FUN_0010a0e9",
                "FUN_0010add5",
                "FUN_0010a377",
                "abort",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_00112c1f",
                "FUN_0010a0a0",
                "FUN_0010ab4d"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112c1f",
            "calling": [
                "FUN_001135a5",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "decode_and_process_00112c1f"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_malloc_and_get_section": {
            "renaming": {},
            "code": "\nvoid bfd_malloc_and_get_section(void)\n\n{\n  bfd_malloc_and_get_section();\n  return;\n}\n\n",
            "called": [
                "bfd_malloc_and_get_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041e0",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_malloc_and_get_section"
        },
        "FUN_0010808f": {
            "renaming": {
                "FUN_0010808f": "copy_private_data_0010808f",
                "unaff_R14B": "isPrivateDataCopied",
                "unaff_R15": "dataPointer",
                "lVar1": "copyErrorString"
            },
            "code": "\nvoid copyPrivateData_0010808f(void)\n\n{\n  long copyErrorString;\n  char isPrivateDataCopied;\n  long dataPointer;\n  \n  copyErrorString = dcgettext(0,\"failed to copy private data\",5);\n  if (isPrivateDataCopied != '\\0') {\n    *(undefined4 *)(*(long *)(dataPointer + 0xd0) + 4) = 8;\n  }\n  if (copyErrorString != 0) {\n    DAT_00127a40 = 1;\n    FUN_001126c0(0);\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010808f",
            "calling": [
                "FUN_00108179"
            ],
            "imported": false,
            "current_name": "copy_private_data_0010808f"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104410",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "read"
        },
        "FUN_00108fe8": {
            "renaming": {
                "FUN_00108fe8": "print_warning_00108fe8",
                "param_1": "errorMessage",
                "param_2": "errorSource",
                "in_RAX": "returnValue",
                "__format": "formatString"
            },
            "code": "\n\n\nvoid printWarning_00108fe8(undefined8 errorMessage,undefined8 errorSource)\n\n{\n  undefined8 returnValue;\n  char *formatString;\n  \n  formatString = (char *)dcgettext(0,\"Warning: %s: %s\\n\",5);\n  fprintf(_stderr,formatString,errorSource,errorMessage,returnValue);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108fe8",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00109a32",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "print_warning_00108fe8"
        },
        "bfd_alloc": {
            "renaming": {},
            "code": "\nvoid bfd_alloc(void)\n\n{\n  bfd_alloc();\n  return;\n}\n\n",
            "called": [
                "bfd_alloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104250",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "bfd_alloc"
        },
        "FUN_00105828": {
            "renaming": {
                "FUN_00105828": "detect_file_architecture_00105828",
                "iVar1": "file_arch",
                "uVar2": "machine_arch",
                "uVar3": "input_format",
                "uVar4": "error_message"
            },
            "code": "\nundefined8 detect_file_architecture_00105828(void)\n\n{\n  int file_arch;\n  undefined4 machine_arch;\n  undefined8 input_format;\n  undefined8 error_message;\n  \n  file_arch = bfd_get_arch();\n  if (file_arch == 0) {\n    input_format = FUN_001125fa();\n    error_message = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n    FUN_00119ed0(error_message,input_format);\n  }\n  else {\n    input_format = bfd_get_mach();\n    machine_arch = bfd_get_arch();\n    input_format = bfd_printable_arch_mach(machine_arch,input_format);\n    error_message = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n    FUN_00119ed0(error_message,input_format);\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "FUN_00119ed0",
                "bfd_get_mach",
                "bfd_printable_arch_mach",
                "bfd_get_arch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105828",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "detect_file_architecture_00105828"
        },
        "memset": {
            "renaming": {},
            "code": "\n\n\nvoid * memset(void *__s,int __c,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memset(__s,__c,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memset"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104360",
            "calling": [
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "memset"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUNC_00116b90,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00116b90",
                "__libc_start_main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116aa0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_0011a0e0": {
            "renaming": {
                "FUN_0011a0e0": "create_temp_directory_0011a0e0",
                "__template": "template",
                "pcVar1": "result"
            },
            "code": "\nchar * create_temp_directory_0011a0e0(void)\n\n{\n  char *template;\n  char *result;\n  \n  template = (char *)FUN_00114cf0();\n  result = mkdtemp(template);\n  if (result == (char *)0x0) {\n    free(template);\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00114cf0",
                "mkdtemp",
                "FUN_001081e9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a0e0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "create_temp_directory_0011a0e0"
        },
        "FUN_0010bba1": {
            "renaming": {
                "FUN_0010bba1": "lookup_and_call_function_0010bba1",
                "param_1": "input_param",
                "param_2": "lookup_param",
                "lVar1": "result",
                "uVar2": "function_result"
            },
            "code": "\nundefined8 lookup_and_call_function_0010bba1(long input_param,undefined8 lookup_param)\n\n{\n  long result;\n  undefined8 function_result;\n  \n  result = bfd_hash_lookup(input_param + 0x1b8,lookup_param,0,0);\n  if ((result != 0) && (0 < *(long *)(result + 0x20))) {\n    function_result = FUN_00109cf4(input_param,*(long *)(result + 0x20),*(undefined4 *)(result + 0x28));\n    return function_result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_hash_lookup",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bba1",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "lookup_and_call_function_0010bba1"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104780",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_0010e6a8": {
            "renaming": {
                "FUN_0010e6a8": "process_string_0010e6a8",
                "param_1": "input",
                "param_2": "text",
                "param_3": "value1",
                "param_4": "value2",
                "__s": "result1",
                "sVar3": "textLength",
                "sVar4": "result1Length",
                "__s_00": "combinedString",
                "lVar8": "counter",
                "uVar2": "errorCode",
                "uVar1": "returnValue",
                "lVar5": "lookupResult",
                "uVar6": "errorMessage1",
                "uVar7": "errorMessage2",
                "uVar9": "hashValue",
                "auVar10": "output"
            },
            "code": "\nundefined  [16] processString_0010e6a8(long input,char *text,undefined8 value1,undefined8 value2)\n\n{\n  uint returnValue;\n  undefined4 errorCode;\n  char *result1;\n  size_t textLength;\n  size_t result1Length;\n  char *combinedString;\n  long lookupResult;\n  undefined8 errorMessage1;\n  undefined8 errorMessage2;\n  long counter;\n  ulong hashValue;\n  undefined output [16];\n  \n  counter = *(long *)(*(long *)(input + 0x60) + 0x10);\n  errorCode = *(undefined4 *)(*(long *)(input + 0x60) + 0x18);\n  result1 = (char *)FUN_00109b2f();\n  textLength = strlen(text);\n  result1Length = strlen(result1);\n  combinedString = (char *)xmalloc(textLength + 0x14 + result1Length);\n  if (counter < 1) {\n    counter = *(long *)(input + 0x68);\n    *(long *)(input + 0x68) = counter + 1;\n    sprintf(combinedString,\"%s:t%ld=%s\",text,counter,result1);\n  }\n  else {\n    sprintf(combinedString,\"%s:t%s\",text,result1);\n  }\n  free(result1);\n  returnValue = FUN_0010e2f0(input,0x80,0,0,combinedString);\n  hashValue = (ulong)returnValue;\n  if ((char)returnValue != '\\0') {\n    free(combinedString);\n    lookupResult = bfd_hash_lookup(input + 0x1b8,text,1,0);\n    if (lookupResult != 0) {\n      *(long *)(lookupResult + 0x20) = counter;\n      *(undefined4 *)(lookupResult + 0x28) = errorCode;\n      goto LAB_0010e7b3;\n    }\n    errorCode = bfd_get_error();\n    errorMessage1 = bfd_errmsg(errorCode);\n    errorMessage2 = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n    FUN_00119ed0(errorMessage2,errorMessage1);\n  }\n  hashValue = 0;\nLAB_0010e7b3:\n  output._8_8_ = value2;\n  output._0_8_ = hashValue;\n  return output;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "free",
                "bfd_get_error",
                "FUN_00119ed0",
                "FUN_0010e2f0",
                "bfd_hash_lookup",
                "sprintf",
                "bfd_errmsg",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e6a8",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "process_string_0010e6a8"
        },
        "FUN_0010e7c2": {
            "renaming": {
                "FUN_0010e7c2": "generate_payload_0010e7c2",
                "param_1": "inputData",
                "param_2": "message",
                "param_3": "param3",
                "param_4": "param4",
                "__s": "randomString",
                "sVar1": "messageLength",
                "sVar2": "randomStringLength",
                "__s_00": "payload",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] generatePayload_0010e7c2(undefined8 inputData,char *message,undefined8 param3,undefined8 param4)\n\n{\n  char *randomString;\n  size_t messageLength;\n  size_t randomStringLength;\n  char *payload;\n  undefined result [16];\n  \n  randomString = (char *)FUN_00109b2f();\n  messageLength = strlen(message);\n  randomStringLength = strlen(randomString);\n  payload = (char *)xmalloc(messageLength + 3 + randomStringLength);\n  sprintf(payload,\"%s:T%s\",message,randomString);\n  free(randomString);\n  result._0_4_ = FUN_0010e2f0(inputData,0x80,0,0,payload);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(payload);\n  }\n  result._8_8_ = param4;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e7c2",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_payload_0010e7c2"
        },
        "FUN_00119dd0": {
            "renaming": {
                "FUN_00119dd0": "process_data_00119dd0",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "param1",
                "param_10": "param2",
                "param_11": "param3",
                "param_12": "param4",
                "param_13": "param5",
                "param_14": "param6",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "count",
                "local_d0": "buffer",
                "local_c8": "localBuffer",
                "local_b8": "destination",
                "local_b0": "temp1",
                "local_a8": "temp2",
                "local_a0": "temp3",
                "local_98": "temp4",
                "local_90": "temp5",
                "local_88": "var1",
                "local_78": "var2",
                "local_68": "var3",
                "local_58": "var4",
                "local_48": "var5",
                "local_38": "var6",
                "local_28": "var7",
                "local_18": "var8"
            },
            "code": "\nvoid processData_00119dd0(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4,\n                 undefined8 param5,undefined8 param6)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 count;\n  undefined *buffer;\n  undefined *localBuffer;\n  undefined destination [8];\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined8 temp5;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  undefined4 var7;\n  undefined4 var8;\n  \n  if (flag != '\\0') {\n    var1 = input1;\n    var2 = input2;\n    var3 = input3;\n    var4 = input4;\n    var5 = input5;\n    var6 = input6;\n    var7 = input7;\n    var8 = input8;\n  }\n  buffer = &stack0x00000008;\n  size = 8;\n  localBuffer = destination;\n  count = 0x30;\n  temp1 = param2;\n  temp2 = param3;\n  temp3 = param4;\n  temp4 = param5;\n  temp5 = param6;\n  FUN_00119e70(param1,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00119e70",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119dd0",
            "calling": [
                "FUN_00114190",
                "FUN_00116b90",
                "FUN_0010827b",
                "FUN_00114dc7",
                "FUN_001053b5",
                "FUN_00115b70",
                "FUN_00108d9a",
                "FUN_0010543c",
                "FUN_0010da0b",
                "FUN_00108808",
                "FUN_00114460",
                "FUN_00104920",
                "FUN_00104ad6",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_001083de"
            ],
            "imported": false,
            "current_name": "process_data_00119dd0"
        },
        "bfd_iterate_over_targets": {
            "renaming": {},
            "code": "\nvoid bfd_iterate_over_targets(void)\n\n{\n  bfd_iterate_over_targets();\n  return;\n}\n\n",
            "called": [
                "bfd_iterate_over_targets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104620",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "bfd_iterate_over_targets"
        },
        "bfd_get_full_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_get_full_section_contents(void)\n\n{\n  bfd_get_full_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104440",
            "calling": [
                "FUN_00116110",
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_get_full_section_contents"
        },
        "bfd_hash_newfunc": {
            "renaming": {},
            "code": "\nvoid bfd_hash_newfunc(void)\n\n{\n  bfd_hash_newfunc();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_newfunc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104200",
            "calling": [
                "FUN_0010bb52"
            ],
            "imported": false,
            "current_name": "bfd_hash_newfunc"
        },
        "FUN_001083b7": {
            "renaming": {
                "FUN_001083b7": "handle_error_001083b7",
                "param_1": "errorCode",
                "iVar1": "errorType",
                "unaff_RBP": "ptrStackFrame",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined8 handleError_001083b7(long errorCode)\n\n{\n  int errorType;\n  undefined8 *ptrStackFrame;\n  undefined8 returnAddress;\n  \n  if (errorCode == -1) {\n    errorType = bfd_get_error();\n    if (errorType == 5) {\n      return returnAddress;\n    }\n  }\n  FUN_0011a110(*ptrStackFrame);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_0011a110",
                "bfd_get_error",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083b7",
            "calling": [
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "handle_error_001083b7"
        },
        "FUN_00116852": {
            "renaming": {
                "FUN_00116852": "process_data_00116852",
                "in_RCX": "inputArray",
                "unaff_RBP": "outputArray",
                "unaff_R13": "tempArray1",
                "unaff_R14": "tempArray2",
                "unaff_R15": "tempSize1",
                "unaff_RBX": "tempSize2",
                "in_R10": "counter",
                "param_7": "param1",
                "param_9": "param2",
                "param_10": "param3",
                "param_11": "param4",
                "param_12": "param5",
                "param_13": "param6",
                "param_14": "param7",
                "sVar1": "compareResult",
                "pcVar2": "codePtr",
                "iVar3": "memcmpResult",
                "uVar4": "increment",
                "uVar5": "tempSize3",
                "uVar6": "tempSize4",
                "lVar7": "loopCounter",
                "uVar8": "tempValue",
                "__ptr": "dynamicArray",
                "puVar9": "pointer1",
                "cVar10": "charValue",
                "puVar11": "pointer2",
                "puVar12": "pointer3",
                "psVar13": "pointer4",
                "bVar14": "tempFlag"
            },
            "code": "\nulong processData_00116852(void)\n\n{\n  size_t compareResult;\n  code *codePtr;\n  int memcmpResult;\n  uint increment;\n  undefined *dynamicArray;\n  size_t *inputArray;\n  ulong tempSize3;\n  ulong tempSize4;\n  long loopCounter;\n  ulong tempValue;\n  size_t tempSize2;\n  size_t *outputArray;\n  undefined *pointer1;\n  char charValue;\n  undefined *pointer2;\n  ulong counter;\n  undefined *pointer3;\n  size_t in_R11;\n  size_t *tempArray1;\n  size_t *tempArray2;\n  size_t tempSize1;\n  size_t *pointer4;\n  byte tempFlag;\n  size_t param1;\n  size_t param2;\n  ulong param3;\n  size_t *param4;\n  undefined *param5;\n  long param6;\n  size_t param7;\n  \n  tempFlag = 0;\ncode_r0x00116852:\n  increment = (int)counter + 1;\n  if (0x10 < (int)counter) goto LAB_001167f5;\nLAB_00116863:\n  tempArray2 = tempArray2 + -9;\n  do {\n    if (tempArray1 <= tempArray2) {\n      compareResult = tempArray2[2];\n      if (compareResult == 0) goto LAB_00116863;\n      tempValue = (ulong)increment;\n      if ((*tempArray2 == *outputArray) &&\n         (memcmpResult = memcmp((void *)tempArray2[3],(void *)outputArray[3],*outputArray), memcmpResult == 0)) {\n        tempSize4 = tempArray2[7];\n        tempSize3 = tempArray2[8];\n        counter = tempValue & 0xffffffff;\n        if (tempSize1 == tempSize4) {\n          if (tempSize2 != tempSize3) goto LAB_001167a6;\n          outputArray[2] = 0;\n        }\n        else {\n          if (tempSize1 < tempSize4) {\n            if (tempSize3 < tempSize1) {\nLAB_0010852c:\n              if ((0xfffffffffffffff0 < tempSize3) || (tempSize1 <= (tempSize3 + 0xf & 0xfffffffffffffff0)))\n              goto code_r0x00116852;\n            }\n            else if (tempSize2 < tempSize1) {\n              if ((0xfffffffffffffff0 < tempSize2) ||\n                 (tempSize4 <= (tempSize2 + 0xf & 0xfffffffffffffff0))) goto code_r0x00116852;\n            }\n            else if (tempSize2 == tempSize3) goto code_r0x00116852;\n          }\n          else {\nLAB_001167a6:\n            if (tempSize2 <= tempSize3) {\n              outputArray[2] = 0;\n              goto LAB_001167f5;\n            }\n            if (tempSize3 < tempSize1) goto LAB_0010852c;\n          }\n          if ((in_R11 == 0x101) != (compareResult == 0x101)) goto code_r0x00116852;\n          if (tempSize3 <= tempSize2) {\n            tempSize3 = tempSize2;\n          }\n          if (tempSize4 < tempSize1) {\n            tempSize1 = tempSize4;\n          }\n          tempArray2[8] = tempSize3;\n          tempArray2[7] = tempSize1;\n          outputArray[2] = 0;\n        }\n      }\n    }\nLAB_001167f5:\n    while( true ) {\n      do {\n        tempArray2 = outputArray;\n        outputArray = tempArray2 + 9;\n        if (inputArray <= outputArray) {\n          qsort(param4,param7,0x48,FUN_0011a250);\n          dynamicArray = (undefined *)xmalloc(param3 * 2);\n          param1 = 0;\n          pointer3 = dynamicArray;\n          for (pointer4 = param4; pointer4 < inputArray; pointer4 = pointer4 + 9) {\n            if (pointer4[2] != 0) {\n              pointer2 = pointer3 + 4;\n              pointer1 = pointer3 + 0xc;\n              codePtr = *(code **)(*(long *)(param6 + 8) + 0x50);\n              if ((pointer4[7] == param2) && (pointer4[8] == param1)) {\n                (*codePtr)(*pointer4,pointer3);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(0,pointer2);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(pointer4[2],pointer3 + 8);\n                tempSize4 = pointer4[6];\n                tempValue = *pointer4;\n                pointer3 = (undefined *)pointer4[3];\n                pointer2 = pointer1;\n                for (tempSize3 = tempValue; tempSize3 != 0; tempSize3 = tempSize3 - 1) {\n                  *pointer2 = *pointer3;\n                  pointer3 = pointer3 + (ulong)tempFlag * -2 + 1;\n                  pointer2 = pointer2 + (ulong)tempFlag * -2 + 1;\n                }\n                if (tempValue < tempSize4) {\n                  for (loopCounter = tempSize4 - tempValue; loopCounter != 0; loopCounter = loopCounter + -1) {\n                    *pointer2 = 0;\n                    pointer2 = pointer2 + (ulong)tempFlag * -2 + 1;\n                  }\n                }\n                pointer3 = pointer1 + tempSize4;\n              }\n              else {\n                (*codePtr)();\n                if (*(int *)(*(long *)(param6 + 8) + 8) == 5) {\n                  charValue = (*(char *)(*(long *)(param6 + 0x110) + 4) == '\\x02') * '\\b' + '\\b';\n                }\n                else {\n                  charValue = '\\b';\n                }\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(charValue,pointer2);\n                (**(code **)(*(long *)(param6 + 8) + 0x50))(pointer4[2],pointer3 + 8);\n                tempValue = *pointer4;\n                pointer3 = (undefined *)pointer4[3];\n                pointer2 = pointer1;\n                for (tempSize4 = tempValue; tempSize4 != 0; tempSize4 = tempSize4 - 1) {\n                  *pointer2 = *pointer3;\n                  pointer3 = pointer3 + (ulong)tempFlag * -2 + 1;\n                  pointer2 = pointer2 + (ulong)tempFlag * -2 + 1;\n                }\n                tempSize4 = pointer4[6];\n                if (tempValue < tempSize4) {\n                  for (loopCounter = tempSize4 - tempValue; loopCounter != 0; loopCounter = loopCounter + -1) {\n                    *pointer2 = 0;\n                    pointer2 = pointer2 + (ulong)tempFlag * -2 + 1;\n                  }\n                }\n                loopCounter = *(long *)(param6 + 8);\n                pointer1 = pointer1 + tempSize4;\n                pointer3 = pointer1 + 8;\n                if ((*(int *)(loopCounter + 8) == 5) &&\n                   (*(char *)(*(long *)(param6 + 0x110) + 4) == '\\x02')) {\n                  (**(code **)(loopCounter + 0x38))(pointer4[7],pointer1);\n                  (**(code **)(*(long *)(param6 + 8) + 0x38))(pointer4[8],pointer3);\n                  pointer3 = pointer1 + 0x10;\n                }\n                else {\n                  (**(code **)(loopCounter + 0x50))(pointer4[7],pointer1);\n                  (**(code **)(*(long *)(param6 + 8) + 0x50))(pointer4[8],pointer1 + 4);\n                }\n                param2 = pointer4[7];\n                param1 = pointer4[8];\n              }\n            }\n          }\n          tempSize4 = (long)pointer3 - (long)dynamicArray;\n          tempValue = tempSize4;\n          pointer3 = dynamicArray;\n          if (tempSize4 < param3) {\n            for (; param3 = tempSize4, tempValue != 0; tempValue = tempValue - 1) {\n              *param5 = *pointer3;\n              pointer3 = pointer3 + (ulong)tempFlag * -2 + 1;\n              param5 = param5 + (ulong)tempFlag * -2 + 1;\n            }\n          }\n          free(dynamicArray);\n          free(param4);\n          return param3;\n        }\n        in_R11 = tempArray2[0xb];\n      } while (in_R11 == 0);\n      tempSize1 = tempArray2[0x10];\n      tempSize2 = tempArray2[0x11];\n      increment = 0;\n      if (tempSize1 != tempSize2) break;\n      tempArray2[0xb] = 0;\n    }\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a250",
                "free",
                "qsort",
                "memcmp",
                "FUN_00116852"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116852",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "process_data_00116852"
        },
        "FUN_00113d3a": {
            "renaming": {
                "FUN_00113d3a": "initialize_item_00113d3a",
                "param_1": "item",
                "lVar1": "newItem"
            },
            "code": "\nlong initializeItem_00113d3a(long item)\n\n{\n  long newItem;\n  \n  if (item != 0) {\n    newItem = *(long *)(item + 8);\n    if (newItem == 0) {\n      newItem = FUN_00112904(0xc,0);\n      if (newItem == 0) {\n        newItem = 0;\n      }\n      else {\n        *(long *)(newItem + 0x10) = item;\n        *(long *)(item + 8) = newItem;\n      }\n    }\n    return newItem;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d3a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_item_00113d3a"
        },
        "bfd_hash_lookup": {
            "renaming": {},
            "code": "\nvoid bfd_hash_lookup(void)\n\n{\n  bfd_hash_lookup();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_lookup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104560",
            "calling": [
                "FUN_0010e6a8",
                "FUN_0010e2f0",
                "FUN_0010bba1"
            ],
            "imported": false,
            "current_name": "bfd_hash_lookup"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046d0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "htab_delete": {
            "renaming": {},
            "code": "\nvoid htab_delete(void)\n\n{\n  htab_delete();\n  return;\n}\n\n",
            "called": [
                "htab_delete"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104090",
            "calling": [
                "FUN_001054af"
            ],
            "imported": false,
            "current_name": "htab_delete"
        },
        "htab_traverse": {
            "renaming": {},
            "code": "\nvoid htab_traverse(void)\n\n{\n  htab_traverse();\n  return;\n}\n\n",
            "called": [
                "htab_traverse"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104580",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "htab_traverse"
        },
        "FUN_0010a0d3": {
            "renaming": {
                "FUN_0010a0d3": "execute_some_function_0010a0d3",
                "param_1": "inputParam"
            },
            "code": "\nvoid executeSomeFunction_0010a0d3(long inputParam)\n\n{\n  FUN_00109ed3(inputParam,0x42,*(undefined4 *)(*(long *)(inputParam + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0d3",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "execute_some_function_0010a0d3"
        },
        "FUN_00115530": {
            "renaming": {
                "FUN_00115530": "decode_and_process_function_00115530",
                "param_1": "inputData",
                "param_2": "inputStrings",
                "lVar1": "tempVar1",
                "pcVar2": "tempCharPtr",
                "ppcVar3": "tempCharPtrPtr",
                "cVar4": "tempChar",
                "iVar5": "tempInt",
                "uVar6": "tempUint",
                "sVar7": "tempSize",
                "sVar8": "tempSize",
                "lVar9": "tempVar2",
                "pcVar10": "tempCharPtr2",
                "pcVar11": "tempCharPtr3",
                "pcVar12": "tempCharPtr4",
                "uVar13": "tempUint2",
                "bVar14": "tempBool",
                "local_50": "errorMessage",
                "local_48": "tempCharPtr5",
                "local_40": "tempLongArray"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nvoid decodeAndProcessFunction_00115530(long inputData,char **inputStrings,long param_3)\n\n{\n  long tempVar1;\n  char *tempCharPtr;\n  char **tempCharPtrPtr;\n  char tempChar;\n  int tempInt;\n  uint tempUint;\n  size_t tempSize;\n  size_t tempSize;\n  long tempVar2;\n  char *tempCharPtr2;\n  char *tempCharPtr3;\n  char *tempCharPtr4;\n  uint tempUint2;\n  bool tempBool;\n  long errorMessage;\n  char *tempCharPtr5;\n  long tempLongArray [2];\n  \n  tempChar = FUN_001159d0(inputStrings);\n  if (tempChar != '\\0') {\n    return;\n  }\n  tempCharPtr2 = *inputStrings;\n  tempUint2 = *(uint *)((long)inputStrings + 0x24);\n  tempCharPtr5 = tempCharPtr2;\n  tempCharPtrPtr = DAT_001278f8;\n  if (*(int *)(*(long *)(inputData + 8) + 8) != *(int *)(*(long *)(param_3 + 8) + 8)) {\n    tempUint2 = tempUint2 & *(uint *)(*(long *)(inputData + 8) + 0x18) &\n             *(uint *)(*(long *)(param_3 + 8) + 0x18);\n  }\n  for (; tempCharPtrPtr != (char **)0x0; tempCharPtrPtr = (char **)tempCharPtrPtr[3]) {\n    tempInt = strcmp(*tempCharPtrPtr,tempCharPtr2);\n    if (tempInt == 0) {\n      if (*(uint *)(tempCharPtrPtr + 2) != 0xffffffff) {\n        tempUint2 = *(uint *)(tempCharPtrPtr + 2);\n      }\n      if (tempCharPtr2 != tempCharPtrPtr[1]) {\n        tempCharPtr5 = tempCharPtrPtr[1];\n        tempUint2 = FUN_00115f30(tempUint2,param_3);\n      }\n      break;\n    }\n  }\n  if (((DAT_00127918 != (char *)0x0) &&\n      (tempCharPtr2 = DAT_00127918, (*(byte *)((long)inputStrings + 0x24) & 1) != 0)) ||\n     (tempCharPtr2 = DAT_00127920, DAT_00127920 != (char *)0x0)) {\n    tempSize = strlen(tempCharPtr2);\n    tempSize = strlen(tempCharPtr5);\n    tempCharPtr4 = (char *)xmalloc(tempSize + 1 + tempSize);\n    tempCharPtr2 = strcpy(tempCharPtr4,tempCharPtr2);\n    tempCharPtr5 = strcat(tempCharPtr2,tempCharPtr5);\n  }\n  tempVar2 = FUN_00114190(*inputStrings,0,0x80);\n  tempBool = false;\n  if (tempVar2 == 0) {\n    if ((DAT_00127a48 == 4) && ((tempUint2 & 0x2000001) != 0)) {\n      tempInt = *(int *)(*(long *)(inputData + 8) + 8);\n      if (tempInt == 5) {\n        if (*(int *)(inputStrings[0x1a] + 4) != 7) {\nLAB_00115771:\n          if (*(int *)(*(long *)(param_3 + 8) + 8) == 5) {\n            tempBool = (tempUint2 & 0x2000000) == 0;\n            tempUint = ~((-(uint)((tempUint2 & 0x2000000) == 0) & 0x2000100) + 2);\n            *(uint *)((long)inputStrings + 0x24) = *(uint *)((long)inputStrings + 0x24) & tempUint;\n          }\n          else {\n            tempUint = 0xfdfffefd;\n          }\n          tempUint2 = tempUint2 & tempUint;\n        }\n      }\n      else if ((tempInt != 2) || (tempInt = strcmp(*inputStrings,\".buildid\"), tempInt != 0)) goto LAB_00115771;\n    }\n  }\n  else {\n    tempUint2 = FUN_00115f30(tempUint2 & 0x104 | *(uint *)(tempVar2 + 0x28),param_3,*inputStrings);\n  }\n  tempChar = bfd_convert_section_setup(inputData,inputStrings,param_3,&tempCharPtr5,tempLongArray);\n  if (tempChar == '\\0') {\n    tempCharPtr2 = (char *)0x0;\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  tempCharPtr2 = (char *)bfd_make_section_anyway_with_flags(param_3,tempCharPtr5,tempUint2);\n  if (tempCharPtr2 == (char *)0x0) {\n    errorMessage = dcgettext(0,\"failed to create output section\",5);\n    goto LAB_001080d1;\n  }\n  if (DAT_001264bc < 0) {\n    if (DAT_0012790c != '\\0') {\n      tempLongArray[0] = 0;\n      goto LAB_001158e7;\n    }\n    tempChar = bfd_set_section_size(tempCharPtr2,tempLongArray[0]);\n    if (tempChar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  else {\n    tempLongArray[0] = ((((long)DAT_00127a3c - 1U) + tempLongArray[0]) / (ulong)(long)DAT_00127a3c) *\n                  (long)DAT_001264b8;\nLAB_001158e7:\n    tempChar = bfd_set_section_size(tempCharPtr2);\n    if (tempChar == '\\0') {\n      FUN_00108072();\n      return;\n    }\n  }\n  errorMessage = 0;\n  tempCharPtr4 = inputStrings[6];\n  tempVar2 = FUN_00114190(*inputStrings,0,0x18);\n  if (tempVar2 == 0) {\n    tempCharPtr2[0x28] = tempCharPtr2[0x28] | 1;\n    tempCharPtr3 = *inputStrings;\n    tempCharPtr4 = tempCharPtr4 + _DAT_001279b0;\n    *(char **)(tempCharPtr2 + 0x30) = tempCharPtr4;\n    *(char **)(tempCharPtr2 + 0x38) = tempCharPtr4;\n    tempCharPtr4 = inputStrings[7];\n    tempVar2 = FUN_00114190(tempCharPtr3,0,0x60);\n    if (tempVar2 == 0) goto LAB_00115695;\nLAB_00115860:\n    tempCharPtr3 = *(char **)(tempVar2 + 0x20);\n    if ((*(byte *)(tempVar2 + 0x14) & 0x40) != 0) {\n      tempCharPtr3 = tempCharPtr3 + (long)tempCharPtr4;\n    }\n    *(char **)(tempCharPtr2 + 0x38) = tempCharPtr3;\n    tempVar2 = FUN_00114190(*inputStrings,0,0x200);\n    if (tempVar2 != 0) goto LAB_00115889;\nLAB_001156b8:\n    tempUint2 = *(uint *)((long)inputStrings + 0x7c);\n    if (tempUint2 < 0x3f) goto LAB_001156c4;\n    errorMessage = dcgettext(0,\"failed to set alignment\",5);\n    *(undefined4 *)(tempCharPtr2 + 0xb4) = *(undefined4 *)((long)inputStrings + 0xb4);\n    tempCharPtr2[0x28] = tempCharPtr2[0x28] & 0xcfU | *(byte *)(inputStrings + 5) & 0x30;\n    inputStrings[0xc] = tempCharPtr2;\n    inputStrings[0xb] = (char *)0x0;\n    if ((*(byte *)((long)inputStrings + 0x27) & 2) != 0) goto LAB_001157c8;\nLAB_00115700:\n    tempChar = (**(code **)(*(long *)(param_3 + 8) + 0x158))(inputData,inputStrings,param_3,tempCharPtr2);\n    if (tempChar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  else {\n    tempCharPtr3 = *(char **)(tempVar2 + 0x18);\n    if ((*(byte *)(tempVar2 + 0x14) & 8) == 0) {\n      tempCharPtr3 = tempCharPtr3 + (long)tempCharPtr4;\n    }\n    tempCharPtr2[0x28] = tempCharPtr2[0x28] | 1;\n    tempCharPtr = *inputStrings;\n    *(char **)(tempCharPtr2 + 0x30) = tempCharPtr3;\n    *(char **)(tempCharPtr2 + 0x38) = tempCharPtr3;\n    tempCharPtr4 = inputStrings[7];\n    tempVar2 = FUN_00114190(tempCharPtr,0,0x60);\n    if (tempVar2 != 0) goto LAB_00115860;\nLAB_00115695:\n    tempCharPtr3 = *inputStrings;\n    *(char **)(tempCharPtr2 + 0x38) = tempCharPtr4 + _DAT_001279b0;\n    tempVar2 = FUN_00114190(tempCharPtr3,0,0x200);\n    if (tempVar2 == 0) goto LAB_001156b8;\nLAB_00115889:\n    tempUint2 = *(uint *)(tempVar2 + 0x2c);\n    if (0x3e < tempUint2) {\n      FUN_00108179();\n      return;\n    }\nLAB_001156c4:\n    *(uint *)(tempCharPtr2 + 0x7c) = tempUint2;\n    *(undefined4 *)(tempCharPtr2 + 0xb4) = *(undefined4 *)((long)inputStrings + 0xb4);\n    tempCharPtr2[0x28] = tempCharPtr2[0x28] & 0xcfU | *(byte *)(inputStrings + 5) & 0x30;\n    inputStrings[0xc] = tempCharPtr2;\n    inputStrings[0xb] = (char *)0x0;\n    if ((*(byte *)((long)inputStrings + 0x27) & 2) == 0) goto LAB_00115700;\nLAB_001157c8:\n    tempCharPtr4 = inputStrings[0x1a];\n    tempVar2 = FUN_00115d00(tempCharPtr4,inputStrings[0x1c]);\n    if ((tempVar2 == 0) ||\n       (tempVar1 = *(long *)(inputData + 8), *(uint *)(tempVar2 + 0x18) = *(uint *)(tempVar2 + 0x18) | 0x20,\n       *(int *)(tempVar1 + 8) != 5)) goto LAB_00115700;\n    *(long *)(tempCharPtr4 + 0xb0) = tempVar2;\n    tempChar = (**(code **)(*(long *)(param_3 + 8) + 0x158))(inputData,inputStrings,param_3,tempCharPtr2);\n    if (tempChar == '\\0') {\n      FUN_0010808f();\n      return;\n    }\n  }\n  if (tempBool) {\n    *(undefined4 *)(*(long *)(tempCharPtr2 + 0xd0) + 4) = 8;\n  }\n  if (errorMessage == 0) {\n    return;\n  }\nLAB_001080d1:\n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param_3,tempCharPtr2,errorMessage);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_00115f30",
                "xmalloc",
                "bfd_set_section_size",
                "strcat",
                "bfd_make_section_anyway_with_flags",
                "bfd_convert_section_setup",
                "strlen",
                "strcpy",
                "FUN_00108072",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115530",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "decode_and_process_function_00115530"
        },
        "FUN_0010a0bd": {
            "renaming": {
                "FUN_0010a0bd": "call_process_0010a0bd",
                "param_1": "processParam"
            },
            "code": "\nvoid callProcess_0010a0bd(long processParam)\n\n{\n  FUN_00109ed3(processParam,0x6b,*(undefined4 *)(*(long *)(processParam + 0x60) + 0x18),0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109ed3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0bd",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "call_process_0010a0bd"
        },
        "FUN_00113e5e": {
            "renaming": {
                "FUN_00113e5e": "validate_type_and_execute_00113e5e",
                "param_1": "param_in",
                "param_2": "param_str",
                "param_3": "param_offset",
                "cVar1": "result",
                "local_20": "str_ptr"
            },
            "code": "\nundefined8 validate_type_and_execute_00113e5e(undefined8 param_in,char **param_str,long param_offset)\n\n{\n  char result;\n  char *str_ptr [2];\n  \n  str_ptr[0] = *param_str;\n  *param_str = (char *)(param_offset + 2);\n  if ((((long)(char *)(param_offset + 2) - (long)str_ptr[0] < 5) ||\n      (result = FUN_00113fb0(str_ptr[0],\"type\"), result == '\\0')) ||\n     ((str_ptr[0][4] != '$' && (str_ptr[0][4] != '.')))) {\n    if (*str_ptr[0] != '_') {\n      return 1;\n    }\n    if (str_ptr[0][1] != '_') {\n      return 1;\n    }\n    if (str_ptr[0][2] != 'o') {\n      return 1;\n    }\n    if (str_ptr[0][3] != 'p') {\n      return 1;\n    }\n    str_ptr[0] = str_ptr[0] + 4;\n  }\n  else {\n    str_ptr[0] = str_ptr[0] + 5;\n  }\n  result = FUN_0010c95e(param_in,str_ptr,0);\n  if (result != '\\0') {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "FUN_0010c95e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113e5e",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "validate_type_and_execute_00113e5e"
        },
        "FUN_0010abdd": {
            "renaming": {
                "FUN_0010abdd": "update_config_0010abdd",
                "param_1": "configPtr",
                "param_2": "newValue",
                "param_3": "length",
                "param_4": "flag1",
                "param_5": "flag2",
                "param_6": "flag3",
                "param_7": "value",
                "param_8": "flag4",
                "lVar1": "configStruct",
                "pcVar2": "configString",
                "bVar3": "tempByte",
                "pcVar4": "tempString",
                "__s": "anotherValue",
                "sVar5": "configStringLength",
                "sVar6": "tempStringLength",
                "sVar7": "newValueLength",
                "sVar8": "anotherValueLength",
                "uVar9": "updatedConfig",
                "cVar10": "tempChar",
                "cVar11": "flagChar",
                "local_52": "localByte"
            },
            "code": "\nundefined8\nupdateConfig_0010abdd(long configPtr,char *newValue,uint length,char flag1,char flag2,char flag3,\n            undefined8 value,char flag4)\n\n{\n  long configStruct;\n  char *configString;\n  byte tempByte;\n  char *tempString;\n  char *anotherValue;\n  size_t configStringLength;\n  size_t tempStringLength;\n  size_t newValueLength;\n  size_t anotherValueLength;\n  undefined8 updatedConfig;\n  char tempChar;\n  char flagChar;\n  byte localByte;\n  \n  anotherValue = (char *)0x0;\n  localByte = *(byte *)(*(long *)(configPtr + 0x60) + 0x1c);\n  tempString = (char *)FUN_00109b2f();\n  if (flag4 != '\\0') {\n    tempByte = 1;\n    if (localByte == 0) {\n      tempByte = *(byte *)(*(long *)(configPtr + 0x60) + 0x1c);\n    }\n    localByte = tempByte & 1;\n    anotherValue = (char *)FUN_00109b2f(configPtr);\n  }\n  configStruct = *(long *)(configPtr + 0x60);\n  if ((configStruct == 0) || (configString = *(char **)(configStruct + 0x30), configString == (char *)0x0)) {\n    updatedConfig = 0;\n  }\n  else {\n    if (2 < length) {\n                    \n      abort();\n    }\n    if (flag2 == '\\0') {\n      flagChar = (-(flag3 == '\\0') & 0xfeU) + 0x43;\n    }\n    else {\n      flagChar = (-(flag3 == '\\0') & 0xfeU) + 0x44;\n    }\n    tempChar = '?';\n    if (flag1 == '\\0') {\n      tempChar = (-(flag4 == '\\0') & 4U) + 0x2a;\n    }\n    configStringLength = strlen(configString);\n    tempStringLength = strlen(tempString);\n    newValueLength = strlen(newValue);\n    anotherValueLength = 0;\n    if (flag4 != '\\0') {\n      anotherValueLength = strlen(anotherValue);\n    }\n    updatedConfig = xrealloc(configString,newValueLength + configStringLength + 0x28 + tempStringLength + anotherValueLength);\n    *(undefined8 *)(configStruct + 0x30) = updatedConfig;\n    configString = *(char **)(*(long *)(configPtr + 0x60) + 0x30);\n    configStringLength = strlen(configString);\n    sprintf(configString + configStringLength,\"%s:%s;%c%c%c\",tempString,newValue,(ulong)(byte)(0x32 - (char)length),\n            (ulong)(uint)(int)flagChar,(ulong)(uint)(int)tempChar,configStringLength);\n    free(tempString);\n    if (flag4 != '\\0') {\n      tempString = *(char **)(*(long *)(configPtr + 0x60) + 0x30);\n      configStringLength = strlen(tempString);\n      sprintf(tempString + configStringLength,\"%ld;%s;\",value,anotherValue);\n      free(anotherValue);\n    }\n    if (localByte != 0) {\n      *(undefined *)(*(long *)(configPtr + 0x60) + 0x1c) = 1;\n    }\n    updatedConfig = 1;\n  }\n  return updatedConfig;\n}\n\n",
            "called": [
                "free",
                "xrealloc",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010abdd",
            "calling": [
                "FUN_0010add5",
                "FUN_0010adf2"
            ],
            "imported": false,
            "current_name": "update_config_0010abdd"
        },
        "FUN_00115f30": {
            "renaming": {
                "FUN_00115f30": "drop_share_flag_if_needed_00115f30",
                "param_1": "inputFlags",
                "param_2": "pointers",
                "param_3": "outputFormat",
                "uVar1": "pointer1",
                "uVar2": "pointer2"
            },
            "code": "\nuint dropShareFlagIfNeeded_00115f30(uint inputFlags,undefined8 *pointers,undefined8 outputFormat)\n\n{\n  undefined8 pointer1;\n  undefined8 pointer2;\n  \n  if (((inputFlags & 0x8000000) != 0) && (*(int *)(pointers[1] + 8) != 2)) {\n    pointer1 = *pointers;\n    inputFlags = inputFlags & 0xf7ffffff;\n    pointer2 = dcgettext(0,\"%s[%s]: Note - dropping \\'share\\' flag as output format is not COFF\",5);\n    FUN_00119ed0(pointer2,pointer1,outputFormat);\n  }\n  return inputFlags;\n}\n\n",
            "called": [
                "FUN_00108375"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f30",
            "calling": [
                "FUN_00107880",
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "drop_share_flag_if_needed_00115f30"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "cplus_demangle_print": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_print(void)\n\n{\n  cplus_demangle_print();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_print"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104050",
            "calling": [
                "FUN_0010b0fa"
            ],
            "imported": false,
            "current_name": "cplus_demangle_print"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104908",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001275e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_00126468);\n  FUNC_00116ad0();\n  DAT_001275e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00116ad0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b40",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_001129f4": {
            "renaming": {
                "FUN_001129f4": "extract_data_001129f4",
                "param_1": "inputArray",
                "puVar1": "dataArrayPointer",
                "piVar2": "currentArrayPointer"
            },
            "code": "\nundefined8 extractData_001129f4(int *inputArray)\n\n{\n  undefined8 *dataArrayPointer;\n  int *currentArrayPointer;\n  \n  do {\n    if (*inputArray != 1) {\n      if (1 < *inputArray - 0x16U) {\n        return 0;\n      }\n      return *(undefined8 *)(**(long **)(inputArray + 4) + 8);\n    }\n    dataArrayPointer = (undefined8 *)(inputArray + 4);\n    currentArrayPointer = **(int ***)(undefined8 *)*dataArrayPointer;\n  } while ((inputArray != currentArrayPointer) && (inputArray = currentArrayPointer, currentArrayPointer != (int *)0x0));\n  return ((undefined8 *)*dataArrayPointer)[1];\n}\n\n",
            "called": [
                "FUN_001129f4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001129f4",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_001129f4",
                "FUN_0010d559",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "extract_data_001129f4"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104290",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104ad6",
                "FUN_00114c80",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "rmdir": {
            "renaming": {},
            "code": "\n\n\nint rmdir(char *__path)\n\n{\n  int iVar1;\n  \n  iVar1 = rmdir(__path);\n  return iVar1;\n}\n\n",
            "called": [
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104230",
            "calling": [
                "FUN_00114b84",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "rmdir"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104660",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001082b3": {
            "renaming": {
                "FUN_001082b3": "invert_and_increment_001082b3",
                "uVar1": "result"
            },
            "code": "\nuint invert_and_increment_001082b3(void)\n\n{\n  uint result;\n  \n  result = FUN_00113ede();\n  return result ^ 1;\n}\n\n",
            "called": [
                "FUN_00113ede"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082b3",
            "calling": [
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "invert_and_increment_001082b3"
        },
        "FUN_00114690": {
            "renaming": {
                "FUN_00114690": "copy_archive_files_00114690",
                "param_1": "inputFile",
                "param_2": "outputFile",
                "param_3": "fileMode",
                "param_4": "statStruct",
                "param_5": "bfdFlags",
                "param_6": "tempdirPath",
                "param_7": "copyOptions",
                "bVar1": "byteVar1",
                "cVar2": "charVar1",
                "cVar3": "charVar2",
                "iVar4": "intVar1",
                "iVar5": "intVar2",
                "ppcVar6": "pointerToStringPointer1",
                "pvVar7": "voidPointer1",
                "lVar8": "longVar1",
                "puVar9": "pointerToUndefined8",
                "piVar10": "pointerToInt",
                "uVar11": "undefined8Var1",
                "uVar12": "undefined8Var2",
                "lVar13": "longVar2",
                "puVar14": "pointerToUndefined8_1",
                "pcVar15": "charPointer1",
                "ppcVar16": "pointerToPointerToString1",
                "pcVar17": "charPointer2",
                "pcVar18": "charPointer3",
                "pcVar19": "charPointer4",
                "lVar21": "longVar3",
                "uVar22": "uintVar1",
                "pcVar23": "charPointer5",
                "psVar24": "pointerToStatStruct",
                "bVar25": "boolVar1",
                "bVar26": "byteVar2",
                "local_1a0": "pointerToUndefined8_2",
                "local_198": "pointerToLong1",
                "local_158": "statLocal",
                "uStack_b0": "uintStackVar1",
                "lStack_98": "longStackVar1"
            },
            "code": "\n\n\nvoid copyArchiveFiles_00114690(undefined8 inputFile,undefined8 outputFile,int fileMode,undefined8 statStruct,\n                 undefined8 bfdFlags,long tempdirPath,undefined8 copyOptions)\n\n{\n  byte byteVar1;\n  char charVar1;\n  char charVar2;\n  int intVar1;\n  int intVar2;\n  char **pointerToStringPointer1;\n  void *voidPointer1;\n  long longVar1;\n  undefined8 *pointerToUndefined8;\n  int *pointerToInt;\n  undefined8 undefined8Var1;\n  undefined8 undefined8Var2;\n  long longVar2;\n  undefined8 *pointerToUndefined8_1;\n  char *charPointer1;\n  char **pointerToPointerToString1;\n  char *charPointer2;\n  char *charPointer3;\n  undefined8 *__ptr;\n  char **pcharPointer4;\n  code *pcharVar10;\n  long longVar3;\n  uint uintVar1;\n  char *charPointer5;\n  stat *pointerToStatStruct;\n  bool boolVar1;\n  byte byteVar2;\n  undefined8 *pointerToUndefined8_2;\n  long *pointerToLong1;\n  stat statLocal;\n  void *local_c8 [3];\n  uint uintStackVar1;\n  long longStackVar1;\n  \n  byteVar2 = 0;\n  longVar2 = FUN_00113f50();\n  if (longVar2 < 1) {\n    if (longVar2 == 0) {\n      undefined8Var2 = dcgettext(0,\"error: the input file \\'%s\\' is empty\",5);\n      FUN_00119ed0(undefined8Var2,inputFile);\n    }\n    DAT_00127a40 = 1;\n    return;\n  }\n  pointerToUndefined8_1 = (undefined8 *)bfd_openr(inputFile,bfdFlags);\n  if ((pointerToUndefined8_1 == (undefined8 *)0x0) || (intVar2 = bfd_stat(pointerToUndefined8_1,statStruct), intVar2 != 0)) {\n    FUN_001126c0(inputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  switch(DAT_001279a4) {\n  case 1:\n  case 3:\n  case 9:\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0x24000;\n    break;\n  case 5:\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0x4000;\n    break;\n  case 0x11:\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0x424000;\n    break;\n  case 0x20:\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0x8000;\n  }\n  if (DAT_0012799c == 1) {\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0xc0000;\n  }\n  else if (DAT_0012799c == 2) {\n    *(uint *)((long)pointerToUndefined8_1 + 0x44) = *(uint *)((long)pointerToUndefined8_1 + 0x44) | 0x40000;\n  }\n  charVar1 = bfd_check_format(pointerToUndefined8_1,2);\n  if (charVar1 != '\\0') {\n    if (tempdirPath == 0) {\n      charVar1 = '\\0';\n      tempdirPath = *(long *)pointerToUndefined8_1[1];\n    }\n    if (fileMode < 0) {\n      pointerToUndefined8_2 = (undefined8 *)bfd_openw(outputFile,tempdirPath);\n    }\n    else {\n      pointerToUndefined8_2 = (undefined8 *)bfd_fdopenw(outputFile,tempdirPath,fileMode);\n    }\n    if (pointerToUndefined8_2 != (undefined8 *)0x0) {\n      if (DAT_00127a30 != 0) {\n        undefined8Var2 = *pointerToUndefined8_1;\n        undefined8Var1 = dcgettext(0,\"--add-gnu-debuglink ignored for archive %s\",5);\n        FUN_00119ed0(undefined8Var1,undefined8Var2);\n        DAT_00127a30 = 0;\n      }\n      FUN_00114d50(pointerToUndefined8_2,pointerToUndefined8_1,DAT_001264b4);\n      pointerToLong1 = pointerToUndefined8_2 + 0x1f;\n      if ((*(byte *)((long)pointerToUndefined8_1 + 0x49) & 0x10) != 0) {\n        DAT_00127a40 = 1;\n        bfd_set_error(5);\n        undefined8Var2 = dcgettext(0,\"sorry: copying thin archives is not currently supported\",5);\n        FUN_001126c0(0,pointerToUndefined8_1,0,undefined8Var2);\n        return;\n      }\n      charPointer1 = (char *)FUN_0011a0e0(*pointerToUndefined8_2);\n      if (charPointer1 == (char *)0x0) {\n        pointerToInt = __errno_location();\n        charPointer1 = strerror(*pointerToInt);\n        undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n                    \n        FUN_00119dd0(undefined8Var2,charPointer1);\n      }\n      if (DAT_00127a48 == 7) {\n        byteVar1 = *(byte *)((long)pointerToUndefined8_1 + 0x49);\n        uintVar1 = 0;\n      }\n      else {\n        byteVar1 = *(byte *)((long)pointerToUndefined8_1 + 0x49);\n        uintVar1 = byteVar1 >> 3 & 1;\n      }\n      boolVar1 = _DAT_001264b0 != 0;\n      *(byte *)((long)pointerToUndefined8_2 + 0x49) =\n           byteVar1 & 0x10 | (byte)(uintVar1 << 3) | *(byte *)((long)pointerToUndefined8_2 + 0x49) & 0xe7;\n      if (boolVar1) {\n        *(uint *)((long)pointerToUndefined8_2 + 0x44) = *(uint *)((long)pointerToUndefined8_2 + 0x44) | 0x2000;\n      }\n      __ptr = (undefined8 *)0x0;\n      pointerToPointerToString1 = (char **)bfd_openr_next_archived_file(pointerToUndefined8_1,0);\n      charVar2 = bfd_set_format(pointerToUndefined8_2,*(byte *)(pointerToUndefined8_1 + 9) & 7);\n      if (charVar2 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(0,pointerToUndefined8_2,0,0);\n        FUN_00114b84();\n        return;\n      }\n      while ((DAT_00127a40 == 0 && (pointerToPointerToString1 != (char **)0x0))) {\n        charPointer3 = *pointerToPointerToString1;\n        charPointer2 = charPointer3;\n        if (*charPointer3 == '/') {\nLAB_0010527d:\n          undefined8Var2 = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n          FUN_00119ed0(undefined8Var2,charPointer3);\nLAB_00104e93:\n          DAT_00127a40 = 1;\n          goto LAB_00114b4b;\n        }\n        while (*charPointer2 != '\\0') {\n          charPointer5 = charPointer2;\n          if ((*charPointer2 == '.') && (charPointer5 = charPointer2 + 1, charPointer2[1] == '.')) {\n            charPointer5 = charPointer2 + 2;\n            if ((charPointer2[2] == '\\0') || (charPointer2[2] == '/')) goto LAB_0010527d;\n          }\n          for (; (*charPointer5 != '\\0' && (*charPointer5 != '/')); charPointer5 = charPointer5 + 1) {\n          }\n          charPointer2 = charPointer5;\n          if (*charPointer5 == '/') {\n            FUN_001052a2();\n            return;\n          }\n        }\n        charPointer3 = (char *)concat(charPointer1,&DAT_0011b47d);\n        intVar2 = stat(charPointer3,&statLocal);\n        pointerToUndefined8 = __ptr;\n        if (-1 < intVar2) {\n          longVar2 = FUN_0011a0e0(charPointer3);\n          free(charPointer3);\n          if (longVar2 == 0) {\n            pointerToInt = __errno_location();\n            charPointer3 = strerror(*pointerToInt);\n            undefined8Var2 = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n            FUN_00119ed0(undefined8Var2,charPointer3);\n            goto LAB_00104e93;\n          }\n          pointerToUndefined8 = (undefined8 *)xmalloc(0x18);\n          charPointer3 = *pointerToPointerToString1;\n          *pointerToUndefined8 = __ptr;\n          pointerToUndefined8[2] = 0;\n          pointerToUndefined8[1] = longVar2;\n          charPointer3 = (char *)concat(longVar2,&DAT_0011b47d,charPointer3);\n        }\n        intVar2 = 0;\n        if (DAT_001279eb != '\\0') {\n          pointerToStatStruct = &statLocal;\n          for (longVar2 = 0x24; longVar2 != 0; longVar2 = longVar2 + -1) {\n            *(undefined4 *)&pointerToStatStruct->st_dev = 0;\n            pointerToStatStruct = (stat *)((long)pointerToStatStruct + (ulong)byteVar2 * -8 + 4);\n          }\n          pcharPointer4 = (char **)pointerToPointerToString1[0x1d];\n          if ((char **)pointerToPointerToString1[0x1d] == (char **)0x0) {\n            pcharPointer4 = pointerToPointerToString1;\n          }\n          intVar2 = (**(code **)(pcharPointer4[1] + 0x1e8))(pointerToPointerToString1,&statLocal);\n          if (intVar2 != 0) {\n            charPointer2 = *pointerToPointerToString1;\n            undefined8Var2 = dcgettext(0,\"internal stat error on %s\",5);\n            FUN_00119ed0(undefined8Var2,charPointer2);\n          }\n        }\n        __ptr = (undefined8 *)xmalloc(0x18);\n        __ptr[1] = charPointer3;\n        *__ptr = pointerToUndefined8;\n        __ptr[2] = 0;\n        charVar2 = bfd_check_format(pointerToPointerToString1,1);\n        if (charVar2 == '\\0') {\n          undefined8Var2 = dcgettext(0,\"Unable to recognise the format of file\",5);\n          FUN_001126c0(0,pointerToPointerToString1,0,undefined8Var2);\n          pcharPointer4 = (char **)bfd_openw(charPointer3,tempdirPath);\n          if (pcharPointer4 == (char **)0x0) {\nLAB_00104e80:\n            FUN_001126c0(charPointer3,0,0,0);\n            goto LAB_00104e93;\n          }\nLAB_00104d75:\n          pointerToStringPointer1 = (char **)pointerToPointerToString1[0x1d];\n          if ((char **)pointerToPointerToString1[0x1d] == (char **)0x0) {\n            pointerToStringPointer1 = pointerToPointerToString1;\n          }\n          intVar1 = (**(code **)(pointerToStringPointer1[1] + 0x1e8))(pointerToPointerToString1);\n          longVar2 = longStackVar1;\n          if (intVar1 == 0) {\n            if (longStackVar1 < 0) {\n              FUN_001125fa(pointerToPointerToString1);\n              undefined8Var2 = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n              FUN_00119ed0(undefined8Var2);\n            }\n            else {\n              intVar1 = bfd_seek(pointerToPointerToString1,0,0);\n              if (intVar1 == 0) {\n                if (DAT_001279e9 != '\\0') {\n                  charPointer2 = *pcharPointer4;\n                  undefined8Var2 = FUN_001125fa(pointerToPointerToString1);\n                  charPointer5 = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n                  printf(charPointer5,undefined8Var2,charPointer2);\n                }\n                voidPointer1 = (void *)xmalloc(0x2000);\n                for (; longVar2 != 0; longVar2 = longVar2 - longVar3) {\n                  longVar3 = 0x2000;\n                  if (longVar2 < 0x2001) {\n                    longVar3 = longVar2;\n                  }\n                  longVar1 = bfd_bread(voidPointer1,longVar3,pointerToPointerToString1);\n                  pointerToStringPointer1 = pointerToPointerToString1;\n                  if ((longVar3 != longVar1) ||\n                     (longVar1 = bfd_bwrite(voidPointer1,longVar3,pcharPointer4), pointerToStringPointer1 = pcharPointer4,\n                     longVar3 != longVar1)) {\n                    FUN_001126c0(0,pointerToStringPointer1,0,0);\n                    free(voidPointer1);\n                    goto LAB_00104f00;\n                  }\n                }\n                chmod(*pcharPointer4,uintStackVar1 | 0x100);\n                free(voidPointer1);\n                charVar2 = bfd_close_all_done(pcharPointer4);\n                if (charVar2 == '\\0') {\n                  FUN_001126c0(charPointer3,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              undefined8Var2 = FUN_001125fa(pointerToPointerToString1);\n              FUN_0011a110(undefined8Var2);\n            }\n          }\n          else {\n            FUN_001126c0(0,pointerToPointerToString1,0,0);\n          }\nLAB_00104f00:\n          charVar2 = bfd_close_all_done(pcharPointer4);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(charPointer3,0,0,0);\n          }\nLAB_00104ec9:\n          unlink(charPointer3);\n          DAT_00127a40 = 1;\n        }\n        else {\n          if (charVar1 == '\\0') {\n            pcharPointer4 = (char **)bfd_openw(charPointer3,*(undefined8 *)pointerToPointerToString1[1]);\n          }\n          else {\n            pcharPointer4 = (char **)bfd_openw(charPointer3,tempdirPath);\n          }\n          if (pcharPointer4 == (char **)0x0) goto LAB_00104e80;\n          charVar2 = FUNC_00114e50(pointerToPointerToString1,pcharPointer4,copyOptions);\n          if (charVar2 == '\\0') {\n            intVar1 = bfd_get_arch(pointerToPointerToString1);\n            if (intVar1 == 0) goto LAB_00104d75;\n            charVar2 = bfd_close_all_done(pcharPointer4);\n            if (charVar2 == '\\0') {\n              FUN_001126c0(charPointer3,0,0,0);\n            }\n            goto LAB_00104ec9;\n          }\n          charVar2 = bfd_close(pcharPointer4);\n          if (charVar2 == '\\0') {\n            FUN_001126c0(charPointer3,0,0,0);\n            DAT_00127a40 = 1;\n          }\nLAB_00114a86:\n          if ((DAT_001279eb != '\\0') && (intVar2 == 0)) {\n            FUN_0011a350(charPointer3,&statLocal);\n          }\n          longVar2 = bfd_openr(charPointer3,tempdirPath);\n          __ptr[2] = longVar2;\n          *pointerToLong1 = longVar2;\n          pointerToLong1 = (long *)(longVar2 + 0xf0);\n          pcharPointer4 = (char **)bfd_openr_next_archived_file(pointerToUndefined8_1);\n          bfd_close(pointerToPointerToString1);\n          pointerToPointerToString1 = pcharPointer4;\n        }\n      }\n      *pointerToLong1 = 0;\n      voidPointer1 = (void *)xstrdup(*pointerToUndefined8_2);\n      if (DAT_00127a40 == 0) {\n        pcharVar10 = bfd_close;\n      }\n      else {\n        pcharVar10 = bfd_close_all_done;\n      }\n      charVar1 = (*pcharVar10)(pointerToUndefined8_2);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidPointer1,0,0,0);\n      }\n      free(voidPointer1);\n      voidPointer1 = (void *)xstrdup(*pointerToUndefined8_1);\n      charVar1 = bfd_close(pointerToUndefined8_1);\n      if (charVar1 == '\\0') {\n        DAT_00127a40 = 1;\n        FUN_001126c0(voidPointer1,0,0,0);\n      }\n      free(voidPointer1);\nLAB_00114b4b:\n      while (__ptr != (undefined8 *)0x0) {\n        if (__ptr[2] == 0) {\n          rmdir((char *)__ptr[1]);\n        }\n        else {\n          bfd_close();\n          unlink((char *)__ptr[1]);\n        }\n        free((void *)__ptr[1]);\n        pointerToUndefined8_1 = (undefined8 *)*__ptr;\n        free(__ptr);\n        __ptr = pointerToUndefined8_1;\n      }\n      rmdir(charPointer1);\n      free(charPointer1);\n      return;\n    }\nLAB_00105231:\n    close(fileMode);\n    FUN_001126c0(outputFile,0,0,0);\n    DAT_00127a40 = 1;\n    return;\n  }\n  charVar1 = bfd_check_format_matches(pointerToUndefined8_1,1,local_c8);\n  if (charVar1 == '\\0') {\n    intVar2 = bfd_get_error();\n    charVar1 = bfd_check_format_matches(pointerToUndefined8_1,3,&statLocal);\n    if (charVar1 == '\\0') {\n      intVar1 = bfd_get_error();\n      if (intVar2 != intVar1) {\n        bfd_set_error(intVar2);\n      }\n      FUN_001126c0(inputFile,0,0,0);\n      if (intVar2 == 0xd) {\n        FUN_0011256b(local_c8[0]);\n      }\n      if (intVar1 != 0xd) {\n        DAT_00127a40 = 1;\n        return;\n      }\n      FUN_0011256b(statLocal.st_dev);\n      DAT_00127a40 = 1;\n      return;\n    }\n    if (intVar2 == 0xd) {\n      free(local_c8[0]);\n    }\n  }\n  if (tempdirPath == 0) {\n    tempdirPath = *(long *)pointerToUndefined8_1[1];\n  }\n  if (fileMode < 0) {\n    longVar2 = bfd_openw(outputFile,tempdirPath);\n  }\n  else {\n    longVar2 = bfd_fdopenw(outputFile,tempdirPath,fileMode);\n  }\n  if (longVar2 == 0) goto LAB_00105231;\n  FUN_00114d50(longVar2,pointerToUndefined8_1,DAT_001264b4);\n  charVar1 = FUNC_00114e50(pointerToUndefined8_1,longVar2,copyOptions);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n  }\n  else if (DAT_00127a40 == 0) {\n    charVar1 = bfd_close(longVar2);\n    goto LAB_001147d5;\n  }\n  charVar1 = bfd_close_all_done(longVar2);\nLAB_001147d5:\n  if (charVar1 != '\\x01') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(outputFile,0,0,0);\n    return;\n  }\n  charVar1 = bfd_close(pointerToUndefined8_1);\n  if (charVar1 == '\\0') {\n    DAT_00127a40 = 1;\n    FUN_001126c0(inputFile,0,0,0);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113f50",
                "strerror",
                "FUN_0011256b",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "bfd_set_format",
                "bfd_get_error",
                "FUN_00104d25",
                "FUN_00119dd0",
                "bfd_openr",
                "FUN_00114d50",
                "bfd_fdopenw",
                "bfd_set_error",
                "bfd_stat",
                "FUN_00119ed0",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_check_format_matches",
                "bfd_openw",
                "FUN_0011a0e0",
                "__errno_location",
                "free",
                "close",
                "bfd_close",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114690",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "copy_archive_files_00114690"
        },
        "FUN_0010b800": {
            "renaming": {
                "FUN_0010b800": "process_stab_int_type_0010b800",
                "param_1": "baseAddress",
                "param_2": "size",
                "param_3": "isReversed",
                "plVar1": "ptrValue",
                "uVar2": "returnValue",
                "sVar3": "stringLength",
                "lVar4": "currentValue",
                "lVar5": "flagValue",
                "local_8c": "outputString",
                "auStack_8a": "stackArray"
            },
            "code": "\nundefined8 processStabIntType_0010b800(long baseAddress,int size,char isReversed)\n\n{\n  long *ptrValue;\n  undefined8 returnValue;\n  size_t stringLength;\n  long currentValue;\n  long flagValue;\n  undefined2 outputString;\n  undefined4 stackArray [24];\n  \n  if (size - 1U < 8) {\n    currentValue = baseAddress + 0xb8;\n    if (isReversed != '\\0') {\n      currentValue = baseAddress + 0x78;\n    }\n    ptrValue = (long *)(currentValue + (ulong)(size - 1U) * 8);\n    currentValue = *ptrValue;\n    if (currentValue != 0) {\n      returnValue = FUN_00109cf4(baseAddress,currentValue,size);\n      return returnValue;\n    }\n    currentValue = *(long *)(baseAddress + 0x68);\n    *(long *)(baseAddress + 0x68) = currentValue + 1;\n    *ptrValue = currentValue;\n    sprintf((char *)&outputString,\"%ld=r%ld;\",currentValue,currentValue);\n    if (isReversed == '\\0') {\n      flagValue = 1L << ((char)size * '\\b' - 1U & 0x3f);\n      stringLength = strlen((char *)&outputString);\n      sprintf((char *)((long)&outputString + stringLength),\"%ld;%ld;\",-flagValue,flagValue + -1);\n    }\n    else {\n      stringLength = strlen((char *)&outputString);\n      *(undefined2 *)((long)&outputString + stringLength) = 0x3b30;\n      *(undefined *)((long)&outputString + stringLength + 2) = 0;\n      if (size == 8) {\n        *(undefined4 *)((long)&outputString + stringLength + 2) = 0x3b312d;\n      }\n      else {\n        sprintf((char *)((long)&outputString + stringLength + 2),\"%ld;\",\n                (1L << ((char)size * '\\b' & 0x3fU)) + -1);\n      }\n    }\n    returnValue = FUN_00109b52(baseAddress,&outputString,currentValue,1,size);\n  }\n  else {\n    returnValue = dcgettext(0,\"stab_int_type: bad size %u\",5);\n    FUN_00119ed0(returnValue,size);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00109b52",
                "FUN_00119ed0",
                "sprintf",
                "FUN_00109cf4",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b800",
            "calling": [
                "FUN_0010b948",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_stab_int_type_0010b800"
        },
        "FUN_00109ed3": {
            "renaming": {
                "FUN_00109ed3": "process_data_00109ed3",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "dataList",
                "param_5": "dataSize",
                "uVar1": "existingSize",
                "uVar2": "newSize",
                "cVar3": "result",
                "pcVar4": "string",
                "sVar5": "stringLength",
                "__s": "formattedString",
                "lVar6": "counter",
                "__ptr": "tempPointer",
                "uVar7": "returnValue",
                "uVar8": "flagValue",
                "lVar9": "length",
                "uVar10": "currentSize",
                "puVar11": "dataPointer",
                "bVar12": "flag2"
            },
            "code": "\nundefined8 processData_00109ed3(long input,uint flag,undefined4 value,long *dataList,ulong *dataSize)\n\n{\n  ulong existingSize;\n  ulong newSize;\n  char result;\n  char *string;\n  size_t stringLength;\n  char *formattedString;\n  long counter;\n  void *tempPointer;\n  undefined8 returnValue;\n  undefined flagValue;\n  long length;\n  ulong currentSize;\n  undefined *dataPointer;\n  byte flag2;\n  \n  flag2 = 0;\n  counter = *(long *)(input + 0x60);\n  if (counter != 0) {\n    existingSize = *(ulong *)(counter + 0x10);\n    if (((long)existingSize < 1) || (dataList == (long *)0x0)) {\n      flagValue = *(undefined *)(counter + 0x1c);\n      string = (char *)FUN_00109b2f(input);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 2);\n      sprintf(formattedString,\"%c%s\",(ulong)flag,string);\n      free(string);\n      counter = 0;\n    }\n    else {\n      currentSize = *dataSize;\n      if (currentSize <= existingSize) {\n        if (currentSize == 0) {\n          currentSize = 10;\n        }\n        for (; currentSize <= existingSize; currentSize = currentSize * 2) {\n        }\n        counter = xrealloc(*dataList,currentSize * 8);\n        newSize = *dataSize;\n        *dataList = counter;\n        dataPointer = (undefined *)(counter + newSize * 8);\n        for (length = (currentSize - newSize) * 8; length != 0; length = length + -1) {\n          *dataPointer = 0;\n          dataPointer = dataPointer + (ulong)flag2 * -2 + 1;\n        }\n        *dataSize = currentSize;\n      }\n      counter = *(long *)(*dataList + existingSize * 8);\n      if ((counter != 0) && (*(char *)(*(long *)(input + 0x60) + 0x1c) == '\\0')) {\n        tempPointer = (void *)FUN_00109b2f(input);\n        free(tempPointer);\n        returnValue = FUN_00109cf4(input,counter,value);\n        return returnValue;\n      }\n      counter = *(long *)(input + 0x68);\n      *(long *)(input + 0x68) = counter + 1;\n      string = (char *)FUN_00109b2f(input);\n      stringLength = strlen(string);\n      formattedString = (char *)xmalloc(stringLength + 0x14);\n      sprintf(formattedString,\"%ld=%c%s\",counter,(ulong)flag,string);\n      free(string);\n      flagValue = 1;\n      *(long *)(*dataList + existingSize * 8) = counter;\n    }\n    result = FUN_00109b52(input,formattedString,counter,flagValue,value);\n    if (result != '\\0') {\n      free(formattedString);\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "xrealloc",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ed3",
            "calling": [
                "FUN_0010e5db",
                "FUN_0010a0bd",
                "FUN_0010a083",
                "FUN_0010a0d3",
                "FUN_0010a0a0"
            ],
            "imported": false,
            "current_name": "process_data_00109ed3"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104390",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010c7a0",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_00113bfa",
                "FUN_00108c86",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010c139",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_00114460",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_00109022",
                "FUN_00114190",
                "FUN_0010e453",
                "FUN_0010c218",
                "FUN_00116110",
                "FUN_0010bbd3",
                "FUN_0010ebb0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_00113c43",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_00113e23",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00109b52",
                "FUN_00114cf0",
                "FUN_00112925",
                "FUN_00107880",
                "FUN_0011a480",
                "FUN_0010afd5",
                "FUN_0010ab4d",
                "FUN_0010a181",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00113ce0",
                "FUN_0010e07c",
                "FUN_00114d60",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_0010a69a",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_00104ea2",
                "FUN_00114c80",
                "FUN_0010b6ea",
                "FUN_0010bf86",
                "FUN_0010a424",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00112904",
                "FUN_0010a0e9",
                "FUN_0010da0b",
                "FUN_0010a377",
                "FUN_0010bc80",
                "FUN_0010d882",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_00113b98",
                "FUN_00109a0b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "FUN_0010bbd3": {
            "renaming": {
                "FUN_0010bbd3": "initialize_debug_info_0010bbd3",
                "param_1": "debugInfo",
                "param_2": "filename",
                "param_3": "data",
                "param_4": "flag",
                "puVar1": "prevDebugInfo",
                "puVar2": "debugUnits",
                "puVar3": "newDebugUnits",
                "lVar4": "loopCounter",
                "puVar5": "currentUnit",
                "pcVar6": "defaultFilename",
                "bVar7": "flagValue",
                "auVar8": "returnValue"
            },
            "code": "\nundefined  [16] initializeDebugInfo_0010bbd3(long *debugInfo,char *filename,undefined8 data,undefined8 flag)\n\n{\n  undefined8 *prevDebugInfo;\n  undefined4 *debugUnits;\n  undefined4 *newDebugUnits;\n  long loopCounter;\n  undefined4 *currentUnit;\n  char *defaultFilename;\n  byte flagValue;\n  undefined returnValue [16];\n  \n  flagValue = 0;\n  defaultFilename = \"\";\n  if (filename != (char *)0x0) {\n    defaultFilename = filename;\n  }\n  debugUnits = (undefined4 *)xmalloc(0x18);\n  currentUnit = debugUnits;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)flagValue * -2 + 1;\n  }\n  *(char **)(debugUnits + 2) = defaultFilename;\n  newDebugUnits = (undefined4 *)xmalloc(0x18);\n  debugInfo[2] = (long)debugUnits;\n  currentUnit = newDebugUnits;\n  for (loopCounter = 6; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentUnit = 0;\n    currentUnit = currentUnit + (ulong)flagValue * -2 + 1;\n  }\n  prevDebugInfo = (undefined8 *)debugInfo[1];\n  *(undefined4 **)(newDebugUnits + 2) = debugUnits;\n  if (prevDebugInfo == (undefined8 *)0x0) {\n    if (*debugInfo != 0) {\n                    \n      __assert_fail(\"info->units == NULL\",\"../../binutils/debug.c\",699,\"debug_set_filename\");\n    }\n    *debugInfo = (long)newDebugUnits;\n  }\n  else {\n    *prevDebugInfo = newDebugUnits;\n  }\n  debugInfo[1] = (long)newDebugUnits;\n  debugInfo[5] = 0;\n  *(undefined (*) [16])(debugInfo + 3) = ZEXT816(0);\n  returnValue._8_8_ = flag;\n  returnValue._0_8_ = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "__assert_fail"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bbd3",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "initialize_debug_info_0010bbd3"
        },
        "FUN_00114e50": {
            "renaming": {
                "FUN_00114e50": "FUNC_00114e50"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00114e50(undefined8 *param_1,long param_2,long param_3)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  ushort uVar9;\n  char cVar10;\n  char cVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  int *piVar25;\n  ulong uVar26;\n  FILE *__s_00;\n  long **pplVar27;\n  uint uVar28;\n  long **__ptr_01;\n  char *pcVar29;\n  undefined8 *puVar30;\n  ulong uVar31;\n  int iVar32;\n  long **pplVar33;\n  char *pcVar34;\n  long lVar35;\n  undefined4 *puVar36;\n  ulong *puVar37;\n  undefined8 *puVar38;\n  uint uVar39;\n  char **ppcVar40;\n  void *pvVar41;\n  undefined **ppuVar42;\n  bool bVar43;\n  byte bVar44;\n  ulong uStack_1f8;\n  ulong local_1f0;\n  undefined4 *puStack_1e8;\n  char *pcStack_1d0;\n  int *piStack_1c0;\n  long lStack_190;\n  long lStack_180;\n  char *pcStack_178;\n  long lStack_168;\n  long *plStack_148;\n  ulong uStack_140;\n  long lStack_138;\n  long lStack_130;\n  void *apvStack_128 [2];\n  long lStack_118;\n  ushort uStack_10a;\n  byte bStack_108;\n  byte bStack_107;\n  undefined8 uStack_f8;\n  ushort uStack_f0;\n  char *pcStack_c8;\n  ulong uStack_c0;\n  char *pcStack_b8;\n  undefined uStack_b0;\n  short sStack_ae;\n  \n  bVar44 = 0;\n  iVar13 = *(int *)(*(long *)(param_2 + 8) + 0xc);\n  local_1f0._0_1_ =\n       (*(int *)(param_1[1] + 0xc) != iVar13 && *(int *)(param_1[1] + 0xc) != 2) && iVar13 != 2;\n  if ((bool)(char)local_1f0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to change endianness of \\'%s\\'\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  if ((*(byte *)((long)param_1 + 0x4a) & 0x20) != 0) {\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"unable to modify \\'%s\\' due to errors\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\n    FUN_001126c0(0,param_2,0,0);\n    return 0;\n  }\n  if (param_1[0x12] == 0) {\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"error: the input file \\'%s\\' has no sections\",5);\n    FUN_00119ed0(uVar17,uVar18);\n    return 0;\n  }\n  _VerilogDataEndianness = *(undefined4 *)(param_1[1] + 0xc);\n  if (*(int *)(param_1[1] + 8) == 5) {\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  else {\n    if ((DAT_001279a4 != 1) && ((DAT_001279a4 & 1) != 0)) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\n                         \"--compress-debug-sections=[zlib|zlib-gnu|zlib-gabi|zstd] is unsupported on `%s\\'\"\n                         ,5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_0012799c != 0) {\n      uVar18 = FUN_001125fa(param_1);\n      uVar17 = dcgettext(0,\"--elf-stt-common=[yes|no] is unsupported on `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    if (DAT_001279e9 != '\\0') {\n      uVar26 = FUNC_00107976();\n      return uVar26;\n    }\n  }\n  if (DAT_0012790c == '\\0') {\n    if (DAT_00127978 == '\\0') {\n      lVar35 = DAT_001279b8 + param_1[0x17];\n    }\n    else {\n      lVar35 = DAT_001279b8 + _DAT_00127980;\n    }\n  }\n  else {\n    lVar35 = 0;\n  }\n  if ((*(byte *)(param_2 + 0x48) & 7) == 3) {\n    iVar13 = bfd_get_arch(param_1,lVar35);\n    uVar14 = bfd_get_mach(param_1);\n    if (param_3 != 0) {\n      uVar26 = FUNC_001152b6();\n      return uVar26;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar28 = ~DAT_00127910 & *(uint *)(*(long *)(param_2 + 8) + 0x14) &\n           (DAT_00127914 | *(uint *)((long)param_1 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar28 = uVar28 & 0xfffffffe;\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  else {\n    cVar11 = bfd_set_start_address(param_2);\n  }\n  if ((cVar11 == '\\0') || (cVar11 = bfd_set_file_flags(param_2,uVar28), cVar11 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch(param_1);\n  uVar14 = bfd_get_mach(param_1);\n  if (param_3 == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(param_1[1] + 8) != 5)) &&\n       (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) {\n      uVar26 = FUNC_00107880();\n      return uVar26;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(param_3 + 0xc);\n      uVar14 = *(undefined4 *)(param_3 + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa(param_1);\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x2a0))(param_2,iVar13,uVar14);\n  if (cVar11 == '\\0') {\n    if ((*(byte *)(param_1 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch(param_1);\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa(param_1);\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach(param_1);\n      uVar14 = bfd_get_arch(param_1);\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch(param_1);\n    iVar32 = bfd_get_arch(param_2);\n    if (iVar13 != iVar32) {\n      uVar26 = FUN_00105828();\n      return uVar26;\n    }\n  }\n  cVar11 = bfd_set_format(param_2,*(byte *)(param_1 + 9) & 7);\n  if (cVar11 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0,param_1,0,0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_2 + 8) + 1) == 2) &&\n     (cVar11 = FUN_00113fb0(**(undefined8 **)(param_2 + 8),&DAT_0011b503), cVar11 != '\\0')) {\n    lVar35 = *(long *)(param_2 + 0x110);\n    if ((*(int *)((undefined8 *)param_1[1] + 1) == 2) &&\n       (cVar11 = FUN_00113fb0(*(undefined8 *)param_1[1],&DAT_0011b503), cVar11 != '\\0')) {\n      lVar16 = param_1[0x22];\n      bVar43 = DAT_001279eb == '\\0';\n      puVar30 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar35 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar30;\n        puVar30 = puVar30 + (ulong)bVar44 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar44 * -2 + 1;\n      }\n      if (bVar43) {\n        *(undefined4 *)(lVar35 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar35 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar26 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar26 = 0x200;\n    }\n    else {\n      *(int *)(lVar35 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar35 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar35 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar35 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar35 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar35 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar35 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar35 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar26) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar26,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar35 = (**(code **)(param_1[1] + 0x1f8))(param_1);\n  }\n  if (lVar35 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  uStack_1f8 = (**(code **)(param_1[1] + 0x200))(param_1,DAT_001278c8);\n  if ((long)uStack_1f8 < 0) goto LAB_00107a82;\n  if (uStack_1f8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections(param_1,FUN_00115530,param_2);\n  puVar30 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar11 = (**(code **)(*(long *)(param_2 + 8) + 0x168))(param_1), puVar30 = DAT_001279e0,\n     cVar11 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0,param_1,0);\n    puVar30 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    uVar28 = 0x128;\n    lVar35 = FUN_00114190(puVar30[1],0,0x80);\n    if (lVar35 != 0) {\n      uVar28 = FUN_00115f30(*(uint *)(lVar35 + 0x28) | 0x100,param_2,puVar30[1]);\n    }\n    lVar35 = bfd_get_section_by_name(param_2,puVar30[1]);\n    if (lVar35 != 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar35 = bfd_make_section_with_flags(param_2,puVar30[1],uVar28 | 0x100000);\n    puVar30[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar30[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar11 = bfd_set_section_size();\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,puVar30[5],0);\n      return 0;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x18);\n    if (lVar35 != 0) {\n      uVar18 = *(undefined8 *)(lVar35 + 0x18);\n      lVar35 = puVar30[5];\n      *(byte *)(lVar35 + 0x28) = *(byte *)(lVar35 + 0x28) | 1;\n      *(undefined8 *)(lVar35 + 0x30) = uVar18;\n      *(undefined8 *)(lVar35 + 0x38) = uVar18;\n    }\n    lVar35 = FUN_00114190(puVar30[1],0,0x60);\n    if (lVar35 != 0) {\n      lVar16 = puVar30[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar35 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_2,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar38[1]);\n    puVar38[5] = lVar35;\n    if (lVar35 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar35 + 0x60);\n    cVar11 = bfd_set_section_size(uVar18);\n    if (cVar11 == '\\0') {\n      FUN_001126c0(0,param_2,uVar18,0);\n      return 0;\n    }\n  }\n  puVar30 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar33 = (long **)param_1[0x12];\n    __ptr_01 = pplVar33;\n    if (pplVar33 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar33[1]; puVar30 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar30 != (undefined8 *)0x0; puVar30 = (undefined8 *)*puVar30) {\n    lVar35 = bfd_get_section_by_name(param_1,puVar30[1]);\n    if (lVar35 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0,param_1,0);\n    }\n    else if ((*(byte *)(lVar35 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0,param_1,lVar35);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar35 + 0x40);\n      __s_00 = fopen((char *)puVar30[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar30[2],0,0);\n      }\n      else {\n        cVar11 = bfd_malloc_and_get_section(param_1,lVar35,&pcStack_c8);\n        if (cVar11 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0,param_1,lVar35);\n        }\n        else if ((sVar19 != 0) && (sVar20 = fwrite(pcStack_c8,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar25 = __errno_location();\n          pcVar34 = strerror(*piVar25);\n          uVar18 = puVar30[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar34);\n          free(pcStack_c8);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(pcStack_c8);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack_190 = 0;\n  }\n  else {\n    lVar35 = bfd_get_section_by_name(param_2,\".gnu_debuglink\");\n    if (lVar35 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack_190 = bfd_create_gnu_debuglink_section(param_2);\n    lVar35 = DAT_00127a30;\n    if (lStack_190 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_2 + 8) + 8) == 2) {\n      uVar22 = 0;\n      for (uVar26 = *(ulong *)(param_2 + 0x90); uVar26 != 0; uVar26 = *(ulong *)(uVar26 + 8)) {\n        uVar24 = *(ulong *)(uVar26 + 0x30);\n        uVar31 = uVar22;\n        uVar7 = uVar26;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar31 = uVar7, uVar8 != 0 &&\n                 (uVar31 = uVar26, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar26 = *(ulong *)(uVar26 + 8);\n            if (uVar26 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar26 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar31;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar26 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar26 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar26 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack_190 + 0x28) = *(byte *)(lStack_190 + 0x28) | 1;\n      *(ulong *)(lStack_190 + 0x30) = uVar26;\n      *(ulong *)(lStack_190 + 0x38) = uVar26;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  if (*(int *)(param_2 + 0xa0) != 0) {\n    uVar26 = FUNC_0010554f();\n    return uVar26;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack_1e8 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar42 = &PTR_s__stab_00125c60;\n    puStack_1e8 = (undefined4 *)xmalloc(0x60);\n    puVar36 = puStack_1e8;\n    for (lVar35 = 0x18; lVar35 != 0; lVar35 = lVar35 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar44 * -2 + 1;\n    }\n    pcStack_1d0 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar42;\n      lVar35 = bfd_get_section_by_name(param_1,puVar3);\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar35 != 0) && (lVar16 != 0)) {\n        lVar23 = *(long *)(lVar35 + 0x40);\n        __ptr = (void *)xmalloc(lVar23);\n        cVar11 = bfd_get_section_contents(param_1,lVar35,__ptr,0,lVar23);\n        if (cVar11 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n          free(pcStack_1d0);\n          free(__ptr);\n        }\n        else {\n          uVar26 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar26 + 1);\n          local_1f0._0_1_ = bfd_get_section_contents(param_1,lVar16,__ptr_00,0);\n          if ((char)local_1f0 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*param_1);\n            free(pcStack_1d0);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar26) = 0;\n            if ((pcStack_1d0 != (char *)0x0) ||\n               (pcStack_1d0 = (char *)FUN_00112894(param_1,1,plVar6), pcStack_1d0 != (char *)0x0)) {\n              lStack_168 = 0;\n              lStack_180 = 0;\n              for (pvVar41 = __ptr; pvVar41 <= (void *)((long)__ptr + lVar23 + -0xc);\n                  pvVar41 = (void *)((long)pvVar41 + 0xc)) {\n                uVar22 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                bVar2 = *(byte *)((long)pvVar41 + 4);\n                uVar14 = (**(code **)(param_1[1] + 0x58))((long)pvVar41 + 6);\n                lVar35 = (**(code **)(param_1[1] + 0x40))((long)pvVar41 + 8);\n                if (bVar2 == 0) {\n                  lStack_180 = lStack_168;\n                  lStack_168 = lStack_168 + lVar35;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack_180;\n                  if (uVar24 < uVar26) {\n                    pcVar34 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack_178 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar34);\n                      if (((sVar19 == 0) || (pcVar29 = pcVar34 + (sVar19 - 1), *pcVar29 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar23) < (long)pvVar41 + 0x10U)) goto LAB_001077fb;\n                      *pcVar29 = '\\0';\n                      pvVar41 = (void *)((long)pvVar41 + 0xc);\n                      iVar13 = (**(code **)(param_1[1] + 0x40))(pvVar41);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack_180);\n                      if (uVar26 <= uVar22) break;\n                      pcVar34 = (char *)concat(pcVar34,(long)__ptr_00 + uVar22,0);\n                      *pcVar29 = '\\\\';\n                      free(pcStack_178);\n                      pcStack_178 = pcVar34;\n                    }\n                    uVar18 = *param_1;\n                    pcVar29 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar29,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar35,pcVar34);\n                    cVar11 = FUNC_0011173a(puStack_1e8,pcStack_1d0,bVar2);\n                    if (cVar11 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack_178);\n                      free(pcStack_1d0);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *param_1;\n                    pcVar34 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar34,uVar18,puVar3,((long)pvVar41 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar41 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar42 = ppuVar42 + 2;\n    } while (ppuVar42 != (undefined **)&DAT_00125c90);\n    if ((pcStack_1d0 != (char *)0x0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) {\nLAB_00105981:\n      free(puStack_1e8);\n      goto LAB_00105588;\n    }\n    if (*(int *)(param_1[1] + 8) == 1) {\n      lVar35 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + uStack_1f8; plVar15 = plVar15 + 1) {\n        (**(code **)(param_1[1] + 0x218))(param_1,*plVar15,&pcStack_c8);\n        if ((char)uStack_c0 == '-') {\n          if (((lVar35 == 0) && (lVar35 = FUN_00112894(param_1,0,plVar6), lVar35 == 0)) ||\n             ((pcStack_b8 == (char *)0x0 || (*pcStack_b8 == '\\0')))) goto LAB_00105981;\n          pcVar34 = (char *)0x0;\n          pcVar29 = pcStack_b8;\n          while (((*pcVar29 != '\\0' && (sVar19 = strlen(pcVar29), pcVar29[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + uStack_1f8))) {\n            pcVar21 = (char *)xstrdup(pcVar29);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar29 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar34);\n            plVar15 = plVar15 + 1;\n            pcVar34 = pcVar29;\n          }\n          FUN_001088ae(uStack_b0,(int)sStack_ae,pcStack_c8,pcVar29);\n          local_1f0._0_1_ = FUNC_0011173a(puStack_1e8,lVar35,uStack_b0);\n          if ((char)local_1f0 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar35 != 0) && (cVar11 = FUN_0010c892(), cVar11 == '\\0')) goto LAB_00105981;\n    }\n    if ((char)local_1f0 == '\\0') {\n      if ((*(int *)(param_1[1] + 8) == 2) && (uStack_1f8 != 0)) {\n        pcStack_c8 = (char *)0x0;\n        plStack_148 = plVar6;\n        lStack_138 = 0;\n        lStack_130 = 0;\n        puVar37 = &uStack_c0;\n        for (lVar35 = 0x22; lVar35 != 0; lVar35 = lVar35 + -1) {\n          *(undefined4 *)puVar37 = 0;\n          puVar37 = (ulong *)((long)puVar37 + (ulong)bVar44 * -8 + 4);\n        }\n        cVar11 = '\\0';\n        piStack_1c0 = (int *)0x0;\n        uVar28 = 0;\n        pcStack_1d0 = (char *)0x0;\n        pcStack_178 = (char *)0xffffffffffffffff;\n        uStack_140 = uStack_1f8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)uStack_1f8 <= lStack_138) goto LAB_00105590;\n            lVar35 = plVar6[lStack_138];\n            cVar10 = bfd_coff_get_syment(param_1,lVar35,apvStack_128);\n            lVar16 = lStack_130;\n            if (cVar10 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar34 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar34 = *(char **)(lVar35 + 8);\n            puVar30 = (undefined8 *)0x0;\n            lStack_138 = lStack_138 + 1;\n            lStack_130 = (ulong)bStack_107 + 1 + lStack_130;\n            if (bStack_107 != 0) {\n              puVar30 = &uStack_f8;\n              cVar10 = bfd_coff_get_auxent(param_1,lVar35,0);\n              if (cVar10 == '\\0') {\n                uVar14 = bfd_get_error();\n                bfd_errmsg(uVar14);\n                pcVar34 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (pcStack_178 != (char *)lVar16) break;\n            if (bStack_108 != 0x67) {\n              cVar10 = FUN_0010bbd3(puStack_1e8);\n              if (cVar10 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack_178 = (char *)lStack_118;\n            cVar10 = FUN_0010bbd3(puStack_1e8);\n            if (cVar10 == '\\0') goto LAB_00105981;\n          }\n          uVar9 = uStack_10a;\n          if ((char)bStack_108 < '\\0') {\n            if (bStack_108 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8);\n            if (lVar23 == 0) break;\n            cVar10 = FUN_00112a33(&pcStack_c8,lVar35,lVar16);\n          }\n          else {\n            if (bStack_108 < 100) {\n              switch(bStack_108) {\n              case 3:\n                if (uStack_10a == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)uStack_10a & *(uint *)(param_1[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(param_1[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                piStack_1c0 = (int *)(**(code **)(param_1[1] + 0x238))(param_1);\n                uVar28 = (uint)uVar9;\n                pcStack_1d0 = pcVar34;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack_108) {\n            case 100:\n              iVar13 = strcmp(pcVar34,\".bb\");\n              if (iVar13 == 0) {\n                cVar10 = FUN_0010be88(puStack_1e8);\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar10 = FUN_0010bf20(puStack_1e8);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar34,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack_1d0 != (char *)0x0) {\n                  uVar39 = (int)uVar28 >> ((byte)*(undefined4 *)(param_1[0x22] + 0x44) & 0x1f);\n                  lVar16 = FUN_0010dac0(param_1,&plStack_148,&pcStack_c8,lVar16,\n                                        uVar39 ^ (uVar28 ^ uVar39) & *(uint *)(param_1[0x22] + 0x38)\n                                        ,puVar30,0,puStack_1e8);\n                  if ((lVar16 == 0) || (cVar11 = FUN_0010bc80(puStack_1e8), cVar11 == '\\0'))\n                  goto LAB_00105981;\n                  if (piStack_1c0 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack_107 != 0) {\n                      iVar13 = uStack_f0 - 1;\n                    }\n                    lVar35 = *(long *)(*(long *)(lVar35 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar32 = piStack_1c0[4];\n                      if (iVar32 == 0) break;\n                      cVar10 = FUN_0010bf86(puStack_1e8,iVar13 + iVar32,\n                                            *(long *)(piStack_1c0 + 6) + lVar35);\n                      piStack_1c0 = piStack_1c0 + 4;\n                      if (cVar10 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar28 = 0;\n                  piStack_1c0 = (int *)0x0;\n                  pcStack_1d0 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar34,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar11 != '\\0') {\n                  cVar11 = FUN_0010be1a(puStack_1e8);\n                  if (cVar11 == '\\0') goto LAB_00105981;\n                  cVar11 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar34 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar34,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar10 != '\\0');\n      }\n      else {\n        pcVar34 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar34,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_2 + 0x44) & 0x42) != 0) && ((*(uint *)(param_2 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_2 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (uStack_1f8 != 0) {\n        plVar6 = DAT_001278d0 + uStack_1f8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar28 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar28 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar28 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar35 = *(long *)(param_2 + 0x90); lVar35 != 0; lVar35 = *(long *)(lVar35 + 8)) {\n        if (*(long *)(lVar35 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar35 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      piStack_1c0._0_4_ = *(uint *)((long)param_1 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (uStack_1f8 == 0) {\n        uVar26 = 0;\n      }\n      else {\n        uVar26 = 0;\n        local_1f0 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[local_1f0];\n          pcVar5 = (code *)plVar4[4];\n          uVar28 = *(uint *)(plVar4 + 3);\n          pcVar34 = (char *)plVar4[1];\n          pcVar29 = pcVar34;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar32 = 0;\n            puVar30 = DAT_001279c8;\n            while ((iVar32 < iVar13 && (pcVar21 = (char *)puVar30[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar34);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar26 + 1;\n                  puVar30[5] = \"\";\n                  lVar35 = FUN_0011a2e0(puVar30);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar26] = lVar35;\n                  lVar35 = htab_elements(uVar18);\n                  if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar30 = (undefined8 *)*puVar30;\n              }\n              iVar32 = iVar32 + 1;\n            }\n          }\n          lVar35 = htab_elements(DAT_001278f0);\n          uVar22 = uVar26;\n          if ((lVar35 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar34 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar34 == '_') && (pcVar34[1] == '_')) &&\n                 (iVar13 = strcmp(pcVar34 + (pcVar34[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n                uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar18);\n              }\n            }\n            uStack_c0 = 0;\n            pcStack_c8 = pcVar34;\n            lVar35 = htab_find(DAT_001278f0);\n            if (((lVar35 == 0) || (pcVar29 = *(char **)(lVar35 + 8), pcVar34 == pcVar29)) &&\n               (pcVar29 = pcVar34, ppcVar40 = DAT_001278f8, (uVar28 & 0x100) != 0)) {\n              for (; ppcVar40 != (char **)0x0; ppcVar40 = (char **)ppcVar40[3]) {\n                iVar13 = strcmp(*ppcVar40,pcVar34);\n                if (iVar13 == 0) {\n                  pcVar29 = ppcVar40[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar29;\n            cVar11 = *pcVar29;\n            if (cVar11 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar34 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_2 + 8) + 0x1c) != '\\0')) {\n              lVar35 = param_1[1];\n              cVar11 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar11 = *pcVar34;\n          if (cVar11 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar34 = DAT_00127928;\n          lVar35 = param_1[1];\n          if (*(char *)(lVar35 + 0x1c) == cVar11) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar28 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              goto joined_r0x00106565;\n            }\n            cVar11 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            if (cVar11 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar29 = pcVar29 + 1;\n              plVar4[1] = (long)pcVar29;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar34);\n              pcVar34 = (char *)xmalloc(sVar19 + lVar35);\n              goto LAB_001066d0;\n            }\n            *pcVar29 = cVar11;\n            plVar4[1] = (long)pcVar29;\n            uVar26 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_2 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar26 = uVar22;\n              if (pcVar34 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar29);\n              sVar20 = strlen(pcVar34);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar34 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar34 = DAT_00127928;\n              if ((*(char *)(lVar35 + 0x1c) != '\\0') && (cVar11 != *(char *)(lVar35 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar29);\n              lVar35 = sVar19 + 2;\n              if (pcVar34 != (char *)0x0) goto LAB_001066bc;\n              pcVar34 = (char *)xmalloc(lVar35);\nLAB_001066d0:\n              pcVar21 = pcVar34 + 1;\n              *pcVar34 = *(char *)(*(long *)(param_2 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar29);\n            plVar4[1] = (long)pcVar34;\n            pcVar29 = pcVar34;\n            uVar26 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar28 & 0x20) == 0) &&\n             (((uVar28 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if ((((uint)piStack_1c0 == 0) &&\n                (((uVar28 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar35 = htab_find();\n                if (lVar35 == 0) goto LAB_00105c07;\n              }\n              else {\n                uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n                pcStack_c8 = pcVar29;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n                if ((char)uStack_c0 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar28 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar28 & 4) == 0) {\n                if (((*(int *)(param_1[1] + 8) != 2) ||\n                    (lVar35 = *(long *)(plVar4[4] + 0xd0), lVar35 == 0)) ||\n                   (*(long *)(lVar35 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar11 = bfd_is_local_label(param_1);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar11 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar11 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar35 = htab_find();\n            if (lVar35 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n            pcStack_c8 = pcVar29;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&pcStack_c8);\n            if ((char)uStack_c0 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar28 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar35 = htab_find();\n            if (lVar35 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar28 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar35 = htab_find();\n              if (lVar35 != 0) goto LAB_00105c2c;\n            }\n            else {\n              uStack_c0 = uStack_c0 & 0xffffffffffffff00;\n              pcStack_c8 = pcVar29;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&pcStack_c8);\n              if ((char)uStack_c0 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar11 = FUN_001159d0(plVar4[4]);\n            if (cVar11 == '\\0') {\n              if (((uVar28 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar28 & 0x82) != 0) {\n                  cVar11 = FUN_00115d70(pcVar29);\n                  if ((cVar11 == '\\0') &&\n                     ((lVar35 = htab_elements(DAT_001279f8), lVar35 == 0 ||\n                      (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar39 = *(uint *)(plVar4 + 3), (uVar39 & 0x200000) != 0)) ||\n                         (lVar35 = *plVar4, lVar35 == 0)) ||\n                        ((*(int *)(*(long *)(lVar35 + 8) + 8) != 5 ||\n                         (*(long *)(lVar35 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar39 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar39 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar28 & 1) != 0) && (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar11 = FUN_00115d70(pcVar29), cVar11 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar26] = (long)plVar4;\n              uVar26 = uVar26 + 1;\n            }\n          }\n          local_1f0 = local_1f0 + 1;\n        } while (uStack_1f8 != local_1f0);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar30 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar35 = 0; lVar35 < iVar13; lVar35 = lVar35 + 1) {\n          pcVar34 = (char *)puVar30[5];\n          if (pcVar34 == (char *)0x0) {\n            plVar6 = plVar15 + uVar26;\n            uVar26 = uVar26 + 1;\n            lVar16 = FUN_0011a2e0(puVar30,param_2);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar34 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar34);\n          }\n          puVar30 = (undefined8 *)*puVar30;\n        }\n      }\n      bVar43 = DAT_001279a0 == '\\0';\n      plVar15[uVar26] = 0;\n      if ((bVar43) || (puStack_1e8 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        uStack_1f8 = uVar26 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)(*(undefined8 **)(param_2 + 8) + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        apvStack_128[0] = (void *)0x0;\n        cVar11 = FUN_0011378f(param_2,puStack_1e8,&plStack_148,&uStack_f8,apvStack_128,&pcStack_c8);\n        if (cVar11 != '\\0') {\n          lVar35 = bfd_make_section_with_flags(param_2,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_2,\".stabstr\",0x2108);\n          if ((((lVar35 == 0) || (lVar16 == 0)) ||\n              (cVar11 = bfd_set_section_size(lVar35,uStack_f8), cVar11 == '\\0')) ||\n             (cVar11 = bfd_set_section_size(lVar16,pcStack_c8), cVar11 == '\\0')) {\n            pcVar34 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar35 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar11 = bfd_set_section_contents(param_2,lVar35,plStack_148,0,uStack_f8);\n            if ((cVar11 != '\\0') &&\n               (cVar11 = bfd_set_section_contents(param_2,lVar16,apvStack_128[0],0,pcStack_c8),\n               cVar11 != '\\0')) {\n              free(puStack_1e8);\n              goto LAB_00105cfa;\n            }\n            pcVar34 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,0,uVar18);\n          free(apvStack_128[0]);\n          free(puStack_1e8);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = **(undefined8 **)(param_2 + 8);\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_2,0,uVar17,uVar18);\n      }\n      free(puStack_1e8);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(param_1,FUN_00116030,DAT_001278d0);\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar35 = htab_elements(DAT_00127a18);\n    if (((lVar35 != 0) ||\n        (((((((lVar35 = htab_elements(DAT_00127a28), lVar35 != 0 ||\n              (lVar35 = htab_elements(DAT_00127a08), lVar35 != 0)) ||\n             (lVar35 = htab_elements(DAT_00127a00), lVar35 != 0)) ||\n            ((lVar35 = htab_elements(DAT_001279f8), lVar35 != 0 ||\n             (lVar35 = htab_elements(DAT_001279f0), lVar35 != 0)))) ||\n           (lVar35 = htab_elements(DAT_001278f0), lVar35 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_2,DAT_001278c8,uStack_1f8 & 0xffffffff);\n    bfd_map_over_sections(param_1,FUN_00115dc0,param_2);\n    bfd_map_over_sections(param_1,FUN_00116110,param_2);\n    for (puVar30 = DAT_001279e0; puVar38 = DAT_001279d8, puVar30 != (undefined8 *)0x0;\n        puVar30 = (undefined8 *)*puVar30) {\n      cVar11 = bfd_set_section_contents(param_2,puVar30[5],puVar30[4],0,puVar30[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,puVar30[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar11 = bfd_set_section_contents(param_2,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar11 == '\\0') {\n        FUN_001126c0(0,param_2,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *param_1;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar33 = (long **)0x0;\n      for (puVar30 = *(undefined8 **)(param_2 + 0x90); puVar30 != (undefined8 *)0x0;\n          puVar30 = (undefined8 *)puVar30[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_2 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar30[0x1a] + 4) == 7 &&\n            (cVar11 = FUN_00113fb0(*puVar30,\".gnu.build.attributes\"), cVar11 != '\\0')))) {\n          if (pplVar33 == (long **)0x0) {\n            pplVar33 = __ptr_01;\n          }\n          pplVar27 = __ptr_01;\n          if ((undefined8 *)(*pplVar33)[0xc] == puVar30) {\nLAB_0010625f:\n            pcVar34 = \"error: failed to merge notes\";\n            if (pplVar33[1] != (long *)0x0) {\n              cVar11 = bfd_set_section_contents(param_2,puVar30,pplVar33[1],0,pplVar33[2]);\n              if (cVar11 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_2,puVar30,uVar18);\n                return 0;\n              }\n              pplVar33 = (long **)pplVar33[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar33 = pplVar27;\n              if ((undefined8 *)(*pplVar27)[0xc] == puVar30) goto LAB_0010625f;\n              pplVar33 = (long **)pplVar27[3];\n              pplVar27 = pplVar33;\n            } while (pplVar33 != (long **)0x0);\n            pcVar34 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar34,5);\n          FUN_001126c0(0,param_2,puVar30,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar33 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar33;\n      } while (pplVar33 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar11 = bfd_fill_in_gnu_debuglink_section(param_2,lStack_190), lVar35 = DAT_00127a30,\n       cVar11 != '\\0')) {\n      uVar28 = (**(code **)(*(long *)(param_2 + 8) + 0x140))(param_1);\n      uVar26 = (ulong)uVar28;\n      if ((char)uVar28 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar26;\n        }\n        cVar11 = bfd_alt_mach_code(param_2,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar11 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(*(long *)(param_2 + 8) + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(*(long *)(param_2 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar26;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar26;\n        }\n        return uVar26;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_2,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_2,0,uVar18,lVar35);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(param_1[1] + 8) == 5) && (*(int *)((long)pplVar33[0x1a] + 4) == 7)) &&\n      (cVar11 = FUN_00113fb0(*pplVar33), cVar11 != '\\0')) &&\n     ((pplVar33[0xc] != (long *)0x0 && (plVar6 = pplVar33[8], plVar6 != (long *)0x0)))) {\n    pplVar27 = (long **)xmalloc(0x20);\n    pplVar27[1] = (long *)0x0;\n    cVar11 = bfd_get_full_section_contents(param_1,pplVar33,pplVar27 + 1);\n    if (cVar11 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0,param_1,pplVar33);\n      free(pplVar27);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0(param_1,pplVar33,plVar6);\n      pplVar27[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar11 = bfd_set_section_size(pplVar33[0xc]), cVar11 != '\\0')) {\n        pplVar27[3] = (long *)__ptr_01;\n        *pplVar27 = (long *)pplVar33;\n        __ptr_01 = pplVar27;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_2,pplVar33);\n        free(pplVar27[1]);\n        free(pplVar27);\n      }\n    }\n  }\n  pplVar33 = (long **)pplVar33[1];\n  puVar30 = DAT_001279d0;\n  if (pplVar33 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001125fa",
                "bfd_set_format",
                "FUN_00119ed0",
                "FUN_001126c0",
                "FUN_00107976"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00114e50",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "FUNC_00114e50"
        },
        "FUN_00115d00": {
            "renaming": {
                "FUN_00115d00": "find_matching_value_00115d00",
                "param_1": "inputParam",
                "param_2": "binaryParam",
                "uVar1": "value",
                "lVar2": "matchingValue"
            },
            "code": "\nlong findMatchingValue_00115d00(long inputParam,long binaryParam)\n\n{\n  uint value;\n  long matchingValue;\n  \n  matchingValue = DAT_001278d0;\n  if (DAT_001278d0 != 0) {\n    if (*(int *)(*(long *)(binaryParam + 8) + 8) == 5) {\n      if (*(int *)(inputParam + 0x28) == *(int *)(*(long *)(binaryParam + 0x110) + 0xd40)) {\n        value = *(uint *)(inputParam + 0x2c);\n        if (value == 0) {\n          matchingValue = 0;\n        }\n        else if ((ulong)value <\n                 *(ulong *)(*(long *)(binaryParam + 0x110) + 0x88) /\n                 (ulong)*(byte *)(*(long *)(*(long *)(*(long *)(binaryParam + 8) + 0x380) + 0x340) + 5))\n        {\n          matchingValue = *(long *)(DAT_001278d0 + (ulong)(value - 1) * 8);\n        }\n        else {\n          matchingValue = 0;\n        }\n      }\n      else {\n        matchingValue = 0;\n      }\n    }\n    else {\n      matchingValue = 0;\n    }\n  }\n  return matchingValue;\n}\n\n",
            "called": [
                "FUN_001082c3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d00",
            "calling": [
                "FUN_00108179",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "find_matching_value_00115d00"
        },
        "FUN_00113c43": {
            "renaming": {
                "FUN_00113c43": "initialize_data_structure_00113c43",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "inputParam3",
                "param_4": "inputParam4",
                "param_5": "inputParam5",
                "param_6": "inputParam6",
                "lVar1": "memoryAllocated",
                "plVar2": "allocatedMemoryPtr",
                "auVar3": "returnValue"
            },
            "code": "\nundefined  [16]\ninitializeDataStructure_00113c43(long inputParam1,long inputParam2,long inputParam3,long inputParam4,undefined inputParam5,\n            undefined8 inputParam6)\n\n{\n  long memoryAllocated;\n  long *allocatedMemoryPtr;\n  undefined returnValue [16];\n  \n  if ((inputParam1 != 0) && (inputParam2 != 0)) {\n    memoryAllocated = FUN_00112904(0x10,0);\n    if (memoryAllocated != 0) {\n      allocatedMemoryPtr = (long *)xmalloc(0x28);\n      *(undefined4 *)((long)allocatedMemoryPtr + 0x21) = 0;\n      *allocatedMemoryPtr = inputParam1;\n      *(undefined4 *)((long)allocatedMemoryPtr + 0x24) = 0;\n      allocatedMemoryPtr[1] = inputParam2;\n      allocatedMemoryPtr[2] = inputParam3;\n      allocatedMemoryPtr[3] = inputParam4;\n      *(undefined *)(allocatedMemoryPtr + 4) = inputParam5;\n      *(long **)(memoryAllocated + 0x10) = allocatedMemoryPtr;\n      goto LAB_00113caa;\n    }\n  }\n  memoryAllocated = 0;\nLAB_00113caa:\n  returnValue._8_8_ = inputParam6;\n  returnValue._0_8_ = memoryAllocated;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113c43",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113c43"
        },
        "FUN_00112a33": {
            "renaming": {
                "FUN_00112a33": "perform_operation_00112a33",
                "param_1": "input1",
                "param_2": "address",
                "param_3": "input2",
                "param_4": "opcode",
                "param_5": "data",
                "param_6": "size",
                "param_7": "flags",
                "uVar1": "result",
                "lVar2": "returnValue",
                "plVar3": "pointer"
            },
            "code": "\nbool performOperation_00112a33(undefined8 input1,long address,undefined8 input2,byte opcode,undefined8 data\n                 ,undefined8 size,uint flags)\n\n{\n  undefined result;\n  long returnValue;\n  long *pointer;\n  \n  if (opcode < 0x12) {\n    if (opcode != 0) {\n      switch(opcode) {\n      case 1:\n        result = FUN_0010c05d(data,*(undefined8 *)(address + 8),size,4,\n                             *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 2:\n        goto switchD_00112a73_caseD_2;\n      case 3:\n        result = FUN_0010c05d(data,*(undefined8 *)(address + 8),size,(flags & 0xff) + 2,\n                             *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 4:\n        result = FUN_0010c05d(data,*(undefined8 *)(address + 8),size,5,\n                             *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 9:\n        result = FUN_0010bd62(data,*(undefined8 *)(address + 8),size,1,\n                             *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      case 10:\n      case 0xc:\n      case 0xf:\n        returnValue = FUN_0010c6be(data,*(undefined8 *)(address + 8));\n        if (returnValue == 0) {\n          return false;\n        }\n        pointer = (long *)FUN_0010da0b(input1,input2);\n        *pointer = returnValue;\n        break;\n      case 0xd:\n        returnValue = FUN_0010c218(data,*(undefined8 *)(address + 8));\n        return returnValue != 0;\n      case 0x11:\n        result = FUN_0010bd62(data,*(undefined8 *)(address + 8),size,2,\n                             *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30)\n                            );\n        return (bool)result;\n      }\n    }\n  }\n  else if (opcode == 0x7f) {\nswitchD_00112a73_caseD_2:\n    result = FUN_0010c05d(data,*(undefined8 *)(address + 8),size,1,\n                         *(long *)(address + 0x10) + *(long *)(*(long *)(address + 0x20) + 0x30));\n    return (bool)result;\n  }\n  return true;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010da0b",
                "FUN_0010c6be",
                "FUN_0010bd62"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112a33",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "perform_operation_00112a33"
        },
        "bfd_hash_table_init": {
            "renaming": {},
            "code": "\nvoid bfd_hash_table_init(void)\n\n{\n  bfd_hash_table_init();\n  return;\n}\n\n",
            "called": [
                "bfd_hash_table_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104830",
            "calling": [
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "bfd_hash_table_init"
        },
        "FUN_0010c2d2": {
            "renaming": {
                "FUN_0010c2d2": "get_data_type_0010c2d2",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "uVar1": "typeIndex",
                "pcVar2": "dataTypeString",
                "uVar3": "dataType",
                "lVar4": "result",
                "plVar5": "ptrValue",
                "uVar6": "uValue"
            },
            "code": "\n\n\nlong getDataType_0010c2d2(undefined8 param1,long param2,int *param3)\n\n{\n  uint typeIndex;\n  char *dataTypeString;\n  undefined8 dataType;\n  long result;\n  long *ptrValue;\n  uint uValue;\n  \n  if ((*param3 == 0) && (typeIndex = param3[1], (int)typeIndex < 0)) {\n    uValue = ~typeIndex;\n    if (uValue < 0x22) {\n      result = *(long *)(param2 + 0x90 + (ulong)uValue * 8);\n      if (result == 0) {\n        switch(uValue) {\n        case 1:\n          dataType = FUN_00113dfe(1,0);\n          dataTypeString = \"char\";\n          break;\n        case 2:\n          dataType = FUN_00113dfe(2,0);\n          dataTypeString = \"short\";\n          break;\n        case 3:\n          dataType = FUN_00113dfe(4,0);\n          dataTypeString = \"long\";\n          break;\n        case 4:\n          dataType = FUN_00113dfe(1,1);\n          dataTypeString = \"unsigned char\";\n          break;\n        case 5:\n          dataType = FUN_00113dfe(1,0);\n          dataTypeString = \"signed char\";\n          break;\n        case 6:\n          dataType = FUN_00113dfe(2,1);\n          dataTypeString = \"unsigned short\";\n          break;\n        case 7:\n          dataType = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned int\";\n          break;\n        case 8:\n          dataType = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned\";\n          break;\n        case 9:\n          dataType = FUN_00113dfe(4,1);\n          dataTypeString = \"unsigned long\";\n          break;\n        case 10:\n          dataType = FUN_00113e17();\n          dataTypeString = \"void\";\n          break;\n        case 0xb:\n          dataType = FUN_00113df2(4);\n          dataTypeString = \"float\";\n          break;\n        case 0xc:\n          dataType = FUN_00113df2(8);\n          dataTypeString = \"double\";\n          break;\n        case 0xd:\n          dataType = FUN_00113df2(8);\n          dataTypeString = \"long double\";\n          break;\n        case 0xe:\n          dataType = FUN_00113dfe(4,0);\n          dataTypeString = \"integer\";\n          break;\n        case 0xf:\n          dataType = FUN_00112904(6,4);\n          dataTypeString = \"boolean\";\n          break;\n        case 0x10:\n          dataType = FUN_00113df2(4);\n          dataTypeString = \"short real\";\n          break;\n        case 0x11:\n          dataType = FUN_00113df2(8);\n          dataTypeString = \"real\";\n          break;\n        case 0x12:\n          dataTypeString = \"stringptr\";\n          dataType = 0;\n          break;\n        case 0x13:\n          dataType = FUN_00113dfe(1,1);\n          dataTypeString = \"character\";\n          break;\n        case 0x14:\n          dataType = FUN_00112904(6,1);\n          dataTypeString = \"logical*1\";\n          break;\n        case 0x15:\n          dataType = FUN_00112904(6,2);\n          dataTypeString = \"logical*2\";\n          break;\n        case 0x16:\n          dataType = FUN_00112904(6,4);\n          dataTypeString = \"logical*4\";\n          break;\n        case 0x17:\n          dataType = FUN_00112904(6,4);\n          dataTypeString = \"logical\";\n          break;\n        case 0x18:\n          dataType = FUN_00112904(5,8);\n          dataTypeString = \"complex\";\n          break;\n        case 0x19:\n          dataType = FUN_00112904(5,0x10);\n          dataTypeString = \"double complex\";\n          break;\n        case 0x1a:\n          dataType = FUN_00113dfe(1,0);\n          dataTypeString = \"integer*1\";\n          break;\n        case 0x1b:\n          dataType = FUN_00113dfe(2,0);\n          dataTypeString = \"integer*2\";\n          break;\n        case 0x1c:\n          dataType = FUN_00113dfe(4,0);\n          dataTypeString = \"integer*4\";\n          break;\n        case 0x1d:\n          dataType = FUN_00113dfe(2,0);\n          dataTypeString = \"wchar\";\n          break;\n        case 0x1e:\n          dataType = FUN_00113dfe(8,0);\n          dataTypeString = \"long long\";\n          break;\n        case 0x1f:\n          dataType = FUN_00113dfe(8,1);\n          dataTypeString = \"unsigned long long\";\n          break;\n        case 0x20:\n          dataType = FUN_00112904(6,8);\n          dataTypeString = \"logical*8\";\n          break;\n        case 0x21:\n          dataType = FUN_00113dfe(8,0);\n          dataTypeString = \"integer*8\";\n          break;\n        default:\n          dataType = FUN_00113dfe(4,0);\n          dataTypeString = \"int\";\n        }\n        result = FUN_0010c218(param1,dataTypeString,dataType);\n        *(long *)(param2 + 0x90 + (ulong)uValue * 8) = result;\n        return result;\n      }\n      return result;\n    }\n    dataTypeString = (char *)dcgettext(0,\"Unrecognized XCOFF type %d\\n\",5);\n    fprintf(_stderr,dataTypeString,(ulong)typeIndex);\n  }\n  else {\n    ptrValue = (long *)FUN_00109022(param2);\n    if (ptrValue != (long *)0x0) {\n      if (*ptrValue == 0) {\n        result = FUN_00113e23(ptrValue,0);\n        return result;\n      }\n      return *ptrValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113df2",
                "FUN_00109022",
                "fprintf",
                "FUN_0010c218",
                "FUN_00112904",
                "FUN_00113dfe",
                "FUN_00113e17",
                "FUN_00113e23"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c2d2",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "get_data_type_0010c2d2"
        },
        "FUN_0010e07c": {
            "renaming": {
                "FUN_0010e07c": "reversed_function_0010e07c",
                "param_1": "param_ptr",
                "param_2": "array_ptr",
                "lVar1": "length_var",
                "lVar2": "value_var",
                "lVar3": "count_var",
                "cVar4": "char_var",
                "uVar5": "error_var",
                "__ptr": "allocated_ptr",
                "uVar6": "result_var",
                "uVar7": "errmsg_var",
                "puVar8": "dynamic_ptr",
                "pcVar9": "error_string",
                "puVar10": "auxent_ptr",
                "uVar11": "var11",
                "lVar12": "var12",
                "iVar13": "var13",
                "iVar14": "var14",
                "local_a8": "local_var_a8",
                "uStack_a4": "local_var_a4",
                "uStack_a0": "local_var_a0",
                "uStack_9c": "local_var_9c",
                "local_88": "local_array_88",
                "local_6a": "local_var_6a",
                "local_68": "local_var_68",
                "local_67": "local_var_67",
                "local_60": "local_array_60",
                "local_56": "local_var_56"
            },
            "code": "\nundefined8\nreversed_function_0010e07c(undefined8 param_ptr,long *array_ptr,undefined8 param_3,int param_4,long param_5,\n            undefined8 param_6)\n\n{\n  long length_var;\n  long value_var;\n  long count_var;\n  char char_var;\n  undefined4 error_var;\n  void *allocated_ptr;\n  undefined8 result_var;\n  undefined8 errmsg_var;\n  undefined4 *dynamic_ptr;\n  char *error_string;\n  undefined *auxent_ptr;\n  uint var11;\n  long var12;\n  int var13;\n  int var14;\n  undefined4 local_var_a8;\n  undefined4 local_var_a4;\n  undefined4 local_var_a0;\n  undefined4 local_var_9c;\n  undefined local_array_88 [30];\n  undefined2 local_var_6a;\n  byte local_var_68;\n  byte local_var_67;\n  undefined local_array_60 [10];\n  ushort local_var_56;\n  \n  var14 = 10;\n  var12 = 0;\n  length_var = *(long *)(param_5 + 0x18);\n  allocated_ptr = (void *)xmalloc(0x50);\n  while ((array_ptr[3] < length_var && (array_ptr[2] < array_ptr[1]))) {\n    value_var = *(long *)(*array_ptr + array_ptr[2] * 8);\n    char_var = bfd_coff_get_syment(param_ptr,value_var,local_array_88);\n    if (char_var == '\\0') {\n      error_var = bfd_get_error();\n      result_var = bfd_errmsg(error_var);\n      error_string = \"bfd_coff_get_syment failed: %s\";\nLAB_0010e18d:\n      errmsg_var = dcgettext(0,error_string,5);\n      FUN_00119ed0(errmsg_var,result_var);\n      free(allocated_ptr);\n      return 0;\n    }\n    count_var = array_ptr[3];\n    auxent_ptr = (undefined *)0x0;\n    array_ptr[2] = array_ptr[2] + 1;\n    array_ptr[3] = count_var + 1 + (ulong)local_var_67;\n    if (local_var_67 != 0) {\n      auxent_ptr = local_array_60;\n      char_var = bfd_coff_get_auxent(param_ptr,value_var,0,auxent_ptr);\n      if (char_var == '\\0') {\n        error_var = bfd_get_error();\n        result_var = bfd_errmsg(error_var);\n        error_string = \"bfd_coff_get_auxent failed: %s\";\n        goto LAB_0010e18d;\n      }\n    }\n    if (local_var_68 == 0x12) {\n      var11 = (uint)local_var_56;\n      var13 = (int)*(undefined8 *)(value_var + 0x10) +\n               (int)*(undefined8 *)(*(long *)(value_var + 0x20) + 0x30);\n    }\n    else {\n      if (local_var_68 < 0x13) {\n        if ((local_var_68 == 8) || (local_var_68 == 0xb)) {\n          var11 = 0;\n          var13 = ((int)*(undefined8 *)(value_var + 0x10) +\n                   (int)*(undefined8 *)(*(long *)(value_var + 0x20) + 0x30)) * 8;\n          goto LAB_0010e214;\n        }\n      }\n      else if (local_var_68 == 0x66) break;\n      var11 = 0;\n      var13 = 0;\n    }\nLAB_0010e214:\n    errmsg_var = FUN_0010dac0(param_ptr,array_ptr,param_3,count_var,local_var_6a,auxent_ptr,1);\n    result_var = *(undefined8 *)(value_var + 8);\n    dynamic_ptr = (undefined4 *)xmalloc(0x20);\n    local_var_a8 = (undefined4)result_var;\n    local_var_a4 = (undefined4)((ulong)result_var >> 0x20);\n    local_var_a0 = (undefined4)errmsg_var;\n    local_var_9c = (undefined4)((ulong)errmsg_var >> 0x20);\n    *(undefined8 *)(dynamic_ptr + 5) = 0;\n    dynamic_ptr[6] = var13;\n    dynamic_ptr[7] = var11;\n    dynamic_ptr[4] = 0;\n    *dynamic_ptr = local_var_a8;\n    dynamic_ptr[1] = local_var_a4;\n    dynamic_ptr[2] = local_var_a0;\n    dynamic_ptr[3] = local_var_9c;\n    if (var14 <= (int)var12 + 1) {\n      var14 = var14 + 10;\n      allocated_ptr = (void *)xrealloc(allocated_ptr,(long)var14 << 3,dynamic_ptr,0,param_6);\n    }\n    *(undefined4 **)((long)allocated_ptr + var12 * 8) = dynamic_ptr;\n    var12 = var12 + 1;\n  }\n  *(undefined8 *)((long)allocated_ptr + (long)(int)var12 * 8) = 0;\n  result_var = FUN_00113da9(param_4 == 8,*(undefined2 *)(param_5 + 10),allocated_ptr);\n  return result_var;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_coff_get_auxent",
                "FUN_00113da9",
                "xmalloc",
                "bfd_get_error",
                "free",
                "FUN_00119ed0",
                "xrealloc",
                "bfd_errmsg",
                "FUN_0010dac0",
                "bfd_coff_get_syment"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e07c",
            "calling": [
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "reversed_function_0010e07c"
        },
        "bfd_is_local_label": {
            "renaming": {},
            "code": "\nvoid bfd_is_local_label(void)\n\n{\n  bfd_is_local_label();\n  return;\n}\n\n",
            "called": [
                "bfd_is_local_label"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048a0",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_is_local_label"
        },
        "FUN_001082c3": {
            "renaming": {
                "FUN_001082c3": "initialize_001082c3",
                "undefined8": "void"
            },
            "code": "\nvoid initialize_001082c3(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082c3",
            "calling": [
                "FUN_00115d00"
            ],
            "imported": false,
            "current_name": "initialize_001082c3"
        },
        "FUN_00114460": {
            "renaming": {
                "FUN_00114460": "read_and_process_file_00114460",
                "param_1": "filePath",
                "param_2": "hashTable",
                "param_3": "fileContent",
                "iVar1": "lineCount",
                "piVar2": "errorCodePtr",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "__n": "fileSize",
                "__ptr": "buffer",
                "__stream": "filePointer",
                "sVar5": "bytesRead",
                "ppbVar6": "hashTableSlotPtr",
                "pbVar7": "currentCharPtr",
                "bVar8": "currentChar",
                "pbVar9": "nextCharPtr",
                "pbVar10": "currentLinePtr",
                "pbVar11": "nextLinePtr",
                "pbVar12": "bufferPtr"
            },
            "code": "\nvoid readAndProcessFile_00114460(char *filePath,undefined8 hashTable,byte **fileContent)\n\n{\n  int lineCount;\n  int *errorCodePtr;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  size_t fileSize;\n  byte *buffer;\n  FILE *filePointer;\n  size_t bytesRead;\n  byte **hashTableSlotPtr;\n  byte *currentCharPtr;\n  byte currentChar;\n  byte *nextCharPtr;\n  byte *currentLinePtr;\n  byte *nextLinePtr;\n  byte *bufferPtr;\n  \n  fileSize = FUN_00113f50();\n  if (fileSize == 0) {\n    DAT_00127a40 = 1;\n  }\n  else {\n    buffer = (byte *)xmalloc(fileSize + 2);\n    filePointer = fopen(filePath,\"r\");\n    if (filePointer == (FILE *)0x0) {\n      errorCodePtr = __errno_location();\n      errorMessage = strerror(*errorCodePtr);\n      translatedErrorMessage = dcgettext(0,\"cannot open \\'%s\\': %s\",5);\n                    \n      FUN_00119dd0(translatedErrorMessage,filePath,errorMessage);\n    }\n    bytesRead = fread(buffer,1,fileSize,filePointer);\n    if ((bytesRead == 0) || (lineCount = ferror(filePointer), lineCount != 0)) {\n      translatedErrorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(translatedErrorMessage,filePath);\n    }\n    lineCount = 1;\n    fclose(filePointer);\n    *(undefined2 *)(buffer + fileSize) = 10;\n    currentChar = *buffer;\n    bufferPtr = buffer;\n    while (currentLinePtr = bufferPtr, currentChar != 0) {\n      for (; currentChar = *currentLinePtr, nextLinePtr = currentLinePtr, currentChar != 10; currentLinePtr = currentLinePtr + 1) {\n        if ((char)currentChar < '\\v') {\n          if (currentChar == 0) {\n            nextCharPtr = currentLinePtr + 1;\n            goto LAB_00114553;\n          }\n        }\n        else {\n          if (currentChar == 0xd) {\n            *currentLinePtr = 0;\n            nextCharPtr = currentLinePtr + 1;\n            if (currentLinePtr[1] == 10) {\n              nextCharPtr = currentLinePtr + 2;\n              nextLinePtr = currentLinePtr + 1;\n            }\n            goto LAB_00114553;\n          }\n          if (currentChar == 0x23) {\n            FUN_00104d1c();\n            return;\n          }\n        }\n      }\n      *currentLinePtr = 0;\n      if (currentLinePtr[1] == 0xd) {\n        nextLinePtr = currentLinePtr + 1;\n        nextCharPtr = currentLinePtr + 2;\n      }\n      else {\n        nextCharPtr = currentLinePtr + 1;\n      }\nLAB_00114553:\n      currentChar = *bufferPtr;\n      while ((currentChar == 0x20 || (currentLinePtr = bufferPtr, currentChar == 9))) {\n        currentLinePtr = bufferPtr + 1;\n        bufferPtr = bufferPtr + 1;\n        currentChar = *currentLinePtr;\n      }\n      do {\n        if ((currentChar == 10) || (currentChar == 0xd)) goto LAB_00114676;\n        if (currentChar == 0) goto LAB_00114599;\n        currentChar = currentLinePtr[1];\n        currentLinePtr = currentLinePtr + 1;\n      } while ((currentChar != 0x20) && (currentChar != 9));\n      if ((char)currentChar < '\\x0e') {\nLAB_00114676:\n        if ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n      }\n      else {\nLAB_001145e6:\n        currentChar = currentLinePtr[1];\n        if ((((((currentChar == 9) || (currentChar == 0x20)) &&\n              ((currentChar = currentLinePtr[2], currentChar == 9 || (currentChar == 0x20)))) &&\n             ((currentChar = currentLinePtr[3], currentChar == 9 || (currentChar == 0x20)))) &&\n            ((currentChar = currentLinePtr[4], currentChar == 9 || (currentChar == 0x20)))) &&\n           ((currentChar = currentLinePtr[5], currentChar == 9 || (currentChar == 0x20)))) {\n          currentChar = currentLinePtr[6];\n          currentCharPtr = currentLinePtr + 6;\n          if ((currentChar == 9) || (currentChar == 0x20)) {\n            do {\n              do {\n                currentChar = currentCharPtr[1];\n                currentCharPtr = currentCharPtr + 1;\n              } while (currentChar == 0x20);\n            } while (currentChar == 9);\n          }\n        }\n        if ((0xd < currentChar) || ((-0x2402L >> (currentChar & 0x3f) & 1U) != 0)) {\n          translatedErrorMessage = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n          FUN_00119ed0(translatedErrorMessage,filePath,lineCount);\n        }\n      }\nLAB_00114599:\n      *currentLinePtr = 0;\n      if (bufferPtr < currentLinePtr) {\n        hashTableSlotPtr = (byte **)htab_find_slot(hashTable,bufferPtr,1);\n        *hashTableSlotPtr = bufferPtr;\n      }\n      lineCount = lineCount + 1;\n      bufferPtr = nextCharPtr;\n      currentChar = nextLinePtr[1];\n    }\n    *fileContent = buffer;\n  }\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "__errno_location",
                "FUN_00113f50",
                "FUN_00119dd0",
                "fclose",
                "strerror",
                "ferror",
                "fread",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114460",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_process_file_00114460"
        },
        "FUN_0010a94e": {
            "renaming": {
                "FUN_0010a94e": "generate_formatted_string_0010a94e",
                "param_1": "data",
                "param_2": "string1",
                "param_3": "string2",
                "param_4": "option",
                "cVar1": "flag",
                "lVar2": "ptr",
                "__s": "result",
                "sVar3": "length1",
                "sVar4": "length2",
                "sVar5": "length3",
                "sVar6": "length4",
                "pcVar7": "formattedString",
                "uVar8": "returnValue",
                "pcVar9": "optionFlag"
            },
            "code": "\nundefined8 generateFormattedString_0010a94e(long data,char *string1,char *string2,int option)\n\n{\n  char flag;\n  long ptr;\n  char *result;\n  size_t length1;\n  size_t length2;\n  size_t length3;\n  size_t length4;\n  char *formattedString;\n  undefined8 returnValue;\n  char *optionFlag;\n  \n  flag = *(char *)(*(long *)(data + 0x60) + 0x1c);\n  result = (char *)FUN_00109b2f();\n  formattedString = *(char **)(*(long *)(data + 0x60) + 0x20);\n  if (formattedString == (char *)0x0) {\n    returnValue = 0;\n  }\n  else {\n    length1 = strlen(formattedString);\n    length2 = strlen(string1);\n    length3 = strlen(result);\n    length4 = strlen(string2);\n    formattedString = (char *)xmalloc(length1 + 10 + length2 + length3 + length4);\n    if (option == 1) {\n      optionFlag = \"/1\";\n    }\n    else {\n      optionFlag = \"/0\";\n      if ((option != 2) && (optionFlag = \"\", option != 0)) {\n                    \n        abort();\n      }\n    }\n    sprintf(formattedString,\"%s%s:%s%s:%s;\",*(undefined8 *)(*(long *)(data + 0x60) + 0x20),string1,optionFlag,\n            result,string2,*(long *)(data + 0x60));\n    free(*(void **)(*(long *)(data + 0x60) + 0x20));\n    ptr = *(long *)(data + 0x60);\n    *(char **)(ptr + 0x20) = formattedString;\n    if (flag != '\\0') {\n      *(undefined *)(ptr + 0x1c) = 1;\n    }\n    returnValue = CONCAT71((int7)((ulong)ptr >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a94e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010a94e"
        },
        "bfd_set_file_flags": {
            "renaming": {},
            "code": "\nvoid bfd_set_file_flags(void)\n\n{\n  bfd_set_file_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_set_file_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104630",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_file_flags"
        },
        "bfd_create_gnu_debuglink_section": {
            "renaming": {},
            "code": "\nvoid bfd_create_gnu_debuglink_section(void)\n\n{\n  bfd_create_gnu_debuglink_section();\n  return;\n}\n\n",
            "called": [
                "bfd_create_gnu_debuglink_section"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104180",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "bfd_create_gnu_debuglink_section"
        },
        "FUN_00113b1e": {
            "renaming": {
                "FUN_00113b1e": "extract_value_00113b1e",
                "param_1": "inputValue",
                "param_2": "unusedValue",
                "param_3": "zeroValue",
                "param_4": "outputValue",
                "auVar1": "result1",
                "piVar2": "ptr",
                "uVar3": "value",
                "auVar4": "result2"
            },
            "code": "\nundefined  [16] extractValue_00113b1e(long inputValue,undefined8 unusedValue,ulong zeroValue,undefined8 outputValue)\n\n{\n  undefined result1 [16];\n  int *ptr;\n  undefined8 value;\n  undefined result2 [16];\n  \n  if (inputValue != 0) {\n    ptr = (int *)FUN_00112b6e(inputValue,0);\n    if ((ptr == (int *)0x0) || (3 < *ptr - 7U)) {\n      value = 0;\n    }\n    else {\n      value = **(undefined8 **)(ptr + 4);\n    }\n    result2._8_8_ = outputValue;\n    result2._0_8_ = value;\n    return result2;\n  }\n  result1._8_8_ = 0;\n  result1._0_8_ = zeroValue;\n  return result1 << 0x40;\n}\n\n",
            "called": [
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b1e",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010d559"
            ],
            "imported": false,
            "current_name": "extract_value_00113b1e"
        },
        "FUN_0010a0e9": {
            "renaming": {
                "FUN_0010a0e9": "send_request_0010a0e9",
                "param_1": "dataStruct",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "ptrValue",
                "uVar2": "returnValue",
                "__s": "string",
                "sVar3": "stringLength",
                "__s_00": "formattedString"
            },
            "code": "\nundefined4 sendRequest_0010a0e9(long dataStruct,undefined8 value1,undefined8 value2)\n\n{\n  undefined ptrValue;\n  undefined4 returnValue;\n  char *string;\n  size_t stringLength;\n  char *formattedString;\n  \n  ptrValue = *(undefined *)(*(long *)(dataStruct + 0x60) + 0x1c);\n  returnValue = *(undefined4 *)(*(long *)(dataStruct + 0x60) + 0x18);\n  string = (char *)FUN_00109b2f();\n  stringLength = strlen(string);\n  formattedString = (char *)xmalloc(stringLength + 100);\n  sprintf(formattedString,\"r%s;%ld;%ld;\",string,value1,value2);\n  free(string);\n  returnValue = FUN_00109b52(dataStruct,formattedString,0,ptrValue,returnValue);\n  if ((char)returnValue != '\\0') {\n    free(formattedString);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a0e9",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "send_request_0010a0e9"
        },
        "FUN_00114c20": {
            "renaming": {
                "FUN_00114c20": "initialize_function_00114c20",
                "param_1": "inputParam",
                "cVar1": "returnValue",
                "pcVar2": "ptrToChar"
            },
            "code": "\nvoid initializeFunction_00114c20(long inputParam)\n\n{\n  char returnValue;\n  char *ptrToChar;\n  \n  FUN_00114190(inputParam,1,1);\n  returnValue = FUN_00113fb0(inputParam,&DAT_0011b499);\n  if (returnValue != '\\0') {\n    ptrToChar = (char *)(inputParam + 5);\n    if (*(char *)(inputParam + 4) != 'a') {\n      ptrToChar = (char *)(inputParam + 4);\n    }\n    if (*ptrToChar != '\\0') {\n      FUN_00114190(ptrToChar,1,0x100);\n    }\n  }\n  DAT_001278d8 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00113fb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c20",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "initialize_function_00114c20"
        },
        "FUN_00115f50": {
            "renaming": {
                "FUN_00115f50": "check_conditions_00115f50",
                "param_1": "input",
                "param_2": "strings",
                "param_3": "flag",
                "__s1": "string",
                "uVar1": "comparisonResult",
                "uVar2": "extraVar",
                "extraout_EDX": "extraVar2",
                "plVar3": "listPtr",
                "auVar4": "resultArray"
            },
            "code": "\nuint checkConditions_00115f50(long input,char **strings,char flag)\n\n{\n  char *string;\n  uint comparisonResult;\n  undefined4 extraVar;\n  undefined4 extraVar2;\n  long *listPtr;\n  undefined resultArray [12];\n  \n  if ((DAT_00127a40 != 0) || (DAT_0012790c != '\\0')) {\n    return 1;\n  }\n  resultArray = FUN_001159d0(strings);\n  if (resultArray[0] == '\\0') {\n    if (DAT_001279d8 != (long *)0x0) {\n      string = *strings;\n      listPtr = DAT_001279d8;\n      do {\n        comparisonResult = strcmp(string,(char *)listPtr[1]);\n        resultArray._4_4_ = 0;\n        resultArray._0_4_ = comparisonResult;\n        resultArray._8_4_ = extraVar2;\n        if (comparisonResult == 0) {\n          return 1;\n        }\n        listPtr = (long *)*listPtr;\n      } while (listPtr != (long *)0x0);\n    }\n    extraVar = resultArray._8_4_;\n    if (((((flag == '\\0') || (DAT_00127a20 == '\\0')) ||\n         (resultArray._8_4_ = extraVar, resultArray._0_8_ = *(long *)(input + 8),\n         *(int *)(*(long *)(input + 8) + 8) != 5)) ||\n        ((resultArray._0_8_ = (ulong)strings[0x1a], *(int *)(strings[0x1a] + 4) != 7 ||\n         (resultArray = FUN_00113fb0(*strings,\".gnu.build.attributes\"), resultArray[0] == '\\0')))) &&\n       ((*(byte *)((long)strings + 0x27) & 2) == 0)) {\n      return (uint)CONCAT71(resultArray._1_7_,strings[8] == (char *)0x0) |\n             CONCAT31(resultArray._9_3_,strings[0xc] == (char *)0x0);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strcmp",
                "FUN_001159d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115f50",
            "calling": [
                "FUN_00115dc0",
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "check_conditions_00115f50"
        },
        "FUN_001083de": {
            "renaming": {
                "FUN_001083de": "reverse_bytes_in_section_001083de",
                "unaff_RBX": "sectionPtr",
                "unaff_EBP": "sectionLength",
                "uVar1": "sectionAddress",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid reverseBytesInSection_001083de(void)\n\n{\n  undefined8 sectionAddress;\n  undefined8 errorMessage;\n  undefined8 *sectionPtr;\n  undefined4 sectionLength;\n  \n  sectionAddress = *sectionPtr;\n  errorMessage = dcgettext(0,\"cannot reverse bytes: length of section %s must be evenly divisible by %d\",5)\n  ;\n                    \n  FUN_00119dd0(errorMessage,sectionAddress,sectionLength);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001083de",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "reverse_bytes_in_section_001083de"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104400",
            "calling": [
                "FUN_00107880",
                "FUN_0011a2e0",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "FUN_0010b948": {
            "renaming": {
                "FUN_0010b948": "process_data_0010b948",
                "param_1": "dataAddress",
                "param_2": "dataSize",
                "lVar1": "tempVar",
                "cVar2": "result",
                "__ptr": "ptrData",
                "uVar3": "sizeAsUnsigned",
                "uVar4": "sizeMinusOne",
                "local_5a": "outputString"
            },
            "code": "\nvoid processData_0010b948(long dataAddress,uint dataSize)\n\n{\n  long tempVar;\n  char result;\n  void *ptrData;\n  ulong sizeAsUnsigned;\n  uint sizeMinusOne;\n  char outputString [50];\n  \n  sizeMinusOne = dataSize - 1;\n  sizeAsUnsigned = (ulong)dataSize;\n  if ((sizeMinusOne < 0x10) && (tempVar = *(long *)(dataAddress + 0xf8 + (ulong)sizeMinusOne * 8), tempVar != 0)) {\n    FUN_00109cf4(dataAddress,tempVar,sizeAsUnsigned);\n    return;\n  }\n  result = FUN_0010b800(dataAddress,4,0);\n  if (result != '\\0') {\n    ptrData = (void *)FUN_00109b2f(dataAddress);\n    tempVar = *(long *)(dataAddress + 0x68);\n    *(long *)(dataAddress + 0x68) = tempVar + 1;\n    if (sizeMinusOne < 0x10) {\n      *(long *)(dataAddress + 0xf8 + (ulong)sizeMinusOne * 8) = tempVar;\n    }\n    sprintf(outputString,\"%ld=r%s;%u;0;\",tempVar,ptrData,sizeAsUnsigned);\n    free(ptrData);\n    FUN_00109b52(dataAddress,outputString,tempVar,1,sizeAsUnsigned);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010b800",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109cf4",
                "FUN_00109b2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b948",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010b948"
        },
        "access": {
            "renaming": {},
            "code": "\n\n\nint access(char *__name,int __type)\n\n{\n  int iVar1;\n  \n  iVar1 = access(__name,__type);\n  return iVar1;\n}\n\n",
            "called": [
                "access"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_0011283f"
            ],
            "imported": false,
            "current_name": "access"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104240",
            "calling": [
                "FUN_00104cc1",
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_0010827b",
                "FUN_001163d0",
                "FUN_0010bd62",
                "FUN_00113f50",
                "FUN_00109a32",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_00105828",
                "FUN_00104a35",
                "FUN_001053b5",
                "FUN_0010e6a8",
                "FUN_00108d9a",
                "FUN_0010551d",
                "FUN_00108fb9",
                "FUN_00114460",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_001152b6",
                "FUN_00114e00",
                "FUN_0010dac0",
                "FUN_0010ba08",
                "FUN_00114190",
                "FUN_00109022",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_00116490",
                "FUN_00119f70",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_00115b70",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_0010543c",
                "FUN_0010be1a",
                "FUN_00107880",
                "FUN_00108808",
                "FUN_0010e2f0",
                "FUN_0010b0fa",
                "FUN_00114690",
                "FUN_00112c1f",
                "FUN_00108375",
                "FUN_00108179",
                "FUN_001086af",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00119970",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_00104920",
                "FUN_0010911f",
                "FUN_00108916",
                "FUN_001083de",
                "FUN_0010808f",
                "FUN_0010ee3f",
                "FUN_0010871c",
                "FUN_00104966",
                "FUN_00114dc7",
                "FUN_00104ea2",
                "FUN_00112996",
                "FUN_0010882c",
                "FUN_0010b6ea",
                "FUN_00107976",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_0010b800",
                "FUN_00108b3e",
                "FUN_00108200",
                "FUN_0010da0b",
                "FUN_0010bc80",
                "FUN_00104ad6",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104500",
            "calling": [
                "FUN_00107880",
                "FUN_00114690",
                "FUN_00119f70",
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "FUN_00112b6e": {
            "renaming": {
                "FUN_00112b6e": "get_real_type_00112b6e",
                "param_1": "inputArray",
                "param_2": "debugInfoArray",
                "iVar1": "elementType",
                "uVar2": "errorMessage",
                "__format": "formatString",
                "piVar3": "resultArray",
                "plVar4": "currentInfo",
                "bVar5": "isCircular",
                "local_18": "tempDebugInfoArray",
                "local_10": "tempInputArray"
            },
            "code": "\n\n\nint * getRealType_00112b6e(int *inputArray,long *debugInfoArray)\n\n{\n  int elementType;\n  undefined8 errorMessage;\n  char *formatString;\n  int *resultArray;\n  long *currentInfo;\n  bool isCircular;\n  long *tempDebugInfoArray;\n  int *tempInputArray;\n  \n  elementType = *inputArray;\n  if ((elementType != 1) && (1 < elementType - 0x16U)) {\n    return inputArray;\n  }\n  currentInfo = debugInfoArray;\n  while (currentInfo != (long *)0x0) {\n    if ((inputArray == (int *)currentInfo[1]) ||\n       (isCircular = currentInfo == (long *)*currentInfo, currentInfo = (long *)*currentInfo, isCircular)) {\n      errorMessage = FUN_001129f4(inputArray,\"debug_get_real_type: circular debug information for %s\\n\");\n      formatString = (char *)dcgettext(0);\n      fprintf(_stderr,formatString,errorMessage);\n      return (int *)0x0;\n    }\n  }\n  tempDebugInfoArray = debugInfoArray;\n  tempInputArray = inputArray;\n  if (elementType - 0x16U < 2) {\n    resultArray = (int *)getRealType_00112b6e((*(undefined8 **)(inputArray + 4))[1],&tempDebugInfoArray);\n    return resultArray;\n  }\n  resultArray = *(int **)**(undefined8 **)(inputArray + 4);\n  if (inputArray == resultArray) {\n    return inputArray;\n  }\n  if (resultArray == (int *)0x0) {\n    return inputArray;\n  }\n  resultArray = (int *)getRealType_00112b6e(resultArray,&tempDebugInfoArray);\n  return resultArray;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_001129f4",
                "FUN_00112b6e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112b6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00113b1e",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_00112b6e"
            ],
            "imported": false,
            "current_name": "get_real_type_00112b6e"
        },
        "FUN_0010a83e": {
            "renaming": {
                "FUN_0010a83e": "process_data_0010a83e",
                "param_1": "data",
                "param_2": "value",
                "param_3": "size_1",
                "param_4": "flag_1",
                "param_5": "size_2",
                "param_6": "flag_2",
                "param_7": "flag_3",
                "uVar1": "result",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar2": "length",
                "cVar3": "char_1"
            },
            "code": "\nundefined4\nprocessData_0010a83e(long data,undefined8 value,ulong size_1,undefined flag_1,ulong size_2,\n            byte flag_2,byte flag_3)\n\n{\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t length;\n  char char_1;\n  \n  if (((flag_3 ^ 1) & flag_2) == 0) {\n    string_1 = (char *)0x0;\n    char_1 = '\\0';\n  }\n  else {\n    char_1 = *(char *)(*(long *)(data + 0x60) + 0x1c);\n    string_1 = (char *)FUN_00109b2f();\n    size_2 = size_2 & 0xffffffff;\n    size_1 = size_1 & 0xffffffff;\n  }\n  result = FUN_0010a69a(data,value,size_1,flag_1,size_2);\n  if ((char)result != '\\0') {\n    if (flag_2 == 0) {\n      return result;\n    }\n    if (flag_3 == 0) {\n      if (string_1 == (char *)0x0) {\n        return 0;\n      }\n      length = strlen(string_1);\n      string_2 = (char *)xmalloc(length + 3);\n      sprintf(string_2,\"~%%%s\",string_1);\n      free(string_1);\n      if (char_1 != '\\0') {\n        *(undefined *)(*(long *)(data + 0x60) + 0x1c) = 1;\n      }\n    }\n    else {\n      if (*(long *)(*(long *)(data + 0x60) + 0x10) < 1) {\n        return 0;\n      }\n      string_2 = (char *)xmalloc(0x14);\n      sprintf(string_2,\"~%%%ld\",*(undefined8 *)(*(long *)(data + 0x60) + 0x10));\n    }\n    *(char **)(*(long *)(data + 0x60) + 0x38) = string_2;\n    return result;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010a69a",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a83e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a83e"
        },
        "FUN_00113d6e": {
            "renaming": {
                "FUN_00113d6e": "create_data_entry_00113d6e",
                "param_1": "data1",
                "param_2": "data2",
                "lVar1": "result",
                "puVar2": "entry"
            },
            "code": "\nlong createDataEntry_00113d6e(undefined8 data1,undefined8 data2)\n\n{\n  long result;\n  undefined8 *entry;\n  \n  result = FUN_00112904(0xb,0);\n  if (result != 0) {\n    entry = (undefined8 *)xmalloc(0x10);\n    *entry = data1;\n    entry[1] = data2;\n    *(undefined8 **)(result + 0x10) = entry;\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113d6e",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "create_data_entry_00113d6e"
        },
        "bfd_make_section_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_with_flags(void)\n\n{\n  bfd_make_section_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104120",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_make_section_with_flags"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048f0",
            "calling": [
                "FUN_001125fa",
                "FUN_00116b90",
                "FUN_001163d0",
                "FUN_0010abdd",
                "FUN_00108863",
                "FUN_0011256b",
                "FUN_0010e6a8",
                "FUN_00104a35",
                "FUN_0010551d",
                "FUN_0010a2b9",
                "FUN_0010e918",
                "FUN_0010a77a",
                "FUN_0010554f",
                "FUN_0010e7c2",
                "FUN_0010dac0",
                "FUN_001088ae",
                "FUN_0010ba08",
                "FUN_0010e8a9",
                "FUN_0010e453",
                "FUN_00116110",
                "FUN_0010ebb0",
                "FUN_0010c1c6",
                "FUN_0010a83e",
                "FUN_0010e842",
                "FUN_0010d559",
                "FUN_00116852",
                "FUN_0010ae0e",
                "FUN_0010a94e",
                "FUN_0010e5db",
                "FUN_00107880",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010afd5",
                "FUN_00114690",
                "FUN_00114b84",
                "FUN_0010a181",
                "FUN_0010b948",
                "FUN_0011173a",
                "FUN_0010e07c",
                "FUN_001199d0",
                "FUN_0010eafe",
                "FUN_0010e9a0",
                "FUN_0010ee3f",
                "FUN_00116030",
                "FUN_00109ed3",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_00104ea2",
                "FUN_00108466",
                "FUN_00109b2f",
                "FUN_0010b6ea",
                "FUN_0010a424",
                "FUN_0010a0e9",
                "FUN_001081e9",
                "FUN_0010a377"
            ],
            "imported": false,
            "current_name": "free"
        },
        "FUN_00114d50": {
            "renaming": {
                "FUN_00114d50": "execute_function_00114d50",
                "param_1": "inputParameter1",
                "param_2": "inputParameter2",
                "param_3": "executionFlag"
            },
            "code": "\nvoid executeFunction_00114d50(long inputParameter1,long inputParameter2,uint executionFlag)\n\n{\n  if (*(int *)(*(long *)(inputParameter1 + 8) + 8) != 2) {\n    return;\n  }\n  if ((executionFlag == 2) && (*(int *)(*(long *)(inputParameter2 + 8) + 8) == 2)) {\n    executionFlag = (uint)*(byte *)(*(long *)(*(long *)(inputParameter2 + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(*(long *)(inputParameter1 + 8) + 0x380) + 0x78))(inputParameter1,executionFlag != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_0010540e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d50",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "execute_function_00114d50"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104750",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044f0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ea2",
                "FUN_0011283f",
                "FUN_00113f50"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "FUN_00108916": {
            "renaming": {
                "FUN_00108916": "print_usage_00108916",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "uVar1": "usageText",
                "pcVar2": "message"
            },
            "code": "\nvoid printUsage_00108916(FILE *outputFile,int exitCode)\n\n{\n  undefined8 usageText;\n  char *message;\n  \n  usageText = DAT_00127600;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] in-file [out-file]\\n\",5);\n  fprintf(outputFile,message,usageText);\n  message = (char *)dcgettext(0,\" Copies a binary file, possibly transforming it in the process\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -I --input-target <bfdname>      Assume input file is in format <bfdname>\\n  -O --output-target <bfdname>     Create an output file in format <bfdname>\\n  -B --binary-architecture <arch>  Set output arch, when input is arch-less\\n  -F --target <bfdname>            Set both input and output format to <bfdname>\\n     --debugging                   Convert debugging information, if possible\\n  -p --preserve-dates              Copy modified/access timestamps to the output\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D --enable-deterministic-archives\\n                                   Produce deterministic output when stripping archives (default)\\n  -U --disable-deterministic-archives\\n                                   Disable -D behavior\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -j --only-section <name>         Only copy section <name> into the output\\n     --add-gnu-debuglink=<file>    Add section .gnu_debuglink linking to <file>\\n  -R --remove-section <name>       Remove section <name> from the output\\n     --remove-relocations <name>   Remove relocations from section <name>\\n  -S --strip-all                   Remove all symbol and relocation information\\n  -g --strip-debug                 Remove all debugging symbols & sections\\n     --strip-dwo                   Remove all DWO sections\\n     --strip-unneeded              Remove all symbols not needed by relocations\\n  -N --strip-symbol <name>         Do not copy symbol <name>\\n     --strip-unneeded-symbol <name>\\n                                   Do not copy symbol <name> unless needed by\\n                                     relocations\\n     --only-keep-debug             Strip everything but the debug information\\n     --extract-dwo                 Copy only DWO sections\\n     --extract-symbol              Remove section contents but keep symbols\\n     --keep-section <name>         Do not strip section <name>\\n  -K --keep-symbol <name>          Do not strip symbol <name>\\n     --keep-section-symbols        Do not strip section symbols\\n     --keep-file-symbols           Do not strip file symbol(s)\\n     --localize-hidden             Turn all ELF hidden symbols into locals\\n  -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n     --globalize-symbol <name>     Force symbol <name> to be marked as a global\\n  -G --keep-global-symbol <name>   Localize all symbols except <name>\\n  -W --weaken-symbol <name>        Force symbol <name> to be marked as a weak\\n     --weaken                      Force all global symbols to be marked as weak\\n  -w --wildcard                    Permit wildcard in symbol comparison\\n  -x --discard-all                 Remove all non-global symbols\\n  -X --discard-locals              Remove any compiler-generated symbols\\n  -i --interleave[=<number>]       Only copy N out of every <number> bytes\\n     --interlea...\" /* TRUNCATED STRING LITERAL */\n                             ,5);\n  fprintf(outputFile,message);\n  FUN_00104a35(DAT_00127600,outputFile);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00104a35",
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108916",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_usage_00108916"
        },
        "FUN_001126c0": {
            "renaming": {
                "FUN_001126c0": "print_error_message_001126c0",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "paramCount",
                "param_11": "paramArray",
                "param_12": "formatString",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "iVar1": "bfdError",
                "uVar2": "errorMessagePtr",
                "local_100": "memsetSize1",
                "local_fc": "memsetSize2",
                "local_f8": "fwriteBuffer",
                "local_f0": "localBuffer",
                "local_e8": "localArray",
                "local_c8": "param13Copy",
                "local_c0": "param14Copy",
                "local_b8": "errorCode1Copy",
                "local_a8": "errorCode2Copy",
                "local_98": "errorCode3Copy",
                "local_88": "errorCode4Copy",
                "local_78": "errorCode5Copy",
                "local_68": "errorCode6Copy",
                "local_58": "errorCode7Copy",
                "local_48": "errorCode8Copy"
            },
            "code": "\n\n\nvoid printErrorMessage_001126c0(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 long errorMessage,long paramCount,long *paramArray,char *formatString,undefined8 param13,\n                 undefined8 param14)\n\n{\n  char condition;\n  int bfdError;\n  undefined8 errorMessagePtr;\n  undefined4 memsetSize1;\n  undefined4 memsetSize2;\n  undefined *fwriteBuffer;\n  undefined *localBuffer;\n  undefined localArray [32];\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (condition != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  param13Copy = param13;\n  param14Copy = param14;\n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessagePtr = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessagePtr = bfd_errmsg();\n  }\n  fflush(_stdout);\n  fputs(DAT_00127600,_stderr);\n  if (paramCount != 0) {\n    if (errorMessage == 0) {\n      errorMessage = FUN_001125fa(paramCount);\n    }\n    if ((paramArray != (long *)0x0) && (*paramArray != 0)) {\n      fprintf(_stderr,\": %s[%s]\",errorMessage);\n      goto LAB_001127c1;\n    }\n  }\n  fprintf(_stderr,\": %s\",errorMessage);\nLAB_001127c1:\n  if (formatString != (char *)0x0) {\n    fwriteBuffer = &stack0x00000008;\n    localBuffer = localArray;\n    memsetSize1 = 0x20;\n    memsetSize2 = 0x30;\n    fwrite(&DAT_0011b4a0,1,2,_stderr);\n    vfprintf(_stderr,formatString,&memsetSize1);\n  }\n  fprintf(_stderr,\": %s\\n\",errorMessagePtr);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "fprintf",
                "bfd_get_error",
                "fwrite",
                "fputs",
                "fflush",
                "bfd_errmsg",
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001126c0",
            "calling": [
                "FUN_00116b90",
                "FUN_00116110",
                "FUN_00104ea2",
                "FUN_001086af",
                "FUN_00108466",
                "FUN_0010551d",
                "FUN_00115dc0",
                "FUN_00107880",
                "FUN_00104d25",
                "FUN_0010554f",
                "FUN_00114690",
                "FUN_00114e50",
                "FUN_0010808f"
            ],
            "imported": false,
            "current_name": "print_error_message_001126c0"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00109b52",
                "FUN_00104ea2",
                "FUN_0010554f",
                "FUN_0011173a",
                "FUN_001088ae"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00113b4a": {
            "renaming": {
                "FUN_00113b4a": "initialize_memory_block_00113b4a",
                "param_1": "inputValue",
                "lVar1": "memoryBlock"
            },
            "code": "\nlong initializeMemoryBlock_00113b4a(long inputValue)\n\n{\n  long memoryBlock;\n  \n  if (inputValue != 0) {\n    memoryBlock = FUN_00112904(0x15,0);\n    if (memoryBlock == 0) {\n      memoryBlock = 0;\n    }\n    else {\n      *(long *)(memoryBlock + 0x10) = inputValue;\n    }\n    return memoryBlock;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b4a",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00113b4a"
        },
        "FUN_0010edb4": {
            "renaming": {
                "FUN_0010edb4": "update_file_info_0010edb4",
                "param_1": "fileInfo",
                "param_2": "filename",
                "param_3": "flag",
                "param_4": "filesize",
                "cVar1": "resultChar",
                "iVar2": "filenameComparison",
                "uVar3": "updateResult",
                "in_R10": "additionalParam"
            },
            "code": "\nundefined8 updateFileInfo_0010edb4(long fileInfo,undefined8 filename,undefined4 flag,ulong filesize)\n\n{\n  char resultChar;\n  int filenameComparison;\n  undefined8 updateResult;\n  undefined8 additionalParam;\n  \n  if (*(long *)(fileInfo + 0x210) == 0) {\n    return 0;\n  }\n  if (*(ulong *)(fileInfo + 0x1f0) < filesize) {\n    *(ulong *)(fileInfo + 0x1f0) = filesize;\n  }\n  filenameComparison = filename_cmp(filename);\n  if (filenameComparison != 0) {\n    resultChar = FUN_0010e2f0(fileInfo,0x84,0,filesize,filename);\n    if (resultChar == '\\0') {\n      return 0;\n    }\n    *(undefined8 *)(fileInfo + 0x210) = filename;\n  }\n  updateResult = FUN_0010e2f0(fileInfo,0x44,flag,filesize - *(long *)(fileInfo + 0x200),0,additionalParam);\n  return updateResult;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_0010e2f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010edb4",
            "calling": [
                "FUN_00112502"
            ],
            "imported": false,
            "current_name": "update_file_info_0010edb4"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044b0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010c05d",
                "FUN_00119e70",
                "FUN_0010bd62",
                "FUN_00108f08",
                "FUN_0010bf20",
                "FUN_0011256b",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00104a35",
                "FUN_00108fb9",
                "FUN_001199d0",
                "FUN_0010911f",
                "FUN_0010554f",
                "FUN_00108a2a",
                "FUN_00108916",
                "FUN_00109022",
                "FUN_0010ee3f",
                "FUN_00108fe8",
                "FUN_0010c218",
                "FUN_0010871c",
                "FUN_0010c6be",
                "FUN_00112996",
                "FUN_0010b6ea",
                "FUN_00112b6e",
                "FUN_0010c892",
                "FUN_0010c2d2",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "FUN_0010be1a",
                "FUN_0010bc80",
                "FUN_0010be88",
                "FUN_0010914e",
                "FUN_0010b0fa",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_0010e5db": {
            "renaming": {
                "FUN_0010e5db": "process_data_0010e5db",
                "param_1": "dataPointer",
                "param_2": "loopCount",
                "cVar1": "isValid",
                "__ptr": "memoryBlock",
                "__s": "string",
                "sVar2": "stringLength",
                "__s_00": "newString",
                "in_R10": "constant",
                "iVar3": "iteration"
            },
            "code": "\nundefined  [16] processData_0010e5db(long dataPointer,int loopCount)\n\n{\n  char isValid;\n  void *memoryBlock;\n  char *string;\n  size_t stringLength;\n  char *newString;\n  ulong constant;\n  int iteration;\n  undefined auVar4 [16];\n  \n  iteration = 0;\n  do {\n    if (loopCount <= iteration) {\n      auVar4 = FUN_00109ed3(dataPointer,0x66,0,dataPointer + 0x188,dataPointer + 400,constant);\n      return auVar4;\n    }\n    if (*(char *)(*(long *)(dataPointer + 0x60) + 0x1c) == '\\0') {\n      memoryBlock = (void *)FUN_00109b2f(dataPointer);\n      free(memoryBlock);\n    }\n    else {\n      string = (char *)FUN_00109b2f(dataPointer);\n      stringLength = strlen(string);\n      newString = (char *)xmalloc(stringLength + 3);\n      sprintf(newString,\":t%s\",string);\n      free(string);\n      isValid = FUN_0010e2f0(dataPointer,0x80,0,0,newString);\n      if (isValid == '\\0') {\n        auVar4._8_8_ = 0;\n        auVar4._0_8_ = constant;\n        return auVar4 << 0x40;\n      }\n      free(newString);\n    }\n    iteration = iteration + 1;\n  } while( true );\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_00109ed3",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e5db",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010e5db"
        },
        "FUN_00104d25": {
            "renaming": {
                "FUN_00104d25": "initialize_data_00104d25",
                "param_7": "param"
            },
            "code": "\nvoid initializeData_00104d25(void)\n\n{\n  undefined8 param;\n  \n  DAT_00127a40 = 1;\n  FUN_001126c0(0,param,0,0);\n  FUN_00114b84();\n  return;\n}\n\n",
            "called": [
                "FUN_00114b84",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d25",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "initialize_data_00104d25"
        },
        "FUN_0010551d": {
            "renaming": {
                "FUN_0010551d": "process_binary_0010551d",
                "puVar1": "pointer1",
                "bVar2": "byteVariable",
                "puVar3": "pointer3",
                "pcVar4": "functionPointer",
                "puVar5": "pointer5",
                "uVar6": "unsignedVariable1",
                "uVar7": "unsignedVariable2",
                "__s": "stringVariable",
                "cVar8": "charVariable",
                "cVar9": "charVariable2",
                "uVar10": "unsignedVariable3",
                "iVar11": "integerVariable",
                "uVar12": "unsignedVariable4",
                "uVar13": "unsignedVariable5",
                "iVar14": "integerVariable2",
                "plVar15": "pointerVariable1",
                "uVar16": "unsignedVariable6",
                "uVar17": "unsignedVariable7",
                "sVar18": "sizeVariable",
                "pcVar19": "pointerVariable2",
                "sVar26": "sizeVariable2",
                "pcVar28": "pointerVariable3",
                "pcVar33": "pointerVariable4",
                "ppcVar35": "pointerPointerVariable1",
                "uVar30": "unsignedVariable8",
                "iVar31": "integerVariable3",
                "bVar38": "booleanVariable",
                "bVar39": "byteVariable2"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong processBinary_0010551d(void)\n\n{\n  uint *pointer1;\n  byte byteVariable;\n  undefined *pointer3;\n  code *functionPointer;\n  undefined8 *pointer5;\n  ulong unsignedVariable1;\n  ulong unsignedVariable2;\n  char *stringVariable;\n  char charVariable;\n  char charVariable2;\n  uint unsignedVariable3;\n  int integerVariable;\n  uint unsignedVariable4;\n  undefined4 unsignedVariable5;\n  int integerVariable2;\n  long *pointerVariable1;\n  undefined8 unsignedVariable6;\n  undefined8 unsignedVariable7;\n  size_t sizeVariable;\n  char *pointerVariable2;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar20;\n  long lVar21;\n  ulong uVar22;\n  int *piVar23;\n  ulong uVar24;\n  long lVar25;\n  FILE *stringVariable_00;\n  size_t sizeVariable2;\n  long lVar27;\n  long *unaff_RBX;\n  char *pointerVariable3;\n  undefined8 *puVar29;\n  ulong unsignedVariable8;\n  int integerVariable3;\n  long unaff_RBP;\n  long *plVar32;\n  char *pointerVariable4;\n  undefined4 *pointer34;\n  char **pointerPointerVariable1;\n  long *unaff_R13;\n  void *pvVar36;\n  undefined8 *unaff_R14;\n  undefined **ppointer37;\n  bool booleanVariable;\n  byte byteVariable2;\n  long in_stack_00000008;\n  ulong in_stack_00000010;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  byteVariable2 = 0;\ncode_r0x0010551d:\n  dcgettext(0,\"warning: could not load note section\",5);\n  FUN_001126c0(0);\n  free(unaff_RBX);\nLAB_001151a2:\n  unaff_RBP = *(long *)(unaff_RBP + 8);\n  puVar29 = DAT_001279d0;\n  if (unaff_RBP == 0) goto joined_r0x001151c7;\n  if (DAT_00127a20 != '\\0') {\n    if ((((*(int *)(unaff_R14[1] + 8) != 5) || (*(int *)(*(long *)(unaff_RBP + 0xd0) + 4) != 7)) ||\n        (charVariable2 = FUN_00113fb0(), charVariable2 == '\\0')) ||\n       ((*(long *)(unaff_RBP + 0x60) == 0 || (lVar25 = *(long *)(unaff_RBP + 0x40), lVar25 == 0))))\n    goto LAB_001151a2;\n    unaff_RBX = (long *)xmalloc(0x20);\n    unaff_RBX[1] = 0;\n    charVariable2 = bfd_get_full_section_contents();\n    if (charVariable2 != '\\0') {\n      lVar27 = FUN_001163d0();\n      unaff_RBX[2] = lVar27;\n      if ((lVar27 == lVar25) || (charVariable2 = bfd_set_section_size(), charVariable2 != '\\0')) {\n        unaff_RBX[3] = (long)unaff_R13;\n        *unaff_RBX = unaff_RBP;\n        unaff_R13 = unaff_RBX;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,in_stack_00000008,unaff_RBP);\n        free((void *)unaff_RBX[1]);\n        free(unaff_RBX);\n      }\n      goto LAB_001151a2;\n    }\n    goto code_r0x0010551d;\n  }\n  for (lVar25 = *(long *)(unaff_RBP + 8); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)) {\n  }\njoined_r0x001151c7:\n  for (; puVar29 != (undefined8 *)0x0; puVar29 = (undefined8 *)*puVar29) {\n    lVar25 = bfd_get_section_by_name();\n    if (lVar25 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar25 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sizeVariable = *(size_t *)(lVar25 + 0x40);\n      stringVariable_00 = fopen((char *)puVar29[2],\"w\");\n      if (stringVariable_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar29[2],0,0);\n      }\n      else {\n        charVariable2 = bfd_malloc_and_get_section();\n        if (charVariable2 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sizeVariable != 0) &&\n                (sizeVariable2 = fwrite(in_stack_00000140,1,sizeVariable,stringVariable_00), sizeVariable2 != sizeVariable)) {\n          piVar23 = __errno_location();\n          pointerVariable4 = strerror(*piVar23);\n          unsignedVariable7 = puVar29[2];\n          unsignedVariable6 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(unsignedVariable6,unsignedVariable7,pointerVariable4);\n          free(in_stack_00000140);\n          fclose(stringVariable_00);\n          return 0;\n        }\n        fclose(stringVariable_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar25 = bfd_get_section_by_name(in_stack_00000008,\".gnu_debuglink\");\n    if (lVar25 != 0) {\n      unsignedVariable7 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(unsignedVariable7);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(in_stack_00000008);\n    lVar25 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      unsignedVariable7 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,unsignedVariable7,lVar25);\n      return 0;\n    }\n    if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 2) {\n      uVar20 = 0;\n      for (uVar24 = *(ulong *)(in_stack_00000008 + 0x90); uVar24 != 0;\n          uVar24 = *(ulong *)(uVar24 + 8)) {\n        uVar22 = *(ulong *)(uVar24 + 0x30);\n        unsignedVariable8 = uVar20;\n        unsignedVariable1 = uVar24;\n        unsignedVariable2 = uVar20;\n        if (uVar22 != 0) {\n          while ((unsignedVariable8 = unsignedVariable1, unsignedVariable2 != 0 &&\n                 (unsignedVariable8 = uVar24, uVar22 <= *(ulong *)(uVar20 + 0x30)))) {\n            uVar24 = *(ulong *)(uVar24 + 8);\n            if (uVar24 == 0) goto LAB_00107db8;\n            uVar22 = *(ulong *)(uVar24 + 0x30);\n            unsignedVariable1 = uVar20;\n            unsignedVariable2 = uVar22;\n          }\n        }\n        uVar20 = unsignedVariable8;\n      }\nLAB_00107db8:\n      if (uVar20 == 0) {\n        uVar24 = 0x1000;\n      }\n      else {\n        uVar20 = *(long *)(uVar20 + 0x40) + *(long *)(uVar20 + 0x30);\n        uVar24 = 0xffffffffffffffff;\n        if (uVar20 < 0xfffffffffffff001) {\n          uVar24 = uVar20 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar24;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar24;\n    }\n  }\n  plVar32 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(in_stack_00000008 + 0xa0);\n  if (iStack000000000000006c != 0) {\n    uVar24 = FUNC_0010554f();\n    return uVar24;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppointer37 = &PTR_sstringVariabletab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    pointer34 = puStack0000000000000020;\n    for (lVar25 = 0x18; lVar25 != 0; lVar25 = lVar25 + -1) {\n      *pointer34 = 0;\n      pointer34 = pointer34 + (ulong)byteVariable2 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      pointer3 = *ppointer37;\n      lVar25 = bfd_get_section_by_name();\n      lVar27 = bfd_get_section_by_name();\n      if ((lVar25 != 0) && (lVar27 != 0)) {\n        lVar25 = *(long *)(lVar25 + 0x40);\n        __ptr = (void *)xmalloc(lVar25);\n        charVariable2 = bfd_get_section_contents();\n        if (charVariable2 == '\\0') {\n          unsignedVariable5 = bfd_get_error();\n          bfd_errmsg(unsignedVariable5);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar24 = *(ulong *)(lVar27 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar24 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            unsignedVariable5 = bfd_get_error();\n            bfd_errmsg(unsignedVariable5);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar24) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar36 = __ptr; pvVar36 <= (void *)((long)__ptr + lVar25 + -0xc);\n                  pvVar36 = (void *)((long)pvVar36 + 0xc)) {\n                uVar20 = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                byteVariable = *(byte *)((long)pvVar36 + 4);\n                unsignedVariable5 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar36 + 6);\n                lVar27 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar36 + 8);\n                if (byteVariable == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar27;\n                }\n                else {\n                  uVar22 = (uVar20 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar22 < uVar24) {\n                    pointerVariable4 = (char *)((long)__ptr_00 + uVar22);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sizeVariable = strlen(pointerVariable4);\n                      if (((sizeVariable == 0) || (pointerVariable3 = pointerVariable4 + (sizeVariable - 1), *pointerVariable3 != '\\')) ||\n                         ((ulong)((long)__ptr + lVar25) < (long)pvVar36 + 0x10U)) goto LAB_001077fb;\n                      *pointerVariable3 = '\\0';\n                      pvVar36 = (void *)((long)pvVar36 + 0xc);\n                      integerVariable = (**(code **)(unaff_R14[1] + 0x40))(pvVar36);\n                      uVar20 = (ulong)(uint)(integerVariable + (int)lStack0000000000000088);\n                      if (uVar24 <= uVar20) break;\n                      pointerVariable4 = (char *)concat(pointerVariable4,(long)__ptr_00 + uVar20,0);\n                      *pointerVariable3 = '\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pointerVariable4;\n                    }\n                    unsignedVariable7 = *unaff_R14;\n                    pointerVariable3 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pointerVariable3,unsignedVariable7,pointer3,((long)pvVar36 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)byteVariable,unsignedVariable5,lVar27,pointerVariable4);\n                    charVariable2 = FUN_0011173a(puStack0000000000000020,pcStack0000000000000038,byteVariable);\n                    if (charVariable2 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    unsignedVariable7 = *unaff_R14;\n                    pointerVariable4 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pointerVariable4,unsignedVariable7,pointer3,((long)pvVar36 - (long)__ptr) / 0xc,\n                            uVar20 & 0xffffffff,(ulong)byteVariable,((long)pvVar36 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\nLAB_00105981:\n        free(puStack0000000000000020);\n        goto LAB_00105588;\n      }\nLAB_001058eb:\n      ppointer37 = ppointer37 + 2;\n    } while (ppointer37 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (charVariable2 = FUN_0010c892(), charVariable2 == '\\0'))\n    goto LAB_00105981;\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar25 = 0;\n      for (pointerVariable1 = plVar32; pointerVariable1 < plVar32 + in_stack_00000010; pointerVariable1 = pointerVariable1 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar25 != 0) || (lVar25 = FUN_00112894(), lVar25 != 0)) &&\n             ((in_stack_00000150 != (char *)0x0 && (*in_stack_00000150 != '\\0')))) {\n            pointerVariable4 = (char *)0x0;\n            pointerVariable3 = in_stack_00000150;\n            while (((*pointerVariable3 != '\\0' && (sizeVariable = strlen(pointerVariable3), pointerVariable3[sizeVariable - 1] == '\\')) &&\n                   (pointerVariable1 + 1 < plVar32 + in_stack_00000010))) {\n              pointerVariable2 = (char *)xstrdup(pointerVariable3);\n              sizeVariable = strlen(pointerVariable2);\n              pointerVariable2[sizeVariable - 1] = '\\0';\n              pointerVariable3 = (char *)concat(pointerVariable2,*(undefined8 *)(pointerVariable1[1] + 8),0);\n              free(pointerVariable2);\n              free(pointerVariable4);\n              pointerVariable1 = pointerVariable1 + 1;\n              pointerVariable4 = pointerVariable3;\n            }\n            FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,\n                         pointerVariable3);\n            in_stack_00000018 = FUN_0011173a(puStack0000000000000020,lVar25,uStack0000000000000158);\n            if (in_stack_00000018 != '\\0') goto LAB_00106cac;\n            FUN_00108b3e();\n            FUN_00108863();\n          }\n          goto LAB_00105981;\n        }\nLAB_00106cac:\n      }\n      FUN_00108863();\n      if ((lVar25 != 0) && (charVariable2 = FUN_0010c892(), charVariable2 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) != 2) || (in_stack_00000010 == 0)) {\n        pointerVariable4 = \"%s: no recognized debugging information\";\n        goto LAB_00105968;\n      }\n      in_stack_00000140 = (char *)0x0;\n      in_stack_000000c0 = plVar32;\n      in_stack_000000d0 = 0;\n      in_stack_000000c8 = in_stack_00000010;\n      in_stack_000000d8 = 0;\n      puVar29 = (undefined8 *)&stack0x00000148;\n      for (lVar25 = 0x22; lVar25 != 0; lVar25 = lVar25 + -1) {\n        *(undefined4 *)puVar29 = 0;\n        puVar29 = (undefined8 *)((long)puVar29 + (ulong)byteVariable2 * -8 + 4);\n      }\n      charVariable2 = '\\0';\n      _uStack0000000000000048 = (int *)0x0;\n      pcStack0000000000000038 = (char *)0x0;\n      pcStack0000000000000090 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n      do {\n        if ((long)in_stack_00000010 <= in_stack_000000d0) break;\n        lVar25 = plVar32[in_stack_000000d0];\n        charVariable = bfd_coff_get_syment();\n        lVar27 = in_stack_000000d8;\n        if (charVariable == '\\0') {\n          unsignedVariable5 = bfd_get_error();\n          bfd_errmsg(unsignedVariable5);\n          pointerVariable4 = \"bfd_coff_get_syment failed: %s\";\nLAB_00105968:\n          unsignedVariable7 = dcgettext(0,pointerVariable4,5);\n          FUN_00119ed0(unsignedVariable7);\n          goto LAB_00105981;\n        }\n        pointerVariable4 = *(char **)(lVar25 + 8);\n        in_stack_000000d0 = in_stack_000000d0 + 1;\n        in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n        if ((bStack0000000000000101 != 0) && (charVariable = bfd_coff_get_auxent(), charVariable == '\\0')) {\n          unsignedVariable5 = bfd_get_error();\n          bfd_errmsg(unsignedVariable5);\n          pointerVariable4 = \"bfd_coff_get_auxent failed: %s\";\n          goto LAB_00105968;\n        }\n        if (pcStack0000000000000090 == (char *)lVar27) {\n          if (bStack0000000000000100 != 0x67) {\n            charVariable = FUN_0010bbd3(puStack0000000000000020);\n            if (charVariable == '\\0') goto LAB_00105981;\n            goto LAB_00106de4;\n          }\nswitchD_00106e1a_caseD_67:\n          pcStack0000000000000090 = (char *)in_stack_000000f0;\n          charVariable = FUN_0010bbd3(puStack0000000000000020);\n        }\n        else {\nLAB_00106de4:\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\n          }\n          else if (bStack0000000000000100 < 100) {\n            switch(bStack0000000000000100) {\n            case 3:\n              if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n            case 2:\nswitchD_00106e1a_caseD_7f:\n              if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) ==\n                  2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) {\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pointerVariable4;\n                goto switchD_00106e1a_caseD_68;\n              }\n              break;\n            default:\n              break;\n            case 5:\n            case 7:\n            case 0xe:\n              goto switchD_00106e1a_caseD_68;\n            }\n          }\n          else {\n            switch(bStack0000000000000100) {\n            case 100:\n              integerVariable = strcmp(pointerVariable4,\".bb\");\n              if (integerVariable == 0) {\n                charVariable = FUN_0010be88(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              integerVariable = strcmp(pointerVariable4,\".eb\");\n              if (integerVariable == 0) {\n                charVariable = FUN_0010bf20(puStack0000000000000020);\n                goto joined_r0x00107247;\n              }\n              goto switchD_00106e1a_caseD_68;\n            case 0x65:\n              integerVariable = strcmp(pointerVariable4,\".bf\");\n              if (integerVariable == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar27 = FUN_0010dac0();\n                  if ((lVar27 == 0) ||\n                     (charVariable2 = FUN_0010bc80(puStack0000000000000020), charVariable2 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    integerVariable = 0;\n                    if (bStack0000000000000101 != 0) {\n                      integerVariable = in_stack_00000118 - 1;\n                    }\n                    lVar25 = *(long *)(*(long *)(lVar25 + 0x20) + 0x30);\n                    while( true ) {\n                      integerVariable3 = _uStack0000000000000048[4];\n                      if (integerVariable3 == 0) break;\n                      charVariable = FUN_0010bf86(puStack0000000000000020,integerVariable + integerVariable3,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar25);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (charVariable == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointerVariable4 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                integerVariable = strcmp(pointerVariable4,\".ef\");\n                if (integerVariable != 0) goto switchD_00106e1a_caseD_68;\n                if (charVariable2 != '\\0') {\n                  charVariable2 = FUN_0010be1a(puStack0000000000000020);\n                  if (charVariable2 == '\\0') goto LAB_00105981;\n                  charVariable2 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pointerVariable4 = \"%ld: unexpected .ef\\n\";\n              }\n              unsignedVariable7 = dcgettext(0,pointerVariable4,5);\n              FUN_00119ed0(unsignedVariable7);\n              goto LAB_00105981;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n          lVar21 = FUN_0010dac0();\n          if (lVar21 == 0) goto LAB_00105981;\n          charVariable = FUN_00112a33(&stack0x00000140,lVar25,lVar27);\n        }\njoined_r0x00107247:\n        if (charVariable == '\\0') goto LAB_00105981;\n      } while( true );\n    }\n  }\n  if (((*(uint *)(in_stack_00000008 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)(in_stack_00000008 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(in_stack_00000008 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (in_stack_00000010 != 0) {\n        plVar32 = DAT_001278d0 + in_stack_00000010;\n        pointerVariable1 = DAT_001278d0;\n        do {\n          unsignedVariable3 = *(uint *)(*pointerVariable1 + 0x18);\n          if ((unsignedVariable3 & 0x1000000) != 0) {\n            *(uint *)(*pointerVariable1 + 0x18) = unsignedVariable3 & 0xfeffffff;\n          }\n          pointerVariable1 = pointerVariable1 + 1;\n        } while (plVar32 != pointerVariable1);\n      }\n    }\n    else {\n      for (lVar25 = *(long *)(in_stack_00000008 + 0x90); lVar25 != 0; lVar25 = *(long *)(lVar25 + 8)\n          ) {\n        if (*(long *)(lVar25 + 0xe8) != 0) {\n          pointer1 = (uint *)(*(long *)(lVar25 + 0xe8) + 0x18);\n          *pointer1 = *pointer1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 != 7) {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      integerVariable = bfd_get_error();\n      if (integerVariable != 0) {\n        DAT_00127a40 = 1;\n        return 0;\n      }\n    }\n    lVar25 = xmalloc();\n    plVar32 = DAT_001278d0;\n    uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n    DAT_001278c8 = lVar25;\n    if (in_stack_00000010 == 0) {\n      uVar24 = 0;\n    }\n    else {\n      uVar24 = 0;\n      _in_stack_00000018 = 0;\n      do {\n        integerVariable = DAT_001279c0;\n        pointerVariable1 = (long *)plVar32[_in_stack_00000018];\n        functionPointer = (code *)pointerVariable1[4];\n        unsignedVariable3 = *(uint *)(pointerVariable1 + 3);\n        pointerVariable4 = (char *)pointerVariable1[1];\n        pointerVariable3 = pointerVariable4;\n        if (DAT_001279c8 != (undefined8 *)0x0) {\n          integerVariable3 = 0;\n          puVar29 = DAT_001279c8;\n          while( true ) {\n            if ((integerVariable <= integerVariable3) || (pointerVariable2 = (char *)puVar29[5], pointerVariable2 == (char *)0x0))\n            goto LAB_00105ad5;\n            if (pointerVariable2 != \"\") break;\nLAB_0010750b:\n            integerVariable3 = integerVariable3 + 1;\n          }\n          integerVariable2 = strcmp(pointerVariable2,pointerVariable4);\n          if (integerVariable2 != 0) {\n            puVar29 = (undefined8 *)*puVar29;\n            goto LAB_0010750b;\n          }\n          free(pointerVariable2);\n          uVar20 = uVar24 + 1;\n          puVar29[5] = \"\";\n          unsignedVariable6 = FUN_0011a2e0(puVar29);\n          unsignedVariable7 = DAT_001278f0;\n          *(undefined8 *)(lVar25 + uVar24 * 8) = unsignedVariable6;\n          lVar27 = htab_elements(unsignedVariable7);\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\nLAB_00105af8:\n          charVariable2 = *pointerVariable4;\n          if (charVariable2 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n          pointerVariable4 = DAT_00127928;\n          if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) != '\\0')\n             ) {\n            lVar27 = unaff_R14[1];\n            charVariable2 = '\\0';\n            goto LAB_0010668d;\n          }\n          goto joined_r0x00106565;\n        }\nLAB_00105ad5:\n        lVar27 = htab_elements(DAT_001278f0);\n        uVar20 = uVar24;\n        if ((lVar27 == 0) && (DAT_001278f8 == (char **)0x0)) goto LAB_00105af8;\n        if (pointerVariable4 != (char *)0x0) {\nLAB_001064eb:\n          if (((*pointerVariable4 == '_') && (pointerVariable4[1] == '_')) &&\n             (integerVariable = strcmp(pointerVariable4 + (pointerVariable4[2] == '_'),\"__gnu_lto_slim\"), integerVariable == 0)) {\n            unsignedVariable7 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5);\n                    \n            FUN_00119dd0(unsignedVariable7);\n          }\n        }\n        _cStack0000000000000148 = 0;\n        in_stack_00000140 = pointerVariable4;\n        lVar27 = htab_find(DAT_001278f0);\n        if (((lVar27 == 0) || (pointerVariable3 = *(char **)(lVar27 + 8), pointerVariable4 == pointerVariable3)) &&\n           (pointerVariable3 = pointerVariable4, pointerPointerVariable1 = DAT_001278f8, (unsignedVariable3 & 0x100) != 0)) {\n          for (; pointerPointerVariable1 != (char **)0x0; pointerPointerVariable1 = (char **)pointerPointerVariable1[3]) {\n            integerVariable = strcmp(*pointerPointerVariable1,pointerVariable4);\n            if (integerVariable == 0) {\n              pointerVariable3 = pointerPointerVariable1[1];\n              break;\n            }\n          }\n        }\n        pointerVariable1[1] = (long)pointerVariable3;\n        charVariable2 = *pointerVariable3;\n        if (charVariable2 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n        pointerVariable4 = DAT_00127928;\n        lVar27 = unaff_R14[1];\n        if (*(char *)(lVar27 + 0x1c) == charVariable2) {\n          if (DAT_001279a8 == '\\0') {\n            if ((DAT_00127988 == '\\0') ||\n               ((((unsignedVariable3 & 0x82) == 0 && (functionPointer != bfd_map_over_sections)) &&\n                ((*(byte *)(pointerVariable1[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n            pointerVariable3 = pointerVariable3 + 1;\n            pointerVariable1[1] = (long)pointerVariable3;\n            goto joined_r0x00106565;\n          }\n          charVariable2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          if (charVariable2 == '\\0') goto LAB_0010677d;\n          if (DAT_00127928 != (char *)0x0) {\n            pointerVariable3 = pointerVariable3 + 1;\n            pointerVariable1[1] = (long)pointerVariable3;\n            sizeVariable = strlen(pointerVariable3);\n            lVar27 = sizeVariable + 2;\n            goto LAB_001066bc;\n          }\n          *pointerVariable3 = charVariable2;\n          pointerVariable1[1] = (long)pointerVariable3;\n          uVar24 = uVar20;\n        }\n        else {\n          if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c) == '\\0')\n             ) {\njoined_r0x00106565:\n            uVar24 = uVar20;\n            if (pointerVariable4 == (char *)0x0) goto LAB_00105b32;\n            sizeVariable = strlen(pointerVariable3);\n            sizeVariable2 = strlen(pointerVariable4);\n            pointerVariable4 = (char *)xmalloc(sizeVariable2 + sizeVariable + 1);\n            pointerVariable2 = pointerVariable4;\n          }\n          else {\nLAB_0010668d:\n            pointerVariable4 = DAT_00127928;\n            if ((*(char *)(lVar27 + 0x1c) != '\\0') && (charVariable2 != *(char *)(lVar27 + 0x1c)))\n            goto joined_r0x00106565;\n            sizeVariable = strlen(pointerVariable3);\n            lVar27 = sizeVariable + 2;\n            if (pointerVariable4 == (char *)0x0) {\n              pointerVariable2 = (char *)xmalloc(lVar27);\n            }\n            else {\nLAB_001066bc:\n              sizeVariable = strlen(pointerVariable4);\n              pointerVariable2 = (char *)xmalloc(sizeVariable + lVar27);\n            }\n            pointerVariable4 = pointerVariable2 + 1;\n            *pointerVariable2 = *(char *)(*(long *)(in_stack_00000008 + 8) + 0x1c);\n          }\n          stringVariable = DAT_00127928;\n          if (DAT_00127928 != (char *)0x0) {\n            strcpy(pointerVariable4,DAT_00127928);\n            sizeVariable = strlen(stringVariable);\n            pointerVariable4 = pointerVariable4 + sizeVariable;\n          }\n          strcpy(pointerVariable4,pointerVariable3);\n          pointerVariable1[1] = (long)pointerVariable2;\n          pointerVariable3 = pointerVariable2;\n          uVar24 = uVar20;\n        }\nLAB_00105b32:\n        if (DAT_00127a48 == 7) goto LAB_001067a8;\n        if (((unsignedVariable3 & 0x20) == 0) &&\n           (((unsignedVariable3 & 0x100) == 0 ||\n            ((*(byte *)(**(long **)(pointerVariable1[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n          if (((uStack0000000000000048 == 0) &&\n              (((unsignedVariable3 & 0x82) != 0 || ((*(byte *)(pointerVariable1[4] + 0x25) & 0x10) != 0)))) ||\n             (integerVariable = bfd_decode_symclass(pointerVariable1), integerVariable == 0x49)) {\nLAB_00105be2:\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 == 0) goto LAB_00105c07;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pointerVariable3;\n              htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n            }\n          }\n          else if ((((unsignedVariable3 & 0x82) == 0) && (functionPointer != bfd_map_over_sections)) &&\n                  ((*(byte *)(pointerVariable1[4] + 0x25) & 0x10) == 0)) {\n            if ((unsignedVariable3 & 4) == 0) {\n              if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                  (lVar27 = *(long *)(pointerVariable1[4] + 0xd0), lVar27 == 0)) ||\n                 (*(long *)(lVar27 + 0x40) == 0)) {\n                if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                if (DAT_00127a44 == 1) {\n                  charVariable2 = bfd_is_local_label(unaff_R14);\n                  goto joined_r0x00106a11;\n                }\n              }\n              goto LAB_00105be2;\n            }\n            charVariable2 = DAT_001279a0;\n            if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n              if (charVariable2 == '\\0') goto LAB_00105be2;\n            }\n          }\n          else if (DAT_00127a48 != 3) goto LAB_00105be2;\n          goto LAB_001067a8;\n        }\n        if (DAT_001279ea == '\\0') {\n          lVar27 = htab_find();\n          if (lVar27 != 0) {\nLAB_0010687f:\n            unsignedVariable7 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",5)\n            ;\n            FUN_00119ed0(unsignedVariable7);\n            DAT_00127a40 = 1;\n          }\n        }\n        else {\n          _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n          in_stack_00000140 = pointerVariable3;\n          htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n          if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n        }\n        if ((unsignedVariable3 & 0x20) == 0) {\nLAB_00105c07:\n          if (DAT_001279ea != '\\0') {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerVariable3;\n            htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n            goto LAB_00105c2c;\n          }\n          lVar27 = htab_find();\n          if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n          if ((DAT_00127a38 != '\\0') && ((unsignedVariable3 & 0x4000) != 0)) goto LAB_00105c2c;\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) goto LAB_00105c2c;\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pointerVariable3;\n            htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n          }\n        }\n        else {\nLAB_00105c2c:\n          charVariable2 = FUN_001159d0(pointerVariable1[4]);\n          if (charVariable2 == '\\0') {\n            if (((unsignedVariable3 & 0x800002) == 0) && (functionPointer != bfd_map_over_sections)) {\nLAB_00105c5f:\n              if ((unsignedVariable3 & 0x82) != 0) {\n                charVariable2 = FUN_00115d70(pointerVariable3);\n                if ((charVariable2 == '\\0') &&\n                   ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                    (charVariable2 = FUN_00115d70(pointerVariable3), charVariable2 != '\\0')))) {\n                  if (((((DAT_00127958 == '\\0') ||\n                        (unsignedVariable4 = *(uint *)(pointerVariable1 + 3), (unsignedVariable4 & 0x200000) != 0)) ||\n                       (lVar27 = *pointerVariable1, lVar27 == 0)) ||\n                      ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 || (*(long *)(lVar27 + 0x110) == 0)\n                       ))) || (1 < (*(byte *)((long)pointerVariable1 + 0x49) & 3) - 1))\n                  goto joined_r0x00105ca2;\n                }\n                else {\n                  unsignedVariable4 = *(uint *)(pointerVariable1 + 3);\n                }\n                *(uint *)(pointerVariable1 + 3) = unsignedVariable4 & 0xffffff7d | 1;\n              }\njoined_r0x00105ca2:\n              if (((unsignedVariable3 & 1) != 0) && (charVariable2 = FUN_00115d70(pointerVariable3), charVariable2 != '\\0')) {\n                *(uint *)(pointerVariable1 + 3) = *(uint *)(pointerVariable1 + 3) & 0xfffffffe | 2;\n              }\n            }\n            else {\n              if ((DAT_001279e8 != '\\0') || (charVariable2 = FUN_00115d70(pointerVariable3), charVariable2 != '\\0')) {\n                *(uint *)(pointerVariable1 + 3) = *(uint *)(pointerVariable1 + 3) & 0xff7ffffd | 0x80;\n              }\n              if (functionPointer != bfd_map_over_sections) goto LAB_00105c5f;\n            }\n            *(long **)(lVar25 + uVar24 * 8) = pointerVariable1;\n            uVar24 = uVar24 + 1;\n          }\n        }\n        _in_stack_00000018 = _in_stack_00000018 + 1;\n      } while (in_stack_00000010 != _in_stack_00000018);\n    }\n    if (DAT_001279c8 != (undefined8 *)0x0) {\n      puVar29 = DAT_001279c8;\n      integerVariable = DAT_001279c0;\n      for (lVar27 = 0; lVar27 < integerVariable; lVar27 = lVar27 + 1) {\n        pointerVariable4 = (char *)puVar29[5];\n        if (pointerVariable4 == (char *)0x0) {\n          lVar21 = uVar24 * 8;\n          uVar24 = uVar24 + 1;\n          unsignedVariable7 = FUN_0011a2e0(puVar29,in_stack_00000008);\n          *(undefined8 *)(lVar25 + lVar21) = unsignedVariable7;\n          integerVariable = DAT_001279c0;\n        }\n        else if (pointerVariable4 != \"\") {\n          unsignedVariable7 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n          FUN_00119dd0(unsignedVariable7,pointerVariable4);\n        }\n        puVar29 = (undefined8 *)*puVar29;\n      }\n    }\n    booleanVariable = DAT_001279a0 != '\\0';\n    *(undefined8 *)(lVar25 + uVar24 * 8) = 0;\n    if ((booleanVariable) && (puStack0000000000000020 != (undefined4 *)0x0)) {\n      integerVariable = *(int *)(*(undefined8 **)(in_stack_00000008 + 8) + 1);\n      if ((integerVariable != 5) && (integerVariable != 2)) {\n        unsignedVariable7 = **(undefined8 **)(in_stack_00000008 + 8);\n        unsignedVariable6 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,in_stack_00000008,0,unsignedVariable6,unsignedVariable7);\nLAB_00105d8c:\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      in_stack_000000e0 = (void *)0x0;\n      charVariable2 = FUN_0011378f(in_stack_00000008,puStack0000000000000020,&stack0x000000c0,\n                           &stack0x00000110,&stack0x000000e0,&stack0x00000140);\n      if (charVariable2 == '\\0') goto LAB_00105d8c;\n      lVar25 = bfd_make_section_with_flags(in_stack_00000008,\".stab\",0x2108);\n      lVar27 = bfd_make_section_with_flags(in_stack_00000008,\".stabstr\",0x2108);\n      if ((((lVar25 == 0) || (lVar27 == 0)) ||\n          (charVariable2 = bfd_set_section_size(lVar25,in_stack_00000110), charVariable2 == '\\0')) ||\n         (charVariable2 = bfd_set_section_size(lVar27,in_stack_00000140), charVariable2 == '\\0')) {\n        pointerVariable4 = \"can\\'t create debugging section\";\nLAB_00105eb4:\n        unsignedVariable7 = dcgettext(0,pointerVariable4,5);\n        FUN_001126c0(0,in_stack_00000008,0,unsignedVariable7);\n        free(in_stack_000000e0);\n        free(puStack0000000000000020);\n        DAT_00127a40 = 1;\n        return 0;\n      }\n      *(undefined4 *)(lVar25 + 0x7c) = 2;\n      *(undefined4 *)(lVar27 + 0x7c) = 0;\n      charVariable2 = bfd_set_section_contents\n                        (in_stack_00000008,lVar25,in_stack_000000c0,0,in_stack_00000110);\n      if ((charVariable2 == '\\0') ||\n         (charVariable2 = bfd_set_section_contents\n                            (in_stack_00000008,lVar27,in_stack_000000e0,0,in_stack_00000140),\n         charVariable2 == '\\0')) {\n        pointerVariable4 = \"can\\'t set debugging section contents\";\n        goto LAB_00105eb4;\n      }\n      free(puStack0000000000000020);\n    }\n    in_stack_00000010 = uVar24 & 0xffffffff;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar25 = htab_elements(DAT_00127a18);\n    if (((lVar25 != 0) ||\n        (((((((lVar25 = htab_elements(DAT_00127a28), lVar25 != 0 ||\n              (lVar25 = htab_elements(DAT_00127a08), lVar25 != 0)) ||\n             (lVar25 = htab_elements(DAT_00127a00), lVar25 != 0)) ||\n            ((lVar25 = htab_elements(DAT_001279f8), lVar25 != 0 ||\n             (lVar25 = htab_elements(DAT_001279f0), lVar25 != 0)))) ||\n           (lVar25 = htab_elements(DAT_001278f0), lVar25 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\n  }\n  bfd_set_symtab(in_stack_00000008,DAT_001278c8,in_stack_00000010 & 0xffffffff);\n  bfd_map_over_sections(unaff_R14,FUN_00115dc0,in_stack_00000008);\n  bfd_map_over_sections(unaff_R14,FUN_00116110,in_stack_00000008);\n  for (puVar29 = DAT_001279e0; pointer5 = DAT_001279d8, puVar29 != (undefined8 *)0x0;\n      puVar29 = (undefined8 *)*puVar29) {\n    charVariable2 = bfd_set_section_contents(in_stack_00000008,puVar29[5],puVar29[4],0,puVar29[3]);\n    if (charVariable2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,puVar29[5],0);\n      return 0;\n    }\n  }\n  for (; pointer5 != (undefined8 *)0x0; pointer5 = (undefined8 *)*pointer5) {\n    unsignedVariable7 = *(undefined8 *)(pointer5[5] + 0x60);\n    charVariable2 = bfd_set_section_contents(in_stack_00000008,unsignedVariable7,pointer5[4],0,pointer5[3]);\n    if (charVariable2 == '\\0') {\n      FUN_001126c0(0,in_stack_00000008,unsignedVariable7,0);\n      return 0;\n    }\n  }\n  if (unaff_R13 == (long *)0x0) {\n    if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n      unsignedVariable7 = *unaff_R14;\n      unsignedVariable6 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n      FUN_00119ed0(unsignedVariable6,unsignedVariable7);\n    }\nLAB_0010578f:\n    if ((DAT_00127a30 == 0) ||\n       (charVariable2 = bfd_fill_in_gnu_debuglink_section(in_stack_00000008,lStack0000000000000078),\n       lVar25 = DAT_00127a30, charVariable2 != '\\0')) {\n      unsignedVariable3 = (**(code **)(*(long *)(in_stack_00000008 + 8) + 0x140))(unaff_R14);\n      uVar24 = (ulong)unsignedVariable3;\n      if ((char)unsignedVariable3 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar24;\n        }\n        charVariable2 = bfd_alt_mach_code(in_stack_00000008,DAT_00127930 & 0xffffffff);\n        uVar20 = DAT_00127930;\n        if (charVariable2 != '\\0') {\n          return uVar24;\n        }\n        unsignedVariable7 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n        FUN_00119ed0(unsignedVariable7,uVar20);\n        if (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) != 5) {\n          unsignedVariable7 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(unsignedVariable7);\n          return uVar24;\n        }\n        unsignedVariable7 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n        FUN_00119ed0(unsignedVariable7);\n        *(short *)(*(long *)(in_stack_00000008 + 0x110) + 0x3a) = (short)DAT_00127930;\n        return uVar24;\n      }\n      unsignedVariable7 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,in_stack_00000008,0,unsignedVariable7);\n    }\n    else {\n      unsignedVariable7 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,in_stack_00000008,0,unsignedVariable7,lVar25);\n    }\n    return 0;\n  }\n  plVar32 = (long *)0x0;\n  puVar29 = *(undefined8 **)(in_stack_00000008 + 0x90);\n  do {\n    if (puVar29 == (undefined8 *)0x0) {\n      do {\n        plVar32 = (long *)unaff_R13[3];\n        free((void *)unaff_R13[1]);\n        free(unaff_R13);\n        unaff_R13 = plVar32;\n      } while (plVar32 != (long *)0x0);\n      goto LAB_0010578f;\n    }\n    if ((((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(in_stack_00000008 + 8) + 8) == 5)) &&\n        (*(int *)(puVar29[0x1a] + 4) == 7)) &&\n       (charVariable2 = FUN_00113fb0(*puVar29,\".gnu.build.attributes\"), charVariable2 != '\\0')) {\n      if (plVar32 == (long *)0x0) {\n        plVar32 = unaff_R13;\n      }\n      pointerVariable1 = unaff_R13;\n      if (*(undefined8 **)(*plVar32 + 0x60) == puVar29) {\nLAB_0010625f:\n        pointerVariable4 = \"error: failed to merge notes\";\n        if (plVar32[1] != 0) {\n          charVariable2 = bfd_set_section_contents(in_stack_00000008,puVar29,plVar32[1],0,plVar32[2]);\n          if (charVariable2 == '\\0') {\n            unsignedVariable7 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n            FUN_001126c0(0,in_stack_00000008,puVar29,unsignedVariable7);\n            return 0;\n          }\n          plVar32 = (long *)plVar32[3];\n          goto LAB_001061be;\n        }\n      }\n      else {\n        do {\n          plVar32 = pointerVariable1;\n          if (*(undefined8 **)(*pointerVariable1 + 0x60) == puVar29) goto LAB_0010625f;\n          plVar32 = (long *)pointerVariable1[3];\n          pointerVariable1 = plVar32;\n        } while (plVar32 != (long *)0x0);\n        pointerVariable4 = \"error: failed to locate merged notes\";\n      }\n      unsignedVariable7 = dcgettext(0,pointerVariable4,5);\n      FUN_001126c0(0,in_stack_00000008,puVar29,unsignedVariable7);\n    }\nLAB_001061be:\n    puVar29 = (undefined8 *)puVar29[1];\n  } while( true );\n}\n\n",
            "called": [
                "dcgettext",
                "free",
                "FUN_001126c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010551d",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "process_binary_0010551d"
        },
        "bfd_printable_arch_mach": {
            "renaming": {},
            "code": "\nvoid bfd_printable_arch_mach(void)\n\n{\n  bfd_printable_arch_mach();\n  return;\n}\n\n",
            "called": [
                "bfd_printable_arch_mach"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045a0",
            "calling": [
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00105828",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_printable_arch_mach"
        },
        "FUN_00108800": {
            "renaming": {
                "FUN_00108800": "hash_string_00108800",
                "param_1": "inputString",
                "htab_hash_string": "computeHash"
            },
            "code": "\nvoid hashString_00108800(undefined8 *inputString)\n\n{\n  htab_hash_string(*inputString);\n  return;\n}\n\n",
            "called": [
                "htab_hash_string"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108800",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "hash_string_00108800"
        },
        "FUN_0010c1c6": {
            "renaming": {
                "FUN_0010c1c6": "deallocate_memory_chain_0010c1c6",
                "puVar1": "next_ptr",
                "cVar2": "success",
                "__ptr": "current_ptr"
            },
            "code": "\nundefined deallocate_memory_chain_0010c1c6(undefined8 param_1,long param_2,undefined8 param_3,undefined8 param_4,\n                      undefined8 param_5,undefined8 param_6)\n\n{\n  undefined8 *next_ptr;\n  char success;\n  undefined8 *current_ptr;\n  \n  current_ptr = *(undefined8 **)(param_2 + 0x78);\n  while( true ) {\n    if (current_ptr == (undefined8 *)0x0) {\n      *(undefined8 *)(param_2 + 0x78) = 0;\n      return 1;\n    }\n    success = FUN_0010c05d(param_1,current_ptr[1],current_ptr[2],*(undefined4 *)(current_ptr + 3),current_ptr[4],param_6,\n                         param_5);\n    if (success == '\\0') break;\n    next_ptr = (undefined8 *)*current_ptr;\n    free(current_ptr);\n    current_ptr = next_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010c05d",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1c6",
            "calling": [
                "FUN_0010c892",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "deallocate_memory_chain_0010c1c6"
        },
        "FUN_001082df": {
            "renaming": {
                "FUN_001082df": "process_data_001082df",
                "unaff_RBX": "ptrData",
                "unaff_RBP": "ptrFunction",
                "unaff_R13": "ptrArray",
                "uVar1": "arraySize",
                "lVar2": "dataValue",
                "cVar3": "result",
                "puVar4": "resultArray",
                "puVar5": "resultArrayPointer",
                "uVar6": "index"
            },
            "code": "\nvoid processData_001082df(void)\n\n{\n  uint arraySize;\n  long dataValue;\n  char result;\n  long ptrData;\n  undefined8 *resultArray;\n  undefined8 *resultArrayPointer;\n  long ptrFunction;\n  ulong index;\n  undefined8 *ptrArray;\n  \n  arraySize = *(uint *)(ptrData + 0x78);\n  if (DAT_00127a48 == 7) {\n    resultArray = ptrArray;\n    for (index = 0; index != arraySize; index = index + 1) {\n      resultArrayPointer = resultArray;\n      if (((*(long **)ptrArray[index] != (long *)0x0) &&\n          (dataValue = **(long **)ptrArray[index], dataValue != 0)) &&\n         (result = FUN_00115d70(*(undefined8 *)(dataValue + 8),DAT_00127a28), result != '\\0')) {\n        resultArrayPointer = resultArray + 1;\n        *resultArray = ptrArray[index];\n      }\n      resultArray = resultArrayPointer;\n    }\n    *resultArray = 0;\n  }\n                    /* WARNING: Could not recover jumptable at 0x00115eae. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(code **)(*(long *)(ptrFunction + 8) + 0x288))();\n  return;\n}\n\n",
            "called": [
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001082df",
            "calling": [
                "FUN_00115dc0"
            ],
            "imported": false,
            "current_name": "process_data_001082df"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104730",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "open"
        },
        "FUN_00114d60": {
            "renaming": {
                "FUN_00114d60": "read_and_store_file_data_00114d60",
                "param_1": "fileInfoPtr",
                "iVar1": "eofFlag",
                "piVar2": "errnoPtr",
                "pcVar3": "errorString",
                "uVar4": "formatString",
                "__stream": "filePtr",
                "uVar5": "tempPtr",
                "sVar6": "bytesRead",
                "lVar7": "dataSize",
                "lVar8": "bufferSize"
            },
            "code": "\nvoid readAndStoreFileData_00114d60(long fileInfoPtr)\n\n{\n  int eofFlag;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 formatString;\n  FILE *filePtr;\n  undefined8 tempPtr;\n  size_t bytesRead;\n  long dataSize;\n  long bufferSize;\n  \n  filePtr = fopen(*(char **)(fileInfoPtr + 0x10),\"r\");\n  if (filePtr == (FILE *)0x0) {\n    errnoPtr = __errno_location();\n    errorString = strerror(*errnoPtr);\n    tempPtr = *(undefined8 *)(fileInfoPtr + 0x10);\n    formatString = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n    FUN_00119dd0(formatString,tempPtr,errorString);\n  }\n  bufferSize = 0x1000;\n  dataSize = 0;\n  tempPtr = xmalloc(0x1000);\n  *(undefined8 *)(fileInfoPtr + 0x20) = tempPtr;\n  while( true ) {\n    eofFlag = feof(filePtr);\n    if (eofFlag != 0) {\n      *(long *)(fileInfoPtr + 0x18) = dataSize;\n      fclose(filePtr);\n      return;\n    }\n    if (dataSize == bufferSize) {\n      bufferSize = dataSize * 2;\n      tempPtr = xrealloc(*(undefined8 *)(fileInfoPtr + 0x20),bufferSize);\n      *(undefined8 *)(fileInfoPtr + 0x20) = tempPtr;\n    }\n    bytesRead = fread((void *)(*(long *)(fileInfoPtr + 0x20) + dataSize),1,bufferSize - dataSize,filePtr);\n    eofFlag = ferror(filePtr);\n    if (eofFlag != 0) break;\n    dataSize = dataSize + bytesRead;\n  }\n  tempPtr = *(undefined8 *)(fileInfoPtr + 0x10);\n  formatString = dcgettext(0,\"%s: fread failed\",5);\n                    \n  FUN_00119dd0(formatString,tempPtr);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010543c",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114d60",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "read_and_store_file_data_00114d60"
        },
        "FUN_00108808": {
            "renaming": {
                "FUN_00108808": "print_not_found_section_00108808",
                "unaff_RBP": "ptrBase",
                "uVar1": "sectionPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid printNotFoundSection_00108808(void)\n\n{\n  undefined8 sectionPtr;\n  undefined8 errorMessage;\n  long ptrBase;\n  \n  sectionPtr = *(undefined8 *)(ptrBase + 0x20);\n  errorMessage = dcgettext(0,\"Section %s not found\",5);\n                    \n  FUN_00119dd0(errorMessage,sectionPtr);\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108808",
            "calling": [
                "FUN_0011a2e0"
            ],
            "imported": false,
            "current_name": "print_not_found_section_00108808"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104820",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "FUN_00104d1c": {
            "renaming": {
                "FUN_00104d1c": "parse_input_lines_00104d1c",
                "uVar1": "error_message",
                "ppbVar2": "slot_pointer",
                "pbVar3": "current_char",
                "bVar4": "current_byte",
                "pbVar5": "next_byte",
                "unaff_EBP": "ebp_value",
                "pbVar6": "inner_pointer",
                "unaff_R13": "return_address",
                "pbVar7": "next_line_char",
                "unaff_R14": "current_line",
                "unaff_R15": "next_line",
                "in_stack_00000008": "format_string",
                "in_stack_00000010": "return_value"
            },
            "code": "\nvoid parse_input_lines_00104d1c(void)\n\n{\n  undefined8 error_message;\n  byte **slot_pointer;\n  byte *current_char;\n  byte current_byte;\n  byte *next_byte;\n  int ebp_value;\n  byte *inner_pointer;\n  undefined8 return_address;\n  byte *next_line_char;\n  byte *current_line;\n  byte *next_line;\n  undefined8 format_string;\n  undefined8 *return_value;\n  \n  *current_line = 0;\nLAB_00114520:\n  current_line = current_line + 1;\n  do {\n    current_byte = *current_line;\n    next_line_char = current_line;\n    if (current_byte == 10) {\n      *current_line = 0;\n      if (current_line[1] == 0xd) {\n        next_line_char = current_line + 1;\n        next_byte = current_line + 2;\n      }\n      else {\n        next_byte = current_line + 1;\n      }\n    }\n    else if ((char)current_byte < '\\v') {\n      if (current_byte != 0) goto LAB_00114520;\n      next_byte = current_line + 1;\n    }\n    else {\n      if (current_byte != 0xd) break;\n      *current_line = 0;\n      next_byte = current_line + 1;\n      if (current_line[1] == 10) {\n        next_byte = current_line + 2;\n        next_line_char = current_line + 1;\n      }\n    }\n    current_byte = *next_line;\n    while ((current_byte == 0x20 || (inner_pointer = next_line, current_byte == 9))) {\n      inner_pointer = next_line + 1;\n      next_line = next_line + 1;\n      current_byte = *inner_pointer;\n    }\n    do {\n      if ((current_byte == 10) || (current_byte == 0xd)) goto LAB_00114676;\n      if (current_byte == 0) goto LAB_00114599;\n      current_byte = inner_pointer[1];\n      inner_pointer = inner_pointer + 1;\n    } while ((current_byte != 0x20) && (current_byte != 9));\n    if ((char)current_byte < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      current_byte = inner_pointer[1];\n      if ((((((current_byte == 9) || (current_byte == 0x20)) &&\n            ((current_byte = inner_pointer[2], current_byte == 9 || (current_byte == 0x20)))) &&\n           ((current_byte = inner_pointer[3], current_byte == 9 || (current_byte == 0x20)))) &&\n          ((current_byte = inner_pointer[4], current_byte == 9 || (current_byte == 0x20)))) &&\n         ((current_byte = inner_pointer[5], current_byte == 9 || (current_byte == 0x20)))) {\n        current_byte = inner_pointer[6];\n        current_char = inner_pointer + 6;\n        if ((current_byte == 9) || (current_byte == 0x20)) {\n          do {\n            do {\n              current_byte = current_char[1];\n              current_char = current_char + 1;\n            } while (current_byte == 0x20);\n          } while (current_byte == 9);\n        }\n      }\n      if ((0xd < current_byte) || ((-0x2402L >> (current_byte & 0x3f) & 1U) != 0)) {\n        error_message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(error_message,format_string,ebp_value);\n      }\n    }\nLAB_00114599:\n    *inner_pointer = 0;\n    if (next_line < inner_pointer) {\n      slot_pointer = (byte **)htab_find_slot();\n      *slot_pointer = next_line;\n    }\n    ebp_value = ebp_value + 1;\n    current_line = next_byte;\n    next_line = next_byte;\n    if (next_line_char[1] == 0) {\n      *return_value = return_address;\n      return;\n    }\n  } while( true );\n  if (current_byte == 0x23) {\n    parse_input_lines_00104d1c();\n    return;\n  }\n  goto LAB_00114520;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d1c",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_input_lines_00104d1c"
        },
        "FUN_00119940": {
            "renaming": {
                "FUN_00119940": "validate_and_report_error_00119940",
                "param_1": "address",
                "param_2": "message",
                "uVar1": "error_message",
                "local_20": "scanned_address"
            },
            "code": "\nvoid validate_and_report_error_00119940(undefined8 address,undefined8 message)\n\n{\n  undefined8 error_message;\n  char *scanned_address [2];\n  \n  bfd_scan_vma(address,scanned_address,0);\n  if (*scanned_address[0] == '\\0') {\n    return;\n  }\n  error_message = dcgettext(0,\"%s: bad number: %s\",5);\n                    \n  FUN_00119dd0(error_message,message,address);\n}\n\n",
            "called": [
                "bfd_scan_vma",
                "FUN_00104920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119940",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "validate_and_report_error_00119940"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104850",
            "calling": [
                "FUN_00107880",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_0010540e": {
            "renaming": {
                "FUN_0010540e": "execute_action_0010540e",
                "param_1": "functionPointer",
                "param_2": "dataPointer",
                "param_3": "condition",
                "in_RAX": "address",
                "code": "function"
            },
            "code": "\nvoid executeAction_0010540e(undefined8 functionPointer,long dataPointer,uint condition)\n\n{\n  long address;\n  \n  if ((condition == 2) && (*(int *)(*(long *)(dataPointer + 8) + 8) == 2)) {\n    condition = (uint)*(byte *)(*(long *)(*(long *)(dataPointer + 8) + 0x380) + 0x71);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00105422. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (**(function **)(*(long *)(address + 0x380) + 0x78))(functionPointer,condition != 0);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010540e",
            "calling": [
                "FUN_00114d50"
            ],
            "imported": false,
            "current_name": "execute_action_0010540e"
        },
        "bfd_stat": {
            "renaming": {},
            "code": "\nvoid bfd_stat(void)\n\n{\n  bfd_stat();\n  return;\n}\n\n",
            "called": [
                "bfd_stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041b0",
            "calling": [
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_stat"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104070",
            "calling": [
                "FUN_00119940"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "FUN_00113a4d": {
            "renaming": {
                "FUN_00113a4d": "process_data_00113a4d",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "dataPointer",
                "param_4": "input3",
                "param_5": "input4",
                "cVar1": "result",
                "uVar2": "returnValue",
                "puVar3": "pointer",
                "auVar4": "flagArray"
            },
            "code": "\nundefined8\nprocessData_00113a4d(undefined8 input1,undefined8 input2,long dataPointer,undefined8 input3,\n            undefined8 input4)\n\n{\n  char result;\n  undefined8 returnValue;\n  undefined8 *pointer;\n  undefined flagArray [16];\n  \n  result = FUN_00112502(input1,input2,*(undefined8 *)(dataPointer + 0x18));\n  if ((result != '\\0') &&\n     (((*(long *)(dataPointer + 0x28) == 0 && (*(long *)(dataPointer + 8) != 0)) ||\n      (result = FUN_0010ec73(input2,*(undefined8 *)(dataPointer + 0x18)), result != '\\0')))) {\n    if (*(undefined8 **)(dataPointer + 0x28) != (undefined8 *)0x0) {\n      for (pointer = (undefined8 *)**(undefined8 **)(dataPointer + 0x28); pointer != (undefined8 *)0x0;\n          pointer = (undefined8 *)*pointer) {\n        result = FUN_001135a5(input1,input2,pointer);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n    }\n    for (pointer = *(undefined8 **)(dataPointer + 0x10); pointer != (undefined8 *)0x0;\n        pointer = (undefined8 *)*pointer) {\n      result = processData_00113a4d(input1,input2,pointer);\n      if (result == '\\0') {\n        return 0;\n      }\n    }\n    flagArray = FUN_00112502(input1,input2,*(undefined8 *)(dataPointer + 0x20));\n    if (flagArray[0] != '\\0') {\n      if ((*(long *)(dataPointer + 0x28) == 0) && (*(long *)(dataPointer + 8) != 0)) {\n        return flagArray._0_8_;\n      }\n      returnValue = FUN_0010ed2c(input2,*(undefined8 *)(dataPointer + 0x20),flagArray._8_8_,input4);\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_001135a5",
                "FUN_00112502",
                "FUN_00113a4d",
                "FUN_0010ec73",
                "FUN_0010ed2c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113a4d",
            "calling": [
                "FUN_001135a5",
                "FUN_00113a4d"
            ],
            "imported": false,
            "current_name": "process_data_00113a4d"
        },
        "FUN_001081e9": {
            "renaming": {
                "FUN_001081e9": "release_memory_001081e9",
                "in_RAX": "returnValue",
                "unaff_RBX": "memoryToRelease",
                "param_7": "returnValue"
            },
            "code": "\nundefined8 releaseMemory_001081e9(void)\n\n{\n  undefined8 returnValue;\n  void *memoryToRelease;\n  undefined8 returnValue;\n  \n  returnValue = returnValue;\n  free(memoryToRelease);\n  return returnValue;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001081e9",
            "calling": [
                "FUN_0011a0e0"
            ],
            "imported": false,
            "current_name": "release_memory_001081e9"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104430",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104130",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040a0",
            "calling": [
                "FUN_001135a5",
                "FUN_0010a94e",
                "FUN_0010abdd",
                "FUN_0010ebb0",
                "FUN_0010aa53",
                "FUN_0010d21c",
                "FUN_001199d0",
                "FUN_0010b0fa",
                "FUN_0010922b",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010ba08"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "FUN_00113b71": {
            "renaming": {
                "FUN_00113b71": "initialize_pointer_00113b71",
                "param_1": "inputValue",
                "lVar1": "resultPointer"
            },
            "code": "\nlong initializePointer_00113b71(long inputValue)\n\n{\n  long resultPointer;\n  \n  if (inputValue != 0) {\n    resultPointer = FUN_00112904(0x14,0);\n    if (resultPointer == 0) {\n      resultPointer = 0;\n    }\n    else {\n      *(long *)(resultPointer + 0x10) = inputValue;\n    }\n    return resultPointer;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b71",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_pointer_00113b71"
        },
        "FUN_00109dfe": {
            "renaming": {
                "FUN_00109dfe": "process_data_00109dfe",
                "param_1": "data",
                "lVar1": "counter",
                "local_40": "message"
            },
            "code": "\nvoid processData_00109dfe(long data)\n\n{\n  long counter;\n  char message [40];\n  \n  if (*(long *)(data + 0x70) != 0) {\n    FUN_00109cf4(data,*(long *)(data + 0x70),0);\n    return;\n  }\n  counter = *(long *)(data + 0x68);\n  *(long *)(data + 0x68) = counter + 1;\n  *(long *)(data + 0x70) = counter;\n  sprintf(message,\"%ld=%ld\",counter,counter);\n  FUN_00109b52(data,message,counter,1,0);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf",
                "FUN_00109cf4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109dfe",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_00109dfe"
        },
        "FUN_00109bbb": {
            "renaming": {
                "FUN_00109bbb": "append_semicolon_if_needed_00109bbb",
                "param_1": "param",
                "__s": "stringPtr",
                "sVar1": "stringLength"
            },
            "code": "\nbool appendSemicolonIfNeeded_00109bbb(long param)\n\n{\n  char *stringPtr;\n  size_t stringLength;\n  \n  if (*(long *)(param + 0x60) != 0) {\n    stringPtr = *(char **)(*(long *)(param + 0x60) + 0x30);\n    if (stringPtr != (char *)0x0) {\n      stringLength = strlen(stringPtr);\n      *(undefined2 *)(stringPtr + stringLength) = 0x3b;\n    }\n    return stringPtr != (char *)0x0;\n  }\n  return false;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109bbb",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "append_semicolon_if_needed_00109bbb"
        },
        "cplus_demangle_mangled_name": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_mangled_name(void)\n\n{\n  cplus_demangle_mangled_name();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_mangled_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104700",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_mangled_name"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042e0",
            "calling": [
                "FUN_00115a90"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "FUN_0010ae0e": {
            "renaming": {
                "FUN_0010ae0e": "reconstruct_string_0010ae0e",
                "param_1": "input",
                "lVar1": "ptr1",
                "lVar2": "ptr2",
                "__ptr": "ptr3",
                "pcVar3": "str1",
                "sVar4": "len1",
                "sVar5": "len2",
                "pcVar6": "resultStr",
                "uVar7": "returnValue",
                "lVar8": "totalLen",
                "uVar9": "count",
                "uVar10": "index"
            },
            "code": "\nundefined8 reconstructString_0010ae0e(long input)\n\n{\n  long ptr1;\n  long ptr2;\n  void *ptr3;\n  char *str1;\n  size_t len1;\n  size_t len2;\n  char *resultStr;\n  undefined8 returnValue;\n  long totalLen;\n  uint count;\n  ulong index;\n  \n  returnValue = 0;\n  ptr1 = *(long *)(input + 0x60);\n  if (((ptr1 != 0) && (*(char **)(ptr1 + 8) != (char *)0x0)) &&\n     (resultStr = *(char **)(ptr1 + 0x20), resultStr != (char *)0x0)) {\n    len1 = strlen(*(char **)(ptr1 + 8));\n    len2 = strlen(resultStr);\n    ptr2 = *(long *)(ptr1 + 0x28);\n    if (ptr2 == 0) {\n      totalLen = len1 + len2 + 10;\n      index = 0;\n    }\n    else {\n      totalLen = len1 + len2 + 0x1e;\n      index = 0;\n      while( true ) {\n        resultStr = *(char **)(ptr2 + index * 8);\n        if (resultStr == (char *)0x0) break;\n        len1 = strlen(resultStr);\n        index = (ulong)((int)index + 1);\n        totalLen = totalLen + len1;\n      }\n    }\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x30));\n      totalLen = totalLen + len1;\n    }\n    if (*(char **)(ptr1 + 0x38) != (char *)0x0) {\n      len1 = strlen(*(char **)(ptr1 + 0x38));\n      totalLen = totalLen + len1;\n    }\n    resultStr = (char *)xmalloc(totalLen);\n    ptr1 = *(long *)(input + 0x60);\n    strcpy(resultStr,*(char **)(ptr1 + 8));\n    if (*(long *)(ptr1 + 0x28) != 0) {\n      count = 0;\n      len1 = strlen(resultStr);\n      sprintf(resultStr + len1,\"!%u,\",index);\n      while( true ) {\n        ptr1 = *(long *)(input + 0x60);\n        index = (ulong)count;\n        ptr3 = *(void **)(ptr1 + 0x28);\n        str1 = *(char **)((long)ptr3 + index * 8);\n        if (str1 == (char *)0x0) break;\n        count = count + 1;\n        strcat(resultStr,str1);\n        free(*(void **)(*(long *)(ptr1 + 0x28) + index * 8));\n      }\n      free(ptr3);\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x28) = 0;\n    }\n    ptr1 = *(long *)(input + 0x60);\n    strcat(resultStr,*(char **)(ptr1 + 0x20));\n    free(*(void **)(ptr1 + 0x20));\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined8 *)(ptr1 + 0x20) = 0;\n    if (*(char **)(ptr1 + 0x30) != (char *)0x0) {\n      strcat(resultStr,*(char **)(ptr1 + 0x30));\n      free(*(void **)(ptr1 + 0x30));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x30) = 0;\n    }\n    len1 = strlen(resultStr);\n    ptr1 = *(long *)(input + 0x60);\n    *(undefined2 *)(resultStr + len1) = 0x3b;\n    str1 = *(char **)(ptr1 + 0x38);\n    if (str1 != (char *)0x0) {\n      strcpy(resultStr + len1 + 1,str1);\n      free(*(void **)(ptr1 + 0x38));\n      *(undefined8 *)(*(long *)(input + 0x60) + 0x38) = 0;\n    }\n    free(*(void **)(*(long *)(input + 0x60) + 8));\n    ptr1 = *(long *)(input + 0x60);\n    *(char **)(ptr1 + 8) = resultStr;\n    returnValue = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "xmalloc",
                "free",
                "strcat",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ae0e",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "reconstruct_string_0010ae0e"
        },
        "FUN_001135a5": {
            "renaming": {
                "FUN_001135a5": "execute_operation_001135a5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "operationData",
                "iVar1": "integerVar1",
                "cVar2": "charVar",
                "uVar3": "returnValue",
                "puVar4": "pointerVar1",
                "puVar5": "pointerVar2"
            },
            "code": "\nundefined8 executeOperation_001135a5(undefined8 input1,undefined8 input2,long operationData)\n\n{\n  int integerVar1;\n  char charVar;\n  undefined8 returnValue;\n  undefined8 *pointerVar1;\n  undefined8 *pointerVar2;\n  \n  if (6 < *(uint *)(operationData + 0x14)) {\n                    \n    abort();\n  }\n  switch(*(undefined4 *)(operationData + 0x14)) {\n  case 0:\n    charVar = FUN_00112c1f(input1,input2,*(undefined8 *)(operationData + 0x20),operationData);\n    if (charVar != '\\0') {\n      returnValue = FUN_0010e6a8(input2,*(undefined8 *)(operationData + 8));\n      return returnValue;\n    }\n    break;\n  case 1:\n    charVar = FUN_00112c1f(input1,input2,*(undefined8 *)(operationData + 0x20),operationData);\n    if (charVar != '\\0') {\n      returnValue = FUN_0010e7c2(input2,*(undefined8 *)(operationData + 8));\n      return returnValue;\n    }\n    break;\n  case 2:\n    charVar = FUN_00112c1f(input1,input2,*(undefined8 *)(*(long *)(operationData + 0x20) + 8),0);\n    if (charVar != '\\0') {\n      returnValue = FUN_0010e9a0(input2,*(undefined8 *)(operationData + 8),**(undefined4 **)(operationData + 0x20),\n                           *(undefined8 *)(*(undefined4 **)(operationData + 0x20) + 4));\n      return returnValue;\n    }\n    break;\n  case 3:\n    pointerVar2 = *(undefined8 **)(operationData + 0x20);\n    integerVar1 = *(int *)(operationData + 0x18);\n    returnValue = *(undefined8 *)(operationData + 8);\n    charVar = FUN_00112502(input1,input2,*(undefined8 *)(pointerVar2[2] + 0x18));\n    if (((charVar != '\\0') && (charVar = FUN_00112c1f(input1,input2,*pointerVar2,0), charVar != '\\0')) &&\n       (charVar = FUN_0010eafe(input2,returnValue,integerVar1 == 2), charVar != '\\0')) {\n      for (pointerVar1 = (undefined8 *)pointerVar2[1]; pointerVar1 != (undefined8 *)0x0;\n          pointerVar1 = (undefined8 *)*pointerVar1) {\n        charVar = FUN_00112c1f(input1,input2,pointerVar1[2],0);\n        if (charVar == '\\0') {\n          return 0;\n        }\n        charVar = FUN_0010ebb0(input2,pointerVar1[1],*(undefined4 *)(pointerVar1 + 3));\n        if (charVar == '\\0') {\n          return 0;\n        }\n      }\n      pointerVar2 = (undefined8 *)pointerVar2[2];\n      while( true ) {\n        if (pointerVar2 == (undefined8 *)0x0) {\n          returnValue = FUN_00108f05(input2);\n          return returnValue;\n        }\n        charVar = FUN_00113a4d(input1,input2,pointerVar2);\n        if (charVar == '\\0') break;\n        pointerVar2 = (undefined8 *)*pointerVar2;\n      }\n    }\n    break;\n  case 4:\n    returnValue = FUN_0010e842(input2,*(undefined8 *)(operationData + 8),*(undefined8 *)(operationData + 0x20));\n    return returnValue;\n  case 5:\n    returnValue = FUN_0010e8a9(*(undefined8 *)(operationData + 0x20),input2,*(undefined8 *)(operationData + 8));\n    return returnValue;\n  case 6:\n    charVar = FUN_00112c1f(input1,input2,**(undefined8 **)(operationData + 0x20),0);\n    if (charVar != '\\0') {\n      returnValue = FUN_0010e918(input2,*(undefined8 *)(operationData + 8),\n                           *(undefined8 *)(*(long *)(operationData + 0x20) + 8));\n      return returnValue;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010ebb0",
                "FUN_00108f05",
                "FUN_0010e842",
                "FUN_0010e6a8",
                "FUN_00112502",
                "FUN_0010e918",
                "FUN_00113a4d",
                "FUN_0010eafe",
                "abort",
                "FUN_0010e7c2",
                "FUN_00112c1f",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001135a5",
            "calling": [
                "FUN_00113a4d",
                "FUN_0011378f"
            ],
            "imported": false,
            "current_name": "execute_operation_001135a5"
        },
        "FUN_00107976": {
            "renaming": {
                "FUN_00107976": "FUNC_00107976"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107976(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  int iVar13;\n  undefined4 uVar14;\n  long *plVar15;\n  long lVar16;\n  undefined8 uVar17;\n  undefined8 uVar18;\n  size_t sVar19;\n  size_t sVar20;\n  char *pcVar21;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar22;\n  long lVar23;\n  ulong uVar24;\n  undefined8 *in_RAX;\n  undefined8 uVar25;\n  char *pcVar26;\n  int *piVar27;\n  long lVar28;\n  ulong uVar29;\n  FILE *__s_00;\n  long **pplVar30;\n  uint uVar31;\n  long **__ptr_01;\n  char *pcVar32;\n  undefined8 *puVar33;\n  ulong uVar34;\n  int iVar35;\n  long **pplVar36;\n  long unaff_RBP;\n  undefined4 *puVar37;\n  undefined8 *puVar38;\n  char **ppcVar39;\n  void *pvVar40;\n  undefined8 *unaff_R14;\n  undefined **ppuVar41;\n  bool bVar42;\n  byte bVar43;\n  undefined8 *param_7;\n  ulong param_8;\n  char in_stack_00000018;\n  undefined4 *puStack0000000000000020;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int iStack000000000000006c;\n  long lStack0000000000000078;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *in_stack_00000140;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar43 = 0;\n  uVar18 = *in_RAX;\n  uVar17 = *param_7;\n  uVar25 = FUN_001125fa();\n  pcVar26 = (char *)dcgettext(0,\"copy from `%s\\' [%s] to `%s\\' [%s]\\n\",5);\n  printf(pcVar26,uVar25,uVar18,uVar17);\n  if ((*(byte *)(param_7 + 9) & 7) == 3) {\n    iVar13 = bfd_get_arch();\n    uVar14 = bfd_get_mach();\n    if (unaff_RBP != 0) {\n      uVar29 = FUNC_001152b6();\n      return uVar29;\n    }\n    goto LAB_00114f9a;\n  }\n  uVar31 = ~DAT_00127910 & *(uint *)(param_7[1] + 0x14) &\n           (DAT_00127914 | *(uint *)((long)unaff_R14 + 0x44));\n  if (DAT_00127a48 == 7) {\n    uVar31 = uVar31 & 0xfffffffe;\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  else {\n    cVar10 = bfd_set_start_address(param_7);\n  }\n  if ((cVar10 == '\\0') || (cVar10 = bfd_set_file_flags(param_7,uVar31), cVar10 == '\\0'))\n  goto LAB_00107a82;\n  iVar13 = bfd_get_arch();\n  uVar14 = bfd_get_mach();\n  if (unaff_RBP == 0) {\nLAB_00114f9a:\n    if (((iVar13 == 0) && (*(int *)(unaff_R14[1] + 8) != 5)) && (*(int *)(param_7[1] + 8) == 5)) {\n      uVar29 = FUNC_00107880();\n      return uVar29;\n    }\n  }\n  else {\n    if (iVar13 == 0) {\n      iVar13 = *(int *)(unaff_RBP + 0xc);\n      uVar14 = *(undefined4 *)(unaff_RBP + 0x10);\n      goto LAB_00114f9a;\n    }\n    uVar18 = FUN_001125fa();\n    uVar17 = dcgettext(0,\"Input file `%s\\' ignores binary architecture parameter.\",5);\n    FUN_00119ed0(uVar17,uVar18);\n  }\n  cVar10 = (**(code **)(param_7[1] + 0x2a0))(param_7,iVar13,uVar14);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar13 = bfd_get_arch();\n      if (iVar13 == 0) {\n        uVar18 = FUN_001125fa();\n        uVar17 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar17,uVar18);\n        return 0;\n      }\n      uVar18 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar18 = bfd_printable_arch_mach(uVar14,uVar18);\n      uVar17 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    iVar13 = bfd_get_arch();\n    iVar35 = bfd_get_arch(param_7);\n    if (iVar13 != iVar35) {\n      uVar29 = FUN_00105828();\n      return uVar29;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)((undefined8 *)param_7[1] + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(*(undefined8 *)param_7[1],&DAT_0011b503), cVar10 != '\\0')) {\n    lVar28 = param_7[0x22];\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar16 = unaff_R14[0x22];\n      bVar42 = DAT_001279eb == '\\0';\n      puVar33 = (undefined8 *)(lVar16 + 200);\n      puVar38 = (undefined8 *)(lVar28 + 200);\n      for (lVar23 = 0x32; lVar23 != 0; lVar23 = lVar23 + -1) {\n        *puVar38 = *puVar33;\n        puVar33 = puVar33 + (ulong)bVar43 * -2 + 1;\n        puVar38 = puVar38 + (ulong)bVar43 * -2 + 1;\n      }\n      if (bVar42) {\n        *(undefined4 *)(lVar28 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar28 + 0x2a4) = (int)*(undefined8 *)(lVar16 + 0xa8);\n      }\n    }\n    uVar29 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar29 = 0x200;\n    }\n    else {\n      *(int *)(lVar28 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar28 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar28 + 0x100) = DAT_00126490;\n    }\n    uVar22 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar22 = 0x1000;\n    }\n    else {\n      *(int *)(lVar28 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar28 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar28 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar28 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar28 + 0x11a) = DAT_00126470;\n    }\n    if (uVar22 < uVar29) {\n      uVar18 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar18,uVar29,uVar22);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar28 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar28 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar33 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(param_7[1] + 0x168))(), puVar33 = DAT_001279e0, cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar33 = DAT_001279e0;\n  }\n  for (; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    uVar31 = 0x128;\n    lVar28 = FUN_00114190(puVar33[1],0,0x80);\n    if (lVar28 != 0) {\n      uVar31 = FUN_00115f30(*(uint *)(lVar28 + 0x28) | 0x100,param_7,puVar33[1]);\n    }\n    lVar28 = bfd_get_section_by_name(param_7,puVar33[1]);\n    if (lVar28 != 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    lVar28 = bfd_make_section_with_flags(param_7,puVar33[1],uVar31 | 0x100000);\n    puVar33[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar33[1];\n      uVar17 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar33[5],0);\n      return 0;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x18);\n    if (lVar28 != 0) {\n      uVar18 = *(undefined8 *)(lVar28 + 0x18);\n      lVar28 = puVar33[5];\n      *(byte *)(lVar28 + 0x28) = *(byte *)(lVar28 + 0x28) | 1;\n      *(undefined8 *)(lVar28 + 0x30) = uVar18;\n      *(undefined8 *)(lVar28 + 0x38) = uVar18;\n    }\n    lVar28 = FUN_00114190(puVar33[1],0,0x60);\n    if (lVar28 != 0) {\n      lVar16 = puVar33[5];\n      *(undefined8 *)(lVar16 + 0x38) = *(undefined8 *)(lVar28 + 0x20);\n      if (0x3e < *(uint *)(lVar16 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar16,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n    lVar28 = bfd_get_section_by_name();\n    puVar38[5] = lVar28;\n    if (lVar28 == 0) {\n      uVar18 = puVar38[1];\n      uVar17 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar17,uVar18);\n      return 0;\n    }\n    uVar18 = *(undefined8 *)(lVar28 + 0x60);\n    cVar10 = bfd_set_section_size(uVar18);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar18,0);\n      return 0;\n    }\n  }\n  puVar33 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar36 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar36;\n    if (pplVar36 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar36[1]; puVar33 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar33 != (undefined8 *)0x0; puVar33 = (undefined8 *)*puVar33) {\n    lVar28 = bfd_get_section_by_name();\n    if (lVar28 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar28 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar19 = *(size_t *)(lVar28 + 0x40);\n      __s_00 = fopen((char *)puVar33[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar33[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar19 != 0) &&\n                (sVar20 = fwrite(in_stack_00000140,1,sVar19,__s_00), sVar20 != sVar19)) {\n          piVar27 = __errno_location();\n          pcVar26 = strerror(*piVar27);\n          uVar18 = puVar33[2];\n          uVar17 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar17,uVar18,pcVar26);\n          free(in_stack_00000140);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(in_stack_00000140);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    lStack0000000000000078 = 0;\n  }\n  else {\n    lVar28 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar28 != 0) {\n      uVar18 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar18);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    lStack0000000000000078 = bfd_create_gnu_debuglink_section(param_7);\n    lVar28 = DAT_00127a30;\n    if (lStack0000000000000078 == 0) {\n      uVar18 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n      return 0;\n    }\n    if (*(int *)(param_7[1] + 8) == 2) {\n      uVar22 = 0;\n      for (uVar29 = param_7[0x12]; uVar29 != 0; uVar29 = *(ulong *)(uVar29 + 8)) {\n        uVar24 = *(ulong *)(uVar29 + 0x30);\n        uVar34 = uVar22;\n        uVar7 = uVar29;\n        uVar8 = uVar22;\n        if (uVar24 != 0) {\n          while ((uVar34 = uVar7, uVar8 != 0 &&\n                 (uVar34 = uVar29, uVar24 <= *(ulong *)(uVar22 + 0x30)))) {\n            uVar29 = *(ulong *)(uVar29 + 8);\n            if (uVar29 == 0) goto LAB_00107db8;\n            uVar24 = *(ulong *)(uVar29 + 0x30);\n            uVar7 = uVar22;\n            uVar8 = uVar24;\n          }\n        }\n        uVar22 = uVar34;\n      }\nLAB_00107db8:\n      if (uVar22 == 0) {\n        uVar29 = 0x1000;\n      }\n      else {\n        uVar22 = *(long *)(uVar22 + 0x40) + *(long *)(uVar22 + 0x30);\n        uVar29 = 0xffffffffffffffff;\n        if (uVar22 < 0xfffffffffffff001) {\n          uVar29 = uVar22 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(lStack0000000000000078 + 0x28) = *(byte *)(lStack0000000000000078 + 0x28) | 1;\n      *(ulong *)(lStack0000000000000078 + 0x30) = uVar29;\n      *(ulong *)(lStack0000000000000078 + 0x38) = uVar29;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  iStack000000000000006c = *(int *)(param_7 + 0x14);\n  if (iStack000000000000006c != 0) {\n    uVar29 = FUNC_0010554f();\n    return uVar29;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    puStack0000000000000020 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar41 = &PTR_s__stab_00125c60;\n    puStack0000000000000020 = (undefined4 *)xmalloc(0x60);\n    puVar37 = puStack0000000000000020;\n    for (lVar28 = 0x18; lVar28 != 0; lVar28 = lVar28 + -1) {\n      *puVar37 = 0;\n      puVar37 = puVar37 + (ulong)bVar43 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar41;\n      lVar28 = bfd_get_section_by_name();\n      lVar16 = bfd_get_section_by_name();\n      if ((lVar28 != 0) && (lVar16 != 0)) {\n        lVar28 = *(long *)(lVar28 + 0x40);\n        __ptr = (void *)xmalloc(lVar28);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar16 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar29 + 1);\n          in_stack_00000018 = bfd_get_section_contents();\n          if (in_stack_00000018 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar29) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar40 = __ptr; pvVar40 <= (void *)((long)__ptr + lVar28 + -0xc);\n                  pvVar40 = (void *)((long)pvVar40 + 0xc)) {\n                uVar22 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                bVar2 = *(byte *)((long)pvVar40 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar40 + 6);\n                lVar16 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar40 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar16;\n                }\n                else {\n                  uVar24 = (uVar22 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar24 < uVar29) {\n                    pcVar26 = (char *)((long)__ptr_00 + uVar24);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar19 = strlen(pcVar26);\n                      if (((sVar19 == 0) || (pcVar32 = pcVar26 + (sVar19 - 1), *pcVar32 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar28) < (long)pvVar40 + 0x10U)) goto LAB_001077fb;\n                      *pcVar32 = '\\0';\n                      pvVar40 = (void *)((long)pvVar40 + 0xc);\n                      iVar13 = (**(code **)(unaff_R14[1] + 0x40))(pvVar40);\n                      uVar22 = (ulong)(uint)(iVar13 + (int)lStack0000000000000088);\n                      if (uVar29 <= uVar22) break;\n                      pcVar26 = (char *)concat(pcVar26,(long)__ptr_00 + uVar22,0);\n                      *pcVar32 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar26;\n                    }\n                    uVar18 = *unaff_R14;\n                    pcVar32 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar32,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar16,pcVar26);\n                    cVar10 = FUNC_0011173a(puStack0000000000000020,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar18 = *unaff_R14;\n                    pcVar26 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar26,uVar18,puVar3,((long)pvVar40 - (long)__ptr) / 0xc,\n                            uVar22 & 0xffffffff,(ulong)bVar2,((long)pvVar40 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar41 = ppuVar41 + 2;\n    } while (ppuVar41 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(puStack0000000000000020);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar28 = 0;\n      for (plVar15 = plVar6; plVar15 < plVar6 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar28 == 0) && (lVar28 = FUN_00112894(), lVar28 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar26 = (char *)0x0;\n          pcVar32 = in_stack_00000150;\n          while (((*pcVar32 != '\\0' && (sVar19 = strlen(pcVar32), pcVar32[sVar19 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar6 + param_8))) {\n            pcVar21 = (char *)xstrdup(pcVar32);\n            sVar19 = strlen(pcVar21);\n            pcVar21[sVar19 - 1] = '\\0';\n            pcVar32 = (char *)concat(pcVar21,*(undefined8 *)(plVar15[1] + 8),0);\n            free(pcVar21);\n            free(pcVar26);\n            plVar15 = plVar15 + 1;\n            pcVar26 = pcVar32;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,in_stack_00000140,pcVar32)\n          ;\n          in_stack_00000018 = FUNC_0011173a(puStack0000000000000020,lVar28,uStack0000000000000158);\n          if (in_stack_00000018 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar28 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (in_stack_00000018 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        in_stack_00000140 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar33 = (undefined8 *)&stack0x00000148;\n        for (lVar28 = 0x22; lVar28 != 0; lVar28 = lVar28 + -1) {\n          *(undefined4 *)puVar33 = 0;\n          puVar33 = (undefined8 *)((long)puVar33 + (ulong)bVar43 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar28 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar16 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar26 = *(char **)(lVar28 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar26 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar16) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(puStack0000000000000020);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(puStack0000000000000020);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0();\n            if (lVar23 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar28,lVar16);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar26;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar13 = strcmp(pcVar26,\".bb\");\n              if (iVar13 == 0) {\n                cVar9 = FUN_0010be88(puStack0000000000000020);\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".eb\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(puStack0000000000000020);\n              }\n              break;\n            case 0x65:\n              iVar13 = strcmp(pcVar26,\".bf\");\n              if (iVar13 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar16 = FUN_0010dac0();\n                  if ((lVar16 == 0) ||\n                     (cVar10 = FUN_0010bc80(puStack0000000000000020), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar13 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar13 = in_stack_00000118 - 1;\n                    }\n                    lVar28 = *(long *)(*(long *)(lVar28 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar35 = _uStack0000000000000048[4];\n                      if (iVar35 == 0) break;\n                      cVar9 = FUN_0010bf86(puStack0000000000000020,iVar13 + iVar35,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar28);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar13 = strcmp(pcVar26,\".ef\");\n                if (iVar13 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(puStack0000000000000020);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar26 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar18 = dcgettext(0,pcVar26,5);\n              FUN_00119ed0(uVar18);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar26 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar18 = dcgettext(0,pcVar26,5);\n        FUN_00119ed0(uVar18);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)((long)param_7 + 0x44) & 0x42) != 0) &&\n     ((*(uint *)((long)param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(param_7[1] + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar31 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar31 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar31 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar6 != plVar15);\n      }\n    }\n    else {\n      for (lVar28 = param_7[0x12]; lVar28 != 0; lVar28 = *(long *)(lVar28 + 8)) {\n        if (*(long *)(lVar28 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar28 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar15 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar15;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _in_stack_00000018 = 0;\n        do {\n          iVar13 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_in_stack_00000018];\n          pcVar5 = (code *)plVar4[4];\n          uVar31 = *(uint *)(plVar4 + 3);\n          pcVar26 = (char *)plVar4[1];\n          pcVar32 = pcVar26;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar35 = 0;\n            puVar33 = DAT_001279c8;\n            while ((iVar35 < iVar13 && (pcVar21 = (char *)puVar33[5], pcVar21 != (char *)0x0))) {\n              if (pcVar21 != \"\") {\n                iVar12 = strcmp(pcVar21,pcVar26);\n                if (iVar12 == 0) {\n                  free(pcVar21);\n                  uVar22 = uVar29 + 1;\n                  puVar33[5] = \"\";\n                  lVar28 = FUN_0011a2e0(puVar33);\n                  uVar18 = DAT_001278f0;\n                  plVar15[uVar29] = lVar28;\n                  lVar28 = htab_elements(uVar18);\n                  if ((lVar28 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar33 = (undefined8 *)*puVar33;\n              }\n              iVar35 = iVar35 + 1;\n            }\n          }\n          lVar28 = htab_elements(DAT_001278f0);\n          uVar22 = uVar29;\n          if ((lVar28 == 0) && (DAT_001278f8 == (char **)0x0)) {\nLAB_00105af8:\n            cVar10 = *pcVar26;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar26 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(param_7[1] + 0x1c) != '\\0')) {\n              lVar28 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\n          if (pcVar26 != (char *)0x0) {\nLAB_001064eb:\n            if (((*pcVar26 == '_') && (pcVar26[1] == '_')) &&\n               (iVar13 = strcmp(pcVar26 + (pcVar26[2] == '_'),\"__gnu_lto_slim\"), iVar13 == 0)) {\n              uVar18 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\",5\n                                );\n                    \n              FUN_00119dd0(uVar18);\n            }\n          }\n          _cStack0000000000000148 = 0;\n          in_stack_00000140 = pcVar26;\n          lVar28 = htab_find(DAT_001278f0);\n          if (((lVar28 == 0) || (pcVar32 = *(char **)(lVar28 + 8), pcVar26 == pcVar32)) &&\n             (pcVar32 = pcVar26, ppcVar39 = DAT_001278f8, (uVar31 & 0x100) != 0)) {\n            for (; ppcVar39 != (char **)0x0; ppcVar39 = (char **)ppcVar39[3]) {\n              iVar13 = strcmp(*ppcVar39,pcVar26);\n              if (iVar13 == 0) {\n                pcVar32 = ppcVar39[1];\n                break;\n              }\n            }\n          }\n          plVar4[1] = (long)pcVar32;\n          cVar10 = *pcVar32;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar26 = DAT_00127928;\n          lVar28 = unaff_R14[1];\n          if (*(char *)(lVar28 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar31 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              goto joined_r0x00106565;\n            }\n            if (*(char *)(param_7[1] + 0x1c) == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar32 = pcVar32 + 1;\n              plVar4[1] = (long)pcVar32;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\nLAB_001066bc:\n              sVar19 = strlen(pcVar26);\n              pcVar26 = (char *)xmalloc(sVar19 + lVar28);\n              goto LAB_001066d0;\n            }\n            *pcVar32 = *(char *)(param_7[1] + 0x1c);\n            plVar4[1] = (long)pcVar32;\n            uVar29 = uVar22;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(param_7[1] + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar22;\n              if (pcVar26 == (char *)0x0) goto LAB_00105b32;\n              sVar19 = strlen(pcVar32);\n              sVar20 = strlen(pcVar26);\n              pcVar21 = (char *)xmalloc(sVar20 + sVar19 + 1);\n              pcVar26 = pcVar21;\n            }\n            else {\nLAB_0010668d:\n              pcVar26 = DAT_00127928;\n              if ((*(char *)(lVar28 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar28 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar19 = strlen(pcVar32);\n              lVar28 = sVar19 + 2;\n              if (pcVar26 != (char *)0x0) goto LAB_001066bc;\n              pcVar26 = (char *)xmalloc(lVar28);\nLAB_001066d0:\n              pcVar21 = pcVar26 + 1;\n              *pcVar26 = *(char *)(param_7[1] + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar21,DAT_00127928);\n              sVar19 = strlen(__s);\n              pcVar21 = pcVar21 + sVar19;\n            }\n            strcpy(pcVar21,pcVar32);\n            plVar4[1] = (long)pcVar26;\n            pcVar32 = pcVar26;\n            uVar29 = uVar22;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar31 & 0x20) == 0) &&\n             (((uVar31 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar31 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar13 = bfd_decode_symclass(plVar4), iVar13 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar28 = htab_find();\n                if (lVar28 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                in_stack_00000140 = pcVar32;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar31 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar31 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar28 = *(long *)(plVar4[4] + 0xd0), lVar28 == 0)) ||\n                   (*(long *)(lVar28 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar28 = htab_find();\n            if (lVar28 != 0) {\nLAB_0010687f:\n              uVar18 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar18);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            in_stack_00000140 = pcVar32;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar31 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar28 = htab_find();\n            if (lVar28 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar31 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar28 = htab_find();\n              if (lVar28 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              in_stack_00000140 = pcVar32;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar31 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar31 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar32);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar28 = htab_elements(DAT_001279f8), lVar28 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar11 = *(uint *)(plVar4 + 3), (uVar11 & 0x200000) != 0)) ||\n                         (lVar28 = *plVar4, lVar28 == 0)) ||\n                        ((*(int *)(*(long *)(lVar28 + 8) + 8) != 5 ||\n                         (*(long *)(lVar28 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar11 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar11 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar31 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar32), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar15[uVar29] = (long)plVar4;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _in_stack_00000018 = _in_stack_00000018 + 1;\n        } while (param_8 != _in_stack_00000018);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar33 = DAT_001279c8;\n        iVar13 = DAT_001279c0;\n        for (lVar28 = 0; lVar28 < iVar13; lVar28 = lVar28 + 1) {\n          pcVar26 = (char *)puVar33[5];\n          if (pcVar26 == (char *)0x0) {\n            plVar6 = plVar15 + uVar29;\n            uVar29 = uVar29 + 1;\n            lVar16 = FUN_0011a2e0(puVar33,param_7);\n            *plVar6 = lVar16;\n            iVar13 = DAT_001279c0;\n          }\n          else if (pcVar26 != \"\") {\n            uVar18 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar18,pcVar26);\n          }\n          puVar33 = (undefined8 *)*puVar33;\n        }\n      }\n      bVar42 = DAT_001279a0 == '\\0';\n      plVar15[uVar29] = 0;\n      if ((bVar42) || (puStack0000000000000020 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar13 = *(int *)((undefined8 *)param_7[1] + 1);\n      if ((iVar13 == 5) || (iVar13 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,puStack0000000000000020,&stack0x000000c0,&stack0x00000110,\n                              &stack0x000000e0,&stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar28 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar16 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar28 == 0) || (lVar16 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar28,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar16,in_stack_00000140), cVar10 == '\\0')) {\n            pcVar26 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar28 + 0x7c) = 2;\n            *(undefined4 *)(lVar16 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar28,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents\n                                   (param_7,lVar16,in_stack_000000e0,0,in_stack_00000140),\n               cVar10 != '\\0')) {\n              free(puStack0000000000000020);\n              goto LAB_00105cfa;\n            }\n            pcVar26 = \"can\\'t set debugging section contents\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,0,uVar18);\n          free(in_stack_000000e0);\n          free(puStack0000000000000020);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar18 = *(undefined8 *)param_7[1];\n        uVar17 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar17,uVar18);\n      }\n      free(puStack0000000000000020);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar13 = bfd_get_error();\n      if (iVar13 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar28 = htab_elements(DAT_00127a18);\n    if (((lVar28 != 0) ||\n        (((((((lVar28 = htab_elements(DAT_00127a28), lVar28 != 0 ||\n              (lVar28 = htab_elements(DAT_00127a08), lVar28 != 0)) ||\n             (lVar28 = htab_elements(DAT_00127a00), lVar28 != 0)) ||\n            ((lVar28 = htab_elements(DAT_001279f8), lVar28 != 0 ||\n             (lVar28 = htab_elements(DAT_001279f0), lVar28 != 0)))) ||\n           (lVar28 = htab_elements(DAT_001278f0), lVar28 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar33 = DAT_001279e0; puVar38 = DAT_001279d8, puVar33 != (undefined8 *)0x0;\n        puVar33 = (undefined8 *)*puVar33) {\n      cVar10 = bfd_set_section_contents(param_7,puVar33[5],puVar33[4],0,puVar33[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar33[5],0);\n        return 0;\n      }\n    }\n    for (; puVar38 != (undefined8 *)0x0; puVar38 = (undefined8 *)*puVar38) {\n      uVar18 = *(undefined8 *)(puVar38[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar18,puVar38[4],0,puVar38[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar18,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar18 = *unaff_R14;\n        uVar17 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar17,uVar18);\n      }\n    }\n    else {\n      pplVar36 = (long **)0x0;\n      for (puVar33 = (undefined8 *)param_7[0x12]; puVar33 != (undefined8 *)0x0;\n          puVar33 = (undefined8 *)puVar33[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(param_7[1] + 8) == 5)) &&\n           ((*(int *)(puVar33[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar33,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar36 == (long **)0x0) {\n            pplVar36 = __ptr_01;\n          }\n          pplVar30 = __ptr_01;\n          if ((undefined8 *)(*pplVar36)[0xc] == puVar33) {\nLAB_0010625f:\n            pcVar26 = \"error: failed to merge notes\";\n            if (pplVar36[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar33,pplVar36[1],0,pplVar36[2]);\n              if (cVar10 == '\\0') {\n                uVar18 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar33,uVar18);\n                return 0;\n              }\n              pplVar36 = (long **)pplVar36[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar36 = pplVar30;\n              if ((undefined8 *)(*pplVar30)[0xc] == puVar33) goto LAB_0010625f;\n              pplVar36 = (long **)pplVar30[3];\n              pplVar30 = pplVar36;\n            } while (pplVar36 != (long **)0x0);\n            pcVar26 = \"error: failed to locate merged notes\";\n          }\n          uVar18 = dcgettext(0,pcVar26,5);\n          FUN_001126c0(0,param_7,puVar33,uVar18);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar36 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar36;\n      } while (pplVar36 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,lStack0000000000000078),\n       lVar28 = DAT_00127a30, cVar10 != '\\0')) {\n      uVar31 = (**(code **)(param_7[1] + 0x140))(unaff_R14);\n      uVar29 = (ulong)uVar31;\n      if ((char)uVar31 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar29;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar22 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar18 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar18,uVar22);\n          if (*(int *)(param_7[1] + 8) == 5) {\n            uVar18 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar18);\n            *(short *)(param_7[0x22] + 0x3a) = (short)DAT_00127930;\n            return uVar29;\n          }\n          uVar18 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar18);\n          return uVar29;\n        }\n        return uVar29;\n      }\n      uVar18 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar18);\n    }\n    else {\n      uVar18 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,lVar28);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar36[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar36), cVar10 != '\\0')) &&\n     ((pplVar36[0xc] != (long *)0x0 && (plVar6 = pplVar36[8], plVar6 != (long *)0x0)))) {\n    pplVar30 = (long **)xmalloc(0x20);\n    pplVar30[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar30);\n    }\n    else {\n      plVar15 = (long *)FUN_001163d0();\n      pplVar30[2] = plVar15;\n      if ((plVar15 == plVar6) || (cVar10 = bfd_set_section_size(pplVar36[0xc]), cVar10 != '\\0')) {\n        pplVar30[3] = (long *)__ptr_01;\n        *pplVar30 = (long *)pplVar36;\n        __ptr_01 = pplVar30;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar36);\n        free(pplVar30[1]);\n        free(pplVar30);\n      }\n    }\n  }\n  pplVar36 = (long **)pplVar36[1];\n  puVar33 = DAT_001279d0;\n  if (pplVar36 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_get_mach",
                "bfd_set_start_address",
                "FUN_001152b6",
                "bfd_set_file_flags",
                "printf",
                "bfd_get_arch"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107976",
            "calling": [
                "FUN_00114e50"
            ],
            "imported": false,
            "current_name": "FUNC_00107976"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042a0",
            "calling": [
                "FUN_00119970",
                "FUN_00104ea2",
                "FUN_001199d0",
                "FUN_00104943",
                "FUN_00119f70",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "strcat": {
            "renaming": {},
            "code": "\n\n\nchar * strcat(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcat(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047c0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00115530",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcat"
        },
        "FUN_0010b0fa": {
            "renaming": {
                "FUN_0010b0fa": "reverse_demangle_0010b0fa",
                "param_1": "source",
                "param_2": "destination",
                "param_3": "component",
                "param_4": "context",
                "param_5": "error_flag",
                "uVar1": "component_type",
                "iVar2": "comparison_result",
                "pcVar3": "result",
                "plVar4": "pointer",
                "pcVar5": "message",
                "sVar6": "length",
                "__ptr": "ptr",
                "lVar7": "value",
                "local_40": "local_buffer"
            },
            "code": "\n\n\nchar * reverse_demangle_0010b0fa(undefined8 source,undefined8 destination,uint *component,long context,\n                   undefined *error_flag)\n\n{\n  uint component_type;\n  int comparison_result;\n  char *result;\n  long *pointer;\n  char *message;\n  size_t length;\n  void *ptr;\n  long value;\n  undefined local_buffer [16];\n  \n  if (error_flag != (undefined *)0x0) {\n    *error_flag = 0;\n  }\n  while( true ) {\n    component_type = *component;\n    if (0x29 < component_type) break;\n    if (0x17 < component_type) {\n      switch(component_type) {\n      case 0x18:\n        goto switchD_0010b158_caseD_18;\n      case 0x19:\n      case 0x1a:\n      case 0x1b:\n      case 0x22:\n      case 0x23:\n        result = (char *)reverse_demangle_0010b0fa(source,destination,*(undefined8 *)(component + 4),0,0);\n        if (result != (char *)0x0) {\n          switch(*component) {\n          case 0x19:\n            goto switchD_0010b2de_caseD_19;\n          case 0x1a:\n            result = (char *)FUN_00113b4a(result);\n            return result;\n          case 0x1b:\n            result = (char *)FUN_00113b71(result);\n            return result;\n          default:\n                    \n            abort();\n          case 0x22:\n            result = (char *)FUN_00113d3a(result);\n            return result;\n          case 0x23:\n            result = (char *)FUN_00113cb9(result);\n            return result;\n          }\n        }\n        goto LAB_0010b38c;\n      case 0x27:\n        result = (char *)cplus_demangle_print(3,component,0x14,local_buffer);\n        if (result == (char *)0x0) {\n          message = \"Couldn\\'t get demangled builtin type\\n\";\n          result = (char *)0x0;\n          goto LAB_0010b3d3;\n        }\n        comparison_result = strcmp(result,\"signed char\");\n        if (comparison_result == 0) {\nLAB_0010b406:\n          message = (char *)FUN_00113dfe(1,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"bool\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00112904(6,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"char\");\n        if (comparison_result == 0) goto LAB_0010b406;\n        comparison_result = strcmp(result,\"double\");\n        if ((comparison_result == 0) || (comparison_result = strcmp(result,\"long double\"), comparison_result == 0)) {\n          message = (char *)FUN_00113df2(8);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"float\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113df2(4);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"__float128\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113df2(0x10);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned char\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(1,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"int\");\n        if (comparison_result == 0) {\nLAB_0010b504:\n          message = (char *)FUN_00113dfe(4,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned int\");\n        if (comparison_result == 0) {\nLAB_0010b528:\n          message = (char *)FUN_00113dfe(4,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"long\");\n        if (comparison_result == 0) goto LAB_0010b504;\n        comparison_result = strcmp(result,\"unsigned long\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"__int128\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(0x10,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned __int128\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(0x10,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"short\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(2,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned short\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(2,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"void\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113e17();\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"wchar_t\");\n        if (comparison_result == 0) goto LAB_0010b528;\n        comparison_result = strcmp(result,\"long long\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(8,0);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"unsigned long long\");\n        if (comparison_result == 0) {\n          message = (char *)FUN_00113dfe(8,1);\n          goto LAB_0010b6c6;\n        }\n        comparison_result = strcmp(result,\"...\");\n        if (comparison_result == 0) {\n          message = \"Unexpected demangled varargs\\n\";\n          if (error_flag == (undefined *)0x0) goto LAB_0010b6a9;\n          *error_flag = 1;\n        }\n        else {\n          message = \"Unrecognized demangled builtin type\\n\";\nLAB_0010b6a9:\n          message = (char *)dcgettext(0,message,5);\n          fprintf(_stderr,message);\n        }\n        message = (char *)0x0;\nLAB_0010b6c6:\n        free(result);\n        return message;\n      case 0x29:\n        if (*(long *)(component + 4) == 0) {\n          ptr = (void *)FUN_00113e17();\n        }\n        else {\n          ptr = (void *)reverse_demangle_0010b0fa(source,destination,*(long *)(component + 4),0,0);\n        }\n        if (ptr != (void *)0x0) {\n          value = FUN_0010b6ea(source,destination,*(undefined8 *)(component + 6),local_buffer);\n          if (value != 0) {\n            result = (char *)FUN_00113ce0(ptr,value,local_buffer[0]);\n            return result;\n          }\n          free(ptr);\n        }\n        goto LAB_0010b38c;\n      }\n      break;\n    }\n    if (component_type != 1) {\n      if (component_type == 4) {\n        result = (char *)cplus_demangle_print(3,component,0x14,local_buffer);\n        message = \"Failed to print demangled template\\n\";\n        if (result != (char *)0x0) {\n          length = strlen(result);\n          message = (char *)FUN_0010afd5(source,destination,result,length & 0xffffffff,9);\n          free(result);\n          return message;\n        }\nLAB_0010b3d3:\n        message = (char *)dcgettext(0,message,5);\n        fprintf(_stderr,message);\n        return result;\n      }\n      if (component_type == 0) {\n        if ((context == 0) || (pointer = (long *)FUN_00113b1e(context), pointer == (long *)0x0))\n        goto switchD_0010b158_caseD_18;\n        goto LAB_0010b1a5;\n      }\n      break;\n    }\n    context = reverse_demangle_0010b0fa(source,destination,*(undefined8 *)(component + 4),context,0);\n    if (context == 0) goto LAB_0010b38c;\n    component = *(uint **)(component + 6);\n    error_flag = (undefined *)0x0;\n  }\n  result = (char *)dcgettext(0,\"Unrecognized demangle component %d\\n\",5);\n  fprintf(_stderr,result,(ulong)component_type);\nLAB_0010b38c:\n  result = (char *)0x0;\nswitchD_0010b2de_caseD_19:\n  return result;\nLAB_0010b1a5:\n  if (*pointer == 0) {\nswitchD_0010b158_caseD_18:\n    result = (char *)FUN_0010afd5(source,destination,*(undefined8 *)(component + 4),component[6],0);\n    return result;\n  }\n  result = *(char **)(*pointer + 8);\n  if (result == (char *)0x0) goto LAB_0010b38c;\n  message = (char *)FUN_001129f4(result);\n  if (message != (char *)0x0) {\n    length = strlen(message);\n    if ((component[6] == (uint)length) &&\n       (comparison_result = strncmp(message,*(char **)(component + 4),(long)(int)component[6]), comparison_result == 0)) {\n      return result;\n    }\n  }\n  pointer = pointer + 1;\n  goto LAB_0010b1a5;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00113dfe",
                "FUN_00113b1e",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_001129f4",
                "FUN_0010b6ea",
                "cplus_demangle_print",
                "strlen",
                "FUN_00113df2",
                "fprintf",
                "FUN_00113b4a",
                "strncmp",
                "FUN_00112904",
                "free",
                "FUN_00113ce0",
                "strcmp",
                "FUN_00113cb9",
                "abort",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010b0fa",
            "calling": [
                "FUN_0010b0fa",
                "FUN_0010b6ea"
            ],
            "imported": false,
            "current_name": "reverse_demangle_0010b0fa"
        },
        "FUN_00104c36": {
            "renaming": {
                "FUN_00104c36": "parse_file_00104c36",
                "uVar1": "message",
                "ppbVar2": "slot",
                "pbVar3": "currentChar",
                "in_CL": "currentLineChar",
                "bVar4": "nextChar",
                "unaff_RBX": "filePtr",
                "unaff_EBP": "lineNumber",
                "pbVar5": "linePtr",
                "unaff_R13": "returnValue",
                "unaff_R14": "currentLinePtr",
                "unaff_R15": "nextLinePtr",
                "in_stack_00000008": "filename",
                "in_stack_00000010": "returnAddress"
            },
            "code": "\nvoid parseFile_00104c36(void)\n\n{\n  undefined8 message;\n  byte **slot;\n  byte *currentChar;\n  byte currentLineChar;\n  byte nextChar;\n  byte *filePtr;\n  int lineNumber;\n  byte *linePtr;\n  undefined8 returnValue;\n  byte *currentLinePtr;\n  byte *nextLinePtr;\n  undefined8 filename;\n  undefined8 *returnAddress;\n  \n  do {\n    linePtr = nextLinePtr;\n    if (currentLineChar == 9) goto LAB_00104c3f;\n    do {\n      if ((currentLineChar == 10) || (currentLineChar == 0xd)) goto LAB_00114676;\n      if (currentLineChar == 0) goto LAB_00114599;\n      currentLineChar = linePtr[1];\n      linePtr = linePtr + 1;\n    } while ((currentLineChar != 0x20) && (currentLineChar != 9));\n    if ((char)currentLineChar < '\\x0e') {\nLAB_00114676:\n      if ((-0x2402L >> (currentLineChar & 0x3f) & 1U) != 0) goto LAB_001145e6;\n    }\n    else {\nLAB_001145e6:\n      nextChar = linePtr[1];\n      if ((((((nextChar == 9) || (nextChar == 0x20)) &&\n            ((nextChar = linePtr[2], nextChar == 9 || (nextChar == 0x20)))) &&\n           ((nextChar = linePtr[3], nextChar == 9 || (nextChar == 0x20)))) &&\n          ((nextChar = linePtr[4], nextChar == 9 || (nextChar == 0x20)))) &&\n         ((nextChar = linePtr[5], nextChar == 9 || (nextChar == 0x20)))) {\n        nextChar = linePtr[6];\n        currentChar = linePtr + 6;\n        if ((nextChar == 9) || (nextChar == 0x20)) {\n          do {\n            do {\n              nextChar = currentChar[1];\n              currentChar = currentChar + 1;\n            } while (nextChar == 0x20);\n          } while (nextChar == 9);\n        }\n      }\n      if ((0xd < nextChar) || ((-0x2402L >> (nextChar & 0x3f) & 1U) != 0)) {\n        message = dcgettext(0,\"%s:%d: Ignoring rubbish found on this line\",5);\n        FUN_00119ed0(message,filename,lineNumber);\n      }\n    }\nLAB_00114599:\n    *linePtr = 0;\n    if (nextLinePtr < linePtr) {\n      slot = (byte **)htab_find_slot();\n      *slot = nextLinePtr;\n    }\n    lineNumber = lineNumber + 1;\n    linePtr = filePtr;\n    if (currentLinePtr[1] == 0) {\n      *returnAddress = returnValue;\n      return;\n    }\n    for (; nextChar = *linePtr, currentLinePtr = linePtr, nextChar != 10; linePtr = linePtr + 1) {\n      if ((char)nextChar < '\\v') {\n        if (nextChar == 0) {\n          currentChar = linePtr + 1;\n          goto LAB_00114553;\n        }\n      }\n      else {\n        if (nextChar == 0xd) {\n          *linePtr = 0;\n          currentChar = linePtr + 1;\n          if (linePtr[1] == 10) {\n            currentChar = linePtr + 2;\n            currentLinePtr = linePtr + 1;\n          }\n          goto LAB_00114553;\n        }\n        if (nextChar == 0x23) {\n          FUN_00104d1c();\n          return;\n        }\n      }\n    }\n    *linePtr = 0;\n    if (linePtr[1] == 0xd) {\n      currentLinePtr = linePtr + 1;\n      currentChar = linePtr + 2;\n    }\n    else {\n      currentChar = linePtr + 1;\n    }\nLAB_00114553:\n    currentLineChar = *filePtr;\n    nextLinePtr = filePtr;\n    while (filePtr = currentChar, currentLineChar == 0x20) {\nLAB_00104c3f:\n      linePtr = nextLinePtr + 1;\n      nextLinePtr = nextLinePtr + 1;\n      currentChar = filePtr;\n      currentLineChar = *linePtr;\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104c36",
            "calling": [
                "FUN_00104cc1"
            ],
            "imported": false,
            "current_name": "parse_file_00104c36"
        },
        "FUN_0010554f": {
            "renaming": {
                "FUN_0010554f": "FUNC_0010554f"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined4 FUNC_0010554f(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  code *pcVar3;\n  undefined8 *puVar4;\n  undefined uVar5;\n  ushort uVar6;\n  char cVar7;\n  char cVar8;\n  undefined4 uVar9;\n  int iVar10;\n  int iVar11;\n  uint uVar12;\n  uint uVar13;\n  long lVar14;\n  long *plVar15;\n  undefined8 uVar16;\n  undefined *__ptr;\n  undefined8 uVar17;\n  size_t sVar18;\n  size_t sVar19;\n  long *__dest;\n  long *plVar20;\n  void *__ptr_00;\n  void *__ptr_01;\n  ulong uVar21;\n  char *__s;\n  char *pcVar22;\n  long lVar23;\n  ulong uVar24;\n  long *plVar25;\n  undefined8 *puVar26;\n  int iVar27;\n  long *plVar28;\n  ulong uVar29;\n  ulong *puVar30;\n  char *pcVar31;\n  undefined4 *puVar32;\n  undefined *puVar33;\n  long *in_R10;\n  char **ppcVar34;\n  void *pvVar35;\n  undefined8 *unaff_R14;\n  undefined **ppuVar36;\n  long lVar37;\n  bool bVar38;\n  byte bVar39;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *__ptr_02;\n  ulong param_12;\n  char *param_13;\n  undefined *param_14;\n  uint param_15;\n  long *param_17;\n  undefined8 in_stack_00000068;\n  undefined8 param_21;\n  long param_23;\n  char *param_24;\n  long param_26;\n  long *param_30;\n  ulong param_31;\n  long param_32;\n  long in_stack_000000d8;\n  void *param_33;\n  long param_34;\n  undefined8 in_stack_000000f8;\n  byte param_36;\n  byte param_37;\n  undefined8 param_38;\n  ushort param_39;\n  long *param_40;\n  char param_41;\n  char *param_42;\n  undefined param_43;\n  short param_44;\n  \n  bVar39 = 0;\n  if ((DAT_00127998 == '\\0') && (DAT_00127989 == '\\0')) {\n    param_12 = 0;\n    param_14 = (undefined *)0x0;\n    param_17 = (long *)0x0;\n    uVar29 = param_12;\n  }\n  else {\n    lVar14 = (ulong)in_stack_00000068._4_4_ * 8;\n    param_17 = (long *)xmalloc(lVar14);\n    param_40 = param_17;\n    bfd_map_over_sections(param_7,FUN_0010870e,&stack0x00000140);\n    qsort(param_17,(ulong)in_stack_00000068._4_4_,8,FUN_0010875d);\n    param_14 = (undefined *)xmalloc(lVar14);\n    bVar38 = DAT_00127998 != '\\0';\n    puVar33 = param_14;\n    for (; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar33 = 0;\n      puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n    }\n    if (bVar38) {\n      uVar29 = 0;\n      param_12 = 0;\n      do {\n        puVar30 = (ulong *)(param_14 + uVar29 * 8);\n        plVar28 = param_17 + uVar29;\n        uVar21 = param_12;\n        do {\n          param_12 = uVar21;\n          if (in_stack_00000068._4_4_ - 1 <= (uint)uVar29) goto LAB_00107cd1;\n          uVar29 = (ulong)((uint)uVar29 + 1);\n          uVar12 = bfd_octets_per_byte(param_7,*plVar28);\n          uVar13 = bfd_octets_per_byte(param_7);\n          lVar14 = *plVar28;\n          if ((*(uint *)(lVar14 + 0x24) & 0x102) != 0x102) break;\n          uVar21 = (ulong)uVar13 * *(long *)(plVar28[1] + 0x38);\n          uVar24 = (ulong)uVar12 * *(long *)(lVar14 + 0x38) + *(long *)(lVar14 + 0x40);\n          if (uVar21 <= uVar24) break;\n          uVar21 = uVar21 - uVar24;\n          cVar7 = bfd_set_section_size();\n          if (cVar7 == '\\0') {\n            dcgettext(0,\"Can\\'t fill gap after section\",5);\n            FUN_001126c0(0,param_7,*plVar28);\n            DAT_00127a40 = 1;\n            goto LAB_00107cd1;\n          }\n          *puVar30 = uVar21;\n          plVar28 = plVar28 + 1;\n          puVar30 = puVar30 + 1;\n        } while (param_12 < uVar21);\n      } while( true );\n    }\n    param_12 = 0;\nLAB_00107cd1:\n    uVar29 = param_12;\n    if (DAT_00127989 != '\\0') {\n      uVar12 = bfd_octets_per_byte(param_7);\n      lVar14 = param_17[in_stack_00000068._4_4_ - 1];\n      uVar21 = DAT_00127990 * (ulong)uVar12;\n      uVar24 = *(long *)(lVar14 + 0x40) + (ulong)uVar12 * *(long *)(lVar14 + 0x38);\n      if (uVar24 < uVar21) {\n        cVar7 = bfd_set_section_size();\n        if (cVar7 == '\\0') {\n          dcgettext(0,\"can\\'t add padding\",5);\n          FUN_001126c0(0,param_7,param_17[in_stack_00000068._4_4_ - 1]);\n          DAT_00127a40 = 1;\n        }\n        else {\n          uVar29 = uVar21 - uVar24;\n          *(ulong *)(param_14 + (ulong)(in_stack_00000068._4_4_ - 1) * 8) = uVar29;\n          if (uVar29 <= param_12) {\n            uVar29 = param_12;\n          }\n        }\n      }\n    }\n  }\n  param_12 = uVar29;\n  plVar28 = DAT_001278d0;\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    __ptr_02 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar36 = &PTR_s__stab_00125c60;\n    __ptr_02 = (undefined4 *)xmalloc(0x60);\n    puVar32 = __ptr_02;\n    for (lVar14 = 0x18; lVar14 != 0; lVar14 = lVar14 + -1) {\n      *puVar32 = 0;\n      puVar32 = puVar32 + (ulong)bVar39 * -2 + 1;\n    }\n    param_13 = (char *)0x0;\n    do {\n      puVar33 = *ppuVar36;\n      lVar14 = bfd_get_section_by_name(unaff_R14,puVar33);\n      lVar37 = bfd_get_section_by_name();\n      if ((lVar14 != 0) && (lVar37 != 0)) {\n        lVar23 = *(long *)(lVar14 + 0x40);\n        __ptr_00 = (void *)xmalloc(lVar23);\n        cVar7 = bfd_get_section_contents(unaff_R14,lVar14,__ptr_00,0,lVar23);\n        if (cVar7 == '\\0') {\n          uVar9 = bfd_get_error();\n          bfd_errmsg(uVar9);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(param_13);\n          free(__ptr_00);\n        }\n        else {\n          uVar29 = *(ulong *)(lVar37 + 0x40);\n          __ptr_01 = (void *)xmalloc(uVar29 + 1);\n          param_9 = bfd_get_section_contents(unaff_R14,lVar37,__ptr_01,0);\n          if (param_9 == '\\0') {\n            uVar9 = bfd_get_error();\n            bfd_errmsg(uVar9);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(param_13);\n          }\n          else {\n            *(undefined *)((long)__ptr_01 + uVar29) = 0;\n            if ((param_13 != (char *)0x0) ||\n               (param_13 = (char *)FUN_00112894(unaff_R14,1,plVar28), param_13 != (char *)0x0)) {\n              param_26 = 0;\n              param_23 = 0;\n              for (pvVar35 = __ptr_00; pvVar35 <= (void *)((long)__ptr_00 + lVar23 + -0xc);\n                  pvVar35 = (void *)((long)pvVar35 + 0xc)) {\n                uVar21 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                bVar2 = *(byte *)((long)pvVar35 + 4);\n                uVar9 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar35 + 6);\n                lVar14 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar35 + 8);\n                if (bVar2 == 0) {\n                  param_23 = param_26;\n                  param_26 = param_26 + lVar14;\n                }\n                else {\n                  uVar24 = (uVar21 & 0xffffffff) + param_23;\n                  if (uVar24 < uVar29) {\n                    pcVar31 = (char *)((long)__ptr_01 + uVar24);\n                    param_24 = (char *)0x0;\n                    while( true ) {\n                      sVar18 = strlen(pcVar31);\n                      if (((sVar18 == 0) || (pcVar22 = pcVar31 + (sVar18 - 1), *pcVar22 != '\\\\')) ||\n                         ((ulong)((long)__ptr_00 + lVar23) < (long)pvVar35 + 0x10U))\n                      goto LAB_001077fb;\n                      *pcVar22 = '\\0';\n                      pvVar35 = (void *)((long)pvVar35 + 0xc);\n                      iVar10 = (**(code **)(unaff_R14[1] + 0x40))(pvVar35);\n                      uVar21 = (ulong)(uint)(iVar10 + (int)param_23);\n                      if (uVar29 <= uVar21) break;\n                      pcVar31 = (char *)concat(pcVar31,(long)__ptr_01 + uVar21,0);\n                      *pcVar22 = '\\\\';\n                      free(param_24);\n                      param_24 = pcVar31;\n                    }\n                    uVar17 = *unaff_R14;\n                    pcVar22 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar22,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar9,lVar14,pcVar31);\n                    cVar7 = FUNC_0011173a(__ptr_02,param_13,bVar2);\n                    if (cVar7 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(param_24);\n                      free(param_13);\n                      free(__ptr_00);\n                      free(__ptr_01);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar17 = *unaff_R14;\n                    pcVar31 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar31,uVar17,puVar33,((long)pvVar35 - (long)__ptr_00) / 0xc,\n                            uVar21 & 0xffffffff,(ulong)bVar2,((long)pvVar35 - (long)__ptr_00) % 0xc)\n                    ;\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr_00);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_01);\n          free(__ptr_00);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar36 = ppuVar36 + 2;\n    } while (ppuVar36 != (undefined **)&DAT_00125c90);\n    if ((param_13 != (char *)0x0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) {\nLAB_00105981:\n      free(__ptr_02);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar14 = 0;\n      for (plVar15 = plVar28; plVar15 < plVar28 + param_8; plVar15 = plVar15 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))(unaff_R14,*plVar15,&stack0x00000140);\n        if (param_41 == '-') {\n          if (((lVar14 == 0) && (lVar14 = FUN_00112894(unaff_R14,0,plVar28), lVar14 == 0)) ||\n             ((param_42 == (char *)0x0 || (*param_42 == '\\0')))) goto LAB_00105981;\n          pcVar31 = (char *)0x0;\n          pcVar22 = param_42;\n          while (((*pcVar22 != '\\0' && (sVar18 = strlen(pcVar22), pcVar22[sVar18 - 1] == '\\\\')) &&\n                 (plVar15 + 1 < plVar28 + param_8))) {\n            __s = (char *)xstrdup(pcVar22);\n            sVar18 = strlen(__s);\n            __s[sVar18 - 1] = '\\0';\n            pcVar22 = (char *)concat(__s,*(undefined8 *)(plVar15[1] + 8),0);\n            free(__s);\n            free(pcVar31);\n            plVar15 = plVar15 + 1;\n            pcVar31 = pcVar22;\n          }\n          FUN_001088ae(param_43,(int)param_44,param_40,pcVar22);\n          param_9 = FUNC_0011173a(__ptr_02,lVar14,param_43);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar14 != 0) && (cVar7 = FUN_0010c892(), cVar7 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_40 = (long *)0x0;\n        param_30 = plVar28;\n        param_32 = 0;\n        param_31 = param_8;\n        in_stack_000000d8 = 0;\n        puVar26 = (undefined8 *)&stack0x00000148;\n        for (lVar14 = 0x22; lVar14 != 0; lVar14 = lVar14 + -1) {\n          *(undefined4 *)puVar26 = 0;\n          puVar26 = (undefined8 *)((long)puVar26 + (ulong)bVar39 * -8 + 4);\n        }\n        cVar7 = '\\0';\n        _param_15 = (int *)0x0;\n        uVar12 = 0;\n        param_13 = (char *)0x0;\n        param_24 = (char *)0xffffffffffffffff;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= param_32) goto LAB_00105590;\n            lVar14 = plVar28[param_32];\n            cVar8 = bfd_coff_get_syment(unaff_R14,lVar14,&stack0x000000e0);\n            lVar37 = in_stack_000000d8;\n            if (cVar8 == '\\0') {\n              uVar9 = bfd_get_error();\n              bfd_errmsg(uVar9);\n              pcVar31 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar31 = *(char **)(lVar14 + 8);\n            puVar26 = (undefined8 *)0x0;\n            param_32 = param_32 + 1;\n            in_stack_000000d8 = (ulong)param_37 + 1 + in_stack_000000d8;\n            if (param_37 != 0) {\n              puVar26 = &stack0x00000110;\n              cVar8 = bfd_coff_get_auxent(unaff_R14,lVar14,0);\n              if (cVar8 == '\\0') {\n                uVar9 = bfd_get_error();\n                bfd_errmsg(uVar9);\n                pcVar31 = \"bfd_coff_get_auxent failed: %s\";\n                goto LAB_00105968;\n              }\n            }\n            if (param_24 != (char *)lVar37) break;\n            if (param_36 != 0x67) {\n              cVar8 = FUN_0010bbd3(__ptr_02);\n              if (cVar8 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            param_24 = (char *)param_34;\n            cVar8 = FUN_0010bbd3(__ptr_02);\n            if (cVar8 == '\\0') goto LAB_00105981;\n          }\n          uVar6 = in_stack_000000f8._6_2_;\n          if ((char)param_36 < '\\0') {\n            if (param_36 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar23 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140);\n            if (lVar23 == 0) break;\n            cVar8 = FUN_00112a33(&stack0x00000140,lVar14,lVar37);\n          }\n          else {\n            if (param_36 < 100) {\n              switch(param_36) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _param_15 = (int *)(**(code **)(unaff_R14[1] + 0x238))(unaff_R14);\n                uVar12 = (uint)uVar6;\n                param_13 = pcVar31;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(param_36) {\n            case 100:\n              iVar10 = strcmp(pcVar31,\".bb\");\n              if (iVar10 == 0) {\n                cVar8 = FUN_0010be88(__ptr_02);\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".eb\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                cVar8 = FUN_0010bf20(__ptr_02);\n              }\n              break;\n            case 0x65:\n              iVar10 = strcmp(pcVar31,\".bf\");\n              if (iVar10 == 0) {\n                if (param_13 != (char *)0x0) {\n                  uVar13 = (int)uVar12 >> ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x44) & 0x1f);\n                  lVar37 = FUN_0010dac0(unaff_R14,&stack0x000000c0,&stack0x00000140,lVar37,\n                                        uVar13 ^ (uVar12 ^ uVar13) &\n                                                 *(uint *)(unaff_R14[0x22] + 0x38),puVar26,0,\n                                        __ptr_02);\n                  if ((lVar37 == 0) || (cVar7 = FUN_0010bc80(__ptr_02), cVar7 == '\\0'))\n                  goto LAB_00105981;\n                  if (_param_15 != (int *)0x0) {\n                    iVar10 = 0;\n                    if (param_37 != 0) {\n                      iVar10 = param_39 - 1;\n                    }\n                    lVar14 = *(long *)(*(long *)(lVar14 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar27 = _param_15[4];\n                      if (iVar27 == 0) break;\n                      cVar8 = FUN_0010bf86(__ptr_02,iVar10 + iVar27,\n                                           *(long *)(_param_15 + 6) + lVar14);\n                      _param_15 = _param_15 + 4;\n                      if (cVar8 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  uVar12 = 0;\n                  _param_15 = (int *)0x0;\n                  param_13 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar10 = strcmp(pcVar31,\".ef\");\n                if (iVar10 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar7 != '\\0') {\n                  cVar7 = FUN_0010be1a(__ptr_02);\n                  if (cVar7 == '\\0') goto LAB_00105981;\n                  cVar7 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar31 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar17 = dcgettext(0,pcVar31,5);\n              FUN_00119ed0(uVar17);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar8 != '\\0');\n      }\n      else {\n        pcVar31 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar17 = dcgettext(0,pcVar31,5);\n        FUN_00119ed0(uVar17);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar28 = DAT_001278d0 + param_8;\n        plVar15 = DAT_001278d0;\n        do {\n          uVar12 = *(uint *)(*plVar15 + 0x18);\n          if ((uVar12 & 0x1000000) != 0) {\n            *(uint *)(*plVar15 + 0x18) = uVar12 & 0xfeffffff;\n          }\n          plVar15 = plVar15 + 1;\n        } while (plVar28 != plVar15);\n      }\n    }\n    else {\n      for (lVar14 = *(long *)(param_7 + 0x90); lVar14 != 0; lVar14 = *(long *)(lVar14 + 8)) {\n        if (*(long *)(lVar14 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar14 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      lVar14 = xmalloc();\n      plVar28 = DAT_001278d0;\n      param_15 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = lVar14;\n      if (param_8 == 0) {\n        uVar29 = 0;\n      }\n      else {\n        uVar29 = 0;\n        _param_9 = 0;\n        do {\n          iVar10 = DAT_001279c0;\n          plVar15 = (long *)plVar28[_param_9];\n          pcVar3 = (code *)plVar15[4];\n          uVar12 = *(uint *)(plVar15 + 3);\n          plVar20 = (long *)plVar15[1];\n          plVar25 = plVar20;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar27 = 0;\n            puVar26 = DAT_001279c8;\n            while ((iVar27 < iVar10 && (pcVar31 = (char *)puVar26[5], pcVar31 != (char *)0x0))) {\n              if (pcVar31 != \"\") {\n                iVar11 = strcmp(pcVar31,(char *)plVar20);\n                if (iVar11 == 0) {\n                  free(pcVar31);\n                  uVar21 = uVar29 + 1;\n                  puVar26[5] = \"\";\n                  uVar16 = FUN_0011a2e0(puVar26);\n                  uVar17 = DAT_001278f0;\n                  *(undefined8 *)(lVar14 + uVar29 * 8) = uVar16;\n                  lVar37 = htab_elements(uVar17);\n                  if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar26 = (undefined8 *)*puVar26;\n              }\n              iVar27 = iVar27 + 1;\n            }\n          }\n          lVar37 = htab_elements(DAT_001278f0);\n          uVar21 = uVar29;\n          if ((lVar37 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (plVar20 != (long *)0x0) {\nLAB_001064eb:\n              if (((*(char *)plVar20 == '_') && (*(char *)((long)plVar20 + 1) == '_')) &&\n                 (iVar10 = strcmp((char *)((ulong)(*(char *)((long)plVar20 + 2) == '_') +\n                                          (long)plVar20),\"__gnu_lto_slim\"), iVar10 == 0)) {\n                uVar17 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar17);\n              }\n            }\n            _param_41 = 0;\n            param_40 = plVar20;\n            lVar37 = htab_find(DAT_001278f0);\n            if (((lVar37 == 0) || (plVar25 = *(long **)(lVar37 + 8), plVar20 == plVar25)) &&\n               (plVar25 = plVar20, ppcVar34 = DAT_001278f8, (uVar12 & 0x100) != 0)) {\n              for (; ppcVar34 != (char **)0x0; ppcVar34 = (char **)ppcVar34[3]) {\n                iVar10 = strcmp(*ppcVar34,(char *)plVar20);\n                if (iVar10 == 0) {\n                  plVar25 = (long *)ppcVar34[1];\n                  break;\n                }\n              }\n            }\n            plVar15[1] = (long)plVar25;\n            cVar7 = *(char *)plVar25;\n            if (cVar7 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar31 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar37 = unaff_R14[1];\n              cVar7 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar7 = *(char *)plVar20;\n          if (cVar7 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar31 = DAT_00127928;\n          lVar37 = unaff_R14[1];\n          if (*(char *)(lVar37 + 0x1c) == cVar7) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar12 & 0x82) == 0 && (pcVar3 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              goto joined_r0x00106565;\n            }\n            cVar7 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar7 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              plVar25 = (long *)((long)plVar25 + 1);\n              plVar15[1] = (long)plVar25;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\nLAB_001066bc:\n              sVar18 = strlen(pcVar31);\n              plVar20 = (long *)xmalloc(sVar18 + lVar37);\n              goto LAB_001066d0;\n            }\n            *(char *)plVar25 = cVar7;\n            plVar15[1] = (long)plVar25;\n            uVar29 = uVar21;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar29 = uVar21;\n              if (pcVar31 == (char *)0x0) goto LAB_00105b32;\n              sVar18 = strlen((char *)plVar25);\n              sVar19 = strlen(pcVar31);\n              __dest = (long *)xmalloc(sVar19 + sVar18 + 1);\n              plVar20 = __dest;\n            }\n            else {\nLAB_0010668d:\n              pcVar31 = DAT_00127928;\n              if ((*(char *)(lVar37 + 0x1c) != '\\0') && (cVar7 != *(char *)(lVar37 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar18 = strlen((char *)plVar25);\n              lVar37 = sVar18 + 2;\n              if (pcVar31 != (char *)0x0) goto LAB_001066bc;\n              plVar20 = (long *)xmalloc(lVar37);\nLAB_001066d0:\n              __dest = (long *)((long)plVar20 + 1);\n              *(char *)plVar20 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            pcVar31 = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy((char *)__dest,DAT_00127928);\n              sVar18 = strlen(pcVar31);\n              __dest = (long *)((long)__dest + sVar18);\n            }\n            strcpy((char *)__dest,(char *)plVar25);\n            plVar15[1] = (long)plVar20;\n            plVar25 = plVar20;\n            uVar29 = uVar21;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar12 & 0x20) == 0) &&\n             (((uVar12 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar15[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((param_15 == 0) &&\n                (((uVar12 & 0x82) != 0 || ((*(byte *)(plVar15[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar10 = bfd_decode_symclass(plVar15), iVar10 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar37 = htab_find();\n                if (lVar37 == 0) goto LAB_00105c07;\n              }\n              else {\n                _param_41 = _param_41 & 0xffffffffffffff00;\n                param_40 = plVar25;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (param_41 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar12 & 0x82) == 0) && (pcVar3 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar15[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar12 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar37 = *(long *)(plVar15[4] + 0xd0), lVar37 == 0)) ||\n                   (*(long *)(lVar37 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar7 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar7 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar7 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar37 = htab_find();\n            if (lVar37 != 0) {\nLAB_0010687f:\n              uVar17 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar17);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _param_41 = _param_41 & 0xffffffffffffff00;\n            param_40 = plVar25;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (param_41 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar12 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar37 = htab_find();\n            if (lVar37 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar12 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar37 = htab_find();\n              if (lVar37 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _param_41 = _param_41 & 0xffffffffffffff00;\n              param_40 = plVar25;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (param_41 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar7 = FUN_001159d0(plVar15[4]);\n            if (cVar7 == '\\0') {\n              if (((uVar12 & 0x800002) == 0) && (pcVar3 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar12 & 0x82) != 0) {\n                  cVar7 = FUN_00115d70(plVar25);\n                  if ((cVar7 == '\\0') &&\n                     ((lVar37 = htab_elements(DAT_001279f8), lVar37 == 0 ||\n                      (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar15 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar37 = *plVar15, lVar37 == 0)) ||\n                        ((*(int *)(*(long *)(lVar37 + 8) + 8) != 5 ||\n                         (*(long *)(lVar37 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar15 + 0x49) & 3) - 1)) goto joined_r0x00106920;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar15 + 3);\n                  }\n                  *(uint *)(plVar15 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00106920:\n                if (((uVar12 & 1) != 0) && (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar7 = FUN_00115d70(plVar25), cVar7 != '\\0')) {\n                  *(uint *)(plVar15 + 3) = *(uint *)(plVar15 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar3 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              *(long **)(lVar14 + uVar29 * 8) = plVar15;\n              uVar29 = uVar29 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar26 = DAT_001279c8;\n        iVar10 = DAT_001279c0;\n        for (lVar37 = 0; lVar37 < iVar10; lVar37 = lVar37 + 1) {\n          pcVar31 = (char *)puVar26[5];\n          if (pcVar31 == (char *)0x0) {\n            lVar23 = uVar29 * 8;\n            uVar29 = uVar29 + 1;\n            uVar17 = FUN_0011a2e0(puVar26,param_7);\n            *(undefined8 *)(lVar14 + lVar23) = uVar17;\n            iVar10 = DAT_001279c0;\n          }\n          else if (pcVar31 != \"\") {\n            uVar17 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar17,pcVar31);\n          }\n          puVar26 = (undefined8 *)*puVar26;\n        }\n      }\n      bVar38 = DAT_001279a0 == '\\0';\n      *(undefined8 *)(lVar14 + uVar29 * 8) = 0;\n      if ((bVar38) || (__ptr_02 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar29 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar10 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar10 == 5) || (iVar10 == 2)) {\n        param_33 = (void *)0x0;\n        cVar7 = FUN_0011378f(param_7,__ptr_02,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                             &stack0x00000140);\n        if (cVar7 != '\\0') {\n          lVar14 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar37 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar14 == 0) || (lVar37 == 0)) ||\n              (cVar7 = bfd_set_section_size(lVar14,param_38), cVar7 == '\\0')) ||\n             (cVar7 = bfd_set_section_size(lVar37,param_40), cVar7 == '\\0')) {\n            pcVar31 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar14 + 0x7c) = 2;\n            *(undefined4 *)(lVar37 + 0x7c) = 0;\n            cVar7 = bfd_set_section_contents(param_7,lVar14,param_30,0,param_38);\n            if ((cVar7 != '\\0') &&\n               (cVar7 = bfd_set_section_contents(param_7,lVar37,param_33,0,param_40), cVar7 != '\\0')\n               ) {\n              free(__ptr_02);\n              goto LAB_00105cfa;\n            }\n            pcVar31 = \"can\\'t set debugging section contents\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,0,uVar17);\n          free(param_33);\n          free(__ptr_02);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar17 = **(undefined8 **)(param_7 + 8);\n        uVar16 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar16,uVar17);\n      }\n      free(__ptr_02);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections(unaff_R14,FUN_00116030,DAT_001278d0);\n      iVar10 = bfd_get_error();\n      if (iVar10 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar14 = htab_elements(DAT_00127a18);\n    if (((lVar14 != 0) ||\n        ((((lVar14 = htab_elements(DAT_00127a28), lVar14 != 0 ||\n           (lVar14 = htab_elements(DAT_00127a08), lVar14 != 0)) ||\n          (lVar14 = htab_elements(DAT_00127a00), lVar14 != 0)) ||\n         ((lVar14 = htab_elements(DAT_001279f8), lVar14 != 0 ||\n          (lVar14 = htab_elements(DAT_001279f0), lVar14 != 0)))))) ||\n       ((((lVar14 = htab_elements(DAT_001278f0), lVar14 != 0 ||\n          ((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')))) || (DAT_00127a39 != '\\0')) ||\n        ((((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')) ||\n         (((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')) || (DAT_001279c0 != 0))))))))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar26 = DAT_001279e0; puVar4 = DAT_001279d8, puVar26 != (undefined8 *)0x0;\n        puVar26 = (undefined8 *)*puVar26) {\n      cVar7 = bfd_set_section_contents(param_7,puVar26[5],puVar26[4],0,puVar26[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,puVar26[5],0);\n        return 0;\n      }\n    }\n    for (; puVar4 != (undefined8 *)0x0; puVar4 = (undefined8 *)*puVar4) {\n      uVar17 = *(undefined8 *)(puVar4[5] + 0x60);\n      cVar7 = bfd_set_section_contents(param_7,uVar17,puVar4[4],0,puVar4[3]);\n      if (cVar7 == '\\0') {\n        FUN_001126c0(0,param_7,uVar17,0);\n        return 0;\n      }\n    }\n    if (in_R10 == (long *)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar17 = *unaff_R14;\n        uVar16 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar16,uVar17);\n      }\n    }\n    else {\n      plVar28 = (long *)0x0;\n      for (puVar26 = *(undefined8 **)(param_7 + 0x90); puVar26 != (undefined8 *)0x0;\n          puVar26 = (undefined8 *)puVar26[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar26[0x1a] + 4) == 7 &&\n            (cVar7 = FUN_00113fb0(*puVar26,\".gnu.build.attributes\"), cVar7 != '\\0')))) {\n          if (plVar28 == (long *)0x0) {\n            plVar28 = in_R10;\n          }\n          plVar15 = in_R10;\n          if (*(undefined8 **)(*plVar28 + 0x60) == puVar26) {\nLAB_0010625f:\n            pcVar31 = \"error: failed to merge notes\";\n            if (plVar28[1] != 0) {\n              cVar7 = bfd_set_section_contents(param_7,puVar26,plVar28[1],0,plVar28[2]);\n              if (cVar7 == '\\0') {\n                uVar17 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar26,uVar17);\n                return 0;\n              }\n              plVar28 = (long *)plVar28[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              plVar28 = plVar15;\n              if (*(undefined8 **)(*plVar15 + 0x60) == puVar26) goto LAB_0010625f;\n              plVar28 = (long *)plVar15[3];\n              plVar15 = plVar28;\n            } while (plVar28 != (long *)0x0);\n            pcVar31 = \"error: failed to locate merged notes\";\n          }\n          uVar17 = dcgettext(0,pcVar31,5);\n          FUN_001126c0(0,param_7,puVar26,uVar17);\n        }\nLAB_001061be:\n      }\n      do {\n        plVar28 = (long *)in_R10[3];\n        free((void *)in_R10[1]);\n        free(in_R10);\n        in_R10 = plVar28;\n      } while (plVar28 != (long *)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar7 = bfd_fill_in_gnu_debuglink_section(param_7,param_21), lVar14 = DAT_00127a30,\n       cVar7 != '\\0')) {\n      if (param_14 != (undefined *)0x0) {\n        if (0x2000 < param_12) {\n          param_12 = 0x2000;\n        }\n        lVar14 = 0;\n        __ptr = (undefined *)xmalloc(param_12);\n        uVar5 = DAT_00127999;\n        puVar33 = __ptr;\n        for (param_12 = param_12 & 0xffffffff; param_12 != 0; param_12 = param_12 - 1) {\n          *puVar33 = uVar5;\n          puVar33 = puVar33 + (ulong)bVar39 * -2 + 1;\n        }\n        for (; (uint)lVar14 < in_stack_00000068._4_4_; lVar14 = lVar14 + 1) {\n          uVar29 = *(ulong *)(param_14 + lVar14 * 8);\n          if (uVar29 != 0) {\n            lVar37 = *(long *)(*param_17 + 0x40) - uVar29;\n            do {\n              uVar21 = 0x2000;\n              if (uVar29 < 0x2001) {\n                uVar21 = uVar29;\n              }\n              cVar7 = bfd_set_section_contents(param_7,*param_17,__ptr,lVar37,uVar21);\n              if (cVar7 == '\\0') {\n                FUN_001126c0(0,param_7,*param_17,0);\n                free(__ptr);\n                return 0;\n              }\n              lVar37 = lVar37 + uVar21;\n              uVar29 = uVar29 - uVar21;\n            } while (uVar29 != 0);\n          }\n          param_17 = param_17 + 1;\n        }\n        free(__ptr);\n        free(param_14);\n      }\n      uVar9 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      if ((char)uVar9 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar9;\n        }\n        cVar7 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar29 = DAT_00127930;\n        if (cVar7 == '\\0') {\n          uVar17 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar17,uVar29);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar17 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar17);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar9;\n          }\n          uVar17 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar17);\n          return uVar9;\n        }\n        return uVar9;\n      }\n      uVar17 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar17);\n    }\n    else {\n      uVar17 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar17,lVar14);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_alt_mach_code",
                "bfd_set_section_size",
                "FUN_0010870e",
                "FUN_0010bf20",
                "FUN_00108863",
                "bfd_set_section_contents",
                "bfd_map_over_sections",
                "strcmp",
                "FUN_00119dd0",
                "FUN_0010dac0",
                "FUN_001088ae",
                "bfd_coff_get_syment",
                "bfd_coff_get_auxent",
                "xmalloc",
                "htab_traverse",
                "bfd_set_error",
                "FUN_00116110",
                "FUN_0010bbd3",
                "bfd_decode_symclass",
                "bfd_get_section_by_name",
                "bfd_errmsg",
                "bfd_make_section_with_flags",
                "strlen",
                "FUN_0010c892",
                "strcpy",
                "bfd_is_local_label",
                "bfd_get_section_contents",
                "FUN_00115dc0",
                "FUN_0010be1a",
                "htab_find",
                "FUN_001159d0",
                "concat",
                "dcgettext",
                "FUN_00113fb0",
                "xstrdup",
                "qsort",
                "FUN_001126c0",
                "FUN_0011173a",
                "FUN_00112894",
                "FUN_00112a33",
                "FUN_0011a170",
                "fprintf",
                "bfd_get_error",
                "htab_elements",
                "FUN_0010875d",
                "FUN_0011378f",
                "bfd_octets_per_byte",
                "bfd_set_symtab",
                "FUN_00116030",
                "FUN_00119ed0",
                "FUN_00115d70",
                "bfd_map_over_sections",
                "bfd_fill_in_gnu_debuglink_section",
                "FUN_0010bf86",
                "FUN_00108b3e",
                "free",
                "FUN_0010bc80",
                "FUN_0011a2e0",
                "FUN_0010be88"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x0010554f",
            "calling": [
                "FUN_00107880"
            ],
            "imported": false,
            "current_name": "FUNC_0010554f"
        },
        "FUN_00109cf4": {
            "renaming": {
                "FUN_00109cf4": "convert_to_formatted_string_00109cf4",
                "param_1": "outputBuffer",
                "param_2": "inputNumber",
                "param_3": "formatOptions",
                "local_3c": "formattedString"
            },
            "code": "\nvoid convertToFormattedString_00109cf4(undefined8 outputBuffer,undefined8 inputNumber,undefined4 formatOptions)\n\n{\n  char formattedString [28];\n  \n  sprintf(formattedString,\"%ld\",inputNumber);\n  FUN_00109b52(outputBuffer,formattedString,inputNumber,0,formatOptions);\n  return;\n}\n\n",
            "called": [
                "FUN_00109b52",
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109cf4",
            "calling": [
                "FUN_0010e453",
                "FUN_00109d97",
                "FUN_0010b800",
                "FUN_00109ed3",
                "FUN_00109d3e",
                "FUN_00109d5c",
                "FUN_0010bba1",
                "FUN_0010b948",
                "FUN_00109dfe"
            ],
            "imported": false,
            "current_name": "convert_to_formatted_string_00109cf4"
        },
        "FUN_00109ab1": {
            "renaming": {
                "FUN_00109ab1": "extract_function_arguments_00109ab1",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "param_5": "arg5",
                "uVar1": "result1",
                "pcVar2": "ptr1",
                "uVar3": "result2",
                "auVar4": "returnValue"
            },
            "code": "\nundefined  [16]\nextractFunctionArguments_00109ab1(char **arg1,undefined4 *arg2,undefined8 arg3,undefined8 arg4,\n            undefined8 arg5)\n\n{\n  undefined4 result1;\n  char *ptr1;\n  undefined8 result2;\n  undefined returnValue [16];\n  \n  ptr1 = *arg1;\n  if (*ptr1 == '(') {\n    *arg1 = ptr1 + 1;\n    result1 = FUN_00109a32(arg1,0);\n    *arg2 = result1;\n    if (**arg1 == ',') {\n      *arg1 = *arg1 + 1;\n      result1 = FUN_00109a32(arg1,0,arg3);\n      arg2[1] = result1;\n      if (**arg1 == ')') {\n        ptr1 = *arg1 + 1;\n        *arg1 = ptr1;\n        goto LAB_00109b25;\n      }\n    }\n    FUN_00108fb9(ptr1);\n    result2 = 0;\n  }\n  else {\n    *arg2 = 0;\n    ptr1 = (char *)FUN_00109a32(arg1,0);\n    arg2[1] = (int)ptr1;\nLAB_00109b25:\n    result2 = CONCAT71((int7)((ulong)ptr1 >> 8),1);\n  }\n  returnValue._8_8_ = arg5;\n  returnValue._0_8_ = result2;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00108fb9",
                "FUN_00109a32"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109ab1",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "extract_function_arguments_00109ab1"
        },
        "FUN_001159d0": {
            "renaming": {
                "FUN_001159d0": "check_if_valid_001159d0",
                "param_1": "input",
                "uVar1": "returnValue",
                "cVar2": "flag",
                "uVar3": "result",
                "lVar4": "var1",
                "lVar5": "var2"
            },
            "code": "\nundefined4 checkIfValid_001159d0(long input)\n\n{\n  undefined8 returnValue;\n  char flag;\n  undefined4 result;\n  long var1;\n  long var2;\n  \n  result = FUN_00115b70();\n  if ((char)result == '\\0') {\n    if ((*(byte *)(input + 0x27) & 2) == 0) {\n      return result;\n    }\n    var1 = FUN_00115d00(*(undefined8 *)(input + 0xd0),*(undefined8 *)(input + 0xe0));\n    if ((var1 != 0) &&\n       (((returnValue = *(undefined8 *)(var1 + 8), DAT_00127a48 != 7 ||\n         (flag = FUN_00115d70(returnValue,DAT_00127a28), flag != '\\0')) &&\n        (flag = FUN_00115d70(returnValue,DAT_00127a18), flag == '\\0')))) {\n      var1 = *(long *)(*(long *)(input + 0xd0) + 0xc0);\n      var2 = var1;\n      do {\n        if (var2 == 0) {\n          return 1;\n        }\n        flag = FUN_00115b70(var2);\n        if (flag == '\\0') {\n          return result;\n        }\n        var2 = *(long *)(*(long *)(var2 + 0xd0) + 0xc0);\n      } while (var1 != var2);\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "FUN_00115b70",
                "FUN_00115d00",
                "FUN_00115d70"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001159d0",
            "calling": [
                "FUN_00115f50",
                "FUN_00115530",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "check_if_valid_001159d0"
        },
        "FUN_0010a77a": {
            "renaming": {
                "FUN_0010a77a": "process_data_0010a77a",
                "param_1": "input",
                "uVar1": "charFlag",
                "lVar2": "dataStruct",
                "__s": "string1",
                "uVar3": "value",
                "uVar4": "result",
                "__s_00": "string2",
                "sVar5": "length1",
                "sVar6": "length2",
                "__s_01": "concatenatedString"
            },
            "code": "\nundefined4 processData_0010a77a(long input)\n\n{\n  undefined charFlag;\n  long dataStruct;\n  char *string1;\n  undefined8 value;\n  undefined4 result;\n  char *string2;\n  size_t length1;\n  size_t length2;\n  char *concatenatedString;\n  \n  dataStruct = *(long *)(input + 0x60);\n  if ((dataStruct != 0) && (string1 = *(char **)(dataStruct + 0x20), string1 != (char *)0x0)) {\n    result = *(undefined4 *)(dataStruct + 0x18);\n    charFlag = *(undefined *)(dataStruct + 0x1c);\n    value = *(undefined8 *)(dataStruct + 0x10);\n    string2 = (char *)FUN_00109b2f();\n    length1 = strlen(string2);\n    length2 = strlen(string1);\n    concatenatedString = (char *)xmalloc(length1 + 2 + length2);\n    sprintf(concatenatedString,\"%s%s;\",string2,string1);\n    free(string2);\n    free(string1);\n    result = FUN_00109b52(input,concatenatedString,value,charFlag,result);\n    if ((char)result != '\\0') {\n      free(concatenatedString);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a77a",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "process_data_0010a77a"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104210",
            "calling": [
                "FUN_00116b90",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "FUN_0010543c": {
            "renaming": {
                "FUN_0010543c": "open_file_with_error_handling_0010543c",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMessage",
                "uVar1": "fileHandle",
                "uVar4": "errorCode",
                "unaff_RBP": "stackPointer"
            },
            "code": "\nvoid openFileWithErrorHandling_0010543c(void)\n\n{\n  undefined8 fileHandle;\n  int *errnoPtr;\n  char *errorMessage;\n  undefined8 errorCode;\n  long stackPointer;\n  \n  errnoPtr = __errno_location();\n  errorMessage = strerror(*errnoPtr);\n  fileHandle = *(undefined8 *)(stackPointer + 0x10);\n  errorCode = dcgettext(0,\"cannot open: %s: %s\",5);\n                    \n  FUN_00119dd0(errorCode,fileHandle,errorMessage);\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119dd0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010543c",
            "calling": [
                "FUN_00114d60"
            ],
            "imported": false,
            "current_name": "open_file_with_error_handling_0010543c"
        },
        "bfd_coff_get_auxent": {
            "renaming": {},
            "code": "\nvoid bfd_coff_get_auxent(void)\n\n{\n  bfd_coff_get_auxent();\n  return;\n}\n\n",
            "called": [
                "bfd_coff_get_auxent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045b0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_coff_get_auxent"
        },
        "FUN_0010a424": {
            "renaming": {
                "FUN_0010a424": "construct_message_0010a424",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "cVar1": "result",
                "bVar2": "flag",
                "iVar3": "length",
                "uVar4": "returnValue",
                "pcVar5": "str1",
                "__ptr": "ptrArray",
                "uVar6": "value",
                "__s": "str2",
                "sVar7": "str1Length",
                "sVar8": "str2Length",
                "__s_00": "newStr",
                "lVar9": "index",
                "bVar10": "tempFlag",
                "lVar11": "loopIndex",
                "uVar12": "newValue"
            },
            "code": "\nundefined4 constructMessage_0010a424(long param1,char param2,int param3,char param4)\n\n{\n  char result;\n  byte flag;\n  int length;\n  undefined4 returnValue;\n  char *str1;\n  undefined8 *ptrArray;\n  undefined8 value;\n  char *str2;\n  size_t str1Length;\n  size_t str2Length;\n  char *newStr;\n  long index;\n  byte tempFlag;\n  long loopIndex;\n  undefined newValue;\n  \n  if ((param2 == '\\0') && (result = FUN_00109d97(), result == '\\0')) {\n    return 0;\n  }\n  tempFlag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n  str1 = (char *)FUN_00109b2f(param1);\n  if (param3 < 0) {\n    ptrArray = (undefined8 *)0x0;\n    param3 = 0;\nLAB_0010a582:\n    newValue = 1;\n    if (tempFlag != 0) goto LAB_0010a596;\n  }\n  else {\n    if (param3 != 0) {\n      length = param3 + 1;\n      ptrArray = (undefined8 *)xmalloc((long)length * 8);\n      index = (long)(param3 + -1);\n      do {\n        flag = 1;\n        if (tempFlag == 0) {\n          flag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n        }\n        value = FUN_00109b2f(param1);\n        tempFlag = flag & 1;\n        ptrArray[index] = value;\n        index = index + -1;\n      } while ((int)index != -1);\n      if (param4 == '\\0') {\n        result = FUN_00109d97(param1);\n        if (result == '\\0') {\n          return 0;\n        }\n        flag = 1;\n        if (tempFlag == 0) {\n          flag = *(byte *)(*(long *)(param1 + 0x60) + 0x1c);\n        }\n        tempFlag = flag & 1;\n        value = FUN_00109b2f(param1);\n        ptrArray[(long)length + -1] = value;\n        param3 = length;\n      }\n      goto LAB_0010a582;\n    }\n    ptrArray = (undefined8 *)0x0;\n    if (param4 != '\\0') goto LAB_0010a582;\n    ptrArray = (undefined8 *)xmalloc(8);\n    result = FUN_00109d97(param1);\n    if (result == '\\0') {\n      return 0;\n    }\n    if ((tempFlag != 0) || (*(char *)(*(long *)(param1 + 0x60) + 0x1c) != '\\0')) {\n      value = FUN_00109b2f(param1);\n      param3 = 1;\n      newValue = 1;\n      *ptrArray = value;\n      goto LAB_0010a596;\n    }\n    value = FUN_00109b2f(param1);\n    param3 = 1;\n    *ptrArray = value;\n  }\n  newValue = *(undefined *)(*(long *)(param1 + 0x60) + 0x1c);\nLAB_0010a596:\n  str2 = (char *)FUN_00109b2f(param1);\n  str1Length = strlen(str1);\n  str2Length = strlen(str2);\n  index = str1Length + 10 + str2Length;\n  for (loopIndex = 0; (int)loopIndex < param3; loopIndex = loopIndex + 1) {\n    str1Length = strlen((char *)ptrArray[loopIndex]);\n    index = index + str1Length;\n  }\n  newStr = (char *)xmalloc(index);\n  sprintf(newStr,\"#%s,%s\",str1,str2);\n  index = 0;\n  free(str1);\n  free(str2);\n  while( true ) {\n    str1Length = strlen(newStr);\n    if (param3 <= (int)index) break;\n    *(undefined2 *)(newStr + str1Length) = 0x2c;\n    str1 = (char *)ptrArray[index];\n    index = index + 1;\n    strcpy(newStr + str1Length + 1,str1);\n    free(str1);\n  }\n  *(undefined2 *)(newStr + str1Length) = 0x3b;\n  free(ptrArray);\n  returnValue = FUN_00109b52(param1,newStr,0,newValue,0);\n  if ((char)returnValue == '\\0') {\n    return 0;\n  }\n  free(newStr);\n  return returnValue;\n}\n\n",
            "called": [
                "strcpy",
                "FUN_00109d97",
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a424",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "construct_message_0010a424"
        },
        "FUN_00119970": {
            "renaming": {
                "FUN_00119970": "print_copy_right_info_00119970",
                "param_1": "programName",
                "pcVar1": "copyRightText"
            },
            "code": "\nvoid printCopyRightInfo_00119970(undefined8 programName)\n\n{\n  char *copyRightText;\n  \n  printf(\"GNU %s %s\\n\",programName,\"(GNU Binutils for Debian) 2.40\");\n  copyRightText = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyRightText);\n  copyRightText = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyRightText);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "dcgettext",
                "printf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119970",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "print_copy_right_info_00119970"
        },
        "FUN_00114c80": {
            "renaming": {
                "FUN_00114c80": "parse_parameter_00114c80",
                "param_1": "input_string",
                "param_2": "default_value",
                "param_3": "error_message",
                "param_4": "auxiliary_data",
                "pcVar1": "equal_sign_position",
                "uVar2": "error_string",
                "auVar3": "parsed_result"
            },
            "code": "\nundefined  [16] parse_parameter_00114c80(char *input_string,undefined8 default_value,undefined8 error_message,undefined8 auxiliary_data)\n\n{\n  char *equal_sign_position;\n  undefined8 error_string;\n  undefined parsed_result [16];\n  \n  equal_sign_position = strchr(input_string,0x3d);\n  if (equal_sign_position != (char *)0x0) {\n    parsed_result._0_8_ = (undefined8 *)xmalloc(0x30);\n    error_string = FUN_0011a480(input_string,(long)equal_sign_position - (long)input_string);\n    parsed_result._0_8_[2] = equal_sign_position + 1;\n    parsed_result._0_8_[1] = error_string;\n    parsed_result._0_8_[4] = 0;\n    parsed_result._0_8_[3] = 0;\n    *parsed_result._0_8_ = default_value;\n    parsed_result._8_8_ = auxiliary_data;\n    return parsed_result;\n  }\n  error_string = dcgettext(0,\"bad format for %s\",5);\n                    \n  FUN_00119dd0(error_string,error_message);\n}\n\n",
            "called": [
                "FUN_001053b5",
                "xmalloc",
                "strchr",
                "FUN_0011a480"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114c80",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_parameter_00114c80"
        },
        "FUN_0010870e": {
            "renaming": {
                "FUN_0010870e": "update_pointer_and_value_0010870e",
                "param_1": "pointer",
                "param_2": "value",
                "param_3": "pointerList",
                "puVar1": "currentPointer"
            },
            "code": "\nvoid updatePointerAndValue_0010870e(undefined8 pointer,undefined8 value,long *pointerList)\n\n{\n  undefined8 *currentPointer;\n  \n  currentPointer = (undefined8 *)*pointerList;\n  *currentPointer = value;\n  *pointerList = (long)(currentPointer + 1);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010870e",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "update_pointer_and_value_0010870e"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104610",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_0010dac0": {
            "renaming": {
                "FUN_0010dac0": "decode_and_parse_data_0010dac0",
                "param_1": "input",
                "param_2": "data_array",
                "param_3": "output",
                "param_5": "type_code",
                "param_6": "additional_data",
                "param_7": "flag",
                "lVar1": "temp_var_1",
                "cVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "lVar5": "result",
                "uVar6": "temp_var_6",
                "plVar7": "temp_ptr_1",
                "__ptr": "ptr_1",
                "__ptr_00": "ptr_2",
                "bVar8": "temp_var_8",
                "iVar9": "temp_var_9",
                "pcVar10": "temp_var_10",
                "uVar11": "temp_var_11",
                "lVar12": "temp_var_12",
                "uVar13": "temp_var_13",
                "uVar14": "temp_var_14",
                "uVar15": "temp_var_15",
                "local_68": "local_buffer",
                "local_48": "local_var_1",
                "local_47": "local_var_2"
            },
            "code": "\nlong decode_and_parse_data_0010dac0(long input,long *data_array,long output,undefined8 param_4,uint type_code,\n                 long *additional_data,char flag,undefined8 param_8)\n\n{\n  long temp_var_1;\n  char temp_var_2;\n  undefined4 temp_var_3;\n  undefined8 temp_var_4;\n  long result;\n  undefined8 temp_var_6;\n  long *temp_ptr_1;\n  void *ptr_1;\n  void *ptr_2;\n  byte temp_var_8;\n  int temp_var_9;\n  char *temp_var_10;\n  ulong temp_var_11;\n  long temp_var_12;\n  uint temp_var_13;\n  uint temp_var_14;\n  undefined8 temp_var_15;\n  undefined local_buffer [32];\n  char local_var_1;\n  byte local_var_2;\n  \n  result = *(long *)(input + 0x110);\n  if ((~*(uint *)(result + 0x38) & type_code) != 0) {\n    temp_var_13 = (int)type_code >> ((byte)*(undefined4 *)(result + 0x44) & 0x1f);\n    temp_var_11 = (ulong)(type_code & *(uint *)(result + 0x40));\n    temp_var_8 = (byte)*(undefined4 *)(result + 0x3c);\n    temp_var_13 = (temp_var_13 ^ type_code) & *(uint *)(result + 0x38) ^ temp_var_13;\n    if (temp_var_11 == 1L << (temp_var_8 & 0x3f)) {\n      temp_var_4 = decode_and_parse_data_0010dac0(input,data_array,output,param_4,temp_var_13,additional_data,flag,param_8);\n      result = FUN_00113d3a(temp_var_4);\n      return result;\n    }\n    if (temp_var_11 != 2L << (temp_var_8 & 0x3f)) {\n      if (temp_var_11 != 3L << (temp_var_8 & 0x3f)) {\n        temp_var_4 = dcgettext(0,\"parse_coff_type: Bad type code 0x%x\",5,*(undefined4 *)(result + 0x3c),\n                          temp_var_13);\n        FUN_00119ed0(temp_var_4,type_code);\n        return 0;\n      }\n      temp_var_14 = 0;\n      if (additional_data != (long *)0x0) {\n        temp_var_14 = (uint)*(ushort *)(additional_data + 2);\n        temp_ptr_1 = additional_data + 2;\n        for (temp_var_9 = 0; (*(short *)temp_ptr_1 != 0 && (temp_var_9 != 3)); temp_var_9 = temp_var_9 + 1) {\n          *(short *)temp_ptr_1 = *(short *)((long)temp_ptr_1 + 2);\n          temp_ptr_1 = (long *)((long)temp_ptr_1 + 2);\n        }\n        *(short *)temp_ptr_1 = 0;\n      }\n      temp_var_15 = 0;\n      temp_var_4 = param_8;\n      temp_var_6 = decode_and_parse_data_0010dac0(input,data_array,output,param_4,temp_var_13,additional_data,0);\n      result = *(long *)(output + 0x28);\n      if (result == 0) {\n        temp_var_4 = FUN_00113dfe(4,0,temp_var_15,temp_var_4);\n        result = FUN_0010c218(param_8,\"int\",temp_var_4);\n        *(long *)(output + 0x28) = result;\n      }\n      result = FUN_00113c43(temp_var_6,result,0,(long)(int)(temp_var_14 - 1),0);\n      return result;\n    }\n    temp_var_4 = decode_and_parse_data_0010dac0(input,data_array,output,param_4,temp_var_13,additional_data,flag,param_8);\n    result = FUN_00113ce0(temp_var_4,0,0);\n    return result;\n  }\n  if ((additional_data != (long *)0x0) && (0 < *additional_data)) {\n    temp_ptr_1 = (long *)FUN_0010da0b(output);\n    if (*temp_ptr_1 != 0) {\n      return *temp_ptr_1;\n    }\n    result = FUN_00113e23(temp_ptr_1,0);\n    return result;\n  }\n  if (flag == '\\0') {\n    additional_data = (long *)0x0;\n  }\n  if (0x10 < type_code) {\n    result = FUN_00113e17();\n    return result;\n  }\n  result = *(long *)(output + 8 + (long)(int)type_code * 8);\n  if (result != 0) {\n    return result;\n  }\n  switch(type_code) {\n  default:\n    temp_var_4 = FUN_00113e17();\n    temp_var_10 = \"void\";\n    break;\n  case 2:\n    temp_var_4 = FUN_00113dfe(1,0);\n    temp_var_10 = \"char\";\n    break;\n  case 3:\n    temp_var_4 = FUN_00113dfe(2,0);\n    temp_var_10 = \"short\";\n    break;\n  case 4:\n    temp_var_4 = FUN_00113dfe(4,0);\n    temp_var_10 = \"int\";\n    break;\n  case 5:\n    temp_var_4 = FUN_00113dfe(4,0);\n    temp_var_10 = \"long\";\n    break;\n  case 6:\n    temp_var_4 = FUN_00113df2(4);\n    temp_var_10 = \"float\";\n    break;\n  case 7:\n    temp_var_4 = FUN_00113df2(8);\n    temp_var_10 = \"double\";\n    break;\n  case 8:\n    if (additional_data == (long *)0x0) {\n      result = FUN_00113da9(1,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var_4 = 8;\n    goto LAB_0010de7a;\n  case 9:\n    if (additional_data == (long *)0x0) {\n      result = FUN_00113da9(0,0,0);\n      goto LAB_0010e046;\n    }\n    temp_var_4 = 9;\nLAB_0010de7a:\n    result = FUN_0010e07c(input,data_array,output,temp_var_4,additional_data,param_8);\nLAB_0010e046:\n    temp_ptr_1 = (long *)FUN_0010da0b(output,param_4);\n    *temp_ptr_1 = result;\n    return result;\n  case 10:\n    if (additional_data == (long *)0x0) {\n      result = FUN_00113d6e(0,0);\n    }\n    else {\n      result = additional_data[3];\n      ptr_1 = (void *)xmalloc(0x50);\n      ptr_2 = (void *)xmalloc(0x50);\n      temp_var_12 = 0;\n      do {\n        while( true ) {\n          if ((result <= data_array[3]) || (data_array[1] <= data_array[2])) goto LAB_0010e032;\n          temp_var_9 = (int)temp_var_12;\n          temp_var_1 = *(long *)(*data_array + data_array[2] * 8);\n          temp_var_2 = bfd_coff_get_syment(input,temp_var_1,local_buffer);\n          temp_var_12 = (long)temp_var_9;\n          if (temp_var_2 == '\\0') {\n            temp_var_3 = bfd_get_error();\n            temp_var_4 = bfd_errmsg(temp_var_3);\n            temp_var_6 = dcgettext(0,\"bfd_coff_get_syment failed: %s\",5);\n            FUN_00119ed0(temp_var_6,temp_var_4);\n            free(ptr_1);\n            free(ptr_2);\n            result = 0;\n            goto LAB_0010e046;\n          }\n          data_array[2] = data_array[2] + 1;\n          data_array[3] = (ulong)local_var_2 + 1 + data_array[3];\n          if (local_var_1 != '\\x10') break;\n          if ((int)type_code <= temp_var_9 + 1) {\n            type_code = type_code + 10;\n            ptr_1 = (void *)xrealloc(ptr_1);\n            ptr_2 = (void *)xrealloc(ptr_2,(long)(int)type_code << 3);\n          }\n          temp_var_12 = *(long *)(temp_var_1 + 0x20);\n          *(undefined8 *)((long)ptr_1 + (long)temp_var_9 * 8) = *(undefined8 *)(temp_var_1 + 8);\n          *(long *)((long)ptr_2 + (long)temp_var_9 * 8) =\n               *(long *)(temp_var_1 + 0x10) + *(long *)(temp_var_12 + 0x30);\n          temp_var_12 = (long)(temp_var_9 + 1);\n        }\n      } while (local_var_1 != 'f');\nLAB_0010e032:\n      *(undefined8 *)((long)ptr_1 + temp_var_12 * 8) = 0;\n      result = FUN_00113d6e(ptr_1,ptr_2);\n    }\n    goto LAB_0010e046;\n  case 0xb:\n    result = FUN_00113e17();\n    goto LAB_0010e065;\n  case 0xc:\n    temp_var_4 = FUN_00113dfe(1,1);\n    temp_var_10 = \"unsigned char\";\n    break;\n  case 0xd:\n    temp_var_4 = FUN_00113dfe(2,1);\n    temp_var_10 = \"unsigned short\";\n    break;\n  case 0xe:\n    temp_var_4 = FUN_00113dfe(4,1);\n    temp_var_10 = \"unsigned int\";\n    break;\n  case 0xf:\n    temp_var_4 = FUN_00113dfe(4,1);\n    temp_var_10 = \"unsigned long\";\n    break;\n  case 0x10:\n    temp_var_4 = FUN_00113df2(0xc);\n    temp_var_10 = \"long double\";\n  }\n  result = FUN_0010c218(param_8,temp_var_10,temp_var_4);\nLAB_0010e065:\n  *(long *)(output + 8 + (long)(int)type_code * 8) = result;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0010c218",
                "xmalloc",
                "FUN_00119ed0",
                "xrealloc",
                "FUN_00113dfe",
                "FUN_00113e17",
                "bfd_errmsg",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_00113df2",
                "FUN_00113d6e",
                "FUN_00113da9",
                "bfd_get_error",
                "free",
                "FUN_00113ce0",
                "FUN_0010da0b",
                "FUN_0010e07c",
                "FUN_0010dac0",
                "bfd_coff_get_syment",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010dac0",
            "calling": [
                "FUN_0010e07c",
                "FUN_0010554f",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "decode_and_parse_data_0010dac0"
        },
        "FUN_00113fb0": {
            "renaming": {
                "FUN_00113fb0": "compare_strings_00113fb0",
                "param_1": "string1",
                "param_2": "string2",
                "__n": "length",
                "iVar1": "comparisonResult",
                "extraout_var": "extraOut",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00113fb0(char *string1,char *string2)\n\n{\n  int comparisonResult;\n  undefined8 in_RAX;\n  size_t length;\n  undefined4 extraOut;\n  undefined result [16];\n  \n  length = strlen(string2);\n  comparisonResult = strncmp(string1,string2,length);\n  result._1_7_ = (undefined7)(CONCAT44(extraOut,comparisonResult) >> 8);\n  result[0] = comparisonResult == 0;\n  result._8_8_ = in_RAX;\n  return result;\n}\n\n",
            "called": [
                "strncmp",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fb0",
            "calling": [
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_00107880",
                "FUN_00113ede",
                "FUN_0010554f",
                "FUN_00113e5e",
                "FUN_00114c20",
                "FUN_00108c86"
            ],
            "imported": false,
            "current_name": "compare_strings_00113fb0"
        },
        "FUN_0010882c": {
            "renaming": {
                "FUN_0010882c": "set_time_error_logging_0010882c",
                "piVar1": "errPtr",
                "uVar2": "errorMessage"
            },
            "code": "\nvoid setTimeErrorLogging_0010882c(void)\n\n{\n  int *errPtr;\n  undefined8 errorMessage;\n  \n  errPtr = __errno_location();\n  strerror(*errPtr);\n  errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n  FUN_00119ed0(errorMessage);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "FUN_00119ed0",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010882c",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "set_time_error_logging_0010882c"
        },
        "FUN_0010ebb0": {
            "renaming": {
                "FUN_0010ebb0": "format_and_send_data_0010ebb0",
                "param_1": "dataReceiver",
                "param_2": "message",
                "param_3": "messageLength",
                "param_4": "additionalInfo",
                "cVar1": "formatSpecifier",
                "__s": "prefix",
                "sVar4": "messageLength",
                "sVar5": "prefixLength",
                "__s_00": "formattedData",
                "uVar2": "lengthMinusOne",
                "uVar3": "result"
            },
            "code": "\nundefined4 formatAndSendData_0010ebb0(undefined8 dataReceiver,char *message,int messageLength,undefined8 additionalInfo)\n\n{\n  char formatSpecifier;\n  uint lengthMinusOne;\n  undefined4 result;\n  char *prefix;\n  size_t messageLength;\n  size_t prefixLength;\n  char *formattedData;\n  \n  prefix = (char *)FUN_00109b2f();\n  lengthMinusOne = messageLength - 1;\n  if (lengthMinusOne < 4) {\n    result = *(undefined4 *)(&DAT_00121340 + (ulong)lengthMinusOne * 4);\n    formatSpecifier = (&DAT_00121334)[lengthMinusOne];\n    messageLength = strlen(message);\n    prefixLength = strlen(prefix);\n    formattedData = (char *)xmalloc(messageLength + 3 + prefixLength);\n    sprintf(formattedData,\"%s:%c%s\",message,(ulong)(uint)(int)formatSpecifier,prefix);\n    free(prefix);\n    result = FUN_0010e2f0(dataReceiver,result,0,additionalInfo,formattedData);\n    if ((char)result != '\\0') {\n      free(formattedData);\n    }\n    return result;\n  }\n                    \n  abort();\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "abort",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010ebb0",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010ebb0"
        },
        "feof": {
            "renaming": {},
            "code": "\n\n\nint feof(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = feof(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "feof"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044d0",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "feof"
        },
        "FUN_00116b00": {
            "renaming": {
                "FUN_00116b00": "FUNC_00116b00"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00116b24) */\n/* WARNING: Removing unreachable block (ram,0x00116b30) */\n\nvoid FUNC_00116b00(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00116b00",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00116b00"
        },
        "FUN_00113b98": {
            "renaming": {
                "FUN_00113b98": "allocate_and_initialize_00113b98",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "lVar1": "result",
                "plVar2": "allocated_memory"
            },
            "code": "\nlong allocate_and_initialize_00113b98(long input_1,long input_2,long input_3,undefined input_4)\n\n{\n  long result;\n  long *allocated_memory;\n  \n  if ((input_1 != 0) && (result = FUN_00112904(0x13,0), result != 0)) {\n    allocated_memory = (long *)xmalloc(0x20);\n    *(undefined4 *)((long)allocated_memory + 0x19) = 0;\n    *allocated_memory = input_1;\n    *(undefined4 *)((long)allocated_memory + 0x1c) = 0;\n    allocated_memory[1] = input_2;\n    allocated_memory[2] = input_3;\n    *(undefined *)(allocated_memory + 3) = input_4;\n    *(long **)(result + 0x10) = allocated_memory;\n    return result;\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113b98",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_00113b98"
        },
        "FUN_00115d70": {
            "renaming": {
                "FUN_00115d70": "check_hash_table_00115d70",
                "param_1": "value",
                "param_2": "hashTable",
                "lVar1": "result",
                "local_18": "searchValue",
                "local_10": "isPresent"
            },
            "code": "\nundefined checkHashTable_00115d70(undefined8 value,undefined8 hashTable)\n\n{\n  long result;\n  undefined8 searchValue;\n  undefined isPresent;\n  \n  if (DAT_001279ea == '\\0') {\n    result = htab_find(hashTable,value);\n    isPresent = result != 0;\n  }\n  else {\n    isPresent = 0;\n    searchValue = value;\n    htab_traverse(hashTable,FUN_0011a170,&searchValue);\n  }\n  return isPresent;\n}\n\n",
            "called": [
                "htab_traverse",
                "htab_find",
                "FUN_0011a170"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115d70",
            "calling": [
                "FUN_001082df",
                "FUN_0010554f",
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_hash_table_00115d70"
        },
        "FUN_00109be3": {
            "renaming": {
                "FUN_00109be3": "expand_and_store_data_00109be3",
                "param_1": "dataStructPtr",
                "param_2": "data",
                "param_3": "flag",
                "uVar1": "newDataPtr",
                "puVar2": "dataPtr",
                "uVar3": "currentSize"
            },
            "code": "\nundefined8 expandAndStoreData_00109be3(long dataStructPtr,undefined8 data,undefined4 flag)\n\n{\n  undefined8 newDataPtr;\n  undefined8 *dataPtr;\n  uint currentSize;\n  \n  if (*(uint *)(dataStructPtr + 0x2c) <= *(uint *)(dataStructPtr + 0x28)) {\n    currentSize = *(uint *)(dataStructPtr + 0x2c) + 10;\n    *(uint *)(dataStructPtr + 0x2c) = currentSize;\n    newDataPtr = xrealloc(*(undefined8 *)(dataStructPtr + 0x20),(ulong)currentSize << 4);\n    *(undefined8 *)(dataStructPtr + 0x20) = newDataPtr;\n  }\n  currentSize = *(uint *)(dataStructPtr + 0x28);\n  dataPtr = (undefined8 *)((ulong)currentSize * 0x10 + *(long *)(dataStructPtr + 0x20));\n  *dataPtr = data;\n  *(undefined4 *)(dataPtr + 1) = flag;\n  *(uint *)(dataStructPtr + 0x28) = currentSize + 1;\n  return CONCAT71((int7)((ulong)dataPtr >> 8),1);\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00109be3",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "expand_and_store_data_00109be3"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104480",
            "calling": [
                "FUN_00119e70",
                "FUN_00104943"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_0011a480": {
            "renaming": {
                "FUN_0011a480": "copy_string_with_length_0011a480",
                "param_1": "sourceString",
                "param_2": "maxLength",
                "__n": "stringLength",
                "__dest": "copiedString"
            },
            "code": "\nvoid copyStringWithLength_0011a480(char *sourceString,size_t maxLength)\n\n{\n  size_t stringLength;\n  void *copiedString;\n  \n  stringLength = strnlen(sourceString,maxLength);\n  copiedString = (void *)xmalloc(stringLength + 1);\n  *(undefined *)((long)copiedString + stringLength) = 0;\n  memcpy(copiedString,sourceString,stringLength);\n  return;\n}\n\n",
            "called": [
                "strnlen",
                "xmalloc",
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a480",
            "calling": [
                "FUN_00116b90",
                "FUN_00114c80"
            ],
            "imported": false,
            "current_name": "copy_string_with_length_0011a480"
        },
        "FUN_0010e918": {
            "renaming": {
                "FUN_0010e918": "send_data_0010e918",
                "param_1": "socket",
                "param_2": "data",
                "param_3": "length",
                "__s": "randomString",
                "sVar2": "dataSize",
                "sVar3": "randomStringSize",
                "__s_00": "formattedData",
                "uVar1": "result"
            },
            "code": "\nundefined4 sendData_0010e918(undefined8 socket,char *data,undefined8 length)\n\n{\n  undefined4 result;\n  char *randomString;\n  size_t dataSize;\n  size_t randomStringSize;\n  char *formattedData;\n  \n  randomString = (char *)FUN_00109b2f();\n  dataSize = strlen(data);\n  randomStringSize = strlen(randomString);\n  formattedData = (char *)xmalloc(dataSize + 0x14 + randomStringSize);\n  sprintf(formattedData,\"%s:c=e%s,%ld\",data,randomString,length);\n  free(randomString);\n  result = FUN_0010e2f0(socket,0x80,0,0,formattedData);\n  if ((char)result != '\\0') {\n    free(formattedData);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e918",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "send_data_0010e918"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104870",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "strcpy": {
            "renaming": {},
            "code": "\n\n\nchar * strcpy(char *__dest,char *__src)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strcpy(__dest,__src);\n  return pcVar1;\n}\n\n",
            "called": [
                "strcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104100",
            "calling": [
                "FUN_0010a424",
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00115530",
                "FUN_001199d0",
                "FUN_0011378f",
                "FUN_0010554f",
                "FUN_0010ae0e"
            ],
            "imported": false,
            "current_name": "strcpy"
        },
        "FUN_00116110": {
            "renaming": {
                "FUN_00116110": "reverse_section_00116110",
                "param_1": "binary",
                "param_2": "sectionData",
                "param_3": "outputSection",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "lVar3": "sectionSize",
                "iVar4": "byteOffset",
                "iVar5": "bitOffset",
                "cVar6": "status",
                "uVar7": "errorMessage",
                "__ptr": "buffer",
                "lVar8": "copyOffset",
                "uVar9": "index",
                "iVar10": "copyLength",
                "uVar11": "endOffset",
                "puVar12": "tempPtr",
                "lVar13": "remainingSize",
                "puVar14": "bufferPtr",
                "puVar15": "copyPtr",
                "pvVar16": "copyEnd",
                "uVar17": "copyIndex",
                "uVar18": "alignment",
                "uVar19": "temp3",
                "bVar20": "isAligned",
                "local_38": "sectionLength",
                "local_30": "sourceData"
            },
            "code": "\nvoid reverseSection_00116110(undefined8 binary,undefined8 *sectionData,undefined8 outputSection)\n\n{\n  undefined temp1;\n  undefined8 temp2;\n  long sectionSize;\n  int byteOffset;\n  int bitOffset;\n  char status;\n  undefined8 errorMessage;\n  undefined8 *buffer;\n  long copyOffset;\n  ulong index;\n  int copyLength;\n  ulong endOffset;\n  undefined *tempPtr;\n  long remainingSize;\n  undefined8 *bufferPtr;\n  undefined8 *copyPtr;\n  void *copyEnd;\n  ulong copyIndex;\n  ulong alignment;\n  ulong temp3;\n  byte isAligned;\n  ulong sectionLength;\n  void *sourceData;\n  \n  isAligned = 0;\n  status = FUN_00115f50(binary,sectionData,1);\n  if (status != '\\0') {\n    return;\n  }\n  sectionLength = sectionData[8];\n  sectionSize = sectionData[0xc];\n  if (((*(byte *)((long)sectionData + 0x25) & 1) == 0) || ((*(byte *)(sectionSize + 0x25) & 1) == 0)) {\n    remainingSize = FUN_00114190(*sectionData,0,0x80);\n    if (remainingSize == 0) {\n      return;\n    }\n    if ((*(byte *)(remainingSize + 0x29) & 1) == 0) {\n      return;\n    }\n    buffer = (undefined8 *)xmalloc(sectionLength);\n    copyPtr = buffer;\n    if (7 < sectionLength) {\n      for (alignment = sectionLength >> 3; alignment != 0; alignment = alignment - 1) {\n        *copyPtr = 0;\n        copyPtr = copyPtr + (ulong)isAligned * -2 + 1;\n      }\n    }\n    bufferPtr = copyPtr;\n    if ((sectionLength & 4) != 0) {\n      bufferPtr = (undefined8 *)((long)copyPtr + (ulong)isAligned * -8 + 4);\n      *(undefined4 *)copyPtr = 0;\n    }\n    copyPtr = bufferPtr;\n    if ((sectionLength & 2) != 0) {\n      copyPtr = (undefined8 *)((long)bufferPtr + (ulong)isAligned * -4 + 2);\n      *(undefined2 *)bufferPtr = 0;\n    }\n    if ((sectionLength & 1) != 0) {\n      *(undefined *)copyPtr = 0;\n    }\n    status = bfd_set_section_contents(outputSection,sectionSize,buffer,0);\n    if (status != '\\0') {\n      free(buffer);\n      return;\n    }\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,outputSection,sectionSize,0);\n    free(buffer);\n    return;\n  }\n  sourceData = (void *)0x0;\n  status = bfd_get_full_section_contents(binary,sectionData,&sourceData);\n  if ((status == '\\0') ||\n     (status = bfd_convert_section_contents(binary,sectionData,outputSection,&sourceData,&sectionLength),\n     copyLength = DAT_00127908, status == '\\0')) {\n    bfd_set_section_size(sectionSize,0);\n    DAT_00127a40 = 1;\n    FUN_001126c0(0,binary,sectionData,0);\n    free(sourceData);\n    return;\n  }\n  byteOffset = DAT_001264b8;\n  bitOffset = DAT_001264bc;\n  if (DAT_00127908 != 0) {\n    alignment = (ulong)DAT_00127908;\n    if (sectionLength % alignment != 0) {\n      temp2 = *sectionData;\n      errorMessage = dcgettext(0,\n                        \"cannot reverse bytes: length of section %s must be evenly divisible by %d\",\n                        5);\n                    \n      FUN_00119dd0(errorMessage,temp2,copyLength);\n    }\n    copyLength = DAT_00127908 / 2;\n    endOffset = 0;\n    while (temp3 = endOffset, byteOffset = DAT_001264b8, bitOffset = DAT_001264bc, temp3 < sectionLength) {\n      endOffset = alignment + temp3;\n      copyIndex = endOffset;\n      for (index = 0; index < (ulong)(long)copyLength; index = index + 1) {\n        copyIndex = copyIndex - 1;\n        tempPtr = (undefined *)(temp3 + index + (long)sourceData);\n        temp1 = *tempPtr;\n        *tempPtr = *(undefined *)((long)sourceData + copyIndex);\n        *(undefined *)((long)sourceData + copyIndex) = temp1;\n      }\n    }\n  }\n  DAT_001264b8 = byteOffset;\n  DAT_001264bc = bitOffset;\n  if (-1 < bitOffset) {\n    alignment = (ulong)DAT_00127a3c;\n    copyLength = (int)((ulong)sectionData[7] % alignment);\n    endOffset = ((long)bitOffset - (long)copyLength) + (long)sourceData;\n    if (bitOffset < copyLength) {\n      endOffset = endOffset + alignment;\n    }\n    remainingSize = (sectionLength + (long)sourceData) - endOffset;\n    copyEnd = sourceData;\n    for (; endOffset < sectionLength + (long)sourceData; endOffset = endOffset + alignment) {\n      for (copyOffset = 0; ((int)copyOffset < byteOffset && (copyOffset != remainingSize)); copyOffset = copyOffset + 1) {\n        *(undefined *)((long)copyEnd + copyOffset) = *(undefined *)(endOffset + copyOffset);\n      }\n      copyEnd = (void *)((long)copyEnd + copyOffset);\n      remainingSize = remainingSize - alignment;\n    }\n    sectionLength = ((((alignment - 1) + sectionLength) - (long)bitOffset) / alignment) * (long)byteOffset;\n    alignment = *(ulong *)(sectionSize + 0x38) / alignment;\n    *(ulong *)(sectionSize + 0x38) = alignment;\n    if (bitOffset < copyLength) {\n      *(ulong *)(sectionSize + 0x38) = alignment + 1;\n      status = bfd_set_section_contents(outputSection,sectionSize,sourceData,0,sectionLength);\n      if (status == '\\0') {\n        FUN_00108466();\n        return;\n      }\n      goto LAB_001161d8;\n    }\n  }\n  status = bfd_set_section_contents(outputSection,sectionSize,sourceData,0,sectionLength);\n  if (status == '\\0') {\n    FUN_00108466();\n    return;\n  }\nLAB_001161d8:\n  free(sourceData);\n  return;\n}\n\n",
            "called": [
                "FUN_00114190",
                "FUN_00115f50",
                "xmalloc",
                "free",
                "bfd_set_section_size",
                "bfd_convert_section_contents",
                "bfd_set_section_contents",
                "FUN_00108466",
                "FUN_001126c0",
                "FUN_001083de",
                "bfd_get_full_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116110",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "reverse_section_00116110"
        },
        "FUN_0010871c": {
            "renaming": {
                "FUN_0010871c": "print_error_message_0010871c",
                "unaff_RBX": "errorFlag",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errMsg",
                "dcgettext": "getTranslatedErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormattedErrorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_0010871c(void)\n\n{\n  undefined8 errMsg;\n  long errorFlag;\n  undefined8 returnAddress;\n  \n  errMsg = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorFlag != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_00127600);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_00127600,errMsg,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010871c",
            "calling": [
                "FUN_0011a110"
            ],
            "imported": false,
            "current_name": "print_error_message_0010871c"
        },
        "FUN_0010bf20": {
            "renaming": {
                "FUN_0010bf20": "debug_end_block_0010bf20",
                "param_1": "block_ptr",
                "param_2": "new_end",
                "param_3": "unused_param",
                "param_4": "result",
                "lVar1": "current_block",
                "uVar2": "return_value",
                "pcVar3": "error_message",
                "auVar4": "return_struct"
            },
            "code": "\n\n\nundefined  [16] debug_end_block_0010bf20(long block_ptr,undefined8 new_end,undefined8 unused_param,undefined8 result)\n\n{\n  long current_block;\n  undefined8 return_value;\n  char *error_message;\n  undefined return_struct [16];\n  \n  if ((*(long *)(block_ptr + 8) == 0) || (current_block = *(long *)(block_ptr + 0x20), current_block == 0)) {\n    error_message = \"debug_end_block_0010bf20: no current block\";\n  }\n  else {\n    if (*(long *)(current_block + 8) != 0) {\n      *(undefined8 *)(current_block + 0x20) = new_end;\n      return_value = CONCAT71((int7)((ulong)current_block >> 8),1);\n      *(long *)(block_ptr + 0x20) = *(long *)(current_block + 8);\n      goto LAB_0010bf84;\n    }\n    error_message = \"debug_end_block_0010bf20: attempt to close top level block\";\n  }\n  return_value = dcgettext(0,error_message,5);\n  fprintf(_stderr,\"%s\\n\",return_value);\n  return_value = 0;\nLAB_0010bf84:\n  return_struct._8_8_ = result;\n  return_struct._0_8_ = return_value;\n  return return_struct;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf20",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "debug_end_block_0010bf20"
        },
        "bfd_make_section_anyway_with_flags": {
            "renaming": {},
            "code": "\nvoid bfd_make_section_anyway_with_flags(void)\n\n{\n  bfd_make_section_anyway_with_flags();\n  return;\n}\n\n",
            "called": [
                "bfd_make_section_anyway_with_flags"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104190",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_make_section_anyway_with_flags"
        },
        "FUN_0010c95e": {
            "renaming": {
                "FUN_0010c95e": "parse_input_0010c95e",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "bVar1": "firstByte",
                "bVar2": "secondByte",
                "pbVar3": "currentByte",
                "bVar4": "isChar",
                "bVar5": "isSigned",
                "bVar6": "isUnsigned",
                "cVar7": "result",
                "uVar8": "length",
                "pbVar9": "nextByte",
                "lVar10": "tempVal",
                "uVar11": "returnValue",
                "pcVar12": "typeChar",
                "sVar13": "strLength",
                "uVar14": "tempLength",
                "__ptr": "ptr",
                "lVar15": "value1",
                "pcVar19": "tempStr",
                "ppcVar18": "strArray",
                "pbVar20": "byteArray",
                "local_49": "localFlag",
                "local_48": "localLength",
                "local_40": "localStrArray"
            },
            "code": "\nundefined8 parseInput_0010c95e(undefined8 *arg1,byte **arg2,long *arg3)\n\n{\n  byte firstByte;\n  byte secondByte;\n  byte *currentByte;\n  bool isChar;\n  bool isSigned;\n  bool isUnsigned;\n  char result;\n  uint length;\n  byte *nextByte;\n  long tempVal;\n  undefined8 returnValue;\n  char *typeChar;\n  size_t strLength;\n  ulong tempLength;\n  void *ptr;\n  long value1;\n  ulong *puVar16;\n  undefined *puVar17;\n  char **strArray;\n  char *tempStr;\n  byte *byteArray;\n  undefined localFlag;\n  ulong localLength;\n  char *localStrArray [2];\n  \n  while( true ) {\n    byteArray = *arg2;\n    firstByte = *byteArray;\n    if ('T' < (char)firstByte) break;\n    if ((char)firstByte < 'A') goto switchD_0010c9b2_caseD_42;\n    switch(firstByte) {\n    case 0x41:\n      value1 = 0;\n      currentByte = byteArray;\n      goto LAB_0010ca26;\n    default:\n      goto switchD_0010c9b2_caseD_42;\n    case 0x43:\n      *arg2 = byteArray + 1;\n      result = parseInput_0010c95e(arg1,arg2,arg3);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (arg3 == (long *)0x0) {\n        return 1;\n      }\n      value1 = FUN_00113b71(*arg3);\n      *arg3 = value1;\n      return 1;\n    case 0x46:\n      *arg2 = byteArray + 1;\n      if (arg3 == (long *)0x0) {\n        puVar16 = (ulong *)0x0;\n        strArray = (char **)0x0;\n      }\n      else {\n        puVar16 = &localLength;\n        strArray = localStrArray;\n      }\n      result = FUN_0010d882(arg1,arg2,strArray,puVar16);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (**arg2 == 0x5f) {\n        *arg2 = *arg2 + 1;\n        result = parseInput_0010c95e(arg1,arg2,arg3);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (arg3 == (long *)0x0) {\n          return 1;\n        }\n        value1 = FUN_00113ce0(*arg3,localStrArray[0],localLength & 0xff);\n        *arg3 = value1;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x47:\n      *arg2 = byteArray + 1;\n      break;\n    case 0x4d:\n    case 0x4f:\n      localFlag = 0;\n      localStrArray[0] = (char *)0x0;\n      localLength = 0;\n      *arg2 = byteArray + 1;\n      if (((&_sch_istable)[(ulong)byteArray[1] * 2] & 4) == 0) {\n        if (byteArray[1] != 0x51) goto switchD_0010cdf9_caseD_60;\n        strArray = localStrArray;\n        if (arg3 == (long *)0x0) {\n          strArray = (char **)0x0;\n        }\n        result = FUN_0010d559(arg1,arg2,strArray);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      else {\n        length = FUN_00108e76(arg2);\n        currentByte = *arg2;\n        strLength = strlen((char *)currentByte);\n        if (strLength < length) goto switchD_0010cdf9_caseD_60;\n        *arg2 = currentByte + length;\n        if ((arg3 != (long *)0x0) &&\n           (localStrArray[0] = (char *)FUN_0010afd5(*arg1,arg1[1],currentByte,length,9),\n           localStrArray[0] == (char *)0x0)) {\n          return 0;\n        }\n      }\n      secondByte = **arg2;\n      if (firstByte == 0x4d) {\n        if ((secondByte == 0x43) || (secondByte == 0x56)) {\n          *arg2 = *arg2 + 1;\n        }\n        if (**arg2 != 0x46) goto switchD_0010cdf9_caseD_60;\n        *arg2 = *arg2 + 1;\n        if (arg3 == (long *)0x0) {\n          puVar17 = (undefined *)0x0;\n          puVar16 = (ulong *)0x0;\n        }\n        else {\n          puVar17 = &localFlag;\n          puVar16 = &localLength;\n        }\n        result = FUN_0010d882(arg1,arg2,puVar16,puVar17);\n        if (result == '\\0') {\n          return 0;\n        }\n      }\n      if (**arg2 == 0x5f) {\n        *arg2 = *arg2 + 1;\n        result = parseInput_0010c95e(arg1,arg2,arg3);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (arg3 == (long *)0x0) {\n          return 1;\n        }\n        if (firstByte != 0x4d) {\n          value1 = FUN_00113bfa(localStrArray[0],*arg3);\n          *arg3 = value1;\n          return 1;\n        }\n        value1 = FUN_00113b98(*arg3,localStrArray[0],localLength,localFlag);\n        *arg3 = value1;\n        return 1;\n      }\n      goto switchD_0010cdf9_caseD_60;\n    case 0x50:\n      goto switchD_0010c9b2_caseD_50;\n    case 0x51:\n      returnValue = FUN_0010d559(arg1,arg2,arg3);\n      return returnValue;\n    case 0x52:\n      *arg2 = byteArray + 1;\n      result = parseInput_0010c95e(arg1,arg2,arg3);\n      if (result == '\\0') {\n        return 0;\n      }\n      if (arg3 == (long *)0x0) {\n        return 1;\n      }\n      value1 = FUN_00113cb9(*arg3);\n      *arg3 = value1;\n      return 1;\n    case 0x54:\n      *arg2 = byteArray + 1;\n      result = FUN_00108ea1(arg2,&localLength);\n      if (result != '\\0') {\n        if ((uint)localLength < *(uint *)(arg1 + 5)) {\n          localStrArray[0] = *(char **)((localLength & 0xffffffff) * 0x10 + arg1[4]);\n          result = parseInput_0010c95e(arg1,localStrArray,arg3);\n          if (result == '\\0') {\n            return 0;\n          }\n          return 1;\n        }\n      }\n      goto switchD_0010cdf9_caseD_60;\n    }\n  }\n  if (firstByte == 0x70) {\nswitchD_0010c9b2_caseD_50:\n    *arg2 = byteArray + 1;\n    result = parseInput_0010c95e(arg1,arg2,arg3);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (arg3 == (long *)0x0) {\n      return 1;\n    }\n    value1 = FUN_00113d3a(*arg3);\n    *arg3 = value1;\n    return 1;\n  }\nswitchD_0010c9b2_caseD_42:\n  isUnsigned = false;\n  isChar = false;\n  result = '\\0';\n  isSigned = false;\n  do {\n    currentByte = *arg2;\n    firstByte = *currentByte;\n    if (firstByte == 0x55) {\n      result = '\\x01';\n      goto LAB_0010cd84;\n    }\n    if ('U' < (char)firstByte) {\n      if (firstByte == 0x56) {\n        isUnsigned = true;\n        goto LAB_0010cd84;\n      }\n      if ('x' < (char)firstByte) goto switchD_0010cdf9_caseD_60;\n      if ((char)firstByte < '_') goto LAB_0010cdfb;\n      switch(firstByte) {\n      case 0x5f:\n        goto switchD_0010cdf9_caseD_5f;\n      default:\n        goto switchD_0010cdf9_caseD_60;\n      case 0x62:\n        if (arg3 == (long *)0x0) {\nLAB_0010d0aa:\n          *arg2 = currentByte + 1;\n          return 1;\n        }\n        value1 = FUN_0010914e(*arg1,&DAT_00120436);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00112904(6,4);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 99:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"unsigned char\";\n        if ((result == '\\0') && (tempStr = \"char\", isChar)) {\n          tempStr = \"signed char\";\n        }\n        value1 = FUN_0010914e(*arg1,tempStr);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113dfe(1,result);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 100:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"double\";\n        goto LAB_0010d046;\n      case 0x66:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        value1 = FUN_0010914e(*arg1,\"float\");\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113df2(4);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x69:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"unsigned int\";\n        typeChar = \"int\";\n        goto LAB_0010ced2;\n      case 0x6c:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"long unsigned int\";\n        typeChar = \"long int\";\nLAB_0010ced2:\n        if (result == '\\0') {\n          tempStr = typeChar;\n        }\n        value1 = FUN_0010914e(*arg1,tempStr);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113dfe(4,result);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x72:\n        tempStr = \"long double\";\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\nLAB_0010d046:\n        value1 = FUN_0010914e(*arg1,tempStr);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113df2(8);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x73:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"short unsigned int\";\n        if (result == '\\0') {\n          tempStr = \"short int\";\n        }\n        value1 = FUN_0010914e(*arg1,tempStr);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113dfe(2,result);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x74:\n        strArray = localStrArray;\n        if (arg3 == (long *)0x0) {\n          strArray = (char **)0x0;\n        }\n        result = FUN_0010d21c(arg1,arg2,strArray);\n        if (result == '\\0') {\n          return 0;\n        }\n        if (arg3 == (long *)0x0) {\n          return 1;\n        }\n        strLength = strlen(localStrArray[0]);\n        value1 = FUN_0010afd5(*arg1,arg1[1],localStrArray[0],strLength & 0xffffffff,9);\n        *arg3 = value1;\n        free(localStrArray[0]);\n        value1 = *arg3;\n        goto joined_r0x0010d1d8;\n      case 0x76:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        value1 = FUN_0010914e(*arg1,&DAT_00120495);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113e17();\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x77:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        value1 = FUN_0010914e(*arg1,\"__wchar_t\");\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113dfe(2,1);\n          *arg3 = value1;\n          *arg2 = *arg2 + 1;\n          goto LAB_0010d1de;\n        }\n        break;\n      case 0x78:\n        if (arg3 == (long *)0x0) goto LAB_0010d0aa;\n        tempStr = \"long long unsigned int\";\n        if (result == '\\0') {\n          tempStr = \"long long int\";\n        }\n        value1 = FUN_0010914e(*arg1,tempStr);\n        *arg3 = value1;\n        if (value1 == 0) {\n          value1 = FUN_00113dfe(8,result);\n          *arg3 = value1;\n        }\n      }\n      *arg2 = *arg2 + 1;\n      goto LAB_0010d1de;\n    }\n    if (firstByte == 0x43) {\n      isSigned = true;\n      goto LAB_0010cd84;\n    }\n    if (firstByte != 0x53) goto LAB_0010cdc5;\n    isChar = true;\nLAB_0010cd84:\n    *arg2 = currentByte + 1;\n  } while( true );\nLAB_0010ca26:\n  nextByte = currentByte + 1;\n  *arg2 = nextByte;\n  firstByte = *nextByte;\n  if (firstByte == 0) goto switchD_0010cdf9_caseD_60;\n  if (firstByte == 0x5f) {\n    *arg2 = currentByte + 2;\n    result = parseInput_0010c95e(arg1,arg2,arg3);\n    if (result == '\\0') {\n      return 0;\n    }\n    if (arg3 == (long *)0x0) {\n      return 1;\n    }\n    tempVal = FUN_0010914e(*arg1,\"int\");\n    if (tempVal == 0) {\n      tempVal = FUN_00113dfe(4,0);\n    }\n    value1 = FUN_00113c43(*arg3,tempVal,0,value1,0);\n    *arg3 = value1;\n    return 1;\n  }\n  if (((&_sch_istable)[(ulong)firstByte * 2] & 4) == 0) goto switchD_0010cdf9_caseD_60;\n  value1 = value1 * 10 + (long)((char)firstByte + -0x30);\n  currentByte = nextByte;\n  goto LAB_0010ca26;\nLAB_0010cdc5:\n  if ((char)firstByte < ':') {\n    if ((char)firstByte < '0') {\n      if (firstByte != 0) goto switchD_0010cdf9_caseD_60;\nswitchD_0010cdf9_caseD_5f:\n      FUN_0010911f(byteArray);\n      if (arg3 == (long *)0x0) {\n        return 1;\n      }\n      goto LAB_0010d1de;\n    }\n  }\n  else {\nLAB_0010cdfb:\n    if ((firstByte != 0x47) || (*arg2 = currentByte + 1, ((&_sch_istable)[(ulong)currentByte[1] * 2] & 4) == 0)\n       ) goto switchD_0010cdf9_caseD_60;\n  }\n  byteArray = *arg2;\n  length = FUN_00108e76(arg2);\n  currentByte = *arg2;\n  strLength = strlen((char *)currentByte);\n  tempLength = (ulong)length;\n  if (tempLength <= strLength) {\n    *arg2 = currentByte + tempLength;\n    if (arg3 == (long *)0x0) {\n      return 1;\n    }\n    ptr = (void *)FUN_00109a0b(currentByte,tempLength);\n    value1 = FUN_0010914e(*arg1,ptr);\n    *arg3 = value1;\n    free(ptr);\n    if (*arg3 == 0) {\n      value1 = FUN_0010afd5(*arg1,arg1[1],currentByte,(int)*arg2 - (int)currentByte,0);\n      *arg3 = value1;\njoined_r0x0010d1d8:\n      if (value1 == 0) {\n        return 0;\n      }\n    }\nLAB_0010d1de:\n    if (isSigned) {\n      value1 = FUN_00113b71(*arg3);\n      *arg3 = value1;\n    }\n    if (isUnsigned) {\n      value1 = FUN_00113b4a(*arg3);\n      *arg3 = value1;\n    }\n    return 1;\n  }\nswitchD_0010cdf9_caseD_60:\n  FUN_0010911f(byteArray);\n  return 0;\n}\n\n",
            "called": [
                "FUN_0010d21c",
                "FUN_00113dfe",
                "FUN_00108e76",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_0010d559",
                "FUN_00113bfa",
                "FUN_00113c43",
                "strlen",
                "FUN_00113df2",
                "FUN_00113b4a",
                "free",
                "FUN_00112904",
                "FUN_00113ce0",
                "FUN_0010d882",
                "FUN_0010911f",
                "FUN_00113cb9",
                "FUN_0010914e",
                "FUN_00113b98",
                "FUN_0010c95e",
                "FUN_00108ea1",
                "FUN_00109a0b",
                "FUN_0010afd5",
                "FUN_00113d3a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c95e",
            "calling": [
                "FUN_0010d21c",
                "FUN_00113e5e",
                "FUN_0010c95e",
                "FUN_0010d7d4"
            ],
            "imported": false,
            "current_name": "parse_input_0010c95e"
        },
        "FUN_00107880": {
            "renaming": {
                "FUN_00107880": "FUNC_00107880"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x001062da) */\n/* WARNING: Removing unreachable block (ram,0x001062e7) */\n/* WARNING: Removing unreachable block (ram,0x001062eb) */\n/* WARNING: Removing unreachable block (ram,0x00106314) */\n/* WARNING: Removing unreachable block (ram,0x00106316) */\n/* WARNING: Removing unreachable block (ram,0x00106323) */\n/* WARNING: Removing unreachable block (ram,0x00106331) */\n/* WARNING: Removing unreachable block (ram,0x0010633b) */\n/* WARNING: Removing unreachable block (ram,0x00106354) */\n/* WARNING: Removing unreachable block (ram,0x00106358) */\n/* WARNING: Removing unreachable block (ram,0x001075c4) */\n/* WARNING: Removing unreachable block (ram,0x0010636d) */\n/* WARNING: Removing unreachable block (ram,0x00106375) */\n/* WARNING: Removing unreachable block (ram,0x00106490) */\n/* WARNING: Type propagation algorithm not settling */\n\n\nulong FUNC_00107880(void)\n\n{\n  uint *puVar1;\n  byte bVar2;\n  undefined *puVar3;\n  long *plVar4;\n  code *pcVar5;\n  long *plVar6;\n  ulong uVar7;\n  ulong uVar8;\n  char *__s;\n  char cVar9;\n  char cVar10;\n  uint uVar11;\n  int iVar12;\n  uint uVar13;\n  undefined4 uVar14;\n  int iVar15;\n  long *plVar16;\n  long lVar17;\n  undefined8 uVar18;\n  undefined8 uVar19;\n  size_t sVar20;\n  size_t sVar21;\n  char *pcVar22;\n  void *__ptr;\n  void *__ptr_00;\n  ulong uVar23;\n  long lVar24;\n  ulong uVar25;\n  long in_RAX;\n  int *piVar26;\n  long lVar27;\n  ulong uVar28;\n  FILE *__s_00;\n  long **pplVar29;\n  long **__ptr_01;\n  char *pcVar30;\n  undefined8 *puVar31;\n  ulong uVar32;\n  int iVar33;\n  long **pplVar34;\n  char *pcVar35;\n  undefined4 *puVar36;\n  undefined8 *puVar37;\n  char **ppcVar38;\n  void *pvVar39;\n  undefined8 *unaff_R14;\n  undefined **ppuVar40;\n  bool bVar41;\n  byte bVar42;\n  long param_7;\n  ulong param_8;\n  char param_9;\n  undefined4 *param_10;\n  char *pcStack0000000000000038;\n  uint uStack0000000000000048;\n  int param_11;\n  long param_12;\n  long lStack0000000000000088;\n  char *pcStack0000000000000090;\n  long lStack00000000000000a0;\n  long *in_stack_000000c0;\n  ulong in_stack_000000c8;\n  long in_stack_000000d0;\n  long in_stack_000000d8;\n  void *in_stack_000000e0;\n  long in_stack_000000f0;\n  undefined8 in_stack_000000f8;\n  byte bStack0000000000000100;\n  byte bStack0000000000000101;\n  undefined8 in_stack_00000110;\n  ushort in_stack_00000118;\n  char *param_13;\n  char cStack0000000000000148;\n  char *in_stack_00000150;\n  undefined uStack0000000000000158;\n  short sStack000000000000015a;\n  \n  bVar42 = 0;\n  cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x2a0))\n                     (param_7,**(undefined4 **)(in_RAX + 0x380),0);\n  if (cVar10 == '\\0') {\n    if ((*(byte *)(unaff_R14 + 9) & 0x40) != 0) {\n      iVar12 = bfd_get_arch();\n      if (iVar12 == 0) {\n        uVar19 = FUN_001125fa();\n        uVar18 = dcgettext(0,\"Unable to recognise the format of the input file `%s\\'\",5);\n        FUN_00119ed0(uVar18,uVar19);\n        return 0;\n      }\n      uVar19 = bfd_get_mach();\n      uVar14 = bfd_get_arch();\n      uVar19 = bfd_printable_arch_mach(uVar14,uVar19);\n      uVar18 = dcgettext(0,\"Output file cannot represent architecture `%s\\'\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    iVar12 = bfd_get_arch();\n    iVar33 = bfd_get_arch(param_7);\n    if (iVar12 != iVar33) {\n      uVar28 = FUN_00105828();\n      return uVar28;\n    }\n  }\n  cVar10 = bfd_set_format(param_7,*(byte *)(unaff_R14 + 9) & 7);\n  if (cVar10 == '\\0') {\nLAB_00107a82:\n    FUN_001126c0(0);\n    return 0;\n  }\n  if ((*(int *)(*(undefined8 **)(param_7 + 8) + 1) == 2) &&\n     (cVar10 = FUN_00113fb0(**(undefined8 **)(param_7 + 8),&DAT_0011b503), cVar10 != '\\0')) {\n    lVar27 = *(long *)(param_7 + 0x110);\n    if ((*(int *)((undefined8 *)unaff_R14[1] + 1) == 2) &&\n       (cVar10 = FUN_00113fb0(*(undefined8 *)unaff_R14[1],&DAT_0011b503), cVar10 != '\\0')) {\n      lVar17 = unaff_R14[0x22];\n      bVar41 = DAT_001279eb == '\\0';\n      puVar31 = (undefined8 *)(lVar17 + 200);\n      puVar37 = (undefined8 *)(lVar27 + 200);\n      for (lVar24 = 0x32; lVar24 != 0; lVar24 = lVar24 + -1) {\n        *puVar37 = *puVar31;\n        puVar31 = puVar31 + (ulong)bVar42 * -2 + 1;\n        puVar37 = puVar37 + (ulong)bVar42 * -2 + 1;\n      }\n      if (bVar41) {\n        *(undefined4 *)(lVar27 + 0x2a4) = 0xffffffff;\n      }\n      else {\n        *(int *)(lVar27 + 0x2a4) = (int)*(undefined8 *)(lVar17 + 0xa8);\n      }\n    }\n    uVar28 = DAT_001264a8;\n    if (DAT_001264a8 == 0xffffffffffffffff) {\n      DAT_001264a8 = 0x200;\n      uVar28 = 0x200;\n    }\n    else {\n      *(int *)(lVar27 + 0x10c) = (int)DAT_001264a8;\n    }\n    if (DAT_00126498 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_00126498;\n    }\n    if (DAT_001264a0 != -1) {\n      *(long *)(lVar27 + 0x148) = DAT_001264a0;\n    }\n    if (DAT_00126490 != -1) {\n      *(long *)(lVar27 + 0x100) = DAT_00126490;\n    }\n    uVar23 = DAT_00126488;\n    if (DAT_00126488 == 0xffffffffffffffff) {\n      DAT_00126488 = 0x1000;\n      uVar23 = 0x1000;\n    }\n    else {\n      *(int *)(lVar27 + 0x108) = (int)DAT_00126488;\n    }\n    if (DAT_00126478 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126478;\n    }\n    if (DAT_00126480 != -1) {\n      *(long *)(lVar27 + 0x138) = DAT_00126480;\n    }\n    if (DAT_00126474 != -1) {\n      *(short *)(lVar27 + 300) = DAT_00126474;\n    }\n    if (DAT_00126472 != -1) {\n      *(short *)(lVar27 + 0x118) = DAT_00126472;\n    }\n    if (DAT_00126470 != -1) {\n      *(short *)(lVar27 + 0x11a) = DAT_00126470;\n    }\n    if (uVar23 < uVar28) {\n      uVar19 = dcgettext(0,\"warning: file alignment (0x%lx) > section alignment (0x%lx)\",5);\n      FUN_00119ed0(uVar19,uVar28,uVar23);\n    }\n  }\n  plVar6 = DAT_001278d0;\n  free(DAT_001278d0);\n  if (plVar6 == DAT_001278c8) {\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  else {\n    free(DAT_001278c8);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n    lVar27 = (**(code **)(unaff_R14[1] + 0x1f8))();\n  }\n  if (lVar27 < 0) goto LAB_00107a82;\n  DAT_001278c8 = (long *)xmalloc();\n  DAT_001278d0 = DAT_001278c8;\n  param_8 = (**(code **)(unaff_R14[1] + 0x200))();\n  if ((long)param_8 < 0) goto LAB_00107a82;\n  if (param_8 == 0) {\n    free(DAT_001278d0);\n    DAT_001278d0 = (long *)0x0;\n    DAT_001278c8 = (long *)0x0;\n  }\n  bfd_map_over_sections();\n  puVar31 = DAT_001279e0;\n  if ((DAT_0012790c == '\\0') &&\n     (cVar10 = (**(code **)(*(long *)(param_7 + 8) + 0x168))(), puVar31 = DAT_001279e0,\n     cVar10 == '\\0')) {\n    DAT_00127a40 = 1;\n    dcgettext(0,\"error in private header data\",5);\n    FUN_001126c0(0);\n    puVar31 = DAT_001279e0;\n  }\n  for (; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    uVar11 = 0x128;\n    lVar27 = FUN_00114190(puVar31[1],0,0x80);\n    if (lVar27 != 0) {\n      uVar11 = FUN_00115f30(*(uint *)(lVar27 + 0x28) | 0x100,param_7,puVar31[1]);\n    }\n    lVar27 = bfd_get_section_by_name(param_7,puVar31[1]);\n    if (lVar27 != 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t add section \\'%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    lVar27 = bfd_make_section_with_flags(param_7,puVar31[1],uVar11 | 0x100000);\n    puVar31[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar31[1];\n      uVar18 = dcgettext(0,\"can\\'t create section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      return 0;\n    }\n    cVar10 = bfd_set_section_size();\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,puVar31[5],0);\n      return 0;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x18);\n    if (lVar27 != 0) {\n      uVar19 = *(undefined8 *)(lVar27 + 0x18);\n      lVar27 = puVar31[5];\n      *(byte *)(lVar27 + 0x28) = *(byte *)(lVar27 + 0x28) | 1;\n      *(undefined8 *)(lVar27 + 0x30) = uVar19;\n      *(undefined8 *)(lVar27 + 0x38) = uVar19;\n    }\n    lVar27 = FUN_00114190(puVar31[1],0,0x60);\n    if (lVar27 != 0) {\n      lVar17 = puVar31[5];\n      *(undefined8 *)(lVar17 + 0x38) = *(undefined8 *)(lVar27 + 0x20);\n      if (0x3e < *(uint *)(lVar17 + 0x7c)) {\n        FUN_001126c0(0,param_7,lVar17,0);\n        return 0;\n      }\n    }\n  }\n  for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n    lVar27 = bfd_get_section_by_name();\n    puVar37[5] = lVar27;\n    if (lVar27 == 0) {\n      uVar19 = puVar37[1];\n      uVar18 = dcgettext(0,\"error: %s not found, can\\'t be updated\",5);\n      FUN_00119ed0(uVar18,uVar19);\n      return 0;\n    }\n    uVar19 = *(undefined8 *)(lVar27 + 0x60);\n    cVar10 = bfd_set_section_size(uVar19);\n    if (cVar10 == '\\0') {\n      FUN_001126c0(0,param_7,uVar19,0);\n      return 0;\n    }\n  }\n  puVar31 = DAT_001279d0;\n  if (DAT_00127a20 == '\\0') {\n    __ptr_01 = (long **)0x0;\n  }\n  else {\n    pplVar34 = (long **)unaff_R14[0x12];\n    __ptr_01 = pplVar34;\n    if (pplVar34 != (long **)0x0) {\n      __ptr_01 = (long **)0x0;\nLAB_001151ab:\n      if (DAT_00127a20 != '\\0') goto LAB_00115187;\n      for (plVar6 = pplVar34[1]; puVar31 = DAT_001279d0, plVar6 != (long *)0x0;\n          plVar6 = (long *)plVar6[1]) {\n      }\n    }\n  }\njoined_r0x001151c7:\n  for (; puVar31 != (undefined8 *)0x0; puVar31 = (undefined8 *)*puVar31) {\n    lVar27 = bfd_get_section_by_name();\n    if (lVar27 == 0) {\n      dcgettext(0,\"can\\'t dump section \\'%s\\' - it does not exist\",5);\n      FUN_001126c0(0);\n    }\n    else if ((*(byte *)(lVar27 + 0x25) & 1) == 0) {\n      dcgettext(0,\"can\\'t dump section - it has no contents\",5);\n      FUN_001126c0(0);\n    }\n    else {\n      sVar20 = *(size_t *)(lVar27 + 0x40);\n      __s_00 = fopen((char *)puVar31[2],\"w\");\n      if (__s_00 == (FILE *)0x0) {\n        dcgettext(0,\"could not open section dump file\",5);\n        FUN_001126c0(puVar31[2],0,0);\n      }\n      else {\n        cVar10 = bfd_malloc_and_get_section();\n        if (cVar10 == '\\0') {\n          dcgettext(0,\"could not retrieve section contents\",5);\n          FUN_001126c0(0);\n        }\n        else if ((sVar20 != 0) && (sVar21 = fwrite(param_13,1,sVar20,__s_00), sVar21 != sVar20)) {\n          piVar26 = __errno_location();\n          pcVar35 = strerror(*piVar26);\n          uVar19 = puVar31[2];\n          uVar18 = dcgettext(0,\"error writing section contents to %s (error: %s)\",5);\n          FUN_00119ed0(uVar18,uVar19,pcVar35);\n          free(param_13);\n          fclose(__s_00);\n          return 0;\n        }\n        fclose(__s_00);\n        free(param_13);\n      }\n    }\n  }\n  if (DAT_00127a30 == 0) {\nLAB_0010790a:\n    param_12 = 0;\n  }\n  else {\n    lVar27 = bfd_get_section_by_name(param_7,\".gnu_debuglink\");\n    if (lVar27 != 0) {\n      uVar19 = dcgettext(0,\"%s: debuglink section already exists\",5);\n      FUN_00119ed0(uVar19);\n      DAT_00127a30 = 0;\n      goto LAB_0010790a;\n    }\n    param_12 = bfd_create_gnu_debuglink_section(param_7);\n    lVar27 = DAT_00127a30;\n    if (param_12 == 0) {\n      uVar19 = dcgettext(0,\"cannot create debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n      return 0;\n    }\n    if (*(int *)(*(long *)(param_7 + 8) + 8) == 2) {\n      uVar23 = 0;\n      for (uVar28 = *(ulong *)(param_7 + 0x90); uVar28 != 0; uVar28 = *(ulong *)(uVar28 + 8)) {\n        uVar25 = *(ulong *)(uVar28 + 0x30);\n        uVar32 = uVar23;\n        uVar7 = uVar28;\n        uVar8 = uVar23;\n        if (uVar25 != 0) {\n          while ((uVar32 = uVar7, uVar8 != 0 &&\n                 (uVar32 = uVar28, uVar25 <= *(ulong *)(uVar23 + 0x30)))) {\n            uVar28 = *(ulong *)(uVar28 + 8);\n            if (uVar28 == 0) goto LAB_00107db8;\n            uVar25 = *(ulong *)(uVar28 + 0x30);\n            uVar7 = uVar23;\n            uVar8 = uVar25;\n          }\n        }\n        uVar23 = uVar32;\n      }\nLAB_00107db8:\n      if (uVar23 == 0) {\n        uVar28 = 0x1000;\n      }\n      else {\n        uVar23 = *(long *)(uVar23 + 0x40) + *(long *)(uVar23 + 0x30);\n        uVar28 = 0xffffffffffffffff;\n        if (uVar23 < 0xfffffffffffff001) {\n          uVar28 = uVar23 + 0xfff & 0xfffffffffffff000;\n        }\n      }\n      *(byte *)(param_12 + 0x28) = *(byte *)(param_12 + 0x28) | 1;\n      *(ulong *)(param_12 + 0x30) = uVar28;\n      *(ulong *)(param_12 + 0x38) = uVar28;\n    }\n  }\n  plVar6 = DAT_001278d0;\n  param_11 = *(int *)(param_7 + 0xa0);\n  if (param_11 != 0) {\n    uVar28 = FUNC_0010554f();\n    return uVar28;\n  }\n  if (DAT_001279a0 == '\\0') {\nLAB_00105588:\n    param_10 = (undefined4 *)0x0;\n  }\n  else {\n    ppuVar40 = &PTR_s__stab_00125c60;\n    param_10 = (undefined4 *)xmalloc(0x60);\n    puVar36 = param_10;\n    for (lVar27 = 0x18; lVar27 != 0; lVar27 = lVar27 + -1) {\n      *puVar36 = 0;\n      puVar36 = puVar36 + (ulong)bVar42 * -2 + 1;\n    }\n    pcStack0000000000000038 = (char *)0x0;\n    do {\n      puVar3 = *ppuVar40;\n      lVar27 = bfd_get_section_by_name();\n      lVar17 = bfd_get_section_by_name();\n      if ((lVar27 != 0) && (lVar17 != 0)) {\n        lVar27 = *(long *)(lVar27 + 0x40);\n        __ptr = (void *)xmalloc(lVar27);\n        cVar10 = bfd_get_section_contents();\n        if (cVar10 == '\\0') {\n          uVar14 = bfd_get_error();\n          bfd_errmsg(uVar14);\n          fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n          free(pcStack0000000000000038);\n          free(__ptr);\n        }\n        else {\n          uVar28 = *(ulong *)(lVar17 + 0x40);\n          __ptr_00 = (void *)xmalloc(uVar28 + 1);\n          param_9 = bfd_get_section_contents();\n          if (param_9 == '\\0') {\n            uVar14 = bfd_get_error();\n            bfd_errmsg(uVar14);\n            fprintf(_stderr,\"%s: %s: %s\\n\",*unaff_R14);\n            free(pcStack0000000000000038);\n          }\n          else {\n            *(undefined *)((long)__ptr_00 + uVar28) = 0;\n            if ((pcStack0000000000000038 != (char *)0x0) ||\n               (pcStack0000000000000038 = (char *)FUN_00112894(),\n               pcStack0000000000000038 != (char *)0x0)) {\n              lStack00000000000000a0 = 0;\n              lStack0000000000000088 = 0;\n              for (pvVar39 = __ptr; pvVar39 <= (void *)((long)__ptr + lVar27 + -0xc);\n                  pvVar39 = (void *)((long)pvVar39 + 0xc)) {\n                uVar23 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                bVar2 = *(byte *)((long)pvVar39 + 4);\n                uVar14 = (**(code **)(unaff_R14[1] + 0x58))((long)pvVar39 + 6);\n                lVar17 = (**(code **)(unaff_R14[1] + 0x40))((long)pvVar39 + 8);\n                if (bVar2 == 0) {\n                  lStack0000000000000088 = lStack00000000000000a0;\n                  lStack00000000000000a0 = lStack00000000000000a0 + lVar17;\n                }\n                else {\n                  uVar25 = (uVar23 & 0xffffffff) + lStack0000000000000088;\n                  if (uVar25 < uVar28) {\n                    pcVar35 = (char *)((long)__ptr_00 + uVar25);\n                    pcStack0000000000000090 = (char *)0x0;\n                    while( true ) {\n                      sVar20 = strlen(pcVar35);\n                      if (((sVar20 == 0) || (pcVar30 = pcVar35 + (sVar20 - 1), *pcVar30 != '\\\\')) ||\n                         ((ulong)((long)__ptr + lVar27) < (long)pvVar39 + 0x10U)) goto LAB_001077fb;\n                      *pcVar30 = '\\0';\n                      pvVar39 = (void *)((long)pvVar39 + 0xc);\n                      iVar12 = (**(code **)(unaff_R14[1] + 0x40))(pvVar39);\n                      uVar23 = (ulong)(uint)(iVar12 + (int)lStack0000000000000088);\n                      if (uVar28 <= uVar23) break;\n                      pcVar35 = (char *)concat(pcVar35,(long)__ptr_00 + uVar23,0);\n                      *pcVar30 = '\\\\';\n                      free(pcStack0000000000000090);\n                      pcStack0000000000000090 = pcVar35;\n                    }\n                    uVar19 = *unaff_R14;\n                    pcVar30 = (char *)dcgettext(0,\"%s: %s: stab entry %ld is corrupt\\n\",5);\n                    fprintf(_stderr,pcVar30,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc);\nLAB_001077fb:\n                    FUN_001088ae((ulong)bVar2,uVar14,lVar17,pcVar35);\n                    cVar10 = FUNC_0011173a(param_10,pcStack0000000000000038,bVar2);\n                    if (cVar10 == '\\0') {\n                      FUN_00108b3e();\n                      FUN_00108863();\n                      free(pcStack0000000000000090);\n                      free(pcStack0000000000000038);\n                      free(__ptr);\n                      free(__ptr_00);\n                      goto LAB_00105981;\n                    }\n                  }\n                  else {\n                    uVar19 = *unaff_R14;\n                    pcVar35 = (char *)dcgettext(0,\n                                                \"%s: %s: stab entry %ld is corrupt, strx = 0x%x, type = %d\\n\"\n                                                ,5);\n                    fprintf(_stderr,pcVar35,uVar19,puVar3,((long)pvVar39 - (long)__ptr) / 0xc,\n                            uVar23 & 0xffffffff,(ulong)bVar2,((long)pvVar39 - (long)__ptr) % 0xc);\n                  }\n                }\n              }\n              FUN_00108863();\n              free(__ptr);\n              goto LAB_001058eb;\n            }\n          }\n          free(__ptr_00);\n          free(__ptr);\n        }\n        goto LAB_00105981;\n      }\nLAB_001058eb:\n      ppuVar40 = ppuVar40 + 2;\n    } while (ppuVar40 != (undefined **)&DAT_00125c90);\n    if ((pcStack0000000000000038 != (char *)0x0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) {\nLAB_00105981:\n      free(param_10);\n      goto LAB_00105588;\n    }\n    if (*(int *)(unaff_R14[1] + 8) == 1) {\n      lVar27 = 0;\n      for (plVar16 = plVar6; plVar16 < plVar6 + param_8; plVar16 = plVar16 + 1) {\n        (**(code **)(unaff_R14[1] + 0x218))();\n        if (cStack0000000000000148 == '-') {\n          if (((lVar27 == 0) && (lVar27 = FUN_00112894(), lVar27 == 0)) ||\n             ((in_stack_00000150 == (char *)0x0 || (*in_stack_00000150 == '\\0'))))\n          goto LAB_00105981;\n          pcVar35 = (char *)0x0;\n          pcVar30 = in_stack_00000150;\n          while (((*pcVar30 != '\\0' && (sVar20 = strlen(pcVar30), pcVar30[sVar20 - 1] == '\\\\')) &&\n                 (plVar16 + 1 < plVar6 + param_8))) {\n            pcVar22 = (char *)xstrdup(pcVar30);\n            sVar20 = strlen(pcVar22);\n            pcVar22[sVar20 - 1] = '\\0';\n            pcVar30 = (char *)concat(pcVar22,*(undefined8 *)(plVar16[1] + 8),0);\n            free(pcVar22);\n            free(pcVar35);\n            plVar16 = plVar16 + 1;\n            pcVar35 = pcVar30;\n          }\n          FUN_001088ae(uStack0000000000000158,(int)sStack000000000000015a,param_13,pcVar30);\n          param_9 = FUNC_0011173a(param_10,lVar27,uStack0000000000000158);\n          if (param_9 == '\\0') {\n            FUN_00108b3e();\n            FUN_00108863();\n            goto LAB_00105981;\n          }\n        }\n      }\n      FUN_00108863();\n      if ((lVar27 != 0) && (cVar10 = FUN_0010c892(), cVar10 == '\\0')) goto LAB_00105981;\n    }\n    if (param_9 == '\\0') {\n      if ((*(int *)(unaff_R14[1] + 8) == 2) && (param_8 != 0)) {\n        param_13 = (char *)0x0;\n        in_stack_000000c0 = plVar6;\n        in_stack_000000d0 = 0;\n        in_stack_000000d8 = 0;\n        puVar31 = (undefined8 *)&stack0x00000148;\n        for (lVar27 = 0x22; lVar27 != 0; lVar27 = lVar27 + -1) {\n          *(undefined4 *)puVar31 = 0;\n          puVar31 = (undefined8 *)((long)puVar31 + (ulong)bVar42 * -8 + 4);\n        }\n        cVar10 = '\\0';\n        _uStack0000000000000048 = (int *)0x0;\n        pcStack0000000000000038 = (char *)0x0;\n        pcStack0000000000000090 = (char *)0xffffffffffffffff;\n        in_stack_000000c8 = param_8;\nswitchD_00106e1a_caseD_68:\n        do {\n          while( true ) {\n            if ((long)param_8 <= in_stack_000000d0) goto LAB_00105590;\n            lVar27 = plVar6[in_stack_000000d0];\n            cVar9 = bfd_coff_get_syment();\n            lVar17 = in_stack_000000d8;\n            if (cVar9 == '\\0') {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_syment failed: %s\";\n              goto LAB_00105968;\n            }\n            pcVar35 = *(char **)(lVar27 + 8);\n            in_stack_000000d0 = in_stack_000000d0 + 1;\n            in_stack_000000d8 = (ulong)bStack0000000000000101 + 1 + in_stack_000000d8;\n            if ((bStack0000000000000101 != 0) && (cVar9 = bfd_coff_get_auxent(), cVar9 == '\\0')) {\n              uVar14 = bfd_get_error();\n              bfd_errmsg(uVar14);\n              pcVar35 = \"bfd_coff_get_auxent failed: %s\";\n              goto LAB_00105968;\n            }\n            if (pcStack0000000000000090 != (char *)lVar17) break;\n            if (bStack0000000000000100 != 0x67) {\n              cVar9 = FUN_0010bbd3(param_10);\n              if (cVar9 != '\\0') break;\n              goto LAB_00105981;\n            }\nswitchD_00106e1a_caseD_67:\n            pcStack0000000000000090 = (char *)in_stack_000000f0;\n            cVar9 = FUN_0010bbd3(param_10);\n            if (cVar9 == '\\0') goto LAB_00105981;\n          }\n          if ((char)bStack0000000000000100 < '\\0') {\n            if (bStack0000000000000100 == 0xff) goto switchD_00106e1a_caseD_68;\nLAB_0010700a:\n            lVar24 = FUN_0010dac0();\n            if (lVar24 == 0) break;\n            cVar9 = FUN_00112a33(&stack0x00000140,lVar27,lVar17);\n          }\n          else {\n            if (bStack0000000000000100 < 100) {\n              switch(bStack0000000000000100) {\n              case 3:\n                if (in_stack_000000f8._6_2_ == 0) goto switchD_00106e1a_caseD_68;\n              case 2:\nswitchD_00106e1a_caseD_7f:\n                if ((ulong)((uint)in_stack_000000f8._6_2_ & *(uint *)(unaff_R14[0x22] + 0x40)) !=\n                    2L << ((byte)*(undefined4 *)(unaff_R14[0x22] + 0x3c) & 0x3f)) goto LAB_0010700a;\n                _uStack0000000000000048 = (int *)(**(code **)(unaff_R14[1] + 0x238))();\n                pcStack0000000000000038 = pcVar35;\n                goto switchD_00106e1a_caseD_68;\n              default:\n                goto LAB_0010700a;\n              case 5:\n              case 7:\n              case 0xe:\n                goto switchD_00106e1a_caseD_68;\n              }\n            }\n            switch(bStack0000000000000100) {\n            case 100:\n              iVar12 = strcmp(pcVar35,\".bb\");\n              if (iVar12 == 0) {\n                cVar9 = FUN_0010be88(param_10);\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".eb\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                cVar9 = FUN_0010bf20(param_10);\n              }\n              break;\n            case 0x65:\n              iVar12 = strcmp(pcVar35,\".bf\");\n              if (iVar12 == 0) {\n                if (pcStack0000000000000038 != (char *)0x0) {\n                  lVar17 = FUN_0010dac0();\n                  if ((lVar17 == 0) || (cVar10 = FUN_0010bc80(param_10), cVar10 == '\\0'))\n                  goto LAB_00105981;\n                  if (_uStack0000000000000048 != (int *)0x0) {\n                    iVar12 = 0;\n                    if (bStack0000000000000101 != 0) {\n                      iVar12 = in_stack_00000118 - 1;\n                    }\n                    lVar27 = *(long *)(*(long *)(lVar27 + 0x20) + 0x30);\n                    while( true ) {\n                      iVar33 = _uStack0000000000000048[4];\n                      if (iVar33 == 0) break;\n                      cVar9 = FUN_0010bf86(param_10,iVar12 + iVar33,\n                                           *(long *)(_uStack0000000000000048 + 6) + lVar27);\n                      _uStack0000000000000048 = _uStack0000000000000048 + 4;\n                      if (cVar9 == '\\0') goto LAB_00105981;\n                    }\n                  }\n                  _uStack0000000000000048 = (int *)0x0;\n                  pcStack0000000000000038 = (char *)0x0;\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: .bf without preceding function\";\n              }\n              else {\n                iVar12 = strcmp(pcVar35,\".ef\");\n                if (iVar12 != 0) goto switchD_00106e1a_caseD_68;\n                if (cVar10 != '\\0') {\n                  cVar10 = FUN_0010be1a(param_10);\n                  if (cVar10 == '\\0') goto LAB_00105981;\n                  cVar10 = '\\0';\n                  goto switchD_00106e1a_caseD_68;\n                }\n                pcVar35 = \"%ld: unexpected .ef\\n\";\n              }\n              uVar19 = dcgettext(0,pcVar35,5);\n              FUN_00119ed0(uVar19);\n              goto LAB_00105981;\n            default:\n              goto LAB_0010700a;\n            case 0x67:\n              goto switchD_00106e1a_caseD_67;\n            case 0x68:\n            case 0x69:\n            case 0x6a:\n              goto switchD_00106e1a_caseD_68;\n            case 0x7f:\n              goto switchD_00106e1a_caseD_7f;\n            }\n          }\n        } while (cVar9 != '\\0');\n      }\n      else {\n        pcVar35 = \"%s: no recognized debugging information\";\nLAB_00105968:\n        uVar19 = dcgettext(0,pcVar35,5);\n        FUN_00119ed0(uVar19);\n      }\n      goto LAB_00105981;\n    }\n  }\nLAB_00105590:\n  if (((*(uint *)(param_7 + 0x44) & 0x42) != 0) && ((*(uint *)(param_7 + 0x44) & 1) == 0)) {\n    if ((*(char *)(*(long *)(param_7 + 8) + 0x20) == '\\0') && (DAT_00127959 == '\\0')) {\n      if (param_8 != 0) {\n        plVar6 = DAT_001278d0 + param_8;\n        plVar16 = DAT_001278d0;\n        do {\n          uVar11 = *(uint *)(*plVar16 + 0x18);\n          if ((uVar11 & 0x1000000) != 0) {\n            *(uint *)(*plVar16 + 0x18) = uVar11 & 0xfeffffff;\n          }\n          plVar16 = plVar16 + 1;\n        } while (plVar6 != plVar16);\n      }\n    }\n    else {\n      for (lVar27 = *(long *)(param_7 + 0x90); lVar27 != 0; lVar27 = *(long *)(lVar27 + 8)) {\n        if (*(long *)(lVar27 + 0xe8) != 0) {\n          puVar1 = (uint *)(*(long *)(lVar27 + 0xe8) + 0x18);\n          *puVar1 = *puVar1 | 0x1000000;\n        }\n      }\n    }\n  }\n  if ((DAT_00127a48 == 2) || (DAT_00127a48 == 7)) {\nLAB_001059fe:\n    if (DAT_00127a48 == 7) {\nLAB_00105a3b:\n      plVar16 = (long *)xmalloc();\n      plVar6 = DAT_001278d0;\n      uStack0000000000000048 = *(uint *)((long)unaff_R14 + 0x44) & 0x42;\n      DAT_001278c8 = plVar16;\n      if (param_8 == 0) {\n        uVar28 = 0;\n      }\n      else {\n        uVar28 = 0;\n        _param_9 = 0;\n        do {\n          iVar12 = DAT_001279c0;\n          plVar4 = (long *)plVar6[_param_9];\n          pcVar5 = (code *)plVar4[4];\n          uVar11 = *(uint *)(plVar4 + 3);\n          pcVar35 = (char *)plVar4[1];\n          pcVar30 = pcVar35;\n          if (DAT_001279c8 != (undefined8 *)0x0) {\n            iVar33 = 0;\n            puVar31 = DAT_001279c8;\n            while ((iVar33 < iVar12 && (pcVar22 = (char *)puVar31[5], pcVar22 != (char *)0x0))) {\n              if (pcVar22 != \"\") {\n                iVar15 = strcmp(pcVar22,pcVar35);\n                if (iVar15 == 0) {\n                  free(pcVar22);\n                  uVar23 = uVar28 + 1;\n                  puVar31[5] = \"\";\n                  lVar27 = FUN_0011a2e0(puVar31);\n                  uVar19 = DAT_001278f0;\n                  plVar16[uVar28] = lVar27;\n                  lVar27 = htab_elements(uVar19);\n                  if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) goto LAB_001064eb;\n                  goto LAB_00105af8;\n                }\n                puVar31 = (undefined8 *)*puVar31;\n              }\n              iVar33 = iVar33 + 1;\n            }\n          }\n          lVar27 = htab_elements(DAT_001278f0);\n          uVar23 = uVar28;\n          if ((lVar27 != 0) || (DAT_001278f8 != (char **)0x0)) {\n            if (pcVar35 != (char *)0x0) {\nLAB_001064eb:\n              if (((*pcVar35 == '_') && (pcVar35[1] == '_')) &&\n                 (iVar12 = strcmp(pcVar35 + (pcVar35[2] == '_'),\"__gnu_lto_slim\"), iVar12 == 0)) {\n                uVar19 = dcgettext(0,\"redefining symbols does not work on LTO-compiled object files\"\n                                   ,5);\n                    \n                FUN_00119dd0(uVar19);\n              }\n            }\n            _cStack0000000000000148 = 0;\n            param_13 = pcVar35;\n            lVar27 = htab_find(DAT_001278f0);\n            if (((lVar27 == 0) || (pcVar30 = *(char **)(lVar27 + 8), pcVar35 == pcVar30)) &&\n               (pcVar30 = pcVar35, ppcVar38 = DAT_001278f8, (uVar11 & 0x100) != 0)) {\n              for (; ppcVar38 != (char **)0x0; ppcVar38 = (char **)ppcVar38[3]) {\n                iVar12 = strcmp(*ppcVar38,pcVar35);\n                if (iVar12 == 0) {\n                  pcVar30 = ppcVar38[1];\n                  break;\n                }\n              }\n            }\n            plVar4[1] = (long)pcVar30;\n            cVar10 = *pcVar30;\n            if (cVar10 != '\\0') goto LAB_00105b11;\nLAB_00106557:\n            pcVar35 = DAT_00127928;\n            if ((DAT_001279a8 != '\\0') && (*(char *)(*(long *)(param_7 + 8) + 0x1c) != '\\0')) {\n              lVar27 = unaff_R14[1];\n              cVar10 = '\\0';\n              goto LAB_0010668d;\n            }\n            goto joined_r0x00106565;\n          }\nLAB_00105af8:\n          cVar10 = *pcVar35;\n          if (cVar10 == '\\0') goto LAB_00106557;\nLAB_00105b11:\n          pcVar35 = DAT_00127928;\n          lVar27 = unaff_R14[1];\n          if (*(char *)(lVar27 + 0x1c) == cVar10) {\n            if (DAT_001279a8 == '\\0') {\n              if ((DAT_00127988 == '\\0') ||\n                 ((((uVar11 & 0x82) == 0 && (pcVar5 != bfd_map_over_sections)) &&\n                  ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)))) goto joined_r0x00106565;\nLAB_0010677d:\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              goto joined_r0x00106565;\n            }\n            cVar10 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            if (cVar10 == '\\0') goto LAB_0010677d;\n            if (DAT_00127928 != (char *)0x0) {\n              pcVar30 = pcVar30 + 1;\n              plVar4[1] = (long)pcVar30;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\nLAB_001066bc:\n              sVar20 = strlen(pcVar35);\n              pcVar35 = (char *)xmalloc(sVar20 + lVar27);\n              goto LAB_001066d0;\n            }\n            *pcVar30 = cVar10;\n            plVar4[1] = (long)pcVar30;\n            uVar28 = uVar23;\n          }\n          else {\n            if ((DAT_001279a8 == '\\0') || (*(char *)(*(long *)(param_7 + 8) + 0x1c) == '\\0')) {\njoined_r0x00106565:\n              uVar28 = uVar23;\n              if (pcVar35 == (char *)0x0) goto LAB_00105b32;\n              sVar20 = strlen(pcVar30);\n              sVar21 = strlen(pcVar35);\n              pcVar22 = (char *)xmalloc(sVar21 + sVar20 + 1);\n              pcVar35 = pcVar22;\n            }\n            else {\nLAB_0010668d:\n              pcVar35 = DAT_00127928;\n              if ((*(char *)(lVar27 + 0x1c) != '\\0') && (cVar10 != *(char *)(lVar27 + 0x1c)))\n              goto joined_r0x00106565;\n              sVar20 = strlen(pcVar30);\n              lVar27 = sVar20 + 2;\n              if (pcVar35 != (char *)0x0) goto LAB_001066bc;\n              pcVar35 = (char *)xmalloc(lVar27);\nLAB_001066d0:\n              pcVar22 = pcVar35 + 1;\n              *pcVar35 = *(char *)(*(long *)(param_7 + 8) + 0x1c);\n            }\n            __s = DAT_00127928;\n            if (DAT_00127928 != (char *)0x0) {\n              strcpy(pcVar22,DAT_00127928);\n              sVar20 = strlen(__s);\n              pcVar22 = pcVar22 + sVar20;\n            }\n            strcpy(pcVar22,pcVar30);\n            plVar4[1] = (long)pcVar35;\n            pcVar30 = pcVar35;\n            uVar28 = uVar23;\n          }\nLAB_00105b32:\n          if (DAT_00127a48 == 7) goto LAB_001067a8;\n          if (((uVar11 & 0x20) == 0) &&\n             (((uVar11 & 0x100) == 0 ||\n              ((*(byte *)(**(long **)(plVar4[4] + 0xf0) + 0x18) & 0x20) == 0)))) {\n            if (((uStack0000000000000048 == 0) &&\n                (((uVar11 & 0x82) != 0 || ((*(byte *)(plVar4[4] + 0x25) & 0x10) != 0)))) ||\n               (iVar12 = bfd_decode_symclass(plVar4), iVar12 == 0x49)) {\nLAB_00105be2:\n              if (DAT_001279ea == '\\0') {\n                lVar27 = htab_find();\n                if (lVar27 == 0) goto LAB_00105c07;\n              }\n              else {\n                _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n                param_13 = pcVar30;\n                htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n                if (cStack0000000000000148 == '\\0') goto LAB_00105c07;\n              }\n            }\n            else if ((((uVar11 & 0x82) == 0) && (pcVar5 != bfd_map_over_sections)) &&\n                    ((*(byte *)(plVar4[4] + 0x25) & 0x10) == 0)) {\n              if ((uVar11 & 4) == 0) {\n                if (((*(int *)(unaff_R14[1] + 8) != 2) ||\n                    (lVar27 = *(long *)(plVar4[4] + 0xd0), lVar27 == 0)) ||\n                   (*(long *)(lVar27 + 0x40) == 0)) {\n                  if ((DAT_00127a48 == 3) || (DAT_00127a44 == 2)) goto LAB_001067a8;\n                  if (DAT_00127a44 == 1) {\n                    cVar10 = bfd_is_local_label(unaff_R14);\n                    goto joined_r0x00106a11;\n                  }\n                }\n                goto LAB_00105be2;\n              }\n              cVar10 = DAT_001279a0;\n              if (1 < DAT_00127a48 - 2U) {\njoined_r0x00106a11:\n                if (cVar10 == '\\0') goto LAB_00105be2;\n              }\n            }\n            else if (DAT_00127a48 != 3) goto LAB_00105be2;\n            goto LAB_001067a8;\n          }\n          if (DAT_001279ea == '\\0') {\n            lVar27 = htab_find();\n            if (lVar27 != 0) {\nLAB_0010687f:\n              uVar19 = dcgettext(0,\"not stripping symbol `%s\\' because it is named in a relocation\",\n                                 5);\n              FUN_00119ed0(uVar19);\n              DAT_00127a40 = 1;\n            }\n          }\n          else {\n            _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n            param_13 = pcVar30;\n            htab_traverse(DAT_00127a18,FUN_0011a170,&stack0x00000140);\n            if (cStack0000000000000148 != '\\0') goto LAB_0010687f;\n          }\n          if ((uVar11 & 0x20) == 0) {\nLAB_00105c07:\n            if (DAT_001279ea != '\\0') {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a10,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_001067a8;\n              goto LAB_00105c2c;\n            }\n            lVar27 = htab_find();\n            if (lVar27 == 0) goto LAB_00105c2c;\nLAB_001067a8:\n            if ((DAT_00127a38 != '\\0') && ((uVar11 & 0x4000) != 0)) goto LAB_00105c2c;\n            if (DAT_001279ea == '\\0') {\n              lVar27 = htab_find();\n              if (lVar27 != 0) goto LAB_00105c2c;\n            }\n            else {\n              _cStack0000000000000148 = _cStack0000000000000148 & 0xffffffffffffff00;\n              param_13 = pcVar30;\n              htab_traverse(DAT_00127a28,FUN_0011a170,&stack0x00000140);\n              if (cStack0000000000000148 != '\\0') goto LAB_00105c2c;\n            }\n          }\n          else {\nLAB_00105c2c:\n            cVar10 = FUN_001159d0(plVar4[4]);\n            if (cVar10 == '\\0') {\n              if (((uVar11 & 0x800002) == 0) && (pcVar5 != bfd_map_over_sections)) {\nLAB_00105c5f:\n                if ((uVar11 & 0x82) != 0) {\n                  cVar10 = FUN_00115d70(pcVar30);\n                  if ((cVar10 == '\\0') &&\n                     ((lVar27 = htab_elements(DAT_001279f8), lVar27 == 0 ||\n                      (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')))) {\n                    if (((((DAT_00127958 == '\\0') ||\n                          (uVar13 = *(uint *)(plVar4 + 3), (uVar13 & 0x200000) != 0)) ||\n                         (lVar27 = *plVar4, lVar27 == 0)) ||\n                        ((*(int *)(*(long *)(lVar27 + 8) + 8) != 5 ||\n                         (*(long *)(lVar27 + 0x110) == 0)))) ||\n                       (1 < (*(byte *)((long)plVar4 + 0x49) & 3) - 1)) goto joined_r0x00105ca2;\n                  }\n                  else {\n                    uVar13 = *(uint *)(plVar4 + 3);\n                  }\n                  *(uint *)(plVar4 + 3) = uVar13 & 0xffffff7d | 1;\n                }\njoined_r0x00105ca2:\n                if (((uVar11 & 1) != 0) && (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xfffffffe | 2;\n                }\n              }\n              else {\n                if ((DAT_001279e8 != '\\0') || (cVar10 = FUN_00115d70(pcVar30), cVar10 != '\\0')) {\n                  *(uint *)(plVar4 + 3) = *(uint *)(plVar4 + 3) & 0xff7ffffd | 0x80;\n                }\n                if (pcVar5 != bfd_map_over_sections) goto LAB_00105c5f;\n              }\n              plVar16[uVar28] = (long)plVar4;\n              uVar28 = uVar28 + 1;\n            }\n          }\n          _param_9 = _param_9 + 1;\n        } while (param_8 != _param_9);\n      }\n      if (DAT_001279c8 != (undefined8 *)0x0) {\n        puVar31 = DAT_001279c8;\n        iVar12 = DAT_001279c0;\n        for (lVar27 = 0; lVar27 < iVar12; lVar27 = lVar27 + 1) {\n          pcVar35 = (char *)puVar31[5];\n          if (pcVar35 == (char *)0x0) {\n            plVar6 = plVar16 + uVar28;\n            uVar28 = uVar28 + 1;\n            lVar17 = FUN_0011a2e0(puVar31,param_7);\n            *plVar6 = lVar17;\n            iVar12 = DAT_001279c0;\n          }\n          else if (pcVar35 != \"\") {\n            uVar19 = dcgettext(0,\"\\'before=%s\\' not found\",5);\n                    \n            FUN_00119dd0(uVar19,pcVar35);\n          }\n          puVar31 = (undefined8 *)*puVar31;\n        }\n      }\n      bVar41 = DAT_001279a0 == '\\0';\n      plVar16[uVar28] = 0;\n      if ((bVar41) || (param_10 == (undefined4 *)0x0)) {\nLAB_00105cfa:\n        param_8 = uVar28 & 0xffffffff;\n        goto LAB_00105710;\n      }\n      iVar12 = *(int *)(*(undefined8 **)(param_7 + 8) + 1);\n      if ((iVar12 == 5) || (iVar12 == 2)) {\n        in_stack_000000e0 = (void *)0x0;\n        cVar10 = FUN_0011378f(param_7,param_10,&stack0x000000c0,&stack0x00000110,&stack0x000000e0,\n                              &stack0x00000140);\n        if (cVar10 != '\\0') {\n          lVar27 = bfd_make_section_with_flags(param_7,\".stab\",0x2108);\n          lVar17 = bfd_make_section_with_flags(param_7,\".stabstr\",0x2108);\n          if ((((lVar27 == 0) || (lVar17 == 0)) ||\n              (cVar10 = bfd_set_section_size(lVar27,in_stack_00000110), cVar10 == '\\0')) ||\n             (cVar10 = bfd_set_section_size(lVar17,param_13), cVar10 == '\\0')) {\n            pcVar35 = \"can\\'t create debugging section\";\n          }\n          else {\n            *(undefined4 *)(lVar27 + 0x7c) = 2;\n            *(undefined4 *)(lVar17 + 0x7c) = 0;\n            cVar10 = bfd_set_section_contents(param_7,lVar27,in_stack_000000c0,0,in_stack_00000110);\n            if ((cVar10 != '\\0') &&\n               (cVar10 = bfd_set_section_contents(param_7,lVar17,in_stack_000000e0,0,param_13),\n               cVar10 != '\\0')) {\n              free(param_10);\n              goto LAB_00105cfa;\n            }\n            pcVar35 = \"can\\'t set debugging section contents\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,0,uVar19);\n          free(in_stack_000000e0);\n          free(param_10);\n          goto LAB_00105d96;\n        }\n      }\n      else {\n        uVar19 = **(undefined8 **)(param_7 + 8);\n        uVar18 = dcgettext(0,\"don\\'t know how to write debugging information for %s\",5);\n        FUN_001126c0(0,param_7,0,uVar18,uVar19);\n      }\n      free(param_10);\n    }\n    else {\nLAB_00105a07:\n      bfd_set_error(0);\n      bfd_map_over_sections();\n      iVar12 = bfd_get_error();\n      if (iVar12 == 0) goto LAB_00105a3b;\n    }\nLAB_00105d96:\n    DAT_00127a40 = 1;\n  }\n  else {\n    if ((DAT_00127a48 - 3U < 4) || ((DAT_00127a44 != 0 || (DAT_00127958 != '\\0'))))\n    goto LAB_00105a07;\n    lVar27 = htab_elements(DAT_00127a18);\n    if (((lVar27 != 0) ||\n        (((((((lVar27 = htab_elements(DAT_00127a28), lVar27 != 0 ||\n              (lVar27 = htab_elements(DAT_00127a08), lVar27 != 0)) ||\n             (lVar27 = htab_elements(DAT_00127a00), lVar27 != 0)) ||\n            ((lVar27 = htab_elements(DAT_001279f8), lVar27 != 0 ||\n             (lVar27 = htab_elements(DAT_001279f0), lVar27 != 0)))) ||\n           (lVar27 = htab_elements(DAT_001278f0), lVar27 != 0)) ||\n          (((DAT_00127928 != (char *)0x0 || (DAT_001278d8 != '\\0')) ||\n           ((DAT_00127a39 != '\\0' ||\n            (((DAT_001279a0 != '\\0' || (DAT_001279a8 != '\\0')) || (DAT_00127988 != '\\0')))))))) ||\n         ((DAT_001278f8 != (char **)0x0 || (DAT_001279e8 != '\\0')))))) || (DAT_001279c0 != 0))\n    goto LAB_001059fe;\nLAB_00105710:\n    bfd_set_symtab(param_7,DAT_001278c8,param_8 & 0xffffffff);\n    bfd_map_over_sections(unaff_R14,FUN_00115dc0,param_7);\n    bfd_map_over_sections(unaff_R14,FUN_00116110,param_7);\n    for (puVar31 = DAT_001279e0; puVar37 = DAT_001279d8, puVar31 != (undefined8 *)0x0;\n        puVar31 = (undefined8 *)*puVar31) {\n      cVar10 = bfd_set_section_contents(param_7,puVar31[5],puVar31[4],0,puVar31[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,puVar31[5],0);\n        return 0;\n      }\n    }\n    for (; puVar37 != (undefined8 *)0x0; puVar37 = (undefined8 *)*puVar37) {\n      uVar19 = *(undefined8 *)(puVar37[5] + 0x60);\n      cVar10 = bfd_set_section_contents(param_7,uVar19,puVar37[4],0,puVar37[3]);\n      if (cVar10 == '\\0') {\n        FUN_001126c0(0,param_7,uVar19,0);\n        return 0;\n      }\n    }\n    if (__ptr_01 == (long **)0x0) {\n      if ((DAT_00127a20 != '\\0') && (_DAT_001264c0 == 0)) {\n        uVar19 = *unaff_R14;\n        uVar18 = dcgettext(0,\"%s: Could not find any mergeable note sections\",5);\n        FUN_00119ed0(uVar18,uVar19);\n      }\n    }\n    else {\n      pplVar34 = (long **)0x0;\n      for (puVar31 = *(undefined8 **)(param_7 + 0x90); puVar31 != (undefined8 *)0x0;\n          puVar31 = (undefined8 *)puVar31[1]) {\n        if (((DAT_00127a20 != '\\0') && (*(int *)(*(long *)(param_7 + 8) + 8) == 5)) &&\n           ((*(int *)(puVar31[0x1a] + 4) == 7 &&\n            (cVar10 = FUN_00113fb0(*puVar31,\".gnu.build.attributes\"), cVar10 != '\\0')))) {\n          if (pplVar34 == (long **)0x0) {\n            pplVar34 = __ptr_01;\n          }\n          pplVar29 = __ptr_01;\n          if ((undefined8 *)(*pplVar34)[0xc] == puVar31) {\nLAB_0010625f:\n            pcVar35 = \"error: failed to merge notes\";\n            if (pplVar34[1] != (long *)0x0) {\n              cVar10 = bfd_set_section_contents(param_7,puVar31,pplVar34[1],0,pplVar34[2]);\n              if (cVar10 == '\\0') {\n                uVar19 = dcgettext(0,\"error: failed to copy merged notes into output\",5);\n                FUN_001126c0(0,param_7,puVar31,uVar19);\n                return 0;\n              }\n              pplVar34 = (long **)pplVar34[3];\n              goto LAB_001061be;\n            }\n          }\n          else {\n            do {\n              pplVar34 = pplVar29;\n              if ((undefined8 *)(*pplVar29)[0xc] == puVar31) goto LAB_0010625f;\n              pplVar34 = (long **)pplVar29[3];\n              pplVar29 = pplVar34;\n            } while (pplVar34 != (long **)0x0);\n            pcVar35 = \"error: failed to locate merged notes\";\n          }\n          uVar19 = dcgettext(0,pcVar35,5);\n          FUN_001126c0(0,param_7,puVar31,uVar19);\n        }\nLAB_001061be:\n      }\n      do {\n        pplVar34 = (long **)__ptr_01[3];\n        free(__ptr_01[1]);\n        free(__ptr_01);\n        __ptr_01 = pplVar34;\n      } while (pplVar34 != (long **)0x0);\n    }\n    if ((DAT_00127a30 == 0) ||\n       (cVar10 = bfd_fill_in_gnu_debuglink_section(param_7,param_12), lVar27 = DAT_00127a30,\n       cVar10 != '\\0')) {\n      uVar11 = (**(code **)(*(long *)(param_7 + 8) + 0x140))(unaff_R14);\n      uVar28 = (ulong)uVar11;\n      if ((char)uVar11 != '\\0') {\n        if (DAT_00127930 == 0) {\n          return uVar28;\n        }\n        cVar10 = bfd_alt_mach_code(param_7,DAT_00127930 & 0xffffffff);\n        uVar23 = DAT_00127930;\n        if (cVar10 == '\\0') {\n          uVar19 = dcgettext(0,\"this target does not support %lu alternative machine codes\",5);\n          FUN_00119ed0(uVar19,uVar23);\n          if (*(int *)(*(long *)(param_7 + 8) + 8) == 5) {\n            uVar19 = dcgettext(0,\"treating that number as an absolute e_machine value instead\",5);\n            FUN_00119ed0(uVar19);\n            *(short *)(*(long *)(param_7 + 0x110) + 0x3a) = (short)DAT_00127930;\n            return uVar28;\n          }\n          uVar19 = dcgettext(0,\"ignoring the alternative value\",5);\n          FUN_00119ed0(uVar19);\n          return uVar28;\n        }\n        return uVar28;\n      }\n      uVar19 = dcgettext(0,\"error copying private BFD data\",5);\n      FUN_001126c0(0,param_7,0,uVar19);\n    }\n    else {\n      uVar19 = dcgettext(0,\"cannot fill debug link section `%s\\'\",5);\n      FUN_001126c0(0,param_7,0,uVar19,lVar27);\n    }\n  }\n  return 0;\nLAB_00115187:\n  if ((((*(int *)(unaff_R14[1] + 8) == 5) && (*(int *)((long)pplVar34[0x1a] + 4) == 7)) &&\n      (cVar10 = FUN_00113fb0(*pplVar34), cVar10 != '\\0')) &&\n     ((pplVar34[0xc] != (long *)0x0 && (plVar6 = pplVar34[8], plVar6 != (long *)0x0)))) {\n    pplVar29 = (long **)xmalloc(0x20);\n    pplVar29[1] = (long *)0x0;\n    cVar10 = bfd_get_full_section_contents();\n    if (cVar10 == '\\0') {\n      dcgettext(0,\"warning: could not load note section\",5);\n      FUN_001126c0(0);\n      free(pplVar29);\n    }\n    else {\n      plVar16 = (long *)FUN_001163d0();\n      pplVar29[2] = plVar16;\n      if ((plVar16 == plVar6) || (cVar10 = bfd_set_section_size(pplVar34[0xc]), cVar10 != '\\0')) {\n        pplVar29[3] = (long *)__ptr_01;\n        *pplVar29 = (long *)pplVar34;\n        __ptr_01 = pplVar29;\n      }\n      else {\n        dcgettext(0,\"warning: failed to set merged notes size\",5);\n        FUN_001126c0(0,param_7,pplVar34);\n        free(pplVar29[1]);\n        free(pplVar29);\n      }\n    }\n  }\n  pplVar34 = (long **)pplVar34[1];\n  puVar31 = DAT_001279d0;\n  if (pplVar34 == (long **)0x0) goto joined_r0x001151c7;\n  goto LAB_001151ab;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "dcgettext",
                "FUN_001163d0",
                "bfd_set_section_size",
                "fwrite",
                "strerror",
                "FUN_001126c0",
                "FUN_00105828",
                "bfd_get_full_section_contents",
                "bfd_set_format",
                "FUN_0010551d",
                "bfd_map_over_sections",
                "FUN_0010554f",
                "bfd_get_arch",
                "FUN_00114190",
                "FUN_00115f30",
                "xmalloc",
                "FUN_00119ed0",
                "FUN_00115530",
                "bfd_malloc_and_get_section",
                "bfd_get_section_by_name",
                "bfd_make_section_with_flags",
                "bfd_create_gnu_debuglink_section",
                "fopen",
                "free",
                "__errno_location",
                "fclose"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00107880",
            "calling": [
                "FUN_001152b6"
            ],
            "imported": false,
            "current_name": "FUNC_00107880"
        },
        "FUN_0011a350": {
            "renaming": {
                "FUN_0011a350": "set_file_time_0011a350",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoPtr",
                "pcVar3": "errorMsg",
                "uVar4": "errorMessage",
                "local_38": "timeSpec1",
                "uStack_34": "timeSpec2",
                "uStack_30": "timeSpec3",
                "uStack_2c": "timeSpec4",
                "local_28": "var1",
                "uStack_24": "var2",
                "uStack_20": "var3",
                "uStack_1c": "var4"
            },
            "code": "\nvoid setFileTime_0011a350(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoPtr;\n  char *errorMsg;\n  undefined8 errorMessage;\n  undefined4 timeSpec1;\n  undefined4 timeSpec2;\n  undefined4 timeSpec3;\n  undefined4 timeSpec4;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  \n  var1 = *(undefined4 *)(fileInfo + 0x58);\n  var2 = *(undefined4 *)(fileInfo + 0x5c);\n  var3 = *(undefined4 *)(fileInfo + 0x60);\n  var4 = *(undefined4 *)(fileInfo + 100);\n  timeSpec1 = *(undefined4 *)(fileInfo + 0x48);\n  timeSpec2 = *(undefined4 *)(fileInfo + 0x4c);\n  timeSpec3 = *(undefined4 *)(fileInfo + 0x50);\n  timeSpec4 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&timeSpec1,0);\n  if (result != 0) {\n    errnoPtr = __errno_location();\n    errorMsg = strerror(*errnoPtr);\n    errorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    FUN_00119ed0(errorMessage,filePath,errorMsg);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_0010882c"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a350",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "set_file_time_0011a350"
        },
        "FUN_0011a110": {
            "renaming": {
                "FUN_0011a110": "print_error_message_0011a110",
                "param_1": "errorCode",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_0011a110(long errorCode)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 extraInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00127600,errorCode,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00127600,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_0010871c",
                "bfd_get_error",
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a110",
            "calling": [
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00104ea2",
                "FUN_00119f70",
                "FUN_001053d5"
            ],
            "imported": false,
            "current_name": "print_error_message_0011a110"
        },
        "FUN_0010e2f0": {
            "renaming": {
                "FUN_0010e2f0": "process_string_0010e2f0",
                "param_1": "array",
                "param_2": "flag",
                "param_3": "length",
                "param_4": "input",
                "param_5": "string",
                "lVar1": "hashResult",
                "uVar2": "error",
                "lVar3": "lookupResult",
                "uVar4": "errorMsg",
                "uVar5": "translatedMsg",
                "sVar6": "strLength",
                "lVar7": "offset",
                "local_44": "localVar1",
                "uStack_40": "undefinedValue1",
                "uStack_3f": "undefinedValue2",
                "uStack_3e": "undefinedValue3",
                "local_3c": "localVar2"
            },
            "code": "\nundefined8\nprocessString_0010e2f0(long *array,undefined flag,int length,undefined8 input,char *string)\n\n{\n  long hashResult;\n  undefined4 error;\n  long lookupResult;\n  undefined8 errorMsg;\n  undefined8 translatedMsg;\n  size_t strLength;\n  long offset;\n  undefined4 localVar1;\n  undefined undefinedValue1;\n  undefined undefinedValue2;\n  undefined2 undefinedValue3;\n  undefined4 localVar2 [3];\n  \n  if (string == (char *)0x0) {\n    offset = 0;\n  }\n  else {\n    lookupResult = bfd_hash_lookup(array + 7,string,1,1);\n    if (lookupResult == 0) {\n      error = bfd_get_error();\n      errorMsg = bfd_errmsg(error);\n      translatedMsg = dcgettext(0,\"string_hash_lookup failed: %s\",5);\n      FUN_00119ed0(translatedMsg,errorMsg);\n      return 0;\n    }\n    offset = *(long *)(lookupResult + 0x20);\n    if (offset == -1) {\n      offset = array[6];\n      hashResult = array[5];\n      *(long *)(lookupResult + 0x20) = offset;\n      if (hashResult == 0) {\n        array[4] = lookupResult;\n      }\n      else {\n        *(long *)(hashResult + 0x18) = lookupResult;\n      }\n      array[5] = lookupResult;\n      strLength = strlen(string);\n      array[6] = offset + 1 + strLength;\n    }\n  }\n  (**(code **)(*(long *)(*array + 8) + 0x50))(offset,&localVar1);\n  undefinedValue2 = 0;\n  undefinedValue1 = flag;\n  (**(code **)(*(long *)(*array + 8) + 0x68))((long)length,&undefinedValue3);\n  (**(code **)(*(long *)(*array + 8) + 0x50))(input,localVar2);\n  if ((ulong)array[3] < array[2] + 0xcU) {\n    array[3] = array[3] * 2;\n    offset = xrealloc(array[1]);\n    array[1] = offset;\n  }\n  offset = array[2];\n  lookupResult = array[1];\n  *(ulong *)(lookupResult + offset) = CONCAT26(undefinedValue3,CONCAT15(undefinedValue2,CONCAT14(undefinedValue1,localVar1)));\n  *(undefined4 *)(lookupResult + 8 + offset) = localVar2[0];\n  array[2] = array[2] + 0xc;\n  return CONCAT71((int7)((ulong)offset >> 8),1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_get_error",
                "xrealloc",
                "FUN_00119ed0",
                "bfd_hash_lookup",
                "bfd_errmsg",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e2f0",
            "calling": [
                "FUN_0010e453",
                "FUN_0010ebb0",
                "FUN_0010edb4",
                "FUN_0010e842",
                "FUN_0010ed2c",
                "FUN_0010e439",
                "FUN_0010e6a8",
                "FUN_0010e5db",
                "FUN_0010e918",
                "FUN_0011378f",
                "FUN_0010eafe",
                "FUN_0010e7c2",
                "FUN_0010ec73",
                "FUN_0010e9a0",
                "FUN_0010e8a9"
            ],
            "imported": false,
            "current_name": "process_string_0010e2f0"
        },
        "FUN_00113fe0": {
            "renaming": {
                "FUN_00113fe0": "parse_section_flags_00113fe0",
                "param_1": "sectionFlags",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4",
                "iVar1": "result",
                "uVar2": "message",
                "pcVar3": "commaPos",
                "pcVar4": "nextFlag",
                "sVar5": "flagLength",
                "iVar6": "flagIndex",
                "uVar7": "sectionMask",
                "auVar8": "resultArray"
            },
            "code": "\nundefined  [16] parseSectionFlags_00113fe0(char *sectionFlags,undefined8 arg2,undefined8 arg3,undefined8 arg4)\n\n{\n  int result;\n  undefined8 message;\n  char *commaPos;\n  char *nextFlag;\n  size_t flagLength;\n  int flagIndex;\n  uint sectionMask;\n  undefined resultArray [16];\n  \n  sectionMask = 0;\n  do {\n    commaPos = strchr(sectionFlags,0x2c);\n    if (commaPos == (char *)0x0) {\n      flagLength = strlen(sectionFlags);\n      flagIndex = (int)flagLength;\n      nextFlag = (char *)0x0;\n    }\n    else {\n      nextFlag = commaPos + 1;\n      flagIndex = (int)commaPos - (int)sectionFlags;\n    }\n    flagLength = (size_t)flagIndex;\n    result = strncasecmp(\"alloc\",sectionFlags,flagLength);\n    if (result == 0) {\n      sectionMask = sectionMask | 1;\n    }\n    else {\n      result = strncasecmp(\"load\",sectionFlags,flagLength);\n      if (result == 0) {\n        sectionMask = sectionMask | 2;\n      }\n      else {\n        result = strncasecmp(\"noload\",sectionFlags,flagLength);\n        if (result == 0) {\n          sectionMask = sectionMask | 0x200;\n        }\n        else {\n          result = strncasecmp(\"readonly\",sectionFlags,flagLength);\n          if (result == 0) {\n            sectionMask = sectionMask | 8;\n          }\n          else {\n            result = strncasecmp(\"debug\",sectionFlags,flagLength);\n            if (result == 0) {\n              sectionMask = sectionMask | 0x2000;\n            }\n            else {\n              result = strncasecmp(\"code\",sectionFlags,flagLength);\n              if (result == 0) {\n                sectionMask = sectionMask | 0x10;\n              }\n              else {\n                result = strncasecmp(\"data\",sectionFlags,flagLength);\n                if (result == 0) {\n                  sectionMask = sectionMask | 0x20;\n                }\n                else {\n                  result = strncasecmp(\"rom\",sectionFlags,flagLength);\n                  if (result == 0) {\n                    sectionMask = sectionMask | 0x40;\n                  }\n                  else {\n                    result = strncasecmp(\"exclude\",sectionFlags,flagLength);\n                    if (result == 0) {\n                      sectionMask = sectionMask | 0x8000;\n                    }\n                    else {\n                      result = strncasecmp(\"share\",sectionFlags,flagLength);\n                      if (result == 0) {\n                        sectionMask = sectionMask | 0x8000000;\n                      }\n                      else {\n                        result = strncasecmp(\"contents\",sectionFlags,flagLength);\n                        if (result == 0) {\n                          sectionMask = sectionMask | 0x100;\n                        }\n                        else {\n                          result = strncasecmp(\"merge\",sectionFlags,flagLength);\n                          if (result == 0) {\n                            sectionMask = sectionMask | 0x800000;\n                          }\n                          else {\n                            result = strncasecmp(\"strings\",sectionFlags,flagLength);\n                            if (result != 0) {\n                              commaPos = (char *)xmalloc((long)(flagIndex + 1));\n                              strncpy(commaPos,sectionFlags,flagLength);\n                              commaPos[flagLength] = '\\0';\n                              message = dcgettext(0,\"unrecognized section flag `%s\\'\",5);\n                              FUN_00119ed0(message,commaPos);\n                              message = dcgettext(0,\"supported flags: %s\",5);\n                    \n                              FUN_00119dd0(message,\n                                           \"alloc, load, noload, readonly, debug, code, data, rom, exclude, share, contents, merge, strings\"\n                                          );\n                            }\n                            sectionMask = sectionMask | 0x1000000;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    sectionFlags = nextFlag;\n  } while (nextFlag != (char *)0x0);\n  resultArray._4_4_ = 0;\n  resultArray._0_4_ = sectionMask;\n  resultArray._8_8_ = arg4;\n  return resultArray;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113fe0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "parse_section_flags_00113fe0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041d0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "bfd_set_start_address": {
            "renaming": {},
            "code": "\nvoid bfd_set_start_address(void)\n\n{\n  bfd_set_start_address();\n  return;\n}\n\n",
            "called": [
                "bfd_set_start_address"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104860",
            "calling": [
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "bfd_set_start_address"
        },
        "FUN_001125fa": {
            "renaming": {
                "FUN_001125fa": "generate_formatted_string_001125fa",
                "param_1": "inputStrings",
                "__s": "outputString",
                "ppcVar2": "archiveFilename",
                "sVar3": "lengthArchive",
                "sVar4": "lengthInput",
                "uVar1": "totalLength"
            },
            "code": "\nchar * generateFormattedString_001125fa(char **inputStrings)\n\n{\n  ulong totalLength;\n  char **archiveFilename;\n  size_t lengthArchive;\n  size_t lengthInput;\n  char *outputString;\n  \n  if (inputStrings == (char **)0x0) {\n                    \n    __assert_fail(\"abfd != NULL\",\"../../binutils/bucomm.c\",0x298,\"bfd_get_archive_filename\");\n  }\n  archiveFilename = (char **)inputStrings[0x1d];\n  outputString = *inputStrings;\n  if ((archiveFilename != (char **)0x0) && ((*(byte *)((long)archiveFilename + 0x49) & 0x10) == 0)) {\n    lengthArchive = strlen(*archiveFilename);\n    lengthInput = strlen(outputString);\n    totalLength = lengthArchive + 3 + lengthInput;\n    if (DAT_00127a58 < totalLength) {\n      if (DAT_00127a58 != 0) {\n        free(DAT_00127a50);\n      }\n      DAT_00127a58 = (totalLength >> 1) + totalLength;\n      DAT_00127a50 = (char *)xmalloc();\n    }\n    sprintf(DAT_00127a50,\"%s(%s)\",*(undefined8 *)inputStrings[0x1d],*inputStrings);\n    outputString = DAT_00127a50;\n  }\n  return outputString;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "sprintf",
                "__assert_fail",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001125fa",
            "calling": [
                "FUN_00104ea2",
                "FUN_001152b6",
                "FUN_001126c0",
                "FUN_00105828",
                "FUN_00114e50",
                "FUN_00107976"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_001125fa"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104160",
            "calling": [
                "FUN_00116b90",
                "FUN_00114460",
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104810",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "strspn": {
            "renaming": {},
            "code": "\n\n\nsize_t strspn(char *__s,char *__accept)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strspn(__s,__accept);\n  return sVar1;\n}\n\n",
            "called": [
                "strspn"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043e0",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "strspn"
        },
        "FUN_00108f05": {
            "renaming": {
                "FUN_00108f05": "initialize_00108f05"
            },
            "code": "\nundefined initialize_00108f05(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f05",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "initialize_00108f05"
        },
        "bfd_convert_section_setup": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_setup(void)\n\n{\n  bfd_convert_section_setup();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_setup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040f0",
            "calling": [
                "FUN_00115530"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_setup"
        },
        "FUN_00108863": {
            "renaming": {
                "FUN_00108863": "clear_memory_blocks_00108863",
                "puVar1": "blockPointer",
                "puVar2": "nextBlockPointer"
            },
            "code": "\nvoid clearMemoryBlocks_00108863(void)\n\n{\n  undefined4 *blockPointer;\n  undefined4 *nextBlockPointer;\n  \n  blockPointer = (undefined4 *)&DAT_00127740;\n  do {\n    nextBlockPointer = blockPointer + 6;\n    free(*(void **)(blockPointer + 4));\n    *(undefined8 *)(blockPointer + 4) = 0;\n    blockPointer = nextBlockPointer;\n  } while (nextBlockPointer != &DAT_001278c0);\n  DAT_001278c0 = 0;\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108863",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "clear_memory_blocks_00108863"
        },
        "FUN_00104020": {
            "renaming": {
                "FUN_00104020": "execute_indirect_function_00104020"
            },
            "code": "\nvoid executeIndirectFunction_00104020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_function_00104020"
        },
        "FUN_00108f08": {
            "renaming": {
                "FUN_00108f08": "source_debug_start_00108f08",
                "param_1": "source_debug_data",
                "param_2": "filename",
                "iVar1": "filename_comparison_result",
                "uVar2": "return_value",
                "puVar3": "current_node",
                "puVar4": "previous_node",
                "lVar5": "loop_counter",
                "puVar6": "head_node",
                "pcVar7": "current_filename",
                "puVar8": "tail_node",
                "bVar9": "constant_zero"
            },
            "code": "\n\n\nundefined8 source_debug_start_00108f08(long source_debug_data,char *filename)\n\n{\n  int filename_comparison_result;\n  undefined8 return_value;\n  undefined8 *current_node;\n  undefined8 *previous_node;\n  long loop_counter;\n  undefined8 *head_node;\n  char *current_filename;\n  undefined8 *tail_node;\n  byte constant_zero;\n  \n  constant_zero = 0;\n  current_filename = \"\";\n  if (filename != (char *)0x0) {\n    current_filename = filename;\n  }\n  if (*(long *)(source_debug_data + 8) == 0) {\n    return_value = dcgettext(0,\"debug_start_source: no debug_set_filename call\",5);\n    fprintf(_stderr,\"%s\\n\",return_value);\n    return_value = 0;\n  }\n  else {\n    for (current_node = *(undefined8 **)(*(long *)(source_debug_data + 8) + 8); current_node != (undefined8 *)0x0;\n        current_node = (undefined8 *)*current_node) {\n      filename_comparison_result = filename_cmp(current_node[1],current_filename);\n      if (filename_comparison_result == 0) goto LAB_00108fad;\n    }\n    current_node = (undefined8 *)xmalloc(0x18);\n    head_node = *(undefined8 **)(source_debug_data + 0x10);\n    tail_node = current_node;\n    for (loop_counter = 6; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *(undefined4 *)tail_node = 0;\n      tail_node = (undefined8 *)((long)tail_node + (ulong)constant_zero * -8 + 4);\n    }\n    current_node[1] = current_filename;\n    tail_node = (undefined8 *)*head_node;\n    while (previous_node = tail_node, previous_node != (undefined8 *)0x0) {\n      head_node = previous_node;\n      tail_node = (undefined8 *)*previous_node;\n    }\n    *head_node = current_node;\nLAB_00108fad:\n    *(undefined8 **)(source_debug_data + 0x10) = current_node;\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc",
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108f08",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "source_debug_start_00108f08"
        },
        "FUN_00114b84": {
            "renaming": {
                "FUN_00114b84": "remove_directory_00114b84",
                "param_9": "directoryPath"
            },
            "code": "\nvoid removeDirectory_00114b84(void)\n\n{\n  char *directoryPath;\n  \n  rmdir(directoryPath);\n  free(directoryPath);\n  return;\n}\n\n",
            "called": [
                "free",
                "rmdir"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114b84",
            "calling": [
                "FUN_00104ea2",
                "FUN_00104d25"
            ],
            "imported": false,
            "current_name": "remove_directory_00114b84"
        },
        "strnlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strnlen(char *__string,size_t __maxlen)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strnlen(__string,__maxlen);\n  return sVar1;\n}\n\n",
            "called": [
                "strnlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104380",
            "calling": [
                "FUN_0011a480"
            ],
            "imported": false,
            "current_name": "strnlen"
        },
        "FUN_00114190": {
            "renaming": {
                "FUN_00114190": "find_matching_pattern_00114190",
                "param_1": "str_to_match",
                "param_2": "use_exact_match",
                "param_3": "flags",
                "uVar1": "mask",
                "plVar2": "pattern",
                "pplVar3": "current_list",
                "iVar4": "result",
                "uVar5": "error_message",
                "pplVar6": "current_node",
                "pplVar7": "prev_node",
                "pplVar8": "next_node"
            },
            "code": "\nlong ** find_matching_pattern_00114190(long *str_to_match,char use_exact_match,uint flags)\n\n{\n  uint mask;\n  long *pattern;\n  long **current_list;\n  int result;\n  undefined8 error_message;\n  long **current_node;\n  long **prev_node;\n  long **next_node;\n  \n  prev_node = DAT_00127900;\n  if (DAT_00127900 == (long **)0x0) {\n    if (use_exact_match == '\\0') {\n      return (long **)0x0;\n    }\n    goto LAB_001142a9;\n  }\n  if (use_exact_match == '\\0') {\n    if ((flags & *(uint *)((long)DAT_00127900 + 0x14)) == 0) {\nLAB_001141e5:\n      current_node = (long **)*prev_node;\n      if (current_node == (long **)0x0) {\n        return (long **)0x0;\n      }\n      prev_node = (long **)0x0;\n    }\n    else {\n      pattern = DAT_00127900[1];\n      if (*(char *)pattern == '!') {\n        result = fnmatch((char *)((long)pattern + 1),(char *)str_to_match,0);\n        current_node = prev_node;\n        if (result == 0) goto LAB_0011438e;\n        goto LAB_001141e5;\n      }\n      result = fnmatch((char *)pattern,(char *)str_to_match,0);\n      if (result != 0) goto LAB_001141e5;\n      current_node = (long **)*prev_node;\n      if (current_node == (long **)0x0) goto LAB_00114245;\n    }\n    if ((flags & *(uint *)((long)current_node + 0x14)) != 0) {\n      pattern = current_node[1];\n      if (*(char *)pattern == '!') {\n        result = fnmatch((char *)((long)pattern + 1),(char *)str_to_match,0);\n        if (result == 0) {\nLAB_0011438e:\n          *(undefined *)(current_node + 2) = 1;\n          return (long **)0x0;\n        }\n      }\n      else {\n        result = fnmatch((char *)pattern,(char *)str_to_match,0);\n        if ((prev_node == (long **)0x0) && (result == 0)) {\n          next_node = (long **)*current_node;\n          prev_node = current_node;\n          if (next_node == (long **)0x0) goto LAB_00114245;\n          goto LAB_00114288;\n        }\n      }\n    }\n    next_node = (long **)*current_node;\n    current_node = prev_node;\n    if (next_node != (long **)0x0) goto LAB_00114288;\n  }\n  else {\n    result = strcmp((char *)DAT_00127900[1],(char *)str_to_match);\n    if (result == 0) {\nLAB_001143cd:\n      mask = *(uint *)((long)prev_node + 0x14);\n      if ((((mask & 1) != 0) && ((flags & 2) != 0)) ||\n         (((flags & 1) != 0 && ((mask & 2) != 0)))) {\n        error_message = dcgettext(0,\"error: %s both copied and removed\",5);\n                    \n        FUN_00119dd0(error_message,str_to_match);\n      }\n      if ((((mask & 8) != 0) && ((flags & 0x10) != 0)) || ((flags & 0x18) == 0x18)) {\n        error_message = dcgettext(0,\"error: %s both sets and alters VMA\",5);\n                    \n        FUN_00119dd0(error_message,str_to_match);\n      }\n      if ((((mask & 0x20) == 0) || ((flags & 0x40) == 0)) && ((flags & 0x60) != 0x60)) {\n        *(uint *)((long)prev_node + 0x14) = mask | flags;\n        return prev_node;\n      }\n      error_message = dcgettext(0,\"error: %s both sets and alters LMA\",5);\n                    \n      FUN_00119dd0(error_message,str_to_match);\n    }\n    prev_node = (long **)*prev_node;\n    if (prev_node == (long **)0x0) goto LAB_001142a9;\n    result = strcmp((char *)prev_node[1],(char *)str_to_match);\n    if (result == 0) goto LAB_001143cd;\n    next_node = (long **)*prev_node;\n    current_node = (long **)0x0;\n    if (next_node == (long **)0x0) goto LAB_001142a9;\nLAB_00114288:\n    do {\n      prev_node = current_node;\n      if (use_exact_match == '\\0') {\n        while (current_node = next_node, current_list = prev_node, next_node = current_node,\n              (flags & *(uint *)((long)current_node + 0x14)) != 0) {\n          pattern = current_node[1];\n          if (*(char *)pattern == '!') {\n            result = fnmatch((char *)((long)pattern + 1),(char *)str_to_match,0);\n            if (result == 0) goto LAB_0011438e;\n            next_node = (long **)*current_node;\n            if ((long **)*current_node == (long **)0x0) goto LAB_001142a1;\n          }\n          else {\n            result = fnmatch((char *)pattern,(char *)str_to_match,0);\n            if ((prev_node == (long **)0x0) && (result == 0)) {\n              prev_node = current_node;\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114245;\n            }\n            else {\n              next_node = (long **)*current_node;\n              if ((long **)*current_node == (long **)0x0) goto LAB_00114212;\n            }\n          }\n        }\n      }\n      else {\n        result = strcmp((char *)next_node[1],(char *)str_to_match);\n        current_list = current_node;\n        prev_node = next_node;\n        if (result == 0) goto LAB_001143cd;\n      }\n      current_node = current_list;\n      next_node = (long **)*next_node;\n      prev_node = current_node;\n    } while (next_node != (long **)0x0);\nLAB_001142a1:\n    if (use_exact_match != '\\0') {\nLAB_001142a9:\n      current_node = (long **)xmalloc(0x30);\n      *(undefined (*) [16])(current_node + 3) = (undefined  [16])0x0;\n      *(undefined *)(current_node + 2) = 0;\n      *(uint *)((long)current_node + 0x14) = flags;\n      current_node[5] = (long *)0x0;\n      prev_node = current_node;\n      *current_node = (long *)DAT_00127900;\n      DAT_00127900 = prev_node;\n      current_node[1] = str_to_match;\n      return current_node;\n    }\n  }\nLAB_00114212:\n  if (prev_node == (long **)0x0) {\n    return (long **)0x0;\n  }\nLAB_00114245:\n  *(undefined *)(prev_node + 2) = 1;\n  return prev_node;\n}\n\n",
            "called": [
                "dcgettext",
                "xmalloc",
                "fnmatch",
                "strcmp",
                "FUN_00119dd0",
                "FUN_00104bba"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114190",
            "calling": [
                "FUN_00115b70",
                "FUN_00116b90",
                "FUN_00108072",
                "FUN_00115dc0",
                "FUN_00116110",
                "FUN_00107880",
                "FUN_00115530",
                "FUN_00114c20"
            ],
            "imported": false,
            "current_name": "find_matching_pattern_00114190"
        },
        "FUN_00116490": {
            "renaming": {
                "FUN_00116490": "process_attributes_00116490",
                "param_1": "param1",
                "param_2": "arraySize",
                "param_3": "attributeName",
                "param_4": "attributesCount",
                "uVar1": "tempVar1",
                "uVar2": "tempVar2",
                "uVar3": "tempVar3",
                "bVar4": "boolVar",
                "puVar5": "ptrVar5",
                "iVar6": "intVar6",
                "lVar7": "var7",
                "uVar8": "tempVar8",
                "in_RAX": "noteType",
                "uVar9": "tempVar9",
                "uVar10": "tempVar10",
                "uVar11": "tempVar11",
                "uVar12": "tempVar12",
                "__ptr": "charPtr",
                "uVar13": "tempVar13",
                "unaff_RBX": "unaffRegBX",
                "unaff_RBP": "unaffRegBP",
                "puVar14": "ptrVar14",
                "puVar15": "ptrVar15",
                "cVar16": "charVar",
                "puVar17": "ptrVar17",
                "puVar18": "ptrVar18",
                "in_R11": "descriptionSize",
                "unaff_R12": "unaffRegR12",
                "puVar19": "ptrVar19",
                "unaff_R13": "unaffRegR13",
                "__nmemb": "nmemb",
                "unaff_R14": "unaffRegR14",
                "puVar20": "ptrVar20",
                "bVar21": "byteVar",
                "iVar22": "intVar22",
                "unaff_retaddr": "unaffRetAddr",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "param9",
                "in_stack_00000020": "stackVar1",
                "in_stack_00000028": "stackVar2",
                "in_stack_00000030": "stackVar3",
                "in_stack_00000038": "stackVar4",
                "in_stack_00000040": "stackVar5",
                "in_stack_00000048": "stackVar6"
            },
            "code": "\nulong processAttributes_00116490(undefined8 param1,ulong arraySize,ulong attributeName,long attributesCount)\n\n{\n  undefined8 tempVar1;\n  undefined8 tempVar2;\n  ulong tempVar3;\n  bool boolVar;\n  ulong *ptrVar5;\n  int intVar6;\n  long var7;\n  undefined8 tempVar8;\n  ulong noteType;\n  ulong tempVar9;\n  ulong tempVar10;\n  ulong tempVar11;\n  ulong tempVar12;\n  undefined *charPtr;\n  ulong tempVar13;\n  ulong unaffRegBX;\n  ulong unaffRegBP;\n  ulong *ptrVar14;\n  undefined *ptrVar15;\n  char charVar;\n  undefined *ptrVar17;\n  undefined *ptrVar18;\n  ulong descriptionSize;\n  ulong *unaffRegR12;\n  ulong *ptrVar19;\n  ulong unaffRegR13;\n  size_t nmemb;\n  undefined8 *unaffRegR14;\n  ulong *ptrVar20;\n  byte byteVar;\n  int intVar22;\n  ulong unaffRetAddr;\n  ulong param7;\n  uint param8;\n  ulong param9;\n  ulong stackVar1;\n  ulong *stackVar2;\n  undefined *stackVar3;\n  uint stackVar4;\n  uint stackVar5;\n  undefined8 *stackVar6;\n  \n  byteVar = 0;\ncode_r0x00116490:\n  var7 = attributesCount;\n  tempVar10 = unaffRegBP;\n  tempVar13 = unaffRegR13;\n  if (noteType == 0) {\n    if (arraySize == 0x100) {\n      unaffRegR12[7] = unaffRetAddr;\n      tempVar11 = unaffRetAddr;\nLAB_001164af:\n      tempVar9 = unaffRegR13;\n      tempVar13 = unaffRegR13;\n      unaffRetAddr = tempVar11;\n    }\n    else {\n      unaffRegR12[7] = param9;\nLAB_0011669e:\n      tempVar10 = unaffRegBP;\n      tempVar9 = unaffRegBP;\n    }\nLAB_001164bb:\n    unaffRegR12[8] = tempVar9;\n    if (*(char *)((unaffRegR12[3] - 1) + attributeName) != '\\0') {\n      var7 = dcgettext(0,\"corrupt GNU build attribute note: name not NUL terminated\",5);\n      goto LAB_0010849a;\n    }\n    ptrVar19 = unaffRegR12 + 9;\n    if (0xb < unaffRegBX) {\n      tempVar9 = (**(code **)(unaffRegR14[1] + 0x40))(var7);\n      *ptrVar19 = tempVar9;\n      tempVar9 = (**(code **)(unaffRegR14[1] + 0x40))(var7 + 4);\n      unaffRegR12[10] = tempVar9;\n      arraySize = (**(code **)(unaffRegR14[1] + 0x40))(var7 + 8);\n      attributeName = *ptrVar19;\n      unaffRegR12[0xb] = arraySize;\n      noteType = unaffRegR12[10];\n      tempVar9 = attributeName + 3 & 0xfffffffffffffffc;\n      unaffRegR12[0xf] = tempVar9;\n      if (noteType != (noteType + 3 & 0xfffffffffffffffc)) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: description size not a factor of 4\",5\n                         );\n        goto LAB_0010849a;\n      }\n      if (1 < arraySize - 0x100) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: wrong note type\",5);\n        goto LAB_0010849a;\n      }\n      tempVar11 = tempVar9 + noteType + 0xc;\n      if (unaffRegBX < tempVar11) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: note too big\",5);\n        goto LAB_0010849a;\n      }\n      if (attributeName < 2) {\n        var7 = dcgettext(0,\"corrupt GNU build attribute note: name too small\",5);\n        goto LAB_0010849a;\n      }\n      unaffRegR12[0xc] = var7 + 0xc;\n      descriptionSize = var7 + 0xc + tempVar9;\n      unaffRegR12[0xd] = descriptionSize;\n      unaffRegBX = unaffRegBX + (-0xc - (tempVar9 + noteType));\n      attributesCount = var7 + tempVar11;\n      unaffRegBP = tempVar10;\n      unaffRegR12 = ptrVar19;\n      unaffRegR13 = tempVar13;\n      if (attributeName != 2) {\n        if (*(char *)(var7 + 0xc) == '$') {\n          if ((*(char *)(var7 + 0xd) == '\\x01') && (*(char *)(var7 + 0xe) == '1')) {\n            tempVar10 = processAttributes_00116490();\n            return tempVar10;\n          }\n        }\n        else if ((((4 < attributeName) && (*(char *)(var7 + 0xc) == 'G')) &&\n                 (*(char *)(var7 + 0xd) == 'A')) &&\n                ((*(char *)(var7 + 0xe) == '$' && (*(char *)(var7 + 0xf) == '\\x01')))) {\n          if (*(char *)(var7 + 0x10) == '2') {\n            tempVar10 = processAttributes_00116490();\n            return tempVar10;\n          }\n          if (*(char *)(var7 + 0x10) == '3') {\n            tempVar10 = processAttributes_00116490();\n            return tempVar10;\n          }\n          var7 = dcgettext(0,\"corrupt GNU build attribute note: unsupported version\",5);\n          goto LAB_0010849a;\n        }\n      }\n      goto code_r0x00116490;\n    }\n    if (unaffRegBX != 0) {\n      var7 = dcgettext(0,\"corrupt GNU build attribute notes: excess data at end\",5);\n      goto LAB_0010849a;\n    }\n    if ((stackVar4 | stackVar5 | param8) == 0) {\n      tempVar1 = *unaffRegR14;\n      tempVar2 = *stackVar6;\n      tempVar8 = dcgettext(0,\"%s[%s]: Warning: version note missing - assuming version 3\",5);\n      FUN_00119ed0(tempVar8,tempVar1,tempVar2);\nLAB_0011671b:\n      nmemb = ((long)ptrVar19 - (long)stackVar2 >> 3) * -0x71c71c71c71c71c7;\n      qsort(stackVar2,nmemb,0x48,FUN_0011a1b0);\n      for (ptrVar14 = stackVar2; ptrVar14 < ptrVar19; ptrVar14 = ptrVar14 + 9) {\n        tempVar10 = ptrVar14[2];\n        if (tempVar10 != 0) {\n          tempVar13 = ptrVar14[7];\n          tempVar9 = ptrVar14[8];\n          ptrVar20 = ptrVar14;\n          intVar22 = 0;\n          if (tempVar13 == tempVar9) {\n            ptrVar14[2] = 0;\n          }\n          else {\n            do {\n              do {\n                ptrVar5 = ptrVar20;\n                ptrVar20 = ptrVar5 + -9;\n                if (ptrVar20 < stackVar2) goto LAB_001167f5;\n                tempVar11 = ptrVar5[-7];\n              } while (tempVar11 == 0);\n              if ((*ptrVar20 != *ptrVar14) ||\n                 (intVar6 = memcmp((void *)ptrVar5[-6],(void *)ptrVar14[3],*ptrVar14), intVar6 != 0))\n              break;\n              tempVar3 = ptrVar5[-2];\n              tempVar12 = ptrVar5[-1];\n              if (tempVar13 == tempVar3) {\n                if (tempVar9 == tempVar12) {\n                  ptrVar14[2] = 0;\n                  break;\n                }\nLAB_001167a6:\n                if (tempVar9 <= tempVar12) {\n                  ptrVar14[2] = 0;\n                  break;\n                }\n                if (tempVar12 < tempVar13) {\nLAB_0010852c:\n                  if ((0xfffffffffffffff0 < tempVar12) ||\n                     (tempVar13 <= (tempVar12 + 0xf & 0xfffffffffffffff0))) goto FUN_00116852;\n                }\nLAB_001167b8:\n                if ((tempVar10 == 0x101) == (tempVar11 == 0x101)) {\n                  if (tempVar12 <= tempVar9) {\n                    tempVar12 = tempVar9;\n                  }\n                  if (tempVar3 < tempVar13) {\n                    tempVar13 = tempVar3;\n                  }\n                  ptrVar5[-1] = tempVar12;\n                  ptrVar5[-2] = tempVar13;\n                  ptrVar14[2] = 0;\n                  break;\n                }\n              }\n              else {\n                if (tempVar3 <= tempVar13) goto LAB_001167a6;\n                if (tempVar12 < tempVar13) goto LAB_0010852c;\n                if (tempVar9 < tempVar13) {\n                  if ((0xfffffffffffffff0 < tempVar9) || (tempVar3 <= (tempVar9 + 0xf & 0xfffffffffffffff0)))\n                  goto FUN_00116852;\n                  goto LAB_001167b8;\n                }\n                if (tempVar9 != tempVar12) goto LAB_001167b8;\n              }\nFUN_00116852:\n              boolVar = intVar22 < 0x11;\n              intVar22 = intVar22 + 1;\n            } while (boolVar);\n          }\n        }\nLAB_001167f5:\n      }\n      qsort(stackVar2,nmemb,0x48,FUN_0011a250);\n      charPtr = (undefined *)xmalloc(stackVar1 * 2);\n      param7 = 0;\n      param9 = 0;\n      ptrVar18 = charPtr;\n      for (ptrVar14 = stackVar2; ptrVar14 < ptrVar19; ptrVar14 = ptrVar14 + 9) {\n        if (ptrVar14[2] != 0) {\n          ptrVar17 = ptrVar18 + 4;\n          ptrVar15 = ptrVar18 + 0xc;\n          if ((ptrVar14[7] == param9) && (ptrVar14[8] == param7)) {\n            (**(code **)(unaffRegR14[1] + 0x50))(*ptrVar14,ptrVar18);\n            (**(code **)(unaffRegR14[1] + 0x50))(0,ptrVar17);\n            (**(code **)(unaffRegR14[1] + 0x50))(ptrVar14[2],ptrVar18 + 8);\n            tempVar13 = ptrVar14[6];\n            tempVar10 = *ptrVar14;\n            ptrVar18 = (undefined *)ptrVar14[3];\n            ptrVar17 = ptrVar15;\n            for (tempVar9 = tempVar10; tempVar9 != 0; tempVar9 = tempVar9 - 1) {\n              *ptrVar17 = *ptrVar18;\n              ptrVar18 = ptrVar18 + (ulong)byteVar * -2 + 1;\n              ptrVar17 = ptrVar17 + (ulong)byteVar * -2 + 1;\n            }\n            if (tempVar10 < tempVar13) {\n              for (var7 = tempVar13 - tempVar10; var7 != 0; var7 = var7 + -1) {\n                *ptrVar17 = 0;\n                ptrVar17 = ptrVar17 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            ptrVar18 = ptrVar15 + tempVar13;\n          }\n          else {\n            (**(code **)(unaffRegR14[1] + 0x50))();\n            if (*(int *)(unaffRegR14[1] + 8) == 5) {\n              charVar = (*(char *)(unaffRegR14[0x22] + 4) == '\\x02') * '\\b' + '\\b';\n            }\n            else {\n              charVar = '\\b';\n            }\n            (**(code **)(unaffRegR14[1] + 0x50))(charVar,ptrVar17);\n            (**(code **)(unaffRegR14[1] + 0x50))(ptrVar14[2],ptrVar18 + 8);\n            tempVar10 = *ptrVar14;\n            ptrVar18 = (undefined *)ptrVar14[3];\n            ptrVar17 = ptrVar15;\n            for (tempVar13 = tempVar10; tempVar13 != 0; tempVar13 = tempVar13 - 1) {\n              *ptrVar17 = *ptrVar18;\n              ptrVar18 = ptrVar18 + (ulong)byteVar * -2 + 1;\n              ptrVar17 = ptrVar17 + (ulong)byteVar * -2 + 1;\n            }\n            tempVar13 = ptrVar14[6];\n            if (tempVar10 < tempVar13) {\n              for (var7 = tempVar13 - tempVar10; var7 != 0; var7 = var7 + -1) {\n                *ptrVar17 = 0;\n                ptrVar17 = ptrVar17 + (ulong)byteVar * -2 + 1;\n              }\n            }\n            var7 = unaffRegR14[1];\n            ptrVar15 = ptrVar15 + tempVar13;\n            ptrVar18 = ptrVar15 + 8;\n            if ((*(int *)(var7 + 8) == 5) && (*(char *)(unaffRegR14[0x22] + 4) == '\\x02')) {\n              (**(code **)(var7 + 0x38))(ptrVar14[7],ptrVar15);\n              (**(code **)(unaffRegR14[1] + 0x38))(ptrVar14[8],ptrVar18);\n              ptrVar18 = ptrVar15 + 0x10;\n            }\n            else {\n              (**(code **)(var7 + 0x50))(ptrVar14[7],ptrVar15);\n              (**(code **)(unaffRegR14[1] + 0x50))(ptrVar14[8],ptrVar15 + 4);\n            }\n            param9 = ptrVar14[7];\n            param7 = ptrVar14[8];\n          }\n        }\n      }\n      tempVar13 = (long)ptrVar18 - (long)charPtr;\n      tempVar10 = tempVar13;\n      ptrVar18 = charPtr;\n      if (tempVar13 < stackVar1) {\n        for (; stackVar1 = tempVar13, tempVar10 != 0; tempVar10 = tempVar10 - 1) {\n          *stackVar3 = *ptrVar18;\n          ptrVar18 = ptrVar18 + (ulong)byteVar * -2 + 1;\n          stackVar3 = stackVar3 + (ulong)byteVar * -2 + 1;\n        }\n      }\n      free(charPtr);\nLAB_001166f8:\n      free(stackVar2);\n      return stackVar1;\n    }\n    if (((stackVar5 | param8) == 0) || (stackVar4 == 0)) {\n      if (stackVar5 == 0) {\n        if (param8 != 0) goto LAB_0011671b;\n        goto LAB_001166f8;\n      }\n      if (param8 == 0) goto LAB_001166f8;\n    }\n    var7 = dcgettext(0,\"bad GNU build attribute notes: multiple different versions\",5);\n  }\n  else {\n    if (noteType == 0x10) {\n      tempVar11 = (**(code **)(unaffRegR14[1] + 0x28))(descriptionSize);\n      tempVar9 = (**(code **)(unaffRegR14[1] + 0x28))(unaffRegR12[4] + 8);\n      if (tempVar9 < tempVar11) {\n        tempVar11 = tempVar9;\n      }\nLAB_00116631:\n      if (unaffRegR12[2] == 0x100) {\n        if (tempVar11 == 0) {\n          tempVar11 = unaffRetAddr;\n        }\n        attributeName = *unaffRegR12;\n        unaffRegR12[7] = tempVar11;\n        tempVar13 = tempVar9;\n        unaffRetAddr = tempVar11;\n        if (tempVar9 == 0) goto LAB_001164af;\n      }\n      else {\n        if (tempVar11 == 0) {\n          tempVar11 = param9;\n        }\n        attributeName = *unaffRegR12;\n        unaffRegR12[7] = tempVar11;\n        tempVar10 = tempVar9;\n        param9 = tempVar11;\n        if (tempVar9 == 0) goto LAB_0011669e;\n      }\n      goto LAB_001164bb;\n    }\n    if (noteType < 0x11) {\n      if (noteType == 4) {\n        tempVar11 = (**(code **)(unaffRegR14[1] + 0x40))(descriptionSize);\n        tempVar9 = 0xffffffffffffffff;\n        goto LAB_00116631;\n      }\n      if (noteType == 8) {\n        tempVar10 = FUN_001086af();\n        return tempVar10;\n      }\n    }\n    var7 = dcgettext(0,\"corrupt GNU build attribute note: bad description size\",5);\n  }\nLAB_0010849a:\n  if (var7 != 0) {\n    bfd_set_error(0x11);\n    FUN_001126c0(0,unaffRegR14,stackVar6,var7);\n    DAT_00127a40 = 1;\n  }\n  goto LAB_001166f8;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_001086af"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116490",
            "calling": [
                "FUN_0010847a",
                "FUN_001086af"
            ],
            "imported": false,
            "current_name": "process_attributes_00116490"
        },
        "strncasecmp": {
            "renaming": {},
            "code": "\n\n\nint strncasecmp(char *__s1,char *__s2,size_t __n)\n\n{\n  int iVar1;\n  \n  iVar1 = strncasecmp(__s1,__s2,__n);\n  return iVar1;\n}\n\n",
            "called": [
                "strncasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001045d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncasecmp"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104690",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690",
                "FUN_00119f70"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00104a35": {
            "renaming": {
                "FUN_00104a35": "print_supported_targets_00104a35",
                "param_1": "target",
                "param_2": "outputFile",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "currentTargetValue"
            },
            "code": "\nvoid printSupportedTargets_00104a35(long target,FILE *outputFile)\n\n{\n  long currentTargetValue;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    currentTargetValue = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (currentTargetValue == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "fputc",
                "free",
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104a35",
            "calling": [
                "FUN_00108a2a",
                "FUN_00108916"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00104a35"
        },
        "FUN_0010be1a": {
            "renaming": {
                "FUN_0010be1a": "end_function_debug_0010be1a",
                "param_1": "functionInfo",
                "param_2": "newBlockAddr",
                "param_3": "unusedParam",
                "param_4": "result",
                "lVar1": "currentBlockInfo",
                "uVar2": "errorMsg",
                "pcVar3": "errorMessage",
                "auVar4": "returnVal"
            },
            "code": "\n\n\nundefined  [16] endFunction_debug_0010be1a(long functionInfo,undefined8 newBlockAddr,undefined8 unusedParam,undefined8 result)\n\n{\n  long currentBlockInfo;\n  undefined8 errorMsg;\n  char *errorMessage;\n  undefined returnVal [16];\n  \n  if (((*(long *)(functionInfo + 8) == 0) || (currentBlockInfo = *(long *)(functionInfo + 0x20), currentBlockInfo == 0)) ||\n     (*(long *)(functionInfo + 0x18) == 0)) {\n    errorMessage = \"debug_end_function: no current function\";\n  }\n  else {\n    if (*(long *)(currentBlockInfo + 8) == 0) {\n      *(undefined8 *)(currentBlockInfo + 0x20) = newBlockAddr;\n      errorMsg = CONCAT71((int7)((ulong)currentBlockInfo >> 8),1);\n      *(undefined (*) [16])(functionInfo + 0x18) = ZEXT816(0);\n      goto LAB_0010be86;\n    }\n    errorMessage = \"debug_end_function: some blocks were not closed\";\n  }\n  errorMsg = dcgettext(0,errorMessage,5);\n  fprintf(_stderr,\"%s\\n\",errorMsg);\n  errorMsg = 0;\nLAB_0010be86:\n  returnVal._8_8_ = result;\n  returnVal._0_8_ = errorMsg;\n  return returnVal;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010be1a",
            "calling": [
                "FUN_0010c892",
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "end_function_debug_0010be1a"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001041f0",
            "calling": [
                "FUN_00104ea2",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104510",
            "calling": [
                "FUN_0010ee3f",
                "FUN_00116b90",
                "FUN_00104943",
                "FUN_0010d559",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104350",
            "calling": [
                "FUN_00104a35"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "cplus_demangle_init_info": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_init_info(void)\n\n{\n  cplus_demangle_init_info();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_init_info"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104550",
            "calling": [
                "FUN_0010ee3f"
            ],
            "imported": false,
            "current_name": "cplus_demangle_init_info"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047b0",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104760",
            "calling": [
                "FUN_00116b90",
                "FUN_00115dc0",
                "FUN_001083b7",
                "FUN_00116030",
                "FUN_00119dd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00113da9": {
            "renaming": {
                "FUN_00113da9": "initialize_data_structure_00113da9",
                "param_1": "inputByte",
                "param_2": "param2",
                "param_3": "dataValue",
                "param_4": "auxiliaryData",
                "puVar1": "ptrToDataStructure",
                "lVar2": "loopCounter",
                "puVar3": "ptrToData",
                "bVar4": "zero",
                "auVar5": "returnData"
            },
            "code": "\nundefined  [16] initializeDataStructure_00113da9(byte inputByte,undefined8 param2,undefined8 dataValue,undefined8 auxiliaryData)\n\n{\n  undefined8 *ptrToDataStructure;\n  long loopCounter;\n  undefined8 *ptrToData;\n  byte zero;\n  undefined returnData [16];\n  \n  zero = 0;\n  returnData._0_8_ = FUN_00112904(8 - (uint)inputByte);\n  if (returnData._0_8_ != 0) {\n    ptrToDataStructure = (undefined8 *)xmalloc(0x28);\n    ptrToData = ptrToDataStructure + 1;\n    for (loopCounter = 8; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined4 *)ptrToData = 0;\n      ptrToData = (undefined8 *)((long)ptrToData + (ulong)zero * -8 + 4);\n    }\n    *ptrToDataStructure = dataValue;\n    *(undefined8 **)(returnData._0_8_ + 0x10) = ptrToDataStructure;\n  }\n  returnData._8_8_ = auxiliaryData;\n  return returnData;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113da9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010e07c",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_data_structure_00113da9"
        },
        "FUN_0011a250": {
            "renaming": {
                "FUN_0011a250": "compare_records_0011a250",
                "param_1": "record1",
                "param_2": "record2",
                "uVar1": "record1_field2",
                "param_2[2]": "record2_field2",
                "param_2[7]": "record2_field7",
                "param_1[7]": "record1_field7",
                "param_2[8]": "record2_field8",
                "param_1[8]": "record1_field8",
                "param_1[3]": "record1_field3",
                "param_2[3]": "record2_field3"
            },
            "code": "\nint compareRecords_0011a250(ulong *record1,ulong *record2)\n\n{\n  ulong record1_field2;\n  \n  record1_field2 = record1[2];\n  if (record1_field2 == record2_field2) {\n    if (record2_field7 <= record1_field7) {\n      if (record1_field7 <= record2_field7) {\n        if (record2_field8 < record1_field8) {\n          return -1;\n        }\n        if (record2_field8 <= record1_field8) {\n          if ((4 < *record1) && (4 < *record2)) {\n            if (*(char *)(record1_field3 + 3) != *(char *)(record2_field3 + 3)) {\n              return (int)*(char *)(record1_field3 + 3) - (int)*(char *)(record2_field3 + 3);\n            }\n          }\n          return 0;\n        }\n      }\n      return 1;\n    }\n  }\n  else if ((record1_field2 == 0) || ((record1_field2 != 0x100 && (record2_field2 != 0)))) {\n    return 1;\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001087fd"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a250",
            "calling": [
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "compare_records_0011a250"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104280",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_0010a69a": {
            "renaming": {
                "FUN_0010a69a": "convert_and_store_data_0010a69a",
                "param_1": "dataAddress",
                "param_2": "dataPointer",
                "param_3": "flag",
                "param_4": "charFlag",
                "param_5": "value",
                "uVar1": "result",
                "lVar2": "convertedData",
                "sVar3": "length",
                "uVar4": "allocatedMemory",
                "uVar5": "isConverted",
                "local_60": "convertedString"
            },
            "code": "\nundefined4 convertAndStoreData_0010a69a(long dataAddress,undefined8 dataPointer,int flag,char charFlag,uint value)\n\n{\n  undefined4 result;\n  long convertedData;\n  size_t length;\n  undefined8 allocatedMemory;\n  undefined isConverted;\n  char convertedString [48];\n  \n  if (flag == 0) {\n    convertedString[0] = '\\0';\n    isConverted = 0;\n    convertedData = 0;\n  }\n  else {\n    convertedData = FUN_00109c2e();\n    if (convertedData < 0) {\n      return 0;\n    }\n    isConverted = 1;\n    sprintf(convertedString,\"%ld=\",convertedData);\n  }\n  length = strlen(convertedString);\n  sprintf(convertedString + length,\"%c%u\",(ulong)((-(uint)(charFlag == '\\0') & 2) + 0x73),(ulong)value);\n  result = FUN_00109b52(dataAddress,convertedString,convertedData,isConverted,value);\n  if ((char)result == '\\0') {\n    return 0;\n  }\n  convertedData = *(long *)(dataAddress + 0x60);\n  allocatedMemory = xmalloc(1);\n  *(undefined8 *)(convertedData + 0x20) = allocatedMemory;\n  **(undefined **)(*(long *)(dataAddress + 0x60) + 0x20) = 0;\n  return result;\n}\n\n",
            "called": [
                "FUN_00109c2e",
                "xmalloc",
                "FUN_00109b52",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a69a",
            "calling": [
                "FUN_0010a83e",
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "convert_and_store_data_0010a69a"
        },
        "FUN_00115b70": {
            "renaming": {
                "FUN_00115b70": "check_section_conflicts_00115b70",
                "param_1": "section_names",
                "pcVar1": "current_section",
                "iVar2": "comparison_result",
                "iVar3": "section_type",
                "lVar4": "section_name_length",
                "lVar5": "section_name_length2",
                "uVar6": "result",
                "plVar7": "section_list"
            },
            "code": "\nundefined8 check_section_conflicts_00115b70(char **section_names)\n\n{\n  char *current_section;\n  int comparison_result;\n  int section_type;\n  long section_name_length;\n  long section_name_length2;\n  undefined8 result;\n  long *section_list;\n  \n  section_name_length = FUN_00114190(*section_names,0,4);\n  if (section_name_length == 0) {\n    if ((DAT_001278d8 != '\\0') || (DAT_00127a39 != '\\0')) {\n      section_name_length = FUN_00114190(*section_names,0,1);\n      section_name_length2 = FUN_00114190(*section_names,0,2);\n      if (section_name_length != 0) {\n        if (section_name_length2 != 0) {\n          current_section = *section_names;\n          result = dcgettext(0,\"error: section %s matches both remove and copy options\",5);\n                    \n          FUN_00119dd0(result,current_section);\n        }\n        if (section_name_length != 0) {\n          if (DAT_001279d8 == (long *)0x0) {\n            return 1;\n          }\n          current_section = *section_names;\n          section_list = DAT_001279d8;\n          do {\n            section_type = strcmp(current_section,(char *)section_list[1]);\n            if (section_type == 0) {\n              result = dcgettext(0,\"error: section %s matches both update and remove options\",5);\n                    \n              FUN_00119dd0(result,current_section);\n            }\n            section_list = (long *)*section_list;\n          } while (section_list != (long *)0x0);\n          return 1;\n        }\n      }\n      if ((DAT_00127a39 != '\\0') && (section_name_length2 == 0)) {\n        return 1;\n      }\n    }\n    section_type = DAT_00127a48;\n    if ((*(byte *)((long)section_names + 0x25) & 0x20) != 0) {\n      if ((((DAT_00127a48 - 2U < 2) || (DAT_00127a48 == 7)) || (DAT_00127a44 == 2)) ||\n         (DAT_001279a0 != '\\0')) {\n        current_section = *section_names;\n        comparison_result = strcmp(current_section,\".gnu_debugaltlink\");\n        if ((comparison_result != 0) && (comparison_result = strcmp(current_section,\".gnu_debuglink\"), comparison_result != 0)) {\n          section_type = strcmp(current_section,\".reloc\");\n          if (section_type != 0) {\n            return 1;\n          }\n          result = FUN_0010829e();\n          return result;\n        }\n      }\n      if (section_type == 5) {\n        result = FUN_00113ede(section_names);\n        return result;\n      }\n      if (section_type == 4) {\n        return 0;\n      }\n    }\n    if (section_type == 6) {\n      result = FUN_001082b3();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00114190",
                "dcgettext",
                "FUN_0010827b",
                "FUN_0010829e",
                "strcmp",
                "FUN_00119dd0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115b70",
            "calling": [
                "FUN_001159d0"
            ],
            "imported": false,
            "current_name": "check_section_conflicts_00115b70"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042c0",
            "calling": [
                "FUN_00114cf0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104840",
            "calling": [
                "FUN_001163d0",
                "FUN_00115dc0",
                "FUN_00116030"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_00116030": {
            "renaming": {
                "FUN_00116030": "process_relocations_00116030",
                "param_1": "binary_file",
                "param_2": "reloc_offset",
                "plVar1": "reloc_pointer",
                "lVar2": "reloc_value",
                "lVar3": "relocated_value1",
                "lVar4": "relocated_value2",
                "iVar5": "error_code",
                "in_RAX": "return_value",
                "lVar6": "fwrite_func",
                "lVar7": "num_relocs",
                "__ptr": "relocs_data",
                "lVar8": "relocs_counter",
                "uStack_28": "null_return"
            },
            "code": "\n\n\nundefined8 process_relocations_00116030(undefined8 *binary_file,long reloc_offset)\n\n{\n  long *reloc_pointer;\n  long reloc_value;\n  long relocated_value1;\n  long relocated_value2;\n  int error_code;\n  undefined8 return_value;\n  long fwrite_func;\n  void *relocs_data;\n  long num_relocs;\n  undefined8 extraout_RAX;\n  long relocs_counter;\n  undefined8 null_return;\n  \n  if (*(long *)(reloc_offset + 0x60) == 0) {\n    return return_value;\n  }\n  fwrite_func = bfd_get_reloc_upper_bound();\n  if (fwrite_func < 0) {\n    if ((fwrite_func != -1) || (error_code = bfd_get_error(), error_code != 5)) {\n      FUN_0011a110(*binary_file);\n                    \n      xexit(1);\n    }\n  }\n  else if (fwrite_func != 0) {\n    relocs_data = (void *)xmalloc();\n    num_relocs = bfd_canonicalize_reloc(binary_file,reloc_offset,relocs_data);\n    relocated_value2 = _DAT_00128680;\n    relocated_value1 = _DAT_00128568;\n    fwrite_func = _fwrite;\n    if (num_relocs < 0) {\n      FUN_0011a110(*binary_file);\n                    \n      xexit(1);\n    }\n    if (num_relocs != 0) {\n      relocs_counter = 0;\n      do {\n        reloc_pointer = **(long ***)((long)relocs_data + relocs_counter * 8);\n        if ((((reloc_pointer != (long *)0x0) && (reloc_value = *reloc_pointer, reloc_value != 0)) && (reloc_value != fwrite_func)) &&\n           ((reloc_value != relocated_value2 && (reloc_value != relocated_value1)))) {\n          *(uint *)(reloc_value + 0x18) = *(uint *)(reloc_value + 0x18) | 0x20;\n        }\n        relocs_counter = relocs_counter + 1;\n      } while (num_relocs != relocs_counter);\n    }\n    free(relocs_data);\n    return extraout_RAX;\n  }\n  return null_return;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0011a110",
                "FUN_001083b7",
                "free",
                "fwrite",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116030",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_relocations_00116030"
        },
        "FUN_00113ede": {
            "renaming": {
                "FUN_00113ede": "extract_substring_if_longer_than_four_00113ede",
                "param_1": "input_string",
                "__s": "string",
                "sVar1": "string_length",
                "uVar2": "result"
            },
            "code": "\nundefined8 extract_substring_if_longer_than_four_00113ede(char **input_string)\n\n{\n  char *string;\n  size_t string_length;\n  undefined8 result;\n  \n  if (input_string == (char **)0x0) {\n    return 0;\n  }\n  string = *input_string;\n  if (string != (char *)0x0) {\n    string_length = strlen(string);\n    if (4 < (int)string_length) {\n      result = FUN_00113fb0(string + (long)(int)string_length + -4,&DAT_0012142b);\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00113fb0",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ede",
            "calling": [
                "FUN_001082b3",
                "FUN_0010829e"
            ],
            "imported": false,
            "current_name": "extract_substring_if_longer_than_four_00113ede"
        },
        "bfd_convert_section_contents": {
            "renaming": {},
            "code": "\nvoid bfd_convert_section_contents(void)\n\n{\n  bfd_convert_section_contents();\n  return;\n}\n\n",
            "called": [
                "bfd_convert_section_contents"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001042f0",
            "calling": [
                "FUN_00116110"
            ],
            "imported": false,
            "current_name": "bfd_convert_section_contents"
        },
        "FUN_0010875d": {
            "renaming": {
                "FUN_0010875d": "compare_records_0010875d",
                "param_1": "record1",
                "param_2": "record2",
                "lVar1": "record1_ptr",
                "lVar2": "record2_ptr",
                "iVar3": "result",
                "uVar4": "flag"
            },
            "code": "\nint compare_records_0010875d(long *record1,long *record2)\n\n{\n  long record1_ptr;\n  long record2_ptr;\n  int result;\n  uint flag;\n  \n  record1_ptr = *record1;\n  record2_ptr = *record2;\n  flag = *(uint *)(record2_ptr + 0x24) & 0x102;\n  if ((*(uint *)(record1_ptr + 0x24) & 0x102) == 0x102) {\n    if (flag != 0x102) {\n      return 1;\n    }\n  }\n  else if (flag == 0x102) {\n    return -1;\n  }\n  result = 1;\n  if (*(ulong *)(record1_ptr + 0x38) <= *(ulong *)(record2_ptr + 0x38)) {\n    result = -1;\n    if (*(ulong *)(record2_ptr + 0x38) <= *(ulong *)(record1_ptr + 0x38)) {\n      if (*(ulong *)(record2_ptr + 0x40) < *(ulong *)(record1_ptr + 0x40)) {\n        result = 1;\n      }\n      else {\n        result = -1;\n        if (*(ulong *)(record2_ptr + 0x40) <= *(ulong *)(record1_ptr + 0x40)) {\n          result = 1;\n          if (*(uint *)(record1_ptr + 0x18) <= *(uint *)(record2_ptr + 0x18)) {\n            return -(uint)(*(uint *)(record1_ptr + 0x18) < *(uint *)(record2_ptr + 0x18));\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010875d",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "compare_records_0010875d"
        },
        "cplus_demangle": {
            "renaming": {},
            "code": "\nvoid cplus_demangle(void)\n\n{\n  cplus_demangle();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046b0",
            "calling": [
                "FUN_0010d21c"
            ],
            "imported": false,
            "current_name": "cplus_demangle"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00116b00();\n  return;\n}\n\n",
            "called": [
                "FUN_00116b00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00116b80",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "FUN_0010c892": {
            "renaming": {
                "FUN_0010c892": "process_data_0010c892",
                "param_1": "arg1",
                "param_2": "arg2",
                "cVar1": "charVar",
                "lVar2": "longVar1",
                "lVar3": "longVar2",
                "uVar4": "result",
                "puVar5": "pointerVar",
                "iVar6": "intVar"
            },
            "code": "\n\n\nundefined8 processData_0010c892(undefined8 arg1,long arg2)\n\n{\n  char charVar;\n  long longVar1;\n  long longVar2;\n  undefined8 result;\n  undefined8 *pointerVar;\n  int intVar;\n  \n  if (*(char *)(arg2 + 0x60) == '\\0') {\nLAB_0010c8c7:\n    for (pointerVar = *(undefined8 **)(arg2 + 0x1a0); pointerVar != (undefined8 *)0x0;\n        pointerVar = (undefined8 *)*pointerVar) {\n      intVar = *(int *)(pointerVar + 2);\n      longVar2 = pointerVar[1];\n      if (intVar != 0) {\n        if (longVar2 != 0) {\n          if (intVar - 7U < 5) goto LAB_0010c8d5;\n          result = dcgettext(0,\"debug_make_undefined_type: unsupported kind\",5);\n          fprintf(_stderr,\"%s\\n\",result);\n        }\nLAB_0010c910:\n        pointerVar[3] = 0;\n        goto LAB_0010c916;\n      }\n      if (longVar2 == 0) goto LAB_0010c910;\n      intVar = 7;\nLAB_0010c8d5:\n      longVar1 = FUN_00112904(intVar,0);\n      if (longVar1 == 0) goto LAB_0010c910;\n      longVar2 = FUN_0010c6be(arg1,longVar2,longVar1);\n      pointerVar[3] = longVar2;\n      if (longVar2 == 0) goto LAB_0010c916;\n    }\n    result = 1;\n  }\n  else {\n    charVar = FUN_0010c1c6();\n    if (charVar != '\\0') {\n      charVar = FUN_0010be1a(arg1,*(undefined8 *)(arg2 + 0x68));\n      if (charVar != '\\0') {\n        *(undefined *)(arg2 + 0x60) = 0;\n        *(undefined8 *)(arg2 + 0x68) = 0xffffffffffffffff;\n        goto LAB_0010c8c7;\n      }\n    }\nLAB_0010c916:\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "FUN_00112904",
                "FUN_0010be1a",
                "FUN_0010c1c6",
                "FUN_0010c6be"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c892",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "process_data_0010c892"
        },
        "FUN_00112904": {
            "renaming": {
                "FUN_00112904": "initialize_memory_block_00112904",
                "param_1": "sourceAddress",
                "param_2": "destinationAddress",
                "puVar1": "memoryBlockPointer"
            },
            "code": "\nvoid initializeMemoryBlock_00112904(undefined4 sourceAddress,undefined4 destinationAddress)\n\n{\n  undefined4 *memoryBlockPointer;\n  \n  memoryBlockPointer = (undefined4 *)xmalloc(0x18);\n  *memoryBlockPointer = sourceAddress;\n  memoryBlockPointer[1] = destinationAddress;\n  *(undefined (*) [16])(memoryBlockPointer + 2) = ZEXT816(0);\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112904",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c218",
                "FUN_0010c6be",
                "FUN_00113dfe",
                "FUN_00113b71",
                "FUN_00113e17",
                "FUN_00113bfa",
                "FUN_00113c43",
                "FUN_00113e23",
                "FUN_0010c892",
                "FUN_00113df2",
                "FUN_0010c2d2",
                "FUN_00113b4a",
                "FUN_00113da9",
                "FUN_00113d6e",
                "FUN_00113ce0",
                "FUN_00113b98",
                "FUN_00113cb9",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_00113d3a"
            ],
            "imported": false,
            "current_name": "initialize_memory_block_00112904"
        },
        "FUN_00108898": {
            "renaming": {
                "FUN_00108898": "compare_strings_00108898",
                "param_1": "string1",
                "param_2": "string2",
                "iVar1": "comparisonResult",
                "in_RAX": "undefinedRetVal",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] compareStrings_00108898(char **string1,char **string2)\n\n{\n  int comparisonResult;\n  undefined8 undefinedRetVal;\n  undefined result [16];\n  \n  comparisonResult = strcmp(*string1,*string2);\n  result._1_7_ = 0;\n  result[0] = comparisonResult == 0;\n  result._8_8_ = undefinedRetVal;\n  return result;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108898",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "compare_strings_00108898"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040b0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104966",
                "FUN_00104ea2",
                "FUN_00109a32",
                "FUN_0010882c",
                "FUN_00108237",
                "FUN_00115a90",
                "FUN_00108200",
                "FUN_0010543c",
                "FUN_00107880",
                "FUN_00114460",
                "FUN_001199d0",
                "FUN_00114690"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "strcasecmp": {
            "renaming": {},
            "code": "\n\n\nint strcasecmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcasecmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcasecmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104080",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "strcasecmp"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104470",
            "calling": [
                "FUN_00114190",
                "FUN_00115f50",
                "FUN_00116b90",
                "FUN_0010ee3f",
                "FUN_0010c7a0",
                "FUN_00115530",
                "FUN_0010c6be",
                "FUN_0011173a",
                "FUN_00108c86",
                "FUN_0010d559",
                "FUN_00115b70",
                "FUN_00108898",
                "FUN_0010914e",
                "FUN_00104943",
                "FUN_0010554f",
                "FUN_0010b0fa",
                "FUN_0010afd5",
                "FUN_0010922b"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_0011a390": {
            "renaming": {
                "FUN_0011a390": "execute_function_chain_0011a390",
                "lVar1": "index",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionChain",
                "uVar5": "loopCounter"
            },
            "code": "\nvoid executeFunctionChain_0011a390(void)\n\n{\n  long index;\n  long previousIndex;\n  long tempIndex;\n  long *functionChain;\n  uint loopCounter;\n  \n  functionChain = (long *)PTR_DAT_001264e0;\n  if (PTR_DAT_001264e0 != (undefined *)0x0) {\n    do {\n      loopCounter = *(int *)(functionChain + 1) - 1;\n      if (-1 < (int)loopCounter) {\n        index = (long)(int)loopCounter;\n        loopCounter = loopCounter & 7;\n        (*(code *)functionChain[index + 2])();\n        previousIndex = index + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (loopCounter != 0) {\n            if (loopCounter != 1) {\n              if (loopCounter != 2) {\n                if (loopCounter != 3) {\n                  if (loopCounter != 4) {\n                    if (loopCounter != 5) {\n                      if (loopCounter != 6) {\n                        (*(code *)functionChain[index + 1])();\n                        previousIndex = index + -2;\n                      }\n                      (*(code *)functionChain[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionChain[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionChain[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionChain[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionChain[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionChain[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_0011a466;\n          }\n          do {\n            (*(code *)functionChain[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionChain[tempIndex + 1])();\n            (*(code *)functionChain[tempIndex])();\n            (*(code *)functionChain[index])();\n            (*(code *)functionChain[tempIndex + -2])();\n            (*(code *)functionChain[tempIndex + -3])();\n            (*(code *)functionChain[tempIndex + -4])();\n            (*(code *)functionChain[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_0011a466:\n      functionChain = (long *)*functionChain;\n    } while (functionChain != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a390",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "execute_function_chain_0011a390"
        },
        "FUN_0010e842": {
            "renaming": {
                "FUN_0010e842": "format_and_send_data_0010e842",
                "param_1": "inputData",
                "param_2": "stringValue",
                "param_3": "intValue",
                "param_4": "outputData",
                "__s": "formattedData",
                "sVar1": "stringLength",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] formatAndSendData_0010e842(undefined8 inputData,char *stringValue,undefined8 intValue,undefined8 outputData)\n\n{\n  size_t stringLength;\n  char *formattedData;\n  undefined result [16];\n  \n  stringLength = strlen(stringValue);\n  formattedData = (char *)xmalloc(stringLength + 0x14);\n  sprintf(formattedData,\"%s:c=i%ld\",stringValue,intValue);\n  result._0_4_ = FUN_0010e2f0(inputData,0x80,0,0,formattedData);\n  result._4_4_ = 0;\n  if ((char)result._0_4_ != '\\0') {\n    free(formattedData);\n  }\n  result._8_8_ = outputData;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010e842",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "format_and_send_data_0010e842"
        },
        "strtod": {
            "renaming": {},
            "code": "\n\n\ndouble strtod(char *__nptr,char **__endptr)\n\n{\n  double dVar1;\n  \n  dVar1 = strtod(__nptr,__endptr);\n  return dVar1;\n}\n\n",
            "called": [
                "strtod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104170",
            "calling": [
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "strtod"
        },
        "htab_elements": {
            "renaming": {},
            "code": "\nvoid htab_elements(void)\n\n{\n  htab_elements();\n  return;\n}\n\n",
            "called": [
                "htab_elements"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001044e0",
            "calling": [
                "FUN_00116b90",
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "htab_elements"
        },
        "FUN_00113cb9": {
            "renaming": {
                "FUN_00113cb9": "initialize_ptr_00113cb9",
                "param_1": "input_value",
                "lVar1": "allocated_memory_ptr"
            },
            "code": "\nlong initialize_ptr_00113cb9(long input_value)\n\n{\n  long allocated_memory_ptr;\n  \n  if (input_value != 0) {\n    allocated_memory_ptr = FUN_00112904(0xe,0);\n    if (allocated_memory_ptr == 0) {\n      allocated_memory_ptr = 0;\n    }\n    else {\n      *(long *)(allocated_memory_ptr + 0x10) = input_value;\n    }\n    return allocated_memory_ptr;\n  }\n  return 0;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113cb9",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "initialize_ptr_00113cb9"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001046f0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010eafe": {
            "renaming": {
                "FUN_0010eafe": "generate_formatted_string_0010eafe",
                "param_1": "paramAddress",
                "param_2": "inputString",
                "param_3": "inputCharacter",
                "__s": "substring",
                "sVar2": "inputLength",
                "sVar3": "substringLength",
                "__s_00": "formattedString"
            },
            "code": "\nundefined4 generateFormattedString_0010eafe(long paramAddress,char *inputString,char inputCharacter)\n\n{\n  undefined4 uVar1;\n  char *substring;\n  size_t inputLength;\n  size_t substringLength;\n  char *formattedString;\n  \n  if ((*(int *)(paramAddress + 0x1f8) == 0) && (*(long *)(paramAddress + 0x1e8) == -1)) {\n    substring = (char *)FUN_00109b2f();\n    inputLength = strlen(inputString);\n    substringLength = strlen(substring);\n    formattedString = (char *)xmalloc(inputLength + 3 + substringLength);\n    sprintf(formattedString,\"%s:%c%s\",inputString,(ulong)((-(uint)(inputCharacter == '\\0') & 0x20) + 0x46),substring);\n    *(undefined8 *)(paramAddress + 0x1e8) = *(undefined8 *)(paramAddress + 0x10);\n    uVar1 = FUN_0010e2f0(paramAddress,0x24,0,0,formattedString);\n    if ((char)uVar1 != '\\0') {\n      free(formattedString);\n      return uVar1;\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "xmalloc",
                "free",
                "FUN_0010e2f0",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010eafe",
            "calling": [
                "FUN_001135a5"
            ],
            "imported": false,
            "current_name": "generate_formatted_string_0010eafe"
        },
        "FUN_00113df2": {
            "renaming": {
                "FUN_00113df2": "initialize_communication_00113df2",
                "param_1": "communicationParam"
            },
            "code": "\nvoid initializeCommunication_00113df2(undefined4 communicationParam)\n\n{\n  FUN_00112904(4,communicationParam);\n  return;\n}\n\n",
            "called": [
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113df2",
            "calling": [
                "FUN_0010c2d2",
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "initialize_communication_00113df2"
        },
        "FUN_0010a377": {
            "renaming": {
                "FUN_0010a377": "decode_and_send_data_0010a377",
                "param_1": "data_ptr",
                "cVar1": "flag",
                "__s": "string_1",
                "__s_00": "string_2",
                "sVar3": "length_1",
                "sVar4": "length_2",
                "__s_01": "combined_string",
                "uVar2": "result",
                "uVar5": "use_flag"
            },
            "code": "\nundefined4 decode_and_send_data_0010a377(long data_ptr)\n\n{\n  char flag;\n  undefined4 result;\n  char *string_1;\n  char *string_2;\n  size_t length_1;\n  size_t length_2;\n  char *combined_string;\n  undefined use_flag;\n  \n  use_flag = 1;\n  flag = *(char *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  string_1 = (char *)FUN_00109b2f();\n  if (flag == '\\0') {\n    use_flag = *(undefined *)(*(long *)(data_ptr + 0x60) + 0x1c);\n  }\n  string_2 = (char *)FUN_00109b2f(data_ptr);\n  length_1 = strlen(string_1);\n  length_2 = strlen(string_2);\n  combined_string = (char *)xmalloc(length_1 + 3 + length_2);\n  sprintf(combined_string,\"@%s,%s\",string_2,string_1);\n  free(string_2);\n  free(string_1);\n  result = FUN_00109b52(data_ptr,combined_string,0,use_flag,0);\n  if ((char)result != '\\0') {\n    free(combined_string);\n  }\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00109b52",
                "free",
                "sprintf",
                "FUN_00109b2f",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010a377",
            "calling": [
                "FUN_00112c1f"
            ],
            "imported": false,
            "current_name": "decode_and_send_data_0010a377"
        },
        "FUN_0010d882": {
            "renaming": {
                "FUN_0010d882": "parse_input_0010d882",
                "param_3": "out_param",
                "param_4": "flag_ptr",
                "iVar1": "counter",
                "pcVar2": "input_str",
                "cVar3": "current_char",
                "lVar4": "allocated_memory",
                "pcVar5": "current_ptr",
                "uVar6": "index",
                "bVar7": "not_zero",
                "local_50": "variable1",
                "local_4c": "variable2",
                "local_48": "variable3",
                "local_44": "variable4",
                "local_40": "array1"
            },
            "code": "\nundefined8 parse_input_0010d882(long param_1,char **param_2,long *out_param,undefined *flag_ptr)\n\n{\n  int counter;\n  char *input_str;\n  char current_char;\n  long allocated_memory;\n  char *current_ptr;\n  ulong index;\n  bool not_zero;\n  uint variable1;\n  undefined4 variable2;\n  uint variable3;\n  int variable4;\n  undefined8 array1 [2];\n  \n  input_str = *param_2;\n  variable2 = 10;\n  if (out_param != (long *)0x0) {\n    allocated_memory = xmalloc();\n    *out_param = allocated_memory;\n    *flag_ptr = 0;\n  }\n  variable1 = 0;\n  while( true ) {\n    current_ptr = *param_2;\n    current_char = *current_ptr;\n    if ((current_char == '_' || current_char == '\\0') || (current_char == 'e')) break;\n    if ((current_char == 'N') || (current_char == 'T')) {\n      *param_2 = current_ptr + 1;\n      if (current_char == 'T') {\n        variable4 = 1;\n      }\n      else {\n        current_char = FUN_00108ea1(param_2,&variable4);\n        if (current_char == '\\0') goto LAB_0010d958;\n      }\n      current_char = FUN_00108ea1(param_2,&variable3);\n      if ((current_char == '\\0') || (*(uint *)(param_1 + 0x28) <= variable3)) {\nLAB_0010d958:\n        FUN_0010911f(input_str);\n        return 0;\n      }\n      index = (ulong)variable3;\n      while (counter = variable4 + -1, not_zero = variable4 != 0, variable4 = counter, not_zero) {\n        array1[0] = *(undefined8 *)(*(long *)(param_1 + 0x20) + index * 0x10);\n        current_char = FUN_0010d7d4(param_1,array1,out_param,&variable1,&variable2);\n        if (current_char == '\\0') {\n          return 0;\n        }\n      }\n    }\n    else {\n      current_char = FUN_0010d7d4(param_1,param_2,out_param,&variable1,&variable2);\n      if (current_char == '\\0') {\n        return 0;\n      }\n    }\n  }\n  if (out_param == (long *)0x0) {\n    if (current_char != 'e') goto LAB_0010d9fa;\n  }\n  else {\n    *(undefined8 *)(*out_param + (ulong)variable1 * 8) = 0;\n    if (*current_ptr != 'e') goto LAB_0010d9fa;\n    *flag_ptr = 1;\n  }\n  current_ptr = current_ptr + 1;\n  *param_2 = current_ptr;\nLAB_0010d9fa:\n  return CONCAT71((int7)((ulong)current_ptr >> 8),1);\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_0010911f",
                "FUN_00108ea1",
                "FUN_0010d7d4"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010d882",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010c95e"
            ],
            "imported": false,
            "current_name": "parse_input_0010d882"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104790",
            "calling": [
                "FUN_00116b90",
                "FUN_00109a32"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "FUN_00112925": {
            "renaming": {
                "FUN_00112925": "initialize_memory_00112925",
                "param_1": "memoryArray",
                "param_2": "value",
                "param_3": "param3",
                "param_4": "param4",
                "puVar1": "allocatedMemory",
                "pauVar2": "existingMemory",
                "lVar3": "loopCounter",
                "puVar4": "currentMemory",
                "bVar5": "byteValue"
            },
            "code": "\nundefined4 *\ninitializeMemory_00112925(undefined (**memoryArray) [16],undefined8 value,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 *allocatedMemory;\n  undefined (*existingMemory) [16];\n  long loopCounter;\n  undefined4 *currentMemory;\n  byte byteValue;\n  \n  byteValue = 0;\n  allocatedMemory = (undefined4 *)xmalloc(0x28);\n  currentMemory = allocatedMemory;\n  for (loopCounter = 10; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *currentMemory = 0;\n    currentMemory = currentMemory + (ulong)byteValue * -2 + 1;\n  }\n  existingMemory = *memoryArray;\n  *(undefined8 *)(allocatedMemory + 2) = value;\n  allocatedMemory[5] = param3;\n  allocatedMemory[6] = param4;\n  if (existingMemory == (undefined (*) [16])0x0) {\n    existingMemory = (undefined (*) [16])xmalloc(0x10);\n    *existingMemory = ZEXT816(0);\n    *memoryArray = existingMemory;\n    *(undefined (**) [16])(*existingMemory + 8) = existingMemory;\n  }\n  **(undefined8 **)(*existingMemory + 8) = allocatedMemory;\n  *(undefined4 **)(*existingMemory + 8) = allocatedMemory;\n  return allocatedMemory;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00112925",
            "calling": [
                "FUN_0010c05d",
                "FUN_0010c218",
                "FUN_0010bc80",
                "FUN_0010c6be",
                "FUN_00112996"
            ],
            "imported": false,
            "current_name": "initialize_memory_00112925"
        },
        "FUN_0010bf86": {
            "renaming": {
                "FUN_0010bf86": "update_debug_record_line_0010bf86",
                "param_1": "recordManager",
                "param_2": "lineNumber",
                "param_3": "unit",
                "uVar1": "errorMessage",
                "puVar2": "currentUnitPointer",
                "uVar3": "index",
                "puVar4": "newDebugRecord",
                "lVar5": "loopCounter",
                "puVar6": "currentDebugRecord",
                "bVar7": "isFirstTime",
                "_stderr": "fileStream"
            },
            "code": "\n\n\nundefined8 updateDebugRecordLine_0010bf86(long recordManager,undefined8 lineNumber,undefined8 unit)\n\n{\n  undefined8 errorMessage;\n  undefined8 *currentUnitPointer;\n  ulong index;\n  undefined4 *newDebugRecord;\n  long loopCounter;\n  undefined4 *currentDebugRecord;\n  byte isFirstTime;\n  \n  isFirstTime = 0;\n  if (*(long *)(recordManager + 8) == 0) {\n    errorMessage = dcgettext(0,\"debug_record_line: no current unit\",5);\n    fprintf(fileStream,\"%s\\n\",errorMessage);\n    errorMessage = 0;\n  }\n  else {\n    loopCounter = *(long *)(recordManager + 0x28);\n    if ((loopCounter != 0) && (*(long *)(loopCounter + 8) == *(long *)(recordManager + 0x10))) {\n      index = 0;\n      do {\n        if (*(long *)(loopCounter + 0x10 + index * 8) == -1) {\n          currentUnitPointer = (undefined8 *)(index & 0xffffffff);\n          *(undefined8 *)(loopCounter + 0x10 + (long)currentUnitPointer * 8) = lineNumber;\n          *(undefined8 *)(loopCounter + 0x60 + (long)currentUnitPointer * 8) = unit;\n          goto LAB_0010c056;\n        }\n        index = index + 1;\n      } while (index != 10);\n    }\n    newDebugRecord = (undefined4 *)xmalloc(0xb0);\n    currentDebugRecord = newDebugRecord;\n    for (loopCounter = 0x2c; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *currentDebugRecord = 0;\n      currentDebugRecord = currentDebugRecord + (ulong)isFirstTime * -2 + 1;\n    }\n    errorMessage = *(undefined8 *)(recordManager + 0x10);\n    *(undefined8 *)(newDebugRecord + 4) = lineNumber;\n    *(undefined8 *)(newDebugRecord + 2) = errorMessage;\n    *(undefined8 *)(newDebugRecord + 0x18) = unit;\n    currentDebugRecord = newDebugRecord + 6;\n    for (loopCounter = 0x48; loopCounter != 0; loopCounter = loopCounter + -1) {\n      *(undefined *)currentDebugRecord = 0xff;\n      currentDebugRecord = (undefined4 *)((long)currentDebugRecord + (ulong)isFirstTime * -2 + 1);\n    }\n    currentUnitPointer = *(undefined8 **)(recordManager + 0x28);\n    if (currentUnitPointer == (undefined8 *)0x0) {\n      currentUnitPointer = *(undefined8 **)(recordManager + 8);\n      currentUnitPointer[2] = newDebugRecord;\n    }\n    else {\n      *currentUnitPointer = newDebugRecord;\n    }\n    *(undefined4 **)(recordManager + 0x28) = newDebugRecord;\nLAB_0010c056:\n    errorMessage = CONCAT71((int7)((ulong)currentUnitPointer >> 8),1);\n  }\n  return errorMessage;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bf86",
            "calling": [
                "FUN_0010554f",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "update_debug_record_line_0010bf86"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104140",
            "calling": [
                "FUN_0010554f",
                "FUN_001086af",
                "FUN_00116852"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "FUN_0011a170": {
            "renaming": {
                "FUN_0011a170": "match_pattern_0011a170",
                "param_1": "pattern",
                "param_2": "input",
                "__pattern": "currentPattern",
                "iVar1": "matchResult"
            },
            "code": "\nint matchPattern_0011a170(char **pattern,char **input)\n\n{\n  char *currentPattern;\n  int matchResult;\n  \n  currentPattern = *pattern;\n  if (*currentPattern == '!') {\n    matchResult = fnmatch(currentPattern + 1,*input,0);\n    if (matchResult == 0) {\n      *(undefined *)(input + 1) = 0;\n      return matchResult;\n    }\n  }\n  else {\n    matchResult = fnmatch(currentPattern,*input,0);\n    if (matchResult == 0) {\n      *(undefined *)(input + 1) = 1;\n    }\n  }\n  return 1;\n}\n\n",
            "called": [
                "fnmatch"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0011a170",
            "calling": [
                "FUN_0010554f",
                "FUN_00115d70"
            ],
            "imported": false,
            "current_name": "match_pattern_0011a170"
        },
        "FUN_0010bd62": {
            "renaming": {
                "FUN_0010bd62": "record_parameter_debug_0010bd62",
                "param_1": "functionInfo",
                "param_2": "param2Ptr",
                "param_3": "param3Ptr",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "currentPtr",
                "uVar2": "errorMessage",
                "puVar3": "newPointer",
                "puVar4": "tempPtr",
                "lVar5": "tempVal1",
                "puVar6": "lastPtr",
                "puVar7": "tempPtr2",
                "bVar8": "flag"
            },
            "code": "\n\n\nundefined8\nrecordParameterDebug_0010bd62(long functionInfo,long param2Ptr,long param3Ptr,undefined4 param4,undefined8 param5)\n\n{\n  undefined8 *currentPtr;\n  undefined8 errorMessage;\n  undefined4 *newPointer;\n  undefined8 *tempPtr;\n  long tempVal1;\n  undefined8 *lastPtr;\n  undefined4 *tempPtr2;\n  byte flag;\n  \n  flag = 0;\n  if (param2Ptr == 0) {\n    return 0;\n  }\n  if (param3Ptr != 0) {\n    if ((*(long *)(functionInfo + 8) != 0) && (*(long *)(functionInfo + 0x18) != 0)) {\n      newPointer = (undefined4 *)xmalloc(0x28);\n      tempPtr2 = newPointer;\n      for (tempVal1 = 10; tempVal1 != 0; tempVal1 = tempVal1 + -1) {\n        *tempPtr2 = 0;\n        tempPtr2 = tempPtr2 + (ulong)flag * -2 + 1;\n      }\n      tempVal1 = *(long *)(functionInfo + 0x18);\n      *(long *)(newPointer + 2) = param2Ptr;\n      *(long *)(newPointer + 4) = param3Ptr;\n      newPointer[6] = param4;\n      currentPtr = *(undefined8 **)(tempVal1 + 8);\n      *(undefined8 *)(newPointer + 8) = param5;\n      lastPtr = (undefined8 *)(tempVal1 + 8);\n      while (tempPtr = currentPtr, tempPtr != (undefined8 *)0x0) {\n        lastPtr = tempPtr;\n        currentPtr = (undefined8 *)*tempPtr;\n      }\n      *lastPtr = newPointer;\n      return 1;\n    }\n    errorMessage = dcgettext(0,\"debug_record_parameter: no current function\",5);\n    fprintf(_stderr,\"%s\\n\",errorMessage);\n  }\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010bd62",
            "calling": [
                "FUN_0011173a",
                "FUN_00112a33"
            ],
            "imported": false,
            "current_name": "record_parameter_debug_0010bd62"
        },
        "FUN_00104ea2": {
            "renaming": {
                "FUN_00104ea2": "copy_archive_00104ea2",
                "param_7": "sourceFilePath",
                "param_8": "fileSize",
                "param_9": "tempDirPath",
                "param_10": "targetFilePath",
                "param_11": "openMode",
                "param_18": "permissions",
                "param_19": "maxSize",
                "unaff_RBP": "fileStat",
                "unaff_retaddr": "returnAddress",
                "unaff_R12": "tempFilePath",
                "unaff_R13": "tempFileData",
                "unaff_R15": "archiveFile",
                "unaff_EBX": "statError",
                "bVar17": "byteValue",
                "pcVar13": "closeFunc",
                "ppcVar6": "nextArchivedFile",
                "cVar1": "charValue",
                "iVar2": "intValue",
                "ppcVar3": "archivedFile",
                "pcVar7": "filePath",
                "puVar8": "allocatedMemory",
                "piVar9": "errorCode",
                "pcVar10": "errorMessage",
                "uVar11": "translatedMessage",
                "lVar12": "fileSize",
                "lVar14": "readSize",
                "lVar5": "bytesRead",
                "pvVar4": "buffer",
                "pcVar15": "pathSegment",
                "psVar16": "fileStat"
            },
            "code": "\nvoid copyArchive_00104ea2(void)\n\n{\n  char charValue;\n  int intValue;\n  char **archivedFile;\n  void *buffer;\n  long bytesRead;\n  char **nextArchivedFile;\n  char *filePath;\n  undefined8 *allocatedMemory;\n  int *errorCode;\n  char *errorMessage;\n  undefined8 translatedMessage;\n  long fileSize;\n  code *closeFunc;\n  long readSize;\n  int statError;\n  stat *fileStat;\n  char *pathSegment;\n  stat *fileStat;\n  char *tempFilePath;\n  undefined8 *tempFileData;\n  char **archiveFile;\n  byte byteValue;\n  undefined8 returnAddress;\n  undefined8 *sourceFilePath;\n  long *fileSize;\n  char *tempDirPath;\n  undefined8 *targetFilePath;\n  undefined8 openMode;\n  undefined8 in_stack_00000030;\n  uint permissions;\n  long maxSize;\n  \n  byteValue = 0;\ncode_r0x00104ea2:\n  nextArchivedFile = (char **)bfd_openw(tempFilePath,openMode);\n  if (nextArchivedFile == (char **)0x0) {\nLAB_00104e80:\n    FUN_001126c0(tempFilePath,0,0,0);\nLAB_00104e93:\n    DAT_00127a40 = 1;\n  }\n  else {\nLAB_00114a5f:\n    charValue = FUNC_00114e50(archiveFile,nextArchivedFile,returnAddress);\n    if (charValue == '\\0') {\n      intValue = bfd_get_arch(archiveFile);\n      if (intValue == 0) goto LAB_00104d75;\n      charValue = bfd_close_all_done(nextArchivedFile);\n      if (charValue != '\\0') goto LAB_00104ec9;\n      FUN_001126c0(tempFilePath,0,0,0);\n      goto LAB_00104ec9;\n    }\n    charValue = bfd_close(nextArchivedFile);\n    nextArchivedFile = archiveFile;\n    if (charValue == '\\0') {\n      FUN_001126c0(tempFilePath,0,0,0);\n      DAT_00127a40 = 1;\n    }\nLAB_00114a86:\n    if ((DAT_001279eb != '\\0') && (statError == 0)) {\n      FUN_0011a350(tempFilePath,fileStat);\n    }\n    fileSize = bfd_openr(tempFilePath,openMode);\n    tempFileData[2] = fileSize;\n    *fileSize = fileSize;\n    fileSize = (long *)(fileSize + 0xf0);\n    archiveFile = (char **)bfd_openr_next_archived_file(targetFilePath,nextArchivedFile);\n    bfd_close(nextArchivedFile);\n    while ((DAT_00127a40 == 0 && (archiveFile != (char **)0x0))) {\n      errorMessage = *archiveFile;\n      filePath = errorMessage;\n      if (*errorMessage == '/') {\nLAB_0010527d:\n        translatedMessage = dcgettext(0,\"illegal pathname found in archive member: %s\",5);\n        FUN_00119ed0(translatedMessage,errorMessage);\n        goto LAB_00104e93;\n      }\n      while (*filePath != '\\0') {\n        pathSegment = filePath;\n        if ((*filePath == '.') && (pathSegment = filePath + 1, filePath[1] == '.')) {\n          pathSegment = filePath + 2;\n          if ((filePath[2] == '\\0') || (filePath[2] == '/')) goto LAB_0010527d;\n        }\n        for (; (*pathSegment != '\\0' && (*pathSegment != '/')); pathSegment = pathSegment + 1) {\n        }\n        filePath = pathSegment;\n        if (*pathSegment == '/') {\n          FUN_001052a2();\n          return;\n        }\n      }\n      fileStat = (stat *)&stack0x00000050;\n      tempFilePath = (char *)concat(tempDirPath,&DAT_0011b47d);\n      intValue = stat(tempFilePath,fileStat);\n      allocatedMemory = tempFileData;\n      if (-1 < intValue) {\n        fileSize = FUN_0011a0e0(tempFilePath);\n        free(tempFilePath);\n        if (fileSize == 0) {\n          errorCode = __errno_location();\n          errorMessage = strerror(*errorCode);\n          translatedMessage = dcgettext(0,\"cannot create tempdir for archive copying (error: %s)\",5);\n          FUN_00119ed0(translatedMessage,errorMessage);\n          goto LAB_00104e93;\n        }\n        allocatedMemory = (undefined8 *)xmalloc(0x18);\n        errorMessage = *archiveFile;\n        *allocatedMemory = tempFileData;\n        allocatedMemory[2] = 0;\n        allocatedMemory[1] = fileSize;\n        tempFilePath = (char *)concat(fileSize,&DAT_0011b47d,errorMessage);\n      }\n      statError = 0;\n      if (DAT_001279eb != '\\0') {\n        fileStat = fileStat;\n        for (fileSize = 0x24; fileSize != 0; fileSize = fileSize + -1) {\n          *(undefined4 *)&fileStat->st_dev = 0;\n          fileStat = (stat *)((long)fileStat + (ulong)byteValue * -8 + 4);\n        }\n        nextArchivedFile = (char **)archiveFile[0x1d];\n        if ((char **)archiveFile[0x1d] == (char **)0x0) {\n          nextArchivedFile = archiveFile;\n        }\n        statError = (**(code **)(nextArchivedFile[1] + 0x1e8))(archiveFile,fileStat);\n        if (statError != 0) {\n          errorMessage = *archiveFile;\n          translatedMessage = dcgettext(0,\"internal stat error on %s\",5);\n          FUN_00119ed0(translatedMessage,errorMessage);\n        }\n      }\n      tempFileData = (undefined8 *)xmalloc(0x18);\n      tempFileData[1] = tempFilePath;\n      *tempFileData = allocatedMemory;\n      tempFileData[2] = 0;\n      charValue = bfd_check_format(archiveFile,1);\n      if (charValue != '\\0') {\n        if (in_stack_00000030._7_1_ != '\\0') goto code_r0x00104ea2;\n        nextArchivedFile = (char **)bfd_openw(tempFilePath,*(undefined8 *)archiveFile[1]);\n        if (nextArchivedFile == (char **)0x0) goto LAB_00104e80;\n        goto LAB_00114a5f;\n      }\n      translatedMessage = dcgettext(0,\"Unable to recognise the format of file\",5);\n      FUN_001126c0(0,archiveFile,0,translatedMessage);\n      nextArchivedFile = (char **)bfd_openw(tempFilePath,openMode);\n      if (nextArchivedFile == (char **)0x0) goto LAB_00104e80;\nLAB_00104d75:\n      archivedFile = (char **)archiveFile[0x1d];\n      if ((char **)archiveFile[0x1d] == (char **)0x0) {\n        archivedFile = archiveFile;\n      }\n      intValue = (**(code **)(archivedFile[1] + 0x1e8))(archiveFile);\n      fileSize = maxSize;\n      if (intValue == 0) {\n        if (maxSize < 0) {\n          FUN_001125fa(archiveFile);\n          translatedMessage = dcgettext(0,\"stat returns negative size for `%s\\'\",5);\n          FUN_00119ed0(translatedMessage);\n        }\n        else {\n          intValue = bfd_seek(archiveFile,0,0);\n          if (intValue == 0) {\n            if (DAT_001279e9 != '\\0') {\n              errorMessage = *nextArchivedFile;\n              translatedMessage = FUN_001125fa(archiveFile);\n              filePath = (char *)dcgettext(0,\"copy from `%s\\' [unknown] to `%s\\' [unknown]\\n\",5);\n              printf(filePath,translatedMessage,errorMessage);\n            }\n            buffer = (void *)xmalloc(0x2000);\n            while( true ) {\n              if (fileSize == 0) {\n                chmod(*nextArchivedFile,permissions | 0x100);\n                free(buffer);\n                charValue = bfd_close_all_done(nextArchivedFile);\n                nextArchivedFile = archiveFile;\n                if (charValue == '\\0') {\n                  FUN_001126c0(tempFilePath,0,0,0);\n                  DAT_00127a40 = 1;\n                }\n                goto LAB_00114a86;\n              }\n              readSize = 0x2000;\n              if (fileSize < 0x2001) {\n                readSize = fileSize;\n              }\n              bytesRead = bfd_bread(buffer,readSize,archiveFile);\n              archivedFile = archiveFile;\n              if ((readSize != bytesRead) ||\n                 (bytesRead = bfd_bwrite(buffer,readSize,nextArchivedFile), archivedFile = nextArchivedFile, readSize != bytesRead))\n              break;\n              fileSize = fileSize - readSize;\n            }\n            FUN_001126c0(0,archivedFile,0,0);\n            free(buffer);\n          }\n          else {\n            translatedMessage = FUN_001125fa(archiveFile);\n            FUN_0011a110(translatedMessage);\n          }\n        }\n      }\n      else {\n        FUN_001126c0(0,archiveFile,0,0);\n      }\n      charValue = bfd_close_all_done(nextArchivedFile);\n      if (charValue == '\\0') {\n        FUN_001126c0(tempFilePath,0,0,0);\n      }\nLAB_00104ec9:\n      unlink(tempFilePath);\n      DAT_00127a40 = 1;\n    }\n    *fileSize = 0;\n    buffer = (void *)xstrdup(*sourceFilePath);\n    if (DAT_00127a40 == 0) {\n      closeFunc = bfd_close;\n    }\n    else {\n      closeFunc = bfd_close_all_done;\n    }\n    charValue = (*closeFunc)(sourceFilePath);\n    if (charValue == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n    buffer = (void *)xstrdup(*targetFilePath);\n    charValue = bfd_close(targetFilePath);\n    if (charValue == '\\0') {\n      DAT_00127a40 = 1;\n      FUN_001126c0(buffer,0,0,0);\n    }\n    free(buffer);\n  }\n  while (tempFileData != (undefined8 *)0x0) {\n    if (tempFileData[2] == 0) {\n      rmdir((char *)tempFileData[1]);\n    }\n    else {\n      bfd_close();\n      unlink((char *)tempFileData[1]);\n    }\n    free((void *)tempFileData[1]);\n    allocatedMemory = (undefined8 *)*tempFileData;\n    free(tempFileData);\n    tempFileData = allocatedMemory;\n  }\n  rmdir(tempDirPath);\n  free(tempDirPath);\n  return;\n}\n\n",
            "called": [
                "FUN_001125fa",
                "dcgettext",
                "bfd_bwrite",
                "FUN_00114b84",
                "FUN_001052a2",
                "xstrdup",
                "strerror",
                "FUN_001126c0",
                "bfd_openr_next_archived_file",
                "FUN_0011a350",
                "bfd_bread",
                "bfd_openr",
                "bfd_seek",
                "bfd_close",
                "bfd_get_arch",
                "stat",
                "xmalloc",
                "FUN_0011a110",
                "FUN_00119ed0",
                "FUN_00104ea2",
                "bfd_close_all_done",
                "bfd_check_format",
                "bfd_openw",
                "FUN_0011a0e0",
                "free",
                "__errno_location",
                "unlink",
                "bfd_close_all_done",
                "printf",
                "bfd_close",
                "concat",
                "rmdir",
                "chmod",
                "FUN_00114e50"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104ea2",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "copy_archive_00104ea2"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047a0",
            "calling": [
                "FUN_0010e6a8",
                "FUN_00116b90",
                "FUN_0011a110",
                "FUN_0010e07c",
                "FUN_0011378f",
                "FUN_0010e2f0",
                "FUN_0010554f",
                "FUN_001126c0",
                "FUN_0010dac0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104800",
            "calling": [
                "FUN_00108b3e",
                "FUN_00107880",
                "FUN_001126c0"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "FUN_00113ce0": {
            "renaming": {
                "FUN_00113ce0": "allocate_and_initialize_struct_00113ce0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "lVar1": "result",
                "plVar2": "allocated_struct_ptr",
                "auVar3": "return_value"
            },
            "code": "\nundefined  [16]\nallocate_and_initialize_struct_00113ce0(long input_1,long input_2,undefined input_3,undefined8 input_4,undefined8 input_5)\n\n{\n  long result;\n  long *allocated_struct_ptr;\n  undefined return_value [16];\n  \n  if (input_1 != 0) {\n    result = FUN_00112904(0xd,0);\n    if (result != 0) {\n      allocated_struct_ptr = (long *)xmalloc(0x18);\n      *(undefined4 *)((long)allocated_struct_ptr + 0x11) = 0;\n      *allocated_struct_ptr = input_1;\n      *(undefined4 *)((long)allocated_struct_ptr + 0x14) = 0;\n      allocated_struct_ptr[1] = input_2;\n      *(undefined *)(allocated_struct_ptr + 2) = input_3;\n      *(long **)(result + 0x10) = allocated_struct_ptr;\n      goto LAB_00113d2f;\n    }\n  }\n  result = 0;\nLAB_00113d2f:\n  return_value._8_8_ = input_5;\n  return_value._0_8_ = result;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00112904"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00113ce0",
            "calling": [
                "FUN_0010ee3f",
                "FUN_0010b0fa",
                "FUN_0010c95e",
                "FUN_0010dac0",
                "FUN_0011173a"
            ],
            "imported": false,
            "current_name": "allocate_and_initialize_struct_00113ce0"
        },
        "FUN_00114dc7": {
            "renaming": {
                "FUN_00114dc7": "read_and_resize_buffer_00114dc7",
                "unaff_RBX": "file",
                "unaff_RBP": "buffer",
                "unaff_R12": "startOffset",
                "unaff_R14": "endOffset",
                "sVar4": "bytesRead",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "uVar3": "message",
                "dcgettext": "retrieveText"
            },
            "code": "\nvoid readAndResizeBuffer_00114dc7(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 message;\n  size_t bytesRead;\n  FILE *file;\n  long buffer;\n  long startOffset;\n  long endOffset;\n  \n  while( true ) {\n    bytesRead = fread((void *)(*(long *)(buffer + 0x20) + startOffset),1,endOffset - startOffset,\n                  file);\n    error = ferror(file);\n    if (error != 0) {\n      message = *(undefined8 *)(buffer + 0x10);\n      errorMessage = dcgettext(0,\"%s: fread failed\",5);\n                    \n      FUN_00119dd0(errorMessage,message);\n    }\n    startOffset = startOffset + bytesRead;\n    error = feof(file);\n    if (error != 0) break;\n    if (startOffset == endOffset) {\n      endOffset = startOffset * 2;\n      message = xrealloc(*(undefined8 *)(buffer + 0x20),endOffset);\n      *(undefined8 *)(buffer + 0x20) = message;\n    }\n  }\n  *(long *)(buffer + 0x18) = startOffset;\n  fclose(file);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "xrealloc",
                "FUN_00114dc7",
                "fclose",
                "FUN_00119dd0",
                "feof",
                "ferror",
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00114dc7",
            "calling": [
                "FUN_00114dc7"
            ],
            "imported": false,
            "current_name": "read_and_resize_buffer_00114dc7"
        },
        "FUN_00119f70": {
            "renaming": {
                "FUN_00119f70": "process_file_00119f70",
                "param_1": "header",
                "param_2": "output",
                "uVar1": "returnValue",
                "cVar2": "errorFlag",
                "iVar3": "index",
                "uVar4": "headerLabel",
                "uVar5": "dataLabel",
                "__format": "formatString",
                "lVar6": "sizeThreshold",
                "uVar7": "headerValue",
                "lVar8": "allocatedMemory"
            },
            "code": "\nundefined4 processFile_00119f70(undefined8 *header,undefined8 *output)\n\n{\n  undefined4 returnValue;\n  char errorFlag;\n  int index;\n  undefined8 headerLabel;\n  undefined8 dataLabel;\n  char *formatString;\n  long sizeThreshold;\n  undefined8 headerValue;\n  long allocatedMemory;\n  \n  index = *(int *)((long)output + 0xc) + 1;\n  *(int *)((long)output + 0xc) = index;\n  if ((ulong)output[2] < (ulong)((long)index * 0x60)) {\n    sizeThreshold = 0x3000;\n    if (0x3f < index) {\n      sizeThreshold = (long)index * 0xc0;\n    }\n    allocatedMemory = xrealloc(output[3]);\n    output[3] = allocatedMemory;\n    memset((void *)(allocatedMemory + output[2]),0,sizeThreshold - output[2]);\n    output[2] = sizeThreshold;\n  }\n  returnValue = *(undefined4 *)((long)header + 0xc);\n  *(undefined8 *)((long)*(int *)((long)output + 0xc) * 0x60 + output[3] + -0x60) = *header;\n  headerLabel = FUN_00114e00(returnValue);\n  dataLabel = FUN_00114e00(*(undefined4 *)(header + 2));\n  headerValue = *header;\n  formatString = (char *)dcgettext(0,\"%s\\n (header %s, data %s)\\n\",5);\n  printf(formatString,headerValue,dataLabel,headerLabel);\n  sizeThreshold = bfd_openw(*output,*header);\n  if (sizeThreshold == 0) {\n    FUN_0011a110(*output);\n    *(undefined4 *)(output + 1) = 1;\n  }\n  else {\n    index = 2;\n    errorFlag = bfd_set_format(sizeThreshold,1);\n    if (errorFlag == '\\0') {\n      index = bfd_get_error();\n      if (index != 5) {\n        FUN_0011a110(*header);\n        *(undefined4 *)(output + 1) = 1;\n      }\n    }\n    else {\n      do {\n        errorFlag = (**(code **)(*(long *)(sizeThreshold + 8) + 0x2a0))(sizeThreshold,index,0);\n        if (errorFlag != '\\0') {\n          headerValue = bfd_printable_arch_mach(index,0);\n          printf(\"  %s\\n\",headerValue);\n          *(undefined *)\n           ((long)*(int *)((long)output + 0xc) * 0x60 + output[3] + -0x58 + (ulong)(index - 2)) =\n               1;\n        }\n        index = index + 1;\n      } while (index != 0x57);\n    }\n    bfd_close_all_done(sizeThreshold);\n  }\n  return *(undefined4 *)(output + 1);\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_set_format",
                "FUN_0011a110",
                "bfd_openw",
                "bfd_get_error",
                "xrealloc",
                "memset",
                "bfd_close_all_done",
                "printf",
                "FUN_00114e00",
                "bfd_printable_arch_mach",
                "FUN_001053d5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00119f70",
            "calling": [
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "process_file_00119f70"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040c0",
            "calling": [
                "FUN_00108200",
                "FUN_00104ea2",
                "FUN_001199d0"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "FUN_00115a90": {
            "renaming": {
                "FUN_00115a90": "extract_file_data_00115a90",
                "param_1": "file_descriptor",
                "param_2": "file_path",
                "param_3": "permission_data",
                "iVar1": "errno_value",
                "__fd": "output_file_descriptor",
                "iVar2": "read_result",
                "_Var3": "file_offset",
                "sVar5": "write_result",
                "uVar4": "return_value",
                "piVar6": "errno_address",
                "local_2038": "buffer"
            },
            "code": "\nulong extract_file_data_00115a90(int file_descriptor,char *file_path,long permission_data)\n\n{\n  int errno_value;\n  int output_file_descriptor;\n  int read_result;\n  __off_t file_offset;\n  ulong return_value;\n  size_t write_result;\n  int *errno_address;\n  undefined buffer [8200];\n  \n  if ((-1 < file_descriptor) && (file_offset = lseek(file_descriptor,0,0), file_offset == 0)) {\n    output_file_descriptor = open(file_path,0x201);\n    if (output_file_descriptor < 0) {\n      return_value = FUN_00108237();\n      return return_value;\n    }\n    do {\n      return_value = read(file_descriptor,buffer,0x2000);\n      read_result = (int)return_value;\n      if (read_result < 1) {\n        errno_address = __errno_location();\n        errno_value = *errno_address;\n        fchmod(output_file_descriptor,*(__mode_t *)(permission_data + 0x18));\n        close(file_descriptor);\n        close(output_file_descriptor);\n        if (read_result != 0) {\n          *errno_address = errno_value;\n          return 0xffffffff;\n        }\n        return return_value & 0xffffffff;\n      }\n      write_result = write(output_file_descriptor,buffer,(long)read_result);\n    } while (write_result == (long)read_result);\n    errno_address = __errno_location();\n    read_result = *errno_address;\n    close(file_descriptor);\n    close(output_file_descriptor);\n    *errno_address = read_result;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "__errno_location",
                "write",
                "open",
                "close",
                "FUN_00108237",
                "fchmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00115a90",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "extract_file_data_00115a90"
        },
        "strncpy": {
            "renaming": {},
            "code": "\n\n\nchar * strncpy(char *__dest,char *__src,size_t __n)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strncpy(__dest,__src,__n);\n  return pcVar1;\n}\n\n",
            "called": [
                "strncpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001040d0",
            "calling": [
                "FUN_00116b90",
                "FUN_00104ad6"
            ],
            "imported": false,
            "current_name": "strncpy"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104530",
            "calling": [
                "FUN_00104ea2"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104060",
            "calling": [
                "FUN_0011a350"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048b0",
            "calling": [
                "FUN_00116b90"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "FUN_00108200": {
            "renaming": {
                "FUN_00108200": "copy_file_with_reason_00108200",
                "unaff_RBP": "fileToCopy",
                "unaff_R12B": "isLink",
                "unaff_R13": "fileAttributes",
                "auVar3": "result",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errnoLocation"
            },
            "code": "\nundefined  [16] copyFileWithReason_00108200(void)\n\n{\n  int *errnoLocation;\n  undefined8 uVar2;\n  char *fileToCopy;\n  char isLink;\n  ulong fileAttributes;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errnoLocation = __errno_location();\n  strerror(*errnoLocation);\n  uVar2 = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  FUN_00119ed0(uVar2);\n  unlink(fileToCopy);\n  if (isLink != '\\0') {\n    FUN_0011a350();\n  }\n  result._0_8_ = fileAttributes & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_0011a350",
                "__errno_location",
                "FUN_00119ed0",
                "unlink",
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00108200",
            "calling": [
                "FUN_00115970"
            ],
            "imported": false,
            "current_name": "copy_file_with_reason_00108200"
        },
        "bfd_alt_mach_code": {
            "renaming": {},
            "code": "\nvoid bfd_alt_mach_code(void)\n\n{\n  bfd_alt_mach_code();\n  return;\n}\n\n",
            "called": [
                "bfd_alt_mach_code"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104590",
            "calling": [
                "FUN_0010554f"
            ],
            "imported": false,
            "current_name": "bfd_alt_mach_code"
        }
    },
    "used_tokens": 272948,
    "layers": [
        [
            "FUN_00113dfe",
            "FUN_0010ab4d",
            "FUN_0010c218",
            "FUN_0010be88",
            "FUN_0010ba08",
            "FUN_0010aa53",
            "FUN_0011173a",
            "FUN_00115dc0",
            "FUN_0010d559",
            "FUN_00119e70",
            "FUN_00108466",
            "FUN_00108e76",
            "FUN_0010bb52",
            "thunk_FUN_0010e439",
            "FUN_0011283f",
            "FUN_00108237",
            "FUN_0010bc80",
            "FUN_00114cf0",
            "FUN_0010a181",
            "FUN_001199d0",
            "FUN_0010847a",
            "FUN_0010d21c",
            "FUN_001054af",
            "FUN_0010c139",
            "FUN_0010e439",
            "FUN_00109d3e",
            "FUN_00112502",
            "FUN_00104cc1",
            "FUN_00113bfa",
            "FUN_00108375",
            "FUN_00109e76",
            "FUN_001088ae",
            "FUN_0010afd5",
            "FUN_00108b3e",
            "FUN_0010a083",
            "FUN_00109c2e",
            "FUN_001053b5",
            "FUN_00112996",
            "FUN_0010c7a0",
            "FUN_0010922b",
            "FUN_001052a2",
            "FUN_0010e453",
            "FUN_00109d5c",
            "FUN_0010ed2c",
            "FUN_0011a1b0",
            "FUN_001163d0",
            "FUN_00108a2a",
            "FUN_00108c86",
            "FUN_0010911f",
            "FUN_001053d5",
            "FUN_00104bba",
            "FUN_00109a0b",
            "FUN_0010da0b",
            "FUN_00112894",
            "FUN_00109b2f",
            "FUN_00108d9a",
            "FUN_0010e9a0",
            "FUN_0010827b",
            "FUN_00104920",
            "FUN_00113f20",
            "FUN_00108179",
            "FUN_00109022",
            "FUN_0010c05d",
            "FUN_00109d97",
            "FUN_001086af",
            "FUN_0010add5",
            "FUN_00113e17",
            "FUN_00109b52",
            "FUN_00109a32",
            "FUN_0010c6be",
            "FUN_0010b6ea",
            "FUN_0011a2e0",
            "FUN_0010e8a9",
            "FUN_00104ad6",
            "FUN_001087da",
            "FUN_0010914e",
            "FUN_0010829e",
            "FUN_00104943",
            "FUN_00113e23",
            "FUN_00108fb9",
            "FUN_00108ea1",
            "FUN_00108072",
            "FUN_0010a2b9",
            "FUN_0010ec73",
            "FUN_00114e00",
            "FUN_00115970",
            "FUN_0010adf2",
            "FUN_0010d7d4",
            "FUN_00113f50",
            "FUN_001087fd",
            "FUN_0011256b",
            "FUN_0011378f",
            "FUN_00104966",
            "FUN_0010a0a0",
            "FUN_00119ed0",
            "FUN_00112c1f",
            "FUN_0010808f",
            "FUN_00108fe8",
            "FUN_00105828",
            "FUN_0011a0e0",
            "FUN_0010bba1",
            "FUN_0010e6a8",
            "FUN_0010e7c2",
            "FUN_00119dd0",
            "FUN_001083b7",
            "FUN_00116852",
            "FUN_00113d3a",
            "FUN_0010a0d3",
            "FUN_00115530",
            "FUN_0010a0bd",
            "FUN_00113e5e",
            "FUN_0010abdd",
            "FUN_00115f30",
            "FUN_001129f4",
            "FUN_001082b3",
            "FUN_00114690",
            "FUN_0010b800",
            "FUN_00109ed3",
            "FUN_0010bbd3",
            "FUN_00115d00",
            "FUN_00113c43",
            "FUN_00112a33",
            "FUN_0010c2d2",
            "FUN_0010e07c",
            "FUN_001082c3",
            "FUN_00114460",
            "FUN_0010a94e",
            "FUN_00113b1e",
            "FUN_0010a0e9",
            "FUN_00114c20",
            "FUN_00115f50",
            "FUN_001083de",
            "FUN_0010b948",
            "FUN_00112b6e",
            "FUN_0010a83e",
            "FUN_00113d6e",
            "FUN_00114d50",
            "FUN_00108916",
            "FUN_001126c0",
            "FUN_00113b4a",
            "FUN_0010edb4",
            "FUN_0010e5db",
            "FUN_00104d25",
            "FUN_0010551d",
            "FUN_00108800",
            "FUN_0010c1c6",
            "FUN_001082df",
            "FUN_00114d60",
            "FUN_00108808",
            "FUN_00104d1c",
            "FUN_00119940",
            "FUN_0010540e",
            "FUN_00113a4d",
            "FUN_001081e9",
            "FUN_00113b71",
            "FUN_00109dfe",
            "FUN_00109bbb",
            "FUN_0010ae0e",
            "FUN_001135a5",
            "FUN_0010b0fa",
            "FUN_00104c36",
            "FUN_0010554f",
            "FUN_00109cf4",
            "FUN_00109ab1",
            "FUN_001159d0",
            "FUN_0010a77a",
            "FUN_0010543c",
            "FUN_0010a424",
            "FUN_00119970",
            "FUN_00114c80",
            "FUN_0010870e",
            "FUN_0010dac0",
            "FUN_00113fb0",
            "FUN_0010882c",
            "FUN_0010ebb0",
            "FUN_00113b98",
            "FUN_00115d70",
            "FUN_00109be3",
            "FUN_0011a480",
            "FUN_0010e918",
            "FUN_00116110",
            "FUN_0010871c",
            "FUN_0010bf20",
            "FUN_0010c95e",
            "FUN_0011a350",
            "FUN_0011a110",
            "FUN_0010e2f0",
            "FUN_00113fe0",
            "FUN_001125fa",
            "FUN_00108f05",
            "FUN_00108863",
            "FUN_00104020",
            "FUN_00108f08",
            "FUN_00114b84",
            "FUN_00114190",
            "FUN_00116490",
            "FUN_00104a35",
            "FUN_0010be1a",
            "FUN_00113da9",
            "FUN_0011a250",
            "FUN_0010a69a",
            "FUN_00115b70",
            "FUN_00116030",
            "FUN_00113ede",
            "FUN_0010875d",
            "FUN_0010c892",
            "FUN_00112904",
            "FUN_00108898",
            "FUN_0011a390",
            "FUN_0010e842",
            "FUN_00113cb9",
            "FUN_0010eafe",
            "FUN_00113df2",
            "FUN_0010a377",
            "FUN_0010d882",
            "FUN_00112925",
            "FUN_0010bf86",
            "FUN_0011a170",
            "FUN_0010bd62",
            "FUN_00104ea2",
            "FUN_00113ce0",
            "FUN_00114dc7",
            "FUN_00119f70",
            "FUN_00115a90",
            "FUN_00108200"
        ]
    ],
    "locked_functions": []
}