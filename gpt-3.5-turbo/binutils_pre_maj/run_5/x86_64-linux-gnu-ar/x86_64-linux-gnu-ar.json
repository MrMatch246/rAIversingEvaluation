{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_matching_file_00102cd9",
                "in_EAX": "eax",
                "iVar1": "comparisonResult",
                "unaff_RBX": "filePointer",
                "param_7": "targetFilename"
            },
            "code": "\nlong * findMatchingFile_00102cd9(void)\n\n{\n  int eax;\n  int comparisonResult;\n  long *filePointer;\n  undefined8 targetFilename;\n  \n  targetFilename = DAT_0010d638;\n  if (eax == 3) {\n    for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*filePointer,targetFilename);\n      if (comparisonResult == 0) {\n        if (eax != 2) {\n          return filePointer;\n        }\n        return (long *)(*filePointer + 0xf0);\n      }\n    }\n  }\n  return filePointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_matching_file_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_00105830",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_permissions_001079c0",
                "param_1": "file",
                "param_2": "fileData",
                "param_3": "printTime",
                "param_4": "printSize",
                "iVar1": "fileStatus",
                "ppcVar2": "filePtr",
                "pcVar3": "fileTime",
                "uVar4": "fileMode",
                "local_100": "currentTime",
                "uStack_f3": "permissionFlag",
                "cStack_f2": "readOwner",
                "cStack_f1": "writeOwner",
                "cStack_f0": "executeOwner",
                "cStack_ef": "readGroup",
                "cStack_ee": "writeGroup",
                "cStack_ed": "executeGroup",
                "cStack_ec": "readOther",
                "cStack_eb": "writeOther",
                "cStack_ea": "executeOther",
                "local_e8": "timeString",
                "local_b8": "undefinedBuffer",
                "uStack_a0": "fileSize",
                "uStack_9c": "unknown1",
                "uStack_98": "unknown2",
                "uStack_88": "unknown3",
                "local_60": "fileCreationTime"
            },
            "code": "\nvoid printFilePermissions_001079c0(FILE *file,char **fileData,char printTime,char printSize)\n\n{\n  int fileStatus;\n  char **filePtr;\n  char *fileTime;\n  uint fileMode;\n  time_t currentTime;\n  undefined permissionFlag;\n  char readOwner;\n  char writeOwner;\n  char executeOwner;\n  char readGroup;\n  char writeGroup;\n  char executeGroup;\n  char readOther;\n  char writeOther;\n  char executeOther;\n  undefined uStack_e9;\n  char timeString [48];\n  undefined undefinedBuffer [24];\n  uint fileSize;\n  uint unknown1;\n  uint unknown2;\n  undefined8 unknown3;\n  time_t fileCreationTime;\n  \n  if (printTime != '\\0') {\n    filePtr = (char **)fileData[0x1d];\n    if ((char **)fileData[0x1d] == (char **)0x0) {\n      filePtr = fileData;\n    }\n    fileStatus = (**(code **)(filePtr[1] + 0x1e8))(fileData,undefinedBuffer);\n    if (fileStatus == 0) {\n      currentTime = fileCreationTime;\n      fileTime = ctime(&currentTime);\n      if (fileTime == (char *)0x0) {\n        fileTime = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(timeString,fileTime);\n      }\n      else {\n        sprintf(timeString,\"%.12s %.4s\",fileTime + 4);\n      }\n      fileMode = fileSize & 0xf000;\n      if (fileMode == 0x4000) {\n        permissionFlag = 100;\n      }\n      else if (fileMode == 0xa000) {\n        permissionFlag = 0x6c;\n      }\n      else if (fileMode == 0x6000) {\n        permissionFlag = 0x62;\n      }\n      else if (fileMode == 0x2000) {\n        permissionFlag = 99;\n      }\n      else if (fileMode == 0xc000) {\n        permissionFlag = 0x73;\n      }\n      else {\n        permissionFlag = 0x70;\n        if (fileMode != 0x1000) {\n          permissionFlag = 0x2d;\n        }\n      }\n      readOwner = (-((fileSize & 0x100) == 0) & 0xbbU) + 0x72;\n      writeOwner = (-((fileSize & 0x80) == 0) & 0xb6U) + 0x77;\n      executeOwner = (-((fileSize & 0x40) == 0) & 0xb5U) + 0x78;\n      readGroup = (-((fileSize & 0x20) == 0) & 0xbbU) + 0x72;\n      writeGroup = (-((fileSize & 0x10) == 0) & 0xb6U) + 0x77;\n      executeGroup = (-((fileSize & 8) == 0) & 0xb5U) + 0x78;\n      readOther = (-((fileSize & 4) == 0) & 0xbbU) + 0x72;\n      writeOther = (-((fileSize & 2) == 0) & 0xb6U) + 0x77;\n      executeOther = (-((fileSize & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileSize & 0x800) != 0) {\n        if (executeOwner == 'x') {\n          executeOwner = 's';\n        }\n        else {\n          executeOwner = 'S';\n        }\n      }\n      if ((fileSize & 0x400) != 0) {\n        if (executeGroup == 'x') {\n          executeGroup = 's';\n        }\n        else {\n          executeGroup = 'S';\n        }\n      }\n      if ((fileSize & 0x200) != 0) {\n        if (executeOther == 'x') {\n          executeOther = 't';\n        }\n        else {\n          executeOther = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&readOwner,(ulong)unknown1,(ulong)unknown2,unknown3,\n              timeString,(ulong)fileSize);\n    }\n  }\n  fputs(*fileData,file);\n  if (printSize != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00107890",
                "FUN_00103ddc"
            ],
            "imported": false,
            "current_name": "print_file_permissions_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_file_path_00105a68",
                "pcVar1": "filePath",
                "pFVar2": "filePointer",
                "sVar3": "fileLength"
            },
            "code": "\nvoid processFilePath_00105a68(void)\n\n{\n  char *filePath;\n  FILE *filePointer;\n  size_t fileLength;\n  \n  filePath = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    fileLength = strlen(DAT_0010d5e8);\n    if (fileLength != 0) {\n      if (filePath[fileLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(filePath,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(filePath,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat",
                "printf",
                "xexit",
                "FUN_00102e57",
                "perror",
                "fopen",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_file_path_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "unarchive_files_001032a8",
                "param_1": "fileEntries",
                "param_2": "fileProcessor",
                "param_3": "searchEntries",
                "param_4": "returnValue",
                "lVar1": "nextEntry",
                "uVar2": "searchEntry",
                "bVar3": "foundEntry",
                "plVar4": "currentEntry",
                "iVar5": "comparisonResult",
                "__format": "errorMessage",
                "plVar6": "nextFileEntry",
                "lVar7": "currentFileEntry",
                "plVar8": "previousFileEntry"
            },
            "code": "\n\n\nundefined8 unarchiveFiles_001032a8(long *fileEntries,code *fileProcessor,undefined8 *searchEntries,undefined8 returnValue)\n\n{\n  long nextEntry;\n  undefined8 searchEntry;\n  bool foundEntry;\n  long *currentEntry;\n  int comparisonResult;\n  char *errorMessage;\n  long *nextFileEntry;\n  long currentFileEntry;\n  long *previousFileEntry;\n  \n  currentFileEntry = fileEntries[0x1e];\n  if (searchEntries == (undefined8 *)0x0) {\n    while (currentFileEntry != 0) {\n      nextEntry = *(long *)(currentFileEntry + 0xf0);\n      (*fileProcessor)(currentFileEntry,0);\n      currentFileEntry = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentEntry = (long *)fileEntries[0x1e];\n      previousFileEntry = fileEntries;\n      while (nextFileEntry = currentEntry, nextFileEntry != (long *)0x0) {\n        if (*nextFileEntry != 0) {\n          comparisonResult = filename_cmp(*searchEntries);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*fileProcessor)(nextFileEntry,previousFileEntry);\n          }\n        }\n        previousFileEntry = nextFileEntry;\n        currentEntry = (long *)nextFileEntry[0x1e];\n      }\n      if (!foundEntry) {\n        searchEntry = *searchEntries;\n        errorMessage = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,errorMessage,searchEntry);\n      }\n      searchEntries = (undefined8 *)searchEntries[1];\n    } while (searchEntries != (undefined8 *)0x0);\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "filename_cmp",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unarchive_files_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_not_found_error_0010285f",
                "__format": "formatString",
                "lVar2": "stringValue",
                "plVar3": "tempPointer",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "callbackFunction",
                "unaff_R12": "archivePointer",
                "unaff_R13D": "entriesRemaining",
                "unaff_R14": "entryNamesArray",
                "iStack000000000000000c": "counter"
            },
            "code": "\n\n\nvoid printArchiveEntryNotFoundError_0010285f(void)\n\n{\n  int iVar1;\n  char *formatString;\n  long stringValue;\n  long *tempPointer;\n  undefined8 entryName;\n  long *currentEntry;\n  code *callbackFunction;\n  long archivePointer;\n  int entriesRemaining;\n  undefined8 *entryNamesArray;\n  int counter;\n  \ncode_r0x0010285f:\n  entryName = *entryNamesArray;\n  formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,formatString,entryName);\nLAB_0010553e:\n  entryNamesArray = entryNamesArray + 1;\n  entriesRemaining = entriesRemaining + -1;\n  if (entriesRemaining == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePointer + 0xf0);\n  counter = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      stringValue = *currentEntry;\n      if (stringValue == 0) {\n        tempPointer = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          tempPointer = currentEntry;\n        }\n        (**(code **)(tempPointer[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePointer + 0x49) & 0x10) == 0) || (stringValue = extract_and_copy_string_00105830(), stringValue != 0))\n      {\n        entryName = extract_and_copy_string_00105830(*entryNamesArray);\n        iVar1 = filename_cmp(entryName,stringValue);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (counter = counter + 1,\n            counter == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*callbackFunction)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_not_found_error_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_message_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorMessage_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_message_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_archive_instructions_0010342d",
                "param_1": "isError",
                "uVar1": "archFileName",
                "pcVar2": "localizedTextPtr",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printArchiveInstructions_0010342d(uint isError)\n\n{\n  undefined8 archFileName;\n  char *localizedTextPtr;\n  FILE *outputStream;\n  \n  localizedTextPtr = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (isError != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedTextPtr,DAT_0010d660);\n  archFileName = DAT_0010d660;\n  localizedTextPtr = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedTextPtr,archFileName);\n  localizedTextPtr = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  localizedTextPtr = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedTextPtr);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (isError != 0) {\n    localizedTextPtr = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedTextPtr,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isError ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "FUN_0010336b",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_archive_instructions_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_index_options_0010394a",
                "param_1": "outputMode",
                "uVar1": "defaultMessage",
                "pcVar2": "message",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printIndexOptions_0010394a(uint outputMode)\n\n{\n  undefined8 defaultMessage;\n  char *message;\n  FILE *outputStream;\n  \n  defaultMessage = DAT_0010d660;\n  outputStream = _stderr;\n  if (outputMode != 0) {\n    outputStream = _stdout;\n  }\n  message = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,message,defaultMessage);\n  message = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  message = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,message);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputMode != 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputMode ^ 1);\n}\n\n",
            "called": [
                "FUN_0010266f",
                "dcgettext",
                "xexit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_index_options_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_message_00107920",
                "param_1": "error_code",
                "param_9": "error_message",
                "in_AL": "is_error",
                "local_d8": "size",
                "local_d4": "value",
                "local_d0": "pointer",
                "local_c8": "buffer",
                "local_b8": "local_buffer",
                "local_b0": "param_10_copy",
                "local_a8": "param_11_copy",
                "local_a0": "param_12_copy",
                "local_98": "param_13_copy",
                "local_90": "param_14_copy",
                "local_88": "param_1_copy",
                "local_78": "param_2_copy",
                "local_68": "param_3_copy",
                "local_58": "param_4_copy",
                "local_48": "param_5_copy",
                "local_38": "param_6_copy",
                "local_28": "param_7_copy",
                "local_18": "param_8_copy"
            },
            "code": "\nvoid print_error_message_00107920(undefined4 error_code,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 error_message,undefined8 error_code0,undefined8 error_code1,undefined8 error_code2,\n                 undefined8 error_code3,undefined8 error_code4)\n\n{\n  char is_error;\n  undefined4 size;\n  undefined4 value;\n  undefined *pointer;\n  undefined *buffer;\n  undefined local_buffer [8];\n  undefined8 param_10_copy;\n  undefined8 param_11_copy;\n  undefined8 param_12_copy;\n  undefined8 param_13_copy;\n  undefined8 param_14_copy;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 param_5_copy;\n  undefined4 param_6_copy;\n  undefined4 param_7_copy;\n  undefined4 param_8_copy;\n  \n  if (is_error != '\\0') {\n    param_1_copy = error_code;\n    param_2_copy = param_2;\n    param_3_copy = param_3;\n    param_4_copy = param_4;\n    param_5_copy = param_5;\n    param_6_copy = param_6;\n    param_7_copy = param_7;\n    param_8_copy = param_8;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  buffer = local_buffer;\n  value = 0x30;\n  param_10_copy = error_code0;\n  param_11_copy = error_code1;\n  param_12_copy = error_code2;\n  param_13_copy = error_code3;\n  param_14_copy = error_code4;\n  print_error_message_00107920_001078c0(error_message,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001052a0",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "print_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "get_one_00105bb0"
            },
            "code": "\nundefined8 getOne_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "get_one_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_application_00107640"
            },
            "code": "\nundefined8 initialize_application_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_application_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "extract_file_path_to_file_00102e6f",
                "in_RAX": "filePath",
                "pcVar1": "basePath",
                "uVar2": "newBasePath",
                "uVar3": "errorMessage",
                "pFVar4": "filePtr",
                "sVar5": "basePathLength",
                "pcVar6": "currentChar"
            },
            "code": "\nvoid extractFilePathToFile_00102e6f(void)\n\n{\n  char *basePath;\n  char *filePath;\n  undefined8 newBasePath;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t basePathLength;\n  char *currentChar;\n  \n  basePath = DAT_0010d5e8;\n  do {\n    filePath = filePath + 1;\n    while (*filePath != '/') {\n      if (*filePath == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (basePathLength = strlen(DAT_0010d5e8), basePathLength != 0)) {\n          if (basePath[basePathLength - 1] == '/') {\n            DAT_0010d618 = (char *)concat(basePath,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(basePath,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        filePtr = fopen(DAT_0010d618,\"w\");\n        if (filePtr == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      currentChar = filePath;\n      if ((*filePath == '.') && (currentChar = filePath + 1, filePath[1] == '.')) {\n        currentChar = filePath + 2;\n        if ((filePath[2] == '/') || (filePath[2] == '\\0')) {\n          newBasePath = lbasename();\n          basePath = DAT_0010d618;\n          errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message_00107920(errorMessage,basePath,newBasePath);\n          DAT_0010d618 = (char *)newBasePath;\n          process_file_path_00105a68();\n          return;\n        }\n      }\n      for (; (filePath = currentChar, *currentChar != '\\0' && (*currentChar != '/')); currentChar = currentChar + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00105a68",
                "FUN_00102e6f",
                "lbasename",
                "dcgettext",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "extract_file_path_to_file_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_zero_0010315d",
                "xexit": "exitFunction"
            },
            "code": "\n\n\nvoid checkAndExitIfZero_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_zero_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00105a68",
                "FUN_00102e57"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_permissions_00107890",
                "param_1": "fileDescriptor",
                "print_file_permissions_001079c0": "printFilePermissionsHelper",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printFilePermissions_00107890(undefined8 fileDescriptor)\n\n{\n  printFilePermissions_00107890Helper(standardOutput,fileDescriptor,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_permissions_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00105af0",
                "FUN_00102710"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "dataBuffer",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *dataBuffer;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    dataBuffer = malloc(0x4002);\n    *(void **)((long)buffer + 8) = dataBuffer;\n  } while (dataBuffer == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_param_and_print_00103172",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "flag",
                "param_4": "newValue",
                "uVar1": "oldValue",
                "auVar2": "updatedValue"
            },
            "code": "\nundefined  [16]\nupdateParamAndPrint_00103172(undefined8 *inputParam1,undefined8 *inputParam2,char flag,undefined8 newValue)\n\n{\n  undefined8 oldValue;\n  undefined updatedValue [16];\n  \n  if (flag != '\\0') {\n    printf(\"r - %s\\n\",*inputParam2);\n  }\n  oldValue = *inputParam1;\n  inputParam2[0x1e] = oldValue;\n  updatedValue._1_7_ = (undefined7)((ulong)oldValue >> 8);\n  updatedValue[0] = 1;\n  *inputParam1 = inputParam2;\n  updatedValue._8_8_ = newValue;\n  return updatedValue;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_param_and_print_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_last_matching_item_00105870",
                "param_1": "array",
                "param_2": "length",
                "param_3": "searchValue",
                "iVar1": "comparisonResult",
                "iVar3": "mode",
                "uVar2": "defaultSearchValue"
            },
            "code": "\nlong * findLastMatchingItem_00105870(long *array,int length,undefined8 searchValue)\n\n{\n  int comparisonResult;\n  undefined8 defaultSearchValue;\n  int mode;\n  \n  defaultSearchValue = DAT_0010d638;\n  mode = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultSearchValue = searchValue;\n    mode = length;\n  }\n  if (mode == 3) {\n    for (; *array != 0; array = (long *)(*array + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*array != (undefined8 *)0x0; array = (long *)(*array + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*array,defaultSearchValue);\n      if (comparisonResult == 0) {\n        if (mode != 2) {\n          return array;\n        }\n        return (long *)(*array + 0xf0);\n      }\n    }\n  }\n  return array;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "find_last_matching_item_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_001030ed",
                "puVar1": "dataPointer"
            },
            "code": "\nvoid extractData_001030ed(void)\n\n{\n  undefined8 *dataPointer;\n  \n  dataPointer = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)dataPointer + 0x1c);\n  DAT_0010d5b0 = (undefined *)dataPointer[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *dataPointer;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_delete_file_00105bc0",
                "param_1": "source_filepath",
                "param_2": "destination_filepath",
                "param_3": "file_permission",
                "param_4": "return_address",
                "uVar1": "copy_status",
                "piVar2": "error_location",
                "pcVar3": "error_message",
                "uVar4": "translated_error_message",
                "uVar5": "copy_result",
                "auVar6": "return_value"
            },
            "code": "\nundefined  [16] copy_and_delete_file_00105bc0(char *source_filepath,char *destination_filepath,undefined4 file_permission,undefined8 return_address)\n\n{\n  uint copy_status;\n  int *error_location;\n  char *error_message;\n  undefined8 translated_error_message;\n  ulong copy_result;\n  undefined return_value [16];\n  \n  if (destination_filepath == source_filepath) {\n    copy_result = 0;\n  }\n  else {\n    copy_status = copy_file_and_return_status_00105c00(file_permission);\n    copy_result = (ulong)copy_status;\n    if (copy_status != 0) {\n      error_location = __errno_location();\n      error_message = strerror(*error_location);\n      translated_error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00107920(translated_error_message,destination_filepath,error_message);\n    }\n    unlink(source_filepath);\n  }\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = copy_result;\n  return return_value;\n}\n\n",
            "called": [
                "FUN_00105c00",
                "FUN_00102f1e"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_delete_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "process_file_00107650",
                "param_1": "fileInfo",
                "uVar1": "returnValue",
                "lVar2": "fileResult"
            },
            "code": "\nundefined8 processFile_00107650(undefined8 fileInfo)\n\n{\n  undefined8 returnValue;\n  long fileResult;\n  \n  fileResult = check_file_info_001052a0();\n  if (fileResult < 1) {\n    returnValue = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileResult = convert_library_00105300(fileInfo,0);\n    if (fileResult == 0) {\n                    \n      xexit(1);\n    }\n    extract_and_print_archive_001058b0(fileResult);\n    returnValue = 0;\n  }\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105300",
                "xexit",
                "FUN_001052a0",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_file_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_error_00102f1e",
                "unaff_RBP": "file_size",
                "unaff_R12": "file_path",
                "unaff_retaddr": "return_address",
                "piVar1": "errno_ptr",
                "uVar2": "error_message",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copy_file_error_00102f1e(void)\n\n{\n  int *errno_ptr;\n  undefined8 error_message;\n  ulong file_size;\n  char *file_path;\n  undefined result [16];\n  undefined8 return_address;\n  \n  errno_ptr = __errno_location();\n  strerror(*errno_ptr);\n  error_message = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00107920(error_message);\n  unlink(file_path);\n  result._0_8_ = file_size & 0xffffffff;\n  result._8_8_ = return_address;\n  return result;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "handle_time_setting_error_00102fd7",
                "piVar1": "errNumPtr",
                "uVar2": "errorString",
                "__errno_location": "__getErrnoLocation",
                "strerror": "getErrorString",
                "dcgettext": "getLocalizedString",
                "print_error_message_00107920": "printErrorMessage"
            },
            "code": "\nvoid handleTimeSettingError_00102fd7(void)\n\n{\n  int *errNumPtr;\n  undefined8 errorString;\n  \n  errNumPtr = __errno_location();\n  strerror(*errNumPtr);\n  errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n  printErrorMessage(errorString);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "handle_time_setting_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "print_ar_if_not_empty_00103ba8",
                "printf": "print",
                "fflush": "flush",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid printARIfNotEmpty_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(standardOutput);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf",
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_ar_if_not_empty_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00102cd9"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00105300",
                "FUN_00102e6f",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_001031a5",
                "FUN_001058b0",
                "FUN_0010285f",
                "FUN_001075e0",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_0010266f",
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001052a0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1",
                "FUN_001028ed",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_0010266f",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_permissions_00103ddc",
                "param_1": "file"
            },
            "code": "\nvoid printFilePermissions_00103ddc(undefined8 file)\n\n{\n  print_file_permissions_001079c0(DAT_0010d578,file,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_permissions_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "errorMsg",
                "param_2": "args",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *errorMsg,__gnuc_va_list args)\n\n{\n  fflush(stdoutStream);\n  fprintf(stderrStream,\"%s: \",DAT_0010d660);\n  vfprintf(stderrStream,errorMsg,args);\n  putc(10,stderrStream);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "vfprintf",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00102710",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_version_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printVersionInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "printf",
                "dcgettext",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_version_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_entries_00105480",
                "param_1": "entryList",
                "param_2": "callback",
                "param_3": "filenames",
                "param_4": "numFiles",
                "iVar1": "comparisonResult",
                "__format": "formatString",
                "lVar2": "currentEntry",
                "plVar3": "tempEntry",
                "uVar4": "stringResult",
                "plVar5": "entryPtr",
                "local_cc": "count",
                "local_c8": "buffer"
            },
            "code": "\n\n\nvoid processEntries_00105480(long entryList,code *callback,undefined8 *filenames,int numFiles)\n\n{\n  int comparisonResult;\n  char *formatString;\n  long currentEntry;\n  long *tempEntry;\n  undefined8 stringResult;\n  long *entryPtr;\n  int count;\n  undefined buffer [152];\n  \n  currentEntry = *(long *)(entryList + 0xf0);\n  if (numFiles == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      entryPtr = *(long **)(entryList + 0xf0);\n      count = 0;\n      for (; entryPtr != (long *)0x0; entryPtr = (long *)entryPtr[0x1e]) {\n        if (*(int *)((long)entryPtr + 0xac) == 0) {\n          currentEntry = *entryPtr;\n          if (currentEntry == 0) {\n            tempEntry = (long *)entryPtr[0x1d];\n            if ((long *)entryPtr[0x1d] == (long *)0x0) {\n              tempEntry = entryPtr;\n            }\n            (**(code **)(tempEntry[1] + 0x1e8))(entryPtr,buffer);\n          }\n          else if (((*(byte *)(entryList + 0x49) & 0x10) == 0) ||\n                  (currentEntry = extract_and_copy_string_00105830(currentEntry,entryList), currentEntry != 0)) {\n            stringResult = extract_and_copy_string_00105830(*filenames,entryList);\n            comparisonResult = filename_cmp(stringResult,currentEntry);\n            if ((comparisonResult == 0) &&\n               ((DAT_0010d634 == '\\0' || (count = count + 1, count == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)entryPtr + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      stringResult = *filenames;\n      formatString = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,formatString,stringResult);\nLAB_0010553e:\n      filenames = filenames + 1;\n      numFiles = numFiles + -1;\n    } while (numFiles != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_syntax_error_in_archive_script_001031a5",
                "__format": "errorMessageFormat",
                "uVar1": "updatedVariable1"
            },
            "code": "\nvoid printSyntaxErrorInArchiveScript_001031a5(void)\n\n{\n  uint updatedVariable1;\n  char *errorMessageFormat;\n  \n  updatedVariable1 = DAT_0010d554 + 1;\n  errorMessageFormat = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(errorMessageFormat,(ulong)updatedVariable1);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_syntax_error_in_archive_script_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00102ba1",
                "FUN_0010266f",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300",
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00107c10",
                "FUN_0010342d",
                "FUN_00107690",
                "FUN_0010394a",
                "FUN_0010315d",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_001058b0",
                "FUN_00102f55"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_00105db0",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001052a0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "returnValue",
                "lVar1": "loopCounter",
                "lVar2": "newSize",
                "puVar3": "bufferPtr",
                "bVar4": "loopVar",
                "__size": "totalSize"
            },
            "code": "\nundefined8 ensureBufferStack_00103df9(void)\n\n{\n  size_t totalSize;\n  undefined8 returnValue;\n  long loopCounter;\n  long newSize;\n  undefined4 *bufferPtr;\n  byte loopVar;\n  \n  loopVar = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return returnValue;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return returnValue;\n    }\n    newSize = DAT_0010d580 + 8;\n    totalSize = newSize * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,totalSize);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      bufferPtr = (undefined4 *)((long)DAT_0010d5a8 + (totalSize - 0x40));\n      DAT_0010d580 = newSize;\n      for (loopCounter = 0x10; loopCounter != 0; loopCounter = loopCounter + -1) {\n        *bufferPtr = 0;\n        bufferPtr = bufferPtr + (ulong)loopVar * -2 + 1;\n      }\n      return returnValue;\n    }\n  }\n  print_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return returnValue;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_archive_data_00103a78",
                "param_1": "args",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archivePtr",
                "uVar3": "bytesRead",
                "uVar4": "errorStr",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "maxBytesToRead",
                "pcVar7": "errMsgTemplate",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "totalBytesInArchive",
                "auStack_b8": "stackBuffer",
                "local_88": "archiveSize"
            },
            "code": "\n\n\nvoid extractArchiveData_00103a78(undefined8 *args)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archivePtr;\n  ulong bytesRead;\n  undefined8 errorStr;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t maxBytesToRead;\n  char *errMsgTemplate;\n  ulong totalBytesRead;\n  ulong totalBytesInArchive;\n  undefined stackBuffer [48];\n  ulong archiveSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archivePtr = (undefined8 *)args[0x1d];\n  if ((undefined8 *)args[0x1d] == (undefined8 *)0x0) {\n    archivePtr = args;\n  }\n  result = (**(code **)(archivePtr[1] + 0x1e8))(args,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*args);\n    }\n    totalBytesRead = 0;\n    bfd_seek(args,0,0);\n    goto LAB_00103afd;\n  }\n  args = (undefined8 *)*args;\n  errMsgTemplate = \"internal stat error on %s\";\n  do {\n    errorStr = dcgettext(0,errMsgTemplate,5);\n    print_and_exit_on_error_00107690(errorStr,args);\n    archiveSize = totalBytesInArchive;\n    do {\n      bytesWritten = fwrite(buffer,1,maxBytesToRead,_stdout);\n      if (bytesWritten != maxBytesToRead) {\n        errnoPtr = __errno_location();\n        errMsgTemplate = strerror(*errnoPtr);\n        print_and_exit_on_error_00107690(\"stdout: %s\",errMsgTemplate);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (archiveSize <= totalBytesRead) goto LAB_00103b91;\n      maxBytesToRead = archiveSize - totalBytesRead;\n      if (0x2000 < maxBytesToRead) {\n        maxBytesToRead = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,maxBytesToRead,args);\n    } while (maxBytesToRead == bytesRead);\n    errMsgTemplate = \"%s is not a valid archive\";\n    args = *(undefined8 **)args[0x1d];\n    totalBytesInArchive = archiveSize;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "printf",
                "xmalloc",
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "bfd_seek",
                "__errno_location",
                "strerror",
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_archive_data_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00105300",
                "FUN_001078c0",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_00103e95",
                "FUN_00102f96",
                "FUN_0010285f",
                "FUN_0010266f",
                "FUN_00103c60",
                "FUN_0010336b",
                "FUN_0010342d",
                "FUN_001033b0",
                "FUN_0010394a",
                "FUN_00102d8c",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_and_print_archive_001058b0",
                "param_1": "archive_path",
                "cVar1": "result",
                "uVar2": "flags",
                "uVar4": "file_format",
                "__format": "error_message",
                "__ptr": "file_path",
                "__stream": "output_file",
                "ppcVar5": "file_data",
                "uStack0000000000000020": "file_permissions",
                "in_stack_00000028": "file_size",
                "in_stack_00000038": "timestamp",
                "local_3c": "error_code",
                "uStack_33": "file_type_indicator",
                "cStack_32": "char1",
                "cStack_31": "char2"
            },
            "code": "\n\n\nvoid extract_and_print_archive_001058b0(undefined8 *archive_path)\n\n{\n  char result;\n  uint flags;\n  int iVar3;\n  undefined8 file_format;\n  char *error_message;\n  void *file_path;\n  FILE *output_file;\n  char **file_data;\n  uint file_permissions;\n  uint file_size;\n  undefined8 timestamp;\n  int error_code [2];\n  undefined file_type_indicator;\n  char char1;\n  char char2;\n  \n  file_format = archive_path[0x1e];\n  error_code[0] = -1;\n  file_path = (void *)xstrdup(*archive_path);\n  output_file = (FILE *)extract_filename_001057a0(file_path,error_code);\n  iVar3 = error_code[0];\n  if (output_file != (FILE *)0x0) {\n    DAT_0010d618 = output_file;\n    file_data = (char **)bfd_fdopenw(output_file,*(undefined8 *)archive_path[1],error_code[0]);\n    if (file_data != (char **)0x0) {\n      DAT_0010d5e0 = file_data;\n      bfd_set_format(file_data,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)file_data + 0x49) & 0xfffffff7;\n      *(char *)((long)file_data + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)file_data + 0x44) = *(uint *)((long)file_data + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)file_data + 0x44) = *(uint *)((long)file_data + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)archive_path + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)file_data + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(file_data,file_format);\n        if (result != '\\0') break;\n        flags = exit_with_error_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)file_data + 0x44) = *(uint *)((long)file_data + 0x44) | 0x100000;\n      }\n      iVar3 = dup(iVar3);\n      result = bfd_close(file_data);\n      if (result == '\\0') {\n        exit_with_error_00107c10(file_path);\n        error_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,error_message);\n        flags = file_permissions & 0xf000;\n        if (flags == 0x4000) {\n          file_type_indicator = 100;\n        }\n        else if (flags == 0xa000) {\n          file_type_indicator = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          file_type_indicator = 0x62;\n        }\n        else if (flags == 0x2000) {\n          file_type_indicator = 99;\n        }\n        else if (flags == 0xc000) {\n          file_type_indicator = 0x73;\n        }\n        else {\n          file_type_indicator = 0x70;\n          if (flags != 0x1000) {\n            file_type_indicator = 0x2d;\n          }\n        }\n        char1 = (-((_file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n        char2 = (-((_file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_file,\"%s %ld/%ld %6lu %s \",&char1,_file_permissions >> 0x20,\n                (ulong)file_size,timestamp,&stack0xffffffffffffffd8,\n                _file_permissions & 0xffffffff);\n        fputs(*file_data,output_file);\n        if ((char)archive_path != '\\0') {\n          if ((*(byte *)((long)file_data + 0x49) & 0x10) == 0) {\n            if (file_data[0xb] != (char *)0x0) {\n              fprintf(output_file,\" 0x%lx\");\n            }\n          }\n          else if (file_data[0xc] != (char *)0x0) {\n            fprintf(output_file,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_file);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(archive_path);\n      iVar3 = copy_and_delete_file_00105bc0(output_file,file_path,iVar3);\n      if (iVar3 == 0) {\n        free(file_path);\n        free(output_file);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(iVar3);\n    exit_with_error_00107c10(file_path);\n  }\n  file_format = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  exit_with_error_00107c10(file_format);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "bfd_set_format",
                "FUN_001057a0",
                "FUN_00107c10",
                "xstrdup",
                "dcgettext",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_00102bf5"
            },
            "code": "\nvoid cleanup_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "fclose",
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020",
                "undefined": "indirectFunctionPtr"
            },
            "code": "\nvoid executeIndirectCall_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(indirectFunctionPtr *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_001078c0",
                "FUN_00102f96",
                "FUN_00103ba8",
                "FUN_00103bd1"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "reset_counter_00102943"
            },
            "code": "\nvoid resetCounter_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_00105570",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "reset_counter_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103df9",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "error",
                "pcVar3": "errorMessage",
                "uVar4": "translatedErrorMessage",
                "local_38": "accessTime",
                "uStack_34": "modificationTime",
                "uStack_30": "changeTime",
                "uStack_2c": "backupTime",
                "local_28": "creationTime"
            },
            "code": "\nvoid setFileTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *error;\n  char *errorMessage;\n  undefined8 translatedErrorMessage;\n  undefined4 accessTime;\n  undefined4 modificationTime;\n  undefined4 changeTime;\n  undefined4 backupTime;\n  undefined4 creationTime;\n  undefined4 uStack_24;\n  undefined4 uStack_20;\n  undefined4 uStack_1c;\n  \n  creationTime = *(undefined4 *)(fileInfo + 0x58);\n  uStack_24 = *(undefined4 *)(fileInfo + 0x5c);\n  uStack_20 = *(undefined4 *)(fileInfo + 0x60);\n  uStack_1c = *(undefined4 *)(fileInfo + 100);\n  accessTime = *(undefined4 *)(fileInfo + 0x48);\n  modificationTime = *(undefined4 *)(fileInfo + 0x4c);\n  changeTime = *(undefined4 *)(fileInfo + 0x50);\n  backupTime = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&accessTime,0);\n  if (result != 0) {\n    error = __errno_location();\n    errorMessage = strerror(*error);\n    translatedErrorMessage = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00107920(translatedErrorMessage,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "utimensat",
                "FUN_00102fd7"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_00105db0",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "create_output_file_00105a20",
                "param_1": "outputPath",
                "pcVar1": "baseDir",
                "pcVar2": "subDir",
                "uVar3": "outputName",
                "uVar4": "errorMessage",
                "pFVar5": "filePtr",
                "sVar6": "baseDirLength"
            },
            "code": "\nvoid createOutputFile_00105a20(char *outputPath)\n\n{\n  char *baseDir;\n  char *subDir;\n  undefined8 outputName;\n  undefined8 errorMessage;\n  FILE *filePtr;\n  size_t baseDirLength;\n  \n  baseDir = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    outputName = lbasename();\n    baseDir = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_message_00107920(errorMessage,baseDir,outputName);\n    DAT_0010d618 = (char *)outputName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (baseDirLength = strlen(DAT_0010d5e8), baseDirLength != 0)) {\n        if (baseDir[baseDirLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(baseDir,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(baseDir,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      filePtr = fopen(DAT_0010d618,\"w\");\n      if (filePtr == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    subDir = outputPath;\n    if ((*outputPath == '.') && (subDir = outputPath + 1, outputPath[1] == '.')) {\n      subDir = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*subDir != '\\0' && (*subDir != '/')); subDir = subDir + 1) {\n    }\n    for (; outputPath = subDir, *subDir == '/'; subDir = subDir + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "create_output_file_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_001079c0",
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102bb0",
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_error_00102f55",
                "unaff_R12D": "fileDescriptor",
                "iVar1": "previousError",
                "piVar2": "errorPointer"
            },
            "code": "\nundefined8 closeFileAndSetError_00102f55(void)\n\n{\n  int previousError;\n  int *errorPointer;\n  int fileDescriptor;\n  \n  errorPointer = __errno_location();\n  previousError = *errorPointer;\n  close(fileDescriptor);\n  *errorPointer = previousError;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_and_set_error_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_filename_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "iVar1": "temp_file_descriptor",
                "pcVar2": "last_slash",
                "lVar3": "filename_length",
                "lVar4": "iterator",
                "lVar5": "slash_position",
                "pcVar6": "new_file_path",
                "bVar7": "is_null_byte_present",
                "auVar8": "result"
            },
            "code": "\nundefined  [16] extract_filename_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  int temp_file_descriptor;\n  char *last_slash;\n  long filename_length;\n  long iterator;\n  long slash_position;\n  char *new_file_path;\n  byte is_null_byte_present;\n  undefined result [16];\n  \n  is_null_byte_present = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    filename_length = 0;\n  }\n  else {\n    slash_position = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(slash_position + 0xb);\n    filename_length = slash_position + 1;\n    new_file_path = last_slash;\n    for (iterator = slash_position; iterator != 0; iterator = iterator + -1) {\n      *new_file_path = *file_path;\n      file_path = file_path + (ulong)is_null_byte_present * -2 + 1;\n      new_file_path = new_file_path + (ulong)is_null_byte_present * -2 + 1;\n    }\n    last_slash[slash_position] = '/';\n  }\n  *(undefined8 *)(last_slash + filename_length) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + filename_length) + 8) = 0;\n  temp_file_descriptor = mkstemp(last_slash);\n  if (temp_file_descriptor == -1) {\n    new_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = temp_file_descriptor;\n    new_file_path = last_slash;\n  }\n  result._8_8_ = unused_param_2;\n  result._0_8_ = new_file_path;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102ba1",
                "xmalloc",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_filename_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00102bf5",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "print_file_info_00102d8c",
                "param_19": "fileMode",
                "unaff_RBX": "fileData",
                "unaff_RBP": "outputFile",
                "unaff_R12B": "useHex",
                "__format": "corruptTimeFormat",
                "uVar1": "fileType",
                "uStack0000000000000015": "fileTypeSymbol",
                "cStack0000000000000016": "symbol1",
                "cStack0000000000000017": "symbol2",
                "param_9": "symbol3",
                "cStack0000000000000019": "symbol4",
                "cStack000000000000001a": "symbol5",
                "cStack000000000000001b": "symbol6",
                "cStack000000000000001c": "symbol7",
                "cStack000000000000001d": "symbol8",
                "cStack000000000000001e": "symbol9",
                "uStack000000000000001f": "useHexSymbol",
                "uStack000000000000006c": "value1",
                "param_20": "value2",
                "param_22": "value3",
                "stack0x00000020": "timeString"
            },
            "code": "\nvoid printFileInfo_00102d8c(void)\n\n{\n  char *corruptTimeFormat;\n  uint fileType;\n  char **fileData;\n  FILE *outputFile;\n  char useHex;\n  undefined fileTypeSymbol;\n  char symbol1;\n  char symbol2;\n  char symbol3;\n  char symbol4;\n  char symbol5;\n  char symbol6;\n  char symbol7;\n  char symbol8;\n  char symbol9;\n  undefined useHexSymbol;\n  uint fileMode;\n  uint value1;\n  uint value2;\n  undefined8 value3;\n  \n  corruptTimeFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&timeString,corruptTimeFormat);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    fileTypeSymbol = 100;\n  }\n  else if (fileType == 0xa000) {\n    fileTypeSymbol = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    fileTypeSymbol = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    fileTypeSymbol = 99;\n  }\n  else if (fileType == 0xc000) {\n    fileTypeSymbol = 0x73;\n  }\n  else {\n    fileTypeSymbol = 0x70;\n    if (fileType != 0x1000) {\n      fileTypeSymbol = 0x2d;\n    }\n  }\n  symbol1 = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  symbol2 = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  symbol3 = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  symbol4 = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  symbol5 = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  symbol6 = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  symbol7 = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  symbol8 = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  symbol9 = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (symbol3 == 'x') {\n      symbol3 = 's';\n    }\n    else {\n      symbol3 = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (symbol6 == 'x') {\n      symbol6 = 's';\n    }\n    else {\n      symbol6 = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (symbol9 == 'x') {\n      symbol9 = 't';\n    }\n    else {\n      symbol9 = 'T';\n    }\n  }\n  useHexSymbol = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)value1,\n          (ulong)value2,value3,&timeString,(ulong)fileMode);\n  fputs(*fileData,outputFile);\n  if (useHex != '\\0') {\n    if ((*(byte *)((long)fileData + 0x49) & 0x10) == 0) {\n      if (fileData[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileData[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fputc",
                "fprintf",
                "sprintf",
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00105c00",
                "FUN_001025a0",
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00103e95",
                "FUN_001031cf",
                "FUN_001028ed",
                "FUN_00102f55",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "convert_library_00105300",
                "param_1": "inputPath",
                "param_2": "outputPaths",
                "plVar1": "archivedFilePointers",
                "pcVar2": "defaultPlugin",
                "bVar3": "isThinLibrary",
                "cVar4": "conversionError",
                "iVar5": "result",
                "uVar6": "errorMessage",
                "uVar7": "libraryPath",
                "piVar8": "errnoLocation",
                "lVar9": "archivedFile",
                "puVar10": "extractedFiles",
                "local_b0": "matchingFormat",
                "local_a8": "fileStats"
            },
            "code": "\n\n\nundefined8 * convertLibrary_00105300(char *inputPath,undefined8 *outputPaths)\n\n{\n  long *archivedFilePointers;\n  char *defaultPlugin;\n  byte isThinLibrary;\n  char conversionError;\n  int result;\n  undefined8 errorMessage;\n  undefined8 libraryPath;\n  int *errnoLocation;\n  long archivedFile;\n  undefined8 *extractedFiles;\n  undefined8 matchingFormat;\n  stat fileStats;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  result = stat(inputPath,&fileStats);\n  defaultPlugin = DAT_0010d618;\n  if (result == 0) goto LAB_001053be;\n  errnoLocation = __errno_location();\n  if (*errnoLocation == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(inputPath);\n      check_and_exit_if_zero_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (outputPaths != (undefined8 *)0x0)) {\n      extractedFiles = (undefined8 *)extract_archived_files_00102710();\n      return extractedFiles;\n    }\n    outputPaths = (undefined8 *)bfd_openw(inputPath,DAT_0010d5f0);\n    if (((outputPaths != (undefined8 *)0x0) && (conversionError = bfd_set_format(outputPaths,2), conversionError != '\\0')) &&\n       (conversionError = bfd_close(outputPaths), conversionError != '\\0')) {\n      defaultPlugin = inputPath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  exit_with_error_00107c10(inputPath);\n  do {\n    isThinLibrary = *(byte *)((long)outputPaths + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryPath = *outputPaths;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_and_exit_on_error_00107690(errorMessage,libraryPath);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryPath = *outputPaths;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_and_exit_on_error_00107690(errorMessage,libraryPath);\nLAB_001027cb:\n      print_error_message_00107c20(inputPath);\n      result = bfd_get_error();\n      if (result == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matchingFormat);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      archivedFilePointers = outputPaths + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(outputPaths,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(outputPaths,archivedFile)) {\n        *archivedFilePointers = archivedFile;\n        archivedFilePointers = (long *)(archivedFile + 0xf0);\n      }\n      *archivedFilePointers = 0;\n      result = bfd_get_error();\n      if (result == 9) {\n        return outputPaths;\n      }\n      do {\n        exit_with_error_00107c10(inputPath);\nLAB_00102826:\n        libraryPath = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(libraryPath,inputPath);\n        defaultPlugin = inputPath;\nLAB_001053be:\n        DAT_0010d618 = defaultPlugin;\n        outputPaths = (undefined8 *)bfd_openr(inputPath,DAT_0010d5f0);\n      } while (outputPaths == (undefined8 *)0x0);\n      conversionError = bfd_check_format_matches(outputPaths,2,&matchingFormat);\n      if (conversionError == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(outputPaths,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_openw",
                "bfd_set_format",
                "FUN_00107c10",
                "dcgettext",
                "bfd_openr",
                "xexit",
                "bfd_openr_next_archived_file",
                "FUN_00107690",
                "bfd_set_error",
                "stat",
                "FUN_00102710",
                "bfd_close",
                "bfd_check_format_matches",
                "FUN_00107c20",
                "bfd_get_error",
                "fprintf",
                "perror",
                "__errno_location",
                "FUN_00103bd1",
                "FUN_0010315d",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "convert_library_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "read_and_process_files_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePointer",
                "puVar2": "uintPointer",
                "bVar3": "byteVar",
                "plVar4": "longPointer",
                "puVar5": "undefined8Pointer",
                "uVar6": "undefined4Var",
                "uVar7": "undefined4Var",
                "bVar8": "boolVar",
                "bVar9": "boolVar",
                "ppcVar10": "charDoublePointer",
                "piVar11": "intPointer",
                "puVar12": "undefinedPointer",
                "bVar13": "byteVar",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "undefined4Var",
                "pFVar18": "filePointer",
                "sVar19": "sizeVar",
                "sVar20": "sizeVar",
                "__ptr": "bytePointer",
                "plVar21": "longPointer",
                "pFVar22": "filePointer",
                "pcVar23": "charPointer",
                "lVar24": "longVar",
                "uVar25": "ulongVar",
                "puVar26": "undefined8Pointer",
                "uVar27": "undefined8Var",
                "pFVar28": "filePointer",
                "lVar34": "longVar",
                "lVar35": "longVar",
                "uVar37": "uintVar",
                "unaff_RBP": "charPointer",
                "pbVar38": "bytePointer",
                "pcVar39": "charPointer",
                "uVar44": "uintVar",
                "iVar45": "intVar",
                "bVar47": "boolVar",
                "bVar48": "byteVar",
                "local_130": "filePointer",
                "local_128": "filePointer",
                "local_118": "bytePointer",
                "local_110": "charDoublePointer",
                "local_108": "sizeVar",
                "local_100": "longVar",
                "local_c8": "undefinedArray",
                "uStack_c6": "undefinedVar",
                "uStack_c5": "undefined5Var",
                "local_b0": "uintVar"
            },
            "code": "\n\n\nvoid readAndProcessFiles_00105db0(uint argc,FILE *argv)\n\n{\n  byte *bytePointer;\n  uint *uintPointer;\n  byte byteVar;\n  long *longPointer;\n  undefined8 *undefined8Pointer;\n  undefined4 undefined4Var;\n  undefined4 undefined4Var;\n  bool boolVar;\n  bool boolVar;\n  char **charDoublePointer;\n  int *intPointer;\n  undefined *undefinedPointer;\n  byte byteVar;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 undefined4Var;\n  FILE *filePointer;\n  size_t sizeVar;\n  size_t sizeVar;\n  byte *bytePointer;\n  long *longPointer;\n  FILE *filePointer;\n  char *charPointer;\n  long longVar;\n  ulong ulongVar;\n  undefined8 *undefined8Pointer;\n  undefined8 undefined8Var;\n  FILE *filePointer;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVar3;\n  long longVar;\n  long longVar;\n  undefined **ppuVar36;\n  uint uintVar;\n  char *charPointer;\n  byte *bytePointer;\n  char *charPointer;\n  ulong uVar40;\n  ulong uVar41;\n  ulong uVar42;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar;\n  int intVar;\n  char *pcVar46;\n  bool boolVar;\n  byte byteVar;\n  undefined8 filePointer;\n  FILE *filePointer;\n  byte *bytePointer;\n  char **charDoublePointer;\n  size_t sizeVar;\n  long longVar;\n  undefined undefinedArray [2];\n  undefined undefinedVar;\n  undefined5 undefined5Var;\n  uint uintVar;\n  \n  byteVar = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePointer = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charDoublePointer = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  filePointer = (FILE *)0x0;\n  filePointer = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    charPointer = (char *)(long)(int)uintVar;\n    filePointer = (FILE *)((long)charPointer * 8);\n    pcVar43 = (char *)filePointer;\n    if (**(char **)(&filePointer->_flags + (long)charPointer * 2) == '@') {\n      uintVar = (int)charDoublePointer - 1;\n      charDoublePointer = (char **)(ulong)uintVar;\n      if (uintVar == 0) {\n        longPointer = *(long **)filePointer;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPointer);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      charPointer = *(char **)(&filePointer->_flags + (long)charPointer * 2) + 1;\n      intVar = stat(charPointer,(stat *)undefinedArray);\n      if (-1 < intVar) {\n        if ((uintVar & 0xf000) == 0x4000) {\n          longPointer = *(long **)filePointer;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePointer = fopen(charPointer,\"r\");\n        if (filePointer != (FILE *)0x0) {\n          intVar = fseek(filePointer,0,2);\n          if (((intVar != -1) && (sizeVar = ftell(filePointer), sizeVar != 0xffffffffffffffff)) &&\n             (intVar = fseek(filePointer,0,0), intVar != -1)) {\n            bytePointer = (byte *)xmalloc(sizeVar + 1);\n            sizeVar = fread(bytePointer,1,sizeVar,filePointer);\n            if ((sizeVar == sizeVar) || (intVar = ferror(filePointer), intVar == 0)) {\n              bytePointer[sizeVar] = 0;\n              byteVar = *bytePointer;\n              pbyteVar3 = bytePointer;\n              while( true ) {\n                if (byteVar == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar * 2] & 0x40) == 0) break;\n                byteVar = pbyteVar3[1];\n                pbyteVar3 = pbyteVar3 + 1;\n              }\n              sizeVar = strlen((char *)bytePointer);\n              bytePointer = (byte *)xmalloc(sizeVar + 1);\n              filePointer = (FILE *)0x0;\n              intVar = 0;\n              boolVar = false;\n              boolVar = false;\n              boolVar = false;\n              longVar = 0;\n              pbyteVar3 = bytePointer;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVar3 * 2] & 0x40) != 0) {\n                  pbyteVar3 = pbyteVar3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)longVar)) {\n                  if (filePointer == (FILE *)0x0) {\n                    intVar = 8;\n                    filePointer = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + longVar * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    filePointer = (FILE *)xrealloc(filePointer,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&filePointer->_flags + longVar * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePointer->_flags + longVar * 8);\n                }\n                byteVar = *pbyteVar3;\n                bytePointer = bytePointer;\n                while (byteVar != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar | boolVar | boolVar))) {\n                      boolVar = false;\n                      boolVar = false;\n                      boolVar = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar) break;\n                    pbyteVar3 = pbyteVar3 + 1;\n                    *bytePointer = byteVar;\n                    bytePointer = bytePointer + 1;\n                    boolVar = false;\n                    byteVar = *pbyteVar3;\n                    if (byteVar == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar == 0x5c) {\n                    boolVar = true;\n                  }\n                  else if (boolVar) {\n                    if (byteVar == 0x27) {\n                      boolVar = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *bytePointer = byteVar;\n                      bytePointer = bytePointer + 1;\n                    }\n                  }\n                  else if (boolVar) {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = false;\n                  }\n                  else if (byteVar == 0x27) {\n                    boolVar = true;\n                  }\n                  else {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = true;\n                  }\n                  bytePointer = pbyteVar3 + 1;\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = *bytePointer;\n                }\nLAB_0010606f:\n                *bytePointer = 0;\n                longPointer = (long *)xstrdup(bytePointer);\n                *ppcVar31 = (char *)longPointer;\n                *(undefined8 *)(filePointer->_shortbuf + longVar * 8 + -0x7b) = 0;\n                byteVar = *pbyteVar3;\n                byteVar = (&_sch_istable)[(ulong)byteVar * 2];\n                while ((byteVar & 0x40) != 0) {\n                  byteVar = pbyteVar3[1];\n                  pbyteVar3 = pbyteVar3 + 1;\n                  byteVar = (&_sch_istable)[(ulong)byteVar * 2];\n                }\n                longVar = longVar + 1;\n                if (byteVar == 0) {\n                  free(bytePointer);\n                  if (filePointer == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(bytePointer);\n          }\n          fclose(filePointer);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d65c < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        charPointer = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        charPointer = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPointer = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = process_functions_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPointer = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(undefinedPointer + (long)intVar * 8 + 0x10) = cleanup_files_00107730;\n          }\n          else {\n            undefined8Pointer = (undefined8 *)malloc(0x110);\n            if (undefined8Pointer != (undefined8 *)0x0) {\n              *undefined8Pointer = undefinedPointer;\n              *(undefined4 *)(undefined8Pointer + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Pointer;\n              goto LAB_0010632b;\n            }\n          }\n          longVar = 1;\n          do {\n            longVar = longVar;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)longVar) break;\n            charVar = initialize_application_00107640(*(undefined8 *)((int *)pcVar43 + longVar * 2));\n            longVar = longVar + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar * 8 + -8);\n          uintVar = intVar - ((int)longVar + -1);\n          filePointer = (FILE *)(ulong)uintVar;\n          if (_DAT_0010d65c != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uintVar = 0;\n            while (intVar = getopt_long(filePointer,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uintVar = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar < 2) {\nLAB_00107125:\n              charPointer = (char *)0x0;\n              print_index_options_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_index_options_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_version_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar <= (int)pcVar43) goto LAB_00106f8b;\n                charPointer = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uintVar != '\\0') break;\n                uintVar = process_file_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (longVar = check_file_info_001052a0(charPointer), longVar < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              intPointer = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPointer + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uintVar <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              charPointer = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPointer * 8 + -0x7b);\n            }\n            intVar = open(charPointer,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              exit_with_error_00107c10(charPointer);\nLAB_0010737f:\n              exit_with_error_00107c10(charPointer);\nLAB_00107387:\n              print_error_message_00107c20(charPointer);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(undefined5Var,\n                                      CONCAT12(undefinedVar,CONCAT11(undefinedArray[1],undefinedArray[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            charPointer = (char *)bfd_fdopenr(charPointer,0);\n            if ((FILE *)charPointer == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(charPointer,2,undefinedArray);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)charPointer + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPointer = (uint *)((long)((long)charPointer + 0x40) + 4);\n                *uintPointer = *uintPointer | 0x2000;\n              }\n              (**(code **)(*(char **)((long)charPointer + 8) + 0x1f0))(charPointer);\n              charVar = bfd_close(charPointer);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var = dcgettext(0,\"%s: no archive map to update\",5);\n            print_and_exit_on_error_00107690(undefined8Var,charPointer);\nLAB_001073cc:\n            charPointer = (char *)lbasename(DAT_0010d660);\n            sizeVar = strlen(charPointer);\n            if ((sizeVar < 6) ||\n               (intVar = filename_cmp(charPointer + (sizeVar - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d65c = 0;\n            }\n            else {\n              _DAT_0010d65c = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          charPointer = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePointer = (FILE *)charPointer;\n          filePointer = filePointer;\n          if ((int)uintVar < 2) goto switchD_00107462_caseD_1;\n          filePointer = (FILE *)CONCAT71(filePointer._1_7_,(char)uintVar);\nLAB_001063a3:\n          filePointer = (FILE *)charPointer;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            undefinedArray[0] = 0x2d;\n            undefinedVar = 0;\n            sizeVar = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sizeVar + (int)filePointer;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            undefined4Var = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = undefined4Var;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            filePointer = (FILE *)((long)pcVar46 + 0x10);\n            charDoublePointer = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              bytePointer = undefinedArray;\n              undefinedArray[1] = *(char *)ppcVar31;\n              charPointer = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = charPointer;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefinedArray[1] = *(char *)((long)ppcVar31 + 1);\n                charPointer = (char *)xstrdup(bytePointer);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = charPointer;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefinedArray[1] = *(char *)((long)ppcVar31 + 2);\n                  charPointer = (char *)xstrdup(bytePointer);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = charPointer;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    undefinedArray[1] = *(char *)((long)ppcVar31 + 3);\n                    charPointer = (char *)xstrdup(bytePointer);\n                    unaff_R12->_IO_write_base = charPointer;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    charDoublePointer = ppcVar32;\n                    if (charVar != '\\0') {\n                      charPointer = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefinedArray[1] = charVar;\n                        charPointer = (char *)xstrdup(bytePointer);\n                        charPointer = charPointer + 1;\n                        *ppcVar31 = charPointer;\n                        charVar = *charPointer;\n                        ppcVar31 = ppcVar32;\n                        charDoublePointer = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar = (long)(int)filePointer;\n            intPointer = (int *)pcVar46 + longVar * 2;\n            if (filePointer < intPointer) {\n              ulongVar = longVar * 8 - 0x11;\n              if ((ulongVar < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPointer) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPointer &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPointer)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPointer)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPointer)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charDoublePointer = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPointer;\n                      ppcVar31 = ppcVar31 + (ulong)byteVar * -2 + 1) {\n                    *charDoublePointer = *ppcVar31;\n                    charDoublePointer = charDoublePointer + (ulong)byteVar * -2 + 1;\n                  }\n                }\n              }\n              else {\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                undefined4Var = *(undefined4 *)((long)pcVar46 + 0x18);\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                uVar40 = (ulongVar >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = undefined4Var;\n                *(undefined4 *)(ppcVar32 + 1) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = undefined4Var;\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                undefined4Var = *(undefined4 *)((long)pcVar46 + 0x28);\n                undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar = uVar40 >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = undefined4Var;\n                *(undefined4 *)(ppcVar32 + 3) = undefined4Var;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = undefined4Var;\n                if (ulongVar != 2) {\n                  undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  undefined4Var = *(undefined4 *)((long)pcVar46 + 0x38);\n                  undefined4Var = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = undefined4Var;\n                  *(undefined4 *)(ppcVar32 + 5) = undefined4Var;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = undefined4Var;\n                  if (ulongVar != 3) {\n                    uVar41 = 3;\n                    do {\n                      uVar42 = uVar41 + 1;\n                      charPointer = (char *)((long)pcVar46 + 0x83) + uVar41 * 0x10 + -0x73;\n                      undefined4Var = *(undefined4 *)(charPointer + 4);\n                      undefined4Var = *(undefined4 *)(charPointer + 8);\n                      undefined4Var = *(undefined4 *)(charPointer + 0xc);\n                      ppcVar31 = ppcVar32 + uVar41 * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)charPointer;\n                      *(undefined4 *)((long)ppcVar31 + 4) = undefined4Var;\n                      *(undefined4 *)(ppcVar31 + 1) = undefined4Var;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = undefined4Var;\n                      uVar41 = uVar42;\n                    } while (uVar42 != ulongVar);\n                  }\n                }\n                if ((uVar40 & 1) != 0) {\n                  ppcVar32[uVar40 & 0xfffffffffffffffe] =\n                       *(char **)((long)filePointer + (uVar40 & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar + -2;\n            }\n            filePointer = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uintVar = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer,ppuVar36,0);\n            charPointer = (char *)filePointer;\n            if (uintVar == 0xffffffff) break;\n            if (((uintVar - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePointer = (FILE *)pcVar46;\n            if (uintVar < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_archive_instructions_0010342d(0);\n            pcVar46 = (char *)filePointer;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintVar = DAT_0010d64c;\n          filePointer = (FILE *)charPointer;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePointer <= _optind || (_optind < 1)))) {\n              uintVar = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar = (int)filePointer - (_optind + -1);\n            filePointer = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)filePointer & 0xff);\n          uintVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_version_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePointer = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintVar == 3) goto LAB_00106abc;\n                  if (uintVar != 0) goto LAB_00106700;\nLAB_00106eff:\n                  charPointer = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar == 3) || (uintVar == 0)) {\n                if (DAT_0010d648 == 1) {\n                  undefined4Var = process_file_00107650();\n                    \n                  xexit(undefined4Var);\n                }\nLAB_00106abc:\n                if (uintVar == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  charPointer = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              charPointer = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                charPointer = (char *)0x1;\n                charPointer = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                charPointer = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)charPointer;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_and_exit_on_error_00107690(undefined8Var);\n                    uintVar = extraout_EDX;\nLAB_00107548:\n                    if (uintVar == 2) {\nLAB_0010704f:\n                      charPointer = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  charPointer = (char *)(ulong)(intVar + 1);\n                  longVar = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  charPointer = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar = (long)(int)charPointer;\n              filePointer = (FILE *)charPointer;\n              if (*(long *)(int *)((long)ppuVar36 + longVar * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePointer = (FILE *)((long)ppuVar36 + (longVar + 1) * 2 * 4);\n              if (*(FILE **)filePointer == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePointer = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePointer = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePointer;\n                  filePointer = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar * 2 * 4) + (long)filePointer * 2) !=\n                         0);\n              }\n              undefined8Pointer = (undefined8 *)convert_library_00105300();\n              filePointer = filePointer;\n              if (DAT_0010d64c == 5) {\n                charPointer = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Pointer + 0x49) & 0x10) == 0) {\n                  charPointer = (char *)filePointer;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_entries_00105480(undefined8Pointer,process_archives_00107740,charPointer,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                charPointer = (char *)(sizeVar + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Pointer);\n                if (DAT_0010d620 == 0) {\n                  charPointer = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar = bfd_find_target(\"binary\",DAT_0010d620);\n                  charPointer = \"Cannot set libdeps record type to binary.\";\n                  if (longVar != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    charPointer = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    charPointer = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePointer = (FILE *)bfd_bwrite(DAT_0010d628,charPointer,DAT_0010d620);\n                    charPointer = \"Cannot write libdeps record.\";\n                    if (filePointer != (FILE *)charPointer) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    charPointer = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    charPointer = \"Cannot reset libdeps record type.\";\n                    if (longVar == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    filePointer = (FILE *)((long)(intVar + 2) * 8);\n                    charPointer = (char *)xmalloc(filePointer,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      longVar = 0;\n                    }\n                    else {\n                      undefined4Var = *(undefined4 *)&filePointer->field_0x4;\n                      *(int *)charPointer = filePointer->_flags;\n                      *(undefined4 *)((long)charPointer + 4) = undefined4Var;\n                      longVar = 8;\n                      ppcVar31 = (char **)((long)charPointer + 8);\n                      for (pcVar43 = filePointer[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePointer->_flags;\n                        filePointer = (FILE *)((long)filePointer + (ulong)byteVar * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)byteVar * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)charPointer + longVar) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)charPointer + -0xd8))->_unused2 + 0xc + (long)filePointer) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePointer = (FILE *)charPointer;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                charPointer = (char *)filePointer;\n                if (filePointer == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePointer = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                charPointer = (char *)filePointer;\n                if ((filePointer != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_files_00105570(undefined8Pointer,charPointer,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_3:\n                process_entries_00105480(undefined8Pointer,print_file_permissions_00107890,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                charPointer = (char *)filePointer;\nswitchD_00106ed8_caseD_4:\n                process_entries_00105480(undefined8Pointer,extract_archive_data_00103a78,charPointer,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                charPointer = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePointer == (FILE *)0x0) break;\nLAB_00106afb:\n                filePointer = (FILE *)(undefined8Pointer + 0x1e);\n                do {\n                  unaff_R12 = filePointer;\n                  if (*(FILE **)filePointer == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_and_print_archive_001058b0(undefined8Pointer);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPointer = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePointer;\n                    if (longPointer == (long *)0x0) {\n                      undefined8Var = *undefined8Pointer;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_and_exit_on_error_00107690(uVar30,pcVar46,undefined8Var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar = *longPointer;\n                    undefined8Var = extract_and_copy_string_00105830(pcVar46,undefined8Pointer);\n                    intVar = filename_cmp(undefined8Var,longVar);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPointer[0x1e];\n                  pplVar29 = (long **)find_last_matching_item_00105870(filePointer,3,0);\n                  boolVar = DAT_0010d60c != 0;\n                  longPointer = *pplVar29;\n                  *pplVar29 = longPointer;\n                  longPointer[0x1e] = (long)longPointer;\n                  if (boolVar) {\n                    printf(\"m - %s\\n\",*(FILE **)filePointer);\n                  }\n                  filePointer = (FILE *)&filePointer->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_archive_instructions_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar);\n          process_archive_script_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        undefined4Var = bfd_get_error();\n        filePointer = (FILE *)bfd_errmsg(undefined4Var);\n        undefined8Var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = print_and_exit_on_error_00107690(undefined8Var,\"x86_64-pc-linux-gnu\",filePointer);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)charPointer;\n          filePointer = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            charPointer = \"libdeps specified more than once\";\n            charPointer = (char *)filePointer;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        charPointer = \"two different operation options specified\";\n        charPointer = (char *)filePointer;\nLAB_00106803:\n        undefined8Var = dcgettext(0,charPointer,5);\n        print_and_exit_on_error_00107690(undefined8Var);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        filePointer = (FILE *)xmalloc(8);\n        *(long **)filePointer = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            longVar = 1;\n            do {\n              intVar = (int)longVar;\n              longVar = longVar * 2;\n              longVar = longVar + 1;\n            } while (*(long *)((int *)pcVar43 + longVar) != 0);\n          }\n          filePointer = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          longPointer = *(long **)pcVar43;\n          longVar = 0;\n          while (longPointer != (long *)0x0) {\n            undefined8Var = xstrdup();\n            *(undefined8 *)((long)&filePointer->_flags + longVar) = undefined8Var;\n            longPointer = *(long **)((char *)((long)pcVar43 + 0x83) + longVar + -0x7b);\n            longVar = longVar + 8;\n          }\n          *(undefined8 *)((long)&filePointer->_flags + longVar) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)filePointer;\n          if (*(long **)filePointer == (long *)0x0) goto LAB_00106a80;\n          longVar = 0;\n          do {\n            longVar = longVar + 1;\n            longVar = longVar * 8;\n            longVar = longVar;\n          } while (*(long *)(filePointer->_shortbuf + longVar + -0x7b) != 0);\n          sizeVar = longVar * 8;\n        }\n        else {\nLAB_00106a80:\n          longVar = 0;\n          sizeVar = 0;\n        }\n        longVar = (long)charPointer * 2;\n        charPointer = (char *)((long)(char **)charPointer + longVar);\n        free(*(void **)((int *)pcVar43 + longVar));\n        filePointer = (FILE *)xrealloc(pcVar43,(longVar + 1 + (long)intVar) * 8);\n        uintVar = intVar + -1 + (int)longVar;\n        pcVar46 = (char *)(ulong)uintVar;\n        memmove(&filePointer->_flags + (long)charPointer * 2,\n                (void *)((long)&filePointer->_IO_read_ptr + (long)filePointer),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&filePointer->_flags + (long)&filePointer->_flags),filePointer,sizeVar);\n        free(filePointer);\n        free(bytePointer);\n        fclose(filePointer);\n        uintVar = (int)filePointer + 1;\n        unaff_R12 = filePointer;\n        pcVar43 = (char *)filePointer;\n        filePointer = filePointer;\n        if ((int)uintVar < (int)uintVar) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    filePointer = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)filePointer & 0xffffffff,pcVar46,filePointer,\"x86_64-pc-linux-gnu\");\n  charPointer = (char *)filePointer;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_message_00107920(undefined8Var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)charPointer == (FILE *)0x0) {\n    if ((char)filePointer != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar = 0;\n  intVar = strcmp((char *)*(FILE **)charPointer,\"__.SYMDEF\");\n  undefined8Pointer = undefined8Pointer;\n  if (intVar == 0) {\n    *(byte *)((long)undefined8Pointer + 0x49) = *(byte *)((long)undefined8Pointer + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPointer = undefined8Pointer + 0x1e;\n      if ((undefined8 *)*longPointer == (undefined8 *)0x0) break;\n      undefined8Var = *(undefined8 *)*longPointer;\n      uVar30 = extract_and_copy_string_00105830(*(FILE **)charPointer,undefined8Pointer);\n      intVar = filename_cmp(uVar30,undefined8Var);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar = intVar + 1, intVar == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)charPointer);\n        }\n        *longPointer = *(long *)(*longPointer + 0xf0);\n        filePointer = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Pointer = (undefined8 *)*longPointer;\n    }\n    if (DAT_0010d60c != 0) {\n      filePointer = *(FILE **)charPointer;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePointer);\n    }\n  }\nLAB_00106d38:\n  charPointer = (char *)((long)charPointer + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "bfd_bwrite",
                "strtol",
                "bfd_init",
                "isatty",
                "FUN_00107640",
                "FUN_001075e0",
                "bindtextdomain",
                "FUN_00103a78",
                "bfd_find_target",
                "memcpy",
                "fread",
                "FUN_00107730",
                "FUN_00105570",
                "FUN_00107c20",
                "bfd_plugin_set_plugin",
                "FUN_001052a0",
                "bfd_plugin_set_program_name",
                "open",
                "xrealloc",
                "bfd_create",
                "FUN_00107650",
                "FUN_00107740",
                "setlocale",
                "bfd_set_format",
                "xexit",
                "bfd_make_writable",
                "strcmp",
                "stat",
                "fseek",
                "bfd_fdopenr",
                "xmalloc",
                "lbasename",
                "bfd_set_error_program_name",
                "fprintf",
                "getopt_long",
                "xmalloc_set_program_name",
                "FUN_00105870",
                "FUN_00105300",
                "printf",
                "FUN_00105830",
                "dcgettext",
                "FUN_00107cc0",
                "bfd_set_error",
                "memmove",
                "fclose",
                "strlen",
                "bfd_close",
                "free",
                "bfd_set_default_target",
                "bfd_check_format_matches",
                "filename_cmp",
                "xstrdup",
                "ftell",
                "FUN_00105480",
                "FUN_0010394a",
                "FUN_00107920",
                "bfd_errmsg",
                "FUN_00107c10",
                "fileno",
                "FUN_00103e95",
                "FUN_00107690",
                "fopen",
                "ferror",
                "FUN_001058b0",
                "FUN_00107890",
                "FUN_0010342d",
                "bfd_get_error",
                "textdomain",
                "bfd_make_readable",
                "malloc",
                "FUN_00103bd1"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "read_and_process_files_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "__format": "formatString",
                "plVar2": "currentFormatString"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 uVar1;\n  char *formatString;\n  long *currentFormatString;\n  \n  fflush(_stdout);\n  uVar1 = DAT_0010d660;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,uVar1);\n  for (currentFormatString = formatStrings; *currentFormatString != 0; currentFormatString = currentFormatString + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "free",
                "fflush",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "exit_with_error_00107c10",
                "print_error_message_00107c20": "printErrorMessage"
            },
            "code": "\nvoid exitWithError_00107c10(void)\n\n{\n  printErrorMessage();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_001028ed",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "exit_with_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "extract_archived_files_00102710",
                "plVar1": "current_file_ptr",
                "cVar2": "check_result",
                "bVar3": "convert_thin_flag",
                "iVar4": "error_code",
                "lVar5": "file_ptr",
                "uVar6": "error_message",
                "uVar7": "library_name",
                "puVar8": "bfd_handle",
                "unaff_RBP": "exit_handler",
                "in_stack_00000008": "matching_formats"
            },
            "code": "\n\n\nundefined8 * extract_archived_files_00102710(void)\n\n{\n  long *current_file_ptr;\n  char check_result;\n  byte convert_thin_flag;\n  int error_code;\n  long file_ptr;\n  undefined8 error_message;\n  undefined8 library_name;\n  undefined8 *bfd_handle;\n  undefined8 exit_handler;\n  undefined8 matching_formats;\n  \n  file_ptr = bfd_openr();\n  if (file_ptr != 0) {\n    check_result = bfd_check_format(file_ptr,1);\n    if (check_result != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(file_ptr + 8);\n    }\n    bfd_close(file_ptr);\n  }\n  bfd_handle = (undefined8 *)bfd_openw();\n  if (((bfd_handle != (undefined8 *)0x0) && (check_result = bfd_set_format(bfd_handle,2), check_result != '\\0')) &&\n     (check_result = bfd_close(bfd_handle), check_result != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  exit_with_error_00107c10();\n  do {\n    convert_thin_flag = *(byte *)((long)bfd_handle + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (convert_thin_flag != 0) {\n        library_name = *bfd_handle;\n        error_message = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_and_exit_on_error_00107690(error_message,library_name);\n        goto LAB_00102812;\n      }\n    }\n    else if (convert_thin_flag == 0) {\n      library_name = *bfd_handle;\n      error_message = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_and_exit_on_error_00107690(error_message,library_name);\nLAB_001027cb:\n      print_error_message_00107c20();\n      error_code = bfd_get_error();\n      if (error_code == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matching_formats);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      current_file_ptr = bfd_handle + 0x1e;\n      for (file_ptr = bfd_openr_next_archived_file(bfd_handle,0); file_ptr != 0;\n          file_ptr = bfd_openr_next_archived_file(bfd_handle,file_ptr)) {\n        *current_file_ptr = file_ptr;\n        current_file_ptr = (long *)(file_ptr + 0xf0);\n      }\n      *current_file_ptr = 0;\n      error_code = bfd_get_error();\n      if (error_code == 9) {\n        return bfd_handle;\n      }\n      do {\n        exit_with_error_00107c10();\nLAB_00102826:\n        library_name = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(library_name);\nLAB_001053b7:\n        DAT_0010d618 = exit_handler;\n        bfd_handle = (undefined8 *)bfd_openr();\n      } while (bfd_handle == (undefined8 *)0x0);\n      check_result = bfd_check_format_matches(bfd_handle,2,&stack0x00000008);\n      if (check_result == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (file_ptr = bfd_openr_next_archived_file(bfd_handle,0), file_ptr == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "extract_archived_files_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "process_archive_script_00103e95",
                "ppcVar29": "scriptStack",
                "local_800": "stackSize",
                "local_828": "pCurrChar",
                "local_818": "bufferSize",
                "local_820": "pBuffer",
                "local_810": "ppcBufferStack",
                "lVar18": "charIndex",
                "uVar20": "tempVar",
                "lVar21": "bufferLength",
                "puVar22": "ptrVar1",
                "puVar23": "ptrVar2",
                "uVar24": "tempVar2",
                "pbVar32": "pSourceBuff",
                "pbVar35": "pDestBuff",
                "plVar5": "ptrVar5",
                "pvVar14": "ptrVar6",
                "piVar34": "ptrVar7",
                "pcVar10": "filename",
                "pcVar15": "errMsg",
                "pcVar16": "ptrVar8",
                "plVar12": "ptrVar3",
                "ppcVar27": "ptrVar4",
                "bVar28": "flag",
                "bVar30": "charFlag",
                "bVar39": "byteFlag",
                "local_7f8": "pByteVar1",
                "local_7fc": "uintVar1",
                "lVar31": "tempVar3",
                "uVar26": "ulongVar1",
                "ppcVar38": "ppcBuffer",
                "auVar40": "tempArrayVar1",
                "auVar41": "tempArrayVar2",
                "local_740": "outputBuffer",
                "local_678": "scriptBuffer"
            },
            "code": "\n\n\nvoid processArchiveScript_00103e95(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *ptrVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *filename;\n  undefined8 uVar11;\n  int iVar9;\n  long *ptrVar3;\n  size_t sVar13;\n  void *ptrVar6;\n  char *errMsg;\n  char *ptrVar8;\n  long lVar17;\n  long charIndex;\n  ulong uVar19;\n  uint tempVar;\n  long bufferLength;\n  undefined8 *ptrVar1;\n  undefined8 *ptrVar2;\n  uint tempVar2;\n  int iVar25;\n  ulong ulongVar1;\n  char **ptrVar4;\n  bool flag;\n  char **scriptStack;\n  byte charFlag;\n  long tempVar3;\n  byte *pSourceBuff;\n  byte *pbVar33;\n  int *ptrVar7;\n  byte *pDestBuff;\n  uint uVar36;\n  int iVar37;\n  char **ppcBuffer;\n  byte byteFlag;\n  undefined tempArrayVar1 [16];\n  undefined tempArrayVar2 [16];\n  char *pCurrChar;\n  char *pBuffer;\n  long bufferSize;\n  char **ppcBufferStack;\n  int stackSize;\n  uint uintVar1;\n  byte *pByteVar1;\n  stat local_7d0;\n  char outputBuffer [200];\n  char *scriptBuffer [201];\n  \n  byteFlag = 0;\n  charIndex = 0;\n  DAT_0010d550 = -2;\n  scriptStack = scriptBuffer;\n  stackSize = 0;\n  pCurrChar = outputBuffer;\n  bufferSize = 200;\n  pBuffer = pCurrChar;\n  ppcBufferStack = scriptStack;\nLAB_00103ee9:\n  *pCurrChar = (char)charIndex;\n  if (pBuffer + bufferSize + -1 <= pCurrChar) {\n    bufferLength = (long)pCurrChar - (long)pBuffer;\n    lVar17 = bufferLength + 1;\n    if (bufferSize < 10000) {\n      tempVar3 = bufferSize * 2;\n      bufferSize = 10000;\n      if (tempVar3 < 0x2711) {\n        bufferSize = tempVar3;\n      }\n      filename = (char *)malloc(bufferSize * 9 + 7);\n      if (filename != (char *)0x0) {\n        tempVar3 = lVar17 * 8;\n        errMsg = pBuffer;\n        ptrVar8 = filename;\n        for (; lVar17 != 0; lVar17 = lVar17 + -1) {\n          *ptrVar8 = *errMsg;\n          errMsg = errMsg + (ulong)byteFlag * -2 + 1;\n          ptrVar8 = ptrVar8 + (ulong)byteFlag * -2 + 1;\n        }\n        ppcBuffer = (char **)(filename + bufferSize);\n        scriptStack = ppcBuffer;\n        for (; tempVar3 != 0; tempVar3 = tempVar3 + -1) {\n          *(undefined *)scriptStack = *(undefined *)ppcBufferStack;\n          ppcBufferStack = (char **)((long)ppcBufferStack + (ulong)byteFlag * -2 + 1);\n          scriptStack = (char **)((long)scriptStack + (ulong)byteFlag * -2 + 1);\n        }\n        if (pBuffer != outputBuffer) {\n          free(pBuffer);\n        }\n        pCurrChar = filename + bufferLength;\n        scriptStack = ppcBuffer + bufferLength;\n        pBuffer = filename;\n        ppcBufferStack = ppcBuffer;\n        if (filename + bufferSize + -1 <= pCurrChar) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_syntax_error_in_archive_script_001031a5();\nLAB_0010524c:\n    filename = pBuffer;\n    if (pBuffer == outputBuffer) {\n      return;\n    }\nLAB_00105265:\n    free(filename);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)charIndex;\n  if (iVar37 == 3) goto LAB_0010524c;\n  cVar2 = (&DAT_0010a200)[iVar37];\n  if (cVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          ptrVar1 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = create_buffer_001033d6(DAT_0010d590);\n          *ptrVar1 = uVar11;\n        }\n        extract_data_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pSourceBuff = DAT_0010d5b0;\n      pDestBuff = DAT_0010d5b0;\n      tempVar = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)tempVar;\n      ulongVar1 = (ulong)uintVar1;\n      flag = false;\n      do {\n        charFlag = (&DAT_0010ab00)[*pDestBuff];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          flag = true;\n          ulongVar1 = uVar19 & 0xffffffff;\n          pByteVar1 = pDestBuff;\n        }\n        while( true ) {\n          iVar8 = (int)uVar19;\n          charIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + (uint)charFlag);\n          if (iVar8 == *(short *)(&DAT_0010a440 + charIndex * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)iVar8 * 2)) {\n            charFlag = (&DAT_0010a7c0)[(int)(uint)charFlag];\n          }\n        }\n        pDestBuff = pDestBuff + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + charIndex * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      uintVar1 = (uint)ulongVar1;\n      pbVar33 = pSourceBuff;\n      if (flag) {\n        DAT_0010d5b8 = pByteVar1;\n        DAT_0010d5c0 = uintVar1;\n      }\nLAB_0010419f:\n      iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (iVar8 == 0) {\n        iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pDestBuff = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pDestBuff - (int)pbVar33;\n      DAT_0010d588 = *pDestBuff;\n      DAT_0010d5b0 = pDestBuff;\n      DAT_0010d5c8 = pbVar33;\n      *pDestBuff = 0;\nLAB_001041f0:\n      pSourceBuff = DAT_0010d5c8;\n      charIndex = DAT_0010d5a0;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      charIndex = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    tempVar = cVar2 + iVar37;\n    if ((0x22 < tempVar) || (iVar37 != (char)(&DAT_0010a0a0)[(int)tempVar])) goto LAB_001049db;\n    cVar2 = (&DAT_0010a060)[(int)tempVar];\n    charIndex = (long)cVar2;\n    if (cVar2 < '\\x01') {\n      iVar37 = -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    stackSize = stackSize + -1 + (uint)(stackSize == 0);\n    scriptStack = scriptStack + 1;\n    *scriptStack = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)charIndex];\n  if ((&DAT_0010a020)[(int)charIndex] == '\\0') {\n    if (stackSize == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_syntax_error_in_archive_script_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[charIndex] != -0xe) &&\n             (tempVar = (int)(char)(&DAT_0010a200)[charIndex] + 1, tempVar < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)tempVar] == '\\x01')) &&\n           (charIndex = (long)(char)(&DAT_0010a060)[(int)tempVar],\n           '\\0' < (char)(&DAT_0010a060)[(int)tempVar])) goto LAB_00105227;\n        if (pBuffer == pCurrChar) goto LAB_0010524c;\n        pCurrChar = pCurrChar + -1;\n        scriptStack = scriptStack + -1;\n        charIndex = (long)*pCurrChar;\n      } while( true );\n    }\n    if (stackSize != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  ptrVar4 = DAT_0010d558;\n  cVar2 = (&DAT_00109fe0)[iVar37];\n  ppcBuffer = (char **)scriptStack[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    print_ar_if_not_empty_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_syntax_error_in_archive_script_001031a5();\n    break;\n  case 0x17:\n    ptrVar1 = (undefined8 *)*scriptStack;\n    if (DAT_0010d558 == (char **)0x0) {\n      filename = \"%s: no open archive\\n\";\nLAB_00104b62:\n      filename = (char *)dcgettext(0,filename,5);\n      fprintf(_stderr,filename,uVar11);\n      check_and_exit_if_zero_0010315d();\n    }\n    else {\n      for (; ptrVar1 != (undefined8 *)0x0; ptrVar1 = (undefined8 *)ptrVar1[1]) {\n        for (ptrVar2 = (undefined8 *)DAT_0010d558[0x1f]; ptrVar2 != (undefined8 *)0x0;\n            ptrVar2 = (undefined8 *)ptrVar2[0x1e]) {\n          iVar8 = filename_cmp(*ptrVar2);\n          if (iVar8 == 0) {\n            process_archives_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*ptrVar1,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *ptrVar1;\n        filename = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,filename,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    ptrVar1 = (undefined8 *)*scriptStack;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      filename = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; ptrVar1 != (undefined8 *)0x0; ptrVar1 = (undefined8 *)ptrVar1[1]) {\n      flag = false;\n      ptrVar4 = DAT_0010d558 + 0x1f;\n      for (filename = DAT_0010d558[0x1f]; filename != (char *)0x0;\n          filename = *(char **)(filename + 0xf0)) {\n        iVar8 = filename_cmp();\n        if (iVar8 == 0) {\n          errMsg = (char *)bfd_openr(*ptrVar1,0);\n          uVar11 = DAT_0010d660;\n          if (errMsg == (char *)0x0) {\n            uVar6 = *ptrVar1;\n            errMsg = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,errMsg,uVar11,uVar6);\n            check_and_exit_if_zero_0010315d();\n          }\n          else {\n            *ptrVar4 = errMsg;\n            flag = true;\n            *(undefined8 *)(errMsg + 0xf0) = *(undefined8 *)(filename + 0xf0);\n          }\n        }\n        else {\n          ptrVar4 = (char **)(filename + 0xf0);\n        }\n      }\n      if (!flag) {\n        filename = (char *)bfd_openr(*ptrVar1,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *ptrVar1;\n        errMsg = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,errMsg,uVar6,uVar11);\n        uVar11 = DAT_0010d660;\n        if (filename == (char *)0x0) {\n          uVar6 = *ptrVar1;\n          filename = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,filename,uVar11,uVar6);\n          check_and_exit_if_zero_0010315d();\n        }\n        else {\n          *ptrVar4 = filename;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    ptrVar1 = (undefined8 *)*scriptStack;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ptrVar1 != (undefined8 *)0x0; ptrVar1 = (undefined8 *)ptrVar1[1]) {\n      flag = false;\n      ptrVar4 = DAT_0010d558 + 0x1f;\n      for (ptrVar2 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          ptrVar2 != (undefined8 *)0x0; ptrVar2 = (undefined8 *)ptrVar2[0x1e]) {\n        iVar8 = filename_cmp(*ptrVar2,*ptrVar1);\n        if (iVar8 == 0) {\n          flag = true;\n          *ptrVar4 = (char *)ptrVar2[0x1e];\n        }\n        else {\n          ptrVar4 = (char **)(ptrVar2 + 0x1e);\n        }\n      }\n      if (!flag) {\n        uVar6 = *ptrVar1;\n        filename = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,filename,uVar11,uVar6);\n        check_and_exit_if_zero_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    ptrVar1 = (undefined8 *)*scriptStack;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; ptrVar1 != (undefined8 *)0x0; ptrVar1 = (undefined8 *)ptrVar1[1]) {\n      filename = (char *)bfd_openr(*ptrVar1,\"plugin\");\n      uVar11 = DAT_0010d660;\n      ptrVar4 = DAT_0010d558;\n      if (filename == (char *)0x0) {\n        uVar6 = *ptrVar1;\n        filename = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,filename,uVar11,uVar6);\n        check_and_exit_if_zero_0010315d();\n      }\n      else {\n        *(char **)(filename + 0xf0) = DAT_0010d558[0x1f];\n        ptrVar4[0x1f] = filename;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    filename = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    errMsg = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(errMsg,filename);\n    for (filename = DAT_0010d558[0x1f]; filename != (char *)0x0; filename = *(char **)(filename + 0xf0))\n    {\n      print_file_permissions_00103ddc(filename,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(ptrVar4);\n    filename = DAT_0010d570;\n    iVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((iVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(filename,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_delete_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    extract_and_process_archive_files_00103c60(*scriptStack,0);\n    break;\n  case 0x1f:\n    extract_and_process_archive_files_00103c60(*scriptStack,1);\n    break;\n  case 0x20:\n    filename = *scriptStack;\n    if (DAT_0010d558 == (char **)0x0) {\n      filename = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    charIndex = convert_library_00105300(scriptStack[-1],0);\n    if (charIndex != 0) {\n      unarchive_files_001032a8(charIndex,copy_data_0010312d,filename);\n    }\n    break;\n  case 0x21:\n    filename = *scriptStack;\n    errMsg = scriptStack[-1];\n    uVar11 = convert_library_00105300(scriptStack[-2],0);\n    if (filename == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(filename,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        unarchive_files_001032a8(uVar11,print_file_permissions_00103ddc,errMsg);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      ptrVar8 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,ptrVar8,filename);\n    }\n    unarchive_files_001032a8(uVar11,print_file_permissions_00103ddc,errMsg);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcBuffer = (char **)*scriptStack;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcBuffer = (char **)0x0;\n    break;\n  case 0x24:\n    ppcBuffer = (char **)scriptStack[-1];\n    break;\n  case 0x26:\n    ppcBuffer = (char **)malloc(0x10);\n    filename = scriptStack[-2];\n    *ppcBuffer = *scriptStack;\n    ppcBuffer[1] = filename;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  charIndex = (long)cVar2;\n  pCurrChar = pCurrChar + -charIndex;\n  scriptStack[1 - charIndex] = (char *)ppcBuffer;\n  scriptStack = scriptStack + (1 - charIndex);\n  tempVar = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*pCurrChar;\n  if ((tempVar < 0x23) && (*pCurrChar == (&DAT_0010a0a0)[(int)tempVar])) {\n    charIndex = (long)(char)(&DAT_0010a060)[(int)tempVar];\n  }\n  else {\n    charIndex = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 = ((int)pDestBuff - (int)DAT_0010d5c8) + -1;\n  *pDestBuff = DAT_0010d588;\n  pplVar1 = (long **)(DAT_0010d5a8 + charIndex * 8);\n  ppFVar3 = (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) = 1;\n    *ppFVar3 = DAT_0010d590;\n  }\n  pbVar7 = DAT_0010d5b0;\n  pFVar4 = ppFVar3[1];\n  tempArrayVar1._8_8_ = pFVar4;\n  tempArrayVar1._0_8_ = ppFVar3;\n  if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      tempArrayVar1 = print_and_exit_001033b0();\n    }\n    if (*(int *)(tempArrayVar1._0_8_ + 0x34) != 0) {\n      tempVar = (int)((long)pbVar7 - (long)pSourceBuff) - 1;\n      for (charIndex = 0; (int)charIndex < (int)tempVar; charIndex = charIndex + 1) {\n        *(byte *)(tempArrayVar1._8_8_ + charIndex) = pSourceBuff[charIndex];\n      }\n      ptrVar3 = *pplVar1;\n      if (*(int *)(ptrVar3 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)ptrVar3 + 0x1c) = 0;\nLAB_0010475e:\n        pFVar4 = DAT_0010d590;\n        if (tempVar == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            ptrVar1 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = create_buffer_001033d6(pFVar4);\n            *ptrVar1 = uVar11;\n          }\n          charIndex = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            charIndex = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          initialize_file_001031cf(charIndex);\n          extract_data_001030ed();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          ptrVar5 = *pplVar1;\n          tempVar2 = ~tempVar + *(int *)(ptrVar3 + 3);\n          if (0 < (int)tempVar2) break;\n          tempVar2 = (int)DAT_0010d5b0 - (int)(void *)ptrVar5[1];\n          if (*(int *)(ptrVar5 + 4) == 0) {\n            ptrVar5[1] = 0;\nLAB_00104626:\n            print_and_exit_001033b0();\n            break;\n          }\n          iVar9 = *(int *)(ptrVar5 + 3);\n          iVar25 = iVar9;\n          if (iVar9 < 1) {\n            iVar25 = iVar9 / 8;\n          }\n          *(int *)(ptrVar5 + 3) = iVar25 + iVar9;\n          ptrVar6 = realloc((void *)ptrVar5[1],(long)(iVar25 + iVar9 + 2));\n          ptrVar5[1] = (long)ptrVar6;\n          if (ptrVar6 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)ptrVar6 + (long)(int)tempVar2);\n          ptrVar3 = *pplVar1;\n        }\n        if (0x2000 < (int)tempVar2) {\n          tempVar2 = 0x2000;\n        }\n        ulongVar1 = (ulong)tempVar2;\n        if (*(int *)((long)ptrVar5 + 0x24) == 0) {\n          ptrVar7 = __errno_location();\n          ulongVar1 = (ulong)(int)tempVar2;\n          uVar19 = (ulong)(int)tempVar;\n          *ptrVar7 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        ptrVar7 = (int *)(long)(int)tempVar;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            tempVar2 = uVar36;\n            if (iVar9 != 0) {\n              do {\n                filename = \"input in flex scanner failed\";\n                print_and_exit_001033b0();\n                do {\n                  *ptrVar7 = 0;\n                  clearerr((FILE *)filename);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,ulongVar1,DAT_0010d590);\n                  filename = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sVar13;\n                  tempVar2 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), tempVar2 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*ptrVar7 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)tempVar +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            tempVar2 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)ptrVar7) =\n               (char)iVar9;\n          ptrVar7 = (int *)((long)ptrVar7 + 1);\n        } while (tempVar2 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = tempVar2;\n        tempVar2 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (tempVar2 == 0) goto LAB_0010475e;\n      }\n      ptrVar3 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      charIndex = *ptrVar3;\n      tempVar = tempVar + DAT_0010d598;\n      if (*(int *)(charIndex + 0x18) < (int)tempVar) {\n        iVar25 = ((int)DAT_0010d598 >> 1) + tempVar;\n        ptrVar6 = realloc(*(void **)(charIndex + 8),(long)iVar25);\n        *(void **)(charIndex + 8) = ptrVar6;\n        tempArrayVar2._8_8_ = ptrVar3;\n        tempArrayVar2._0_8_ = *ptrVar3;\n        if (*(long *)(*ptrVar3 + 8) == 0) {\n          tempArrayVar2 = print_and_exit_001033b0();\n        }\n        ptrVar3 = tempArrayVar2._8_8_;\n        *(int *)(tempArrayVar2._0_8_ + 0x18) = iVar25 + -2;\n      }\n      DAT_0010d598 = tempVar;\n      *(undefined *)(*(long *)(*ptrVar3 + 8) + (long)(int)tempVar) = 0;\n      *(undefined *)(*(long *)(*ptrVar3 + 8) + 1 + (long)(int)tempVar) = 0;\n      pSourceBuff = *(byte **)(*ptrVar3 + 8);\n      DAT_0010d5c8 = pSourceBuff;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pDestBuff = pSourceBuff + iVar8;\n      DAT_0010d5b0 = pDestBuff;\n      tempVar = reverse_and_store_data_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pSourceBuff == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pDestBuff = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pDestBuff;\n    uVar19 = reverse_and_store_data_0010300e();\n    pbVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pDestBuff = pSourceBuff + iVar8;\n  DAT_0010d5b0 = pDestBuff;\n  uVar19 = reverse_and_store_data_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = pDestBuff;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  ulongVar1 = uVar19 & 0xffffffff;\n  while( true ) {\n    iVar8 = (int)ulongVar1;\n    if (iVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2)) break;\n    ulongVar1 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n  }\n  tempVar = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 = pSourceBuff;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2) == 0)\n     || (tempVar == 0xb0)) goto LAB_0010419f;\n  pDestBuff = pDestBuff + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  iVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pDestBuff = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  pDestBuff = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  scriptStack = scriptStack + 1;\n  stackSize = 3;\n  *scriptStack = DAT_0010d548;\nLAB_001049d1:\n  pCurrChar = pCurrChar + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00105300",
                "dup",
                "realloc",
                "printf",
                "dcgettext",
                "FUN_001033d6",
                "fclose",
                "fwrite",
                "bfd_close",
                "free",
                "fread",
                "FUN_0010312d",
                "filename_cmp",
                "xstrdup",
                "FUN_001033b0",
                "FUN_00103ba8",
                "__errno_location",
                "FUN_0010315d",
                "FUN_0010300e",
                "FUN_00107740",
                "bfd_openw",
                "FUN_00103df9",
                "bfd_set_format",
                "FUN_001032a8",
                "bfd_openr",
                "FUN_00105bc0",
                "FUN_001031a5",
                "fopen",
                "ferror",
                "FUN_001031cf",
                "stat",
                "FUN_00103c60",
                "bfd_cache_close",
                "clearerr",
                "getc",
                "fprintf",
                "FUN_001030ed",
                "FUN_00103ddc",
                "malloc",
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_script_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_001025a0",
                "FUN_00103c60",
                "FUN_00102f1e",
                "FUN_00102c25",
                "FUN_00103a78",
                "FUN_00102fd7"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "process_functions_00107cc0",
                "lVar1": "currentIndex",
                "lVar2": "previousIndex",
                "lVar3": "tempIndex",
                "plVar4": "functionList",
                "uVar5": "count"
            },
            "code": "\nvoid processFunctions_00107cc0(void)\n\n{\n  long currentIndex;\n  long previousIndex;\n  long tempIndex;\n  long *functionList;\n  uint count;\n  \n  functionList = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      count = *(int *)(functionList + 1) - 1;\n      if (-1 < (int)count) {\n        currentIndex = (long)(int)count;\n        count = count & 7;\n        (*(code *)functionList[currentIndex + 2])();\n        previousIndex = currentIndex + -1;\n        if (-1 < (int)previousIndex) {\n          tempIndex = previousIndex;\n          if (count != 0) {\n            if (count != 1) {\n              if (count != 2) {\n                if (count != 3) {\n                  if (count != 4) {\n                    if (count != 5) {\n                      if (count != 6) {\n                        (*(code *)functionList[currentIndex + 1])();\n                        previousIndex = currentIndex + -2;\n                      }\n                      (*(code *)functionList[previousIndex + 2])();\n                      previousIndex = previousIndex + -1;\n                    }\n                    (*(code *)functionList[previousIndex + 2])();\n                    previousIndex = previousIndex + -1;\n                  }\n                  (*(code *)functionList[previousIndex + 2])();\n                  previousIndex = previousIndex + -1;\n                }\n                (*(code *)functionList[previousIndex + 2])();\n                previousIndex = previousIndex + -1;\n              }\n              (*(code *)functionList[previousIndex + 2])();\n              previousIndex = previousIndex + -1;\n            }\n            (*(code *)functionList[previousIndex + 2])();\n            tempIndex = previousIndex + -1;\n            if ((int)(previousIndex + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionList[tempIndex + 2])();\n            currentIndex = tempIndex + -1;\n            (*(code *)functionList[tempIndex + 1])();\n            (*(code *)functionList[tempIndex])();\n            (*(code *)functionList[currentIndex])();\n            (*(code *)functionList[tempIndex + -2])();\n            (*(code *)functionList[tempIndex + -3])();\n            (*(code *)functionList[tempIndex + -4])();\n            (*(code *)functionList[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)currentIndex + -7);\n        }\n      }\nLAB_00107d96:\n      functionList = (long *)*functionList;\n    } while (functionList != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_archives_00105ae0",
                "param_1": "archive_param_1",
                "param_2": "archive_param_2",
                "param_3": "archive_param_3",
                "param_4": "archive_param_4"
            },
            "code": "\nvoid process_archives_00105ae0(undefined8 archive_param_1,undefined8 archive_param_2,undefined archive_param_3,undefined archive_param_4)\n\n{\n  process_archives_00105ae0_00105af0(archive_param_1,archive_param_2,archive_param_3,archive_param_4);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archives_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(read_and_process_files_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_and_exit_on_error_00107690",
                "param_1": "errorCode1",
                "param_2": "errorCode2",
                "param_3": "errorCode3",
                "param_4": "errorCode4",
                "param_5": "errorCode5",
                "param_6": "errorCode6",
                "param_7": "errorCode7",
                "param_8": "errorCode8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "bufferSize",
                "local_d0": "stackPointer",
                "local_c8": "buffer",
                "local_b8": "localBuffer",
                "local_b0": "param10Copy",
                "local_a8": "param11Copy",
                "local_a0": "param12Copy",
                "local_98": "param13Copy",
                "local_90": "param14Copy",
                "local_88": "errorCode1Copy",
                "local_78": "errorCode2Copy",
                "local_68": "errorCode3Copy",
                "local_58": "errorCode4Copy",
                "local_48": "errorCode5Copy",
                "local_38": "errorCode6Copy",
                "local_28": "errorCode7Copy",
                "local_18": "errorCode8Copy"
            },
            "code": "\nvoid printAndExitOnError_00107690(undefined4 errorCode1,undefined4 errorCode2,undefined4 errorCode3,undefined4 errorCode4,\n                 undefined4 errorCode5,undefined4 errorCode6,undefined4 errorCode7,undefined4 errorCode8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 bufferSize;\n  undefined *stackPointer;\n  undefined *buffer;\n  undefined localBuffer [8];\n  undefined8 param10Copy;\n  undefined8 param11Copy;\n  undefined8 param12Copy;\n  undefined8 param13Copy;\n  undefined8 param14Copy;\n  undefined4 errorCode1Copy;\n  undefined4 errorCode2Copy;\n  undefined4 errorCode3Copy;\n  undefined4 errorCode4Copy;\n  undefined4 errorCode5Copy;\n  undefined4 errorCode6Copy;\n  undefined4 errorCode7Copy;\n  undefined4 errorCode8Copy;\n  \n  if (flag != '\\0') {\n    errorCode1Copy = errorCode1;\n    errorCode2Copy = errorCode2;\n    errorCode3Copy = errorCode3;\n    errorCode4Copy = errorCode4;\n    errorCode5Copy = errorCode5;\n    errorCode6Copy = errorCode6;\n    errorCode7Copy = errorCode7;\n    errorCode8Copy = errorCode8;\n  }\n  stackPointer = &stack0x00000008;\n  size = 8;\n  buffer = localBuffer;\n  bufferSize = 0x30;\n  param10Copy = param10;\n  param11Copy = param11;\n  param12Copy = param12;\n  param13Copy = param13;\n  param14Copy = param14;\n  print_error_message_001078c0(errorMessage,&size);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_001078c0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_001028ed",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_and_exit_on_error_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "ptr"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *ptr;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  ptr = targetList;\n  while( true ) {\n    currentTarget = *ptr;\n    ptr = ptr + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "free",
                "bfd_target_list",
                "dcgettext",
                "fputc",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010342d",
                "FUN_0010394a"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_and_copy_string_00105830",
                "param_1": "file_path",
                "param_2": "struct_ptr",
                "lVar1": "struct_ptr_value",
                "sVar2": "file_path_length",
                "__s": "base_name",
                "uVar3": "string_length_limit",
                "pcVar4": "dest_ptr",
                "bVar5": "loop_condition",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extract_and_copy_string_00105830(char *file_path,long struct_ptr,undefined8 param_3,undefined8 param_4)\n\n{\n  long struct_ptr_value;\n  size_t file_path_length;\n  char *base_name;\n  ulong string_length_limit;\n  char *dest_ptr;\n  byte loop_condition;\n  undefined result [16];\n  \n  loop_condition = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    base_name = (char *)lbasename();\n    file_path = base_name;\n    if ((DAT_0010d5fa != '\\0') && (struct_ptr != 0)) {\n      file_path_length = strlen(base_name);\n      string_length_limit = (ulong)*(byte *)(*(long *)(struct_ptr + 8) + 0x1e);\n      if (string_length_limit < file_path_length) {\n        file_path = (char *)xmalloc(string_length_limit + 1);\n        struct_ptr_value = *(long *)(struct_ptr + 8);\n        dest_ptr = file_path;\n        for (string_length_limit = (ulong)*(byte *)(struct_ptr_value + 0x1e); string_length_limit != 0; string_length_limit = string_length_limit - 1) {\n          *dest_ptr = *base_name;\n          base_name = base_name + (ulong)loop_condition * -2 + 1;\n          dest_ptr = dest_ptr + (ulong)loop_condition * -2 + 1;\n        }\n        file_path[*(byte *)(struct_ptr_value + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param_4;\n  result._0_8_ = file_path;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102bb0",
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105db0",
                "FUN_00105480",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "extract_and_copy_string_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_files_00107730"
            },
            "code": "\nvoid cleanupFiles_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_files_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_message_00107c20",
                "param_1": "errorDescription",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00107c20(long errorDescription)\n\n{\n  int error;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorDescription,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "FUN_00102f96",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0",
                "FUN_00107c10"
            ],
            "imported": false,
            "current_name": "print_error_message_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "filePtr",
                "param_2": "inputFile",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "iVar1": "errnoValue",
                "uVar2": "isTerminal",
                "iVar3": "fileDescriptor",
                "piVar4": "errnoPtr",
                "lVar5": "dataPtr"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **filePtr,FILE *inputFile,undefined8 param3,undefined8 param4,undefined8 param5)\n\n{\n  int errnoValue;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoPtr;\n  long dataPtr;\n  \n  errnoPtr = __errno_location();\n  dataPtr = DAT_0010d5a8;\n  errnoValue = *errnoPtr;\n  if (filePtr == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (filePtr == *(FILE ***)(dataPtr + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)filePtr + 0x1c) = 0;\n    *(undefined *)&filePtr[1]->_flags = 0;\n    *(undefined *)((long)&filePtr[1]->_flags + 1) = 0;\n    *(undefined4 *)(filePtr + 5) = 1;\n    filePtr[2] = filePtr[1];\n    *(undefined4 *)(filePtr + 7) = 0;\n    if (dataPtr != 0) {\n      if (filePtr == *(FILE ***)(dataPtr + DAT_0010d5a0 * 8)) {\n        extract_data_001030ed();\n      }\n      *filePtr = inputFile;\n      *(undefined4 *)((long)filePtr + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *filePtr = inputFile;\n    *(undefined4 *)((long)filePtr + 0x34) = 1;\n  }\n  *(undefined8 *)((long)filePtr + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)filePtr + 0x24) = isTerminal;\n  *errnoPtr = errnoValue;\n  return param5;\n}\n\n",
            "called": [
                "isatty",
                "fileno",
                "FUN_001030ed",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "source",
                "param_2": "destination",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long source,long destination)\n\n{\n  long temp;\n  \n  if (destination != 0) {\n    *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(source + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(source + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = source;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_and_return_status_00105c00",
                "param_1": "fileDescriptor",
                "param_2": "destinationFilePath",
                "_Var3": "fileOffset",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "iVar1": "readError",
                "__fd": "destinationFileDescriptor",
                "iVar2": "writeError",
                "piVar6": "errnoPtr",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFileAndReturnStatus_00105c00(int fileDescriptor,char *destinationFilePath)\n\n{\n  int readError;\n  int destinationFileDescriptor;\n  int writeError;\n  __off_t fileOffset;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPtr;\n  undefined buffer [8200];\n  \n  if ((-1 < fileDescriptor) && (fileOffset = lseek(fileDescriptor,0,0), fileOffset == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesRead = close_file_and_set_error_00102f55();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(fileDescriptor,buffer,0x2000);\n      writeError = (int)bytesRead;\n      if (writeError < 1) {\n        errnoPtr = __errno_location();\n        readError = *errnoPtr;\n        close(fileDescriptor);\n        close(destinationFileDescriptor);\n        if (writeError != 0) {\n          *errnoPtr = readError;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)writeError);\n    } while (bytesWritten == (long)writeError);\n    errnoPtr = __errno_location();\n    writeError = *errnoPtr;\n    close(fileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPtr = writeError;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "read",
                "lseek",
                "close",
                "__errno_location",
                "write",
                "FUN_00102f55",
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_return_status_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_info_001052a0",
                "param_1": "file_path",
                "iVar1": "status",
                "piVar2": "errno_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_info"
            },
            "code": "\nlong check_file_info_001052a0(char *file_path)\n\n{\n  int status;\n  int *errno_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_info;\n  \n  if (file_path != (char *)0x0) {\n    status = stat(file_path,&file_info);\n    if (status < 0) {\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00107920(error_message,file_path);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00107920(error_message,file_path,error_reason);\n      }\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else if ((file_info.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_info.st_size) {\n        return file_info.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00107920(error_message,file_path);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "FUN_001025a0",
                "dcgettext",
                "stat",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00107650",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_file_info_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "emulationOptionsLine"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *emulationOptionsLine;\n  \n  emulationOptionsLine = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,emulationOptionsLine);\n  emulationOptionsLine = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,emulationOptionsLine);\n  return;\n}\n\n",
            "called": [
                "dcgettext",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00105a68",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_001031a5",
                "FUN_00103ba8",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00103a78",
                "FUN_00103172"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "extract_and_process_archive_files_00103c60",
                "param_1": "archive_path",
                "param_2": "format_flag",
                "cVar1": "check_result",
                "piVar2": "errno_ptr",
                "pcVar3": "error_message",
                "lVar4": "input_archive",
                "lVar5": "archived_file",
                "uVar6": "program_name",
                "plVar7": "current_file_ptr"
            },
            "code": "\n\n\nvoid extract_and_process_archive_files_00103c60(char *archive_path,int format_flag)\n\n{\n  char check_result;\n  int *errno_ptr;\n  char *error_message;\n  long input_archive;\n  long archived_file;\n  undefined8 program_name;\n  long *current_file_ptr;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_filename_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_ptr = __errno_location();\n    archive_path = strerror(*errno_ptr);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      archive_path = DAT_0010d560;\n    }\n    else {\n      if (format_flag != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive = bfd_openr(archive_path,\"plugin\");\n      if (input_archive == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        check_result = bfd_check_format(input_archive,2);\n        if (check_result != '\\0') {\n          current_file_ptr = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file = bfd_openr_next_archived_file(input_archive,0); archived_file != 0;\n              archived_file = bfd_openr_next_archived_file(input_archive,archived_file)) {\n            *current_file_ptr = archived_file;\n            current_file_ptr = (long *)(archived_file + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,archive_path);\n  check_and_exit_if_zero_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_set_format",
                "xstrdup",
                "FUN_001057a0",
                "dcgettext",
                "bfd_openr",
                "bfd_openr_next_archived_file",
                "fprintf",
                "__errno_location",
                "FUN_0010315d",
                "strerror",
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "extract_and_process_archive_files_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "save_to_file_00102e57",
                "pFVar1": "file"
            },
            "code": "\nvoid saveToFile_00102e57(void)\n\n{\n  FILE *file;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file = fopen(DAT_0010d618,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "save_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archives_00105af0",
                "param_1": "file_list",
                "param_2": "archive",
                "param_3": "swap_files",
                "param_4": "check_format",
                "cVar1": "is_valid_format",
                "uVar2": "result",
                "lVar3": "next_file",
                "uVar4": "final_result"
            },
            "code": "\nulong process_archives_00105af0(long *file_list,long archive,char swap_files,char check_format)\n\n{\n  char is_valid_format;\n  uint result;\n  long next_file;\n  ulong final_result;\n  \n  if (check_format == '\\0') {\n    if (swap_files != '\\0') {\n      final_result = print_and_swap_00102f08();\n      return final_result;\n    }\n  }\n  else {\n    is_valid_format = bfd_check_format(archive,2);\n    if (is_valid_format != '\\0') {\n      final_result = 0;\n      for (next_file = bfd_openr_next_archived_file(archive,0); next_file != 0;\n          next_file = bfd_openr_next_archived_file(archive,next_file)) {\n        result = process_archives_00105af0(file_list,next_file,swap_files,1);\n        if ((char)result != '\\0') {\n          final_result = (ulong)result;\n          file_list = (long *)(*file_list + 0xf0);\n        }\n      }\n      return final_result;\n    }\n    if (swap_files != '\\0') {\n      final_result = print_and_swap_00102f08();\n      return final_result;\n    }\n  }\n  *(long *)(archive + 0xf0) = *file_list;\n  *file_list = archive;\n  return 1;\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_openr_next_archived_file",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105ae0",
                "FUN_00105af0",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archives_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "reverse_and_store_data_0010300e",
                "bVar1": "foundMatch",
                "iVar2": "currentCode",
                "lVar3": "nextCodeIndex",
                "bVar4": "mappedValue",
                "pbVar5": "currentByte",
                "in_R9": "matchingByte",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid reverseAndStoreData_0010300e(void)\n\n{\n  bool foundMatch;\n  int currentCode;\n  long nextCodeIndex;\n  byte mappedValue;\n  byte *currentByte;\n  byte *matchingByte;\n  int matchingIndex;\n  \n  foundMatch = false;\n  currentCode = DAT_0010d5d0;\n  for (currentByte = DAT_0010d5c8; currentByte < DAT_0010d5b0; currentByte = currentByte + 1) {\n    mappedValue = 1;\n    if (*currentByte != 0) {\n      mappedValue = (&DAT_0010ab00)[*currentByte];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentCode * 2) != 0) {\n      foundMatch = true;\n      matchingByte = currentByte;\n      matchingIndex = currentCode;\n    }\n    while( true ) {\n      nextCodeIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentCode * 2) + (uint)mappedValue);\n      if (*(short *)(&DAT_0010a440 + nextCodeIndex * 2) == currentCode) break;\n      currentCode = (int)*(short *)(&DAT_0010a800 + (long)currentCode * 2);\n      if (0xb0 < currentCode) {\n        mappedValue = (&DAT_0010a7c0)[(int)(uint)mappedValue];\n      }\n    }\n    currentCode = (int)*(short *)(&DAT_0010a240 + nextCodeIndex * 2);\n  }\n  if (foundMatch) {\n    DAT_0010d5b8 = matchingByte;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "reverse_and_store_data_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "deallocate_memory_00102ba1",
                "unaff_RBP": "memory_address",
                "unaff_retaddr": "return_address",
                "auVar1": "modified_value"
            },
            "code": "\nundefined  [16] deallocate_memory_00102ba1(void)\n\n{\n  undefined modified_value [16];\n  void *memory_address;\n  ulong return_address;\n  \n  free(memory_address);\n  modified_value._8_8_ = 0;\n  modified_value._0_8_ = return_address;\n  return modified_value << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "deallocate_memory_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "process_archives_00107740",
                "param_1": "input_files",
                "iVar1": "filename_comparison_result",
                "iVar2": "stat_result",
                "piVar3": "errno_location",
                "pcVar4": "error_message",
                "uVar5": "gettext_result",
                "pplVar6": "current_file",
                "__ptr": "buffer",
                "__n": "bytes_read",
                "lVar7": "offset",
                "plVar8": "current_entry",
                "puVar9": "local_values",
                "uVar10": "bytes_written",
                "sVar11": "bytes_to_copy",
                "local_c8": "local_variables",
                "_Stack_b0": "file_permissions",
                "uStack_98": "archive_size",
                "uStack_80": "file_time",
                "uStack_70": "file_time"
            },
            "code": "\n\n\nlong * process_archives_00107740(long **input_files)\n\n{\n  int filename_comparison_result;\n  int stat_result;\n  int *errno_location;\n  char *error_message;\n  undefined8 gettext_result;\n  long **current_file;\n  void *buffer;\n  size_t bytes_read;\n  long offset;\n  long *current_entry;\n  undefined4 *local_values;\n  ulong bytes_written;\n  size_t bytes_to_copy;\n  undefined4 local_variables [6];\n  __mode_t file_permissions;\n  ulong archive_size;\n  undefined8 file_time;\n  undefined8 file_time;\n  \n  if (_DAT_0010d600 != 0) {\n    local_values = local_variables;\n    for (offset = 0x24; offset != 0; offset = offset + -1) {\n      *local_values = 0;\n      local_values = local_values + 1;\n    }\n  }\n  current_file = (long **)input_files[0x1d];\n  if ((long **)input_files[0x1d] == (long **)0x0) {\n    current_file = input_files;\n  }\n  stat_result = (*(code *)current_file[1][0x3d])(input_files,local_variables);\n  if (stat_result != 0) {\n    current_entry = *input_files;\n    gettext_result = dcgettext(0,\"internal stat error on %s\",5);\n    stat_result = print_and_exit_on_error_00107690(gettext_result,current_entry);\n    gettext_result = DAT_0010d638;\n    if (stat_result == 3) {\n      for (; *current_entry != 0; current_entry = (long *)(*current_entry + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_entry != (undefined8 *)0x0; current_entry = (long *)(*current_entry + 0xf0)) {\n        filename_comparison_result = filename_cmp(*(undefined8 *)*current_entry,gettext_result);\n        if (filename_comparison_result == 0) {\n          if (stat_result != 2) {\n            return current_entry;\n          }\n          return (long *)(*current_entry + 0xf0);\n        }\n      }\n    }\n    return current_entry;\n  }\n  bfd_seek(input_files,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (archive_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)create_output_file_00105a20(*input_files);\n  }\n  else {\n    bytes_written = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_copy = archive_size - bytes_written;\n      if (0x2000 < bytes_to_copy) {\n        bytes_to_copy = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer,bytes_to_copy,input_files);\n      if (bytes_to_copy != bytes_read) {\nLAB_00102c78:\n        input_files = (long **)*input_files[0x1d];\n        gettext_result = dcgettext(0,\"%s is not a valid archive\",5);\n        print_and_exit_on_error_00107690(gettext_result,input_files);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)create_output_file_00105a20(*input_files);\n      }\n      bytes_to_copy = fwrite(buffer,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_copy != bytes_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_and_exit_on_error_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < archive_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    file_time = file_time;\n    set_file_time_00107c80(error_message,local_variables);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00105db0",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archives_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "print_file_info_00102d2f",
                "bVar1": "exitCode",
                "cVar2": "isSuccess",
                "iVar3": "copyResult",
                "__format": "errorFormat",
                "uVar4": "fileType",
                "unaff_RBX": "filePaths",
                "unaff_RBP": "outputFile",
                "unaff_R12": "isOptionEnabled",
                "unaff_R13": "allocatedMemory",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermission",
                "cStack0000000000000016": "hasReadPermission",
                "cStack0000000000000017": "hasWritePermission",
                "in_stack_00000018": "hasExecutePermission",
                "cStack0000000000000019": "hasArchivePermission",
                "cStack000000000000001a": "hasHiddenPermission",
                "cStack000000000000001b": "hasSystemPermission",
                "cStack000000000000001c": "hasDirectoryPermission",
                "cStack000000000000001d": "hasOwnerReadPermission",
                "cStack000000000000001e": "hasOwnerWritePermission",
                "uStack000000000000001f": "extraFlag",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "ownerID",
                "in_stack_00000070": "groupID",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid printFileInfo_00102d2f(void)\n\n{\n  byte exitCode;\n  char isSuccess;\n  int copyResult;\n  char *errorFormat;\n  uint fileType;\n  char **filePaths;\n  FILE *outputFile;\n  long isOptionEnabled;\n  void *allocatedMemory;\n  int fileDescriptor;\n  undefined filePermission;\n  char hasReadPermission;\n  char hasWritePermission;\n  char hasExecutePermission;\n  char hasArchivePermission;\n  char hasHiddenPermission;\n  char hasSystemPermission;\n  char hasDirectoryPermission;\n  char hasOwnerReadPermission;\n  char hasOwnerWritePermission;\n  undefined extraFlag;\n  uint fileMode;\n  uint ownerID;\n  uint groupID;\n  undefined8 fileSize;\n  \n  do {\n    exitCode = exit_with_error_00107c10();\n    *(uint *)((long)filePaths + 0x44) = *(uint *)((long)filePaths + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(isOptionEnabled + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)filePaths + 0x49) = exitCode | 0x10;\n    }\n    isSuccess = bfd_set_archive_head();\n  } while (isSuccess == '\\0');\n  dup(fileDescriptor);\n  isSuccess = bfd_close();\n  if (isSuccess != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copyResult = copy_and_delete_file_00105bc0();\n    if (copyResult == 0) {\n      free(allocatedMemory);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  exit_with_error_00107c10();\n  errorFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,errorFormat);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    filePermission = 100;\n  }\n  else if (fileType == 0xa000) {\n    filePermission = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    filePermission = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    filePermission = 99;\n  }\n  else if (fileType == 0xc000) {\n    filePermission = 0x73;\n  }\n  else {\n    filePermission = 0x70;\n    if (fileType != 0x1000) {\n      filePermission = 0x2d;\n    }\n  }\n  hasReadPermission = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  hasWritePermission = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  hasExecutePermission = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  hasArchivePermission = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  hasHiddenPermission = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  hasSystemPermission = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  hasDirectoryPermission = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  hasOwnerReadPermission = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  hasOwnerWritePermission = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (hasExecutePermission == 'x') {\n      hasExecutePermission = 's';\n    }\n    else {\n      hasExecutePermission = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (hasSystemPermission == 'x') {\n      hasSystemPermission = 's';\n    }\n    else {\n      hasSystemPermission = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (hasOwnerWritePermission == 'x') {\n      hasOwnerWritePermission = 't';\n    }\n    else {\n      hasOwnerWritePermission = 'T';\n    }\n  }\n  extraFlag = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)ownerID,\n          (ulong)groupID,fileSize,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*filePaths,outputFile);\n  if ((char)isOptionEnabled != '\\0') {\n    if ((*(byte *)((long)filePaths + 0x49) & 0x10) == 0) {\n      if (filePaths[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (filePaths[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "free",
                "dup",
                "FUN_00107c10",
                "xexit",
                "FUN_00105bc0",
                "bfd_close",
                "bfd_set_archive_head",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "print_file_info_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "input",
                "param_2": "file_count",
                "uVar1": "undefined_var_1",
                "bVar2": "byte_var_1",
                "iVar3": "int_var_1",
                "sVar4": "size",
                "piVar5": "int_ptr_var_1",
                "pcVar6": "char_ptr_var_1",
                "pcVar7": "char_ptr_var_2",
                "ppcVar8": "char_double_ptr_var_1",
                "uVar9": "undefined_var_2",
                "lVar10": "long_var_1",
                "__s": "char_ptr_1",
                "__s_00": "char_ptr_2",
                "lVar11": "long_var_2",
                "uVar12": "undefined_var_3",
                "uVar13": "ulong_var_1",
                "unaff_RBX": "char_double_ptr_var_2",
                "ppcVar14": "char_double_ptr_var_3",
                "unaff_RBP": "char_double_ptr_var_4",
                "unaff_R12": "char_double_ptr_var_5",
                "unaff_R13D": "uint_var_1",
                "ppcVar15": "char_double_ptr_var_6",
                "unaff_R14": "long_var_3",
                "bVar16": "bool_var_1",
                "bVar17": "byte_var_2",
                "param_7": "output",
                "param_9": "undefined_struct_1",
                "in_stack_00000078": "stack_var_1",
                "in_stack_00000108": "stack_var_2"
            },
            "code": "\n\n\nundefined8 process_files_001028ed(undefined8 input,long file_count)\n\n{\n  undefined undefined_var_1;\n  byte byte_var_1;\n  int int_var_1;\n  size_t size;\n  int *int_ptr_var_1;\n  char *char_ptr_var_1;\n  char *char_ptr_var_2;\n  char **char_double_ptr_var_1;\n  undefined8 undefined_var_2;\n  long long_var_1;\n  char *char_ptr_1;\n  char *char_ptr_2;\n  long long_var_2;\n  undefined8 undefined_var_3;\n  ulong ulong_var_1;\n  char *char_double_ptr_var_2;\n  char **char_double_ptr_var_3;\n  char **char_double_ptr_var_4;\n  char **char_double_ptr_var_5;\n  uint uint_var_1;\n  char **char_double_ptr_var_6;\n  long long_var_3;\n  bool bool_var_1;\n  byte byte_var_2;\n  char **output;\n  undefined8 undefined_struct_1;\n  long stack_var_1;\n  long stack_var_2;\n  \n  byte_var_2 = 0;\ncode_r0x001028ed:\n  exit_with_error_00107c10(char_double_ptr_var_2,file_count);\nLAB_001028f5:\n  undefined_var_3 = DAT_0010d638;\n  if (uint_var_1 != 3) {\n    while( true ) {\n      if ((undefined8 *)*char_double_ptr_var_5 == (undefined8 *)0x0) goto LAB_0010571f;\n      int_var_1 = filename_cmp(*(undefined8 *)*char_double_ptr_var_5,undefined_var_3);\n      if (int_var_1 == 0) break;\n      char_double_ptr_var_5 = (char **)(*char_double_ptr_var_5 + 0xf0);\n    }\n    if (uint_var_1 != 2) goto LAB_0010571f;\n    char_double_ptr_var_5 = (char **)(*char_double_ptr_var_5 + 0xf0);\n    goto LAB_0010571f;\n  }\n  long_var_1 = *(long *)(long_var_3 + 0xf0);\n  if (*(long *)(long_var_3 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    long_var_2 = long_var_1;\n    long_var_1 = *(long *)(long_var_2 + 0xf0);\n  } while (long_var_1 != 0);\n  char_double_ptr_var_5 = (char **)(long_var_2 + 0xf0);\n  char_double_ptr_var_2 = *char_double_ptr_var_4;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  undefined_var_1 = DAT_0010d5f8;\n  uint_var_1 = (uint)(DAT_0010d60c != 0);\n  file_count = bfd_openr(char_double_ptr_var_2,DAT_0010d5f0);\n  if (file_count != 0) {\n    char_double_ptr_var_4 = char_double_ptr_var_4 + 1;\n    byte_var_1 = process_archives_00105af0(char_double_ptr_var_5,file_count,uint_var_1,undefined_var_1);\n    undefined_struct_1._6_1_ = undefined_struct_1._6_1_ | byte_var_1;\n    char_ptr_var_1 = *char_double_ptr_var_4;\n    do {\n      if (char_ptr_var_1 == (char *)0x0) {\n        if (undefined_struct_1._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        undefined_var_3 = extract_and_print_archive_001058b0();\n        return undefined_var_3;\n      }\n      char_double_ptr_var_3 = *(char ***)(long_var_3 + 0xf0);\n      char_double_ptr_var_5 = output;\n      if (undefined_struct_1._7_1_ == '\\0') {\n        char_double_ptr_var_6 = output;\n        if (char_double_ptr_var_3 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              char_ptr_1 = (char *)lbasename(*char_double_ptr_var_3);\n              char_ptr_var_2 = char_ptr_1;\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(char_ptr_1);\n                ulong_var_1 = (ulong)*(byte *)(*(long *)(long_var_3 + 8) + 0x1e);\n                if (ulong_var_1 < size) {\n                  char_ptr_var_2 = (char *)xmalloc(ulong_var_1 + 1);\n                  long_var_1 = *(long *)(long_var_3 + 8);\n                  char_ptr_var_1 = char_ptr_var_2;\n                  for (ulong_var_1 = (ulong)*(byte *)(long_var_1 + 0x1e); ulong_var_1 != 0; ulong_var_1 = ulong_var_1 - 1) {\n                    *char_ptr_var_1 = *char_ptr_1;\n                    char_ptr_1 = char_ptr_1 + (ulong)byte_var_2 * -2 + 1;\n                    char_ptr_var_1 = char_ptr_var_1 + (ulong)byte_var_2 * -2 + 1;\n                  }\n                  char_ptr_var_2[*(byte *)(long_var_1 + 0x1e)] = '\\0';\n                }\n                char_ptr_var_1 = *char_double_ptr_var_4;\n                char_ptr_1 = char_ptr_var_2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              char_ptr_var_1 = *char_double_ptr_var_4;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              char_ptr_2 = (char *)lbasename(char_ptr_var_1);\n              if (DAT_0010d5fa != '\\0') {\n                size = strlen(char_ptr_2);\n                ulong_var_1 = (ulong)*(byte *)(*(long *)(long_var_3 + 8) + 0x1e);\n                char_ptr_var_1 = char_ptr_2;\n                char_ptr_1 = char_ptr_var_2;\n                if (ulong_var_1 < size) {\n                  char_ptr_var_1 = (char *)xmalloc(ulong_var_1 + 1);\n                  long_var_1 = *(long *)(long_var_3 + 8);\n                  char_ptr_var_2 = char_ptr_var_1;\n                  for (ulong_var_1 = (ulong)*(byte *)(long_var_1 + 0x1e); ulong_var_1 != 0; ulong_var_1 = ulong_var_1 - 1) {\n                    *char_ptr_var_2 = *char_ptr_2;\n                    char_ptr_2 = char_ptr_2 + (ulong)byte_var_2 * -2 + 1;\n                    char_ptr_var_2 = char_ptr_var_2 + (ulong)byte_var_2 * -2 + 1;\n                  }\n                  char_ptr_var_1[*(byte *)(long_var_1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              int_var_1 = filename_cmp(char_ptr_2,char_ptr_var_2);\n            }\n            else {\n              char_ptr_var_1 = *char_double_ptr_var_4;\n              char_ptr_1 = *char_double_ptr_var_3;\nLAB_00102980:\n              int_var_1 = filename_cmp(char_ptr_var_1,char_ptr_1);\n            }\n            if ((int_var_1 == 0) && (char_double_ptr_var_3[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                int_var_1 = stat(*char_double_ptr_var_4,(stat *)&stack0x000000b0);\n                if (int_var_1 != 0) {\n                  int_ptr_var_1 = __errno_location();\n                  if (*int_ptr_var_1 != 2) {\n                    exit_with_error_00107c10(*char_double_ptr_var_4);\nLAB_00102b7e:\n                    char_ptr_var_1 = *char_double_ptr_var_3;\n                    undefined_var_3 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_and_exit_on_error_00107690(undefined_var_3,char_ptr_var_1);\n                    free(char_double_ptr_var_4);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                char_double_ptr_var_1 = (char **)char_double_ptr_var_3[0x1d];\n                if ((char **)char_double_ptr_var_3[0x1d] == (char **)0x0) {\n                  char_double_ptr_var_1 = char_double_ptr_var_3;\n                }\n                int_var_1 = (**(code **)(char_double_ptr_var_1[1] + 0x1e8))(char_double_ptr_var_3,&stack0x00000020);\n                if (int_var_1 != 0) goto LAB_00102b7e;\n                if (stack_var_2 <= stack_var_1) goto LAB_0010577e;\n              }\n              undefined_var_3 = find_last_matching_item_00105870(output,2,*char_double_ptr_var_3);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                char_ptr_var_1 = *char_double_ptr_var_4;\n                bool_var_1 = DAT_0010d60c != 0;\n                long_var_1 = bfd_openr(char_ptr_var_1,DAT_0010d5f0);\n                if (long_var_1 == 0) {\n                  exit_with_error_00107c10(char_ptr_var_1,0);\n                  goto LAB_00102b3e;\n                }\n                byte_var_1 = update_param_and_print_00103172(undefined_var_3,long_var_1,bool_var_1);\n              }\n              else {\n                undefined_var_2 = extract_and_copy_string_00105830(*char_double_ptr_var_4);\n                int_var_1 = filename_cmp(undefined_var_2,\"__.LIBDEP\");\n                if (int_var_1 != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byte_var_1 = update_param_and_print_00103172(undefined_var_3,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byte_var_1 != 0) {\n                *char_double_ptr_var_6 = *(char **)(*char_double_ptr_var_6 + 0xf0);\n                undefined_struct_1._6_1_ = byte_var_1;\n              }\n              goto LAB_0010577e;\n            }\n            char_double_ptr_var_6 = char_double_ptr_var_3 + 0x1e;\n            char_double_ptr_var_3 = (char **)char_double_ptr_var_3[0x1e];\n          } while (char_double_ptr_var_3 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        uint_var_1 = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        uint_var_1 = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        long_var_1 = *(long *)(long_var_3 + 0xf0);\n        if (*(long *)(long_var_3 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      char_double_ptr_var_2 = *char_double_ptr_var_4;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      undefined_var_3 = extract_and_copy_string_00105830(char_double_ptr_var_2);\n      int_var_1 = filename_cmp(undefined_var_3,\"__.LIBDEP\");\n      if (int_var_1 != 0) goto code_r0x0010574f;\n      byte_var_1 = process_archives_00105ae0(char_double_ptr_var_5,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      undefined_struct_1._6_1_ = byte_var_1 | undefined_struct_1._6_1_;\nLAB_0010577e:\n      char_double_ptr_var_4 = char_double_ptr_var_4 + 1;\n      char_ptr_var_1 = *char_double_ptr_var_4;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  char_double_ptr_var_2 = *char_double_ptr_var_4;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "FUN_00105ae0",
                "FUN_00105870",
                "FUN_00107c10",
                "FUN_00105830",
                "bfd_openr",
                "dcgettext",
                "FUN_00105af0",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_001058b0",
                "stat",
                "strlen",
                "FUN_00103172",
                "filename_cmp",
                "lbasename",
                "xmalloc",
                "__errno_location",
                "FUN_001028ed"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102bf5",
                "FUN_00105db0",
                "FUN_00103e95",
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "errorStream"
            },
            "code": "\n\n\nvoid printAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(errorStream,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "fprintf",
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_00103df9",
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00103e95",
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "handle_file_error_001025a0",
                "piVar1": "error_code_ptr",
                "uVar2": "error_message",
                "dcgettext": "get_formatted_error_message",
                "print_error_message_00107920": "print_error_message"
            },
            "code": "\nundefined8 handle_file_error_001025a0(void)\n\n{\n  int *error_code_ptr;\n  undefined8 error_message;\n  \n  error_code_ptr = __errno_location();\n  if (*error_code_ptr == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*error_code_ptr);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "dcgettext",
                "__errno_location",
                "strerror",
                "FUN_00107920"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "handle_file_error_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "initialize_0010284b"
            },
            "code": "\nundefined8 initialize_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "initialize_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_write_archive_00102c25",
                "param_7": "param_array",
                "unaff_RBX": "archive_ptr",
                "puVar9": "param_ptr",
                "pplVar6": "func_ptr_array",
                "iVar2": "return_code",
                "plVar8": "current_ptr",
                "uVar5": "error_message",
                "__ptr": "buffer_ptr",
                "__n": "bytes_read",
                "lVar7": "count",
                "sVar11": "bytes_to_write",
                "uVar10": "bytes_written",
                "piVar3": "errno_ptr",
                "pcVar4": "errno_message"
            },
            "code": "\n\n\nlong * extract_and_write_archive_00102c25(void)\n\n{\n  int iVar1;\n  int return_code;\n  int *errno_ptr;\n  char *errno_message;\n  undefined8 error_message;\n  long **func_ptr_array;\n  void *buffer_ptr;\n  size_t bytes_read;\n  long count;\n  long **archive_ptr;\n  long *current_ptr;\n  undefined4 *param_ptr;\n  ulong bytes_written;\n  size_t bytes_to_write;\n  undefined4 *param_array;\n  __mode_t param_11;\n  ulong param_12;\n  \n  param_ptr = param_array;\n  for (count = 0x24; count != 0; count = count + -1) {\n    *param_ptr = 0;\n    param_ptr = param_ptr + 1;\n  }\n  func_ptr_array = (long **)archive_ptr[0x1d];\n  if ((long **)archive_ptr[0x1d] == (long **)0x0) {\n    func_ptr_array = archive_ptr;\n  }\n  return_code = (*(code *)func_ptr_array[1][0x3d])();\n  if (return_code != 0) {\n    current_ptr = *archive_ptr;\n    error_message = dcgettext(0,\"internal stat error on %s\",5);\n    return_code = print_and_exit_on_error_00107690(error_message,current_ptr);\n    error_message = DAT_0010d638;\n    if (return_code == 3) {\n      for (; *current_ptr != 0; current_ptr = (long *)(*current_ptr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*current_ptr != (undefined8 *)0x0; current_ptr = (long *)(*current_ptr + 0xf0)) {\n        iVar1 = filename_cmp(*(undefined8 *)*current_ptr,error_message);\n        if (iVar1 == 0) {\n          if (return_code != 2) {\n            return current_ptr;\n          }\n          return (long *)(*current_ptr + 0xf0);\n        }\n      }\n    }\n    return current_ptr;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (param_12 == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)create_output_file_00105a20(*archive_ptr);\n  }\n  else {\n    bytes_written = 0;\n    buffer_ptr = (void *)xmalloc(0x2000);\n    do {\n      bytes_to_write = param_12 - bytes_written;\n      if (0x2000 < bytes_to_write) {\n        bytes_to_write = 0x2000;\n      }\n      bytes_read = bfd_bread(buffer_ptr,bytes_to_write);\n      if (bytes_to_write != bytes_read) {\nLAB_00102c78:\n        archive_ptr = (long **)*archive_ptr[0x1d];\n        error_message = dcgettext(0,\"%s is not a valid archive\",5);\n        print_and_exit_on_error_00107690(error_message,archive_ptr);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)create_output_file_00105a20(*archive_ptr);\n      }\n      bytes_to_write = fwrite(buffer_ptr,1,bytes_read,DAT_0010d5d8);\n      if (bytes_to_write != bytes_read) {\n        errno_ptr = __errno_location();\n        errno_message = strerror(*errno_ptr);\n        print_and_exit_on_error_00107690(\"%s: %s\",DAT_0010d618,errno_message);\n        goto LAB_00102c78;\n      }\n      bytes_written = bytes_written + bytes_read;\n    } while (bytes_written < param_12);\n    free(buffer_ptr);\n  }\n  fclose(DAT_0010d5d8);\n  errno_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,param_11);\n  if (_DAT_0010d600 != 0) {\n    set_file_time_00107c80(errno_message,param_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "dcgettext",
                "bfd_bread",
                "FUN_00107690",
                "fclose",
                "strerror",
                "fwrite",
                "FUN_00107c80",
                "free",
                "xmalloc",
                "bfd_seek",
                "__errno_location",
                "FUN_00105a20",
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_and_trim_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "stringLength",
                "puVar3": "outputString",
                "uVar4": "maxLength",
                "unaff_RBX": "inputPtr",
                "unaff_RBP": "framePointer",
                "puVar5": "outputPtr",
                "bVar6": "byteCounter",
                "auVar7": "returnValue",
                "unaff_retaddr": "returnAddress",
                "lVar1": "baseAddress"
            },
            "code": "\nundefined  [16] copyStringAndTrim_00102bb0(void)\n\n{\n  long baseAddress;\n  char *inputString;\n  size_t stringLength;\n  undefined *outputString;\n  ulong maxLength;\n  undefined *inputPtr;\n  long framePointer;\n  undefined *outputPtr;\n  byte byteCounter;\n  undefined returnValue [16];\n  undefined8 returnAddress;\n  \n  byteCounter = 0;\n  stringLength = strlen(inputString);\n  maxLength = (ulong)*(byte *)(*(long *)(framePointer + 8) + 0x1e);\n  outputString = inputPtr;\n  if (maxLength < stringLength) {\n    outputString = (undefined *)xmalloc(maxLength + 1);\n    baseAddress = *(long *)(framePointer + 8);\n    outputPtr = outputString;\n    for (maxLength = (ulong)*(byte *)(baseAddress + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n      *outputPtr = *inputPtr;\n      inputPtr = inputPtr + (ulong)byteCounter * -2 + 1;\n      outputPtr = outputPtr + (ulong)byteCounter * -2 + 1;\n    }\n    outputString[*(byte *)(baseAddress + 0x1e)] = 0;\n  }\n  returnValue._8_8_ = returnAddress;\n  returnValue._0_8_ = outputString;\n  return returnValue;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_and_trim_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_swap_00102f08",
                "unaff_RBX": "dataPtr",
                "unaff_R12": "targetPtr"
            },
            "code": "\nundefined8 printAndSwap_00102f08(void)\n\n{\n  undefined8 *dataPtr;\n  undefined8 *targetPtr;\n  \n  printf(\"a - %s\\n\",*dataPtr);\n  dataPtr[0x1e] = *targetPtr;\n  *targetPtr = dataPtr;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_swap_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "fileManager",
                "param_2": "files",
                "param_3": "flag",
                "ppcVar1": "currentFile",
                "uVar2": "returnValue",
                "bVar3": "archiveResult",
                "iVar4": "comparisonResult",
                "sVar5": "length",
                "piVar6": "errorNumber",
                "pcVar7": "currentFilePath",
                "pcVar8": "processedFilePath",
                "uVar9": "extractedString",
                "pcVar10": "currentFileName",
                "__s": "strippedFileName",
                "lVar11": "currentPointer",
                "lVar12": "nextPointer",
                "uVar13": "result",
                "uVar14": "maxLength",
                "ppcVar15": "fileList",
                "ppcVar16": "currentEntry",
                "uVar17": "mode",
                "ppcVar18": "previousEntry",
                "bVar19": "copyingFlag",
                "bVar20": "localFlag",
                "local_15a": "anyArchiveFlag",
                "auStack_158": "buffer",
                "lStack_100": "lastModificationTime",
                "sStack_c8": "fileStatus"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long fileManager,char **files,char flag)\n\n{\n  char **currentFile;\n  undefined returnValue;\n  byte archiveResult;\n  int comparisonResult;\n  size_t length;\n  int *errorNumber;\n  char *currentFilePath;\n  char *processedFilePath;\n  undefined8 extractedString;\n  char *currentFileName;\n  char *strippedFileName;\n  long currentPointer;\n  long nextPointer;\n  undefined8 result;\n  ulong maxLength;\n  char **fileList;\n  char **currentEntry;\n  uint mode;\n  char **previousEntry;\n  bool copyingFlag;\n  byte localFlag;\n  byte anyArchiveFlag;\n  undefined buffer [88];\n  long lastModificationTime;\n  stat fileStatus;\n  \n  localFlag = 0;\n  currentFile = (char **)(fileManager + 0xf0);\n  anyArchiveFlag = 0;\n  if (files == (char **)0x0) {\n    result = reset_counter_00102943();\n    return result;\n  }\n  do {\n    currentFileName = *files;\njoined_r0x001055aa:\n    if (currentFileName == (char *)0x0) {\n      if (anyArchiveFlag != 0) {\n        result = extract_and_print_archive_001058b0(fileManager);\n        return result;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    fileList = *(char ***)(fileManager + 0xf0);\n    currentEntry = currentFile;\n    if (flag != '\\0') {\nLAB_0010564c:\n      mode = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextPointer = *(long *)(fileManager + 0xf0);\n      if (*(long *)(fileManager + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPointer = nextPointer;\n        nextPointer = *(long *)(currentPointer + 0xf0);\n      } while (nextPointer != 0);\n      currentEntry = (char **)(currentPointer + 0xf0);\n      currentFileName = *files;\n      do {\n        if (DAT_0010d620 != 0) {\n          result = extract_and_copy_string_00105830(currentFileName,fileManager);\n          comparisonResult = filename_cmp(result,\"__.LIBDEP\");\n          if (comparisonResult == 0) {\n            archiveResult = process_archives_00105ae0(currentEntry,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            anyArchiveFlag = archiveResult | anyArchiveFlag;\n            goto LAB_0010577e;\n          }\n          currentFileName = *files;\n        }\n        returnValue = DAT_0010d5f8;\n        copyingFlag = DAT_0010d60c != 0;\n        nextPointer = bfd_openr(currentFileName,DAT_0010d5f0);\n        if (nextPointer != 0) {\n          files = files + 1;\n          archiveResult = process_archives_00105af0(currentEntry,nextPointer,(uint)copyingFlag,returnValue);\n          anyArchiveFlag = anyArchiveFlag | archiveResult;\n          currentFileName = *files;\n          goto joined_r0x001055aa;\n        }\n        exit_with_error_00107c10(currentFileName,0);\n        mode = (uint)copyingFlag;\nLAB_001028f5:\n        result = DAT_0010d638;\n        if (mode == 3) {\n          nextPointer = *(long *)(fileManager + 0xf0);\n          if (*(long *)(fileManager + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*currentEntry != (undefined8 *)0x0;\n              currentEntry = (char **)(*currentEntry + 0xf0)) {\n            comparisonResult = filename_cmp(*(undefined8 *)*currentEntry,result);\n            if (comparisonResult == 0) {\n              if (mode == 2) {\n                currentEntry = (char **)(*currentEntry + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFileName = *files;\n      } while( true );\n    }\n    previousEntry = currentFile;\n    if (fileList == (char **)0x0) {\n      mode = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFileName = (char *)lbasename(*fileList);\n      processedFilePath = currentFileName;\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(currentFileName);\n        maxLength = (ulong)*(byte *)(*(long *)(fileManager + 8) + 0x1e);\n        if (maxLength < length) {\n          processedFilePath = (char *)xmalloc(maxLength + 1);\n          nextPointer = *(long *)(fileManager + 8);\n          currentFilePath = processedFilePath;\n          for (maxLength = (ulong)*(byte *)(nextPointer + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *currentFilePath = *currentFileName;\n            currentFileName = currentFileName + (ulong)localFlag * -2 + 1;\n            currentFilePath = currentFilePath + (ulong)localFlag * -2 + 1;\n          }\n          processedFilePath[*(byte *)(nextPointer + 0x1e)] = '\\0';\n        }\n        currentFilePath = *files;\n        currentFileName = processedFilePath;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      currentFilePath = *files;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      strippedFileName = (char *)lbasename(currentFilePath);\n      if (DAT_0010d5fa != '\\0') {\n        length = strlen(strippedFileName);\n        maxLength = (ulong)*(byte *)(*(long *)(fileManager + 8) + 0x1e);\n        currentFilePath = strippedFileName;\n        currentFileName = processedFilePath;\n        if (maxLength < length) {\n          currentFilePath = (char *)xmalloc(maxLength + 1);\n          nextPointer = *(long *)(fileManager + 8);\n          processedFilePath = currentFilePath;\n          for (maxLength = (ulong)*(byte *)(nextPointer + 0x1e); maxLength != 0; maxLength = maxLength - 1) {\n            *processedFilePath = *strippedFileName;\n            strippedFileName = strippedFileName + (ulong)localFlag * -2 + 1;\n            processedFilePath = processedFilePath + (ulong)localFlag * -2 + 1;\n          }\n          currentFilePath[*(byte *)(nextPointer + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      comparisonResult = filename_cmp(strippedFileName,processedFilePath);\n      if (comparisonResult == 0) goto LAB_00102993;\nLAB_00105639:\n      previousEntry = fileList + 0x1e;\n      fileList = (char **)fileList[0x1e];\n      if (fileList == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    currentFilePath = *files;\n    currentFileName = *fileList;\nLAB_00102980:\n    comparisonResult = filename_cmp(currentFilePath,currentFileName);\n    if (comparisonResult != 0) goto LAB_00105639;\nLAB_00102993:\n    if (fileList[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      comparisonResult = stat(*files,&fileStatus);\n      if (comparisonResult != 0) {\n        errorNumber = __errno_location();\n        if (*errorNumber != 2) {\n          exit_with_error_00107c10(*files);\nLAB_00102b7e:\n          currentFileName = *fileList;\n          result = dcgettext(0,\"internal stat error on %s\",5);\n          print_and_exit_on_error_00107690(result,currentFileName);\n          free(files);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      currentEntry = (char **)fileList[0x1d];\n      if ((char **)fileList[0x1d] == (char **)0x0) {\n        currentEntry = fileList;\n      }\n      comparisonResult = (**(code **)(currentEntry[1] + 0x1e8))(fileList,buffer);\n      if (comparisonResult != 0) goto LAB_00102b7e;\n      if (fileStatus.st_mtim.tv_sec <= lastModificationTime) goto LAB_0010577e;\n    }\n    result = find_last_matching_item_00105870(currentFile,2,*fileList);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFileName = *files;\n      copyingFlag = DAT_0010d60c != 0;\n      nextPointer = bfd_openr(currentFileName,DAT_0010d5f0);\n      if (nextPointer == 0) {\n        exit_with_error_00107c10(currentFileName,0);\n        goto LAB_00102b3e;\n      }\n      archiveResult = update_param_and_print_00103172(result,nextPointer,copyingFlag);\n    }\n    else {\n      extractedString = extract_and_copy_string_00105830(*files,fileManager);\n      comparisonResult = filename_cmp(extractedString,\"__.LIBDEP\");\n      if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      archiveResult = update_param_and_print_00103172(result,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (archiveResult != 0) {\n      *previousEntry = *(char **)(*previousEntry + 0xf0);\n      anyArchiveFlag = archiveResult;\n    }\nLAB_0010577e:\n    files = files + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 84149,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}