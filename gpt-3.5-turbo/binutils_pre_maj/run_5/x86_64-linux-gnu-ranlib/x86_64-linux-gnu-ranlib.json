{
    "functions": {
        "bfd_fdopenr": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenr(void)\n\n{\n  bfd_fdopenr();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenr"
        },
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "FUN_00102cd9": {
            "renaming": {
                "FUN_00102cd9": "find_file_in_binary_00102cd9",
                "in_EAX": "input",
                "iVar1": "comparisonResult",
                "unaff_RBX": "filePointer",
                "param_7": "targetFilePointer"
            },
            "code": "\nlong * findFileInBinary_00102cd9(void)\n\n{\n  int input;\n  int comparisonResult;\n  long *filePointer;\n  undefined8 targetFilePointer;\n  \n  targetFilePointer = DAT_0010d638;\n  if (input == 3) {\n    for (; *filePointer != 0; filePointer = (long *)(*filePointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*filePointer != (undefined8 *)0x0; filePointer = (long *)(*filePointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*filePointer,targetFilePointer);\n      if (comparisonResult == 0) {\n        if (input != 2) {\n          return filePointer;\n        }\n        return (long *)(*filePointer + 0xf0);\n      }\n    }\n  }\n  return filePointer;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102cd9",
            "calling": [
                "FUN_00105870"
            ],
            "imported": false,
            "current_name": "find_file_in_binary_00102cd9"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102490",
            "calling": [
                "FUN_00105300",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010d400 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010d2c8);\n  FUNC_00105cf0();\n  DAT_0010d400 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105cf0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105d60",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "lbasename": {
            "renaming": {},
            "code": "\nvoid lbasename(void)\n\n{\n  lbasename();\n  return;\n}\n\n",
            "called": [
                "lbasename"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00105830",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "lbasename"
        },
        "bfd_bread": {
            "renaming": {},
            "code": "\nvoid bfd_bread(void)\n\n{\n  bfd_bread();\n  return;\n}\n\n",
            "called": [
                "bfd_bread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_bread"
        },
        "FUN_001079c0": {
            "renaming": {
                "FUN_001079c0": "print_file_info_001079c0",
                "param_1": "file",
                "param_2": "fileInfo",
                "param_3": "shouldPrintInfo",
                "param_4": "shouldPrintAddress",
                "iVar1": "result",
                "ppcVar2": "tempFileInfo",
                "pcVar3": "timeString",
                "uVar4": "filePermissions",
                "local_100": "currentTimestamp",
                "uStack_f3": "fileType",
                "cStack_f2": "isReadable",
                "cStack_f1": "isWritable",
                "cStack_f0": "isExecutable",
                "cStack_ef": "isSetUserid",
                "cStack_ee": "isSetGroupid",
                "cStack_ed": "isSticky",
                "cStack_ec": "isOtherReadable",
                "cStack_eb": "isOtherWritable",
                "cStack_ea": "isOtherExecutable",
                "local_e8": "formattedTime",
                "local_b8": "localBuffer",
                "uStack_a0": "fileMode",
                "uStack_9c": "user",
                "uStack_98": "group",
                "uStack_88": "fileSize",
                "local_60": "fileModificationTime"
            },
            "code": "\nvoid printFileInfo_001079c0(FILE *file,char **fileInfo,char shouldPrintInfo,char shouldPrintAddress)\n\n{\n  int result;\n  char **tempFileInfo;\n  char *timeString;\n  uint filePermissions;\n  time_t currentTimestamp;\n  undefined fileType;\n  char isReadable;\n  char isWritable;\n  char isExecutable;\n  char isSetUserid;\n  char isSetGroupid;\n  char isSticky;\n  char isOtherReadable;\n  char isOtherWritable;\n  char isOtherExecutable;\n  undefined uStack_e9;\n  char formattedTime [48];\n  undefined localBuffer [24];\n  uint fileMode;\n  uint user;\n  uint group;\n  undefined8 fileSize;\n  time_t fileModificationTime;\n  \n  if (shouldPrintInfo != '\\0') {\n    tempFileInfo = (char **)fileInfo[0x1d];\n    if ((char **)fileInfo[0x1d] == (char **)0x0) {\n      tempFileInfo = fileInfo;\n    }\n    result = (**(code **)(tempFileInfo[1] + 0x1e8))(fileInfo,localBuffer);\n    if (result == 0) {\n      currentTimestamp = fileModificationTime;\n      timeString = ctime(&currentTimestamp);\n      if (timeString == (char *)0x0) {\n        timeString = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(formattedTime,timeString);\n      }\n      else {\n        sprintf(formattedTime,\"%.12s %.4s\",timeString + 4);\n      }\n      filePermissions = fileMode & 0xf000;\n      if (filePermissions == 0x4000) {\n        fileType = 100;\n      }\n      else if (filePermissions == 0xa000) {\n        fileType = 0x6c;\n      }\n      else if (filePermissions == 0x6000) {\n        fileType = 0x62;\n      }\n      else if (filePermissions == 0x2000) {\n        fileType = 99;\n      }\n      else if (filePermissions == 0xc000) {\n        fileType = 0x73;\n      }\n      else {\n        fileType = 0x70;\n        if (filePermissions != 0x1000) {\n          fileType = 0x2d;\n        }\n      }\n      isReadable = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n      isWritable = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n      isExecutable = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n      isSetUserid = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n      isSetGroupid = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n      isSticky = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n      isOtherReadable = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n      isOtherWritable = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n      isOtherExecutable = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n      if ((fileMode & 0x800) != 0) {\n        if (isExecutable == 'x') {\n          isExecutable = 's';\n        }\n        else {\n          isExecutable = 'S';\n        }\n      }\n      if ((fileMode & 0x400) != 0) {\n        if (isSticky == 'x') {\n          isSticky = 's';\n        }\n        else {\n          isSticky = 'S';\n        }\n      }\n      if ((fileMode & 0x200) != 0) {\n        if (isOtherExecutable == 'x') {\n          isOtherExecutable = 't';\n        }\n        else {\n          isOtherExecutable = 'T';\n        }\n      }\n      uStack_e9 = 0;\n      fprintf(file,\"%s %ld/%ld %6lu %s \",&isReadable,(ulong)user,(ulong)group,fileSize,\n              formattedTime,(ulong)fileMode);\n    }\n  }\n  fputs(*fileInfo,file);\n  if (shouldPrintAddress != '\\0') {\n    if ((*(byte *)((long)fileInfo + 0x49) & 0x10) == 0) {\n      if (fileInfo[0xb] != (char *)0x0) {\n        fprintf(file,\" 0x%lx\");\n      }\n    }\n    else if (fileInfo[0xc] != (char *)0x0) {\n      fprintf(file,\" 0x%lx\");\n    }\n  }\n  fputc(10,file);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "FUN_00102d8c",
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001079c0",
            "calling": [
                "FUN_00103ddc",
                "FUN_00107890"
            ],
            "imported": false,
            "current_name": "print_file_info_001079c0"
        },
        "FUN_00105a68": {
            "renaming": {
                "FUN_00105a68": "process_path_and_open_file_00105a68",
                "pcVar1": "path",
                "pFVar2": "file",
                "sVar3": "pathLength"
            },
            "code": "\nvoid processPathAndOpenFile_00105a68(void)\n\n{\n  char *path;\n  FILE *file;\n  size_t pathLength;\n  \n  path = DAT_0010d5e8;\n  if (DAT_0010d5e8 != (char *)0x0) {\n    pathLength = strlen(DAT_0010d5e8);\n    if (pathLength != 0) {\n      if (path[pathLength - 1] == '/') {\n        DAT_0010d618 = (char *)concat(path,DAT_0010d618,0);\n      }\n      else {\n        DAT_0010d618 = (char *)concat(path,&DAT_00108260,DAT_0010d618,0);\n      }\n    }\n  }\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  file = fopen(DAT_0010d618,\"w\");\n  if (file != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "strlen",
                "perror",
                "FUN_00102e57",
                "xexit",
                "concat",
                "printf",
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a68",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_path_and_open_file_00105a68"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_001032a8": {
            "renaming": {
                "FUN_001032a8": "process_archive_001032a8",
                "param_1": "archiveData",
                "param_2": "callbackFunc",
                "param_3": "entryList",
                "param_4": "result",
                "lVar1": "nextEntry",
                "uVar2": "currentEntry",
                "bVar3": "foundEntry",
                "plVar4": "currentNode",
                "iVar5": "comparisonResult",
                "__format": "formatString",
                "plVar6": "nextNode",
                "lVar7": "currentNodeAddress",
                "plVar8": "previousNode"
            },
            "code": "\n\n\nundefined8 processArchive_001032a8(long *archiveData,code *callbackFunc,undefined8 *entryList,undefined8 result)\n\n{\n  long nextEntry;\n  undefined8 currentEntry;\n  bool foundEntry;\n  long *currentNode;\n  int comparisonResult;\n  char *formatString;\n  long *nextNode;\n  long currentNodeAddress;\n  long *previousNode;\n  \n  currentNodeAddress = archiveData[0x1e];\n  if (entryList == (undefined8 *)0x0) {\n    while (currentNodeAddress != 0) {\n      nextEntry = *(long *)(currentNodeAddress + 0xf0);\n      (*callbackFunc)(currentNodeAddress,0);\n      currentNodeAddress = nextEntry;\n    }\n  }\n  else {\n    do {\n      foundEntry = false;\n      currentNode = (long *)archiveData[0x1e];\n      previousNode = archiveData;\n      while (nextNode = currentNode, nextNode != (long *)0x0) {\n        if (*nextNode != 0) {\n          comparisonResult = filename_cmp(*entryList);\n          if (comparisonResult == 0) {\n            foundEntry = true;\n            (*callbackFunc)(nextNode,previousNode);\n          }\n        }\n        previousNode = nextNode;\n        currentNode = (long *)nextNode[0x1e];\n      }\n      if (!foundEntry) {\n        currentEntry = *entryList;\n        formatString = (char *)dcgettext(0,\"No entry %s in archive.\\n\",5);\n        fprintf(_stderr,formatString,currentEntry);\n      }\n      entryList = (undefined8 *)entryList[1];\n    } while (entryList != (undefined8 *)0x0);\n  }\n  return result;\n}\n\n",
            "called": [
                "filename_cmp",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001032a8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "process_archive_001032a8"
        },
        "FUN_0010285f": {
            "renaming": {
                "FUN_0010285f": "print_archive_entry_warning_0010285f",
                "__format": "errorMessage",
                "lVar2": "substringLength",
                "plVar3": "substringPtr",
                "uVar4": "entryName",
                "plVar5": "currentEntry",
                "unaff_RBP": "returnFunctionPtr",
                "unaff_R12": "archivePtr",
                "unaff_R13D": "remainingEntries",
                "unaff_R14": "entryNames",
                "iStack000000000000000c": "matchingEntriesCount"
            },
            "code": "\n\n\nvoid printArchiveEntryWarning_0010285f(void)\n\n{\n  int iVar1;\n  char *errorMessage;\n  long substringLength;\n  long *substringPtr;\n  undefined8 entryName;\n  long *currentEntry;\n  code *returnFunctionPtr;\n  long archivePtr;\n  int remainingEntries;\n  undefined8 *entryNames;\n  int matchingEntriesCount;\n  \ncode_r0x0010285f:\n  entryName = *entryNames;\n  errorMessage = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n  fprintf(_stderr,errorMessage,entryName);\nLAB_0010553e:\n  entryNames = entryNames + 1;\n  remainingEntries = remainingEntries + -1;\n  if (remainingEntries == 0) {\n    return;\n  }\n  currentEntry = *(long **)(archivePtr + 0xf0);\n  matchingEntriesCount = 0;\n  do {\n    if (currentEntry == (long *)0x0) goto code_r0x0010285f;\n    if (*(int *)((long)currentEntry + 0xac) == 0) {\n      substringLength = *currentEntry;\n      if (substringLength == 0) {\n        substringPtr = (long *)currentEntry[0x1d];\n        if ((long *)currentEntry[0x1d] == (long *)0x0) {\n          substringPtr = currentEntry;\n        }\n        (**(code **)(substringPtr[1] + 0x1e8))(currentEntry,&stack0x00000010);\n      }\n      else if (((*(byte *)(archivePtr + 0x49) & 0x10) == 0) || (substringLength = extract_substring_00105830(), substringLength != 0))\n      {\n        entryName = extract_substring_00105830(*entryNames);\n        iVar1 = filename_cmp(entryName,substringLength);\n        if ((iVar1 == 0) &&\n           ((DAT_0010d634 == '\\0' ||\n            (matchingEntriesCount = matchingEntriesCount + 1,\n            matchingEntriesCount == _DAT_0010d630)))) break;\n      }\n    }\n    currentEntry = (long *)currentEntry[0x1e];\n  } while( true );\n  (*returnFunctionPtr)();\n  *(undefined4 *)((long)currentEntry + 0xac) = 1;\n  goto LAB_0010553e;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010285f",
            "calling": [
                "FUN_00105480"
            ],
            "imported": false,
            "current_name": "print_archive_entry_warning_0010285f"
        },
        "bfd_set_archive_head": {
            "renaming": {},
            "code": "\nvoid bfd_set_archive_head(void)\n\n{\n  bfd_set_archive_head();\n  return;\n}\n\n",
            "called": [
                "bfd_set_archive_head"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "bfd_set_archive_head"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_00102c25",
                "FUN_001057a0",
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024b0",
            "calling": [
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "FUN_00102f96": {
            "renaming": {
                "FUN_00102f96": "print_error_00102f96",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printError_00102f96(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f96",
            "calling": [
                "FUN_00107c20"
            ],
            "imported": false,
            "current_name": "print_error_00102f96"
        },
        "FUN_0010342d": {
            "renaming": {
                "FUN_0010342d": "print_usage_info_0010342d",
                "param_1": "outputToStdout",
                "uVar1": "formatString",
                "pcVar2": "localizedString",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsageInfo_0010342d(uint outputToStdout)\n\n{\n  undefined8 formatString;\n  char *localizedString;\n  FILE *outputStream;\n  \n  localizedString = (char *)dcgettext(0,\n                             \"Usage: %s [emulation options] [-]{dmpqrstx}[abcDfilMNoOPsSTuvV] [--plugin <name>] [member-name] [count] archive-file file...\\n\"\n                             ,5);\n  outputStream = _stderr;\n  if (outputToStdout != 0) {\n    outputStream = _stdout;\n  }\n  fprintf(outputStream,localizedString,DAT_0010d660);\n  formatString = DAT_0010d660;\n  localizedString = (char *)dcgettext(0,\"       %s -M [<mri-script]\\n\",5);\n  fprintf(outputStream,localizedString,formatString);\n  localizedString = (char *)dcgettext(0,\" commands:\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  d            - delete file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  m[ab]        - move file(s) in the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  p            - print file(s) found in the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  q[f]         - quick append file(s) to the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  r[ab][f][u]  - replace existing or insert new file(s) into the archive\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  s            - act as ranlib\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  t[O][v]      - display contents of the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  x[o]         - extract file(s) from the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\" command specific modifiers:\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [a]          - put file(s) after [member-name]\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [b]          - put file(s) before [member-name] (same as [i])\\n\",5\n                            );\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [D]          - use zero for timestamps and uids/gids (default)\\n\",\n                             5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [U]          - use actual timestamps and uids/gids\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [N]          - use instance [count] of name\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [f]          - truncate inserted file names\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [P]          - use full path names when matching\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [o]          - preserve original dates\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [O]          - display offsets of files in the archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  [u]          - only replace files that are newer than current archive contents\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\" generic modifiers:\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [c]          - do not warn if the library had to be created\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [s]          - create an archive index (cf. ranlib)\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [l <text> ]  - specify the dependencies of this library\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [S]          - do not build a symbol table\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [T]          - deprecated, use --thin instead\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [v]          - be verbose\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  [V]          - display the version number\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  @<file>      - read options from <file>\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  --target=BFDNAME - specify the target object format as BFDNAME\\n\",\n                             5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  --output=DIRNAME - specify the output directory for extraction operations\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\n                             \"  --record-libdeps=<text> - specify the dependencies of this library\\n\"\n                             ,5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  --thin       - make a thin archive\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\" optional:\\n\",5);\n  fprintf(outputStream,localizedString);\n  localizedString = (char *)dcgettext(0,\"  --plugin <p> - load the specified plugin\\n\",5);\n  fprintf(outputStream,localizedString);\n  print_emulation_options_0010336b(outputStream);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (outputToStdout != 0) {\n    localizedString = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,localizedString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(outputToStdout ^ 1);\n}\n\n",
            "called": [
                "FUN_0010336b",
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010342d",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_info_0010342d"
        },
        "FUN_0010394a": {
            "renaming": {
                "FUN_0010394a": "print_usage_0010394a",
                "param_1": "isError",
                "uVar1": "dataPointer",
                "pcVar2": "textPointer",
                "__stream": "outputStream"
            },
            "code": "\n\n\nvoid printUsage_0010394a(uint isError)\n\n{\n  undefined8 dataPointer;\n  char *textPointer;\n  FILE *outputStream;\n  \n  dataPointer = DAT_0010d660;\n  outputStream = _stderr;\n  if (isError != 0) {\n    outputStream = _stdout;\n  }\n  textPointer = (char *)dcgettext(0,\"Usage: %s [options] archive\\n\",5);\n  fprintf(outputStream,textPointer,dataPointer);\n  textPointer = (char *)dcgettext(0,\" Generate an index to speed access to archives\\n\",5);\n  fprintf(outputStream,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                      Read options from <file>\\n\"\n                             ,5);\n  fprintf(outputStream,textPointer);\n  textPointer = (char *)dcgettext(0,\"  --plugin <name>              Load the specified plugin\\n\",5);\n  fprintf(outputStream,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \"  -D                           Use zero for symbol map timestamp (default)\\n  -U                           Use an actual symbol map timestamp\\n\"\n                             ,5);\n  fprintf(outputStream,textPointer);\n  textPointer = (char *)dcgettext(0,\n                             \"  -t                           Update the archive\\'s symbol map timestamp\\n  -h --help                    Print this help message\\n  -v --version                 Print version information\\n\"\n                             ,5);\n  fprintf(outputStream,textPointer);\n  print_supported_targets_0010266f(DAT_0010d660,outputStream);\n  if (isError != 0) {\n    textPointer = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputStream,textPointer,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  xexit(isError ^ 1);\n}\n\n",
            "called": [
                "xexit",
                "fprintf",
                "dcgettext",
                "FUN_0010266f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010394a",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_usage_0010394a"
        },
        "FUN_00107920": {
            "renaming": {
                "FUN_00107920": "print_error_message_00107920",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "error_address",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "enable_logging",
                "local_d8": "stack_size",
                "local_d4": "buffer_size",
                "local_d0": "buffer_ptr",
                "local_c8": "buffer",
                "local_b8": "local_buffer",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "error_code_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid print_error_message_00107920(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 error_address,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char enable_logging;\n  undefined4 stack_size;\n  undefined4 buffer_size;\n  undefined *buffer_ptr;\n  undefined *buffer;\n  undefined local_buffer [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 error_code_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (enable_logging != '\\0') {\n    error_code_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer_ptr = &stack0x00000008;\n  stack_size = 8;\n  buffer = local_buffer;\n  buffer_size = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_00107920_001078c0(error_address,&stack_size);\n  return;\n}\n\n",
            "called": [
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107920",
            "calling": [
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_001052a0",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00105db0",
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "print_error_message_00107920"
        },
        "ctime": {
            "renaming": {},
            "code": "\n\n\nchar * ctime(time_t *__timer)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = ctime(__timer);\n  return pcVar1;\n}\n\n",
            "called": [
                "ctime"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "ctime"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00105300",
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "bfd_fdopenw": {
            "renaming": {},
            "code": "\nvoid bfd_fdopenw(void)\n\n{\n  bfd_fdopenw();\n  return;\n}\n\n",
            "called": [
                "bfd_fdopenw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102570",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_fdopenw"
        },
        "write": {
            "renaming": {},
            "code": "\n\n\nssize_t write(int __fd,void *__buf,size_t __n)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = write(__fd,__buf,__n);\n  return sVar1;\n}\n\n",
            "called": [
                "write"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "write"
        },
        "FUN_00105bb0": {
            "renaming": {
                "FUN_00105bb0": "initialize_00105bb0"
            },
            "code": "\nundefined8 initialize_00105bb0(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bb0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_00105bb0"
        },
        "FUN_00107640": {
            "renaming": {
                "FUN_00107640": "initialize_default_00107640"
            },
            "code": "\nundefined8 initializeDefault_00107640(void)\n\n{\n  return 0;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107640",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "initialize_default_00107640"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102590",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102e6f": {
            "renaming": {
                "FUN_00102e6f": "process_and_open_file_00102e6f",
                "pcVar1": "current_directory",
                "in_RAX": "file_path",
                "uVar2": "basename_result",
                "uVar3": "error_message",
                "pFVar4": "file_pointer",
                "sVar5": "string_length",
                "pcVar6": "current_character"
            },
            "code": "\nvoid process_and_open_file_00102e6f(void)\n\n{\n  char *current_directory;\n  char *file_path;\n  undefined8 basename_result;\n  undefined8 error_message;\n  FILE *file_pointer;\n  size_t string_length;\n  char *current_character;\n  \n  current_directory = DAT_0010d5e8;\n  do {\n    file_path = file_path + 1;\n    while (*file_path != '/') {\n      if (*file_path == '\\0') {\n        if ((DAT_0010d5e8 != (char *)0x0) && (string_length = strlen(DAT_0010d5e8), string_length != 0)) {\n          if (current_directory[string_length - 1] == '/') {\n            DAT_0010d618 = (char *)concat(current_directory,DAT_0010d618,0);\n          }\n          else {\n            DAT_0010d618 = (char *)concat(current_directory,&DAT_00108260,DAT_0010d618,0);\n          }\n        }\n        if (DAT_0010d60c != 0) {\n          printf(\"x - %s\\n\",DAT_0010d618);\n        }\n        file_pointer = fopen(DAT_0010d618,\"w\");\n        if (file_pointer == (FILE *)0x0) {\n          perror(DAT_0010d618);\n                    \n          xexit(1);\n        }\n        return;\n      }\n      current_character = file_path;\n      if ((*file_path == '.') && (current_character = file_path + 1, file_path[1] == '.')) {\n        current_character = file_path + 2;\n        if ((file_path[2] == '/') || (file_path[2] == '\\0')) {\n          basename_result = lbasename();\n          current_directory = DAT_0010d618;\n          error_message = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\"\n                            ,5);\n          print_error_message_00107920(error_message,current_directory,basename_result);\n          DAT_0010d618 = (char *)basename_result;\n          process_path_and_open_file_00105a68();\n          return;\n        }\n      }\n      for (; (file_path = current_character, *current_character != '\\0' && (*current_character != '/')); current_character = current_character + 1) {\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00107920",
                "dcgettext",
                "FUN_00105a68",
                "FUN_00102e6f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e6f",
            "calling": [
                "FUN_00102e6f"
            ],
            "imported": false,
            "current_name": "process_and_open_file_00102e6f"
        },
        "FUN_0010315d": {
            "renaming": {
                "FUN_0010315d": "check_and_exit_if_data_unavailable_0010315d"
            },
            "code": "\n\n\nvoid checkAndExitIfDataUnavailable_0010315d(void)\n\n{\n  if (_DAT_0010d608 == 0) {\n                    \n    xexit(9);\n  }\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010315d",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_exit_if_data_unavailable_0010315d"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_00102e57",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00107890": {
            "renaming": {
                "FUN_00107890": "print_file_info_00107890",
                "param_1": "fileInfo",
                "print_file_info_001079c0": "printFileInfoHelper",
                "_stdout": "outputStream"
            },
            "code": "\n\n\nvoid printFileInfo_00107890(undefined8 fileInfo)\n\n{\n  printFileInfo_00107890Helper(outputStream,fileInfo,DAT_0010d60c != 0,_DAT_0010d5fc != 0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107890",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_file_info_00107890"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102500",
            "calling": [
                "FUN_001033b0",
                "FUN_001075e0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102520",
            "calling": [
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "FUN_001033d6": {
            "renaming": {
                "FUN_001033d6": "create_buffer_001033d6",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "pvVar1": "buffer",
                "pvVar2": "data",
                "auVar3": "result"
            },
            "code": "\nundefined  [16]\ncreateBuffer_001033d6(undefined8 param1,undefined8 param2,undefined8 param3,undefined8 param4)\n\n{\n  void *buffer;\n  void *data;\n  undefined result [16];\n  \n  buffer = malloc(0x40);\n  if (buffer != (void *)0x0) goto LAB_001033f7;\n  do {\n    buffer = (void *)print_error_message_and_exit_001033b0(\"out of dynamic memory in yy_create_buffer()\");\nLAB_001033f7:\n    *(undefined4 *)((long)buffer + 0x18) = 0x4000;\n    data = malloc(0x4002);\n    *(void **)((long)buffer + 8) = data;\n  } while (data == (void *)0x0);\n  *(undefined4 *)((long)buffer + 0x20) = 1;\n  initialize_file_001031cf(buffer,param1);\n  result._8_8_ = param4;\n  result._0_8_ = buffer;\n  return result;\n}\n\n",
            "called": [
                "FUN_001033b0",
                "FUN_001031cf",
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033d6",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_buffer_001033d6"
        },
        "fileno": {
            "renaming": {},
            "code": "\n\n\nint fileno(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fileno(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fileno"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fileno"
        },
        "FUN_00103172": {
            "renaming": {
                "FUN_00103172": "update_param_00103172",
                "param_1": "oldValue",
                "param_2": "paramArray",
                "param_3": "shouldPrint",
                "param_4": "newValue",
                "uVar1": "tempValue",
                "auVar2": "newArray"
            },
            "code": "\nundefined  [16]\nupdateParam_00103172(undefined8 *oldValue,undefined8 *paramArray,char shouldPrint,undefined8 newValue)\n\n{\n  undefined8 tempValue;\n  undefined newArray [16];\n  \n  if (shouldPrint != '\\0') {\n    printf(\"r - %s\\n\",*paramArray);\n  }\n  tempValue = *oldValue;\n  paramArray[0x1e] = tempValue;\n  newArray._1_7_ = (undefined7)((ulong)tempValue >> 8);\n  newArray[0] = 1;\n  *oldValue = paramArray;\n  newArray._8_8_ = newValue;\n  return newArray;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103172",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "update_param_00103172"
        },
        "FUN_00105870": {
            "renaming": {
                "FUN_00105870": "find_file_location_00105870",
                "param_1": "fileListPointer",
                "param_2": "searchType",
                "param_3": "targetFilename",
                "iVar1": "comparisonResult",
                "iVar3": "iterationCount",
                "uVar2": "defaultFilename"
            },
            "code": "\nlong * findFileLocation_00105870(long *fileListPointer,int searchType,undefined8 targetFilename)\n\n{\n  int comparisonResult;\n  undefined8 defaultFilename;\n  int iterationCount;\n  \n  defaultFilename = DAT_0010d638;\n  iterationCount = DAT_0010d640;\n  if (DAT_0010d640 == 0) {\n    defaultFilename = targetFilename;\n    iterationCount = searchType;\n  }\n  if (iterationCount == 3) {\n    for (; *fileListPointer != 0; fileListPointer = (long *)(*fileListPointer + 0xf0)) {\n    }\n  }\n  else {\n    for (; (undefined8 *)*fileListPointer != (undefined8 *)0x0; fileListPointer = (long *)(*fileListPointer + 0xf0)) {\n      comparisonResult = filename_cmp(*(undefined8 *)*fileListPointer,defaultFilename);\n      if (comparisonResult == 0) {\n        if (iterationCount != 2) {\n          return fileListPointer;\n        }\n        return (long *)(*fileListPointer + 0xf0);\n      }\n    }\n  }\n  return fileListPointer;\n}\n\n",
            "called": [
                "FUN_00102cd9"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105870",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "find_file_location_00105870"
        },
        "FUN_001030ed": {
            "renaming": {
                "FUN_001030ed": "extract_data_001030ed",
                "puVar1": "current_element"
            },
            "code": "\nvoid extract_data_001030ed(void)\n\n{\n  undefined8 *current_element;\n  \n  current_element = *(undefined8 **)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n  DAT_0010d598 = *(undefined4 *)((long)current_element + 0x1c);\n  DAT_0010d5b0 = (undefined *)current_element[2];\n  DAT_0010d5c8 = DAT_0010d5b0;\n  DAT_0010d590 = *current_element;\n  DAT_0010d588 = *DAT_0010d5b0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001030ed",
            "calling": [
                "FUN_00103e95",
                "FUN_001031cf"
            ],
            "imported": false,
            "current_name": "extract_data_001030ed"
        },
        "FUN_00105bc0": {
            "renaming": {
                "FUN_00105bc0": "copy_and_remove_file_00105bc0",
                "param_1": "sourceFilePath",
                "param_2": "destinationFilePath",
                "param_3": "permissions",
                "param_4": "returnValue",
                "uVar1": "copyResult",
                "piVar2": "errnoLocation",
                "pcVar3": "errorString",
                "uVar4": "errorMessage",
                "uVar5": "unlinkResult",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] copyAndRemoveFile_00105bc0(char *sourceFilePath,char *destinationFilePath,undefined4 permissions,undefined8 returnValue)\n\n{\n  uint copyResult;\n  int *errnoLocation;\n  char *errorString;\n  undefined8 errorMessage;\n  ulong unlinkResult;\n  undefined result [16];\n  \n  if (destinationFilePath == sourceFilePath) {\n    unlinkResult = 0;\n  }\n  else {\n    copyResult = copy_file_00105c00(permissions);\n    unlinkResult = (ulong)copyResult;\n    if (copyResult != 0) {\n      errnoLocation = __errno_location();\n      errorString = strerror(*errnoLocation);\n      errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n      print_error_message_00107920(errorMessage,destinationFilePath,errorString);\n    }\n    unlink(sourceFilePath);\n  }\n  result._8_8_ = returnValue;\n  result._0_8_ = unlinkResult;\n  return result;\n}\n\n",
            "called": [
                "FUN_00102f1e",
                "FUN_00105c00"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105bc0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "copy_and_remove_file_00105bc0"
        },
        "FUN_00107650": {
            "renaming": {
                "FUN_00107650": "check_and_extract_archive_00107650",
                "param_1": "inputFile",
                "uVar1": "result",
                "lVar2": "fileStatus"
            },
            "code": "\nundefined8 checkAndExtractArchive_00107650(undefined8 inputFile)\n\n{\n  undefined8 result;\n  long fileStatus;\n  \n  fileStatus = check_file_001052a0();\n  if (fileStatus < 1) {\n    result = 1;\n  }\n  else {\n    DAT_0010d648 = 1;\n    fileStatus = analyze_binary_00105300(inputFile,0);\n    if (fileStatus == 0) {\n                    \n      xexit(1);\n    }\n    extract_archive_contents_001058b0(fileStatus);\n    result = 0;\n  }\n  return result;\n}\n\n",
            "called": [
                "FUN_00105300",
                "FUN_001052a0",
                "xexit",
                "FUN_0010284b",
                "FUN_001058b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107650",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "check_and_extract_archive_00107650"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102f1e": {
            "renaming": {
                "FUN_00102f1e": "copy_file_and_print_error_00102f1e",
                "unaff_RBP": "errorCode",
                "unaff_R12": "filePath",
                "unaff_retaddr": "returnAddress",
                "piVar1": "errorCodePointer",
                "uVar2": "errorMessage",
                "auVar3": "result"
            },
            "code": "\nundefined  [16] copyFileAndPrintError_00102f1e(void)\n\n{\n  int *errorCodePointer;\n  undefined8 errorMessage;\n  ulong errorCode;\n  char *filePath;\n  undefined result [16];\n  undefined8 returnAddress;\n  \n  errorCodePointer = __errno_location();\n  strerror(*errorCodePointer);\n  errorMessage = dcgettext(0,\"unable to copy file \\'%s\\'; reason: %s\",5);\n  print_error_message_00107920(errorMessage);\n  unlink(filePath);\n  result._0_8_ = errorCode & 0xffffffff;\n  result._8_8_ = returnAddress;\n  return result;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "unlink",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f1e",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_and_print_error_00102f1e"
        },
        "bfd_set_error": {
            "renaming": {},
            "code": "\nvoid bfd_set_error(void)\n\n{\n  bfd_set_error();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error"
        },
        "FUN_00102fd7": {
            "renaming": {
                "FUN_00102fd7": "print_time_set_error_00102fd7",
                "piVar1": "error_ptr",
                "uVar2": "error_msg",
                "__errno_location": "__get_errno_location",
                "strerror": "get_error_string",
                "dcgettext": "get_error_message",
                "print_error_message_00107920": "print_error_message"
            },
            "code": "\nvoid print_time_set_error_00102fd7(void)\n\n{\n  int *error_ptr;\n  undefined8 error_msg;\n  \n  error_ptr = __errno_location();\n  strerror(*error_ptr);\n  error_msg = dcgettext(0,\"%s: cannot set time: %s\",5);\n  print_error_message(error_msg);\n  return;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd7",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "print_time_set_error_00102fd7"
        },
        "FUN_00103ba8": {
            "renaming": {
                "FUN_00103ba8": "check_and_print_ar_message_00103ba8",
                "printf": "printARMessage",
                "fflush": "flushOutput",
                "_stdout": "stdoutBuffer"
            },
            "code": "\n\n\nvoid checkAndPrintARMessage_00103ba8(void)\n\n{\n  if (_DAT_0010d608 != 0) {\n    printf(\"AR >\");\n    fflush(stdoutBuffer);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "fflush",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ba8",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "check_and_print_ar_message_00103ba8"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "filename_cmp": {
            "renaming": {},
            "code": "\nvoid filename_cmp(void)\n\n{\n  filename_cmp();\n  return;\n}\n\n",
            "called": [
                "filename_cmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_00105480",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00102cd9",
                "FUN_00105db0",
                "FUN_001032a8"
            ],
            "imported": false,
            "current_name": "filename_cmp"
        },
        "bfd_make_readable": {
            "renaming": {},
            "code": "\nvoid bfd_make_readable(void)\n\n{\n  bfd_make_readable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_readable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_readable"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00103c60",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_00102fd7",
                "FUN_00102d8c",
                "FUN_001031a5",
                "FUN_00102e6f",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_0010336b",
                "FUN_001028ed",
                "FUN_001025a0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_001075e0",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001032a8",
                "FUN_0010266f",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_format": {
            "renaming": {},
            "code": "\nvoid bfd_set_format(void)\n\n{\n  bfd_set_format();\n  return;\n}\n\n",
            "called": [
                "bfd_set_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "bfd_set_format"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102d8c",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "bfd_openw": {
            "renaming": {},
            "code": "\nvoid bfd_openw(void)\n\n{\n  bfd_openw();\n  return;\n}\n\n",
            "called": [
                "bfd_openw"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00105300",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "bfd_openw"
        },
        "FUN_00103ddc": {
            "renaming": {
                "FUN_00103ddc": "print_file_information_00103ddc",
                "param_1": "fileInfo"
            },
            "code": "\nvoid printFileInformation_00103ddc(undefined8 fileInfo)\n\n{\n  print_file_info_001079c0(DAT_0010d578,fileInfo,DAT_0010d60c != 0,0);\n  return;\n}\n\n",
            "called": [
                "FUN_001079c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ddc",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_file_information_00103ddc"
        },
        "FUN_001078c0": {
            "renaming": {
                "FUN_001078c0": "print_error_message_001078c0",
                "param_1": "message",
                "param_2": "args"
            },
            "code": "\n\n\nvoid printErrorMessage_001078c0(char *message,__gnuc_va_list args)\n\n{\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010d660);\n  vfprintf(_stderr,message,args);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "putc",
                "fflush",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001078c0",
            "calling": [
                "FUN_00107690",
                "FUN_00107920"
            ],
            "imported": false,
            "current_name": "print_error_message_001078c0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00102710",
                "FUN_00103e95",
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "FUN_001075e0": {
            "renaming": {
                "FUN_001075e0": "print_binutils_info_001075e0",
                "param_1": "version",
                "pcVar1": "copyrightMessage"
            },
            "code": "\nvoid printBinutilsInfo_001075e0(undefined8 version)\n\n{\n  char *copyrightMessage;\n  \n  printf(\"GNU %s %s\\n\",version,\"(GNU Binutils for Debian) 2.40\");\n  copyrightMessage = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n  printf(copyrightMessage);\n  copyrightMessage = (char *)dcgettext(0,\n                             \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                             ,5);\n  printf(copyrightMessage);\n                    \n  exit(0);\n}\n\n",
            "called": [
                "exit",
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001075e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_binutils_info_001075e0"
        },
        "FUN_00105480": {
            "renaming": {
                "FUN_00105480": "process_archive_entries_00105480",
                "param_1": "archive",
                "param_2": "callback",
                "param_3": "entryNames",
                "param_4": "numEntries",
                "__format": "errorMsg",
                "lVar2": "currentEntry",
                "plVar3": "firstEntry",
                "uVar4": "substring",
                "plVar5": "currentEntryList",
                "local_cc": "entryCount",
                "local_c8": "tempBuf"
            },
            "code": "\n\n\nvoid processArchiveEntries_00105480(long archive,code *callback,undefined8 *entryNames,int numEntries)\n\n{\n  int iVar1;\n  char *errorMsg;\n  long currentEntry;\n  long *firstEntry;\n  undefined8 substring;\n  long *currentEntryList;\n  int entryCount;\n  undefined tempBuf [152];\n  \n  currentEntry = *(long *)(archive + 0xf0);\n  if (numEntries == 0) {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      (*callback)(currentEntry);\n    }\n  }\n  else {\n    for (; currentEntry != 0; currentEntry = *(long *)(currentEntry + 0xf0)) {\n      *(undefined4 *)(currentEntry + 0xac) = 0;\n    }\n    do {\n      currentEntryList = *(long **)(archive + 0xf0);\n      entryCount = 0;\n      for (; currentEntryList != (long *)0x0; currentEntryList = (long *)currentEntryList[0x1e]) {\n        if (*(int *)((long)currentEntryList + 0xac) == 0) {\n          currentEntry = *currentEntryList;\n          if (currentEntry == 0) {\n            firstEntry = (long *)currentEntryList[0x1d];\n            if ((long *)currentEntryList[0x1d] == (long *)0x0) {\n              firstEntry = currentEntryList;\n            }\n            (**(code **)(firstEntry[1] + 0x1e8))(currentEntryList,tempBuf);\n          }\n          else if (((*(byte *)(archive + 0x49) & 0x10) == 0) ||\n                  (currentEntry = extract_substring_00105830(currentEntry,archive), currentEntry != 0)) {\n            substring = extract_substring_00105830(*entryNames,archive);\n            iVar1 = filename_cmp(substring,currentEntry);\n            if ((iVar1 == 0) &&\n               ((DAT_0010d634 == '\\0' || (entryCount = entryCount + 1, entryCount == _DAT_0010d630)))) {\n              (*callback)();\n              *(undefined4 *)((long)currentEntryList + 0xac) = 1;\n              goto LAB_0010553e;\n            }\n          }\n        }\n      }\n      substring = *entryNames;\n      errorMsg = (char *)dcgettext(0,\"no entry %s in archive\\n\",5);\n      fprintf(_stderr,errorMsg,substring);\nLAB_0010553e:\n      entryNames = entryNames + 1;\n      numEntries = numEntries + -1;\n    } while (numEntries != 0);\n  }\n  return;\n}\n\n",
            "called": [
                "filename_cmp",
                "FUN_00105830",
                "FUN_0010285f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105480",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_archive_entries_00105480"
        },
        "FUN_00105cf0": {
            "renaming": {
                "FUN_00105cf0": "FUNC_00105cf0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d03) */\n/* WARNING: Removing unreachable block (ram,0x00105d0f) */\n\nvoid FUNC_00105cf0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105cf0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105cf0"
        },
        "FUN_001031a5": {
            "renaming": {
                "FUN_001031a5": "print_archive_script_syntax_error_001031a5",
                "__format": "formatString",
                "uVar1": "lineNumber"
            },
            "code": "\nvoid printArchiveScriptSyntaxError_001031a5(void)\n\n{\n  uint lineNumber;\n  char *formatString;\n  \n  lineNumber = DAT_0010d554 + 1;\n  formatString = (char *)dcgettext(0,\"Syntax error in archive script, line %d\\n\",5);\n  printf(formatString,(ulong)lineNumber);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031a5",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "print_archive_script_syntax_error_001031a5"
        },
        "bfd_make_writable": {
            "renaming": {},
            "code": "\nvoid bfd_make_writable(void)\n\n{\n  bfd_make_writable();\n  return;\n}\n\n",
            "called": [
                "bfd_make_writable"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_make_writable"
        },
        "strtol": {
            "renaming": {},
            "code": "\n\n\nlong strtol(char *__nptr,char **__endptr,int __base)\n\n{\n  long lVar1;\n  \n  lVar1 = strtol(__nptr,__endptr,__base);\n  return lVar1;\n}\n\n",
            "called": [
                "strtol"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strtol"
        },
        "bfd_create": {
            "renaming": {},
            "code": "\nvoid bfd_create(void)\n\n{\n  bfd_create();\n  return;\n}\n\n",
            "called": [
                "bfd_create"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_create"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_00103bd1",
                "FUN_00102c25",
                "FUN_00102ba1",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_00102d2f",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n                    \n  xexit();\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102480",
            "calling": [
                "FUN_00105300",
                "FUN_00107690",
                "FUN_00107c10",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_00107650",
                "FUN_0010315d",
                "FUN_00102d2f",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "close": {
            "renaming": {},
            "code": "\n\n\nint close(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = close(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_00105c00",
                "FUN_00102f55",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "close"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102470",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "malloc": {
            "renaming": {},
            "code": "\n\n\nvoid * malloc(size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = malloc(__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "malloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "malloc"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00105300",
                "FUN_001052a0",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "FUN_00103df9": {
            "renaming": {
                "FUN_00103df9": "ensure_buffer_stack_00103df9",
                "in_RCX": "input",
                "__size": "buffer_size",
                "lVar1": "loop_counter",
                "lVar2": "new_size",
                "puVar3": "buffer_ptr",
                "bVar4": "byte_value"
            },
            "code": "\nundefined8 ensure_buffer_stack_00103df9(void)\n\n{\n  size_t buffer_size;\n  undefined8 input;\n  long loop_counter;\n  long new_size;\n  undefined4 *buffer_ptr;\n  byte byte_value;\n  \n  byte_value = 0;\n  if (DAT_0010d5a8 == (void *)0x0) {\n    DAT_0010d5a8 = calloc(8,1);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      DAT_0010d580 = 1;\n      DAT_0010d5a0 = 0;\n      return input;\n    }\n  }\n  else {\n    if (DAT_0010d5a0 < DAT_0010d580 - 1U) {\n      return input;\n    }\n    new_size = DAT_0010d580 + 8;\n    buffer_size = new_size * 8;\n    DAT_0010d5a8 = realloc(DAT_0010d5a8,buffer_size);\n    if (DAT_0010d5a8 != (void *)0x0) {\n      buffer_ptr = (undefined4 *)((long)DAT_0010d5a8 + (buffer_size - 0x40));\n      DAT_0010d580 = new_size;\n      for (loop_counter = 0x10; loop_counter != 0; loop_counter = loop_counter + -1) {\n        *buffer_ptr = 0;\n        buffer_ptr = buffer_ptr + (ulong)byte_value * -2 + 1;\n      }\n      return input;\n    }\n  }\n  print_error_message_and_exit_001033b0(\"out of dynamic memory in yyensure_buffer_stack_00103df9()\");\n  DAT_0010d5a0 = 0;\n  DAT_0010d580 = 1;\n  return input;\n}\n\n",
            "called": [
                "realloc",
                "FUN_001033b0",
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103df9",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "ensure_buffer_stack_00103df9"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "extract_and_print_archive_00103a78",
                "param_1": "input",
                "iVar1": "result",
                "__ptr": "buffer",
                "puVar2": "archive",
                "uVar3": "bytesRead",
                "uVar4": "errorMsg",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPtr",
                "unaff_RBP": "bytesRemaining",
                "pcVar7": "errorString",
                "unaff_R13": "totalBytesRead",
                "unaff_R14": "archiveSize",
                "auStack_b8": "stackBuffer",
                "local_88": "expectedSize"
            },
            "code": "\n\n\nvoid extractAndPrintArchive_00103a78(undefined8 *input)\n\n{\n  int result;\n  void *buffer;\n  undefined8 *archive;\n  ulong bytesRead;\n  undefined8 errorMsg;\n  size_t bytesWritten;\n  int *errnoPtr;\n  size_t bytesRemaining;\n  char *errorString;\n  ulong totalBytesRead;\n  ulong archiveSize;\n  undefined stackBuffer [48];\n  ulong expectedSize;\n  \n  buffer = (void *)xmalloc(0x2000);\n  archive = (undefined8 *)input[0x1d];\n  if ((undefined8 *)input[0x1d] == (undefined8 *)0x0) {\n    archive = input;\n  }\n  result = (**(code **)(archive[1] + 0x1e8))(input,stackBuffer);\n  if (result == 0) {\n    if (DAT_0010d60c != 0) {\n      printf(\"\\n<%s>\\n\\n\",*input);\n    }\n    totalBytesRead = 0;\n    bfd_seek(input,0,0);\n    goto LAB_00103afd;\n  }\n  input = (undefined8 *)*input;\n  errorString = \"internal stat error on %s\";\n  do {\n    errorMsg = dcgettext(0,errorString,5);\n    print_error_and_exit_00107690(errorMsg,input);\n    expectedSize = archiveSize;\n    do {\n      bytesWritten = fwrite(buffer,1,bytesRemaining,_stdout);\n      if (bytesWritten != bytesRemaining) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        print_error_and_exit_00107690(\"stdout: %s\",errorString);\nLAB_00103b91:\n        free(buffer);\n        return;\n      }\n      totalBytesRead = totalBytesRead + bytesWritten;\nLAB_00103afd:\n      if (expectedSize <= totalBytesRead) goto LAB_00103b91;\n      bytesRemaining = expectedSize - totalBytesRead;\n      if (0x2000 < bytesRemaining) {\n        bytesRemaining = 0x2000;\n      }\n      bytesRead = bfd_bread(buffer,bytesRemaining,input);\n    } while (bytesRemaining == bytesRead);\n    errorString = \"%s is not a valid archive\";\n    input = *(undefined8 **)input[0x1d];\n    archiveSize = expectedSize;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00107690",
                "bfd_seek",
                "xmalloc",
                "free",
                "strerror",
                "bfd_bread",
                "printf",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_print_archive_00103a78"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_0010285f",
                "FUN_001078c0",
                "FUN_00102d8c",
                "FUN_00105300",
                "FUN_0010336b",
                "FUN_001033b0",
                "FUN_00102f96",
                "FUN_0010394a",
                "FUN_0010342d",
                "FUN_00105db0",
                "FUN_001032a8",
                "FUN_0010266f"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_001058b0": {
            "renaming": {
                "FUN_001058b0": "extract_archive_contents_001058b0",
                "cVar1": "result",
                "uVar2": "flags",
                "iVar3": "file_descriptor",
                "uVar4": "format_string",
                "__format": "corrupt_time_message",
                "__ptr": "file_path",
                "__stream": "output_stream",
                "ppcVar5": "opened_archive",
                "uStack0000000000000020": "file_permissions",
                "in_stack_00000028": "inode_number",
                "in_stack_00000038": "file_size",
                "local_3c[0]": "file_descriptor_copy",
                "uStack_33": "first_ascii_character",
                "cStack_32": "second_ascii_character",
                "cStack_31": "third_ascii_character"
            },
            "code": "\n\n\nvoid extract_archive_contents_001058b0(undefined8 *param_1)\n\n{\n  char result;\n  uint flags;\n  int file_descriptor;\n  undefined8 format_string;\n  char *corrupt_time_message;\n  void *file_path;\n  FILE *output_stream;\n  char **opened_archive;\n  uint file_permissions;\n  uint inode_number;\n  undefined8 file_size;\n  int local_3c [2];\n  undefined first_ascii_character;\n  char second_ascii_character;\n  char third_ascii_character;\n  \n  format_string = param_1[0x1e];\n  file_descriptor_copy = -1;\n  file_path = (void *)xstrdup(*param_1);\n  output_stream = (FILE *)extract_file_name_001057a0(file_path,local_3c);\n  file_descriptor = file_descriptor_copy;\n  if (output_stream != (FILE *)0x0) {\n    DAT_0010d618 = output_stream;\n    opened_archive = (char **)bfd_fdopenw(output_stream,*(undefined8 *)param_1[1],file_descriptor_copy);\n    if (opened_archive != (char **)0x0) {\n      DAT_0010d5e0 = opened_archive;\n      bfd_set_format(opened_archive,2);\n      flags = (~DAT_0010d648 >> 0x1f) << 3 | *(byte *)((long)opened_archive + 0x49) & 0xfffffff7;\n      *(char *)((long)opened_archive + 0x49) = (char)flags;\n      if (DAT_0010d5fa != '\\0') {\n        *(uint *)((long)opened_archive + 0x44) = *(uint *)((long)opened_archive + 0x44) | 0x400;\n      }\n      if (_DAT_0010d2d0 != 0) {\n        *(uint *)((long)opened_archive + 0x44) = *(uint *)((long)opened_archive + 0x44) | 0x2000;\n      }\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102d37;\n      while( true ) {\n        if ((DAT_0010d5f8 != '\\0') || ((*(byte *)((long)param_1 + 0x49) & 0x10) != 0)) {\n          *(byte *)((long)opened_archive + 0x49) = (byte)flags | 0x10;\n        }\n        result = bfd_set_archive_head(opened_archive,format_string);\n        if (result != '\\0') break;\n        flags = handle_error_00107c10(file_path);\nLAB_00102d37:\n        *(uint *)((long)opened_archive + 0x44) = *(uint *)((long)opened_archive + 0x44) | 0x100000;\n      }\n      file_descriptor = dup(file_descriptor);\n      result = bfd_close(opened_archive);\n      if (result == '\\0') {\n        handle_error_00107c10(file_path);\n        corrupt_time_message = (char *)dcgettext(0,\"<time data corrupt>\",5);\n        sprintf(&stack0xffffffffffffffd8,corrupt_time_message);\n        flags = file_permissions & 0xf000;\n        if (flags == 0x4000) {\n          first_ascii_character = 100;\n        }\n        else if (flags == 0xa000) {\n          first_ascii_character = 0x6c;\n        }\n        else if (flags == 0x6000) {\n          first_ascii_character = 0x62;\n        }\n        else if (flags == 0x2000) {\n          first_ascii_character = 99;\n        }\n        else if (flags == 0xc000) {\n          first_ascii_character = 0x73;\n        }\n        else {\n          first_ascii_character = 0x70;\n          if (flags != 0x1000) {\n            first_ascii_character = 0x2d;\n          }\n        }\n        second_ascii_character = (-((_file_permissions & 0x100) == 0) & 0xbbU) + 0x72;\n        third_ascii_character = (-((_file_permissions & 0x80) == 0) & 0xb6U) + 0x77;\n        fprintf(output_stream,\"%s %ld/%ld %6lu %s \",&second_ascii_character,_file_permissions >> 0x20,\n                (ulong)inode_number,file_size,&stack0xffffffffffffffd8,\n                _file_permissions & 0xffffffff);\n        fputs(*opened_archive,output_stream);\n        if ((char)param_1 != '\\0') {\n          if ((*(byte *)((long)opened_archive + 0x49) & 0x10) == 0) {\n            if (opened_archive[0xb] != (char *)0x0) {\n              fprintf(output_stream,\" 0x%lx\");\n            }\n          }\n          else if (opened_archive[0xc] != (char *)0x0) {\n            fprintf(output_stream,\" 0x%lx\");\n          }\n        }\n        fputc(10,output_stream);\n        return;\n      }\n      DAT_0010d5e0 = (char **)0x0;\n      DAT_0010d618 = (FILE *)0x0;\n      bfd_close(param_1);\n      file_descriptor = copy_and_remove_file_00105bc0(output_stream,file_path,file_descriptor);\n      if (file_descriptor == 0) {\n        free(file_path);\n        free(output_stream);\n        return;\n      }\n      goto LAB_00102d7a;\n    }\n    close(file_descriptor);\n    handle_error_00107c10(file_path);\n  }\n  format_string = dcgettext(0,\"could not create temporary file whilst writing archive\",5);\n  handle_error_00107c10(format_string);\nLAB_00102d7a:\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "close",
                "FUN_001057a0",
                "xstrdup",
                "FUN_00107c10",
                "bfd_fdopenw",
                "bfd_set_format",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001058b0",
            "calling": [
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "extract_archive_contents_001058b0"
        },
        "fputs": {
            "renaming": {},
            "code": "\n\n\nint fputs(char *__s,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputs(__s,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputs"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_00102d8c"
            ],
            "imported": false,
            "current_name": "fputs"
        },
        "perror": {
            "renaming": {},
            "code": "\n\n\nvoid perror(char *__s)\n\n{\n  perror(__s);\n  return;\n}\n\n",
            "called": [
                "perror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024a0",
            "calling": [
                "FUN_00105300",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "perror"
        },
        "FUN_00102bf5": {
            "renaming": {
                "FUN_00102bf5": "cleanup_resources_00102bf5",
                "bfd_cache_close": "closeBfdCache",
                "fclose": "closeFile",
                "unlink_if_ordinary": "deleteIfOrdinary"
            },
            "code": "\nvoid cleanupResources_00102bf5(void)\n\n{\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close",
                "unlink_if_ordinary",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bf5",
            "calling": [
                "FUN_00107730"
            ],
            "imported": false,
            "current_name": "cleanup_resources_00102bf5"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_call_00102020"
            },
            "code": "\nvoid execute_indirect_call_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_call_00102020"
        },
        "open": {
            "renaming": {},
            "code": "\n\n\nint open(char *__file,int __oflag,...)\n\n{\n  int iVar1;\n  \n  iVar1 = open(__file,__oflag);\n  return iVar1;\n}\n\n",
            "called": [
                "open"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102460",
            "calling": [
                "FUN_00105c00",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "open"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103bd1",
                "FUN_00103ba8",
                "FUN_00102f96",
                "FUN_001078c0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "FUN_00102943": {
            "renaming": {
                "FUN_00102943": "initialize_data_00102943"
            },
            "code": "\nvoid initializeData_00102943(void)\n\n{\n  DAT_0010d618 = 0;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102943",
            "calling": [
                "FUN_001028ed",
                "FUN_00105570"
            ],
            "imported": false,
            "current_name": "initialize_data_00102943"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102530",
            "calling": [
                "FUN_00105300",
                "FUN_00103c60",
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "realloc": {
            "renaming": {},
            "code": "\n\n\nvoid * realloc(void *__ptr,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = realloc(__ptr,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "realloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "realloc"
        },
        "FUN_00107c80": {
            "renaming": {
                "FUN_00107c80": "set_file_modification_time_00107c80",
                "param_1": "filePath",
                "param_2": "fileInfo",
                "iVar1": "result",
                "piVar2": "errnoLoc",
                "pcVar3": "errorMessage",
                "uVar4": "errorString",
                "local_38": "modificationTime",
                "uStack_34": "unused1",
                "uStack_30": "unused2",
                "uStack_2c": "unused3",
                "local_28": "accessTime",
                "uStack_24": "statusChangeTime",
                "uStack_20": "birthTime",
                "uStack_1c": "unused4"
            },
            "code": "\nvoid setFileModificationTime_00107c80(char *filePath,long fileInfo)\n\n{\n  int result;\n  int *errnoLoc;\n  char *errorMessage;\n  undefined8 errorString;\n  undefined4 modificationTime;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 accessTime;\n  undefined4 statusChangeTime;\n  undefined4 birthTime;\n  undefined4 unused4;\n  \n  accessTime = *(undefined4 *)(fileInfo + 0x58);\n  statusChangeTime = *(undefined4 *)(fileInfo + 0x5c);\n  birthTime = *(undefined4 *)(fileInfo + 0x60);\n  unused4 = *(undefined4 *)(fileInfo + 100);\n  modificationTime = *(undefined4 *)(fileInfo + 0x48);\n  unused1 = *(undefined4 *)(fileInfo + 0x4c);\n  unused2 = *(undefined4 *)(fileInfo + 0x50);\n  unused3 = *(undefined4 *)(fileInfo + 0x54);\n  result = utimensat(-100,filePath,(timespec *)&modificationTime,0);\n  if (result != 0) {\n    errnoLoc = __errno_location();\n    errorMessage = strerror(*errnoLoc);\n    errorString = dcgettext(0,\"%s: cannot set time: %s\",5);\n    print_error_message_00107920(errorString,filePath,errorMessage);\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_00102fd7",
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c80",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "set_file_modification_time_00107c80"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001031cf",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "FUN_00105a20": {
            "renaming": {
                "FUN_00105a20": "extract_archive_member_00105a20",
                "param_1": "outputPath",
                "pcVar1": "currentPath",
                "pcVar2": "nextPath",
                "uVar3": "baseName",
                "uVar4": "errorMessage",
                "pFVar5": "file",
                "sVar6": "pathLength"
            },
            "code": "\nvoid extractArchiveMember_00105a20(char *outputPath)\n\n{\n  char *currentPath;\n  char *nextPath;\n  undefined8 baseName;\n  undefined8 errorMessage;\n  FILE *file;\n  size_t pathLength;\n  \n  currentPath = DAT_0010d5e8;\n  DAT_0010d618 = outputPath;\n  if (*outputPath == '/') {\nLAB_00102e9a:\n    baseName = lbasename();\n    currentPath = DAT_0010d618;\n    errorMessage = dcgettext(0,\"illegal output pathname for archive member: %s, using \\'%s\\' instead\",5);\n    print_error_message_00107920(errorMessage,currentPath,baseName);\n    DAT_0010d618 = (char *)baseName;\n    FUN_00105a68();\n    return;\n  }\n  do {\n    if (*outputPath == '\\0') {\n      if ((DAT_0010d5e8 != (char *)0x0) && (pathLength = strlen(DAT_0010d5e8), pathLength != 0)) {\n        if (currentPath[pathLength - 1] == '/') {\n          DAT_0010d618 = (char *)concat(currentPath,DAT_0010d618,0);\n        }\n        else {\n          DAT_0010d618 = (char *)concat(currentPath,&DAT_00108260,DAT_0010d618,0);\n        }\n      }\n      if (DAT_0010d60c != 0) {\n        printf(\"x - %s\\n\",DAT_0010d618);\n      }\n      file = fopen(DAT_0010d618,\"w\");\n      if (file == (FILE *)0x0) {\n        perror(DAT_0010d618);\n                    \n        xexit(1);\n      }\n      return;\n    }\n    nextPath = outputPath;\n    if ((*outputPath == '.') && (nextPath = outputPath + 1, outputPath[1] == '.')) {\n      nextPath = outputPath + 2;\n      if ((outputPath[2] == '/') || (outputPath[2] == '\\0')) goto LAB_00102e9a;\n    }\n    for (; (*nextPath != '\\0' && (*nextPath != '/')); nextPath = nextPath + 1) {\n    }\n    for (; outputPath = nextPath, *nextPath == '/'; nextPath = nextPath + 1) {\n    }\n  } while( true );\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105a20",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "extract_archive_member_00105a20"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024f0",
            "calling": [
                "FUN_00102d8c",
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105d20();\n  return;\n}\n\n",
            "called": [
                "FUN_00105d20"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105da0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001028ed",
                "FUN_00102bb0",
                "FUN_00105db0",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "FUN_00102f55": {
            "renaming": {
                "FUN_00102f55": "close_file_and_set_errno_00102f55",
                "unaff_R12D": "fileDescriptor",
                "piVar2": "errnoPointer",
                "iVar1": "previousErrno"
            },
            "code": "\nundefined8 closeFileAndSetErrno_00102f55(void)\n\n{\n  int previousErrno;\n  int *errnoPointer;\n  int fileDescriptor;\n  \n  errnoPointer = __errno_location();\n  previousErrno = *errnoPointer;\n  close(fileDescriptor);\n  *errnoPointer = previousErrno;\n  return 0xffffffff;\n}\n\n",
            "called": [
                "close",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f55",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "close_file_and_set_errno_00102f55"
        },
        "FUN_001057a0": {
            "renaming": {
                "FUN_001057a0": "extract_file_name_001057a0",
                "param_1": "file_path",
                "param_2": "file_descriptor",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "iVar1": "result",
                "pcVar2": "last_slash",
                "lVar3": "file_name_offset",
                "lVar4": "i",
                "lVar5": "slash_offset",
                "pcVar6": "new_file_path",
                "bVar7": "is_slash",
                "auVar8": "return_value"
            },
            "code": "\nundefined  [16] extract_file_name_001057a0(char *file_path,int *file_descriptor,undefined8 unused_param_3,undefined8 unused_param_4)\n\n{\n  int result;\n  char *last_slash;\n  long file_name_offset;\n  long i;\n  long slash_offset;\n  char *new_file_path;\n  byte is_slash;\n  undefined return_value [16];\n  \n  is_slash = 0;\n  last_slash = strrchr(file_path,0x2f);\n  if (last_slash == (char *)0x0) {\n    last_slash = (char *)xmalloc(9);\n    file_name_offset = 0;\n  }\n  else {\n    slash_offset = (long)last_slash - (long)file_path;\n    last_slash = (char *)xmalloc(slash_offset + 0xb);\n    file_name_offset = slash_offset + 1;\n    new_file_path = last_slash;\n    for (i = slash_offset; i != 0; i = i + -1) {\n      *new_file_path = *file_path;\n      file_path = file_path + (ulong)is_slash * -2 + 1;\n      new_file_path = new_file_path + (ulong)is_slash * -2 + 1;\n    }\n    last_slash[slash_offset] = '/';\n  }\n  *(undefined8 *)(last_slash + file_name_offset) = 0x5858585858587473;\n  *(undefined *)((long)(last_slash + file_name_offset) + 8) = 0;\n  result = mkstemp(last_slash);\n  if (result == -1) {\n    new_file_path = (char *)0x0;\n    free(last_slash);\n  }\n  else {\n    *file_descriptor = result;\n    new_file_path = last_slash;\n  }\n  return_value._8_8_ = unused_param_4;\n  return_value._0_8_ = new_file_path;\n  return return_value;\n}\n\n",
            "called": [
                "xmalloc",
                "FUN_00102ba1",
                "strrchr",
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001057a0",
            "calling": [
                "FUN_00103c60",
                "FUN_001058b0"
            ],
            "imported": false,
            "current_name": "extract_file_name_001057a0"
        },
        "bfd_cache_close": {
            "renaming": {},
            "code": "\nvoid bfd_cache_close(void)\n\n{\n  bfd_cache_close();\n  return;\n}\n\n",
            "called": [
                "bfd_cache_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_00103e95",
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "bfd_cache_close"
        },
        "FUN_00102d8c": {
            "renaming": {
                "FUN_00102d8c": "display_file_info_00102d8c",
                "param_19": "fileMode",
                "param_20": "fileSize",
                "param_22": "timestamp",
                "__format": "errorFormat",
                "unaff_RBX": "errorMessage",
                "unaff_RBP": "filePointer",
                "unaff_R12B": "hasOffset",
                "uStack0000000000000015": "fileTypeChar",
                "cStack0000000000000016": "permissionCharA",
                "cStack0000000000000017": "permissionCharB",
                "param_9": "permissionCharC",
                "cStack0000000000000019": "permissionCharD",
                "cStack000000000000001a": "permissionCharE",
                "cStack000000000000001b": "permissionCharF",
                "cStack000000000000001c": "permissionCharG",
                "cStack000000000000001d": "permissionCharH",
                "cStack000000000000001e": "permissionCharI",
                "uStack000000000000001f": "flag",
                "uStack000000000000006c": "fileUID",
                "fprintf": "printFormatted",
                "&stack0x00000016": "formattedStrPtr",
                "&stack0x00000020": "timeStrPtr",
                "fputs": "writeToPtr",
                "fputc": "writeChar"
            },
            "code": "\nvoid displayFileInfo_00102d8c(void)\n\n{\n  char *errorFormat;\n  uint uVar1;\n  char **errorMessage;\n  FILE *filePointer;\n  char hasOffset;\n  undefined fileTypeChar;\n  char permissionCharA;\n  char permissionCharB;\n  char permissionCharC;\n  char permissionCharD;\n  char permissionCharE;\n  char permissionCharF;\n  char permissionCharG;\n  char permissionCharH;\n  char permissionCharI;\n  undefined flag;\n  uint fileMode;\n  uint fileUID;\n  uint fileSize;\n  undefined8 timestamp;\n  \n  errorFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(timeStrPtr,errorFormat);\n  uVar1 = fileMode & 0xf000;\n  if (uVar1 == 0x4000) {\n    fileTypeChar = 100;\n  }\n  else if (uVar1 == 0xa000) {\n    fileTypeChar = 0x6c;\n  }\n  else if (uVar1 == 0x6000) {\n    fileTypeChar = 0x62;\n  }\n  else if (uVar1 == 0x2000) {\n    fileTypeChar = 99;\n  }\n  else if (uVar1 == 0xc000) {\n    fileTypeChar = 0x73;\n  }\n  else {\n    fileTypeChar = 0x70;\n    if (uVar1 != 0x1000) {\n      fileTypeChar = 0x2d;\n    }\n  }\n  permissionCharA = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  permissionCharB = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  permissionCharC = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  permissionCharD = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  permissionCharE = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  permissionCharF = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  permissionCharG = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  permissionCharH = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  permissionCharI = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (permissionCharC == 'x') {\n      permissionCharC = 's';\n    }\n    else {\n      permissionCharC = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (permissionCharF == 'x') {\n      permissionCharF = 's';\n    }\n    else {\n      permissionCharF = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (permissionCharI == 'x') {\n      permissionCharI = 't';\n    }\n    else {\n      permissionCharI = 'T';\n    }\n  }\n  flag = 0;\n  fprintf(filePointer,\"%s %ld/%ld %6lu %s \",formattedStrPtr,(ulong)fileUID,\n          (ulong)fileSize,timestamp,timeStrPtr,(ulong)fileMode);\n  fputs(*errorMessage,filePointer);\n  if (hasOffset != '\\0') {\n    if ((*(byte *)((long)errorMessage + 0x49) & 0x10) == 0) {\n      if (errorMessage[0xb] != (char *)0x0) {\n        fprintf(filePointer,\" 0x%lx\");\n      }\n    }\n    else if (errorMessage[0xc] != (char *)0x0) {\n      fprintf(filePointer,\" 0x%lx\");\n    }\n  }\n  fputc(10,filePointer);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "fputs",
                "sprintf",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d8c",
            "calling": [
                "FUN_001079c0"
            ],
            "imported": false,
            "current_name": "display_file_info_00102d8c"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_00102c25",
                "FUN_00105300",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_00103e95",
                "FUN_001028ed",
                "FUN_00105c00",
                "FUN_001031cf",
                "FUN_001025a0",
                "FUN_00102f55",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "FUN_00105300": {
            "renaming": {
                "FUN_00105300": "analyze_binary_00105300",
                "param_1": "binaryPath",
                "param_2": "output",
                "plVar1": "currentFile",
                "pcVar2": "errorString",
                "bVar3": "convertFormat",
                "cVar4": "formatCheck",
                "iVar5": "status",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "piVar8": "errorNumber",
                "lVar9": "archivedFile",
                "puVar10": "loadedBinary",
                "local_b0": "matchingFormat",
                "local_a8": "fileStat"
            },
            "code": "\n\n\nundefined8 * analyzeBinary_00105300(char *binaryPath,undefined8 *output)\n\n{\n  long *currentFile;\n  char *errorString;\n  byte convertFormat;\n  char formatCheck;\n  int status;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  int *errorNumber;\n  long archivedFile;\n  undefined8 *loadedBinary;\n  undefined8 matchingFormat;\n  stat fileStat;\n  \n  bfd_set_error(0);\n  if (DAT_0010d5f0 == (char *)0x0) {\n    DAT_0010d5f0 = \"plugin\";\n  }\n  status = stat(binaryPath,&fileStat);\n  errorString = DAT_0010d618;\n  if (status == 0) goto LAB_001053be;\n  errorNumber = __errno_location();\n  if (*errorNumber == 2) {\n    if (DAT_0010d604 == '\\0') {\n      fprintf(_stderr,\"%s: \",DAT_0010d660);\n      perror(binaryPath);\n      check_and_exit_if_data_unavailable_0010315d();\n      return (undefined8 *)0x0;\n    }\n    if ((DAT_0010d5f0 == (char *)0x0) && (output != (undefined8 *)0x0)) {\n      loadedBinary = (undefined8 *)load_and_check_binary_00102710();\n      return loadedBinary;\n    }\n    output = (undefined8 *)bfd_openw(binaryPath,DAT_0010d5f0);\n    if (((output != (undefined8 *)0x0) && (formatCheck = bfd_set_format(output,2), formatCheck != '\\0')) &&\n       (formatCheck = bfd_close(output), formatCheck != '\\0')) {\n      errorString = binaryPath;\n      if (_DAT_0010d610 == 0) goto LAB_00102826;\n      goto LAB_001053be;\n    }\n  }\n  handle_error_00107c10(binaryPath);\n  do {\n    convertFormat = *(byte *)((long)output + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (convertFormat != 0) {\n        libraryName = *output;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (convertFormat == 0) {\n      libraryName = *output;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      print_error_00107c20(binaryPath);\n      status = bfd_get_error();\n      if (status == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(matchingFormat);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      currentFile = output + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(output,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(output,archivedFile)) {\n        *currentFile = archivedFile;\n        currentFile = (long *)(archivedFile + 0xf0);\n      }\n      *currentFile = 0;\n      status = bfd_get_error();\n      if (status == 9) {\n        return output;\n      }\n      do {\n        handle_error_00107c10(binaryPath);\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(libraryName,binaryPath);\n        errorString = binaryPath;\nLAB_001053be:\n        DAT_0010d618 = errorString;\n        output = (undefined8 *)bfd_openr(binaryPath,DAT_0010d5f0);\n      } while (output == (undefined8 *)0x0);\n      formatCheck = bfd_check_format_matches(output,2,&matchingFormat);\n      if (formatCheck == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(output,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103bd1",
                "bfd_set_error",
                "FUN_00102710",
                "FUN_00107c10",
                "bfd_close",
                "stat",
                "perror",
                "bfd_openw",
                "FUN_00107690",
                "bfd_openr_next_archived_file",
                "bfd_check_format_matches",
                "bfd_set_format",
                "FUN_00107c20",
                "bfd_openr",
                "xexit",
                "FUN_00107920",
                "fprintf",
                "dcgettext",
                "FUN_0010315d",
                "bfd_get_error",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105300",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "analyze_binary_00105300"
        },
        "FUN_00105db0": {
            "renaming": {
                "FUN_00105db0": "analyze_binary_file_00105db0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "byteArray",
                "puVar2": "uintPtr",
                "bVar3": "byteVal",
                "plVar4": "longPtr",
                "puVar5": "undefined8Ptr",
                "uVar6": "uintVar",
                "uVar7": "uintVar",
                "bVar8": "boolVar",
                "bVar9": "boolVar",
                "ppcVar10": "charPtrPtr",
                "piVar11": "intPtr",
                "puVar12": "undefinedPtr",
                "bVar13": "byteVar",
                "cVar14": "charVar",
                "iVar15": "intVar",
                "uVar16": "uintVar",
                "uVar17": "uintVar",
                "uVar27": "undefined8Var",
                "pFVar18": "filePtr",
                "sVar19": "sizeVar",
                "sVar20": "sizeVar",
                "__ptr": "bytePtr",
                "plVar21": "longPtr",
                "pFVar22": "filePtr",
                "pcVar23": "charPtr",
                "lVar24": "longVar",
                "uVar25": "ulongVar",
                "puVar26": "undefined8Ptr",
                "pFVar28": "filePtr",
                "lVar35": "longVar",
                "uVar40": "ulongVar",
                "uVar41": "ulongVar",
                "uVar42": "ulongVar",
                "uVar44": "uintVar",
                "iVar45": "intVar",
                "local_130": "fileVar",
                "local_128": "fileVar",
                "local_118": "byteArrayVar",
                "local_110": "charPtrPtrVar",
                "local_108": "sizeVar",
                "local_100": "longVar",
                "local_c8": "undefinedArrayVar",
                "uStack_c6": "undefinedVar",
                "uStack_c5": "undefined5Var",
                "local_b0": "uintVar"
            },
            "code": "\n\n\nvoid analyzeBinaryFile_00105db0(uint argc,FILE *argv)\n\n{\n  byte *byteArray;\n  uint *uintPtr;\n  byte byteVal;\n  long *longPtr;\n  undefined8 *undefined8Ptr;\n  undefined4 uintVar;\n  undefined4 uintVar;\n  bool boolVar;\n  bool boolVar;\n  char **charPtrPtr;\n  int *intPtr;\n  undefined *undefinedPtr;\n  byte byteVar;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined4 uintVar;\n  FILE *filePtr;\n  size_t sizeVar;\n  size_t sizeVar;\n  byte *bytePtr;\n  long *longPtr;\n  FILE *filePtr;\n  char *charPtr;\n  long longVar;\n  ulong ulongVar;\n  undefined8 *undefined8Ptr;\n  undefined8 undefined8Var;\n  FILE *filePtr;\n  long **pplVar29;\n  undefined8 uVar30;\n  char **ppcVar31;\n  uint extraout_EDX;\n  char **ppcVar32;\n  byte *pbyteVal3;\n  long lVar34;\n  long longVar;\n  undefined **ppuVar36;\n  uint uVar37;\n  char *unaff_RBP;\n  byte *pbyteVal8;\n  char *pcVar39;\n  ulong ulongVar;\n  ulong ulongVar;\n  ulong ulongVar;\n  FILE *unaff_R12;\n  char *pcVar43;\n  uint uintVar;\n  int intVar;\n  char *pcVar46;\n  bool bVar47;\n  byte bVar48;\n  undefined8 fileVar;\n  FILE *fileVar;\n  byte *byteArrayVar;\n  char **charPtrPtrVar;\n  size_t sizeVar;\n  long longVar;\n  undefined undefinedArrayVar [2];\n  undefined undefinedVar;\n  undefined5 undefined5Var;\n  uint uintVar;\n  \n  bVar48 = 0;\n  pcVar46 = (char *)(ulong)argc;\n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010d660 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010d660);\n  bfd_plugin_set_program_name(DAT_0010d660);\n  pcVar43 = (char *)argv;\n  filePtr = argv;\n  if ((int)argc < 2) goto LAB_001062c6;\n  charPtrPtrVar = (char **)0x7d0;\n  unaff_R12 = (FILE *)0x1;\n  fileVar = (FILE *)0x0;\n  filePtr = argv;\n  do {\n    uintVar = (uint)unaff_R12;\n    unaff_RBP = (char *)(long)(int)uintVar;\n    fileVar = (FILE *)((long)unaff_RBP * 8);\n    pcVar43 = (char *)filePtr;\n    if (**(char **)(&filePtr->_flags + (long)unaff_RBP * 2) == '@') {\n      uintVar = (int)charPtrPtrVar - 1;\n      charPtrPtrVar = (char **)(ulong)uintVar;\n      if (uintVar == 0) {\n        longPtr = *(long **)filePtr;\n        pcVar46 = \"%s: error: too many @-files encountered\\n\";\nLAB_00106ffe:\n        fprintf(_stderr,pcVar46,longPtr);\nLAB_0010700f:\n                    \n        xexit(1);\n      }\n      pcVar39 = *(char **)(&filePtr->_flags + (long)unaff_RBP * 2) + 1;\n      intVar = stat(pcVar39,(stat *)undefinedArrayVar);\n      if (-1 < intVar) {\n        if ((uintVar & 0xf000) == 0x4000) {\n          longPtr = *(long **)filePtr;\n          pcVar46 = \"%s: error: @-file refers to a directory\\n\";\n          goto LAB_00106ffe;\n        }\n        filePtr = fopen(pcVar39,\"r\");\n        if (filePtr != (FILE *)0x0) {\n          intVar = fseek(filePtr,0,2);\n          if (((intVar != -1) && (sizeVar = ftell(filePtr), sizeVar != 0xffffffffffffffff)) &&\n             (intVar = fseek(filePtr,0,0), intVar != -1)) {\n            byteArrayVar = (byte *)xmalloc(sizeVar + 1);\n            sizeVar = fread(byteArrayVar,1,sizeVar,filePtr);\n            if ((sizeVar == sizeVar) || (intVar = ferror(filePtr), intVar == 0)) {\n              byteArrayVar[sizeVar] = 0;\n              byteVar = *byteArrayVar;\n              pbyteVal3 = byteArrayVar;\n              while( true ) {\n                if (byteVar == 0) goto LAB_00106814;\n                if (((&_sch_istable)[(ulong)byteVar * 2] & 0x40) == 0) break;\n                byteVar = pbyteVal3[1];\n                pbyteVal3 = pbyteVal3 + 1;\n              }\n              sizeVar = strlen((char *)byteArrayVar);\n              bytePtr = (byte *)xmalloc(sizeVar + 1);\n              filePtr = (FILE *)0x0;\n              intVar = 0;\n              boolVar = false;\n              bVar47 = false;\n              boolVar = false;\n              longVar = 0;\n              pbyteVal3 = byteArrayVar;\n              do {\n                while (((&_sch_istable)[(ulong)*pbyteVal3 * 2] & 0x40) != 0) {\n                  pbyteVal3 = pbyteVal3 + 1;\n                }\n                if ((intVar == 0) || (intVar + -1 <= (int)longVar)) {\n                  if (filePtr == (FILE *)0x0) {\n                    intVar = 8;\n                    filePtr = (FILE *)xmalloc(0x40);\n                    ppcVar31 = (char **)((long)&filePtr->_flags + longVar * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                  else {\n                    intVar = intVar * 2;\n                    filePtr = (FILE *)xrealloc(filePtr,(long)intVar << 3);\n                    ppcVar31 = (char **)((long)&filePtr->_flags + longVar * 8);\n                    *ppcVar31 = (char *)0x0;\n                  }\n                }\n                else {\n                  ppcVar31 = (char **)((long)&filePtr->_flags + longVar * 8);\n                }\n                byteVar = *pbyteVal3;\n                pbyteVal8 = bytePtr;\n                while (byteVar != 0) {\n                  while( true ) {\n                    if ((((&_sch_istable)[(ulong)byteVar * 2] & 0x40) != 0) &&\n                       (!(bool)(boolVar | boolVar | bVar47))) {\n                      boolVar = false;\n                      boolVar = false;\n                      bVar47 = false;\n                      goto LAB_0010606f;\n                    }\n                    if (!boolVar) break;\n                    pbyteVal3 = pbyteVal3 + 1;\n                    *pbyteVal8 = byteVar;\n                    pbyteVal8 = pbyteVal8 + 1;\n                    boolVar = false;\n                    byteVar = *pbyteVal3;\n                    if (byteVar == 0) goto LAB_0010606f;\n                  }\n                  if (byteVar == 0x5c) {\n                    boolVar = true;\n                  }\n                  else if (bVar47) {\n                    if (byteVar == 0x27) {\n                      bVar47 = false;\n                    }\n                    else {\nLAB_001061f1:\n                      *pbyteVal8 = byteVar;\n                      pbyteVal8 = pbyteVal8 + 1;\n                    }\n                  }\n                  else if (boolVar) {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = false;\n                  }\n                  else if (byteVar == 0x27) {\n                    bVar47 = true;\n                  }\n                  else {\n                    if (byteVar != 0x22) goto LAB_001061f1;\n                    boolVar = true;\n                  }\n                  byteArray = pbyteVal3 + 1;\n                  pbyteVal3 = pbyteVal3 + 1;\n                  byteVar = *byteArray;\n                }\nLAB_0010606f:\n                *pbyteVal8 = 0;\n                longPtr = (long *)xstrdup(bytePtr);\n                *ppcVar31 = (char *)longPtr;\n                *(undefined8 *)(filePtr->_shortbuf + longVar * 8 + -0x7b) = 0;\n                byteVar = *pbyteVal3;\n                byteVal = (&_sch_istable)[(ulong)byteVar * 2];\n                while ((byteVal & 0x40) != 0) {\n                  byteVar = pbyteVal3[1];\n                  pbyteVal3 = pbyteVal3 + 1;\n                  byteVal = (&_sch_istable)[(ulong)byteVar * 2];\n                }\n                longVar = longVar + 1;\n                if (byteVar == 0) {\n                  free(bytePtr);\n                  if (filePtr == argv) goto LAB_00106834;\n                  goto LAB_0010610a;\n                }\n              } while( true );\n            }\n            free(byteArrayVar);\n          }\n          fclose(filePtr);\n        }\n      }\n    }\n    if ((int)pcVar46 <= (int)(uintVar + 1)) {\nLAB_001062c6:\n      do {\n        if (_DAT_0010d2d4 < 0) goto LAB_001073cc;\nLAB_001062d3:\n        uintVar = (uint)unaff_R12;\n        intVar = bfd_init();\n        pcVar39 = \"fatal error: libbfd ABI mismatch\";\n        if (intVar != 0x118) goto LAB_00106803;\n        pcVar39 = \"x86_64-pc-linux-gnu\";\n        uintVar = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n        undefinedPtr = PTR_DAT_0010d2e0;\n        unaff_R12 = (FILE *)(ulong)uintVar;\n        if ((char)uintVar != '\\0') {\n          if (__xexit_cleanup == (code *)0x0) {\n            __xexit_cleanup = reverse_execute_functions_00107cc0;\n          }\n          if (*(int *)(PTR_DAT_0010d2e0 + 8) < 0x20) {\nLAB_0010632b:\n            undefinedPtr = PTR_DAT_0010d2e0;\n            intVar = *(int *)(PTR_DAT_0010d2e0 + 8);\n            *(int *)(PTR_DAT_0010d2e0 + 8) = intVar + 1;\n            *(code **)(undefinedPtr + (long)intVar * 8 + 0x10) = cleanup_and_remove_file_00107730;\n          }\n          else {\n            undefined8Ptr = (undefined8 *)malloc(0x110);\n            if (undefined8Ptr != (undefined8 *)0x0) {\n              *undefined8Ptr = undefinedPtr;\n              *(undefined4 *)(undefined8Ptr + 1) = 0;\n              PTR_DAT_0010d2e0 = (undefined *)undefined8Ptr;\n              goto LAB_0010632b;\n            }\n          }\n          longVar = 1;\n          do {\n            longVar = longVar;\n            intVar = (int)pcVar46;\n            if (intVar <= (int)longVar) break;\n            charVar = initialize_default_00107640(*(undefined8 *)((int *)pcVar43 + longVar * 2));\n            longVar = longVar + 1;\n          } while (charVar != '\\0');\n          pcVar46 = (char *)((long)pcVar43 + longVar * 8 + -8);\n          uintVar = intVar - ((int)longVar + -1);\n          filePtr = (FILE *)(ulong)uintVar;\n          if (_DAT_0010d2d4 != 0) {\n            pcVar43 = \"DhHUvVt\";\n            uVar37 = 0;\n            while (intVar = getopt_long(filePtr,pcVar46,\"DhHUvVt\",&PTR_DAT_0010d300), intVar != -1)\n            {\n              if (intVar < 0x77) {\n                if (0x43 < intVar) {\n                  switch(intVar) {\n                  case 0x44:\n                    _DAT_0010d2d0 = 1;\n                    break;\n                  case 0x48:\n                  case 0x68:\n                    _DAT_0010d658 = 1;\n                    break;\n                  case 0x55:\n                    _DAT_0010d2d0 = 0;\n                    break;\n                  case 0x56:\n                  case 0x76:\n                    _DAT_0010d654 = 1;\n                    break;\n                  case 0x74:\n                    uVar37 = uintVar;\n                  }\n                }\n              }\n              else if (intVar == 0xc9) {\n                bfd_plugin_set_plugin(_optarg);\n              }\n            }\n            if ((int)uintVar < 2) {\nLAB_00107125:\n              pcVar39 = (char *)0x0;\n              print_usage_0010394a();\n            }\n            else {\n              if (_DAT_0010d658 != 0) {\nLAB_0010711b:\n                print_usage_0010394a();\n                goto LAB_00107125;\n              }\n              if (_DAT_0010d654 != 0) {\n                print_binutils_info_001075e0(\"ranlib\");\n                goto LAB_0010711b;\n              }\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\n              unaff_R12 = (FILE *)0x0;\n              pcVar43 = (char *)(long)_optind;\n              while( true ) {\n                if ((int)uintVar <= (int)pcVar43) goto LAB_00106f8b;\n                pcVar39 = *(char **)((int *)pcVar46 + (long)pcVar43 * 2);\n                if ((char)uVar37 != '\\0') break;\n                uintVar = check_and_extract_archive_00107650();\n                pcVar43 = (char *)((long)(int *)pcVar43 + 1);\n                unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              }\n            }\n            while (longVar = check_file_001052a0(pcVar39), longVar < 1) {\n              uintVar = 1;\nLAB_001071c4:\n              intPtr = (int *)pcVar43;\n              pcVar43 = (char *)((long)intPtr + 1);\n              unaff_R12 = (FILE *)(ulong)((uint)unaff_R12 | uintVar);\n              if ((int)uintVar <= (int)pcVar43) {\nLAB_00106f8b:\n                    \n                xexit(unaff_R12);\n              }\n              pcVar39 = *(char **)((char *)((long)pcVar46 + 0x83) + (long)intPtr * 8 + -0x7b);\n            }\n            intVar = open(pcVar39,2,0);\n            if (intVar < 0) {\n              bfd_set_error(1);\n              handle_error_00107c10(pcVar39);\nLAB_0010737f:\n              handle_error_00107c10(pcVar39);\nLAB_00107387:\n              print_error_00107c20(pcVar39);\n              intVar = bfd_get_error();\n              if (intVar == 0xd) {\n                print_matching_formats_00103bd1(CONCAT53(undefined5Var,\n                                      CONCAT12(undefinedVar,CONCAT11(undefinedArrayVar[1],undefinedArrayVar[0]))));\n              }\n              goto LAB_0010700f;\n            }\n            unaff_RBP = (char *)bfd_fdopenr(pcVar39,0);\n            if ((FILE *)unaff_RBP == (FILE *)0x0) goto LAB_0010737f;\n            charVar = bfd_check_format_matches(unaff_RBP,2,undefinedArrayVar);\n            if (charVar == '\\0') goto LAB_00107387;\n            if ((*(byte *)((long)((long)unaff_RBP + 0x48) + 1) & 8) != 0) {\n              if (_DAT_0010d2d0 != 0) {\n                uintPtr = (uint *)((long)((long)unaff_RBP + 0x40) + 4);\n                *uintPtr = *uintPtr | 0x2000;\n              }\n              (**(code **)(*(char **)((long)unaff_RBP + 8) + 0x1f0))(unaff_RBP);\n              charVar = bfd_close(unaff_RBP);\n              if (charVar != '\\0') {\n                uintVar = 0;\n                goto LAB_001071c4;\n              }\n              goto LAB_0010737f;\n            }\n            undefined8Var = dcgettext(0,\"%s: no archive map to update\",5);\n            print_error_and_exit_00107690(undefined8Var,pcVar39);\nLAB_001073cc:\n            pcVar39 = (char *)lbasename(DAT_0010d660);\n            sizeVar = strlen(pcVar39);\n            if ((sizeVar < 6) ||\n               (intVar = filename_cmp(pcVar39 + (sizeVar - 6),\"ranlib\"), intVar != 0)) {\n              _DAT_0010d2d4 = 0;\n            }\n            else {\n              _DAT_0010d2d4 = 1;\n            }\n            goto LAB_001062d3;\n          }\n          ppuVar36 = &PTR_DAT_0010d300;\n          unaff_RBP = \"hdmpqrtxl:coOVsSuvabiMNfPTDU\";\n          pcVar43 = (char *)&DAT_001096a0;\n          filePtr = (FILE *)unaff_RBP;\n          filePtr = filePtr;\n          if ((int)uintVar < 2) goto switchD_00107462_caseD_1;\n          fileVar = (FILE *)CONCAT71(fileVar._1_7_,(char)uintVar);\nLAB_001063a3:\n          filePtr = (FILE *)unaff_RBP;\n          if (**(char **)((long)pcVar46 + 8) != '-') {\n            undefinedArrayVar[0] = 0x2d;\n            undefinedVar = 0;\n            sizeVar = strlen(*(char **)((long)pcVar46 + 8));\n            intVar = (int)sizeVar + (int)filePtr;\n            unaff_R12 = (FILE *)xmalloc((long)intVar * 8);\n            uintVar = *(undefined4 *)((long)pcVar46 + 4);\n            unaff_R12->_flags = *(int *)pcVar46;\n            *(undefined4 *)&unaff_R12->field_0x4 = uintVar;\n            ppcVar31 = *(char ***)((long)pcVar46 + 8);\n            fileVar = (FILE *)((long)pcVar46 + 0x10);\n            charPtrPtrVar = ppcVar31;\n            if (*(char *)ppcVar31 == '\\0') {\n              ppcVar32 = &unaff_R12->_IO_read_ptr;\n            }\n            else {\n              byteArrayVar = undefinedArrayVar;\n              undefinedArrayVar[1] = *(char *)ppcVar31;\n              pcVar39 = (char *)xstrdup();\n              ppcVar32 = &unaff_R12->_IO_read_end;\n              unaff_R12->_IO_read_ptr = pcVar39;\n              if (*(char *)((long)ppcVar31 + 1) != '\\0') {\n                undefinedArrayVar[1] = *(char *)((long)ppcVar31 + 1);\n                pcVar39 = (char *)xstrdup(byteArrayVar);\n                ppcVar32 = &unaff_R12->_IO_read_base;\n                unaff_R12->_IO_read_end = pcVar39;\n                if (*(char *)((long)ppcVar31 + 2) != '\\0') {\n                  undefinedArrayVar[1] = *(char *)((long)ppcVar31 + 2);\n                  pcVar39 = (char *)xstrdup(byteArrayVar);\n                  ppcVar32 = &unaff_R12->_IO_write_base;\n                  unaff_R12->_IO_read_base = pcVar39;\n                  if (*(char *)((long)ppcVar31 + 3) != '\\0') {\n                    ppcVar32 = &unaff_R12->_IO_write_ptr;\n                    undefinedArrayVar[1] = *(char *)((long)ppcVar31 + 3);\n                    pcVar39 = (char *)xstrdup(byteArrayVar);\n                    unaff_R12->_IO_write_base = pcVar39;\n                    charVar = *(char *)((long)ppcVar31 + 4);\n                    charPtrPtrVar = ppcVar32;\n                    if (charVar != '\\0') {\n                      pcVar39 = (char *)((long)ppcVar31 + 4);\n                      ppcVar31 = ppcVar32;\n                      do {\n                        ppcVar32 = ppcVar31 + 1;\n                        undefinedArrayVar[1] = charVar;\n                        charPtr = (char *)xstrdup(byteArrayVar);\n                        pcVar39 = pcVar39 + 1;\n                        *ppcVar31 = charPtr;\n                        charVar = *pcVar39;\n                        ppcVar31 = ppcVar32;\n                        charPtrPtrVar = ppcVar32;\n                      } while (charVar != '\\0');\n                    }\n                  }\n                }\n              }\n            }\n            longVar = (long)(int)filePtr;\n            intPtr = (int *)pcVar46 + longVar * 2;\n            if (fileVar < intPtr) {\n              ulongVar = longVar * 8 - 0x11;\n              if ((ulongVar < 0x18) || (ppcVar32 == (char **)((long)pcVar46 + 0x18))) {\n                *ppcVar32 = *(char **)((long)pcVar46 + 0x10);\n                if (((char **)((long)pcVar46 + 0x18) < intPtr) &&\n                   ((((ppcVar32[1] = *(char **)((long)pcVar46 + 0x18),\n                      (char **)((long)pcVar46 + 0x20) < intPtr &&\n                      (ppcVar32[2] = *(char **)((long)pcVar46 + 0x20),\n                      (char **)((long)pcVar46 + 0x28) < intPtr)) &&\n                     (ppcVar32[3] = *(char **)((long)pcVar46 + 0x28),\n                     (char **)((long)pcVar46 + 0x30) < intPtr)) &&\n                    (ppcVar32[4] = *(char **)((long)pcVar46 + 0x30),\n                    (char **)((long)pcVar46 + 0x38) < intPtr)))) {\n                  ppcVar32[5] = *(char **)((long)pcVar46 + 0x38);\n                  charPtrPtr = ppcVar32 + 6;\n                  for (ppcVar31 = (char **)((long)pcVar46 + 0x40); ppcVar31 < intPtr;\n                      ppcVar31 = ppcVar31 + (ulong)bVar48 * -2 + 1) {\n                    *charPtrPtr = *ppcVar31;\n                    charPtrPtr = charPtrPtr + (ulong)bVar48 * -2 + 1;\n                  }\n                }\n              }\n              else {\n                uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x10) + 4);\n                uintVar = *(undefined4 *)((long)pcVar46 + 0x18);\n                uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x18) + 4);\n                ulongVar = (ulongVar >> 3) + 1;\n                *(undefined4 *)ppcVar32 = *(undefined4 *)((long)pcVar46 + 0x10);\n                *(undefined4 *)((long)ppcVar32 + 4) = uintVar;\n                *(undefined4 *)(ppcVar32 + 1) = uintVar;\n                *(undefined4 *)((long)ppcVar32 + 0xc) = uintVar;\n                uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x20) + 4);\n                uintVar = *(undefined4 *)((long)pcVar46 + 0x28);\n                uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x28) + 4);\n                ulongVar = ulongVar >> 1;\n                *(undefined4 *)(ppcVar32 + 2) = *(undefined4 *)((long)pcVar46 + 0x20);\n                *(undefined4 *)((long)ppcVar32 + 0x14) = uintVar;\n                *(undefined4 *)(ppcVar32 + 3) = uintVar;\n                *(undefined4 *)((long)ppcVar32 + 0x1c) = uintVar;\n                if (ulongVar != 2) {\n                  uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x30) + 4);\n                  uintVar = *(undefined4 *)((long)pcVar46 + 0x38);\n                  uintVar = *(undefined4 *)((long)((long)pcVar46 + 0x38) + 4);\n                  *(undefined4 *)(ppcVar32 + 4) = *(undefined4 *)((long)pcVar46 + 0x30);\n                  *(undefined4 *)((long)ppcVar32 + 0x24) = uintVar;\n                  *(undefined4 *)(ppcVar32 + 5) = uintVar;\n                  *(undefined4 *)((long)ppcVar32 + 0x2c) = uintVar;\n                  if (ulongVar != 3) {\n                    ulongVar = 3;\n                    do {\n                      ulongVar = ulongVar + 1;\n                      pcVar39 = (char *)((long)pcVar46 + 0x83) + ulongVar * 0x10 + -0x73;\n                      uintVar = *(undefined4 *)(pcVar39 + 4);\n                      uintVar = *(undefined4 *)(pcVar39 + 8);\n                      uintVar = *(undefined4 *)(pcVar39 + 0xc);\n                      ppcVar31 = ppcVar32 + ulongVar * 2;\n                      *(undefined4 *)ppcVar31 = *(undefined4 *)pcVar39;\n                      *(undefined4 *)((long)ppcVar31 + 4) = uintVar;\n                      *(undefined4 *)(ppcVar31 + 1) = uintVar;\n                      *(undefined4 *)((long)ppcVar31 + 0xc) = uintVar;\n                      ulongVar = ulongVar;\n                    } while (ulongVar != ulongVar);\n                  }\n                }\n                if ((ulongVar & 1) != 0) {\n                  ppcVar32[ulongVar & 0xfffffffffffffffe] =\n                       *(char **)((long)fileVar + (ulongVar & 0xfffffffffffffffe) * 8);\n                }\n              }\n              ppcVar32 = ppcVar32 + longVar + -2;\n            }\n            filePtr = (FILE *)(ulong)(intVar - 1);\n            *ppcVar32 = (char *)0x0;\n            pcVar46 = (char *)unaff_R12;\n          }\nLAB_001065a2:\n          while( true ) {\n            uintVar = (uint)unaff_R12;\n            uintVar = getopt_long((ulong)filePtr & 0xffffffff,pcVar46,filePtr,ppuVar36,0);\n            unaff_RBP = (char *)filePtr;\n            if (uintVar == 0xffffffff) break;\n            if (((uintVar - 100 < 0x15) && ((0x117201UL >> ((ulong)(uintVar - 100) & 0x3f) & 1) != 0))\n               && (DAT_0010d64c != 0)) goto LAB_001067f7;\n            filePtr = (FILE *)pcVar46;\n            if (uintVar < 0xcc) {\n                    /* WARNING: Could not recover jumptable at 0x001065eb. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n              (*(code *)((long)(int *)pcVar43 + (long)((int *)pcVar43)[uintVar]))();\n              return;\n            }\nswitchD_00107462_caseD_1:\n            print_usage_info_0010342d(0);\n            pcVar46 = (char *)filePtr;\nswitchD_00107462_caseD_68:\n            _DAT_0010d658 = 1;\n          }\nLAB_00106680:\n          uintVar = DAT_0010d64c;\n          filePtr = (FILE *)unaff_RBP;\n          if (DAT_0010d64c == 0) {\n            if (((DAT_0010d648 == 1) || (_DAT_0010d650 != 0)) ||\n               (((int)filePtr <= _optind || (_optind < 1)))) {\n              uintVar = 0;\n              goto LAB_001066aa;\n            }\n            pcVar46 = (char *)((long)pcVar46 + (long)_optind * 8 + -8);\n            uintVar = (int)filePtr - (_optind + -1);\n            filePtr = (FILE *)(ulong)uintVar;\n            _optind = 0;\n            if (1 < (int)uintVar) goto LAB_001063a3;\n            goto LAB_001065a2;\n          }\nLAB_001066aa:\n          unaff_R12 = (FILE *)((ulong)fileVar & 0xff);\n          uintVar = (uint)unaff_R12;\n          ppuVar36 = (undefined **)((int *)pcVar46 + (long)_optind * 2);\n          if (_DAT_0010d658 == 0) {\n            if (_DAT_0010d654 != 0) {\n              print_binutils_info_001075e0(&DAT_0010807c);\n              goto LAB_00107591;\n            }\n            if (_DAT_0010d650 == 0) {\n              filePtr = (FILE *)pcVar46;\n              if (*ppuVar36 == (undefined *)0x0) goto switchD_00107462_caseD_1;\n              if (DAT_0010d64c == 7) {\n                if (DAT_0010d648 == 0) {\n                  if (uintVar == 3) goto LAB_00106abc;\n                  if (uintVar != 0) goto LAB_00106700;\nLAB_00106eff:\n                  pcVar39 = \"no operation specified\";\n                  goto LAB_00106803;\n                }\n                DAT_0010d64c = 2;\n                if (_DAT_0010d644 != 0) goto LAB_0010704f;\n              }\n              else if ((uintVar == 3) || (uintVar == 0)) {\n                if (DAT_0010d648 == 1) {\n                  uintVar = check_and_extract_archive_00107650();\n                    \n                  xexit(uintVar);\n                }\nLAB_00106abc:\n                if (uintVar == 0) goto LAB_00106eff;\n                if (_DAT_0010d644 != 0) {\nLAB_00106ad1:\n                  pcVar39 = \"`u\\' is only meaningful with the `r\\' option.\";\n                  goto LAB_00106803;\n                }\n              }\n              else {\nLAB_00106700:\n                if (_DAT_0010d644 != 0) goto LAB_00107548;\n              }\nLAB_0010670d:\n              if (_DAT_0010d2d0 < 0) {\n                _DAT_0010d2d0 = 1;\n              }\nLAB_00106720:\n              unaff_RBP = (char *)0x0;\n              if (DAT_0010d640 != 0) {\n                DAT_0010d638 = (long)*ppuVar36;\n                unaff_RBP = (char *)0x1;\n                pcVar39 = \"missing position arg.\";\n                if (DAT_0010d638 == 0) goto LAB_00106803;\n              }\n              if (DAT_0010d634 != '\\0') {\n                pcVar39 = \"`N\\' is only meaningful with the `x\\' and `d\\' options.\";\n                if ((DAT_0010d64c & 0xfffffffb) == 1) {\n                  intVar = (int)unaff_RBP;\n                  if (*(char **)((long)ppuVar36 + (long)intVar * 2 * 4) == (char *)0x0) {\n                    undefined8Var = dcgettext(0,\"`N\\' missing value.\",5);\n                    print_error_and_exit_00107690(undefined8Var);\n                    uintVar = extraout_EDX;\nLAB_00107548:\n                    if (uintVar == 2) {\nLAB_0010704f:\n                      pcVar39 = \"`u\\' is not meaningful with the `D\\' option.\";\n                      if (_DAT_0010d2d0 < 1) goto code_r0x00107068;\n                      goto LAB_00106803;\n                    }\n                    goto LAB_00106ad1;\n                  }\n                  unaff_RBP = (char *)(ulong)(intVar + 1);\n                  longVar = strtol(*(char **)((long)ppuVar36 + (long)intVar * 2 * 4),(char **)0x0,10)\n                  ;\n                  pcVar39 = \"Value for `N\\' must be positive.\";\n                  _DAT_0010d630 = (int)longVar;\n                  if (0 < _DAT_0010d630) goto LAB_0010673c;\n                }\n                goto LAB_00106803;\n              }\nLAB_0010673c:\n              longVar = (long)(int)unaff_RBP;\n              filePtr = (FILE *)unaff_RBP;\n              if (*(long *)(int *)((long)ppuVar36 + longVar * 2 * 4) == 0)\n              goto switchD_00107462_caseD_1;\n              filePtr = (FILE *)((long)ppuVar36 + (longVar + 1) * 2 * 4);\n              if (*(FILE **)filePtr == (FILE *)0x0) {\n                pcVar43 = (char *)0x0;\n                filePtr = (FILE *)0x0;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 2) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x1;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 3) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x2;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 4) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x3;\n              }\n              else if (*(long *)((long)ppuVar36 + (longVar + 5) * 2 * 4) == 0) {\n                pcVar43 = (char *)0x4;\n              }\n              else {\n                filePtr = (FILE *)0x5;\n                do {\n                  pcVar43 = (char *)filePtr;\n                  filePtr = (FILE *)((long)(int *)pcVar43 + 1);\n                } while (*(long *)((int *)((long)ppuVar36 + longVar * 2 * 4) + (long)filePtr * 2) !=\n                         0);\n              }\n              undefined8Ptr = (undefined8 *)analyze_binary_00105300();\n              filePtr = filePtr;\n              if (DAT_0010d64c == 5) {\n                pcVar39 = \"`x\\' cannot be used on thin archives.\";\n                if ((*(byte *)((long)undefined8Ptr + 0x49) & 0x10) == 0) {\n                  unaff_RBP = (char *)filePtr;\n                  if (DAT_0010d628 != (char *)0x0) goto LAB_00106d5c;\nswitchD_00106ed8_caseD_5:\n                  process_archive_entries_00105480(undefined8Ptr,extract_and_write_archive_member_00107740,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                  goto LAB_0010696c;\n                }\n                goto LAB_00106803;\n              }\n              if (DAT_0010d628 != (char *)0x0) {\nLAB_00106d5c:\n                sizeVar = strlen(DAT_0010d628);\n                pcVar46 = \"__.LIBDEP\";\n                unaff_RBP = (char *)(sizeVar + 1);\n                DAT_0010d620 = bfd_create(\"__.LIBDEP\",undefined8Ptr);\n                if (DAT_0010d620 == 0) {\n                  pcVar39 = \"Cannot create libdeps record.\";\n                }\n                else {\n                  longVar = bfd_find_target(\"binary\",DAT_0010d620);\n                  pcVar39 = \"Cannot set libdeps record type to binary.\";\n                  if (longVar != 0) {\n                    charVar = bfd_set_format(DAT_0010d620,1,5);\n                    pcVar39 = \"Cannot set libdeps object format.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    charVar = bfd_make_writable(DAT_0010d620,\"Cannot set libdeps object format.\",5);\n                    pcVar39 = \"Cannot make libdeps object writable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    filePtr = (FILE *)bfd_bwrite(DAT_0010d628,unaff_RBP,DAT_0010d620);\n                    pcVar39 = \"Cannot write libdeps record.\";\n                    if (filePtr != (FILE *)unaff_RBP) goto LAB_00106803;\n                    charVar = bfd_make_readable(DAT_0010d620,\"Cannot write libdeps record.\",5);\n                    pcVar39 = \"Cannot make libdeps object readable.\";\n                    if (charVar == '\\0') goto LAB_00106803;\n                    longVar = bfd_find_target(\"plugin\",DAT_0010d620,5);\n                    pcVar39 = \"Cannot reset libdeps record type.\";\n                    if (longVar == 0) goto LAB_00106803;\n                    intVar = (int)pcVar43;\n                    fileVar = (FILE *)((long)(intVar + 2) * 8);\n                    unaff_RBP = (char *)xmalloc(fileVar,\"Cannot reset libdeps record type.\");\n                    if (intVar == 0) {\n                      longVar = 0;\n                    }\n                    else {\n                      uintVar = *(undefined4 *)&filePtr->field_0x4;\n                      *(int *)unaff_RBP = filePtr->_flags;\n                      *(undefined4 *)((long)unaff_RBP + 4) = uintVar;\n                      longVar = 8;\n                      ppcVar31 = (char **)((long)unaff_RBP + 8);\n                      for (pcVar43 = fileVar[-1]._unused2 + 4; pcVar43 != (char *)0x0;\n                          pcVar43 = pcVar43 + -1) {\n                        *(undefined *)ppcVar31 = *(undefined *)&filePtr->_flags;\n                        filePtr = (FILE *)((long)filePtr + (ulong)bVar48 * -2 + 1);\n                        ppcVar31 = (char **)((long)ppcVar31 + (ulong)bVar48 * -2 + 1);\n                      }\n                    }\n                    *(char **)((long)(char **)unaff_RBP + longVar) = \"__.LIBDEP\";\n                    pcVar43 = (char *)(ulong)(intVar + 1);\n                    *(undefined8 *)\n                     (((FILE *)((long)unaff_RBP + -0xd8))->_unused2 + 0xc + (long)fileVar) = 0;\n                    switch(DAT_0010d64c) {\n                    case 1:\n                      goto switchD_00106ed8_caseD_1;\n                    case 2:\n                    case 7:\n                      break;\n                    case 3:\n                      goto switchD_00106ed8_caseD_3;\n                    case 4:\n                      goto switchD_00106ed8_caseD_4;\n                    case 5:\n                      goto switchD_00106ed8_caseD_5;\n                    case 6:\n                      filePtr = (FILE *)unaff_RBP;\n                      if (_DAT_0010d610 == 0) goto LAB_00106afb;\n                      break;\n                    default:\n                      goto switchD_001067e8_caseD_5;\n                    }\n                    goto switchD_00106ed8_caseD_2;\n                  }\n                }\n                goto LAB_00106803;\n              }\n              switch(DAT_0010d64c) {\n              case 1:\n                unaff_RBP = (char *)filePtr;\n                if (filePtr == (FILE *)0x0) break;\nswitchD_00106ed8_caseD_1:\n                filePtr = (FILE *)0x0;\n                goto LAB_00106b89;\n              case 2:\n              case 7:\nswitchD_001067e8_caseD_2:\n                unaff_RBP = (char *)filePtr;\n                if ((filePtr != (FILE *)0x0) || (0 < DAT_0010d648)) {\nswitchD_00106ed8_caseD_2:\n                  process_files_00105570(undefined8Ptr,unaff_RBP,DAT_0010d64c == 7);\n                  goto LAB_0010696c;\n                }\n                break;\n              case 3:\n                unaff_RBP = (char *)filePtr;\nswitchD_00106ed8_caseD_3:\n                process_archive_entries_00105480(undefined8Ptr,print_file_info_00107890,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              case 4:\n                unaff_RBP = (char *)filePtr;\nswitchD_00106ed8_caseD_4:\n                process_archive_entries_00105480(undefined8Ptr,extract_and_print_archive_00103a78,unaff_RBP,(ulong)pcVar43 & 0xffffffff);\n                goto LAB_0010696c;\n              default:\nswitchD_001067e8_caseD_5:\n                pcVar39 = \"internal error -- this option not implemented\";\n                goto LAB_00106803;\n              case 6:\n                if (_DAT_0010d610 != 0) goto switchD_001067e8_caseD_2;\n                if (filePtr == (FILE *)0x0) break;\nLAB_00106afb:\n                filePtr = (FILE *)(undefined8Ptr + 0x1e);\n                do {\n                  unaff_R12 = filePtr;\n                  if (*(FILE **)filePtr == (FILE *)0x0) {\nLAB_00106b9f:\n                    extract_archive_contents_001058b0(undefined8Ptr);\n                    goto LAB_0010696c;\n                  }\n                  while( true ) {\n                    longPtr = *(long **)unaff_R12;\n                    pcVar46 = *(char **)filePtr;\n                    if (longPtr == (long *)0x0) {\n                      undefined8Var = *undefined8Ptr;\n                      uVar30 = dcgettext(0,\"no entry %s in archive %s!\",5);\n                      print_error_and_exit_00107690(uVar30,pcVar46,undefined8Var);\n                      pcVar43 = (char *)0x0;\n                      goto LAB_00107293;\n                    }\n                    longVar = *longPtr;\n                    undefined8Var = extract_substring_00105830(pcVar46,undefined8Ptr);\n                    intVar = filename_cmp(undefined8Var,longVar);\n                    if (intVar == 0) break;\n                    unaff_R12 = (FILE *)(*(long **)unaff_R12 + 0x1e);\n                  }\n                  *(long **)unaff_R12 = (long *)longPtr[0x1e];\n                  pplVar29 = (long **)find_file_location_00105870(filePtr,3,0);\n                  bVar47 = DAT_0010d60c != 0;\n                  longPtr = *pplVar29;\n                  *pplVar29 = longPtr;\n                  longPtr[0x1e] = (long)longPtr;\n                  if (bVar47) {\n                    printf(\"m - %s\\n\",*(FILE **)filePtr);\n                  }\n                  filePtr = (FILE *)&filePtr->_IO_read_ptr;\n                } while( true );\n              }\n              goto LAB_00106d4e;\n            }\n            if (-1 < _DAT_0010d2d0) goto LAB_0010755f;\n          }\n          else {\nLAB_00107591:\n            print_usage_info_0010342d(1);\n          }\n          _DAT_0010d2d0 = 1;\nLAB_0010755f:\n          intVar = fileno(_stdin);\n          _DAT_0010d608 = isatty(intVar);\n          extract_and_process_archive_00103e95();\nLAB_0010696c:\n                    \n          xexit(0);\n        }\n        uintVar = bfd_get_error();\n        filePtr = (FILE *)bfd_errmsg(uintVar);\n        undefined8Var = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n        intVar = print_error_and_exit_00107690(undefined8Var,\"x86_64-pc-linux-gnu\",filePtr);\nLAB_0010751b:\n        if (DAT_0010d64c == 0) {\nLAB_00107447:\n          ppuVar36 = (undefined **)pcVar39;\n          filePtr = (FILE *)pcVar46;\n          switch(intVar) {\n          case 0:\n            goto switchD_00107462_caseD_0;\n          default:\n            goto switchD_00107462_caseD_1;\n          case 0x44:\n            _DAT_0010d2d0 = 1;\n            goto LAB_001065a2;\n          case 0x4d:\n            _DAT_0010d650 = 1;\n            goto LAB_001065a2;\n          case 0x4e:\n            DAT_0010d634 = '\\x01';\n            goto LAB_001065a2;\n          case 0x4f:\n            _DAT_0010d5fc = 1;\n            goto LAB_001065a2;\n          case 0x50:\n            DAT_0010d5f9 = 1;\n            goto LAB_001065a2;\n          case 0x53:\n            DAT_0010d648 = -1;\n            goto LAB_001065a2;\n          case 0x54:\n            DAT_0010d5f8 = 1;\n            goto LAB_001065a2;\n          case 0x55:\n            _DAT_0010d2d0 = 0;\n            goto LAB_001065a2;\n          case 0x56:\n            _DAT_0010d654 = 1;\n            goto LAB_001065a2;\n          case 0x61:\n            DAT_0010d640 = 2;\n            goto LAB_001065a2;\n          case 0x62:\n          case 0x69:\n            DAT_0010d640 = 1;\n            goto LAB_001065a2;\n          case 99:\n            _DAT_0010d610 = 1;\n            goto LAB_001065a2;\n          case 100:\n            DAT_0010d64c = 1;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x66:\n            DAT_0010d5fa = 1;\n            goto LAB_001065a2;\n          case 0x68:\n            goto switchD_00107462_caseD_68;\n          case 0x6c:\n            if (DAT_0010d628 == (char *)0x0) {\n              DAT_0010d628 = _optarg;\n              goto LAB_001065a2;\n            }\nLAB_00107293:\n            uintVar = (uint)unaff_R12;\n            pcVar39 = \"libdeps specified more than once\";\n            unaff_RBP = (char *)filePtr;\n            break;\n          case 0x6d:\n            DAT_0010d64c = 6;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x6f:\n            _DAT_0010d600 = 1;\n            goto LAB_001065a2;\n          case 0x70:\n            DAT_0010d64c = 4;\n            goto LAB_001065a2;\n          case 0x71:\n            DAT_0010d64c = 7;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x72:\n            DAT_0010d64c = 2;\n            DAT_0010d604 = 1;\n            goto LAB_001065a2;\n          case 0x73:\n            DAT_0010d648 = 1;\n            goto LAB_001065a2;\n          case 0x74:\n            DAT_0010d64c = 3;\n            goto LAB_001065a2;\n          case 0x75:\n            _DAT_0010d644 = 1;\n            goto LAB_001065a2;\n          case 0x76:\n            DAT_0010d60c = 1;\n            goto LAB_001065a2;\n          case 0x78:\n            DAT_0010d64c = 5;\n            goto LAB_001065a2;\n          case 0xc9:\n            bfd_plugin_set_plugin(_optarg);\n            goto LAB_001065a2;\n          case 0xca:\n            DAT_0010d5f0 = _optarg;\n            goto LAB_001065a2;\n          case 0xcb:\n            DAT_0010d5e8 = _optarg;\n            goto LAB_001065a2;\n          }\n          goto LAB_00106803;\n        }\nLAB_001067f7:\n        pcVar39 = \"two different operation options specified\";\n        unaff_RBP = (char *)filePtr;\nLAB_00106803:\n        undefined8Var = dcgettext(0,pcVar39,5);\n        print_error_and_exit_00107690(undefined8Var);\nLAB_00106814:\n        intVar = (int)pcVar46;\n        filePtr = (FILE *)xmalloc(8);\n        *(long **)filePtr = (long *)0x0;\n        if ((FILE *)pcVar43 == argv) {\nLAB_00106834:\n          if (*(long **)pcVar43 == (long *)0x0) {\n            intVar = 0;\n          }\n          else {\n            longVar = 1;\n            do {\n              intVar = (int)longVar;\n              longVar = longVar * 2;\n              longVar = longVar + 1;\n            } while (*(long *)((int *)pcVar43 + longVar) != 0);\n          }\n          filePtr = (FILE *)xmalloc((long)(intVar + 1) << 3);\n          longPtr = *(long **)pcVar43;\n          longVar = 0;\n          while (longPtr != (long *)0x0) {\n            undefined8Var = xstrdup();\n            *(undefined8 *)((long)&filePtr->_flags + longVar) = undefined8Var;\n            longPtr = *(long **)((char *)((long)pcVar43 + 0x83) + longVar + -0x7b);\n            longVar = longVar + 8;\n          }\n          *(undefined8 *)((long)&filePtr->_flags + longVar) = 0;\nLAB_0010610a:\n          intVar = (int)pcVar46;\n          pcVar43 = (char *)filePtr;\n          if (*(long **)filePtr == (long *)0x0) goto LAB_00106a80;\n          longVar = 0;\n          do {\n            lVar34 = longVar + 1;\n            longVar = longVar * 8;\n            longVar = lVar34;\n          } while (*(long *)(filePtr->_shortbuf + longVar + -0x7b) != 0);\n          sizeVar = lVar34 * 8;\n        }\n        else {\nLAB_00106a80:\n          lVar34 = 0;\n          sizeVar = 0;\n        }\n        longVar = (long)unaff_RBP * 2;\n        unaff_RBP = (char *)((long)(char **)unaff_RBP + lVar34);\n        free(*(void **)((int *)pcVar43 + longVar));\n        filePtr = (FILE *)xrealloc(pcVar43,(lVar34 + 1 + (long)intVar) * 8);\n        uintVar = intVar + -1 + (int)lVar34;\n        pcVar46 = (char *)(ulong)uintVar;\n        memmove(&filePtr->_flags + (long)unaff_RBP * 2,\n                (void *)((long)&filePtr->_IO_read_ptr + (long)fileVar),\n                (long)(int)(intVar - uintVar) << 3);\n        memcpy((void *)((long)&fileVar->_flags + (long)&filePtr->_flags),filePtr,sizeVar);\n        free(filePtr);\n        free(byteArrayVar);\n        fclose(filePtr);\n        uintVar = (int)fileVar + 1;\n        unaff_R12 = fileVar;\n        pcVar43 = (char *)filePtr;\n        fileVar = filePtr;\n        if ((int)uintVar < (int)uintVar) goto LAB_001061ce;\n      } while( true );\n    }\n    uintVar = uintVar + 1;\n    fileVar = unaff_R12;\nLAB_001061ce:\n    unaff_R12 = (FILE *)(ulong)uintVar;\n  } while( true );\nswitchD_00107462_caseD_0:\n  intVar = getopt_long((ulong)filePtr & 0xffffffff,pcVar46,filePtr,\"x86_64-pc-linux-gnu\");\n  unaff_RBP = (char *)filePtr;\n  if (intVar == -1) goto LAB_00106680;\n  if ((0x14 < intVar - 100U) || ((0x117201UL >> ((byte)(intVar - 100U) & 0x3f) & 1) == 0))\n  goto LAB_00107447;\n  goto LAB_0010751b;\ncode_r0x00107068:\n  if (_DAT_0010d2d0 != 0) goto code_r0x0010706e;\n  goto LAB_00106720;\ncode_r0x0010706e:\n  undefined8Var = dcgettext(0,\"`u\\' modifier ignored since `D\\' is the default (see `U\\')\",5);\n  print_error_message_00107920(undefined8Var);\n  goto LAB_0010670d;\nLAB_00106b89:\n  if (*(FILE **)unaff_RBP == (FILE *)0x0) {\n    if ((char)filePtr != '\\0') goto LAB_00106b9f;\nLAB_00106d4e:\n    DAT_0010d618 = 0;\n    goto LAB_0010696c;\n  }\n  intVar = 0;\n  intVar = strcmp((char *)*(FILE **)unaff_RBP,\"__.SYMDEF\");\n  undefined8Ptr = undefined8Ptr;\n  if (intVar == 0) {\n    *(byte *)((long)undefined8Ptr + 0x49) = *(byte *)((long)undefined8Ptr + 0x49) & 0xf7;\n    DAT_0010d648 = -1;\n  }\n  else {\n    while( true ) {\n      longPtr = undefined8Ptr + 0x1e;\n      if ((undefined8 *)*longPtr == (undefined8 *)0x0) break;\n      undefined8Var = *(undefined8 *)*longPtr;\n      uVar30 = extract_substring_00105830(*(FILE **)unaff_RBP,undefined8Ptr);\n      intVar = filename_cmp(uVar30,undefined8Var);\n      if ((intVar == 0) &&\n         ((DAT_0010d634 == '\\0' || (intVar = intVar + 1, intVar == _DAT_0010d630)))) {\n        if (DAT_0010d60c != 0) {\n          printf(\"d - %s\\n\",*(FILE **)unaff_RBP);\n        }\n        *longPtr = *(long *)(*longPtr + 0xf0);\n        filePtr = unaff_R12;\n        goto LAB_00106d38;\n      }\n      undefined8Ptr = (undefined8 *)*longPtr;\n    }\n    if (DAT_0010d60c != 0) {\n      filePtr = *(FILE **)unaff_RBP;\n      pcVar46 = (char *)dcgettext(0,\"No member named `%s\\'\\n\",5);\n      printf(pcVar46,filePtr);\n    }\n  }\nLAB_00106d38:\n  unaff_RBP = (char *)((long)unaff_RBP + 8);\n  goto LAB_00106b89;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen",
                "fseek",
                "ftell",
                "fread",
                "memcpy",
                "FUN_00107cc0",
                "bfd_make_writable",
                "bfd_check_format_matches",
                "free",
                "setlocale",
                "FUN_00105830",
                "memmove",
                "FUN_00107c20",
                "bfd_make_readable",
                "FUN_00107640",
                "xexit",
                "FUN_0010394a",
                "FUN_00107890",
                "textdomain",
                "printf",
                "FUN_00103a78",
                "bfd_find_target",
                "isatty",
                "FUN_001052a0",
                "open",
                "bindtextdomain",
                "FUN_00103e95",
                "bfd_close",
                "stat",
                "strcmp",
                "bfd_create",
                "malloc",
                "bfd_plugin_set_program_name",
                "getopt_long",
                "bfd_set_format",
                "strtol",
                "xrealloc",
                "lbasename",
                "FUN_00107920",
                "FUN_0010342d",
                "fprintf",
                "bfd_set_error_program_name",
                "dcgettext",
                "bfd_get_error",
                "FUN_00103bd1",
                "filename_cmp",
                "bfd_fdopenr",
                "FUN_00105870",
                "bfd_set_error",
                "FUN_00107740",
                "bfd_set_default_target",
                "bfd_errmsg",
                "xmalloc_set_program_name",
                "FUN_00105570",
                "FUN_00105300",
                "bfd_init",
                "ferror",
                "fileno",
                "fopen",
                "FUN_001058b0",
                "FUN_00105480",
                "bfd_bwrite",
                "FUN_00107c10",
                "FUN_00107730",
                "FUN_00107650",
                "bfd_plugin_set_plugin",
                "FUN_00107690",
                "xstrdup",
                "FUN_001075e0",
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105db0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "analyze_binary_file_00105db0"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "FUN_00103bd1": {
            "renaming": {
                "FUN_00103bd1": "print_matching_formats_00103bd1",
                "param_1": "formatStrings",
                "uVar1": "dataPointer",
                "__format": "formatMessage",
                "plVar2": "currentFormat",
                "_stdout": "stdoutStream",
                "_stderr": "stderrStream"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103bd1(long *formatStrings)\n\n{\n  undefined8 dataPointer;\n  char *formatMessage;\n  long *currentFormat;\n  \n  fflush(stdoutStream);\n  dataPointer = DAT_0010d660;\n  formatMessage = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(stderrStream,formatMessage,dataPointer);\n  for (currentFormat = formatStrings; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(stderrStream,\" %s\");\n  }\n  free(formatStrings);\n  fputc(10,stderrStream);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd1",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103bd1"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00107c10": {
            "renaming": {
                "FUN_00107c10": "handle_error_00107c10",
                "print_error_00107c20": "print_error",
                "xexit": "exit_code"
            },
            "code": "\nvoid handle_error_00107c10(void)\n\n{\n  print_error();\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "FUN_00107c20",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c10",
            "calling": [
                "FUN_00105300",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_001058b0",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "handle_error_00107c10"
        },
        "read": {
            "renaming": {},
            "code": "\n\n\nssize_t read(int __fd,void *__buf,size_t __nbytes)\n\n{\n  ssize_t sVar1;\n  \n  sVar1 = read(__fd,__buf,__nbytes);\n  return sVar1;\n}\n\n",
            "called": [
                "read"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "read"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107da8",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00102710": {
            "renaming": {
                "FUN_00102710": "load_and_check_binary_00102710",
                "plVar1": "filePointer",
                "cVar2": "formatMatch",
                "bVar3": "isThinLibrary",
                "iVar4": "error",
                "lVar5": "archivedFile",
                "uVar6": "errorMessage",
                "uVar7": "libraryName",
                "puVar8": "outputBinary",
                "unaff_RBP": "exitCode",
                "in_stack_00000008": "searchPath"
            },
            "code": "\n\n\nundefined8 * loadAndCheckBinary_00102710(void)\n\n{\n  long *filePointer;\n  char formatMatch;\n  byte isThinLibrary;\n  int error;\n  long archivedFile;\n  undefined8 errorMessage;\n  undefined8 libraryName;\n  undefined8 *outputBinary;\n  undefined8 exitCode;\n  undefined8 searchPath;\n  \n  archivedFile = bfd_openr();\n  if (archivedFile != 0) {\n    formatMatch = bfd_check_format(archivedFile,1);\n    if (formatMatch != '\\0') {\n      DAT_0010d5f0 = **(undefined8 **)(archivedFile + 8);\n    }\n    bfd_close(archivedFile);\n  }\n  outputBinary = (undefined8 *)bfd_openw();\n  if (((outputBinary != (undefined8 *)0x0) && (formatMatch = bfd_set_format(outputBinary,2), formatMatch != '\\0')) &&\n     (formatMatch = bfd_close(outputBinary), formatMatch != '\\0')) {\n    if (_DAT_0010d610 == 0) goto LAB_00102826;\n    goto LAB_001053b7;\n  }\n  handle_error_00107c10();\n  do {\n    isThinLibrary = *(byte *)((long)outputBinary + 0x49) >> 4 & 1;\n    if (DAT_0010d5f8 == '\\0') {\n      if (isThinLibrary != 0) {\n        libraryName = *outputBinary;\n        errorMessage = dcgettext(0,\"Cannot convert existing thin library %s to normal format\",5);\n        print_error_and_exit_00107690(errorMessage,libraryName);\n        goto LAB_00102812;\n      }\n    }\n    else if (isThinLibrary == 0) {\n      libraryName = *outputBinary;\n      errorMessage = dcgettext(0,\"Cannot convert existing library %s to thin format\",5);\n      print_error_and_exit_00107690(errorMessage,libraryName);\nLAB_001027cb:\n      print_error_00107c20();\n      error = bfd_get_error();\n      if (error == 0xd) {\nLAB_00102812:\n        print_matching_formats_00103bd1(searchPath);\n      }\n                    \n      xexit(1);\n    }\n    do {\n      filePointer = outputBinary + 0x1e;\n      for (archivedFile = bfd_openr_next_archived_file(outputBinary,0); archivedFile != 0;\n          archivedFile = bfd_openr_next_archived_file(outputBinary,archivedFile)) {\n        *filePointer = archivedFile;\n        filePointer = (long *)(archivedFile + 0xf0);\n      }\n      *filePointer = 0;\n      error = bfd_get_error();\n      if (error == 9) {\n        return outputBinary;\n      }\n      do {\n        handle_error_00107c10();\nLAB_00102826:\n        libraryName = dcgettext(0,\"creating %s\",5);\n        print_error_message_00107920(libraryName);\nLAB_001053b7:\n        DAT_0010d618 = exitCode;\n        outputBinary = (undefined8 *)bfd_openr();\n      } while (outputBinary == (undefined8 *)0x0);\n      formatMatch = bfd_check_format_matches(outputBinary,2,&stack0x00000008);\n      if (formatMatch == '\\0') goto LAB_001027cb;\n    } while (((DAT_0010d64c != 2) && (DAT_0010d64c != 7)) ||\n            (archivedFile = bfd_openr_next_archived_file(outputBinary,0), archivedFile == 0));\n  } while( true );\n}\n\n",
            "called": [
                "bfd_check_format",
                "bfd_close",
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102710",
            "calling": [
                "FUN_00105300"
            ],
            "imported": false,
            "current_name": "load_and_check_binary_00102710"
        },
        "FUN_00103e95": {
            "renaming": {
                "FUN_00103e95": "extract_and_process_archive_00103e95",
                "ppcVar29": "archiveEntries",
                "local_828": "currentChar",
                "local_820": "startOfBuffer",
                "local_818": "bufferSize",
                "local_810": "bufferStack"
            },
            "code": "\n\n\nvoid extract_and_process_archive_00103e95(void)\n\n{\n  long **pplVar1;\n  char cVar2;\n  FILE **ppFVar3;\n  FILE *pFVar4;\n  long *plVar5;\n  undefined8 uVar6;\n  byte *pbVar7;\n  int iVar8;\n  char *pcVar10;\n  undefined8 uVar11;\n  int iVar9;\n  long *plVar12;\n  size_t sVar13;\n  void *pvVar14;\n  char *pcVar15;\n  char *pcVar16;\n  long lVar17;\n  long lVar18;\n  ulong uVar19;\n  uint uVar20;\n  long lVar21;\n  undefined8 *puVar22;\n  undefined8 *puVar23;\n  uint uVar24;\n  int iVar25;\n  ulong uVar26;\n  char **ppcVar27;\n  bool bVar28;\n  char **archiveEntries;\n  byte bVar30;\n  long lVar31;\n  byte *pbVar32;\n  byte *pbVar33;\n  int *piVar34;\n  byte *pbVar35;\n  uint uVar36;\n  int iVar37;\n  char **ppcVar38;\n  byte bVar39;\n  undefined auVar40 [16];\n  undefined auVar41 [16];\n  char *currentChar;\n  char *startOfBuffer;\n  long bufferSize;\n  char **bufferStack;\n  int local_800;\n  uint local_7fc;\n  byte *local_7f8;\n  stat local_7d0;\n  char local_740 [200];\n  char *local_678 [201];\n  \n  bVar39 = 0;\n  lVar18 = 0;\n  DAT_0010d550 = -2;\n  archiveEntries = local_678;\n  local_800 = 0;\n  currentChar = local_740;\n  bufferSize = 200;\n  startOfBuffer = currentChar;\n  bufferStack = archiveEntries;\nLAB_00103ee9:\n  *currentChar = (char)lVar18;\n  if (startOfBuffer + bufferSize + -1 <= currentChar) {\n    lVar21 = (long)currentChar - (long)startOfBuffer;\n    lVar17 = lVar21 + 1;\n    if (bufferSize < 10000) {\n      lVar31 = bufferSize * 2;\n      bufferSize = 10000;\n      if (lVar31 < 0x2711) {\n        bufferSize = lVar31;\n      }\n      pcVar10 = (char *)malloc(bufferSize * 9 + 7);\n      if (pcVar10 != (char *)0x0) {\n        lVar31 = lVar17 * 8;\n        pcVar15 = startOfBuffer;\n        pcVar16 = pcVar10;\n        for (; lVar17 != 0; lVar17 = lVar17 + -1) {\n          *pcVar16 = *pcVar15;\n          pcVar15 = pcVar15 + (ulong)bVar39 * -2 + 1;\n          pcVar16 = pcVar16 + (ulong)bVar39 * -2 + 1;\n        }\n        ppcVar38 = (char **)(pcVar10 + bufferSize);\n        archiveEntries = ppcVar38;\n        for (; lVar31 != 0; lVar31 = lVar31 + -1) {\n          *(undefined *)archiveEntries = *(undefined *)bufferStack;\n          bufferStack = (char **)((long)bufferStack + (ulong)bVar39 * -2 + 1);\n          archiveEntries = (char **)((long)archiveEntries + (ulong)bVar39 * -2 + 1);\n        }\n        if (startOfBuffer != local_740) {\n          free(startOfBuffer);\n        }\n        currentChar = pcVar10 + lVar21;\n        archiveEntries = ppcVar38 + lVar21;\n        startOfBuffer = pcVar10;\n        bufferStack = ppcVar38;\n        if (pcVar10 + bufferSize + -1 <= currentChar) goto LAB_00105265;\n        goto LAB_00103fd8;\n      }\n    }\n    print_archive_script_syntax_error_001031a5();\nLAB_0010524c:\n    pcVar10 = startOfBuffer;\n    if (startOfBuffer == local_740) {\n      return;\n    }\nLAB_00105265:\n    free(pcVar10);\n    return;\n  }\nLAB_00103fd8:\n  iVar37 = (int)lVar18;\n  if (iVar37 == 3) goto LAB_0010524c;\n  cVar2 = (&DAT_0010a200)[iVar37];\n  if (cVar2 != -0xe) {\n    if (DAT_0010d550 == -2) {\n      if (_DAT_0010d540 == 0) {\n        _DAT_0010d540 = 1;\n        if (DAT_0010d5d0 == 0) {\n          DAT_0010d5d0 = 1;\n        }\n        if (DAT_0010d590 == (FILE *)0x0) {\n          DAT_0010d590 = _stdin;\n        }\n        if (DAT_0010d538 == (FILE *)0x0) {\n          DAT_0010d538 = _stdout;\n        }\n        if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n          ensure_buffer_stack_00103df9();\n          puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          uVar11 = create_buffer_001033d6(DAT_0010d590);\n          *puVar22 = uVar11;\n        }\n        extract_data_001030ed();\n      }\nLAB_001040b1:\n      *DAT_0010d5b0 = DAT_0010d588;\n      pbVar32 = DAT_0010d5b0;\n      pbVar35 = DAT_0010d5b0;\n      uVar20 = DAT_0010d5d0;\nLAB_001040d4:\n      uVar19 = (ulong)uVar20;\n      uVar26 = (ulong)local_7fc;\n      bVar28 = false;\n      do {\n        bVar30 = (&DAT_0010ab00)[*pbVar35];\n        if (*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2) != 0) {\n          bVar28 = true;\n          uVar26 = uVar19 & 0xffffffff;\n          local_7f8 = pbVar35;\n        }\n        while( true ) {\n          iVar8 = (int)uVar19;\n          lVar18 = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + (uint)bVar30);\n          if (iVar8 == *(short *)(&DAT_0010a440 + lVar18 * 2)) break;\n          uVar19 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n          if (0xb0 < *(short *)(&DAT_0010a800 + (long)iVar8 * 2)) {\n            bVar30 = (&DAT_0010a7c0)[(int)(uint)bVar30];\n          }\n        }\n        pbVar35 = pbVar35 + 1;\n        uVar19 = (ulong)*(short *)(&DAT_0010a240 + lVar18 * 2);\n      } while (*(short *)(&DAT_0010a640 + uVar19 * 2) != 0xc2);\n      local_7fc = (uint)uVar26;\n      pbVar33 = pbVar32;\n      if (bVar28) {\n        DAT_0010d5b8 = local_7f8;\n        DAT_0010d5c0 = local_7fc;\n      }\nLAB_0010419f:\n      iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)uVar19 * 2);\n      if (iVar8 == 0) {\n        iVar8 = (int)*(short *)(&DAT_0010a980 + (long)(int)DAT_0010d5c0 * 2);\n        pbVar35 = DAT_0010d5b8;\n      }\n      DAT_0010d530 = (int)pbVar35 - (int)pbVar33;\n      DAT_0010d588 = *pbVar35;\n      DAT_0010d5b0 = pbVar35;\n      DAT_0010d5c8 = pbVar33;\n      *pbVar35 = 0;\nLAB_001041f0:\n      pbVar32 = DAT_0010d5c8;\n      lVar18 = DAT_0010d5a0;\n      switch(iVar8) {\n      case 0:\n        goto switchD_00104200_caseD_0;\n      case 1:\n      case 0x10:\n        DAT_0010d550 = 0x105;\n        break;\n      case 2:\n      case 0x11:\n        DAT_0010d550 = 0x107;\n        break;\n      case 3:\n      case 0x12:\n        DAT_0010d550 = 0x108;\n        break;\n      case 4:\n      case 0x13:\n        DAT_0010d550 = 0x109;\n        break;\n      case 5:\n      case 0x14:\n        DAT_0010d550 = 0x10a;\n        break;\n      case 6:\n      case 0x15:\n        DAT_0010d550 = 0x10b;\n        break;\n      case 7:\n      case 0x16:\n        DAT_0010d550 = 0x10c;\n        break;\n      case 8:\n      case 0x17:\n        DAT_0010d550 = 0x10d;\n        break;\n      case 9:\n      case 0x18:\n        DAT_0010d550 = 0x10e;\n        break;\n      case 10:\n      case 0x19:\n        DAT_0010d550 = 0x10f;\n        break;\n      case 0xb:\n      case 0x1a:\n        DAT_0010d550 = 0x106;\n        break;\n      case 0xc:\n      case 0x1b:\n        DAT_0010d550 = 0x113;\n        break;\n      case 0xd:\n      case 0x1c:\n        DAT_0010d550 = 0x111;\n        break;\n      case 0xe:\n      case 0x1d:\n        DAT_0010d550 = 0x103;\n        break;\n      case 0x1f:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        goto LAB_001040b1;\n      case 0x20:\n        DAT_0010d550 = 0x28;\n        break;\n      case 0x21:\n        DAT_0010d550 = 0x29;\n        break;\n      case 0x22:\n        DAT_0010d550 = 0x2c;\n        break;\n      case 0x23:\n        DAT_0010d548 = (char *)xstrdup(DAT_0010d5c8);\n        DAT_0010d550 = 0x104;\n        break;\n      case 0x24:\n      case 0x25:\n      case 0x26:\n        goto LAB_001040b1;\n      case 0x27:\n        DAT_0010d554 = DAT_0010d554 + 1;\n        DAT_0010d550 = 0x102;\n        break;\n      case 0x28:\n        fwrite(DAT_0010d5c8,(long)DAT_0010d530,1,DAT_0010d538);\n        goto LAB_001040b1;\n      case 0x29:\n        goto switchD_00104200_caseD_29;\n      case 0x2a:\n        DAT_0010d550 = 0;\n        break;\n      default:\n        print_error_message_and_exit_001033b0(\"fatal flex scanner internal error--no action found\");\n      case 0xf:\n      case 0x1e:\n        DAT_0010d550 = 0x112;\n      }\n      lVar18 = (long)iVar37;\n    }\n    if (0 < DAT_0010d550) {\n      if (DAT_0010d550 != 0x100) {\n        iVar37 = 2;\n        if (DAT_0010d550 < 0x114) {\n          iVar37 = (int)(char)(&DAT_0010a0e0)[DAT_0010d550];\n        }\n        goto LAB_0010497d;\n      }\n      DAT_0010d550 = 0x101;\n      goto LAB_001051f0;\n    }\n    iVar37 = 0;\n    DAT_0010d550 = 0;\nLAB_0010497d:\n    uVar20 = cVar2 + iVar37;\n    if ((0x22 < uVar20) || (iVar37 != (char)(&DAT_0010a0a0)[(int)uVar20])) goto LAB_001049db;\n    cVar2 = (&DAT_0010a060)[(int)uVar20];\n    lVar18 = (long)cVar2;\n    if (cVar2 < '\\x01') {\n      iVar37 = -(int)cVar2;\n      goto LAB_00104a0a;\n    }\n    DAT_0010d550 = -2;\n    local_800 = local_800 + -1 + (uint)(local_800 == 0);\n    archiveEntries = archiveEntries + 1;\n    *archiveEntries = DAT_0010d548;\n    goto LAB_001049d1;\n  }\nLAB_001049db:\n  iVar37 = (int)(char)(&DAT_0010a020)[(int)lVar18];\n  if ((&DAT_0010a020)[(int)lVar18] == '\\0') {\n    if (local_800 == 0) {\n      _DAT_0010d544 = _DAT_0010d544 + 1;\n      print_archive_script_syntax_error_001031a5();\nLAB_001051f0:\n      do {\n        if (((((char)(&DAT_0010a200)[lVar18] != -0xe) &&\n             (uVar20 = (int)(char)(&DAT_0010a200)[lVar18] + 1, uVar20 < 0x23)) &&\n            ((&DAT_0010a0a0)[(int)uVar20] == '\\x01')) &&\n           (lVar18 = (long)(char)(&DAT_0010a060)[(int)uVar20],\n           '\\0' < (char)(&DAT_0010a060)[(int)uVar20])) goto LAB_00105227;\n        if (startOfBuffer == currentChar) goto LAB_0010524c;\n        currentChar = currentChar + -1;\n        archiveEntries = archiveEntries + -1;\n        lVar18 = (long)*currentChar;\n      } while( true );\n    }\n    if (local_800 != 3) goto LAB_001051f0;\n    if (0 < DAT_0010d550) {\n      DAT_0010d550 = -2;\n      goto LAB_001051f0;\n    }\n    if (DAT_0010d550 != 0) goto LAB_001051f0;\n    goto LAB_0010524c;\n  }\nLAB_00104a0a:\n  uVar11 = DAT_0010d660;\n  ppcVar27 = DAT_0010d558;\n  cVar2 = (&DAT_00109fe0)[iVar37];\n  ppcVar38 = (char **)archiveEntries[1 - cVar2];\n  switch(iVar37) {\n  case 2:\n  case 6:\n    check_and_print_ar_message_00103ba8();\n    break;\n  case 0x13:\n    if (DAT_0010d558 == (char **)0x0) {\n      return;\n    }\n    bfd_cache_close();\n    unlink(*DAT_0010d558);\n    return;\n  case 0x15:\n    print_archive_script_syntax_error_001031a5();\n    break;\n  case 0x17:\n    puVar22 = (undefined8 *)*archiveEntries;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no open archive\\n\";\nLAB_00104b62:\n      pcVar10 = (char *)dcgettext(0,pcVar10,5);\n      fprintf(_stderr,pcVar10,uVar11);\n      check_and_exit_if_data_unavailable_0010315d();\n    }\n    else {\n      for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n        for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; puVar23 != (undefined8 *)0x0;\n            puVar23 = (undefined8 *)puVar23[0x1e]) {\n          iVar8 = filename_cmp(*puVar23);\n          if (iVar8 == 0) {\n            extract_and_write_archive_member_00107740();\n            goto LAB_00104adf;\n          }\n        }\n        bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar6,uVar11);\nLAB_00104adf:\n      }\n    }\n    break;\n  case 0x18:\n    puVar22 = (undefined8 *)*archiveEntries;\n    if (DAT_0010d558 == (char **)0x0) {\nLAB_00104b4f:\n      pcVar10 = \"%s: no open output archive\\n\";\n      goto LAB_00104b62;\n    }\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0;\n          pcVar10 = *(char **)(pcVar10 + 0xf0)) {\n        iVar8 = filename_cmp();\n        if (iVar8 == 0) {\n          pcVar15 = (char *)bfd_openr(*puVar22,0);\n          uVar11 = DAT_0010d660;\n          if (pcVar15 == (char *)0x0) {\n            uVar6 = *puVar22;\n            pcVar15 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n            fprintf(_stderr,pcVar15,uVar11,uVar6);\n            check_and_exit_if_data_unavailable_0010315d();\n          }\n          else {\n            *ppcVar27 = pcVar15;\n            bVar28 = true;\n            *(undefined8 *)(pcVar15 + 0xf0) = *(undefined8 *)(pcVar10 + 0xf0);\n          }\n        }\n        else {\n          ppcVar27 = (char **)(pcVar10 + 0xf0);\n        }\n      }\n      if (!bVar28) {\n        pcVar10 = (char *)bfd_openr(*puVar22,0);\n        uVar6 = DAT_0010d660;\n        uVar11 = *puVar22;\n        pcVar15 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar15,uVar6,uVar11);\n        uVar11 = DAT_0010d660;\n        if (pcVar10 == (char *)0x0) {\n          uVar6 = *puVar22;\n          pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n          fprintf(_stderr,pcVar10,uVar11,uVar6);\n          check_and_exit_if_data_unavailable_0010315d();\n        }\n        else {\n          *ppcVar27 = pcVar10;\n        }\n      }\n    }\n    break;\n  case 0x19:\n    if (DAT_0010d558 != (char **)0x0) {\n      DAT_0010d558[0x1f] = (char *)0x0;\n    }\n    break;\n  case 0x1a:\n    puVar22 = (undefined8 *)*archiveEntries;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      bVar28 = false;\n      ppcVar27 = DAT_0010d558 + 0x1f;\n      for (puVar23 = (undefined8 *)DAT_0010d558[0x1f]; uVar11 = DAT_0010d660,\n          puVar23 != (undefined8 *)0x0; puVar23 = (undefined8 *)puVar23[0x1e]) {\n        iVar8 = filename_cmp(*puVar23,*puVar22);\n        if (iVar8 == 0) {\n          bVar28 = true;\n          *ppcVar27 = (char *)puVar23[0x1e];\n        }\n        else {\n          ppcVar27 = (char **)(puVar23 + 0x1e);\n        }\n      }\n      if (!bVar28) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t find module file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        check_and_exit_if_data_unavailable_0010315d();\n      }\n    }\n    break;\n  case 0x1b:\n    puVar22 = (undefined8 *)*archiveEntries;\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    for (; puVar22 != (undefined8 *)0x0; puVar22 = (undefined8 *)puVar22[1]) {\n      pcVar10 = (char *)bfd_openr(*puVar22,\"plugin\");\n      uVar11 = DAT_0010d660;\n      ppcVar27 = DAT_0010d558;\n      if (pcVar10 == (char *)0x0) {\n        uVar6 = *puVar22;\n        pcVar10 = (char *)dcgettext(0,\"%s: can\\'t open file %s\\n\",5);\n        fprintf(_stderr,pcVar10,uVar11,uVar6);\n        check_and_exit_if_data_unavailable_0010315d();\n      }\n      else {\n        *(char **)(pcVar10 + 0xf0) = DAT_0010d558[0x1f];\n        ppcVar27[0x1f] = pcVar10;\n      }\n    }\n    break;\n  case 0x1c:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    pcVar10 = *DAT_0010d558;\n    DAT_0010d60c = 1;\n    DAT_0010d578 = _stdout;\n    pcVar15 = (char *)dcgettext(0,\"Current open archive is %s\\n\",5);\n    printf(pcVar15,pcVar10);\n    for (pcVar10 = DAT_0010d558[0x1f]; pcVar10 != (char *)0x0; pcVar10 = *(char **)(pcVar10 + 0xf0))\n    {\n      print_file_information_00103ddc(pcVar10,0);\n    }\n    break;\n  case 0x1d:\n    if (DAT_0010d558 == (char **)0x0) goto LAB_00104b4f;\n    if (0 < _DAT_0010d2d0) {\n      *(uint *)((long)DAT_0010d558 + 0x44) = *(uint *)((long)DAT_0010d558 + 0x44) | 0x2000;\n    }\n    DAT_0010d568 = dup(DAT_0010d568);\n    bfd_close(ppcVar27);\n    pcVar10 = DAT_0010d570;\n    iVar8 = stat(DAT_0010d570,&local_7d0);\n    if ((iVar8 != 0) && (DAT_0010d558 = (char **)bfd_openw(pcVar10,0), DAT_0010d558 != (char **)0x0)\n       ) {\n      bfd_set_format(DAT_0010d558,2);\n      bfd_close(DAT_0010d558);\n    }\n    copy_and_remove_file_00105bc0(DAT_0010d560,DAT_0010d570,DAT_0010d568);\n    DAT_0010d558 = (char **)0x0;\n    free(DAT_0010d560);\n    free(DAT_0010d570);\n    break;\n  case 0x1e:\n    create_archive_00103c60(*archiveEntries,0);\n    break;\n  case 0x1f:\n    create_archive_00103c60(*archiveEntries,1);\n    break;\n  case 0x20:\n    pcVar10 = *archiveEntries;\n    if (DAT_0010d558 == (char **)0x0) {\n      pcVar10 = \"%s: no output archive specified yet\\n\";\n      goto LAB_00104b62;\n    }\n    lVar18 = analyze_binary_00105300(archiveEntries[-1],0);\n    if (lVar18 != 0) {\n      process_archive_001032a8(lVar18,copy_data_0010312d,pcVar10);\n    }\n    break;\n  case 0x21:\n    pcVar10 = *archiveEntries;\n    pcVar15 = archiveEntries[-1];\n    uVar11 = analyze_binary_00105300(archiveEntries[-2],0);\n    if (pcVar10 == (char *)0x0) {\n      DAT_0010d578 = _stdout;\n    }\n    else {\n      DAT_0010d578 = fopen(pcVar10,\"w\");\n      if (DAT_0010d578 != (FILE *)0x0) {\n        process_archive_001032a8(uVar11,print_file_information_00103ddc,pcVar15);\n        bfd_close(uVar11);\n        fclose(DAT_0010d578);\n        break;\n      }\n      DAT_0010d578 = _stdout;\n      pcVar16 = (char *)dcgettext(0,\"Can\\'t open file %s\\n\",5);\n      fprintf(_stderr,pcVar16,pcVar10);\n    }\n    process_archive_001032a8(uVar11,print_file_information_00103ddc,pcVar15);\n    bfd_close(uVar11);\n    break;\n  case 0x22:\n    ppcVar38 = (char **)*archiveEntries;\n    break;\n  case 0x23:\n  case 0x25:\n  case 0x27:\n    ppcVar38 = (char **)0x0;\n    break;\n  case 0x24:\n    ppcVar38 = (char **)archiveEntries[-1];\n    break;\n  case 0x26:\n    ppcVar38 = (char **)malloc(0x10);\n    pcVar10 = archiveEntries[-2];\n    *ppcVar38 = *archiveEntries;\n    ppcVar38[1] = pcVar10;\n    break;\n  case 0x2a:\n    DAT_0010d60c = (uint)(DAT_0010d60c == 0);\n  }\n  lVar18 = (long)cVar2;\n  currentChar = currentChar + -lVar18;\n  archiveEntries[1 - lVar18] = (char *)ppcVar38;\n  archiveEntries = archiveEntries + (1 - lVar18);\n  uVar20 = (int)(char)(&DAT_00109f80)[(char)(&DAT_00109fa0)[iVar37] + -0x18] + (int)*currentChar;\n  if ((uVar20 < 0x23) && (*currentChar == (&DAT_0010a0a0)[(int)uVar20])) {\n    lVar18 = (long)(char)(&DAT_0010a060)[(int)uVar20];\n  }\n  else {\n    lVar18 = (long)(char)(&DAT_00109f60)[(char)(&DAT_00109fa0)[iVar37] + -0x18];\n  }\n  goto LAB_001049d1;\nswitchD_00104200_caseD_29:\n  iVar8 = ((int)pbVar35 - (int)DAT_0010d5c8) + -1;\n  *pbVar35 = DAT_0010d588;\n  pplVar1 = (long **)(DAT_0010d5a8 + lVar18 * 8);\n  ppFVar3 = (FILE **)*pplVar1;\n  if (*(int *)(ppFVar3 + 7) == 0) {\n    DAT_0010d598 = *(uint *)((long)ppFVar3 + 0x1c);\n    *(undefined4 *)(ppFVar3 + 7) = 1;\n    *ppFVar3 = DAT_0010d590;\n  }\n  pbVar7 = DAT_0010d5b0;\n  pFVar4 = ppFVar3[1];\n  auVar40._8_8_ = pFVar4;\n  auVar40._0_8_ = ppFVar3;\n  if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598) < DAT_0010d5b0) {\n    if ((byte *)((long)&pFVar4->_flags + (long)(int)DAT_0010d598 + 1) < DAT_0010d5b0) {\n      auVar40 = print_error_message_and_exit_001033b0();\n    }\n    if (*(int *)(auVar40._0_8_ + 0x34) != 0) {\n      uVar20 = (int)((long)pbVar7 - (long)pbVar32) - 1;\n      for (lVar18 = 0; (int)lVar18 < (int)uVar20; lVar18 = lVar18 + 1) {\n        *(byte *)(auVar40._8_8_ + lVar18) = pbVar32[lVar18];\n      }\n      plVar12 = *pplVar1;\n      if (*(int *)(plVar12 + 7) == 2) {\n        DAT_0010d598 = 0;\n        *(undefined4 *)((long)plVar12 + 0x1c) = 0;\nLAB_0010475e:\n        pFVar4 = DAT_0010d590;\n        if (uVar20 == 0) {\n          if ((DAT_0010d5a8 == 0) || (*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) == 0)) {\n            ensure_buffer_stack_00103df9();\n            puVar22 = (undefined8 *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n            uVar11 = create_buffer_001033d6(pFVar4);\n            *puVar22 = uVar11;\n          }\n          lVar18 = DAT_0010d5a8;\n          if (DAT_0010d5a8 != 0) {\n            lVar18 = *(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n          }\n          iVar9 = 1;\n          initialize_file_001031cf(lVar18);\n          extract_data_001030ed();\n        }\n        else {\n          iVar9 = 2;\n          *(undefined4 *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x38) = 2;\n        }\n      }\n      else {\n        while( true ) {\n          plVar5 = *pplVar1;\n          uVar24 = ~uVar20 + *(int *)(plVar12 + 3);\n          if (0 < (int)uVar24) break;\n          uVar24 = (int)DAT_0010d5b0 - (int)(void *)plVar5[1];\n          if (*(int *)(plVar5 + 4) == 0) {\n            plVar5[1] = 0;\nLAB_00104626:\n            print_error_message_and_exit_001033b0();\n            break;\n          }\n          iVar9 = *(int *)(plVar5 + 3);\n          iVar25 = iVar9;\n          if (iVar9 < 1) {\n            iVar25 = iVar9 / 8;\n          }\n          *(int *)(plVar5 + 3) = iVar25 + iVar9;\n          pvVar14 = realloc((void *)plVar5[1],(long)(iVar25 + iVar9 + 2));\n          plVar5[1] = (long)pvVar14;\n          if (pvVar14 == (void *)0x0) goto LAB_00104626;\n          DAT_0010d5b0 = (byte *)((long)pvVar14 + (long)(int)uVar24);\n          plVar12 = *pplVar1;\n        }\n        if (0x2000 < (int)uVar24) {\n          uVar24 = 0x2000;\n        }\n        uVar26 = (ulong)uVar24;\n        if (*(int *)((long)plVar5 + 0x24) == 0) {\n          piVar34 = __errno_location();\n          uVar26 = (ulong)(int)uVar24;\n          uVar19 = (ulong)(int)uVar20;\n          *piVar34 = 0;\n          goto LAB_001046c7;\n        }\n        uVar19 = 0;\n        piVar34 = (int *)(long)(int)uVar20;\n        do {\n          iVar9 = getc(DAT_0010d590);\n          uVar36 = (uint)uVar19;\n          if (iVar9 == -1) {\n            iVar9 = ferror(DAT_0010d590);\n            uVar24 = uVar36;\n            if (iVar9 != 0) {\n              do {\n                pcVar10 = \"input in flex scanner failed\";\n                print_error_message_and_exit_001033b0();\n                do {\n                  *piVar34 = 0;\n                  clearerr((FILE *)pcVar10);\nLAB_001046c7:\n                  sVar13 = fread((void *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)\n                                         + uVar19),1,uVar26,DAT_0010d590);\n                  pcVar10 = (char *)DAT_0010d590;\n                  DAT_0010d598 = (uint)sVar13;\n                  uVar24 = DAT_0010d598;\n                  if ((DAT_0010d598 != 0) ||\n                     (iVar9 = ferror(DAT_0010d590), uVar24 = DAT_0010d598, iVar9 == 0))\n                  goto LAB_00104738;\n                } while (*piVar34 == 4);\n              } while( true );\n            }\n            break;\n          }\n          if (iVar9 == 10) {\n            *(undefined *)\n             ((long)(int *)(long)(int)uVar20 +\n             (long)(int)uVar36 + *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8)) = 10;\n            uVar24 = uVar36 + 1;\n            break;\n          }\n          uVar19 = (ulong)(uVar36 + 1);\n          *(char *)(*(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8) + (long)piVar34) =\n               (char)iVar9;\n          piVar34 = (int *)((long)piVar34 + 1);\n        } while (uVar24 != uVar36 + 1);\nLAB_00104738:\n        DAT_0010d598 = uVar24;\n        uVar24 = DAT_0010d598;\n        iVar9 = 0;\n        *(uint *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 0x1c) = DAT_0010d598;\n        if (uVar24 == 0) goto LAB_0010475e;\n      }\n      plVar12 = (long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8);\n      lVar18 = *plVar12;\n      uVar20 = uVar20 + DAT_0010d598;\n      if (*(int *)(lVar18 + 0x18) < (int)uVar20) {\n        iVar25 = ((int)DAT_0010d598 >> 1) + uVar20;\n        pvVar14 = realloc(*(void **)(lVar18 + 8),(long)iVar25);\n        *(void **)(lVar18 + 8) = pvVar14;\n        auVar41._8_8_ = plVar12;\n        auVar41._0_8_ = *plVar12;\n        if (*(long *)(*plVar12 + 8) == 0) {\n          auVar41 = print_error_message_and_exit_001033b0();\n        }\n        plVar12 = auVar41._8_8_;\n        *(int *)(auVar41._0_8_ + 0x18) = iVar25 + -2;\n      }\n      DAT_0010d598 = uVar20;\n      *(undefined *)(*(long *)(*plVar12 + 8) + (long)(int)uVar20) = 0;\n      *(undefined *)(*(long *)(*plVar12 + 8) + 1 + (long)(int)uVar20) = 0;\n      pbVar32 = *(byte **)(*plVar12 + 8);\n      DAT_0010d5c8 = pbVar32;\n      if (iVar9 == 1) goto LAB_001048a4;\n      if (iVar9 == 2) goto LAB_001048ca;\n      pbVar35 = pbVar32 + iVar8;\n      DAT_0010d5b0 = pbVar35;\n      uVar20 = find_matching_indices_0010300e();\n      goto LAB_001040d4;\n    }\n    if ((long)pbVar7 - (long)pbVar32 == 1) goto LAB_001048a4;\nLAB_001048ca:\n    pbVar35 = (byte *)((long)(int)DAT_0010d598 +\n                      *(long *)(*(long *)(DAT_0010d5a8 + DAT_0010d5a0 * 8) + 8));\n    DAT_0010d5b0 = pbVar35;\n    uVar19 = find_matching_indices_0010300e();\n    pbVar33 = DAT_0010d5c8;\n    goto LAB_0010419f;\n  }\n  pbVar35 = pbVar32 + iVar8;\n  DAT_0010d5b0 = pbVar35;\n  uVar19 = find_matching_indices_0010300e();\n  if (*(short *)(&DAT_0010a980 + (long)(int)(uint)uVar19 * 2) != 0) {\n    DAT_0010d5b8 = pbVar35;\n    DAT_0010d5c0 = (uint)uVar19;\n  }\n  uVar26 = uVar19 & 0xffffffff;\n  while( true ) {\n    iVar8 = (int)uVar26;\n    if (iVar8 == *(short *)(&DAT_0010a440 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2)) break;\n    uVar26 = (ulong)(uint)(int)*(short *)(&DAT_0010a800 + (long)iVar8 * 2);\n  }\n  uVar20 = (uint)*(short *)(&DAT_0010a240 +\n                           (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2);\n  pbVar33 = pbVar32;\n  if ((*(short *)(&DAT_0010a240 + (long)(*(short *)(&DAT_0010a640 + (long)iVar8 * 2) + 1) * 2) == 0)\n     || (uVar20 == 0xb0)) goto LAB_0010419f;\n  pbVar35 = pbVar35 + 1;\n  goto LAB_001040d4;\nLAB_001048a4:\n  DAT_0010d5b0 = DAT_0010d5c8;\n  iVar8 = (int)(DAT_0010d5d0 - 1) / 2 + 0x2a;\n  goto LAB_001041f0;\nswitchD_00104200_caseD_0:\n  *pbVar35 = DAT_0010d588;\n  uVar19 = (ulong)DAT_0010d5c0;\n  pbVar35 = DAT_0010d5b8;\n  goto LAB_0010419f;\nLAB_00105227:\n  archiveEntries = archiveEntries + 1;\n  local_800 = 3;\n  *archiveEntries = DAT_0010d548;\nLAB_001049d1:\n  currentChar = currentChar + 1;\n  goto LAB_00103ee9;\n}\n\n",
            "called": [
                "FUN_00103c60",
                "filename_cmp",
                "FUN_001033d6",
                "bfd_openw",
                "FUN_001031cf",
                "FUN_00107740",
                "fread",
                "FUN_00105300",
                "FUN_001030ed",
                "FUN_00105bc0",
                "free",
                "ferror",
                "dup",
                "fwrite",
                "printf",
                "FUN_0010315d",
                "fopen",
                "bfd_close",
                "stat",
                "clearerr",
                "FUN_00103df9",
                "malloc",
                "FUN_0010312d",
                "FUN_001031a5",
                "FUN_0010300e",
                "realloc",
                "FUN_00103ba8",
                "bfd_cache_close",
                "xstrdup",
                "FUN_001033b0",
                "bfd_openr",
                "bfd_set_format",
                "FUN_00103ddc",
                "fprintf",
                "fclose",
                "dcgettext",
                "FUN_001032a8",
                "unlink",
                "__errno_location",
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103e95",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_process_archive_00103e95"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102550",
            "calling": [
                "FUN_00102c25",
                "FUN_00102f1e",
                "FUN_00103c60",
                "FUN_001025a0",
                "FUN_00102fd7",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "FUN_00107cc0": {
            "renaming": {
                "FUN_00107cc0": "reverse_execute_functions_00107cc0",
                "lVar1": "index",
                "lVar2": "lowerBound",
                "lVar3": "tempIndex",
                "plVar4": "functionPointers",
                "uVar5": "iteration"
            },
            "code": "\nvoid reverseExecuteFunctions_00107cc0(void)\n\n{\n  long index;\n  long lowerBound;\n  long tempIndex;\n  long *functionPointers;\n  uint iteration;\n  \n  functionPointers = (long *)PTR_DAT_0010d2e0;\n  if (PTR_DAT_0010d2e0 != (undefined *)0x0) {\n    do {\n      iteration = *(int *)(functionPointers + 1) - 1;\n      if (-1 < (int)iteration) {\n        index = (long)(int)iteration;\n        iteration = iteration & 7;\n        (*(code *)functionPointers[index + 2])();\n        lowerBound = index + -1;\n        if (-1 < (int)lowerBound) {\n          tempIndex = lowerBound;\n          if (iteration != 0) {\n            if (iteration != 1) {\n              if (iteration != 2) {\n                if (iteration != 3) {\n                  if (iteration != 4) {\n                    if (iteration != 5) {\n                      if (iteration != 6) {\n                        (*(code *)functionPointers[index + 1])();\n                        lowerBound = index + -2;\n                      }\n                      (*(code *)functionPointers[lowerBound + 2])();\n                      lowerBound = lowerBound + -1;\n                    }\n                    (*(code *)functionPointers[lowerBound + 2])();\n                    lowerBound = lowerBound + -1;\n                  }\n                  (*(code *)functionPointers[lowerBound + 2])();\n                  lowerBound = lowerBound + -1;\n                }\n                (*(code *)functionPointers[lowerBound + 2])();\n                lowerBound = lowerBound + -1;\n              }\n              (*(code *)functionPointers[lowerBound + 2])();\n              lowerBound = lowerBound + -1;\n            }\n            (*(code *)functionPointers[lowerBound + 2])();\n            tempIndex = lowerBound + -1;\n            if ((int)(lowerBound + -1) < 0) goto LAB_00107d96;\n          }\n          do {\n            (*(code *)functionPointers[tempIndex + 2])();\n            index = tempIndex + -1;\n            (*(code *)functionPointers[tempIndex + 1])();\n            (*(code *)functionPointers[tempIndex])();\n            (*(code *)functionPointers[index])();\n            (*(code *)functionPointers[tempIndex + -2])();\n            (*(code *)functionPointers[tempIndex + -3])();\n            (*(code *)functionPointers[tempIndex + -4])();\n            (*(code *)functionPointers[tempIndex + -5])();\n            tempIndex = tempIndex + -8;\n          } while (-1 < (int)index + -7);\n        }\n      }\nLAB_00107d96:\n      functionPointers = (long *)*functionPointers;\n    } while (functionPointers != (long *)0x0);\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107cc0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "reverse_execute_functions_00107cc0"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "FUN_00105ae0": {
            "renaming": {
                "FUN_00105ae0": "process_archived_files_00105ae0",
                "param_1": "archive_path",
                "param_2": "destination_path",
                "param_3": "option_1",
                "param_4": "option_2"
            },
            "code": "\nvoid process_archived_files_00105ae0(undefined8 archive_path,undefined8 destination_path,undefined option_1,undefined option_2)\n\n{\n  process_archived_files_00105ae0_00105af0(archive_path,destination_path,option_1,option_2);\n  return;\n}\n\n",
            "called": [
                "FUN_00105af0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105ae0",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105ae0"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(analyze_binary_file_00105db0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_00105db0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105cc0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "FUN_00107690": {
            "renaming": {
                "FUN_00107690": "print_error_and_exit_00107690",
                "param_1": "error_code",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "message",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "flag",
                "local_d8": "buffer_length",
                "local_d4": "local_var1",
                "local_d0": "buffer",
                "local_c8": "local_buffer",
                "local_b8": "local_array",
                "local_b0": "param10_copy",
                "local_a8": "param11_copy",
                "local_a0": "param12_copy",
                "local_98": "param13_copy",
                "local_90": "param14_copy",
                "local_88": "param1_copy",
                "local_78": "param2_copy",
                "local_68": "param3_copy",
                "local_58": "param4_copy",
                "local_48": "param5_copy",
                "local_38": "param6_copy",
                "local_28": "param7_copy",
                "local_18": "param8_copy"
            },
            "code": "\nvoid print_error_and_exit_00107690(undefined4 error_code,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 message,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char flag;\n  undefined4 buffer_length;\n  undefined4 local_var1;\n  undefined *buffer;\n  undefined *local_buffer;\n  undefined local_array [8];\n  undefined8 param10_copy;\n  undefined8 param11_copy;\n  undefined8 param12_copy;\n  undefined8 param13_copy;\n  undefined8 param14_copy;\n  undefined4 param1_copy;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  undefined4 param5_copy;\n  undefined4 param6_copy;\n  undefined4 param7_copy;\n  undefined4 param8_copy;\n  \n  if (flag != '\\0') {\n    param1_copy = error_code;\n    param2_copy = param2;\n    param3_copy = param3;\n    param4_copy = param4;\n    param5_copy = param5;\n    param6_copy = param6;\n    param7_copy = param7;\n    param8_copy = param8;\n  }\n  buffer = &stack0x00000008;\n  buffer_length = 8;\n  local_buffer = local_array;\n  local_var1 = 0x30;\n  param10_copy = param10;\n  param11_copy = param11;\n  param12_copy = param12;\n  param13_copy = param13;\n  param14_copy = param14;\n  print_error_message_001078c0(message,&buffer_length);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "xexit",
                "FUN_001078c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107690",
            "calling": [
                "FUN_00105300",
                "FUN_00102c25",
                "FUN_001028ed",
                "FUN_00105db0",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "print_error_and_exit_00107690"
        },
        "bfd_seek": {
            "renaming": {},
            "code": "\nvoid bfd_seek(void)\n\n{\n  bfd_seek();\n  return;\n}\n\n",
            "called": [
                "bfd_seek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102580",
            "calling": [
                "FUN_00102c25",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "bfd_seek"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "FUN_0010266f": {
            "renaming": {
                "FUN_0010266f": "print_supported_targets_0010266f",
                "param_1": "target",
                "param_2": "outputFile",
                "lVar1": "currentTarget",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "targetPointer"
            },
            "code": "\nvoid printSupportedTargets_0010266f(long target,FILE *outputFile)\n\n{\n  long currentTarget;\n  char *message;\n  long *targetList;\n  long *targetPointer;\n  \n  if (target == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,target);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPointer = targetList;\n  while( true ) {\n    currentTarget = *targetPointer;\n    targetPointer = targetPointer + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "bfd_target_list",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010266f",
            "calling": [
                "FUN_0010394a",
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_supported_targets_0010266f"
        },
        "FUN_00105830": {
            "renaming": {
                "FUN_00105830": "extract_substring_00105830",
                "param_1": "filename",
                "param_2": "dataStruct",
                "param_3": "param1",
                "param_4": "param2",
                "lVar1": "dataStructValue",
                "sVar2": "filenameLength",
                "__s": "basenameResult",
                "uVar3": "byteValue",
                "pcVar4": "destination",
                "bVar5": "byteFlag",
                "auVar6": "result"
            },
            "code": "\nundefined  [16] extractSubstring_00105830(char *filename,long dataStruct,undefined8 param1,undefined8 param2)\n\n{\n  long dataStructValue;\n  size_t filenameLength;\n  char *basenameResult;\n  ulong byteValue;\n  char *destination;\n  byte byteFlag;\n  undefined result [16];\n  \n  byteFlag = 0;\n  if (DAT_0010d5f9 == '\\0') {\n    basenameResult = (char *)lbasename();\n    filename = basenameResult;\n    if ((DAT_0010d5fa != '\\0') && (dataStruct != 0)) {\n      filenameLength = strlen(basenameResult);\n      byteValue = (ulong)*(byte *)(*(long *)(dataStruct + 8) + 0x1e);\n      if (byteValue < filenameLength) {\n        filename = (char *)xmalloc(byteValue + 1);\n        dataStructValue = *(long *)(dataStruct + 8);\n        destination = filename;\n        for (byteValue = (ulong)*(byte *)(dataStructValue + 0x1e); byteValue != 0; byteValue = byteValue - 1) {\n          *destination = *basenameResult;\n          basenameResult = basenameResult + (ulong)byteFlag * -2 + 1;\n          destination = destination + (ulong)byteFlag * -2 + 1;\n        }\n        filename[*(byte *)(dataStructValue + 0x1e)] = '\\0';\n      }\n    }\n  }\n  result._8_8_ = param2;\n  result._0_8_ = filename;\n  return result;\n}\n\n",
            "called": [
                "lbasename",
                "FUN_00102bb0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105830",
            "calling": [
                "FUN_00105480",
                "FUN_001028ed",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_substring_00105830"
        },
        "bfd_find_target": {
            "renaming": {},
            "code": "\nvoid bfd_find_target(void)\n\n{\n  bfd_find_target();\n  return;\n}\n\n",
            "called": [
                "bfd_find_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024e0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_find_target"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024c0",
            "calling": [
                "FUN_00105300",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00107730": {
            "renaming": {
                "FUN_00107730": "cleanup_and_remove_file_00107730"
            },
            "code": "\nvoid cleanupAndRemoveFile_00107730(void)\n\n{\n  if (DAT_0010d618 == 0) {\n    return;\n  }\n  if (DAT_0010d5e0 != 0) {\n    bfd_cache_close();\n  }\n  if (DAT_0010d5d8 != (FILE *)0x0) {\n    fclose(DAT_0010d5d8);\n  }\n  unlink_if_ordinary(DAT_0010d618);\n  return;\n}\n\n",
            "called": [
                "FUN_00102bf5"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107730",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "cleanup_and_remove_file_00107730"
        },
        "mkstemp": {
            "renaming": {},
            "code": "\n\n\nint mkstemp(char *__template)\n\n{\n  int iVar1;\n  \n  iVar1 = mkstemp(__template);\n  return iVar1;\n}\n\n",
            "called": [
                "mkstemp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "mkstemp"
        },
        "FUN_00107c20": {
            "renaming": {
                "FUN_00107c20": "print_error_00107c20",
                "param_1": "errorMessage",
                "iVar1": "errorStatus",
                "uVar2": "errorDescription",
                "in_R10": "unknownCause"
            },
            "code": "\n\n\nvoid printError_00107c20(long errorMessage)\n\n{\n  int errorStatus;\n  undefined8 errorDescription;\n  undefined8 unknownCause;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorDescription = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorDescription = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010d660,errorMessage,errorDescription,unknownCause);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010d660,errorDescription,unknownCause);\n  return;\n}\n\n",
            "called": [
                "FUN_00102f96",
                "bfd_errmsg",
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107c20",
            "calling": [
                "FUN_00105300",
                "FUN_00107c10",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "print_error_00107c20"
        },
        "lseek": {
            "renaming": {},
            "code": "\n\n\n__off_t lseek(int __fd,__off_t __offset,int __whence)\n\n{\n  __off_t _Var1;\n  \n  _Var1 = lseek(__fd,__offset,__whence);\n  return _Var1;\n}\n\n",
            "called": [
                "lseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00105c00"
            ],
            "imported": false,
            "current_name": "lseek"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_001031cf": {
            "renaming": {
                "FUN_001031cf": "initialize_file_001031cf",
                "param_1": "outputFile",
                "param_2": "inputFile",
                "piVar4": "errnoPtr",
                "lVar5": "fileCounter",
                "iVar1": "initialErrno",
                "extract_data_001030ed": "extractData",
                "iVar3": "fileDescriptor",
                "uVar2": "isTerminal"
            },
            "code": "\n\n\nundefined8\ninitializeFile_001031cf(FILE **outputFile,FILE *inputFile,undefined8 param_3,undefined8 param_4,undefined8 param_5)\n\n{\n  int initialErrno;\n  uint isTerminal;\n  int fileDescriptor;\n  int *errnoPtr;\n  long fileCounter;\n  \n  errnoPtr = __errno_location();\n  fileCounter = DAT_0010d5a8;\n  initialErrno = *errnoPtr;\n  if (outputFile == (FILE **)0x0) {\n    _DAT_00000034 = 1;\n    _DAT_00000000 = inputFile;\n    if (DAT_0010d5a8 != 0) {\nLAB_00103263:\n      if (outputFile == *(FILE ***)(fileCounter + DAT_0010d5a0 * 8)) goto LAB_0010327b;\n    }\n  }\n  else {\n    *(undefined4 *)((long)outputFile + 0x1c) = 0;\n    *(undefined *)&outputFile[1]->_flags = 0;\n    *(undefined *)((long)&outputFile[1]->_flags + 1) = 0;\n    *(undefined4 *)(outputFile + 5) = 1;\n    outputFile[2] = outputFile[1];\n    *(undefined4 *)(outputFile + 7) = 0;\n    if (fileCounter != 0) {\n      if (outputFile == *(FILE ***)(fileCounter + DAT_0010d5a0 * 8)) {\n        extractData();\n      }\n      *outputFile = inputFile;\n      *(undefined4 *)((long)outputFile + 0x34) = 1;\n      goto LAB_00103263;\n    }\n    *outputFile = inputFile;\n    *(undefined4 *)((long)outputFile + 0x34) = 1;\n  }\n  *(undefined8 *)((long)outputFile + 0x2c) = 1;\nLAB_0010327b:\n  isTerminal = 0;\n  if (inputFile != (FILE *)0x0) {\n    fileDescriptor = fileno(inputFile);\n    fileDescriptor = isatty(fileDescriptor);\n    isTerminal = (uint)(0 < fileDescriptor);\n  }\n  *(uint *)((long)outputFile + 0x24) = isTerminal;\n  *errnoPtr = initialErrno;\n  return param_5;\n}\n\n",
            "called": [
                "FUN_001030ed",
                "fileno",
                "__errno_location",
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001031cf",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "initialize_file_001031cf"
        },
        "FUN_0010312d": {
            "renaming": {
                "FUN_0010312d": "copy_data_0010312d",
                "param_1": "destination",
                "param_2": "source",
                "lVar1": "temp"
            },
            "code": "\nvoid copyData_0010312d(long destination,long source)\n\n{\n  long temp;\n  \n  if (source != 0) {\n    *(undefined8 *)(source + 0xf0) = *(undefined8 *)(destination + 0xf0);\n  }\n  temp = DAT_0010d558;\n  *(undefined8 *)(destination + 0xf0) = *(undefined8 *)(DAT_0010d558 + 0xf8);\n  *(long *)(temp + 0xf8) = destination;\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010312d",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "copy_data_0010312d"
        },
        "FUN_00105c00": {
            "renaming": {
                "FUN_00105c00": "copy_file_00105c00",
                "param_1": "sourceFileDescriptor",
                "param_2": "destinationFilePath",
                "iVar1": "originalErrno",
                "__fd": "destinationFileDescriptor",
                "_Var3": "sourceFilePosition",
                "uVar4": "bytesRead",
                "sVar5": "bytesWritten",
                "piVar6": "errnoPointer",
                "auStack_2038": "buffer"
            },
            "code": "\nulong copyFile_00105c00(int sourceFileDescriptor,char *destinationFilePath)\n\n{\n  int originalErrno;\n  int destinationFileDescriptor;\n  int iVar2;\n  __off_t sourceFilePosition;\n  ulong bytesRead;\n  size_t bytesWritten;\n  int *errnoPointer;\n  undefined buffer [8200];\n  \n  if ((-1 < sourceFileDescriptor) && (sourceFilePosition = lseek(sourceFileDescriptor,0,0), sourceFilePosition == 0)) {\n    destinationFileDescriptor = open(destinationFilePath,0x201);\n    if (destinationFileDescriptor < 0) {\n      bytesRead = close_file_and_set_errno_00102f55();\n      return bytesRead;\n    }\n    do {\n      bytesRead = read(sourceFileDescriptor,buffer,0x2000);\n      iVar2 = (int)bytesRead;\n      if (iVar2 < 1) {\n        errnoPointer = __errno_location();\n        originalErrno = *errnoPointer;\n        close(sourceFileDescriptor);\n        close(destinationFileDescriptor);\n        if (iVar2 != 0) {\n          *errnoPointer = originalErrno;\n          return 0xffffffff;\n        }\n        return bytesRead & 0xffffffff;\n      }\n      bytesWritten = write(destinationFileDescriptor,buffer,(long)iVar2);\n    } while (bytesWritten == (long)iVar2);\n    errnoPointer = __errno_location();\n    iVar2 = *errnoPointer;\n    close(sourceFileDescriptor);\n    close(destinationFileDescriptor);\n    *errnoPointer = iVar2;\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "open",
                "read",
                "close",
                "lseek",
                "write",
                "FUN_00102f55",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105c00",
            "calling": [
                "FUN_00105bc0"
            ],
            "imported": false,
            "current_name": "copy_file_00105c00"
        },
        "calloc": {
            "renaming": {},
            "code": "\n\n\nvoid * calloc(size_t __nmemb,size_t __size)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = calloc(__nmemb,__size);\n  return pvVar1;\n}\n\n",
            "called": [
                "calloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "calloc"
        },
        "FUN_00105d20": {
            "renaming": {
                "FUN_00105d20": "FUNC_00105d20"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105d44) */\n/* WARNING: Removing unreachable block (ram,0x00105d50) */\n\nvoid FUNC_00105d20(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105d20",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105d20"
        },
        "FUN_001052a0": {
            "renaming": {
                "FUN_001052a0": "check_file_001052a0",
                "param_1": "filename",
                "iVar1": "status",
                "piVar2": "error_ptr",
                "uVar3": "error_message",
                "pcVar4": "error_reason",
                "sStack_a8": "file_stat"
            },
            "code": "\nlong check_file_001052a0(char *filename)\n\n{\n  int status;\n  int *error_ptr;\n  undefined8 error_message;\n  char *error_reason;\n  stat file_stat;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&file_stat);\n    if (status < 0) {\n      error_ptr = __errno_location();\n      if (*error_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00107920(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*error_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00107920(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00107920(error_message,filename);\n    }\n    else if ((file_stat.st_mode & 0xf000) == 0x8000) {\n      if (-1 < file_stat.st_size) {\n        return file_stat.st_size;\n      }\n      error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n      print_error_message_00107920(error_message,filename);\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00107920(error_message,filename);\n    }\n  }\n  return -1;\n}\n\n",
            "called": [
                "stat",
                "FUN_001025a0",
                "FUN_00107920",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001052a0",
            "calling": [
                "FUN_00105db0",
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "check_file_001052a0"
        },
        "FUN_0010336b": {
            "renaming": {
                "FUN_0010336b": "print_emulation_options_0010336b",
                "param_1": "outputFile",
                "pcVar1": "optionString"
            },
            "code": "\nvoid printEmulationOptions_0010336b(FILE *outputFile)\n\n{\n  char *optionString;\n  \n  optionString = (char *)dcgettext(0,\" emulation options: \\n\",5);\n  fprintf(outputFile,optionString);\n  optionString = (char *)dcgettext(0,\"  No emulation specific options\\n\",5);\n  fprintf(outputFile,optionString);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010336b",
            "calling": [
                "FUN_0010342d"
            ],
            "imported": false,
            "current_name": "print_emulation_options_0010336b"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00103172",
                "FUN_00103ba8",
                "FUN_00103e95",
                "FUN_00102f08",
                "FUN_001075e0",
                "FUN_00105db0",
                "FUN_00103a78",
                "FUN_001031a5",
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103c60": {
            "renaming": {
                "FUN_00103c60": "create_archive_00103c60",
                "param_1": "input_archive_path",
                "param_2": "compress_output",
                "cVar1": "is_archive_format",
                "piVar2": "errno_location",
                "pcVar3": "error_message",
                "lVar4": "input_archive_handle",
                "lVar5": "archived_file_handle",
                "uVar6": "program_name",
                "plVar7": "current_file_handle"
            },
            "code": "\n\n\nvoid create_archive_00103c60(char *input_archive_path,int compress_output)\n\n{\n  char is_archive_format;\n  int *errno_location;\n  char *error_message;\n  long input_archive_handle;\n  long archived_file_handle;\n  undefined8 program_name;\n  long *current_file_handle;\n  \n  DAT_0010d570 = xstrdup();\n  DAT_0010d560 = (char *)extract_file_name_001057a0(DAT_0010d570,&DAT_0010d568);\n  if (DAT_0010d560 == (char *)0x0) {\n    errno_location = __errno_location();\n    input_archive_path = strerror(*errno_location);\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,\"%s: Can\\'t open temporary file (%s)\\n\",5);\n  }\n  else {\n    DAT_0010d558 = bfd_fdopenw(DAT_0010d560,0,DAT_0010d568);\n    if (DAT_0010d558 == 0) {\n      error_message = \"%s: Can\\'t open output archive %s\\n\";\n      input_archive_path = DAT_0010d560;\n    }\n    else {\n      if (compress_output != 0) {\nLAB_00103d02:\n        bfd_set_format(DAT_0010d558,2);\n        *(byte *)(DAT_0010d558 + 0x49) = *(byte *)(DAT_0010d558 + 0x49) & 0xe7 | 8;\n        return;\n      }\n      input_archive_handle = bfd_openr(input_archive_path,\"plugin\");\n      if (input_archive_handle == 0) {\n        error_message = \"%s: Can\\'t open input archive %s\\n\";\n      }\n      else {\n        is_archive_format = bfd_check_format(input_archive_handle,2);\n        if (is_archive_format != '\\0') {\n          current_file_handle = (long *)(DAT_0010d558 + 0xf8);\n          for (archived_file_handle = bfd_openr_next_archived_file(input_archive_handle,0); archived_file_handle != 0;\n              archived_file_handle = bfd_openr_next_archived_file(input_archive_handle,archived_file_handle)) {\n            *current_file_handle = archived_file_handle;\n            current_file_handle = (long *)(archived_file_handle + 0xf0);\n          }\n          goto LAB_00103d02;\n        }\n        error_message = \"%s: file %s is not an archive\\n\";\n      }\n    }\n    program_name = DAT_0010d660;\n    error_message = (char *)dcgettext(0,error_message,5);\n  }\n  fprintf(_stderr,error_message,program_name,input_archive_path);\n  check_and_exit_if_data_unavailable_0010315d();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "xstrdup",
                "FUN_001057a0",
                "bfd_set_format",
                "strerror",
                "bfd_fdopenw",
                "bfd_openr",
                "fprintf",
                "FUN_0010315d",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c60",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "create_archive_00103c60"
        },
        "FUN_00102e57": {
            "renaming": {
                "FUN_00102e57": "save_data_to_file_00102e57",
                "pFVar1": "filePointer"
            },
            "code": "\nvoid saveDataToFile_00102e57(void)\n\n{\n  FILE *filePointer;\n  \n  DAT_0010d618 = (char *)concat();\n  if (DAT_0010d60c != 0) {\n    printf(\"x - %s\\n\",DAT_0010d618);\n  }\n  filePointer = fopen(DAT_0010d618,\"w\");\n  if (filePointer != (FILE *)0x0) {\n    return;\n  }\n  perror(DAT_0010d618);\n                    \n  xexit(1);\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102e57",
            "calling": [
                "FUN_00105a68"
            ],
            "imported": false,
            "current_name": "save_data_to_file_00102e57"
        },
        "FUN_00105af0": {
            "renaming": {
                "FUN_00105af0": "process_archived_files_00105af0",
                "param_3": "flag1",
                "param_4": "flag2",
                "cVar1": "check_format_result",
                "uVar2": "recursive_result",
                "lVar3": "archived_file",
                "uVar4": "return_value"
            },
            "code": "\nulong process_archived_files_00105af0(long *param_1,long param_2,char flag1,char flag2)\n\n{\n  char check_format_result;\n  uint recursive_result;\n  long archived_file;\n  ulong return_value;\n  \n  if (flag2 == '\\0') {\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_value_00102f08();\n      return return_value;\n    }\n  }\n  else {\n    check_format_result = bfd_check_format(param_2,2);\n    if (check_format_result != '\\0') {\n      return_value = 0;\n      for (archived_file = bfd_openr_next_archived_file(param_2,0); archived_file != 0;\n          archived_file = bfd_openr_next_archived_file(param_2,archived_file)) {\n        recursive_result = process_archived_files_00105af0(param_1,archived_file,flag1,1);\n        if ((char)recursive_result != '\\0') {\n          return_value = (ulong)recursive_result;\n          param_1 = (long *)(*param_1 + 0xf0);\n        }\n      }\n      return return_value;\n    }\n    if (flag1 != '\\0') {\n      return_value = print_and_assign_value_00102f08();\n      return return_value;\n    }\n  }\n  *(long *)(param_2 + 0xf0) = *param_1;\n  *param_1 = param_2;\n  return 1;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "FUN_00105af0",
                "FUN_00102f08"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105af0",
            "calling": [
                "FUN_00105af0",
                "FUN_001028ed",
                "FUN_00105ae0"
            ],
            "imported": false,
            "current_name": "process_archived_files_00105af0"
        },
        "FUN_0010300e": {
            "renaming": {
                "FUN_0010300e": "find_matching_indices_0010300e",
                "bVar1": "hasMatchingIndices",
                "iVar2": "currentIndex",
                "lVar3": "computedIndex",
                "bVar4": "tempByte",
                "pbVar5": "currentArrayElement",
                "in_R9": "matchingArrayElement",
                "in_R10D": "matchingIndex"
            },
            "code": "\nvoid findMatchingIndices_0010300e(void)\n\n{\n  bool hasMatchingIndices;\n  int currentIndex;\n  long computedIndex;\n  byte tempByte;\n  byte *currentArrayElement;\n  byte *matchingArrayElement;\n  int matchingIndex;\n  \n  hasMatchingIndices = false;\n  currentIndex = DAT_0010d5d0;\n  for (currentArrayElement = DAT_0010d5c8; currentArrayElement < DAT_0010d5b0; currentArrayElement = currentArrayElement + 1) {\n    tempByte = 1;\n    if (*currentArrayElement != 0) {\n      tempByte = (&DAT_0010ab00)[*currentArrayElement];\n    }\n    if (*(short *)(&DAT_0010a980 + (long)currentIndex * 2) != 0) {\n      hasMatchingIndices = true;\n      matchingArrayElement = currentArrayElement;\n      matchingIndex = currentIndex;\n    }\n    while( true ) {\n      computedIndex = (long)(int)((int)*(short *)(&DAT_0010a640 + (long)currentIndex * 2) + (uint)tempByte);\n      if (*(short *)(&DAT_0010a440 + computedIndex * 2) == currentIndex) break;\n      currentIndex = (int)*(short *)(&DAT_0010a800 + (long)currentIndex * 2);\n      if (0xb0 < currentIndex) {\n        tempByte = (&DAT_0010a7c0)[(int)(uint)tempByte];\n      }\n    }\n    currentIndex = (int)*(short *)(&DAT_0010a240 + computedIndex * 2);\n  }\n  if (hasMatchingIndices) {\n    DAT_0010d5b8 = matchingArrayElement;\n    DAT_0010d5c0 = matchingIndex;\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010300e",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "find_matching_indices_0010300e"
        },
        "chmod": {
            "renaming": {},
            "code": "\n\n\nint chmod(char *__file,__mode_t __mode)\n\n{\n  int iVar1;\n  \n  iVar1 = chmod(__file,__mode);\n  return iVar1;\n}\n\n",
            "called": [
                "chmod"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_00102c25"
            ],
            "imported": false,
            "current_name": "chmod"
        },
        "FUN_00102ba1": {
            "renaming": {
                "FUN_00102ba1": "free_and_return_address_00102ba1",
                "unaff_RBP": "pointer",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\nundefined  [16] freeAndReturnAddress_00102ba1(void)\n\n{\n  undefined auVar1 [16];\n  void *pointer;\n  ulong returnAddress;\n  \n  free(pointer);\n  auVar1._8_8_ = 0;\n  auVar1._0_8_ = returnAddress;\n  return auVar1 << 0x40;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102ba1",
            "calling": [
                "FUN_001057a0"
            ],
            "imported": false,
            "current_name": "free_and_return_address_00102ba1"
        },
        "FUN_00107740": {
            "renaming": {
                "FUN_00107740": "extract_and_write_archive_member_00107740",
                "param_1": "archive",
                "iVar1": "comparison_result",
                "iVar2": "status",
                "piVar3": "errno_location",
                "pcVar4": "error_message",
                "uVar5": "gettext_result",
                "pplVar6": "archive_ptr",
                "__ptr": "buffer",
                "__n": "num_read",
                "lVar7": "loop_counter",
                "plVar8": "file_ptr",
                "puVar9": "local_array_ptr",
                "uVar10": "total_read",
                "sVar11": "num_to_read",
                "local_c8": "local_array",
                "_Stack_b0": "file_permissions",
                "uStack_98": "file_size",
                "uStack_80": "file_modification_time",
                "uStack_70": "file_modification_time"
            },
            "code": "\n\n\nlong * extract_and_write_archive_member_00107740(long **archive)\n\n{\n  int comparison_result;\n  int status;\n  int *errno_location;\n  char *error_message;\n  undefined8 gettext_result;\n  long **archive_ptr;\n  void *buffer;\n  size_t num_read;\n  long loop_counter;\n  long *file_ptr;\n  undefined4 *local_array_ptr;\n  ulong total_read;\n  size_t num_to_read;\n  undefined4 local_array [6];\n  __mode_t file_permissions;\n  ulong file_size;\n  undefined8 file_modification_time;\n  undefined8 file_modification_time;\n  \n  if (_DAT_0010d600 != 0) {\n    local_array_ptr = local_array;\n    for (loop_counter = 0x24; loop_counter != 0; loop_counter = loop_counter + -1) {\n      *local_array_ptr = 0;\n      local_array_ptr = local_array_ptr + 1;\n    }\n  }\n  archive_ptr = (long **)archive[0x1d];\n  if ((long **)archive[0x1d] == (long **)0x0) {\n    archive_ptr = archive;\n  }\n  status = (*(code *)archive_ptr[1][0x3d])(archive,local_array);\n  if (status != 0) {\n    file_ptr = *archive;\n    gettext_result = dcgettext(0,\"internal stat error on %s\",5);\n    status = print_error_and_exit_00107690(gettext_result,file_ptr);\n    gettext_result = DAT_0010d638;\n    if (status == 3) {\n      for (; *file_ptr != 0; file_ptr = (long *)(*file_ptr + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*file_ptr != (undefined8 *)0x0; file_ptr = (long *)(*file_ptr + 0xf0)) {\n        comparison_result = filename_cmp(*(undefined8 *)*file_ptr,gettext_result);\n        if (comparison_result == 0) {\n          if (status != 2) {\n            return file_ptr;\n          }\n          return (long *)(*file_ptr + 0xf0);\n        }\n      }\n    }\n    return file_ptr;\n  }\n  bfd_seek(archive,0,0);\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (file_size == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*archive);\n  }\n  else {\n    total_read = 0;\n    buffer = (void *)xmalloc(0x2000);\n    do {\n      num_to_read = file_size - total_read;\n      if (0x2000 < num_to_read) {\n        num_to_read = 0x2000;\n      }\n      num_read = bfd_bread(buffer,num_to_read,archive);\n      if (num_to_read != num_read) {\nLAB_00102c78:\n        archive = (long **)*archive[0x1d];\n        gettext_result = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(gettext_result,archive);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*archive);\n      }\n      num_to_read = fwrite(buffer,1,num_read,DAT_0010d5d8);\n      if (num_to_read != num_read) {\n        errno_location = __errno_location();\n        error_message = strerror(*errno_location);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,error_message);\n        goto LAB_00102c78;\n      }\n      total_read = total_read + num_read;\n    } while (total_read < file_size);\n    free(buffer);\n  }\n  fclose(DAT_0010d5d8);\n  error_message = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,file_permissions);\n  if (_DAT_0010d600 != 0) {\n    file_modification_time = file_modification_time;\n    set_file_modification_time_00107c80(error_message,local_array);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "FUN_00102c25"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00107740",
            "calling": [
                "FUN_00103e95",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "extract_and_write_archive_member_00107740"
        },
        "FUN_00102d2f": {
            "renaming": {
                "FUN_00102d2f": "format_and_print_file_information_00102d2f",
                "bVar1": "errorFlag",
                "cVar2": "archiveHeadFlag",
                "iVar3": "copyResult",
                "__format": "timeCorruptFormat",
                "uVar4": "fileType",
                "unaff_RBX": "fileInformation",
                "unaff_RBP": "outputFile",
                "unaff_R12": "optionFlags",
                "unaff_R13": "errorMessage",
                "unaff_R14D": "fileDescriptor",
                "uStack0000000000000015": "filePermissions",
                "cStack0000000000000016": "symbolicLinkFlag",
                "cStack0000000000000017": "executableFlag",
                "in_stack_00000018": "subdirectoryFlag",
                "cStack0000000000000019": "pipeFlag",
                "cStack000000000000001a": "archiveFlag",
                "cStack000000000000001b": "blockSpecialFlag",
                "cStack000000000000001c": "characterSpecialFlag",
                "cStack000000000000001d": "fifoFlag",
                "cStack000000000000001e": "socketFlag",
                "uStack0000000000000068": "fileMode",
                "uStack000000000000006c": "fileHardLinks",
                "in_stack_00000070": "fileOwnerID",
                "in_stack_00000080": "fileSize"
            },
            "code": "\nvoid formatAndPrintFileInformation_00102d2f(void)\n\n{\n  byte errorFlag;\n  char archiveHeadFlag;\n  int copyResult;\n  char *timeCorruptFormat;\n  uint fileType;\n  char **fileInformation;\n  FILE *outputFile;\n  long optionFlags;\n  void *errorMessage;\n  int fileDescriptor;\n  undefined filePermissions;\n  char symbolicLinkFlag;\n  char executableFlag;\n  char subdirectoryFlag;\n  char pipeFlag;\n  char archiveFlag;\n  char blockSpecialFlag;\n  char characterSpecialFlag;\n  char fifoFlag;\n  char socketFlag;\n  undefined uStack000000000000001f;\n  uint fileMode;\n  uint fileHardLinks;\n  uint fileOwnerID;\n  undefined8 fileSize;\n  \n  do {\n    errorFlag = handle_error_00107c10();\n    *(uint *)((long)fileInformation + 0x44) = *(uint *)((long)fileInformation + 0x44) | 0x100000;\n    if ((DAT_0010d5f8 != '\\0') || ((*(byte *)(optionFlags + 0x49) & 0x10) != 0)) {\n      *(byte *)((long)fileInformation + 0x49) = errorFlag | 0x10;\n    }\n    archiveHeadFlag = bfd_set_archive_head();\n  } while (archiveHeadFlag == '\\0');\n  dup(fileDescriptor);\n  archiveHeadFlag = bfd_close();\n  if (archiveHeadFlag != '\\0') {\n    DAT_0010d5e0 = 0;\n    DAT_0010d618 = 0;\n    bfd_close();\n    copyResult = copy_and_remove_file_00105bc0();\n    if (copyResult == 0) {\n      free(errorMessage);\n      free(outputFile);\n      return;\n    }\n                    \n    xexit(1);\n  }\n  handle_error_00107c10();\n  timeCorruptFormat = (char *)dcgettext(0,\"<time data corrupt>\",5);\n  sprintf(&stack0x00000020,timeCorruptFormat);\n  fileType = fileMode & 0xf000;\n  if (fileType == 0x4000) {\n    filePermissions = 100;\n  }\n  else if (fileType == 0xa000) {\n    filePermissions = 0x6c;\n  }\n  else if (fileType == 0x6000) {\n    filePermissions = 0x62;\n  }\n  else if (fileType == 0x2000) {\n    filePermissions = 99;\n  }\n  else if (fileType == 0xc000) {\n    filePermissions = 0x73;\n  }\n  else {\n    filePermissions = 0x70;\n    if (fileType != 0x1000) {\n      filePermissions = 0x2d;\n    }\n  }\n  symbolicLinkFlag = (-((fileMode & 0x100) == 0) & 0xbbU) + 0x72;\n  executableFlag = (-((fileMode & 0x80) == 0) & 0xb6U) + 0x77;\n  subdirectoryFlag = (-((fileMode & 0x40) == 0) & 0xb5U) + 0x78;\n  pipeFlag = (-((fileMode & 0x20) == 0) & 0xbbU) + 0x72;\n  archiveFlag = (-((fileMode & 0x10) == 0) & 0xb6U) + 0x77;\n  blockSpecialFlag = (-((fileMode & 8) == 0) & 0xb5U) + 0x78;\n  characterSpecialFlag = (-((fileMode & 4) == 0) & 0xbbU) + 0x72;\n  fifoFlag = (-((fileMode & 2) == 0) & 0xb6U) + 0x77;\n  socketFlag = (-((fileMode & 1) == 0) & 0xb5U) + 0x78;\n  if ((fileMode & 0x800) != 0) {\n    if (subdirectoryFlag == 'x') {\n      subdirectoryFlag = 's';\n    }\n    else {\n      subdirectoryFlag = 'S';\n    }\n  }\n  if ((fileMode & 0x400) != 0) {\n    if (blockSpecialFlag == 'x') {\n      blockSpecialFlag = 's';\n    }\n    else {\n      blockSpecialFlag = 'S';\n    }\n  }\n  if ((fileMode & 0x200) != 0) {\n    if (socketFlag == 'x') {\n      socketFlag = 't';\n    }\n    else {\n      socketFlag = 'T';\n    }\n  }\n  uStack000000000000001f = 0;\n  fprintf(outputFile,\"%s %ld/%ld %6lu %s \",&stack0x00000016,(ulong)fileHardLinks,\n          (ulong)fileOwnerID,fileSize,&stack0x00000020,(ulong)fileMode)\n  ;\n  fputs(*fileInformation,outputFile);\n  if ((char)optionFlags != '\\0') {\n    if ((*(byte *)((long)fileInformation + 0x49) & 0x10) == 0) {\n      if (fileInformation[0xb] != (char *)0x0) {\n        fprintf(outputFile,\" 0x%lx\");\n      }\n    }\n    else if (fileInformation[0xc] != (char *)0x0) {\n      fprintf(outputFile,\" 0x%lx\");\n    }\n  }\n  fputc(10,outputFile);\n  return;\n}\n\n",
            "called": [
                "FUN_00105bc0",
                "free",
                "bfd_set_archive_head",
                "bfd_close",
                "FUN_00107c10",
                "dup",
                "xexit",
                "FUN_00102d2f"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102d2f",
            "calling": [
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "format_and_print_file_information_00102d2f"
        },
        "FUN_001028ed": {
            "renaming": {
                "FUN_001028ed": "process_files_001028ed",
                "param_1": "param1",
                "param_2": "param2",
                "bVar2": "byteVar",
                "iVar3": "intVar",
                "sVar4": "sizeVar",
                "piVar5": "ptrIntVar",
                "pcVar6": "charPtrVar1",
                "pcVar7": "charPtrVar2",
                "ppcVar8": "charPtrPtrVar",
                "uVar9": "uVar2",
                "lVar10": "longVar1",
                "__s": "str1",
                "__s_00": "str2",
                "lVar11": "longVar2",
                "uVar12": "uVar3",
                "uVar13": "ulongVar",
                "ppcVar14": "charPtrPtrVar1",
                "ppcVar15": "charPtrPtrVar2",
                "bVar16": "boolVar",
                "bVar17": "byteVar2",
                "param_7": "param7",
                "param_9": "param9",
                "in_stack_00000078": "inStackLongVar1",
                "in_stack_00000108": "inStackLongVar2"
            },
            "code": "\n\n\nundefined8 processFiles_001028ed(undefined8 param1,long param2)\n\n{\n  undefined uVar1;\n  byte byteVar;\n  int intVar;\n  size_t sizeVar;\n  int *ptrIntVar;\n  char *charPtrVar1;\n  char *charPtrVar2;\n  char **charPtrPtrVar;\n  undefined8 uVar2;\n  long longVar1;\n  char *str1;\n  char *str2;\n  long longVar2;\n  undefined8 uVar3;\n  ulong ulongVar;\n  char *unaff_RBX;\n  char **charPtrPtrVar1;\n  char **unaff_RBP;\n  char **unaff_R12;\n  uint unaff_R13D;\n  char **charPtrPtrVar2;\n  long unaff_R14;\n  bool boolVar;\n  byte byteVar2;\n  char **param7;\n  undefined8 param9;\n  long inStackLongVar1;\n  long inStackLongVar2;\n  \n  byteVar2 = 0;\ncode_r0x001028ed:\n  handle_error_00107c10(unaff_RBX,param2);\nLAB_001028f5:\n  uVar3 = DAT_0010d638;\n  if (unaff_R13D != 3) {\n    while( true ) {\n      if ((undefined8 *)*unaff_R12 == (undefined8 *)0x0) goto LAB_0010571f;\n      intVar = filename_cmp(*(undefined8 *)*unaff_R12,uVar3);\n      if (intVar == 0) break;\n      unaff_R12 = (char **)(*unaff_R12 + 0xf0);\n    }\n    if (unaff_R13D != 2) goto LAB_0010571f;\n    unaff_R12 = (char **)(*unaff_R12 + 0xf0);\n    goto LAB_0010571f;\n  }\n  longVar1 = *(long *)(unaff_R14 + 0xf0);\n  if (*(long *)(unaff_R14 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n  do {\n    longVar2 = longVar1;\n    longVar1 = *(long *)(longVar2 + 0xf0);\n  } while (longVar1 != 0);\n  unaff_R12 = (char **)(longVar2 + 0xf0);\n  unaff_RBX = *unaff_RBP;\n  if (DAT_0010d620 != 0) goto LAB_00105731;\nLAB_00105698:\n  uVar1 = DAT_0010d5f8;\n  unaff_R13D = (uint)(DAT_0010d60c != 0);\n  param2 = bfd_openr(unaff_RBX,DAT_0010d5f0);\n  if (param2 != 0) {\n    unaff_RBP = unaff_RBP + 1;\n    byteVar = process_archived_files_00105af0(unaff_R12,param2,unaff_R13D,uVar1);\n    param9._6_1_ = param9._6_1_ | byteVar;\n    charPtrVar1 = *unaff_RBP;\n    do {\n      if (charPtrVar1 == (char *)0x0) {\n        if (param9._6_1_ == 0) {\n          DAT_0010d618 = 0;\n          return 0;\n        }\n        uVar3 = extract_archive_contents_001058b0();\n        return uVar3;\n      }\n      charPtrPtrVar1 = *(char ***)(unaff_R14 + 0xf0);\n      unaff_R12 = param7;\n      if (param9._7_1_ == '\\0') {\n        charPtrPtrVar2 = param7;\n        if (charPtrPtrVar1 != (char **)0x0) {\n          do {\n            if (DAT_0010d5f9 == '\\0') {\n              str1 = (char *)lbasename(*charPtrPtrVar1);\n              charPtrVar2 = str1;\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(str1);\n                ulongVar = (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                if (ulongVar < sizeVar) {\n                  charPtrVar2 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(unaff_R14 + 8);\n                  charPtrVar1 = charPtrVar2;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtrVar1 = *str1;\n                    str1 = str1 + (ulong)byteVar2 * -2 + 1;\n                    charPtrVar1 = charPtrVar1 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPtrVar2[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                charPtrVar1 = *unaff_RBP;\n                str1 = charPtrVar2;\n                if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n                goto LAB_00102980;\n              }\n              charPtrVar1 = *unaff_RBP;\n              if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n              str2 = (char *)lbasename(charPtrVar1);\n              if (DAT_0010d5fa != '\\0') {\n                sizeVar = strlen(str2);\n                ulongVar = (ulong)*(byte *)(*(long *)(unaff_R14 + 8) + 0x1e);\n                charPtrVar1 = str2;\n                str1 = charPtrVar2;\n                if (ulongVar < sizeVar) {\n                  charPtrVar1 = (char *)xmalloc(ulongVar + 1);\n                  longVar1 = *(long *)(unaff_R14 + 8);\n                  charPtrVar2 = charPtrVar1;\n                  for (ulongVar = (ulong)*(byte *)(longVar1 + 0x1e); ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *charPtrVar2 = *str2;\n                    str2 = str2 + (ulong)byteVar2 * -2 + 1;\n                    charPtrVar2 = charPtrVar2 + (ulong)byteVar2 * -2 + 1;\n                  }\n                  charPtrVar1[*(byte *)(longVar1 + 0x1e)] = '\\0';\n                }\n                goto LAB_00102980;\n              }\n              intVar = filename_cmp(str2,charPtrVar2);\n            }\n            else {\n              charPtrVar1 = *unaff_RBP;\n              str1 = *charPtrPtrVar1;\nLAB_00102980:\n              intVar = filename_cmp(charPtrVar1,str1);\n            }\n            if ((intVar == 0) && (charPtrPtrVar1[0x1c] != (char *)0x0)) {\n              if (_DAT_0010d644 != 0) {\n                intVar = stat(*unaff_RBP,(stat *)&stack0x000000b0);\n                if (intVar != 0) {\n                  ptrIntVar = __errno_location();\n                  if (*ptrIntVar != 2) {\n                    handle_error_00107c10(*unaff_RBP);\nLAB_00102b7e:\n                    charPtrVar1 = *charPtrPtrVar1;\n                    uVar3 = dcgettext(0,\"internal stat error on %s\",5);\n                    print_error_and_exit_00107690(uVar3,charPtrVar1);\n                    free(unaff_RBP);\n                    return 0;\n                  }\n                  goto LAB_0010577e;\n                }\n                charPtrPtrVar = (char **)charPtrPtrVar1[0x1d];\n                if ((char **)charPtrPtrVar1[0x1d] == (char **)0x0) {\n                  charPtrPtrVar = charPtrPtrVar1;\n                }\n                intVar = (**(code **)(charPtrPtrVar[1] + 0x1e8))(charPtrPtrVar1,&stack0x00000020);\n                if (intVar != 0) goto LAB_00102b7e;\n                if (inStackLongVar2 <= inStackLongVar1) goto LAB_0010577e;\n              }\n              uVar3 = find_file_location_00105870(param7,2,*charPtrPtrVar1);\n              if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n                charPtrVar1 = *unaff_RBP;\n                boolVar = DAT_0010d60c != 0;\n                longVar1 = bfd_openr(charPtrVar1,DAT_0010d5f0);\n                if (longVar1 == 0) {\n                  handle_error_00107c10(charPtrVar1,0);\n                  goto LAB_00102b3e;\n                }\n                byteVar = update_param_00103172(uVar3,longVar1,boolVar);\n              }\n              else {\n                uVar2 = extract_substring_00105830(*unaff_RBP);\n                intVar = filename_cmp(uVar2,\"__.LIBDEP\");\n                if (intVar != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n                byteVar = update_param_00103172(uVar3,DAT_0010d620,DAT_0010d60c != 0);\n              }\n              if (byteVar != 0) {\n                *charPtrPtrVar2 = *(char **)(*charPtrPtrVar2 + 0xf0);\n                param9._6_1_ = byteVar;\n              }\n              goto LAB_0010577e;\n            }\n            charPtrPtrVar2 = charPtrPtrVar1 + 0x1e;\n            charPtrPtrVar1 = (char **)charPtrPtrVar1[0x1e];\n          } while (charPtrPtrVar1 != (char **)0x0);\n          goto LAB_0010564c;\n        }\n        unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n      }\n      else {\nLAB_0010564c:\n        unaff_R13D = DAT_0010d640;\n        if (DAT_0010d640 != 0) goto LAB_001028f5;\n        longVar1 = *(long *)(unaff_R14 + 0xf0);\n        if (*(long *)(unaff_R14 + 0xf0) != 0) goto LAB_00105670;\n      }\nLAB_0010571f:\n      unaff_RBX = *unaff_RBP;\n      if (DAT_0010d620 == 0) goto LAB_00105698;\nLAB_00105731:\n      uVar3 = extract_substring_00105830(unaff_RBX);\n      intVar = filename_cmp(uVar3,\"__.LIBDEP\");\n      if (intVar != 0) goto code_r0x0010574f;\n      byteVar = process_archived_files_00105ae0(unaff_R12,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n      param9._6_1_ = byteVar | param9._6_1_;\nLAB_0010577e:\n      unaff_RBP = unaff_RBP + 1;\n      charPtrVar1 = *unaff_RBP;\n    } while( true );\n  }\n  goto code_r0x001028ed;\ncode_r0x0010574f:\n  unaff_RBX = *unaff_RBP;\n  goto LAB_00105698;\n}\n\n",
            "called": [
                "xmalloc",
                "filename_cmp",
                "FUN_00103172",
                "FUN_00105870",
                "strlen",
                "FUN_00107c10",
                "stat",
                "FUN_00107690",
                "FUN_00102943",
                "FUN_00105af0",
                "FUN_00105830",
                "bfd_openr",
                "FUN_001028ed",
                "lbasename",
                "dcgettext",
                "FUN_001058b0",
                "FUN_00105ae0",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001028ed",
            "calling": [
                "FUN_001028ed"
            ],
            "imported": false,
            "current_name": "process_files_001028ed"
        },
        "clearerr": {
            "renaming": {},
            "code": "\n\n\nvoid clearerr(FILE *__stream)\n\n{\n  clearerr(__stream);\n  return;\n}\n\n",
            "called": [
                "clearerr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "clearerr"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00102bf5",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001024d0",
            "calling": [
                "FUN_00107c20",
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001033b0": {
            "renaming": {
                "FUN_001033b0": "print_error_message_and_exit_001033b0",
                "param_1": "errorMessage",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessageAndExit_001033b0(undefined8 errorMessage)\n\n{\n  fprintf(standardError,\"%s\\n\",errorMessage);\n                    \n  exit(2);\n}\n\n",
            "called": [
                "exit",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001033b0",
            "calling": [
                "FUN_001033d6",
                "FUN_00103e95",
                "FUN_00103df9"
            ],
            "imported": false,
            "current_name": "print_error_message_and_exit_001033b0"
        },
        "fwrite": {
            "renaming": {},
            "code": "\n\n\nsize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fwrite(__ptr,__size,__n,__s);\n  return sVar1;\n}\n\n",
            "called": [
                "fwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102510",
            "calling": [
                "FUN_00102c25",
                "FUN_00103e95",
                "FUN_00103a78"
            ],
            "imported": false,
            "current_name": "fwrite"
        },
        "unlink": {
            "renaming": {},
            "code": "\n\n\nint unlink(char *__name)\n\n{\n  int iVar1;\n  \n  iVar1 = unlink(__name);\n  return iVar1;\n}\n\n",
            "called": [
                "unlink"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102f1e",
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "unlink"
        },
        "unlink_if_ordinary": {
            "renaming": {},
            "code": "\nvoid unlink_if_ordinary(void)\n\n{\n  unlink_if_ordinary();\n  return;\n}\n\n",
            "called": [
                "unlink_if_ordinary"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_00102bf5"
            ],
            "imported": false,
            "current_name": "unlink_if_ordinary"
        },
        "FUN_001025a0": {
            "renaming": {
                "FUN_001025a0": "print_error_if_no_such_file_001025a0",
                "uVar2": "error_message",
                "dcgettext": "get_text_translated_error_message",
                "print_error_message_00107920": "print_error_message"
            },
            "code": "\nundefined8 print_error_if_no_such_file_001025a0(void)\n\n{\n  int *piVar1;\n  undefined8 error_message;\n  \n  piVar1 = __errno_location();\n  if (*piVar1 == 2) {\n    error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n    print_error_message(error_message);\n  }\n  else {\n    strerror(*piVar1);\n    error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n    print_error_message(error_message);\n  }\n  return 0xffffffffffffffff;\n}\n\n",
            "called": [
                "strerror",
                "FUN_00107920",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025a0",
            "calling": [
                "FUN_001052a0"
            ],
            "imported": false,
            "current_name": "print_error_if_no_such_file_001025a0"
        },
        "FUN_0010284b": {
            "renaming": {
                "FUN_0010284b": "return_one_0010284b",
                "undefined8": "uint64_t"
            },
            "code": "\nuint64_t returnOne_0010284b(void)\n\n{\n  return 1;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010284b",
            "calling": [
                "FUN_00107650"
            ],
            "imported": false,
            "current_name": "return_one_0010284b"
        },
        "FUN_00102c25": {
            "renaming": {
                "FUN_00102c25": "extract_and_modify_archive_member_00102c25",
                "param_7": "paramArray",
                "piVar3": "errnoPtr",
                "pcVar4": "errorString",
                "uVar5": "translatedString",
                "pplVar6": "pointerArray",
                "__ptr": "bufferPtr",
                "__n": "numRead",
                "lVar7": "loopCounter",
                "unaff_RBX": "unaffPtr",
                "plVar8": "pointerVar",
                "puVar9": "paramPointer",
                "uVar10": "bytesRead",
                "sVar11": "readSize",
                "param_11": "fileMode",
                "param_12": "fileSize"
            },
            "code": "\n\n\nlong * extractAndModifyArchiveMember_00102c25(void)\n\n{\n  int iVar1;\n  int iVar2;\n  int *errnoPtr;\n  char *errorString;\n  undefined8 translatedString;\n  long **pointerArray;\n  void *bufferPtr;\n  size_t numRead;\n  long loopCounter;\n  long **unaffPtr;\n  long *pointerVar;\n  undefined4 *paramPointer;\n  ulong bytesRead;\n  size_t readSize;\n  undefined4 *paramArray;\n  __mode_t fileMode;\n  ulong fileSize;\n  \n  paramPointer = paramArray;\n  for (loopCounter = 0x24; loopCounter != 0; loopCounter = loopCounter + -1) {\n    *paramPointer = 0;\n    paramPointer = paramPointer + 1;\n  }\n  pointerArray = (long **)unaffPtr[0x1d];\n  if ((long **)unaffPtr[0x1d] == (long **)0x0) {\n    pointerArray = unaffPtr;\n  }\n  iVar2 = (*(code *)pointerArray[1][0x3d])();\n  if (iVar2 != 0) {\n    pointerVar = *unaffPtr;\n    translatedString = dcgettext(0,\"internal stat error on %s\",5);\n    iVar2 = print_error_and_exit_00107690(translatedString,pointerVar);\n    translatedString = DAT_0010d638;\n    if (iVar2 == 3) {\n      for (; *pointerVar != 0; pointerVar = (long *)(*pointerVar + 0xf0)) {\n      }\n    }\n    else {\n      for (; (undefined8 *)*pointerVar != (undefined8 *)0x0; pointerVar = (long *)(*pointerVar + 0xf0)) {\n        iVar1 = filename_cmp(*(undefined8 *)*pointerVar,translatedString);\n        if (iVar1 == 0) {\n          if (iVar2 != 2) {\n            return pointerVar;\n          }\n          return (long *)(*pointerVar + 0xf0);\n        }\n      }\n    }\n    return pointerVar;\n  }\n  bfd_seek();\n  DAT_0010d5d8 = (FILE *)0x0;\n  if (fileSize == 0) {\nLAB_00102ca2:\n    DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*unaffPtr);\n  }\n  else {\n    bytesRead = 0;\n    bufferPtr = (void *)xmalloc(0x2000);\n    do {\n      readSize = fileSize - bytesRead;\n      if (0x2000 < readSize) {\n        readSize = 0x2000;\n      }\n      numRead = bfd_bread(bufferPtr,readSize);\n      if (readSize != numRead) {\nLAB_00102c78:\n        unaffPtr = (long **)*unaffPtr[0x1d];\n        translatedString = dcgettext(0,\"%s is not a valid archive\",5);\n        print_error_and_exit_00107690(translatedString,unaffPtr);\n        goto LAB_00102ca2;\n      }\n      if (DAT_0010d5d8 == (FILE *)0x0) {\n        DAT_0010d5d8 = (FILE *)extract_archive_member_00105a20(*unaffPtr);\n      }\n      readSize = fwrite(bufferPtr,1,numRead,DAT_0010d5d8);\n      if (readSize != numRead) {\n        errnoPtr = __errno_location();\n        errorString = strerror(*errnoPtr);\n        print_error_and_exit_00107690(\"%s: %s\",DAT_0010d618,errorString);\n        goto LAB_00102c78;\n      }\n      bytesRead = bytesRead + numRead;\n    } while (bytesRead < fileSize);\n    free(bufferPtr);\n  }\n  fclose(DAT_0010d5d8);\n  errorString = DAT_0010d618;\n  DAT_0010d5d8 = (FILE *)0x0;\n  chmod(DAT_0010d618,fileMode);\n  if (_DAT_0010d600 != 0) {\n    set_file_modification_time_00107c80(errorString,paramArray);\n  }\n  DAT_0010d618 = (char *)0x0;\n  return (long *)0x0;\n}\n\n",
            "called": [
                "bfd_seek",
                "xmalloc",
                "strerror",
                "FUN_00105a20",
                "bfd_bread",
                "chmod",
                "FUN_00107690",
                "free",
                "FUN_00107c80",
                "fclose",
                "fwrite",
                "dcgettext",
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c25",
            "calling": [
                "FUN_00107740"
            ],
            "imported": false,
            "current_name": "extract_and_modify_archive_member_00102c25"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "bfd_bwrite": {
            "renaming": {},
            "code": "\nvoid bfd_bwrite(void)\n\n{\n  bfd_bwrite();\n  return;\n}\n\n",
            "called": [
                "bfd_bwrite"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "bfd_bwrite"
        },
        "FUN_00102bb0": {
            "renaming": {
                "FUN_00102bb0": "copy_string_with_limit_00102bb0",
                "in_RAX": "inputString",
                "sVar2": "inputLength",
                "puVar3": "outputString",
                "uVar4": "limit",
                "unaff_RBX": "inputPtr",
                "unaff_RBP": "basePtr",
                "puVar5": "outputPtr",
                "bVar6": "increment",
                "auVar7": "result"
            },
            "code": "\nundefined  [16] copyStringWithLimit_00102bb0(void)\n\n{\n  long lVar1;\n  char *inputString;\n  size_t inputLength;\n  undefined *outputString;\n  ulong limit;\n  undefined *inputPtr;\n  long basePtr;\n  undefined *outputPtr;\n  byte increment;\n  undefined result [16];\n  undefined8 unaff_retaddr;\n  \n  increment = 0;\n  inputLength = strlen(inputString);\n  limit = (ulong)*(byte *)(*(long *)(basePtr + 8) + 0x1e);\n  outputString = inputPtr;\n  if (limit < inputLength) {\n    outputString = (undefined *)xmalloc(limit + 1);\n    lVar1 = *(long *)(basePtr + 8);\n    outputPtr = outputString;\n    for (limit = (ulong)*(byte *)(lVar1 + 0x1e); limit != 0; limit = limit - 1) {\n      *outputPtr = *inputPtr;\n      inputPtr = inputPtr + (ulong)increment * -2 + 1;\n      outputPtr = outputPtr + (ulong)increment * -2 + 1;\n    }\n    outputString[*(byte *)(lVar1 + 0x1e)] = 0;\n  }\n  result._8_8_ = unaff_retaddr;\n  result._0_8_ = outputString;\n  return result;\n}\n\n",
            "called": [
                "xmalloc",
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102bb0",
            "calling": [
                "FUN_00105830"
            ],
            "imported": false,
            "current_name": "copy_string_with_limit_00102bb0"
        },
        "utimensat": {
            "renaming": {},
            "code": "\n\n\nint utimensat(int __fd,char *__path,timespec *__times,int __flags)\n\n{\n  int iVar1;\n  \n  iVar1 = utimensat(__fd,__path,__times,__flags);\n  return iVar1;\n}\n\n",
            "called": [
                "utimensat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00107c80"
            ],
            "imported": false,
            "current_name": "utimensat"
        },
        "getc": {
            "renaming": {},
            "code": "\n\n\nint getc(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = getc(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "getc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102560",
            "calling": [
                "FUN_00103e95"
            ],
            "imported": false,
            "current_name": "getc"
        },
        "dup": {
            "renaming": {},
            "code": "\n\n\nint dup(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = dup(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "dup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_00103e95",
                "FUN_00102d2f"
            ],
            "imported": false,
            "current_name": "dup"
        },
        "FUN_00102f08": {
            "renaming": {
                "FUN_00102f08": "print_and_assign_value_00102f08",
                "unaff_RBX": "input",
                "unaff_R12": "output"
            },
            "code": "\nundefined8 printAndAssignValue_00102f08(void)\n\n{\n  undefined8 *input;\n  undefined8 *output;\n  \n  printf(\"a - %s\\n\",*input);\n  input[0x1e] = *output;\n  *output = input;\n  return 1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f08",
            "calling": [
                "FUN_00105af0"
            ],
            "imported": false,
            "current_name": "print_and_assign_value_00102f08"
        },
        "FUN_00105570": {
            "renaming": {
                "FUN_00105570": "process_files_00105570",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "ppcVar1": "fileList",
                "uVar2": "unused",
                "bVar3": "processResult",
                "iVar4": "comparisonResult",
                "sVar5": "filenameLength",
                "piVar6": "errno",
                "pcVar7": "sourceFile",
                "pcVar8": "basename1",
                "uVar9": "substringResult",
                "pcVar10": "currentFile",
                "__s": "basename2",
                "lVar11": "currentPointer",
                "lVar12": "nextPointer",
                "uVar13": "returnValue",
                "uVar14": "lengthLimit",
                "ppcVar15": "currentNode",
                "ppcVar16": "targetNode",
                "uVar17": "mode",
                "ppcVar18": "previousNode",
                "bVar19": "flag",
                "bVar20": "unused",
                "local_15a": "archiveResult",
                "auStack_158": "buffer",
                "lStack_100": "lastModifiedTime",
                "sStack_c8": "fileStat"
            },
            "code": "\n\n\nundefined8 processFiles_00105570(long arg1,char **arg2,char arg3)\n\n{\n  char **fileList;\n  undefined unused;\n  byte processResult;\n  int comparisonResult;\n  size_t filenameLength;\n  int *errno;\n  char *sourceFile;\n  char *basename1;\n  undefined8 substringResult;\n  char *currentFile;\n  char *basename2;\n  long currentPointer;\n  long nextPointer;\n  undefined8 returnValue;\n  ulong lengthLimit;\n  char **currentNode;\n  char **targetNode;\n  uint mode;\n  char **previousNode;\n  bool flag;\n  byte unused;\n  byte archiveResult;\n  undefined buffer [88];\n  long lastModifiedTime;\n  stat fileStat;\n  \n  unused = 0;\n  fileList = (char **)(arg1 + 0xf0);\n  archiveResult = 0;\n  if (arg2 == (char **)0x0) {\n    returnValue = initialize_data_00102943();\n    return returnValue;\n  }\n  do {\n    currentFile = *arg2;\njoined_r0x001055aa:\n    if (currentFile == (char *)0x0) {\n      if (archiveResult != 0) {\n        returnValue = extract_archive_contents_001058b0(arg1);\n        return returnValue;\n      }\n      DAT_0010d618 = 0;\n      return 0;\n    }\n    currentNode = *(char ***)(arg1 + 0xf0);\n    targetNode = fileList;\n    if (arg3 != '\\0') {\nLAB_0010564c:\n      mode = DAT_0010d640;\n      if (DAT_0010d640 != 0) goto LAB_001028f5;\n      nextPointer = *(long *)(arg1 + 0xf0);\n      if (*(long *)(arg1 + 0xf0) == 0) goto LAB_0010571f;\nLAB_00105670:\n      do {\n        currentPointer = nextPointer;\n        nextPointer = *(long *)(currentPointer + 0xf0);\n      } while (nextPointer != 0);\n      targetNode = (char **)(currentPointer + 0xf0);\n      currentFile = *arg2;\n      do {\n        if (DAT_0010d620 != 0) {\n          returnValue = extract_substring_00105830(currentFile,arg1);\n          comparisonResult = filename_cmp(returnValue,\"__.LIBDEP\");\n          if (comparisonResult == 0) {\n            processResult = process_archived_files_00105ae0(targetNode,DAT_0010d620,DAT_0010d60c != 0,DAT_0010d5f8);\n            archiveResult = processResult | archiveResult;\n            goto LAB_0010577e;\n          }\n          currentFile = *arg2;\n        }\n        unused = DAT_0010d5f8;\n        flag = DAT_0010d60c != 0;\n        nextPointer = bfd_openr(currentFile,DAT_0010d5f0);\n        if (nextPointer != 0) {\n          arg2 = arg2 + 1;\n          processResult = process_archived_files_00105af0(targetNode,nextPointer,(uint)flag,unused);\n          archiveResult = archiveResult | processResult;\n          currentFile = *arg2;\n          goto joined_r0x001055aa;\n        }\n        handle_error_00107c10(currentFile,0);\n        mode = (uint)flag;\nLAB_001028f5:\n        returnValue = DAT_0010d638;\n        if (mode == 3) {\n          nextPointer = *(long *)(arg1 + 0xf0);\n          if (*(long *)(arg1 + 0xf0) != 0) goto LAB_00105670;\n        }\n        else {\n          for (; (undefined8 *)*targetNode != (undefined8 *)0x0;\n              targetNode = (char **)(*targetNode + 0xf0)) {\n            comparisonResult = filename_cmp(*(undefined8 *)*targetNode,returnValue);\n            if (comparisonResult == 0) {\n              if (mode == 2) {\n                targetNode = (char **)(*targetNode + 0xf0);\n              }\n              break;\n            }\n          }\n        }\nLAB_0010571f:\n        currentFile = *arg2;\n      } while( true );\n    }\n    previousNode = fileList;\n    if (currentNode == (char **)0x0) {\n      mode = DAT_0010d640;\n      if (DAT_0010d640 == 0) goto LAB_0010571f;\n      goto LAB_001028f5;\n    }\nLAB_001055d8:\n    if (DAT_0010d5f9 == '\\0') {\n      currentFile = (char *)lbasename(*currentNode);\n      basename1 = currentFile;\n      if (DAT_0010d5fa != '\\0') {\n        filenameLength = strlen(currentFile);\n        lengthLimit = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        if (lengthLimit < filenameLength) {\n          basename1 = (char *)xmalloc(lengthLimit + 1);\n          nextPointer = *(long *)(arg1 + 8);\n          sourceFile = basename1;\n          for (lengthLimit = (ulong)*(byte *)(nextPointer + 0x1e); lengthLimit != 0; lengthLimit = lengthLimit - 1) {\n            *sourceFile = *currentFile;\n            currentFile = currentFile + (ulong)unused * -2 + 1;\n            sourceFile = sourceFile + (ulong)unused * -2 + 1;\n          }\n          basename1[*(byte *)(nextPointer + 0x1e)] = '\\0';\n        }\n        sourceFile = *arg2;\n        currentFile = basename1;\n        if (DAT_0010d5f9 == '\\0') goto LAB_00105611;\n        goto LAB_00102980;\n      }\n      sourceFile = *arg2;\n      if (DAT_0010d5f9 != '\\0') goto LAB_00102980;\nLAB_00105611:\n      basename2 = (char *)lbasename(sourceFile);\n      if (DAT_0010d5fa != '\\0') {\n        filenameLength = strlen(basename2);\n        lengthLimit = (ulong)*(byte *)(*(long *)(arg1 + 8) + 0x1e);\n        sourceFile = basename2;\n        currentFile = basename1;\n        if (lengthLimit < filenameLength) {\n          sourceFile = (char *)xmalloc(lengthLimit + 1);\n          nextPointer = *(long *)(arg1 + 8);\n          basename1 = sourceFile;\n          for (lengthLimit = (ulong)*(byte *)(nextPointer + 0x1e); lengthLimit != 0; lengthLimit = lengthLimit - 1) {\n            *basename1 = *basename2;\n            basename2 = basename2 + (ulong)unused * -2 + 1;\n            basename1 = basename1 + (ulong)unused * -2 + 1;\n          }\n          sourceFile[*(byte *)(nextPointer + 0x1e)] = '\\0';\n        }\n        goto LAB_00102980;\n      }\n      comparisonResult = filename_cmp(basename2,basename1);\n      if (comparisonResult == 0) goto LAB_00102993;\nLAB_00105639:\n      previousNode = currentNode + 0x1e;\n      currentNode = (char **)currentNode[0x1e];\n      if (currentNode == (char **)0x0) goto LAB_0010564c;\n      goto LAB_001055d8;\n    }\n    sourceFile = *arg2;\n    currentFile = *currentNode;\nLAB_00102980:\n    comparisonResult = filename_cmp(sourceFile,currentFile);\n    if (comparisonResult != 0) goto LAB_00105639;\nLAB_00102993:\n    if (currentNode[0x1c] == (char *)0x0) goto LAB_00105639;\n    if (_DAT_0010d644 != 0) {\n      comparisonResult = stat(*arg2,&fileStat);\n      if (comparisonResult != 0) {\n        errno = __errno_location();\n        if (*errno != 2) {\n          handle_error_00107c10(*arg2);\nLAB_00102b7e:\n          currentFile = *currentNode;\n          returnValue = dcgettext(0,\"internal stat error on %s\",5);\n          print_error_and_exit_00107690(returnValue,currentFile);\n          free(arg2);\n          return 0;\n        }\n        goto LAB_0010577e;\n      }\n      targetNode = (char **)currentNode[0x1d];\n      if ((char **)currentNode[0x1d] == (char **)0x0) {\n        targetNode = currentNode;\n      }\n      comparisonResult = (**(code **)(targetNode[1] + 0x1e8))(currentNode,buffer);\n      if (comparisonResult != 0) goto LAB_00102b7e;\n      if (fileStat.st_mtim.tv_sec <= lastModifiedTime) goto LAB_0010577e;\n    }\n    returnValue = find_file_location_00105870(fileList,2,*currentNode);\n    if (DAT_0010d620 == 0) {\nLAB_00102ae2:\n      currentFile = *arg2;\n      flag = DAT_0010d60c != 0;\n      nextPointer = bfd_openr(currentFile,DAT_0010d5f0);\n      if (nextPointer == 0) {\n        handle_error_00107c10(currentFile,0);\n        goto LAB_00102b3e;\n      }\n      processResult = update_param_00103172(returnValue,nextPointer,flag);\n    }\n    else {\n      substringResult = extract_substring_00105830(*arg2,arg1);\n      comparisonResult = filename_cmp(substringResult,\"__.LIBDEP\");\n      if (comparisonResult != 0) goto LAB_00102ae2;\nLAB_00102b3e:\n      processResult = update_param_00103172(returnValue,DAT_0010d620,DAT_0010d60c != 0);\n    }\n    if (processResult != 0) {\n      *previousNode = *(char **)(*previousNode + 0xf0);\n      archiveResult = processResult;\n    }\nLAB_0010577e:\n    arg2 = arg2 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00102943"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105570",
            "calling": [
                "FUN_00105db0"
            ],
            "imported": false,
            "current_name": "process_files_00105570"
        }
    },
    "used_tokens": 89945,
    "layers": [
        [
            "FUN_00102cd9",
            "FUN_001079c0",
            "FUN_00105a68",
            "FUN_001032a8",
            "FUN_00102f96",
            "FUN_00105bb0",
            "FUN_00107640",
            "FUN_0010315d",
            "FUN_00103172",
            "FUN_00105870",
            "FUN_001030ed",
            "FUN_00103ba8",
            "FUN_001078c0",
            "FUN_001075e0",
            "FUN_001031a5",
            "FUN_00102bf5",
            "FUN_00102020",
            "FUN_00102943",
            "FUN_00105a20",
            "FUN_00102f55",
            "FUN_001057a0",
            "FUN_00102d8c",
            "FUN_00103bd1",
            "FUN_00107cc0",
            "FUN_0010266f",
            "FUN_00105830",
            "FUN_00107730",
            "FUN_00107c20",
            "FUN_0010312d",
            "FUN_0010336b",
            "FUN_00102e57",
            "FUN_0010300e",
            "FUN_00102ba1",
            "FUN_001033b0",
            "FUN_0010284b",
            "FUN_00102bb0",
            "FUN_00102f08"
        ],
        [
            "FUN_0010285f",
            "FUN_0010342d",
            "FUN_0010394a",
            "FUN_00107920",
            "FUN_00107890",
            "FUN_00103ddc",
            "FUN_00105480",
            "FUN_00103df9",
            "FUN_00107c10",
            "FUN_00107690",
            "FUN_001031cf",
            "FUN_00105c00",
            "FUN_00103c60"
        ],
        [
            "FUN_00102e6f",
            "FUN_001033d6",
            "FUN_00105bc0",
            "FUN_00102f1e",
            "FUN_00102fd7",
            "FUN_00103a78",
            "FUN_00107c80",
            "FUN_00102710",
            "FUN_001052a0",
            "FUN_001025a0"
        ],
        [
            "FUN_001058b0",
            "FUN_00105300",
            "FUN_00107740",
            "FUN_00102d2f",
            "FUN_00102c25"
        ],
        [
            "FUN_00107650",
            "FUN_00103e95"
        ],
        [
            "FUN_00105af0"
        ],
        [
            "FUN_00105ae0"
        ],
        [
            "FUN_001028ed",
            "FUN_00105570"
        ],
        [
            "FUN_00105db0"
        ]
    ],
    "locked_functions": []
}