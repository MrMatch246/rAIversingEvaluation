{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_001025c0"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001027b0",
                "FUN_001025c0",
                "FUN_001023a0"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_001063e0 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_001061c8);\n  FUNC_001026f0();\n  DAT_001063e0 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_001026f0",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102760",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "FUN_00102620": {
            "renaming": {
                "FUN_00102620": "process_data_00102620",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "paramA",
                "param_10": "paramB",
                "param_11": "paramC",
                "param_12": "paramD",
                "param_13": "paramE",
                "param_14": "paramF",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "constant",
                "local_d0": "ptrStack",
                "local_c8": "localBuffer",
                "local_b8": "localArray",
                "local_b0": "paramB_copy",
                "local_a8": "paramC_copy",
                "local_a0": "paramD_copy",
                "local_98": "paramE_copy",
                "local_90": "paramF_copy",
                "local_88": "input1_copy",
                "local_78": "input2_copy",
                "local_68": "input3_copy",
                "local_58": "input4_copy",
                "local_48": "input5_copy",
                "local_38": "input6_copy",
                "local_28": "input7_copy",
                "local_18": "input8_copy"
            },
            "code": "\nvoid processData_00102620(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 paramA,undefined8 paramB,undefined8 paramC,undefined8 paramD,\n                 undefined8 paramE,undefined8 paramF)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 constant;\n  undefined *ptrStack;\n  undefined *localBuffer;\n  undefined localArray [8];\n  undefined8 paramB_copy;\n  undefined8 paramC_copy;\n  undefined8 paramD_copy;\n  undefined8 paramE_copy;\n  undefined8 paramF_copy;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 input3_copy;\n  undefined4 input4_copy;\n  undefined4 input5_copy;\n  undefined4 input6_copy;\n  undefined4 input7_copy;\n  undefined4 input8_copy;\n  \n  if (flag != '\\0') {\n    input1_copy = input1;\n    input2_copy = input2;\n    input3_copy = input3;\n    input4_copy = input4;\n    input5_copy = input5;\n    input6_copy = input6;\n    input7_copy = input7;\n    input8_copy = input8;\n  }\n  ptrStack = &stack0x00000008;\n  size = 8;\n  localBuffer = localArray;\n  constant = 0x30;\n  paramB_copy = paramB;\n  paramC_copy = paramC;\n  paramD_copy = paramD;\n  paramE_copy = paramE;\n  paramF_copy = paramF;\n  FUN_001025c0(paramA,&size);\n  return;\n}\n\n",
            "called": [
                "FUN_001025c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102620",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "process_data_00102620"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "fgets": {
            "renaming": {},
            "code": "\n\n\nchar * fgets(char *__s,int __n,FILE *__stream)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = fgets(__s,__n,__stream);\n  return pcVar1;\n}\n\n",
            "called": [
                "fgets"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fgets"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00102720();\n  return;\n}\n\n",
            "called": [
                "FUN_00102720"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027a0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001025c0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "FUN_001027b0": {
            "renaming": {
                "FUN_001027b0": "process_input_files_001027b0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "bytePtr",
                "puVar2": "uintPtr",
                "bVar3": "byteVar",
                "uVar4": "ushortVar",
                "lVar5": "longVar",
                "bVar6": "boolVar1",
                "bVar7": "boolVar2",
                "bVar8": "boolVar3",
                "pvVar9": "voidPtr",
                "bVar10": "byteVar2",
                "cVar11": "charVar",
                "iVar12": "intVar1",
                "uVar13": "uintVar1",
                "iVar14": "intVar2",
                "uVar15": "uintVar2",
                "__stream": "inputFile",
                "__s": "inputString",
                "__ptr": "inputStringPtr",
                "puVar18": "undefinedPtr",
                "pFVar19": "currentFile",
                "lVar20": "longVar2",
                "psVar21": "statPtr",
                "uVar22": "returnVal",
                "piVar23": "intPtr",
                "ppuVar24": "undefinedPtrPtr",
                "__s_00": "inputString2",
                "uVar25": "ulongVar",
                "plVar26": "longPtr",
                "pFVar27": "currentFile2",
                "pcVar28": "stringVar",
                "pbVar29": "bytePtr2",
                "unaff_RBP": "charPtr1",
                "lVar30": "longVar3",
                "pbVar31": "bytePtr3",
                "pcVar32": "stringVar2",
                "ppuVar33": "undefinedPtrPtr2",
                "iVar34": "intVar3",
                "unaff_R12": "undefinedPtr2",
                "psVar35": "statPtr2",
                "iVar36": "intVar4",
                "uVar37": "uintVar3",
                "local_148": "undefinedPtrPtr3",
                "local_140": "undefinedPtrPtr4",
                "local_120": "size_tVar",
                "local_118": "longVar4",
                "local_d0": "longPtr2",
                "local_c8": "statStruct"
            },
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\n\nundefined8 processInputFiles_001027b0(uint argc,FILE *argv)\n\n{\n  byte *bytePtr;\n  uint *uintPtr;\n  byte byteVar;\n  ushort ushortVar;\n  long longVar;\n  bool boolVar1;\n  bool boolVar2;\n  bool boolVar3;\n  void *voidPtr;\n  byte byteVar2;\n  char charVar;\n  int intVar1;\n  uint uintVar1;\n  int intVar2;\n  undefined4 uintVar2;\n  FILE *inputFile;\n  byte *inputString;\n  undefined **ppuVar16;\n  size_t sVar17;\n  byte *inputStringPtr;\n  undefined *undefinedPtr;\n  FILE *currentFile;\n  long longVar2;\n  stat *statPtr;\n  undefined8 returnVal;\n  int *intPtr;\n  undefined **undefinedPtrPtr;\n  stat *inputString2;\n  ulong ulongVar;\n  long *longPtr;\n  FILE *currentFile2;\n  char *stringVar;\n  byte *bytePtr2;\n  char *charPtr1;\n  long longVar3;\n  byte *bytePtr3;\n  char *stringVar2;\n  undefined **undefinedPtrPtr2;\n  int intVar3;\n  undefined **undefinedPtr2;\n  stat *statPtr2;\n  int intVar4;\n  uint uintVar3;\n  undefined **undefinedPtrPtr3;\n  undefined **undefinedPtrPtr4;\n  size_t size_tVar;\n  long longVar4;\n  long *longPtr2;\n  stat statStruct;\n  \n  currentFile2 = (FILE *)(ulong)argc;\n  setlocale(5,\"\");\n  stringVar = \"binutils\";\n  setlocale(0,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_00106438 = *(long **)argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_00106438);\n  currentFile = argv;\n  inputFile = argv;\n  if (1 < (int)argc) {\n    intVar2 = 2000;\n    undefinedPtr2 = (undefined **)0x1;\n    undefinedPtrPtr4 = (undefined **)0x0;\n    do {\n      intVar3 = (int)undefinedPtr2;\n      charPtr1 = (char *)(long)intVar3;\n      undefinedPtrPtr3 = (undefined **)((long)charPtr1 * 8);\n      intVar4 = (int)currentFile2;\n      if (**(char **)(&currentFile->_flags + (long)charPtr1 * 2) == '@') {\n        intVar2 = intVar2 + -1;\n        if (intVar2 == 0) {\n          longPtr = *(long **)currentFile;\n          stringVar = \"%s: error: too many @-files encountered\\n\";\n          goto LAB_00103239;\n        }\n        stringVar = *(char **)(&currentFile->_flags + (long)charPtr1 * 2) + 1;\n        intVar1 = stat(stringVar,&statStruct);\n        if (intVar1 < 0) goto LAB_00102c30;\n        if ((statStruct.st_mode & 0xf000) == 0x4000) {\n          do {\n            longPtr = *(long **)currentFile;\n            stringVar = \"%s: error: @-file refers to a directory\\n\";\nLAB_00103239:\n            fprintf(_stderr,stringVar,longPtr);\n            xexit(1);\n          } while( true );\n        }\n        inputFile = fopen(stringVar,\"r\");\n        if (inputFile == (FILE *)0x0) goto LAB_00102c30;\n        intVar1 = fseek(inputFile,0,2);\n        if (((intVar1 == -1) ||\n            (stringVar = (char *)ftell(inputFile),\n            (undefined **)stringVar == (undefined **)0xffffffffffffffff)) ||\n           (intVar1 = fseek(inputFile,0,0), intVar1 == -1)) {\nLAB_00102c90:\n          fclose(inputFile);\n          if (intVar3 + 1 < intVar4) goto LAB_00102c3a;\n          break;\n        }\n        inputString = (byte *)xmalloc((long)stringVar + 1);\n        ppuVar16 = (undefined **)fread(inputString,1,(size_t)stringVar,inputFile);\n        if (((undefined **)stringVar != ppuVar16) && (intVar1 = ferror(inputFile), intVar1 != 0)) {\n          free(inputString);\n          goto LAB_00102c90;\n        }\n        inputString[(long)ppuVar16] = 0;\n        byteVar2 = *inputString;\n        bytePtr2 = inputString;\n        if (byteVar2 != 0) {\nLAB_00102980:\n          if (((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) goto LAB_00102970;\n          sVar17 = strlen((char *)inputString);\n          inputStringPtr = (byte *)xmalloc(sVar17 + 1);\n          ppuVar16 = (undefined **)0x0;\n          intVar1 = 0;\n          boolVar1 = false;\n          boolVar2 = false;\n          boolVar3 = false;\n          longVar4 = 0;\n          bytePtr2 = inputString;\n          do {\n            while (((&_sch_istable)[(ulong)*bytePtr2 * 2] & 0x40) != 0) {\n              bytePtr2 = bytePtr2 + 1;\n            }\n            if ((intVar1 == 0) || (undefinedPtrPtr = ppuVar16 + longVar4, intVar1 + -1 <= (int)longVar4)) {\n              if (ppuVar16 == (undefined **)0x0) {\n                ppuVar16 = (undefined **)xmalloc(0x40);\n                intVar1 = 8;\n                undefinedPtrPtr = ppuVar16 + longVar4;\n                *undefinedPtrPtr = (undefined *)0x0;\n              }\n              else {\n                intVar1 = intVar1 * 2;\n                ppuVar16 = (undefined **)xrealloc(ppuVar16,(long)intVar1 << 3);\n                undefinedPtrPtr = ppuVar16 + longVar4;\n                *undefinedPtrPtr = (undefined *)0x0;\n              }\n            }\n            byteVar2 = *bytePtr2;\n            bytePtr3 = inputStringPtr;\n            while (byteVar2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar2 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar3 | boolVar2 | boolVar1))) {\n                  boolVar3 = false;\n                  boolVar1 = false;\n                  boolVar2 = false;\n                  goto LAB_00102a9e;\n                }\n                if (!boolVar3) break;\n                bytePtr2 = bytePtr2 + 1;\n                *bytePtr3 = byteVar2;\n                bytePtr3 = bytePtr3 + 1;\n                boolVar3 = false;\n                byteVar2 = *bytePtr2;\n                if (byteVar2 == 0) goto LAB_00102a9e;\n              }\n              if (byteVar2 == 0x5c) {\n                boolVar3 = true;\n              }\n              else if (boolVar2) {\n                if (byteVar2 == 0x27) {\n                  boolVar2 = false;\n                }\n                else {\nLAB_00102c0d:\n                  *bytePtr3 = byteVar2;\n                  bytePtr3 = bytePtr3 + 1;\n                }\n              }\n              else if (boolVar1) {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = false;\n              }\n              else if (byteVar2 == 0x27) {\n                boolVar2 = true;\n              }\n              else {\n                if (byteVar2 != 0x22) goto LAB_00102c0d;\n                boolVar1 = true;\n              }\n              bytePtr = bytePtr2 + 1;\n              bytePtr2 = bytePtr2 + 1;\n              byteVar2 = *bytePtr;\n            }\nLAB_00102a9e:\n            *bytePtr3 = 0;\n            undefinedPtr = (undefined *)xstrdup(inputStringPtr);\n            *undefinedPtrPtr = undefinedPtr;\n            ppuVar16[longVar4 + 1] = (undefined *)0x0;\n            byteVar2 = *bytePtr2;\n            byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n            while ((byteVar & 0x40) != 0) {\n              byteVar2 = bytePtr2[1];\n              bytePtr2 = bytePtr2 + 1;\n              byteVar = (&_sch_istable)[(ulong)byteVar2 * 2];\n            }\n            longVar4 = longVar4 + 1;\n          } while (byteVar2 != 0);\n          free(inputStringPtr);\n          currentFile2 = currentFile;\n          if (argv == currentFile) goto LAB_001030d9;\n          goto LAB_00102b38;\n        }\nLAB_001030bb:\n        ppuVar16 = (undefined **)xmalloc(8);\n        *ppuVar16 = (undefined *)0x0;\n        if (argv == currentFile) {\nLAB_001030d9:\n          if (*(long **)currentFile == (long *)0x0) {\n            intVar1 = 0;\n          }\n          else {\n            longVar2 = 1;\n            do {\n              intVar1 = (int)longVar2;\n              longVar3 = longVar2 * 2;\n              longVar2 = longVar2 + 1;\n            } while (*(long *)(&currentFile->_flags + longVar3) != 0);\n          }\n          currentFile2 = (FILE *)xmalloc((long)(intVar1 + 1) << 3);\n          longPtr = *(long **)currentFile;\n          longVar2 = 0;\n          while (longPtr != (long *)0x0) {\n            returnVal = xstrdup();\n            *(undefined8 *)((long)&currentFile2->_flags + longVar2) = returnVal;\n            longPtr = *(long **)(currentFile->_shortbuf + longVar2 + -0x7b);\n            longVar2 = longVar2 + 8;\n          }\n          *(undefined8 *)((long)&currentFile2->_flags + longVar2) = 0;\nLAB_00102b38:\n          currentFile = currentFile2;\n          if (*ppuVar16 == (undefined *)0x0) goto LAB_0010318e;\n          stringVar = (char *)0x0;\n          do {\n            stringVar = (char *)((long)stringVar + 1);\n          } while (ppuVar16[(long)stringVar] != (undefined *)0x0);\n          size_tVar = (long)stringVar * 8;\n        }\n        else {\nLAB_0010318e:\n          stringVar = (char *)0x0;\n          size_tVar = 0;\n        }\n        free(*(void **)(&currentFile->_flags + (long)charPtr1 * 2));\n        currentFile = (FILE *)xrealloc(currentFile,((long)stringVar + (long)intVar4 + 1) * 8);\n        uintVar3 = intVar4 + -1 + (int)stringVar;\n        currentFile2 = (FILE *)(ulong)uintVar3;\n        memmove(&currentFile->_flags + (long)(FILE **)((long)charPtr1 + (long)stringVar) * 2,\n                &currentFile->_IO_read_ptr + (long)charPtr1,(long)(intVar4 - intVar3) << 3);\n        memcpy(&currentFile->_flags + (long)charPtr1 * 2,ppuVar16,size_tVar);\n        free(ppuVar16);\n        free(inputString);\n        fclose(inputFile);\n        uintVar1 = (int)undefinedPtrPtr4 + 1;\n        charPtr1 = (char *)(FILE **)((long)charPtr1 + (long)stringVar);\n        undefinedPtr2 = undefinedPtrPtr3;\n        undefinedPtrPtr3 = ppuVar16;\n        if ((int)uintVar3 <= (int)uintVar1) break;\n      }\n      else {\nLAB_00102c30:\n        if (intVar4 <= intVar3 + 1) break;\nLAB_00102c3a:\n        uintVar1 = intVar3 + 1;\n        undefinedPtrPtr4 = undefinedPtr2;\n      }\n      undefinedPtr2 = (undefined **)(ulong)uintVar1;\n    } while( true );\n  }\n  intVar2 = bfd_init();\n  if (intVar2 != 0x118) {\n    returnVal = dcgettext(0,\"fatal error: libbfd ABI mismatch\",5);\n    FUN_00103bd0(returnVal);\n    goto switchD_00102d16_caseD_43;\n  }\n  stringVar = \"x86_64-pc-linux-gnu\";\n  charVar = bfd_set_default_target();\n  if (charVar == '\\0') {\n    uintVar2 = bfd_get_error();\n    charPtr1 = (char *)bfd_errmsg(uintVar2);\n    returnVal = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n    FUN_00103bd0(returnVal,\"x86_64-pc-linux-gnu\",charPtr1);\n    goto switchD_00102d16_caseD_61;\n  }\n  undefinedPtr2 = &PTR_s_addresses_001061e0;\n  undefinedPtrPtr4 = (undefined **)0x0;\n  charPtr1 = \"ab:Ce:rRsfHhij:pVv\";\n  undefinedPtrPtr3 = (undefined **)0x0;\n  stringVar = (char *)(undefined **)0x0;\nswitchD_00102d16_caseD_0:\n  do {\n    uintVar2 = getopt_long(currentFile2,currentFile,charPtr1,undefinedPtr2,0);\n    switch(uintVar2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x41:\n    case 0x42:\n    case 0x44:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x50:\n    case 0x51:\n    case 0x53:\n    case 0x54:\n    case 0x55:\n    case 0x57:\n    case 0x58:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 99:\n    case 100:\n    case 0x67:\n    case 0x6b:\n    case 0x6c:\n    case 0x6d:\n    case 0x6e:\n    case 0x6f:\n    case 0x71:\n    case 0x74:\n    case 0x75:\n      FUN_001023e1(_stderr,1);\n    case 0x6a:\n      undefinedPtrPtr3 = _optarg;\n      break;\n    case 0x43:\nswitchD_00102d16_caseD_43:\n      inputFile = (FILE *)&optarg;\n      DAT_00106434 = '\\x01';\n      if (_optarg != (undefined **)0x0) {\n        intVar2 = cplus_demangle_name_to_style();\n        if (intVar2 == 0) goto LAB_0010339f;\n        cplus_demangle_set_style();\n      }\n      break;\n    case 0x48:\n    case 0x68:\n      FUN_001023e1(_stdout,0);\nLAB_0010339f:\n      stringVar = *(char **)inputFile;\n      stringVar2 = \"unknown demangling style `%s\\'\";\nLAB_001033ae:\n      returnVal = dcgettext(0,stringVar2,5);\n      FUN_00103bd0(returnVal,stringVar);\nswitchD_00102d16_caseD_72:\n      DAT_001061d0 = DAT_001061d0 | 0x40000;\n      break;\n    case 0x52:\n      DAT_001061d0 = DAT_001061d0 & 0xfffbffff;\n      break;\n    case 0x56:\n    case 0x76:\n      printf(\"GNU %s %s\\n\",\"addr2line\",\"(GNU Binutils for Debian) 2.40\");\n      stringVar = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n      printf(stringVar);\n      stringVar = (char *)dcgettext(0,\n                                  \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                  ,5);\n      printf(stringVar);\n                    \n      exit(0);\n    case 0x61:\nswitchD_00102d16_caseD_61:\n      DAT_00106435 = '\\x01';\n      break;\n    case 0x62:\n      undefinedPtrPtr4 = _optarg;\n      break;\n    case 0x65:\n      stringVar = (char *)_optarg;\n      break;\n    case 0x66:\n      DAT_00106432 = '\\x01';\n      break;\n    case 0x69:\n      DAT_00106430 = '\\x01';\n      break;\n    case 0x70:\n      DAT_00106431 = '\\x01';\n      break;\n    case 0x72:\n      goto switchD_00102d16_caseD_72;\n    case 0x73:\n      goto switchD_00102d16_caseD_73;\n    default:\n      DAT_00106428 = (char **)(&currentFile->_flags + (long)_optind * 2);\n      DAT_00106420 = (int)currentFile2 - _optind;\n      if ((undefined **)stringVar == (undefined **)0x0) {\n        stringVar = \"a.out\";\n      }\n      intVar2 = stat(stringVar,&statStruct);\n      if (intVar2 < 0) {\n        intPtr = __errno_location();\n        stringVar2 = \"\\'%s\\': No such file\";\n        if (*intPtr != 2) {\n          stringVar2 = strerror(*intPtr);\n          returnVal = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n          FUN_00102620(returnVal,stringVar,stringVar2);\n          return 1;\n        }\nLAB_001039cd:\n        returnVal = dcgettext(0,stringVar2,5);\n        FUN_00102620(returnVal,stringVar);\n        return 1;\n      }\n      if ((statStruct.st_mode & 0xf000) == 0x4000) {\n        stringVar2 = \"Warning: \\'%s\\' is a directory\";\n        goto LAB_001039cd;\n      }\n      stringVar2 = \"Warning: \\'%s\\' is not an ordinary file\";\n      if ((statStruct.st_mode & 0xf000) != 0x8000) goto LAB_001039cd;\n      stringVar2 = \"Warning: \\'%s\\' has negative size, probably it is too large\";\n      if (statStruct.st_size < 0) goto LAB_001039cd;\n      if (statStruct.st_size == 0) {\n        return 1;\n      }\n      currentFile = (FILE *)bfd_openr(stringVar,undefinedPtrPtr4);\n      if (currentFile == (FILE *)0x0) {\n        FUN_00103c70(stringVar);\n        xexit(1);\n        goto LAB_00103a85;\n      }\n      uintPtr = (uint *)((long)&currentFile->_IO_buf_end + 4);\n      *uintPtr = *uintPtr | 0x8000;\n      charVar = bfd_check_format(currentFile,2);\n      if (charVar != '\\0') {\n        stringVar2 = \"%s: cannot get addresses from archive\";\n        goto LAB_001033ae;\n      }\n      charVar = bfd_check_format_matches(currentFile,1,&longPtr2);\n      if (charVar == '\\0') {\n        FUN_00103c70(*(long **)currentFile);\n        intVar2 = bfd_get_error();\n        if (intVar2 == 0xd) {\n          currentFile = (FILE *)0x1040e1;\n          fflush(_stdout);\n          longPtr = DAT_00106438;\n          stringVar = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n          fprintf(_stderr,stringVar,longPtr);\n          for (longPtr = longPtr2; *longPtr != 0; longPtr = longPtr + 1) {\n            fprintf(_stderr,\" %s\");\n          }\n          free(longPtr2);\n          fputc(10,_stderr);\n        }\n        goto LAB_00103801;\n      }\n      ppuVar16 = undefinedPtrPtr3;\n      if ((undefinedPtrPtr3 != (undefined **)0x0) &&\n         (ppuVar16 = (undefined **)bfd_get_section_by_name(currentFile), ppuVar16 == (undefined **)0x0))\n      {\n        returnVal = dcgettext(0,\"%s: cannot find section %s\",5);\n        FUN_00103bd0(returnVal,stringVar,undefinedPtrPtr3);\n        goto LAB_0010399c;\n      }\n      undefinedPtrPtr3 = ppuVar16;\n      if ((*(byte *)((long)&currentFile->_IO_buf_end + 4) & 0x10) == 0) goto LAB_00102ecd;\n      longVar2 = (**(code **)(currentFile->_IO_read_ptr + 0x1f8))(currentFile);\n      if (longVar2 == 0) {\n        longVar2 = (**(code **)(currentFile->_IO_read_ptr + 0x350))(currentFile);\n        if (-1 < longVar2) {\n          DAT_00106418 = (void *)xmalloc(longVar2);\n          DAT_001063e8 = (**(code **)(currentFile->_IO_read_ptr + 0x358))(currentFile);\n          if (-1 < DAT_001063e8) goto LAB_00102ebf;\n        }\n      }\n      else if (-1 < longVar2) {\n        DAT_00106418 = (void *)xmalloc(longVar2);\n        DAT_001063e8 = (**(code **)(currentFile->_IO_read_ptr + 0x200))(currentFile);\n        if (-1 < DAT_001063e8) {\n          if (DAT_001063e8 == 0) goto LAB_0010380b;\n          goto LAB_00102ebf;\n        }\n      }\n      FUN_00103c70(*(long **)currentFile);\nLAB_00103801:\n      xexit(1);\nLAB_0010380b:\n      longVar2 = (**(code **)(currentFile->_IO_read_ptr + 0x350))(currentFile);\n      if (0 < longVar2) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)xmalloc(longVar2);\n        DAT_001063e8 = (**(code **)(currentFile->_IO_read_ptr + 0x358))(currentFile);\n      }\nLAB_00102ebf:\n      if (DAT_001063e8 < 1) {\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n      }\nLAB_00102ecd:\n      undefinedPtr2 = (undefined **)(ulong)DAT_00106420;\n      inputFile = (FILE *)&DAT_0010400a;\n      if (DAT_00106420 == 0) goto LAB_00103065;\nLAB_00102ee7:\n      if ((int)DAT_00106420 < 1) {\nLAB_0010308a:\n        free(DAT_00106418);\n        DAT_00106418 = (void *)0x0;\n        bfd_close(currentFile);\n        return 0;\n      }\n      DAT_00106420 = DAT_00106420 - 1;\n      statPtr = (stat *)*DAT_00106428;\n      DAT_00106428 = DAT_00106428 + 1;\n      do {\n        byteVar2 = *(byte *)&statPtr->st_dev;\n        ulongVar = (ulong)byteVar2;\n        ushortVar = *(ushort *)(&_sch_istable + ulongVar * 2);\n        inputString2 = statPtr;\n        while ((ushortVar & 0x40) != 0) {\n          byteVar2 = *(byte *)((long)&inputString2->st_dev + 1);\n          ulongVar = (ulong)byteVar2;\n          inputString2 = (stat *)((long)&inputString2->st_dev + 1);\n          ushortVar = *(ushort *)(&_sch_istable + ulongVar * 2);\n        }\n        if ((((ushortVar & 4) == 0) && (byteVar2 != 0)) &&\n           ((statPtr2 = inputString2, 5 < (byte)((&_sch_toupper)[ulongVar] + 0xbf) ||\n            (stringVar = strchr((char *)inputString2,0x2b), stringVar != (char *)0x0)))) {\n          while( true ) {\n            byteVar2 = *(byte *)&statPtr2->st_dev;\n            statPtr = statPtr2;\n            if (((byteVar2 == 0) || ((*(ushort *)(&_sch_istable + (ulong)byteVar2 * 2) & 0x40) != 0)) ||\n               (byteVar2 == 0x2b)) break;\n            statPtr2 = (stat *)((long)&statPtr2->st_dev + 1);\n          }\n          while (((&_sch_istable)[(ulong)*(byte *)&statPtr->st_dev * 2] & 0x40) != 0) {\n            statPtr = (stat *)((long)&statPtr->st_dev + 1);\n          }\n          ulongVar = 0;\n          if (*(byte *)&statPtr->st_dev == 0x2b) {\n            ulongVar = strtoul((char *)((long)&statPtr->st_dev + 1),(char **)0x0,0);\n          }\n          voidPtr = DAT_00106418;\n          longVar2 = DAT_001063e8;\n          *(undefined *)&statPtr2->st_dev = 0;\n          for (longVar3 = 0; longVar3 < longVar2; longVar3 = longVar3 + 1) {\n            longVar = *(long *)((long)voidPtr + longVar3 * 8);\n            intVar2 = strcmp(*(char **)(longVar + 8),(char *)inputString2);\n            if (intVar2 == 0) {\n              undefinedPtr2 = (undefined **)((ulong)undefinedPtr2 & 0xffffffff);\n              DAT_00106410 = (undefined *)\n                             (ulongVar + *(long *)(longVar + 0x10) +\n                             *(long *)(*(long *)(longVar + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n          }\n          undefinedPtr2 = (undefined **)((ulong)undefinedPtr2 & 0xffffffff);\n          for (longVar2 = 0; longVar2 < DAT_001063e8; longVar2 = longVar2 + 1) {\n            stringVar = (char *)bfd_demangle(currentFile,*(undefined8 *)\n                                                    (*(long *)((long)DAT_00106418 + longVar2 * 8) + 8)\n                                           ,DAT_001061d0);\n            if ((stringVar != (char *)0x0) && (intVar2 = strcmp(stringVar,(char *)inputString2), intVar2 == 0))\n            {\n              free(stringVar);\n              longVar2 = *(long *)((long)DAT_00106418 + longVar2 * 8);\n              DAT_00106410 = (undefined *)\n                             (*(long *)(longVar2 + 0x10) + ulongVar +\n                             *(long *)(*(long *)(longVar2 + 0x20) + 0x30));\n              goto LAB_00102f4b;\n            }\n            free(stringVar);\n          }\n          DAT_00106410 = (undefined *)0x0;\n        }\n        else {\n          DAT_00106410 = (undefined *)bfd_scan_vma(statPtr,0,0x10);\n        }\nLAB_00102f4b:\n        if (*(int *)(currentFile->_IO_read_ptr + 8) == 5) {\n          longVar2 = *(long *)(currentFile->_IO_read_ptr + 0x380);\n          ulongVar = 1L << (*(char *)(*(long *)(longVar2 + 0x340) + 10) - 1U & 0x3f);\n          DAT_00106410 = (undefined *)((ulong)DAT_00106410 & ulongVar * 2 - 1);\n          if ((*(byte *)(longVar2 + 0x3f1) & 1) != 0) {\n            DAT_00106410 = (undefined *)(((ulong)DAT_00106410 ^ ulongVar) - ulongVar);\n          }\n        }\n        if (DAT_00106435 != '\\0') {\n          printf(\"0x\");\n          bfd_fprintf_vma(currentFile,_stdout,DAT_00106410);\n          if (DAT_00106431 == '\\0') {\n            putchar(10);\n          }\n          else {\n            printf(\": \");\n          }\n        }\n        charPtr1 = &stdout;\n        DAT_00106408 = '\\0';\n        if (undefinedPtrPtr3 == (undefined **)0x0) {\n          bfd_map_over_sections(currentFile,FUN_00102540,0);\nLAB_00102fcf:\n          if (DAT_00106408 != '\\0') {\n            do {\n              if (DAT_00106432 != '\\0') {\n                ppuVar16 = DAT_00106400;\n                if (DAT_00106400 == (undefined **)0x0) {\nLAB_00103a4a:\n                  undefinedPtrPtr = (undefined **)&DAT_0010400a;\n                }\n                else {\n                  if (*(char *)DAT_00106400 == '\\0') {\n                    ppuVar16 = (undefined **)0x0;\n                    goto LAB_00103a4a;\n                  }\n                  stringVar = (char *)DAT_00106400;\n                  currentFile2 = currentFile;\n                  if (DAT_00106434 == '\\0') {\nLAB_001031f4:\n                    ppuVar16 = (undefined **)0x0;\n                    undefinedPtrPtr = (undefined **)stringVar;\n                    currentFile = currentFile2;\n                  }\n                  else {\nLAB_0010399c:\n                    ppuVar16 = (undefined **)bfd_demangle(currentFile2,stringVar,DAT_001061d0);\n                    undefinedPtrPtr = ppuVar16;\n                    currentFile = currentFile2;\n                    if (ppuVar16 == (undefined **)0x0) goto LAB_001031f4;\n                  }\n                }\n                printf(\"%s\",undefinedPtrPtr);\n                if (DAT_00106431 == '\\0') {\n                  putchar(10);\n                }\n                else {\n                  stringVar = (char *)dcgettext(0,&DAT_001040f1,5);\n                  printf(stringVar);\n                }\n                free(ppuVar16);\n              }\n              currentFile2 = DAT_001063f8;\n              if (DAT_00106433 == '\\0') {\n                if (DAT_001063f8 == (FILE *)0x0) {\n                  currentFile2 = inputFile;\n                }\n              }\n              else if (DAT_001063f8 == (FILE *)0x0) {\n                currentFile2 = (FILE *)&DAT_0010400a;\n              }\n              else {\n                stringVar = strrchr((char *)DAT_001063f8,0x2f);\n                if (stringVar != (char *)0x0) {\n                  currentFile2 = (FILE *)(stringVar + 1);\n                  DAT_001063f8 = currentFile2;\n                }\n              }\n              printf(\"%s:\",currentFile2);\n              currentFile2 = currentFile;\n              if (DAT_001063f4 == 0) {\nLAB_00103a85:\n                puts(\"?\");\n                currentFile = currentFile2;\n              }\n              else if (DAT_001063f0 == 0) {\n                printf(\"%u\\n\");\n              }\n              else {\n                printf(\"%u (discriminator %u)\\n\");\n              }\n              if (DAT_00106430 == '\\0') {\nLAB_0010304c:\n                DAT_00106408 = '\\0';\n                goto LAB_00103053;\n              }\n              DAT_00106408 = (**(code **)(currentFile->_IO_read_ptr + 600))\n                                       (currentFile,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n              ppuVar16 = DAT_00106400;\n              if (DAT_00106408 == '\\0') goto LAB_00103053;\n              while (DAT_00106400 = ppuVar16, DAT_00106431 == '\\0') {\n                if (DAT_00106432 != '\\0') {\n                  undefinedPtrPtr = ppuVar16;\n                  if (ppuVar16 == (undefined **)0x0) {\nLAB_00103b7b:\n                    undefinedPtrPtr2 = (undefined **)&DAT_0010400a;\n                  }\n                  else {\n                    if (*(char *)ppuVar16 == '\\0') {\n                      undefinedPtrPtr = (undefined **)0x0;\n                      goto LAB_00103b7b;\n                    }\n                    if ((DAT_00106434 == '\\0') ||\n                       (undefinedPtrPtr = (undefined **)bfd_demangle(currentFile,ppuVar16,DAT_001061d0),\n                       undefinedPtrPtr2 = undefinedPtrPtr, undefinedPtrPtr == (undefined **)0x0)) {\n                      undefinedPtrPtr = (undefined **)0x0;\n                      undefinedPtrPtr2 = ppuVar16;\n                    }\n                  }\n                  printf(\"%s\",undefinedPtrPtr2);\n                  if (DAT_00106431 == '\\0') {\n                    putchar(10);\n                  }\n                  else {\n                    stringVar = (char *)dcgettext(0,&DAT_001040f1,5);\n                    printf(stringVar);\n                  }\n                  free(undefinedPtrPtr);\n                }\n                currentFile2 = DAT_001063f8;\n                if (DAT_00106433 == '\\0') {\n                  if (DAT_001063f8 == (FILE *)0x0) {\n                    currentFile2 = (FILE *)&DAT_0010400a;\n                  }\n                }\n                else if (DAT_001063f8 == (FILE *)0x0) {\n                  currentFile2 = (FILE *)&DAT_0010400a;\n                }\n                else {\n                  stringVar = strrchr((char *)DAT_001063f8,0x2f);\n                  if (stringVar != (char *)0x0) {\n                    currentFile2 = (FILE *)(stringVar + 1);\n                    DAT_001063f8 = currentFile2;\n                  }\n                }\n                printf(\"%s:\",currentFile2);\n                if (DAT_001063f4 == 0) {\n                  puts(\"?\");\n                }\n                else if (DAT_001063f0 == 0) {\n                  printf(\"%u\\n\");\n                }\n                else {\n                  printf(\"%u (discriminator %u)\\n\");\n                }\n                if (DAT_00106430 == '\\0') goto LAB_0010304c;\n                DAT_00106408 = (**(code **)(currentFile->_IO_read_ptr + 600))\n                                         (currentFile,&DAT_001063f8,&DAT_00106400,&DAT_001063f4);\n                ppuVar16 = DAT_00106400;\n                if (DAT_00106408 == '\\0') {\n                  DAT_00106408 = '\\0';\n                  goto LAB_00103053;\n                }\n              }\n              stringVar = (char *)dcgettext(0,\" (inlined by) \",5);\n              printf(stringVar);\n            } while( true );\n          }\n        }\n        else if (((*(byte *)((long)undefinedPtrPtr3 + 0x24) & 1) != 0) && (DAT_00106410 < undefinedPtrPtr3[8])) {\n          DAT_00106408 = (**(code **)(currentFile->_IO_read_ptr + 0x240))\n                                   (currentFile,DAT_00106418,undefinedPtrPtr3,DAT_00106410,&DAT_001063f8,\n                                    &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n          goto LAB_00102fcf;\n        }\n        if (DAT_00106432 != '\\0') {\n          if (DAT_00106431 == '\\0') {\n            puts(\"??\");\n          }\n          else {\n            printf(\"?? \");\n          }\n        }\n        puts(\"??:0\");\nLAB_00103053:\n        fflush(*(FILE **)charPtr1);\n        if ((int)undefinedPtr2 != 0) goto LAB_00102ee7;\nLAB_00103065:\n        stringVar = fgets((char *)&statStruct,100,_stdin);\n        statPtr = &statStruct;\n        if (stringVar == (char *)0x0) goto LAB_0010308a;\n      } while( true );\n    }\n  } while( true );\nLAB_00102970:\n  byteVar2 = bytePtr2[1];\n  bytePtr2 = bytePtr2 + 1;\n  if (byteVar2 == 0) goto LAB_001030bb;\n  goto LAB_00102980;\nswitchD_00102d16_caseD_73:\n  DAT_00106433 = '\\x01';\n  goto switchD_00102d16_caseD_0;\n}\n\n",
            "called": [
                "bfd_init",
                "fopen",
                "stat",
                "fflush",
                "cplus_demangle_name_to_style",
                "fseek",
                "bfd_demangle",
                "ftell",
                "bindtextdomain",
                "strrchr",
                "bfd_set_error_program_name",
                "xexit",
                "bfd_errmsg",
                "exit",
                "ferror",
                "memcpy",
                "__errno_location",
                "textdomain",
                "cplus_demangle_set_style",
                "puts",
                "fgets",
                "xrealloc",
                "strchr",
                "strtoul",
                "FUN_00103c70",
                "bfd_openr",
                "xmalloc_set_program_name",
                "bfd_check_format_matches",
                "FUN_00102540",
                "dcgettext",
                "strlen",
                "FUN_00102620",
                "fputc",
                "strerror",
                "fclose",
                "printf",
                "fread",
                "strcmp",
                "free",
                "FUN_00103bd0",
                "fprintf",
                "putchar",
                "setlocale",
                "xmalloc",
                "bfd_set_default_target",
                "bfd_fprintf_vma",
                "bfd_close",
                "xstrdup",
                "FUN_001023e1",
                "bfd_get_error",
                "bfd_scan_vma",
                "memmove",
                "bfd_map_over_sections",
                "bfd_get_section_by_name",
                "getopt_long",
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001027b0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "process_input_files_001027b0"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_001027b0",
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "FUN_00103bd0": {
            "renaming": {
                "FUN_00103bd0": "extract_binary_data_00103bd0",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "in_AL": "condition",
                "iVar1": "errorValue",
                "uVar2": "errorMessage",
                "lVar3": "exitStatus",
                "in_R10": "auxiliaryParam",
                "local_d8": "arrayLength",
                "local_d4": "byteSize",
                "local_d0": "arrayPointer",
                "local_c8": "outputArray",
                "local_b8": "localBuffer",
                "local_b0": "localParam_10",
                "local_a8": "localParam_11",
                "local_a0": "localParam_12",
                "local_98": "localParam_13",
                "local_90": "localParam_14",
                "local_88": "output_1",
                "local_78": "output_2",
                "local_68": "output_3",
                "local_58": "output_4",
                "local_48": "output_5",
                "local_38": "output_6",
                "local_28": "output_7",
                "local_18": "output_8"
            },
            "code": "\n\n\nvoid extractBinaryData_00103bd0(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined8 param_9,undefined8 input_10,undefined8 input_11,undefined8 input_12,\n                 undefined8 input_13,undefined8 input_14)\n\n{\n  char condition;\n  int errorValue;\n  undefined8 errorMessage;\n  long exitStatus;\n  undefined8 auxiliaryParam;\n  undefined4 arrayLength;\n  undefined4 byteSize;\n  undefined *arrayPointer;\n  undefined *outputArray;\n  undefined localBuffer [8];\n  undefined8 localParam_10;\n  undefined8 localParam_11;\n  undefined8 localParam_12;\n  undefined8 localParam_13;\n  undefined8 localParam_14;\n  undefined4 output_1;\n  undefined4 output_2;\n  undefined4 output_3;\n  undefined4 output_4;\n  undefined4 output_5;\n  undefined4 output_6;\n  undefined4 output_7;\n  undefined4 output_8;\n  \n  if (condition != '\\0') {\n    output_1 = input_1;\n    output_2 = input_2;\n    output_3 = input_3;\n    output_4 = input_4;\n    output_5 = input_5;\n    output_6 = input_6;\n    output_7 = input_7;\n    output_8 = input_8;\n  }\n  arrayPointer = &stack0x00000008;\n  arrayLength = 8;\n  outputArray = localBuffer;\n  byteSize = 0x30;\n  localParam_10 = input_10;\n  localParam_11 = input_11;\n  localParam_12 = input_12;\n  localParam_13 = input_13;\n  localParam_14 = input_14;\n  FUN_001025c0(param_9,&arrayLength);\n  exitStatus = 1;\n  xexit();\n  errorValue = bfd_get_error();\n  if (errorValue == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorValue);\n  }\n  fflush(_stdout);\n  if (exitStatus != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438,exitStatus,errorMessage,auxiliaryParam);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,errorMessage,auxiliaryParam);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_001025c0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bd0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "extract_binary_data_00103bd0"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "bfd_scan_vma": {
            "renaming": {},
            "code": "\nvoid bfd_scan_vma(void)\n\n{\n  bfd_scan_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_scan_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_scan_vma"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103cd0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_001025c0": {
            "renaming": {
                "FUN_001025c0": "log_error_message_001025c0",
                "param_1": "messageFormat",
                "param_2": "args",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid logErrorMessage_001025c0(char *messageFormat,__gnuc_va_list args)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_00106438);\n  vfprintf(standardError,messageFormat,args);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fprintf",
                "fflush",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025c0",
            "calling": [
                "FUN_00103bd0",
                "FUN_00102620"
            ],
            "imported": false,
            "current_name": "log_error_message_001025c0"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(FUN_001027b0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001027b0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001026c0",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "bfd_get_section_by_name": {
            "renaming": {},
            "code": "\nvoid bfd_get_section_by_name(void)\n\n{\n  bfd_get_section_by_name();\n  return;\n}\n\n",
            "called": [
                "bfd_get_section_by_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_get_section_by_name"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001027b0",
                "FUN_001023a0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "FUN_00102720": {
            "renaming": {
                "FUN_00102720": "FUNC_00102720"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102744) */\n/* WARNING: Removing unreachable block (ram,0x00102750) */\n\nvoid FUNC_00102720(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00102720",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00102720"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_001026f0": {
            "renaming": {
                "FUN_001026f0": "FUNC_001026f0"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00102703) */\n/* WARNING: Removing unreachable block (ram,0x0010270f) */\n\nvoid FUNC_001026f0(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001026f0",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_001026f0"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "strtoul": {
            "renaming": {},
            "code": "\n\n\nulong strtoul(char *__nptr,char **__endptr,int __base)\n\n{\n  ulong uVar1;\n  \n  uVar1 = strtoul(__nptr,__endptr,__base);\n  return uVar1;\n}\n\n",
            "called": [
                "strtoul"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strtoul"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_001027b0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_001027b0",
                "FUN_00103bd0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "bfd_fprintf_vma": {
            "renaming": {},
            "code": "\nvoid bfd_fprintf_vma(void)\n\n{\n  bfd_fprintf_vma();\n  return;\n}\n\n",
            "called": [
                "bfd_fprintf_vma"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "bfd_fprintf_vma"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_001027b0",
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_001023e1": {
            "renaming": {
                "FUN_001023e1": "print_usage_001023e1",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "languageCode",
                "pcVar2": "message",
                "__ptr": "targetList",
                "plVar3": "currentTarget"
            },
            "code": "\nvoid printUsage_001023e1(FILE *outputFile,int exitCode)\n\n{\n  long languageCode;\n  char *message;\n  long *targetList;\n  long *currentTarget;\n  \n  languageCode = DAT_00106438;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [addr(s)]\\n\",5);\n  fprintf(outputFile,message,languageCode);\n  message = (char *)dcgettext(0,\" Convert addresses into line number/file name pairs.\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" If no addresses are specified on the command line, they will be read from stdin\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \" The options are:\\n  @<file>                Read options from <file>\\n  -a --addresses         Show addresses\\n  -b --target=<bfdname>  Set the binary file format\\n  -e --exe=<executable>  Set the input file name (default is a.out)\\n  -i --inlines           Unwind inlined functions\\n  -j --section=<name>    Read section-relative offsets instead of addresses\\n  -p --pretty-print      Make the output easier to read for humans\\n  -s --basenames         Strip directory names\\n  -f --functions         Show function names\\n  -C --demangle[=style]  Demangle function names\\n  -R --recurse-limit     Enable a limit on recursion whilst demangling.  [Default]\\n  -r --no-recurse-limit  Disable a limit on recursion whilst demangling\\n  -h --help              Display this information\\n  -v --version           Display the program\\'s version\\n\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  languageCode = DAT_00106438;\n  if (DAT_00106438 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,languageCode);\n  }\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    languageCode = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (languageCode == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fputc",
                "free",
                "exit",
                "fprintf",
                "bfd_target_list",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e1",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "print_usage_001023e1"
        },
        "FUN_001023a0": {
            "renaming": {
                "FUN_001023a0": "print_error_or_unknown_cause_001023a0",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMessage"
            },
            "code": "\n\n\nvoid printErrorOrUnknownCause_001023a0(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "fprintf",
                "fflush",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c70"
            ],
            "imported": false,
            "current_name": "print_error_or_unknown_cause_001023a0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001027b0",
                "FUN_001025c0",
                "FUN_001023a0",
                "FUN_001023e1"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "FUN_00103c70": {
            "renaming": {
                "FUN_00103c70": "print_error_message_00103c70",
                "param_1": "errorCode",
                "iVar1": "bfdError",
                "uVar2": "errorMessage",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00103c70(long errorCode)\n\n{\n  int bfdError;\n  undefined8 errorMessage;\n  undefined8 additionalInfo;\n  \n  bfdError = bfd_get_error();\n  if (bfdError == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(bfdError);\n  }\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_00106438,errorCode,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_00106438,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_get_error",
                "bfd_errmsg",
                "FUN_001023a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c70",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "print_error_message_00103c70"
        },
        "puts": {
            "renaming": {},
            "code": "\n\n\nint puts(char *__s)\n\n{\n  int iVar1;\n  \n  iVar1 = puts(__s);\n  return iVar1;\n}\n\n",
            "called": [
                "puts"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "puts"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "strrchr": {
            "renaming": {},
            "code": "\n\n\nchar * strrchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strrchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strrchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "strrchr"
        },
        "FUN_00102540": {
            "renaming": {
                "FUN_00102540": "execute_function_with_condition_00102540",
                "param_1": "functionPtr",
                "param_2": "dataPtr",
                "uVar1": "dataOffset"
            },
            "code": "\nvoid executeFunctionWithCondition_00102540(long functionPtr,long dataPtr)\n\n{\n  ulong dataOffset;\n  \n  if ((DAT_00106408 == '\\0') && ((*(byte *)(dataPtr + 0x24) & 1) != 0)) {\n    dataOffset = *(ulong *)(dataPtr + 0x30);\n    if ((dataOffset <= DAT_00106410) && (DAT_00106410 < *(long *)(dataPtr + 0x40) + dataOffset)) {\n      DAT_00106408 = (**(code **)(*(long *)(functionPtr + 8) + 0x240))\n                               (functionPtr,DAT_00106418,dataPtr,DAT_00106410 - dataOffset,&DAT_001063f8,\n                                &DAT_00106400,&DAT_001063f4,&DAT_001063f0);\n      return;\n    }\n  }\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102540",
            "calling": [
                "FUN_001027b0"
            ],
            "imported": false,
            "current_name": "execute_function_with_condition_00102540"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_function_at_null_00102020"
            },
            "code": "\nvoid executeFunctionAtNull_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(undefined *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_function_at_null_00102020"
        }
    },
    "used_tokens": 23511,
    "layers": [
        [
            "FUN_00102620",
            "FUN_001027b0",
            "FUN_00103bd0",
            "FUN_001025c0",
            "FUN_001023e1",
            "FUN_001023a0",
            "FUN_00103c70",
            "FUN_00102540",
            "FUN_00102020"
        ]
    ],
    "locked_functions": []
}