{
    "functions": {
        "putc": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_001063a0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "putc"
        },
        "bfd_close": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_close"
        },
        "_FINI_0": {
            "renaming": {},
            "code": "\nvoid _FINI_0(void)\n\n{\n  if (DAT_0010b720 != '\\0') {\n    return;\n  }\n  __cxa_finalize(PTR_LOOP_0010b228);\n  FUNC_00105530();\n  DAT_0010b720 = 1;\n  return;\n}\n\n",
            "called": [
                "FUN_00105530",
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "_FINI_0"
        },
        "strchr": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "strchr"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "param_1": "input_string",
                "param_2": "input_length",
                "param_3": "output_buffer",
                "param_4": "temp_var1",
                "param_5": "temp_var2",
                "puVar1": "reloc_buffer",
                "auVar2": "reloc_info",
                "lVar3": "upper_bound",
                "uVar4": "alloc_result",
                "uVar5": "canonicalized_result"
            },
            "code": "\nundefined8\nprocess_relocation_00103c00(undefined8 *input_string,long input_length,undefined (*output_buffer) [16],undefined8 temp_var1,\n            undefined8 temp_var2)\n\n{\n  undefined8 *reloc_buffer;\n  undefined reloc_info [16];\n  long upper_bound;\n  undefined8 alloc_result;\n  undefined8 canonicalized_result;\n  \n  **(long **)*output_buffer = input_length;\n  if ((*(byte *)(input_length + 0x24) & 4) == 0) {\n    **(undefined8 **)(*output_buffer + 8) = 0;\n    **(undefined8 **)output_buffer[1] = 0;\n  }\n  else {\n    upper_bound = bfd_get_reloc_upper_bound();\n    if (-1 < upper_bound) {\n      reloc_buffer = *(undefined8 **)(*output_buffer + 8);\n      alloc_result = xmalloc(upper_bound);\n      canonicalized_result = *(undefined8 *)(output_buffer[1] + 8);\n      *reloc_buffer = alloc_result;\n      reloc_buffer = *(undefined8 **)output_buffer[1];\n      canonicalized_result = bfd_canonicalize_reloc(input_string,input_length,**(undefined8 **)(*output_buffer + 8),canonicalized_result);\n      *reloc_buffer = canonicalized_result;\n      if (-1 < **(long **)output_buffer[1]) goto LAB_00103c7c;\n    }\n    print_error_00106530(*input_string);\n  }\nLAB_00103c7c:\n  upper_bound = *(long *)(*output_buffer + 8) + 8;\n  *(long *)output_buffer[1] = *(long *)output_buffer[1] + 8;\n  reloc_info._8_4_ = (int)upper_bound;\n  reloc_info._0_8_ = *(long *)*output_buffer + 8;\n  reloc_info._12_4_ = (int)((ulong)upper_bound >> 0x20);\n  *output_buffer = reloc_info;\n  return temp_var2;\n}\n\n",
            "called": [
                "FUN_00106530",
                "bfd_canonicalize_reloc",
                "bfd_get_reloc_upper_bound",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "process_relocation_00103c00"
        },
        "fseek": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fseek"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_description_0010370a",
                "plVar4": "printWidth",
                "uVar9": "maskedRBX",
                "bVar8": "symClass",
                "cVar1": "isUndefinedSymclass",
                "pcVar10": "symType",
                "iVar3": "asprintfRet",
                "lVar7": "symbolData",
                "uVar2": "nameIndex"
            },
            "code": "\nvoid printSymbolDescription_0010370a(void)\n\n{\n  char isUndefinedSymclass;\n  ushort nameIndex;\n  int asprintfRet;\n  long *printWidth;\n  int *piVar5;\n  undefined8 uVar6;\n  long symbolData;\n  ulong unaff_RBX;\n  byte symClass;\n  ulong maskedRBX;\n  char *symType;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  maskedRBX = unaff_RBX & 0xffffffff;\n  print_and_exit_00106300(printWidth,maskedRBX);\n  print_formatted_output_00104740(\"%-20s|\",printWidth,0,maskedRBX);\n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefinedSymclass == '\\0') {\n    print_symbol_info_001054d0(*(undefined8 *)*printWidth);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      symbolData = *(long *)(printWidth[3] + 0x30);\n      isUndefinedSymclass = *(char *)(symbolData + 0x28);\n      if (isUndefinedSymclass == 'g') goto LAB_00103983;\n      if (isUndefinedSymclass == 'h') {\n        symType = \"Line\";\n      }\n      else if (isUndefinedSymclass == 'd') {\n        symType = \"Block\";\n      }\n      else if (*(ushort *)(symbolData + 0x26) == 0) {\n        symType = \"None\";\n      }\n      else {\n        nameIndex = *(ushort *)(symbolData + 0x26) >> 4 & 3;\n        if (nameIndex == 2) {\n          symType = \"Function\";\n        }\n        else if (nameIndex == 3) {\n          symType = \"Array\";\n        }\n        else {\n          if (nameIndex != 1) {\n            free(DAT_0010b730);\n            nameIndex = *(ushort *)(symbolData + 0x26);\n            symClass = *(byte *)(symbolData + 0x28);\n            symType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfRet = asprintf(&DAT_0010b730,symType,(ulong)symClass,(ulong)nameIndex);\n            symType = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          symType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symClass = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(symClass) {\n    case 0:\n      symType = \"NOTYPE\";\n      break;\n    case 1:\n      symType = \"OBJECT\";\n      break;\n    case 2:\n      symType = \"FUNC\";\n      break;\n    case 3:\n      symType = \"SECTION\";\n      break;\n    case 4:\n      symType = \"FILE\";\n      break;\n    case 5:\n      symType = \"COMMON\";\n      break;\n    case 6:\n      symType = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      symType = \"<processor specific>: %d\";\n      if ((2 < symClass - 0xd) && (symType = \"<OS specific>: %d\", 2 < symClass - 10)) {\n        symType = \"<unknown>: %d\";\n      }\n      symType = (char *)dcgettext(0,symType,5);\n      asprintfRet = asprintf(&DAT_0010b728,symType,(ulong)symClass);\n      symType = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfRet < 0) {\n        piVar5 = __errno_location();\n        uVar6 = xstrerror(*piVar5);\n        print_and_exit_00106300(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symType);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_001054d0();\n  }\n  symbolData = printWidth[2];\n  if ((symbolData != 0) || (symbolData = printWidth[3], symbolData != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolData + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "FUN_00106300",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "FUN_001054d0"
            ],
            "imported": false,
            "current_name": "print_symbol_description_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "initialize_output_format_00104370",
                "param_1": "format_identifier",
                "param_2": "param_value",
                "uVar1": "errorMessage"
            },
            "code": "\nundefined ** initialize_output_format_00104370(undefined *format_identifier,undefined8 param_value)\n\n{\n  undefined8 errorMessage;\n  undefined **ppuVar2;\n  \n  switch(*format_identifier) {\n  case 0x42:\n  case 0x62:\n    DAT_0010b7c0 = 0;\n    PTR_PTR_FUN_0010b260 = (undefined *)&PTR_FUN_0010ace0;\n    return &PTR_FUN_0010ace0;\n  default:\n    errorMessage = dcgettext(0,\"%s: invalid output format\",5);\n    print_and_exit_00106300(errorMessage,format_identifier);\n    errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    print_error_message_00106400(errorMessage);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    ppuVar2 = (undefined **)initialize_global_variable_00104397(format_identifier,param_value,3);\n    return ppuVar2;\n  case 0x50:\n  case 0x70:\n    ppuVar2 = (undefined **)initialize_global_variable_00104397(format_identifier,param_value,2);\n    return ppuVar2;\n  case 0x53:\n  case 0x73:\n    ppuVar2 = (undefined **)initialize_global_variable_00104397(format_identifier,param_value,1);\n    return ppuVar2;\n  }\n}\n\n",
            "called": [
                "FUN_00106300",
                "FUN_00104397",
                "caseD_4a",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "initialize_output_format_00104370"
        },
        "xmalloc": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "FUN_00103c00",
                "FUN_00103238",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "xmalloc"
        },
        "vfprintf": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "FUN_001063a0"
            ],
            "imported": false,
            "current_name": "vfprintf"
        },
        "putchar": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "FUN_001064b0",
                "FUN_001035a2"
            ],
            "imported": false,
            "current_name": "putchar"
        },
        "bfd_set_default_target": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_default_target"
        },
        "bfd_get_error": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_error"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "matchingFormats",
                "uVar1": "data",
                "__format": "formatString",
                "plVar2": "currentFormat"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *matchingFormats)\n\n{\n  undefined8 data;\n  char *formatString;\n  long *currentFormat;\n  \n  fflush(_stdout);\n  data = DAT_0010b820;\n  formatString = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,formatString,data);\n  for (currentFormat = matchingFormats; *currentFormat != 0; currentFormat = currentFormat + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(matchingFormats);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "fprintf",
                "fputc",
                "dcgettext",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_function_info_001036a7",
                "param_1": "inputParam1",
                "param_2": "inputParam2",
                "param_3": "unusedParam1",
                "param_4": "unusedParam2"
            },
            "code": "\nvoid printFunctionInfo_001036a7(undefined8 *inputParam1,undefined8 *inputParam2,undefined8 unusedParam1,undefined8 unusedParam2)\n\n{\n  if (DAT_0010b818 != 0) {\n    if (inputParam1 != (undefined8 *)0x0) {\n      printf(\"%s:\",*inputParam1);\n    }\n    printf(\"%s:\",*inputParam2,unusedParam2);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_function_info_001036a7"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_table_00102f19",
                "param_1": "symbolFilePath",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolTable_00102f19(undefined8 symbolFilePath)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,symbolFilePath);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_table_00102f19"
        },
        "__cxa_finalize": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "__cxa_finalize"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiled_code_00102fc3",
                "param_1": "param1",
                "param_2": "param2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar2": "length1",
                "uVar3": "length2",
                "lVar4": "result1",
                "lVar5": "result2",
                "sVar6": "var1",
                "sVar7": "var2",
                "pcVar8": "pointer1",
                "pcVar9": "pointer2",
                "uVar10": "offset1",
                "uVar11": "offset2",
                "uVar12": "var3",
                "uVar13": "data1",
                "unaff_R13": "data2",
                "bVar14": "flag1",
                "cVar1": "character1"
            },
            "code": "\nulong checkCompiledCode_00102fc3(undefined8 param1,undefined8 param2)\n\n{\n  char character1;\n  ulong length1;\n  char *string1;\n  char *string2;\n  uint length2;\n  long result1;\n  long result2;\n  size_t var1;\n  size_t var2;\n  char *pointer1;\n  char *pointer2;\n  ulong offset1;\n  ulong offset2;\n  ulong var3;\n  undefined8 data1;\n  long data2;\n  bool flag1;\n  \n  data1 = *DAT_0010b780;\n  print_error_00106530();\n  result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,data1,DAT_0010b770);\n  result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,param2,DAT_0010b768);\n  if ((result1 == 0) || (data2 = result2, result2 == 0)) {\n    result2 = print_error_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(result1 + 0x20) == 0x10c2a8) || (*(long *)(result2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  offset1 = *(ulong *)(*(long *)(result1 + 0x20) + 0x30);\n  length1 = *(ulong *)(*(long *)(result2 + 0x20) + 0x30);\n  var3 = *(long *)(result1 + 0x10) + offset1;\n  offset2 = *(long *)(data2 + 0x10) + length1;\n  flag1 = var3 < offset2;\n  if ((var3 != offset2) || (flag1 = offset1 < length1, offset1 != length1)) {\n    return (ulong)(-(uint)flag1 | 1);\n  }\n  string1 = *(char **)(result1 + 8);\n  string2 = *(char **)(data2 + 8);\n  var1 = strlen(string1);\n  var2 = strlen(string2);\n  pointer1 = strstr(string1,\"gnu_compiled\");\n  if (pointer1 == (char *)0x0) {\n    pointer2 = strstr(string1,\"gcc2_compiled\");\n    pointer1 = strstr(string2,\"gnu_compiled\");\n    if ((pointer1 == (char *)0x0) && (pointer1 = strstr(string2,\"gcc2_compiled\"), pointer1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pointer2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pointer1 = strstr(string2,\"gnu_compiled\");\n    if (pointer1 == (char *)0x0) {\n      pointer2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pointer2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  length2 = *(uint *)(data2 + 0x18) & 0x4000;\n  if ((*(byte *)(result1 + 0x19) & 0x40) == 0) {\n    if ((var1 < 3) || (string1[var1 - 2] != '.')) {\n      if (length2 != 0) {\n        return 1;\n      }\n      if ((var2 < 3) || (string2[var2 - 2] != '.')) goto LAB_00103202;\n      flag1 = false;\n      goto LAB_001031e7;\n    }\n    character1 = string1[var1 - 1];\n    flag1 = character1 == 'o' || character1 == 'a';\n    if (length2 == 0) {\n      if ((var2 < 3) || (string2[var2 - 2] != '.')) {\n        if (character1 == 'o' || character1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (length2 != 0) goto LAB_00103202;\n    if (var2 < 3) {\n      return 0xffffffff;\n    }\n    if (string2[var2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    flag1 = true;\nLAB_001031e7:\n    if ((string2[var2 - 1] != 'o') && (string2[var2 - 1] != 'a')) {\n      if (flag1) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!flag1) {\n    return 1;\n  }\nLAB_00103202:\n  offset1 = compare_strings_00104fa0(data1,param2);\n  return offset1;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "FUN_00105050"
            ],
            "imported": false,
            "current_name": "check_compiled_code_00102fc3"
        },
        "textdomain": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "textdomain"
        },
        "concat": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "FUN_001025f5",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concat"
        },
        "fread": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fread"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol_list",
                "param_2": "data",
                "cVar1": "is_undefined",
                "uVar2": "type_bits",
                "iVar3": "result",
                "piVar4": "error_ptr",
                "uVar5": "error_msg",
                "lVar6": "symbol_info",
                "bVar7": "type",
                "pcVar8": "type_name"
            },
            "code": "\nvoid print_symbol_info_00103729(long *symbol_list,undefined8 data)\n\n{\n  char is_undefined;\n  ushort type_bits;\n  int result;\n  int *error_ptr;\n  undefined8 error_msg;\n  long symbol_info;\n  byte type;\n  char *type_name;\n  \n  print_formatted_output_00104740(\"%-20s|\",symbol_list,0,data);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_list + 8));\n  if (is_undefined == '\\0') {\n    print_symbol_info_00103729_001054d0(*(undefined8 *)*symbol_list);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_list + 8));\n  if (*(char *)(*symbol_list + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_list + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol_list + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_list[2] == 0) {\n    if (symbol_list[3] != 0) {\n      symbol_info = *(long *)(symbol_list[3] + 0x30);\n      is_undefined = *(char *)(symbol_info + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_name = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_name = \"Block\";\n      }\n      else if (*(ushort *)(symbol_info + 0x26) == 0) {\n        type_name = \"None\";\n      }\n      else {\n        type_bits = *(ushort *)(symbol_info + 0x26) >> 4 & 3;\n        if (type_bits == 2) {\n          type_name = \"Function\";\n        }\n        else if (type_bits == 3) {\n          type_name = \"Array\";\n        }\n        else {\n          if (type_bits != 1) {\n            free(DAT_0010b730);\n            type_bits = *(ushort *)(symbol_info + 0x26);\n            type = *(byte *)(symbol_info + 0x28);\n            type_name = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            result = asprintf(&DAT_0010b730,type_name,(ulong)type,(ulong)type_bits);\n            type_name = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          type_name = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    type = *(byte *)(symbol_list[2] + 0x48) & 0xf;\n    switch(type) {\n    case 0:\n      type_name = \"NOTYPE\";\n      break;\n    case 1:\n      type_name = \"OBJECT\";\n      break;\n    case 2:\n      type_name = \"FUNC\";\n      break;\n    case 3:\n      type_name = \"SECTION\";\n      break;\n    case 4:\n      type_name = \"FILE\";\n      break;\n    case 5:\n      type_name = \"COMMON\";\n      break;\n    case 6:\n      type_name = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      type_name = \"<processor specific>: %d\";\n      if ((2 < type - 0xd) && (type_name = \"<OS specific>: %d\", 2 < type - 10)) {\n        type_name = \"<unknown>: %d\";\n      }\n      type_name = (char *)dcgettext(0,type_name,5);\n      result = asprintf(&DAT_0010b728,type_name,(ulong)type);\n      type_name = DAT_0010b728;\njoined_r0x00103964:\n      if (result < 0) {\n        error_ptr = __errno_location();\n        error_msg = xstrerror(*error_ptr);\n        print_and_exit_00106300(&DAT_0010712d,error_msg);\nLAB_00103983:\n        type_name = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_name);\n  }\n  if (symbol_list[2] == 0) {\n    if (symbol_list[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_list[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_symbol_info_00103729_001054d0();\n  }\n  symbol_info = symbol_list[2];\n  if ((symbol_info != 0) || (symbol_info = symbol_list[3], symbol_info != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbol_info + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext",
                "free",
                "xstrerror",
                "FUN_00104740",
                "__errno_location",
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "exit": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "FUN_00103ca0",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "exit"
        },
        "bfd_check_format": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format"
        },
        "xstrerror": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "xstrerror"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_formatted_strings_00103573",
                "param_1": "string1",
                "param_2": "string2",
                "param_3": "param3",
                "param_4": "param4"
            },
            "code": "\nvoid printFormattedStrings_00103573(undefined8 *string1,undefined8 *string2,undefined8 param3,undefined8 param4)\n\n{\n  if (string1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*string1);\n  }\n  printf(\"%s:\",*string2,param4);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "FUN_001053b0"
            ],
            "imported": false,
            "current_name": "print_formatted_strings_00103573"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_info_00105110",
                "param_1": "data",
                "param_2": "sections",
                "param_3": "arg1",
                "param_4": "arg2",
                "__ptr": "ptr",
                "__s1": "str",
                "pplVar1": "sectionsPtr",
                "plVar2": "sectionPtr",
                "lVar3": "sectionData",
                "puVar4": "ptr1",
                "cVar5": "char1",
                "iVar6": "intVar",
                "pvVar7": "ptr2",
                "lVar8": "var1",
                "uVar9": "var2",
                "lVar10": "var3",
                "local_b4": "localVar1",
                "local_b0": "localArray1",
                "local_a8": "localArray2",
                "local_a0": "localVar2",
                "local_98": "localVar3",
                "local_90": "localVar4",
                "local_88": "localPtr1",
                "pvStack_80": "stackPtr1",
                "pvStack_78": "stackPtr2",
                "pvStack_70": "stackPtr3",
                "local_68": "localArray3",
                "local_60": "localChar",
                "_stdout": "outputPtr",
                "process_relocation_00103c00": "processRelocation",
                "find_matching_entry_00103463": "findMatchingEntry",
                "print_error_00106530": "printError"
            },
            "code": "\n\n\nvoid printInfo_00105110(undefined8 *data,long *sections,undefined8 arg1,undefined8 *arg2)\n\n{\n  void *ptr;\n  char *str;\n  long **sectionsPtr;\n  long *sectionPtr;\n  long sectionData;\n  undefined8 *ptr1;\n  char char1;\n  int intVar;\n  void *ptr2;\n  long var1;\n  uint var2;\n  long var3;\n  uint localVar1;\n  undefined localArray1 [8];\n  undefined *localArray2;\n  undefined8 localVar2;\n  long *localVar3;\n  long *localVar4;\n  void *localPtr1;\n  void *stackPtr1;\n  void *stackPtr2;\n  void *stackPtr3;\n  undefined localArray3 [8];\n  char localChar;\n  \n  if (*(code **)(PTR_PTR_FUN_0010b260 + 0x18) == print_data_001053b0) {\n    if (DAT_0010b818 != 0) {\n      if (arg2 != (undefined8 *)0x0) {\n        printf(\"%s:\",*arg2);\n      }\n      printf(\"%s:\",*data);\n    }\n  }\n  else {\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x18))(arg2,data);\n  }\n  localArray2 = localArray3;\n  (**(code **)(data[1] + 0x218))(data,sections,localArray2);\n  var2 = *(uint *)(sections + 3);\n  char1 = localChar;\n  if (((((localChar == 'i') && ((var2 & 0x400000) != 0)) && (DAT_0010b7c8 != (char *)0x0)) &&\n      ((*DAT_0010b7c8 != '\\0' && (char1 = *DAT_0010b7c8, (var2 & 2) == 0)))) &&\n     (char1 = localChar, DAT_0010b7c8[1] != '\\0')) {\n    char1 = DAT_0010b7c8[1];\n  }\n  localChar = char1;\n  localVar2 = arg1;\n  if ((var2 & 0x200100) != 0) goto LAB_00103330;\n  var1 = *sections;\n  intVar = *(int *)(*(long *)(var1 + 8) + 8);\n  if (((var2 & 0x200000) == 0) && (intVar == 5)) {\n    localVar3 = sections;\n    if (*(long *)(var1 + 0x110) == 0) {\n      localVar3 = (long *)0x0;\n    }\n  }\n  else {\n    localVar3 = (long *)0x0;\n    if (((intVar - 2U & 0xfffffffd) == 0) && (localVar4 = sections, *(long *)(var1 + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  localVar4 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&localArray2,data);\n  do {\n    if (DAT_0010b804 == 0) {\nLAB_001051e6:\n      putc(10,outputPtr);\n      return;\n    }\n    if (_DAT_0010b7b8 == data) {\n      ptr1 = _DAT_0010b7b8;\n      if (DAT_0010b758 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      _DAT_0010b7b8 = ptr1;\n      ptr2 = DAT_0010b750;\n      if (sections[4] == 0x10c2a8) {\n        if (_DAT_0010b7b0 == data) {\n          if (DAT_0010b750 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          var2 = 0;\n          if (DAT_0010b750 != (void *)0x0) {\n            for (; var2 < DAT_0010b748; var2 = var2 + 1) {\n              ptr = *(void **)((long)ptr2 + (ulong)var2 * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(DAT_0010b740);\n            free(ptr2);\n            free(DAT_0010b738);\n            DAT_0010b740 = (void *)0x0;\n            DAT_0010b750 = (void *)0x0;\n            DAT_0010b738 = (void *)0x0;\n          }\nLAB_001033d1:\n          DAT_0010b748 = *(uint *)(data + 0x14);\n          DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n          DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n          stackPtr3 = DAT_0010b758;\n          localPtr1 = DAT_0010b740;\n          stackPtr1 = DAT_0010b750;\n          stackPtr2 = DAT_0010b738;\n          bfd_map_over_sections(data,processRelocation,&localPtr1);\n          _DAT_0010b7b0 = data;\n        }\n        str = (char *)sections[1];\n        for (var2 = 0; var2 < DAT_0010b748; var2 = var2 + 1) {\n          var1 = (ulong)var2 * 8;\n          ptr2 = DAT_0010b738;\n          for (var3 = 0;\n              *(long *)((long)ptr2 + var1) != var3 && var3 <= *(long *)((long)ptr2 + var1)\n              ; var3 = var3 + 1) {\n            sectionsPtr = *(long ***)(*(long *)((long)DAT_0010b750 + var1) + var3 * 8);\n            sectionPtr = *sectionsPtr;\n            if ((((sectionPtr != (long *)0x0) &&\n                 (sectionData = *sectionPtr, *(long *)(sectionData + 0x20) == sections[4])) &&\n                (*(long *)(sectionData + 0x10) == sections[2])) &&\n               (((intVar = strcmp(str,*(char **)(sectionData + 8)), intVar == 0 &&\n                 (char1 = (**(code **)(data[1] + 0x240))\n                                    (data,DAT_0010b758,\n                                     *(undefined8 *)((long)DAT_0010b740 + var1),sectionsPtr[1],\n                                     &localPtr1,localArray1,&localVar1,0), ptr2 = DAT_0010b738,\n                 char1 != '\\0')) && (localPtr1 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",localPtr1,(ulong)localVar1);\n              var2 = DAT_0010b748;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(sections[4] + 0xe0) == data) {\n        char1 = (**(code **)(data[1] + 0x250))(data,DAT_0010b758,sections,&localPtr1,&localVar1);\n        if (((char1 != '\\0') ||\n            (char1 = (**(code **)(data[1] + 0x240))\n                               (data,DAT_0010b758,sections[4],sections[2],&localPtr1,localArray1,\n                                &localVar1,0), char1 != '\\0')) &&\n           ((localPtr1 != (void *)0x0 && (localVar1 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (DAT_0010b758 != (void *)0x0) {\n      free(DAT_0010b758);\n      DAT_0010b758 = (void *)0x0;\n    }\nLAB_00105359:\n    var1 = (**(code **)(data[1] + 0x1f8))(data);\n    if (var1 < 0) {\n      findMatchingEntry(var1);\n      return;\n    }\n    DAT_0010b758 = (void *)xmalloc();\n    var1 = (**(code **)(data[1] + 0x200))(data,DAT_0010b758);\n    ptr1 = data;\n    if (-1 < var1) goto LAB_00105288;\n    printError(*data);\nLAB_00103330:\n    localVar3 = (long *)0x0;\n    localVar4 = (long *)0x0;\n    (**(code **)(PTR_PTR_FUN_0010b260 + 0x20))(&localArray2,data);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_001053c0",
                "printf",
                "FUN_001053b0",
                "FUN_00103238",
                "FUN_00106530",
                "free",
                "FUN_00103463",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_info_00105110"
        },
        "setlocale": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "setlocale"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "validate_binary_files_00102fd2",
                "param_1": "file1",
                "param_2": "file2",
                "__s": "fileName1",
                "__s_00": "fileName2",
                "uVar2": "file1Size",
                "uVar3": "file2Size",
                "lVar4": "file1Handle",
                "lVar5": "file2Handle",
                "sVar6": "fileName1Length",
                "sVar7": "fileName2Length",
                "pcVar8": "compiler1",
                "pcVar9": "compiler2",
                "uVar10": "comparisonResult",
                "uVar11": "file1EndAddress",
                "uVar12": "file2EndAddress",
                "unaff_R13": "file2HeaderAddress",
                "bVar13": "isFile1DotOOrDotA"
            },
            "code": "\nulong validateBinaryFiles_00102fd2(undefined8 file1,undefined8 file2)\n\n{\n  char cVar1;\n  ulong file1Size;\n  char *fileName1;\n  char *fileName2;\n  uint file2Size;\n  long file1Handle;\n  long file2Handle;\n  size_t fileName1Length;\n  size_t fileName2Length;\n  char *compiler1;\n  char *compiler2;\n  ulong comparisonResult;\n  ulong file1EndAddress;\n  ulong file2EndAddress;\n  long file2HeaderAddress;\n  bool isFile1DotOOrDotA;\n  \n  file1Handle = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file1,DAT_0010b770);\n  file2Handle = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file2,DAT_0010b768);\n  if ((file1Handle == 0) || (file2HeaderAddress = file2Handle, file2Handle == 0)) {\n    file2Handle = print_error_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file1Handle + 0x20) == 0x10c2a8) || (*(long *)(file2Handle + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  comparisonResult = *(ulong *)(*(long *)(file1Handle + 0x20) + 0x30);\n  file1Size = *(ulong *)(*(long *)(file2Handle + 0x20) + 0x30);\n  file2EndAddress = *(long *)(file1Handle + 0x10) + comparisonResult;\n  file1EndAddress = *(long *)(file2HeaderAddress + 0x10) + file1Size;\n  isFile1DotOOrDotA = file2EndAddress < file1EndAddress;\n  if ((file2EndAddress != file1EndAddress) || (isFile1DotOOrDotA = comparisonResult < file1Size, comparisonResult != file1Size)) {\n    return (ulong)(-(uint)isFile1DotOOrDotA | 1);\n  }\n  fileName1 = *(char **)(file1Handle + 8);\n  fileName2 = *(char **)(file2HeaderAddress + 8);\n  fileName1Length = strlen(fileName1);\n  fileName2Length = strlen(fileName2);\n  compiler1 = strstr(fileName1,\"gnu_compiled\");\n  if (compiler1 == (char *)0x0) {\n    compiler2 = strstr(fileName1,\"gcc2_compiled\");\n    compiler1 = strstr(fileName2,\"gnu_compiled\");\n    if ((compiler1 == (char *)0x0) && (compiler1 = strstr(fileName2,\"gcc2_compiled\"), compiler1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (compiler2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    compiler1 = strstr(fileName2,\"gnu_compiled\");\n    if (compiler1 == (char *)0x0) {\n      compiler2 = strstr(fileName2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (compiler2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  file2Size = *(uint *)(file2HeaderAddress + 0x18) & 0x4000;\n  if ((*(byte *)(file1Handle + 0x19) & 0x40) == 0) {\n    if ((fileName1Length < 3) || (fileName1[fileName1Length - 2] != '.')) {\n      if (file2Size != 0) {\n        return 1;\n      }\n      if ((fileName2Length < 3) || (fileName2[fileName2Length - 2] != '.')) goto LAB_00103202;\n      isFile1DotOOrDotA = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = fileName1[fileName1Length - 1];\n    isFile1DotOOrDotA = cVar1 == 'o' || cVar1 == 'a';\n    if (file2Size == 0) {\n      if ((fileName2Length < 3) || (fileName2[fileName2Length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (file2Size != 0) goto LAB_00103202;\n    if (fileName2Length < 3) {\n      return 0xffffffff;\n    }\n    if (fileName2[fileName2Length - 2] != '.') {\n      return 0xffffffff;\n    }\n    isFile1DotOOrDotA = true;\nLAB_001031e7:\n    if ((fileName2[fileName2Length - 1] != 'o') && (fileName2[fileName2Length - 1] != 'a')) {\n      if (isFile1DotOOrDotA) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isFile1DotOOrDotA) {\n    return 1;\n  }\nLAB_00103202:\n  comparisonResult = compare_strings_00104fa0(file1,file2);\n  return comparisonResult;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "strlen",
                "FUN_00106530",
                "strstr",
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "validate_binary_files_00102fd2"
        },
        "bindtextdomain": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bindtextdomain"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "print_error_and_return_00102f9f",
                "auVar1": "returnValue"
            },
            "code": "\nundefined  [16] print_error_and_return_00102f9f(void)\n\n{\n  undefined returnValue [16];\n  undefined8 unaff_retaddr;\n  \n  print_error_00106530(*DAT_0010b780);\n  returnValue._8_8_ = unaff_retaddr;\n  returnValue._0_8_ = 0xffffffff;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "print_error_and_return_00102f9f"
        },
        "dcgettext": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "FUN_00103a78",
                "FUN_00103729",
                "FUN_00103abf",
                "FUN_00103ca0",
                "FUN_00102f19",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00102450",
                "FUN_001043d0",
                "FUN_001053c0",
                "FUN_00104370",
                "FUN_0010249f",
                "FUN_001048e0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "dcgettext"
        },
        "bfd_set_error_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_set_error_program_name"
        },
        "fputc": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "FUN_00103ca0",
                "FUN_00103b5d"
            ],
            "imported": false,
            "current_name": "fputc"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_if_symbol_info_available_00103a66",
                "unaff_RBX": "symbol_pointer",
                "print_symbol_info_0010651a": "print_symbol_info"
            },
            "code": "\nvoid check_if_symbol_info_available_00103a66(void)\n\n{\n  long symbol_pointer;\n  \n  if (*(long *)(symbol_pointer + 8) != 0) {\n    print_symbol_info();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "FUN_001064b0"
            ],
            "imported": false,
            "current_name": "check_if_symbol_info_available_00103a66"
        },
        "_DT_INIT": {
            "renaming": {},
            "code": "\nvoid _DT_INIT(void)\n\n{\n  __gmon_start__();\n  return;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "_DT_INIT"
        },
        "strcoll": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "FUN_00104fa0"
            ],
            "imported": false,
            "current_name": "strcoll"
        },
        "bfd_openr": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr"
        },
        "cplus_demangle_set_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_set_style"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "pointer",
                "lVar1": "symbol_address"
            },
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *pointer;\n  long symbol_address;\n  \n  if (pointer[2] == 0) {\n    symbol_address = pointer[1];\n  }\n  else {\n    symbol_address = *(long *)(pointer[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (pointer[2] == 0) {\n      symbol_address = pointer[1];\n    }\n    else {\n      symbol_address = *(long *)(pointer[2] + 0x38);\n    }\n    print_symbol_info_001035a2_001054d0(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*pointer + 8));\n  if (*(char *)(*pointer + 8) != '-') {\n    print_formatted_output_00104740(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*pointer + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*pointer + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*pointer + 0x20));\n  print_formatted_output_00104740(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "FUN_001054d0",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "FUN_001053c0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001035a2"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "find_matching_entry_00103463",
                "unaff_R12": "inputString",
                "unaff_R13": "functionPointer",
                "unaff_R15": "baseAddress",
                "param_8": "counter",
                "param_10": "value",
                "plVar1": "ptr",
                "lVar2": "entry",
                "cVar3": "comparisonResult",
                "iVar4": "stringComparison",
                "lVar5": "secondEntry",
                "lVar6": "index",
                "in_stack_00000050": "filePath"
            },
            "code": "\n\n\nvoid findMatchingEntry_00103463(void)\n\n{\n  long *ptr;\n  long entry;\n  char comparisonResult;\n  int stringComparison;\n  long secondEntry;\n  char *inputString;\n  undefined8 *functionPointer;\n  long index;\n  long baseAddress;\n  undefined8 counter;\n  ulong value;\n  long filePath;\n  \n  print_error_00106530(*functionPointer);\n  do {\n    counter._4_4_ = counter._4_4_ + 1;\n    if (DAT_0010b748 <= counter._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    secondEntry = DAT_0010b738;\n    for (index = 0; ptr = (long *)(secondEntry + (ulong)counter._4_4_ * 8),\n        *ptr != index && index <= *ptr; index = index + 1) {\n      ptr = **(long ***)(*(long *)(DAT_0010b750 + (ulong)counter._4_4_ * 8) + index * 8);\n      if ((((ptr != (long *)0x0) &&\n           (entry = *ptr, *(long *)(entry + 0x20) == *(long *)(baseAddress + 0x20))) &&\n          (*(long *)(entry + 0x10) == *(long *)(baseAddress + 0x10))) &&\n         (((stringComparison = strcmp(inputString,*(char **)(entry + 8)), stringComparison == 0 &&\n           (comparisonResult = (**(code **)(functionPointer[1] + 0x240))(), secondEntry = DAT_0010b738, comparisonResult != '\\0')) &&\n          (filePath != 0)))) {\n        printf(\"\\t%s:%u\",filePath,value >> 0x20);\n        counter._4_4_ = DAT_0010b748;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "strcmp",
                "printf",
                "putc",
                "FUN_00106530"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_matching_entry_00103463"
        },
        "bfd_target_list": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "bfd_target_list"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "initialize_global_variable_00104397",
                "param_1": "dataPointer",
                "param_2": "memoryPointer",
                "param_3": "parameterValue"
            },
            "code": "\nvoid initializeGlobalVariable_00104397(undefined8 dataPointer,undefined8 memoryPointer,int parameterValue)\n\n{\n  DAT_0010b7c0 = parameterValue;\n  PTR_PTR_FUN_0010b260 = (undefined *)(&PTR_FUN_0010ace0 + (long)parameterValue * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "FUN_00104370",
                "caseD_4a"
            ],
            "imported": false,
            "current_name": "initialize_global_variable_00104397"
        },
        "bfd_canonicalize_reloc": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_canonicalize_reloc"
        },
        "free": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "FUN_00103729",
                "FUN_00103ca0",
                "FUN_00103238",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_001047d0",
                "FUN_0010268b",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "free"
        },
        "xexit": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "FUN_00106300",
                "FUN_00106530",
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xexit"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "evaluate_architecture_size_00104670",
                "param_1": "input",
                "iVar1": "size",
                "pcVar2": "archSubstring",
                "puVar3": "architectureSuffix",
                "pcVar4": "archType"
            },
            "code": "\nvoid evaluateArchitectureSize_00104670(long input)\n\n{\n  int size;\n  char *archSubstring;\n  undefined *architectureSuffix;\n  char *archType;\n  \n  DAT_0010b7a8 = bfd_get_arch_size();\n  if (DAT_0010b7a8 == -1) {\n    archType = **(char ***)(input + 8);\n    archSubstring = strstr(archType,\"64\");\n    size = 0x40;\n    if (archSubstring == (char *)0x0) {\n      size = strcmp(archType,\"mmo\");\n      size = (-(uint)(size == 0) & 0x20) + 0x20;\n    }\n    DAT_0010b7a8 = size;\n    free(DAT_0010b7a0);\n  }\n  else {\n    free(DAT_0010b7a0);\n  }\n  if (DAT_0010b7c0 - 2U < 2) {\n    archType = \"\";\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    archType = \"08\";\n  }\n  else {\n    archType = \"016\";\n  }\n  architectureSuffix = &DAT_001071d0;\n  if (DAT_0010b244 != 0x10) {\n    if (DAT_0010b244 < 0x11) {\n      if (DAT_0010b244 == 8) {\n        architectureSuffix = &DAT_001071ca;\n      }\n      else {\n        if (DAT_0010b244 != 10) {\n          DAT_0010b7a0 = (void *)concat(&DAT_001071d7,archType,0,0);\n          return;\n        }\n        architectureSuffix = &DAT_001071cd;\n      }\n    }\n    else {\n      architectureSuffix = (undefined *)0x0;\n    }\n  }\n  DAT_0010b7a0 = (void *)concat(&DAT_001071d7,archType,architectureSuffix,0);\n  return;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_001025f5",
                "bfd_get_arch_size",
                "free",
                "strstr",
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "evaluate_architecture_size_00104670"
        },
        "reconcat": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "reconcat"
        },
        "asprintf": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "asprintf"
        },
        "fopen": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fopen"
        },
        "stat": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "FUN_001055f0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "stat"
        },
        "getopt_long": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "getopt_long"
        },
        "xstrdup": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xstrdup"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress",
                "uVar1": "errorMsg",
                "dcgettext": "retrieveErrorMessage",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "fprintf": "printFormatted",
                "fflush": "flushOutput"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMsg;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMsg = dcgettext(0,\"cause of error unknown\",5);\n  fflush(standardOutput);\n  if (errorCode != 0) {\n    fprintf(standardError,\"%s: %s: %s\\n\",DAT_0010b820);\n    return;\n  }\n  fprintf(standardError,\"%s: %s\\n\",DAT_0010b820,errorMsg,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "analyze_binary_001048e0",
                "param_1": "binaryData",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result1",
                "param_6": "result2",
                "bVar1": "flag1",
                "pcVar2": "functionPtr",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "uIntVar",
                "lVar7": "longVar",
                "ppuVar8": "ptrResult1",
                "ppuVar9": "ptrResult2",
                "lVar10": "longVar2",
                "puVar11": "ptrVar",
                "bVar19": "flag2",
                "bVar20": "byteVar",
                "ppuStack_78": "ptrStack",
                "local_4c": "localVar1",
                "local_48": "localVar2",
                "local_40": "localArray"
            },
            "code": "\n\n\nvoid analyzeBinary_001048e0(ulong **binaryData,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **result1,ulong **result2)\n\n{\n  byte flag1;\n  code *functionPtr;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 uIntVar;\n  long longVar;\n  ulong **ptrResult1;\n  ulong **ptrResult2;\n  long longVar2;\n  ulong *ptrVar;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool flag2;\n  byte byteVar;\n  ulong **ptrStack;\n  uint localVar1;\n  ulong *localVar2;\n  ulong **localArray [2];\n  \n  byteVar = 0;\n  localVar2 = (ulong *)0x0;\n  if ((DAT_0010b80c != 0) || ((*(byte *)((long)binaryData + 0x44) & 0x10) != 0)) {\n    ptrResult2 = (ulong **)&localVar1;\n    ptrResult1 = (ulong **)(*(code *)binaryData[1][0x4d])(binaryData,DAT_0010b80c != 0,localArray);\n    if ((long)ptrResult1 < 0) {\n      if ((DAT_0010b80c != 0) && (intVar = bfd_get_error(), intVar == 7)) {\n        if (_DAT_0010b810 != 0) {\n          return;\n        }\n        ptrVar = *binaryData;\n        uIntVar = dcgettext(0,\"%s: no symbols\",5);\n        print_error_message_00106400(uIntVar,ptrVar);\n        return;\n      }\n      print_error_00106530(*binaryData);\n      goto LAB_00102e9e;\n    }\n    if (ptrResult1 != (ulong **)0x0) {\n      if (DAT_0010b788 != 0) {\n        if (localVar1 == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      flag1 = *(byte *)((long)binaryData + 0x4a);\n      ppuVar13 = binaryData;\n      do {\n        if ((flag1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          DAT_0010b230 = '\\0';\n          uIntVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_error_message_00106400(uIntVar);\n        }\n        ppuVar14 = localArray[0];\n        unaff_R14 = (ulong **)(ulong)localVar1;\n        flag2 = DAT_0010b80c != 0;\n        ptrResult2 = localArray[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)flag2;\n        binaryData = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)ptrResult1 * (long)unaff_R14);\n        ptrResult1 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        binaryData = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (binaryData < ptrResult1) {\n          do {\n            ptrResult2 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,flag2,binaryData,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (ptrResult2 == (ulong **)0x0) goto LAB_00102eb0;\n            ptrVar = ptrResult2[1];\n            ppuVar17 = ptrResult1;\n            if (((ptrVar == (ulong *)0x0) || (*(char *)ptrVar != '_')) ||\n               (*(char *)((long)ptrVar + 1) != '_')) {\nLAB_00104a03:\n              if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar = (uint)(ptrResult2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (DAT_0010b81c == 0) {\n                if ((*(byte *)(ptrResult2 + 3) & 4) == 0) {\n                  if (DAT_0010b7f8 != 0) goto process_lto_binary_00104d5b;\nLAB_00104a53:\n                  result2 = (ulong **)(ulong)DAT_0010b7e4;\n                  if (DAT_0010b7e4 == 0) {\n                    charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,ptrResult2);\n                    if (charVar != '\\0') {\n                      process_lto_object_00102c19();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (ptrResult2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_binary_00104d5b:\n                if ((ptrResult2[4] == (ulong *)0x10c2a8) || (ptrResult2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar = (*(code *)ppuVar13[1][0x46])(ppuVar13,ptrResult2);\n                if (charVar != '\\0') {\n                  process_lto_object_00102c19();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != binaryData) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *binaryData;\n                    process_binary_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)binaryData;\n                    binaryData = (ulong **)((long)binaryData + (ulong)byteVar * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)byteVar * -2 + 1);\n                  }\n                  process_binary_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              intVar = strcmp((char *)((long)ptrVar + (ulong)(*(char *)((long)ptrVar + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              ptrStack = ptrResult2;\n              if (intVar == 0) {\n                if (DAT_0010b230 != '\\0') {\n                  ptrStack = (ulong **)*ppuVar13;\n                  DAT_0010b230 = '\\0';\n                  uIntVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(uIntVar,ptrStack);\n                }\n                goto LAB_00104a03;\n              }\n              if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (DAT_0010b808 == 0) {\n                if (DAT_0010b7d8 != 0) {\n                  uintVar = (*(uint *)(ptrResult2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(ptrResult2 + 3) & 0x800082) != 0) || (ptrResult2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)ptrResult2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            binaryData = (ulong **)((long)binaryData + (long)unaff_R14);\n            if (ptrResult1 <= binaryData) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          ptrVar = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          result1 = (ulong **)(ulong)DAT_0010b800;\n          functionPtr = (code *)ptrVar[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          ptrVar = ppuVar13[1];\n          functionPtr = (code *)ptrVar[0x41];\n        }\n        if (DAT_0010b800 != 0) goto LAB_00104be2;\n        DAT_0010b778 = DAT_0010b80c != 0;\n        DAT_0010b780 = ppuVar13;\n        DAT_0010b770 = (ulong **)(*functionPtr)(ppuVar13);\n        DAT_0010b768 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = localArray[0];\n        if ((DAT_0010b770 != (ulong **)0x0) && (DAT_0010b768 != (ulong **)0x0)) {\n          ptrResult1 = (ulong **)(ulong)localVar1;\n          if (DAT_0010b7f8 != 0) {\n            flag2 = DAT_0010b80c != 0;\n            qsort(localArray[0],(size_t)ppuVar14,(size_t)ptrResult1,validate_binary_files_00102fd2);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = DAT_0010b770;\n            binaryData = DAT_0010b768;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)ptrResult1 + (long)ppuVar12);\n            ptrResult2 = DAT_0010b770;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            result2 = DAT_0010b768;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,flag2,ppuVar12);\n            result1 = ptrResult1;\n            ptrStack = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localArray[0],(size_t)ppuVar14,(size_t)ptrResult1,\n                (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n          ptrVar = ppuVar13[1];\nLAB_00104be2:\n          binaryData = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        print_error_00106530(*ppuVar13);\n        binaryData = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          ptrResult1 = (ulong **)(*(code *)binaryData[1][0x6b])(binaryData,unaff_RBX);\n          ptrResult2 = ppuVar17;\n          if (-1 < (long)ptrResult1) break;\n          ppuVar13 = (ulong **)*binaryData;\n          ppuVar14 = (ulong **)print_error_00106530(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          ptrVar = ppuVar14[2];\n          ptrResult2 = (ulong **)0x0;\nLAB_00102dc4:\n          ptrVar = (ulong *)((long)ptrResult1[8] - (long)ptrVar);\n          ppuVar18 = binaryData;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = ptrResult2;\n          ppuVar12 = unaff_RBX;\n          binaryData = result2;\n          if (ptrVar != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = ptrVar;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          result2 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)ptrStack >> 4);\n          qsort(ptrStack,(size_t)ppuVar14,0x10,compare_and_execute_00103533);\n          ptrVar = ppuVar13[1];\n          binaryData = ppuVar13;\n          ppuVar18 = ptrStack;\nLAB_00104be5:\n          unaff_RBX = localArray[0];\n          ptrResult1 = (ulong **)(ulong)DAT_0010b7f8;\n          unaff_R14 = (ulong **)(ulong)(DAT_0010b80c != 0);\n          if (DAT_0010b7f8 != 0) {\n            ppuVar17 = (ulong **)(*(code *)ptrVar[0x41])(binaryData);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          ptrResult1 = (ulong **)(ulong)localVar1;\n          unaff_R15 = (ulong **)(*(code *)ptrVar[0x41])(binaryData);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)ptrResult1 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          print_error_00106530(*binaryData);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          ptrResult2 = ptrResult1;\n          if (DAT_0010b80c != 0) {\n            unaff_RBX = localArray[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          longVar2 = (*(code *)binaryData[1][0x6a])(binaryData);\n          ppuVar14 = localArray[0];\n          ppuVar17 = ptrResult1;\n          ppuVar12 = unaff_R15;\n          if (longVar2 < 1) {\n            ptrResult1 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        result2 = &localVar2;\n        result1 = unaff_RBX;\n        longVar2 = (*(code *)binaryData[1][0x6c])(binaryData,ppuVar17,ppuVar14,ptrResult1);\n        ptrResult1 = ptrResult2;\n        if (0 < longVar2) {\n          ptrResult1 = (ulong **)((long)ptrResult2 + longVar2);\n          localArray[0] = (ulong **)xrealloc(localArray[0]);\n          longVar = 0;\n          do {\n            localArray[0][(long)ptrResult2 + longVar] = localVar2 + longVar * 6;\n            longVar = longVar + 1;\n          } while (longVar2 != longVar);\n          localArray[0][(long)ptrResult2 + longVar2] = (ulong *)0x0;\n        }\n        if ((DAT_0010b80c == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        flag1 = *(byte *)((long)binaryData + 0x4a);\n        ppuVar13 = binaryData;\n      } while( true );\n    }\n  }\n  if (_DAT_0010b810 == 0) {\n    ptrVar = *binaryData;\n    uIntVar = dcgettext(0,\"%s: no symbols\",5);\n    print_error_message_00106400(uIntVar,ptrVar);\n  }\n  return;\ncode_r0x00104b01:\n  binaryData = (ulong **)((long)binaryData + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)result1);\n  if (unaff_R14 <= unaff_RBX) {\n    ptrResult1 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    ptrResult2 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = binaryData;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      ptrVar = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    ptrVar = ppuVar14[2];\n    if ((*(byte *)((long)ptrResult1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  ptrResult1 = binaryData;\n  ppuVar15 = result1;\n  ppuVar16 = result2;\n  ptrResult2 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (ptrResult2 == (ulong **)0x0) goto LAB_00102edb;\n  ptrResult1 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (localVar2 == (ulong *)0x0) {\n      free(localArray[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(localVar2);\n    free(localArray[0]);\n    free(ppuVar18);\n    return;\n  }\n  ptrResult1 = ppuVar17;\n  longVar2 = (*(code *)binaryData[1][0x4e])(binaryData,unaff_R14,*ppuVar14);\n  if (longVar2 == 0) goto LAB_00102ec9;\n  ptrResult1 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  print_info_00105110(binaryData,longVar2,*ptrResult1,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  print_error_00106530(*binaryData,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*binaryData;\n  print_error_00106530();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = result1;\n  ppuVar16 = result2;\nLAB_00102edb:\n  result2 = ppuVar16;\n  result1 = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  ptrResult2 = (ulong **)print_error_00106530();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  ptrVar = ppuVar14[2];\nLAB_00102ee7:\n  if (ptrResult1 != (ulong **)ptrResult2[4]) goto LAB_00102dc4;\n  ptrVar = (ulong *)((long)ptrResult2[2] - (long)ptrVar);\n  ppuVar18 = binaryData;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (ptrResult2 = unaff_R15, longVar2 = (*(code *)binaryData[1][0x4e])(binaryData,unaff_R14,unaff_RBX),\n        longVar2 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)ptrResult1);\n    print_info_00105110(binaryData,longVar2,0,param2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  print_error_00106530(*binaryData);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  print_error_00106530(*binaryData);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  print_error_00106530(*ppuVar13);\n  ppuVar13 = binaryData;\nLAB_00102eb9:\n  print_error_00106530(*ppuVar13);\n  binaryData = result2;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  result1 = ptrResult1;\n  ppuVar18 = ptrResult2;\n  ptrStack = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "bfd_get_error",
                "dcgettext",
                "FUN_00106530",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "analyze_binary_001048e0"
        },
        "fprintf": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "FUN_001063a0",
                "FUN_00103ca0",
                "FUN_00103b5d",
                "FUN_001055f0",
                "FUN_00106540",
                "FUN_00102450"
            ],
            "imported": false,
            "current_name": "fprintf"
        },
        "memcpy": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memcpy"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "_FINI_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "targetAddress"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(targetAddress *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "fflush": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "FUN_001063a0",
                "FUN_00103b5d",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "fflush"
        },
        "bfd_get_reloc_upper_bound": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "FUN_00103c00"
            ],
            "imported": false,
            "current_name": "bfd_get_reloc_upper_bound"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_if_flag_set_001062d0",
                "param_1": "message"
            },
            "code": "\n\n\nvoid printIfFlagSet_001062d0(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_flag_set_001062d0"
        },
        "bfd_openr_next_archived_file": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_openr_next_archived_file"
        },
        "caseD_4a": {
            "renaming": {},
            "code": "\nvoid switchD_00104393::caseD_4a(undefined8 param_1,undefined8 param_2)\n\n{\n  initialize_global_variable_00104397(param_1,param_2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "FUN_00104370"
            ],
            "imported": false,
            "current_name": "caseD_4a"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "find_and_print_matching_00103238",
                "__ptr": "sectionPointer",
                "__s1": "sectionName",
                "plVar1": "symbolPointer",
                "lVar2": "symbolAddress",
                "cVar3": "resultChar",
                "iVar4": "strcmpResult",
                "unaff_RBX": "sectionsArray",
                "pvVar5": "sectionArrayPointer",
                "uVar6": "sectionIndex",
                "unaff_R13": "fileHeader",
                "lVar7": "symbolIndex",
                "param_10": "symbolValue",
                "param_12": "sectionName",
                "_stdout": "standardOutput"
            },
            "code": "\n\n\nvoid findAndPrintMatching_00103238(void)\n\n{\n  long *symbolPointer;\n  void *sectionPointer;\n  char *sectionName;\n  long symbolAddress;\n  char resultChar;\n  int strcmpResult;\n  long sectionsArray;\n  void *sectionArrayPointer;\n  uint sectionIndex;\n  long fileHeader;\n  long symbolIndex;\n  ulong symbolValue;\n  void *sectionName;\n  \n  sectionArrayPointer = DAT_0010b750;\n  if (_DAT_0010b7b0 == fileHeader) {\n    if (DAT_0010b750 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    sectionIndex = 0;\n    if (DAT_0010b750 != (void *)0x0) {\n      for (; sectionIndex < DAT_0010b748; sectionIndex = sectionIndex + 1) {\n        sectionPointer = *(void **)((long)sectionArrayPointer + (ulong)sectionIndex * 8);\n        if (sectionPointer != (void *)0x0) {\n          free(sectionPointer);\n        }\n      }\n      free(DAT_0010b740);\n      free(sectionArrayPointer);\n      free(DAT_0010b738);\n      DAT_0010b740 = (void *)0x0;\n      DAT_0010b750 = (void *)0x0;\n      DAT_0010b738 = (void *)0x0;\n    }\n  }\n  DAT_0010b748 = *(uint *)(fileHeader + 0xa0);\n  DAT_0010b740 = (void *)xmalloc((ulong)DAT_0010b748 * 8);\n  DAT_0010b750 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  DAT_0010b738 = (void *)xmalloc((ulong)DAT_0010b748 << 3);\n  sectionName = DAT_0010b740;\n  bfd_map_over_sections();\n  _DAT_0010b7b0 = fileHeader;\nLAB_00103296:\n  sectionName = *(char **)(sectionsArray + 8);\n  sectionIndex = 0;\n  do {\n    if (DAT_0010b748 <= sectionIndex) {\n      putc(10,standardOutput);\n      return;\n    }\n    sectionArrayPointer = DAT_0010b738;\n    for (symbolIndex = 0; symbolPointer = (long *)((long)sectionArrayPointer + (ulong)sectionIndex * 8),\n        *symbolPointer != symbolIndex && symbolIndex <= *symbolPointer; symbolIndex = symbolIndex + 1) {\n      symbolPointer = **(long ***)(*(long *)((long)DAT_0010b750 + (ulong)sectionIndex * 8) + symbolIndex * 8);\n      if ((((symbolPointer != (long *)0x0) &&\n           (symbolAddress = *symbolPointer, *(long *)(symbolAddress + 0x20) == *(long *)(sectionsArray + 0x20))) &&\n          (*(long *)(symbolAddress + 0x10) == *(long *)(sectionsArray + 0x10))) &&\n         (((strcmpResult = strcmp(sectionName,*(char **)(symbolAddress + 8)), strcmpResult == 0 &&\n           (resultChar = (**(code **)(*(long *)(fileHeader + 8) + 0x240))(), sectionArrayPointer = DAT_0010b738,\n           resultChar != '\\0')) && (sectionName != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",sectionName,symbolValue >> 0x20);\n        sectionIndex = DAT_0010b748;\n        break;\n      }\n    }\n    sectionIndex = sectionIndex + 1;\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103c00",
                "bfd_map_over_sections",
                "free",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "find_and_print_matching_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_message_001036e0",
                "param_1": "sourceName",
                "param_2": "defaultMessage"
            },
            "code": "\nvoid printMessage_001036e0(undefined8 *sourceName,undefined8 *defaultMessage)\n\n{\n  if (sourceName != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*sourceName);\n    return;\n  }\n  printf(\"%s: \",*defaultMessage);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "FUN_001064a0"
            ],
            "imported": false,
            "current_name": "print_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_output_001047d0",
                "unaff_RBX": "reallocated_buffer",
                "unaff_R12": "output_flag",
                "unaff_R13": "formatted_output",
                "unaff_R14": "format_string",
                "unaff_R15": "parameter_1",
                "pcVar1": "function_result"
            },
            "code": "\nvoid print_formatted_output_001047d0(void)\n\n{\n  char *function_result;\n  void *reallocated_buffer;\n  undefined *output_flag;\n  void *formatted_output;\n  char *format_string;\n  long parameter_1;\n  \n  if (((DAT_0010b234 != 0) &&\n      (function_result = (char *)(**(code **)(*(long *)(parameter_1 + 8) + 0x220))(), function_result != (char *)0x0))\n     && (*function_result != '\\0')) {\n    reallocated_buffer = (void *)reconcat();\n    formatted_output = reallocated_buffer;\n  }\n  printf(format_string,formatted_output);\n  if (output_flag != (undefined *)0x0) {\n    *output_flag = 0x40;\n  }\n  free(reallocated_buffer);\n  return;\n}\n\n",
            "called": [
                "printf",
                "reconcat",
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_0010268b",
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_formatted_output_001047d0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_warning_message_0010249f",
                "uVar1": "warning_message",
                "dcgettext": "gettext",
                "print_error_message_00106400": "print_error_message"
            },
            "code": "\nundefined8 print_warning_message_0010249f(void)\n\n{\n  undefined8 warning_message;\n  \n  warning_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  print_error_message(warning_message);\n  return 0;\n}\n\n",
            "called": [
                "dcgettext",
                "FUN_00106400"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_warning_message_0010249f"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "analyze_binary_001043d0",
                "param_1": "filePath",
                "cVar1": "formatCheckResult",
                "iVar2": "returnCode",
                "uVar3": "returnValue",
                "piVar4": "errnoLocation",
                "uVar5": "errorMessage",
                "puVar6": "bfdHandle",
                "puVar9": "fileHandle",
                "puVar10": "previousFileHandle",
                "lVar7": "mapEntry",
                "pcVar8": "errorString",
                "local_c8": "fileStat"
            },
            "code": "\n\n\nundefined4 analyzeBinary_001043d0(char *filePath)\n\n{\n  char formatCheckResult;\n  int returnCode;\n  undefined4 returnValue;\n  int *errnoLocation;\n  undefined8 errorMessage;\n  undefined8 *bfdHandle;\n  long mapEntry;\n  char *errorString;\n  undefined8 *fileHandle;\n  undefined8 *previousFileHandle;\n  stat fileStat;\n  \n  if (filePath != (char *)0x0) {\n    returnCode = stat(filePath,&fileStat);\n    if (returnCode < 0) {\nLAB_00102522:\n      errnoLocation = __errno_location();\n      if (*errnoLocation == 2) {\n        errorMessage = dcgettext(0,\"\\'%s\\': No such file\",5);\n        print_error_message_00106400(errorMessage,filePath);\n      }\n      else {\n        errorString = strerror(*errnoLocation);\n        errorMessage = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        print_error_message_00106400(errorMessage,filePath,errorString);\n      }\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x4000) {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      print_error_message_00106400(errorMessage,filePath);\n    }\n    else if ((fileStat.st_mode & 0xf000) == 0x8000) {\n      if (fileStat.st_size < 0) {\n        errorMessage = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        print_error_message_00106400(errorMessage,filePath);\n      }\n      else if (fileStat.st_size != 0) {\n        if (DAT_0010b7d0 == 0) {\n          bfdHandle = (undefined8 *)bfd_openr(filePath,\"plugin\");\n        }\n        else {\n          bfdHandle = (undefined8 *)bfd_openr(filePath);\n        }\n        if (bfdHandle != (undefined8 *)0x0) {\n          if (DAT_0010b804 != 0) {\n            *(uint *)((long)bfdHandle + 0x44) = *(uint *)((long)bfdHandle + 0x44) | 0x8000;\n          }\n          formatCheckResult = bfd_check_format(bfdHandle,2);\n          if (formatCheckResult == '\\0') {\n            returnValue = bfd_check_format_matches(bfdHandle,1,&fileStat);\n            if ((char)returnValue == '\\0') goto LAB_001025ac;\n            evaluate_architecture_size_00104670(bfdHandle);\n            (**(code **)PTR_PTR_FUN_0010b260)(filePath);\n            analyze_binary_001048e0(bfdHandle,0);\n          }\n          else {\n            (**(code **)(PTR_PTR_FUN_0010b260 + 8))(*bfdHandle);\n            if ((_DAT_0010b7f0 != 0) &&\n               (mapEntry = bfd_get_next_mapent(bfdHandle,0xffffffffffffffff,&fileStat), mapEntry != -1)) {\n              errorString = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(errorString);\n              do {\n                fileHandle = (undefined8 *)(**(code **)(bfdHandle[1] + 0x1e0))(bfdHandle,mapEntry);\n                if (fileHandle == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)fileStat.st_dev != 0) {\n                  print_formatted_output_00104740(&DAT_0010712d,0,*(long *)fileStat.st_dev,bfdHandle);\n                  printf(\" in %s\\n\",*fileHandle);\n                }\n                mapEntry = bfd_get_next_mapent(bfdHandle,mapEntry,&fileStat);\n              } while (mapEntry != -1);\n            }\n            fileHandle = (undefined8 *)0x0;\n            do {\n              do {\n                previousFileHandle = fileHandle;\n                fileHandle = (undefined8 *)bfd_openr_next_archived_file(bfdHandle,previousFileHandle);\n                if (fileHandle == (undefined8 *)0x0) {\n                  returnCode = bfd_get_error();\n                  if (returnCode != 9) {\n                    print_error_00106530(*bfdHandle);\nLAB_00102516:\n                    print_error_00106530(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (previousFileHandle != (undefined8 *)0x0) {\n                    bfd_close(previousFileHandle);\n                    _DAT_0010b7b8 = 0;\n                    _DAT_0010b7b0 = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                formatCheckResult = bfd_check_format_matches(fileHandle,1,&fileStat);\n                if (formatCheckResult == '\\0') {\n                  print_error_00106540(*fileHandle);\n                  returnCode = bfd_get_error();\n                  if (returnCode == 0xd) {\n                    print_matching_formats_00103b5d(fileStat.st_dev);\n                  }\n                }\n                else {\n                  evaluate_architecture_size_00104670(fileHandle);\n                  (**(code **)(PTR_PTR_FUN_0010b260 + 0x10))(*bfdHandle,*fileHandle);\n                  analyze_binary_001048e0(fileHandle,bfdHandle);\n                }\n              } while (previousFileHandle == (undefined8 *)0x0);\n              bfd_close(previousFileHandle);\n              _DAT_0010b7b8 = 0;\n              _DAT_0010b7b0 = 0;\n            } while (previousFileHandle != fileHandle);\n          }\nLAB_001044b4:\n          returnValue = 1;\n          while (formatCheckResult = bfd_close(bfdHandle), formatCheckResult == '\\0') {\n            print_error_00106530(filePath);\nLAB_001025ac:\n            print_error_00106540(filePath);\n            returnCode = bfd_get_error();\n            if (returnCode == 0xd) {\n              print_matching_formats_00103b5d(fileStat.st_dev);\n            }\n          }\n          _DAT_0010b7b0 = 0;\n          _DAT_0010b7b8 = 0;\n          return returnValue;\n        }\n        print_error_00106540(filePath);\n      }\n    }\n    else {\n      errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      print_error_message_00106400(errorMessage,filePath);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "bfd_openr",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "printf",
                "FUN_00102670",
                "FUN_00103b5d",
                "FUN_00106530",
                "FUN_00106540",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "FUN_0010351b",
                "bfd_get_error",
                "strerror",
                "FUN_0010249f",
                "dcgettext",
                "FUN_001062d0",
                "FUN_001048e0",
                "__errno_location",
                "FUN_00106400",
                "FUN_00104740",
                "FUN_00104670",
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "analyze_binary_001043d0"
        },
        "isatty": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "isatty"
        },
        "bfd_demangle": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "bfd_demangle"
        },
        "sprintf": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "sprintf"
        },
        "_INIT_0": {
            "renaming": {},
            "code": "\nvoid _INIT_0(void)\n\n{\n  FUNC_00105560();\n  return;\n}\n\n",
            "called": [
                "FUN_00105560"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "_INIT_0"
        },
        "strlen": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "FUN_00103ca0",
                "FUN_00102fd2",
                "FUN_001055f0",
                "FUN_0010268b"
            ],
            "imported": false,
            "current_name": "strlen"
        },
        "bfd_map_over_sections": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "FUN_00103238"
            ],
            "imported": false,
            "current_name": "bfd_map_over_sections"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_strings_001025f5",
                "param_1": "firstString",
                "param_2": "secondString"
            },
            "code": "\nvoid concatenateStrings_001025f5(undefined8 firstString,undefined8 secondString)\n\n{\n  DAT_0010b7a0 = concat(&DAT_001071d7,secondString,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "concatenate_strings_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "print_if_flag_set_00102670",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_flag_set_00102670(undefined8 message)\n\n{\n  if (_DAT_0010b7c4 != 0) {\n    printf(\"\\n%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_flag_set_00102670"
        },
        "bfd_plugin_set_plugin": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_plugin"
        },
        "__errno_location": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "FUN_00103729",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "__errno_location"
        },
        "xrealloc": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "xrealloc"
        },
        "xmalloc_set_program_name": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "xmalloc_set_program_name"
        },
        "strcmp": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_00104670",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "strcmp"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "_DT_FINI": {
            "renaming": {},
            "code": "\nvoid _DT_FINI(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "_DT_FINI"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "compare_strings_00104fa0",
                "param_1": "str1",
                "param_2": "str2",
                "__s2": "string2",
                "__s1": "string1",
                "uVar1": "comparison_result",
                "lVar2": "ptr_result1",
                "lVar3": "ptr_result2"
            },
            "code": "\nuint compare_strings_00104fa0(undefined8 str1,undefined8 str2)\n\n{\n  char *string2;\n  char *string1;\n  uint comparison_result;\n  long ptr_result1;\n  long ptr_result2;\n  \n  ptr_result1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,str1,DAT_0010b770);\n  ptr_result2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,str2,DAT_0010b768);\n  if ((ptr_result1 == 0) || (ptr_result2 == 0)) {\n    print_error_00106530(*DAT_0010b780);\n  }\n  else {\n    string2 = *(char **)(ptr_result2 + 8);\n    string1 = *(char **)(ptr_result1 + 8);\n    if (string2 == (char *)0x0) {\n      return (uint)(string1 != (char *)0x0);\n    }\n    if (string1 != (char *)0x0) {\n      if (*string2 == '\\0') {\n        return (uint)(*string1 != '\\0');\n      }\n      if (*string1 == '\\0') {\n        return 0xffffffff;\n      }\n      comparison_result = strcoll(string1,string2);\n      return comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "FUN_00102f9f",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "FUN_00103bf6",
                "FUN_00105050",
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "compare_strings_00104fa0"
        },
        "bfd_is_undefined_symclass": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729"
            ],
            "imported": false,
            "current_name": "bfd_is_undefined_symclass"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_formatted_message_001064a0",
                "param_1": "header",
                "param_2": "message"
            },
            "code": "\nvoid printFormattedMessage_001064a0(undefined8 *header,undefined8 *message)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (header != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*header);\n    return;\n  }\n  printf(\"%s: \",*message);\n  return;\n}\n\n",
            "called": [
                "FUN_001036e0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_formatted_message_001064a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "symType",
                "iVar3": "asprintfStatus",
                "plVar4": "formatInfo",
                "piVar5": "errnoPtr",
                "uVar6": "errorMsg",
                "lVar7": "symInfo",
                "uVar8": "symbolCount",
                "bVar9": "dataType",
                "uVar10": "symbolIndex",
                "pcVar11": "dataTypeStr"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort symType;\n  int asprintfStatus;\n  long *formatInfo;\n  int *errnoPtr;\n  undefined8 errorMsg;\n  long symInfo;\n  ulong symbolCount;\n  byte dataType;\n  ulong symbolIndex;\n  char *dataTypeStr;\n  undefined8 in_R8;\n  undefined8 in_R9;\n  \n  symbolCount = (ulong)DAT_0010b7a8;\n  if ((DAT_0010b7a8 - 0x20 & 0xffffffdf) == 0) {\n    printf(DAT_0010b7a0,symbol);\n    return;\n  }\n  formatInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  symbolIndex = symbolCount;\n  print_and_exit_00106300(formatInfo,symbolCount);\n  print_formatted_output_00104740(\"%-20s|\",formatInfo,0,symbolIndex,in_R8,in_R9,symbolCount);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*formatInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*formatInfo);\n  }\n  else if (DAT_0010b7a8 == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*formatInfo + 8));\n  if (*(char *)(*formatInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*formatInfo + 0x20));\n    printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*formatInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (formatInfo[2] == 0) {\n    if (formatInfo[3] != 0) {\n      symInfo = *(long *)(formatInfo[3] + 0x30);\n      isUndefined = *(char *)(symInfo + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        dataTypeStr = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        dataTypeStr = \"Block\";\n      }\n      else if (*(ushort *)(symInfo + 0x26) == 0) {\n        dataTypeStr = \"None\";\n      }\n      else {\n        symType = *(ushort *)(symInfo + 0x26) >> 4 & 3;\n        if (symType == 2) {\n          dataTypeStr = \"Function\";\n        }\n        else if (symType == 3) {\n          dataTypeStr = \"Array\";\n        }\n        else {\n          if (symType != 1) {\n            free(DAT_0010b730);\n            symType = *(ushort *)(symInfo + 0x26);\n            dataType = *(byte *)(symInfo + 0x28);\n            dataTypeStr = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfStatus = asprintf(&DAT_0010b730,dataTypeStr,(ulong)dataType,(ulong)symType);\n            dataTypeStr = DAT_0010b730;\n            goto joined_r0x00103964;\n          }\n          dataTypeStr = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    dataType = *(byte *)(formatInfo[2] + 0x48) & 0xf;\n    switch(dataType) {\n    case 0:\n      dataTypeStr = \"NOTYPE\";\n      break;\n    case 1:\n      dataTypeStr = \"OBJECT\";\n      break;\n    case 2:\n      dataTypeStr = \"FUNC\";\n      break;\n    case 3:\n      dataTypeStr = \"SECTION\";\n      break;\n    case 4:\n      dataTypeStr = \"FILE\";\n      break;\n    case 5:\n      dataTypeStr = \"COMMON\";\n      break;\n    case 6:\n      dataTypeStr = \"TLS\";\n      break;\n    default:\n      free(DAT_0010b728);\n      dataTypeStr = \"<processor specific>: %d\";\n      if ((2 < dataType - 0xd) && (dataTypeStr = \"<OS specific>: %d\", 2 < dataType - 10)) {\n        dataTypeStr = \"<unknown>: %d\";\n      }\n      dataTypeStr = (char *)dcgettext(0,dataTypeStr,5);\n      asprintfStatus = asprintf(&DAT_0010b728,dataTypeStr,(ulong)dataType);\n      dataTypeStr = DAT_0010b728;\njoined_r0x00103964:\n      if (asprintfStatus < 0) {\n        errnoPtr = __errno_location();\n        errorMsg = xstrerror(*errnoPtr);\n        print_and_exit_00106300(&DAT_0010712d,errorMsg);\nLAB_00103983:\n        dataTypeStr = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",dataTypeStr);\n  }\n  if (formatInfo[2] == 0) {\n    if (formatInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (DAT_0010b7a8 == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(formatInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  symInfo = formatInfo[2];\n  if ((symInfo != 0) || (symInfo = formatInfo[3], symInfo != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symInfo + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_0010370a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_0010651a"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "cplus_demangle_name_to_style": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "cplus_demangle_name_to_style"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_data_001053b0",
                "param_1": "message1",
                "param_2": "message2",
                "param_3": "param3",
                "param_4": "param4",
                "printf": "printFormatted"
            },
            "code": "\nvoid printData_001053b0(undefined8 *message1,undefined8 *message2,undefined8 param3,undefined8 param4)\n\n{\n  if (DAT_0010b818 == 0) {\n    return;\n  }\n  if (message1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*message1);\n  }\n  printf(\"%s:\",*message2,param4);\n  return;\n}\n\n",
            "called": [
                "FUN_00103573"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_data_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "analyze_binary_001055f0",
                "param_1": "num_files",
                "param_2": "file_paths",
                "pbVar1": "ptr1",
                "bVar2": "byte_var",
                "bVar3": "bool_var1",
                "bVar4": "bool_var2",
                "bVar5": "bool_var3",
                "cVar6": "char_var1",
                "bVar7": "byte_var2",
                "cVar8": "char_var2",
                "cVar9": "char_var3",
                "iVar10": "int_var1",
                "uVar11": "uint_var",
                "iVar12": "int_var2",
                "uVar13": "uint_var2",
                "uVar14": "uint_var3",
                "__stream": "file_stream",
                "__s": "byte_array",
                "piVar15": "int_ptr1",
                "sVar16": "size",
                "__ptr": "byte_ptr",
                "__src": "long_ptr",
                "lVar17": "long_var1",
                "plVar18": "file_paths_ptr",
                "plVar19": "long_ptr2",
                "uVar20": "undefined8_var1",
                "uVar21": "undefined8_var2",
                "pcVar22": "string_var",
                "pbVar23": "byte_ptr2",
                "unaff_RBP": "return_ptr",
                "lVar24": "long_var2",
                "pbVar25": "byte_ptr3",
                "pcVar26": "string_var2",
                "unaff_R12": "int_ptr2",
                "piVar27": "int_ptr3",
                "local_110": "local_var1",
                "local_10c": "local_var2",
                "local_108": "local_var3",
                "local_c8": "local_stat"
            },
            "code": "\n\n\nundefined ** analyze_binary_001055f0(int num_files,long *file_paths)\n\n{\n  byte *ptr1;\n  byte byte_var;\n  bool bool_var1;\n  bool bool_var2;\n  bool bool_var3;\n  char char_var1;\n  byte byte_var2;\n  char char_var2;\n  char char_var3;\n  int int_var1;\n  uint uint_var;\n  int int_var2;\n  undefined4 uint_var2;\n  undefined4 uint_var3;\n  FILE *file_stream;\n  byte *byte_array;\n  int *int_ptr1;\n  size_t size;\n  byte *byte_ptr;\n  long *long_ptr;\n  long long_var1;\n  long *file_paths_ptr;\n  long *long_ptr2;\n  undefined8 undefined8_var1;\n  undefined8 undefined8_var2;\n  char *string_var;\n  byte *byte_ptr2;\n  undefined **return_ptr;\n  long long_var2;\n  byte *byte_ptr3;\n  char *string_var2;\n  int *int_ptr2;\n  int *int_ptr3;\n  int local_var1;\n  int local_var2;\n  size_t local_var3;\n  stat local_stat;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  string_var = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  DAT_0010b820 = *file_paths;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(DAT_0010b820);\n  bfd_plugin_set_program_name(DAT_0010b820);\n  file_paths_ptr = file_paths;\n  if (1 < num_files) {\n    local_var2 = 2000;\n    int_ptr2 = (int *)0x1;\n    local_var1 = 0;\n    do {\n      int_var2 = (int)int_ptr2;\n      return_ptr = (undefined **)(long)int_var2;\n      int_ptr3 = (int *)((long)return_ptr * 8);\n      if (*(char *)file_paths_ptr[(long)return_ptr] != '@') goto LAB_00105a70;\n      local_var2 = local_var2 + -1;\n      if (local_var2 == 0) {\n        long_var2 = *file_paths_ptr;\n        string_var2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      string_var = (char *)file_paths_ptr[(long)return_ptr] + 1;\n      int_var1 = stat(string_var,&local_stat);\n      if (int_var1 < 0) {\nLAB_00105a70:\n        if (num_files <= int_var2 + 1) break;\nLAB_00105a7a:\n        uint_var = int_var2 + 1;\n        local_var1 = int_var2;\n      }\n      else {\n        if ((local_stat.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        file_stream = fopen(string_var,\"r\");\n        if (file_stream == (FILE *)0x0) goto LAB_00105a70;\n        int_var1 = fseek(file_stream,0,2);\n        if (((int_var1 == -1) ||\n            (string_var = (char *)ftell(file_stream), (int *)string_var == (int *)0xffffffffffffffff)) ||\n           (int_var1 = fseek(file_stream,0,0), int_var1 == -1)) {\nLAB_00105ad0:\n          fclose(file_stream);\n          if (int_var2 + 1 < num_files) goto LAB_00105a7a;\n          break;\n        }\n        byte_array = (byte *)xmalloc((char *)((long)string_var + 1));\n        int_ptr1 = (int *)fread(byte_array,1,(size_t)string_var,file_stream);\n        if (((int *)string_var != int_ptr1) && (int_var1 = ferror(file_stream), int_var1 != 0)) {\n          free(byte_array);\n          goto LAB_00105ad0;\n        }\n        byte_array[(long)int_ptr1] = 0;\n        byte_var2 = *byte_array;\n        byte_ptr2 = byte_array;\n        if (byte_var2 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) goto LAB_001057c0;\n          size = strlen((char *)byte_array);\n          byte_ptr = (byte *)xmalloc(size + 1);\n          int_var1 = 0;\n          bool_var3 = false;\n          bool_var1 = false;\n          long_var2 = 0;\n          long_ptr = (long *)0x0;\n          bool_var2 = false;\n          byte_ptr2 = byte_array;\n          do {\n            while (((&_sch_istable)[(ulong)*byte_ptr2 * 2] & 0x40) != 0) {\n              byte_ptr2 = byte_ptr2 + 1;\n            }\n            if ((int_var1 == 0) || (long_ptr2 = long_ptr + long_var2, int_var1 + -1 <= (int)long_var2)) {\n              if (long_ptr == (long *)0x0) {\n                int_var1 = 8;\n                long_ptr = (long *)xmalloc(0x40);\n                long_ptr2 = long_ptr + long_var2;\n                *long_ptr2 = 0;\n              }\n              else {\n                int_var1 = int_var1 * 2;\n                long_ptr = (long *)xrealloc(long_ptr,(long)int_var1 << 3);\n                long_ptr2 = long_ptr + long_var2;\n                *long_ptr2 = 0;\n              }\n            }\n            byte_var2 = *byte_ptr2;\n            byte_ptr3 = byte_ptr;\n            while (byte_var2 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byte_var2 * 2] & 0x40) != 0) &&\n                   (!(bool)(bool_var3 | bool_var2 | bool_var1))) {\n                  bool_var2 = false;\n                  bool_var3 = false;\n                  bool_var1 = false;\n                  goto LAB_001058e0;\n                }\n                if (!bool_var2) break;\n                byte_ptr2 = byte_ptr2 + 1;\n                *byte_ptr3 = byte_var2;\n                byte_ptr3 = byte_ptr3 + 1;\n                bool_var2 = false;\n                byte_var2 = *byte_ptr2;\n                if (byte_var2 == 0) goto LAB_001058e0;\n              }\n              if (byte_var2 == 0x5c) {\n                bool_var2 = true;\n              }\n              else if (bool_var1) {\n                if (byte_var2 == 0x27) {\n                  bool_var1 = false;\n                }\n                else {\nLAB_00105a55:\n                  *byte_ptr3 = byte_var2;\n                  byte_ptr3 = byte_ptr3 + 1;\n                }\n              }\n              else if (bool_var3) {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = false;\n              }\n              else if (byte_var2 == 0x27) {\n                bool_var1 = true;\n              }\n              else {\n                if (byte_var2 != 0x22) goto LAB_00105a55;\n                bool_var3 = true;\n              }\n              ptr1 = byte_ptr2 + 1;\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var2 = *ptr1;\n            }\nLAB_001058e0:\n            *byte_ptr3 = 0;\n            long_var1 = xstrdup(byte_ptr);\n            *long_ptr2 = long_var1;\n            long_ptr[long_var2 + 1] = 0;\n            byte_var2 = *byte_ptr2;\n            byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            while ((byte_var & 0x40) != 0) {\n              byte_var2 = byte_ptr2[1];\n              byte_ptr2 = byte_ptr2 + 1;\n              byte_var = (&_sch_istable)[(ulong)byte_var2 * 2];\n            }\n            long_var2 = long_var2 + 1;\n          } while (byte_var2 != 0);\n          free(byte_ptr);\n          long_ptr2 = file_paths_ptr;\n          if (file_paths == file_paths_ptr) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        long_ptr = (long *)xmalloc(8);\n        *long_ptr = 0;\n        if (file_paths == file_paths_ptr) {\nLAB_00105c79:\n          if (*file_paths_ptr == 0) {\n            int_var1 = 0;\n          }\n          else {\n            long_var2 = 1;\n            do {\n              int_var1 = (int)long_var2;\n              long_ptr2 = file_paths_ptr + long_var2;\n              long_var2 = long_var2 + 1;\n            } while (*long_ptr2 != 0);\n          }\n          long_var1 = 0;\n          long_ptr2 = (long *)xmalloc((long)(int_var1 + 1) << 3);\n          long_var2 = *file_paths_ptr;\n          while (long_var2 != 0) {\n            undefined8_var1 = xstrdup();\n            *(undefined8 *)((long)long_ptr2 + long_var1) = undefined8_var1;\n            long_var1 = long_var1 + 8;\n            long_var2 = *(long *)((long)file_paths_ptr + long_var1);\n          }\n          *(undefined8 *)((long)long_ptr2 + long_var1) = 0;\nLAB_0010597d:\n          file_paths_ptr = long_ptr2;\n          if (*long_ptr == 0) goto LAB_00105d50;\n          string_var = (char *)0x0;\n          do {\n            string_var = (char *)((long)string_var + 1);\n          } while (long_ptr[(long)string_var] != 0);\n          local_var3 = (long)string_var * 8;\n        }\n        else {\nLAB_00105d50:\n          string_var = (char *)0x0;\n          local_var3 = 0;\n        }\n        free((void *)file_paths_ptr[(long)return_ptr]);\n        file_paths_ptr = (long *)xrealloc(file_paths_ptr,(long)((long)string_var + (long)num_files + 1) * 8);\n        int_var1 = num_files + -1 + (int)string_var;\n        memmove(file_paths_ptr + (long)(undefined **)((long)return_ptr + (long)string_var),\n                file_paths_ptr + 1 + (long)return_ptr,(long)(num_files - int_var2) << 3);\n        memcpy(file_paths_ptr + (long)return_ptr,long_ptr,local_var3);\n        free(long_ptr);\n        free(byte_array);\n        fclose(file_stream);\n        uint_var = local_var1 + 1;\n        return_ptr = (undefined **)((long)return_ptr + (long)string_var);\n        int_ptr2 = int_ptr3;\n        num_files = int_var1;\n        if (int_var1 <= (int)uint_var) break;\n      }\n      int_ptr2 = (int *)(ulong)uint_var;\n    } while( true );\n  }\n  int_var2 = bfd_init();\n  string_var2 = \"fatal error: libbfd ABI mismatch\";\n  if (int_var2 != 0x118) goto LAB_00106085;\n  return_ptr = &PTR_s_debug_syms_0010b280;\n  char_var2 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  string_var = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  int_ptr2 = (int *)\"x86_64-pc-linux-gnu\";\n  char_var3 = DAT_0010b23b;\n  char_var1 = DAT_0010b240;\n  uint_var3 = DAT_0010b244;\n  if (char_var2 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    DAT_0010b244 = uint_var3;\n    DAT_0010b240 = char_var1;\n    DAT_0010b23b = char_var3;\n    uint_var2 = getopt_long(num_files,file_paths_ptr,string_var);\n    int_ptr3 = _optarg;\n    int_ptr1 = (int *)string_var;\n    char_var3 = DAT_0010b23b;\n    char_var1 = DAT_0010b240;\n    uint_var3 = DAT_0010b244;\n    switch(uint_var2) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      print_symbols_00103ca0(_stderr,1);\n      int_ptr3 = int_ptr2;\nLAB_001061d5:\n      int_var2 = strcmp((char *)int_ptr3,\"l\");\n      if (int_var2 == 0) goto LAB_001061a3;\n      int_var2 = strcmp((char *)int_ptr3,\"escape\");\n      int_ptr2 = int_ptr3;\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_ptr3,\"e\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 2;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_ptr3,\"invalid\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_ptr3,\"i\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 5;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_ptr3,\"hex\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_ptr3,\"x\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      int_var2 = strcmp((char *)int_ptr3,\"highlight\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_ptr3,\"h\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 4;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n        goto switchD_00105c5a_caseD_0;\n      }\n      string_var2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      DAT_0010b818 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      initialize_output_format_00104370(&DAT_00107033);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      DAT_0010b80c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      print_symbols_00103ca0(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      int_ptr2 = (int *)&optarg;\n      DAT_0010b814 = 1;\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (_optarg != (int *)0x0) {\n        int_var2 = cplus_demangle_name_to_style();\n        int_ptr1 = _optarg;\n        if (int_var2 == 0) {\n          undefined8_var1 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          print_and_exit_00106300(undefined8_var1,int_ptr1);\nswitchD_00105c5a_caseD_cc:\n          DAT_0010b248 = DAT_0010b248 | 0x40000;\n          string_var = (char *)int_ptr1;\n          char_var3 = DAT_0010b23b;\n          char_var1 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n        else {\n          cplus_demangle_set_style();\n          char_var3 = DAT_0010b23b;\n          char_var1 = DAT_0010b240;\n          uint_var3 = DAT_0010b244;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      initialize_output_format_00104370(\"posix\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      DAT_0010b7ec = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      DAT_0010b7e4 = 1;\n      DAT_0010b7e8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      DAT_0010b7d8 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      int_var2 = strcmp((char *)_optarg,\"32_64\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      if (int_var2 != 0) {\n        string_var2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        undefined8_var1 = dcgettext(0,string_var2,5);\n        print_and_exit_00106300(undefined8_var1);\nswitchD_00105c5a_caseD_56:\n        DAT_0010b7dc = 1;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      DAT_0010b81c = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      initialize_output_format_00104370(_optarg);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      DAT_0010b808 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      initialize_output_format_00104370(\"just-symbols\");\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      DAT_0010b804 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      DAT_0010b7fc = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      DAT_0010b800 = 1;\n      DAT_0010b7fc = 0;\n      DAT_0010b7f8 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      DAT_0010b7f4 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      _DAT_0010b7f0 = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      char_var3 = *(char *)_optarg;\n      int_ptr2 = int_ptr3;\n      char_var1 = char_var3;\n      uint_var3 = 10;\n      if (char_var3 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < char_var3) {\n        if (char_var3 == 'o') {\n          uint_var3 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (char_var3 == 'x') {\n          uint_var3 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      string_var2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      DAT_0010b7e8 = 1;\n      DAT_0010b7e4 = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      DAT_0010b7d0 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      char_var3 = DAT_0010b23b;\n      char_var1 = DAT_0010b240;\n      uint_var3 = DAT_0010b244;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      DAT_0010b7f8 = 1;\n      DAT_0010b800 = 0;\n      DAT_0010b7fc = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      DAT_0010b248 = DAT_0010b248 & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      DAT_0010b7c8 = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      int_var2 = strcmp((char *)_optarg,\"default\");\n      if ((int_var2 == 0) || (int_var2 = strcmp((char *)int_ptr3,\"d\"), int_var2 == 0)) {\n        DAT_0010b7e0 = 0;\n        int_ptr2 = int_ptr3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      else {\n        int_var2 = strcmp((char *)int_ptr3,\"locale\");\n        if (int_var2 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        DAT_0010b7e0 = 1;\n        int_ptr2 = int_ptr3;\n        char_var3 = DAT_0010b23b;\n        char_var1 = DAT_0010b240;\n        uint_var3 = DAT_0010b244;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    undefined8_var1 = dcgettext(0,string_var2,5);\n    print_and_exit_00106300(undefined8_var1,int_ptr3);\nLAB_00105f13:\n    long_var2 = *file_paths_ptr;\n    string_var2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,string_var2,long_var2);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uint_var3 = bfd_get_error();\n  undefined8_var1 = bfd_errmsg(uint_var3);\n  undefined8_var2 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  print_and_exit_00106300(undefined8_var2,\"x86_64-pc-linux-gnu\",undefined8_var1);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byte_var2 = byte_ptr2[1];\n  byte_ptr2 = byte_ptr2 + 1;\n  if (byte_var2 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  _DAT_0010b810 = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  return_ptr = (undefined **)(ulong)DAT_0010b7dc;\n  if (DAT_0010b7dc != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    string_var = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(string_var);\n    string_var = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(string_var);\n                    \n    exit(0);\n  }\n  if ((DAT_0010b7f8 != 0) && (DAT_0010b7e8 != 0)) {\n    undefined8_var1 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    print_error_message_00106400(undefined8_var1);\n    undefined8_var1 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    print_error_message_00106400(undefined8_var1);\n    return return_ptr;\n  }\n  string_var = &optind;\n  if (_optind != num_files) {\n    if (1 < num_files - _optind) {\nLAB_00105f38:\n      _DAT_0010b7c4 = 1;\n    }\n    while( true ) {\n      int_var2 = *(int *)string_var;\n      if (num_files <= int_var2) break;\n      long_var2 = file_paths_ptr[int_var2];\n      *(int *)string_var = int_var2 + 1;\n      char_var3 = analyze_binary_001055f0_001043d0(long_var2);\n      if (char_var3 != '\\0') {\n        int_var2 = *(int *)string_var;\n        if (num_files <= int_var2) break;\n        long_var2 = file_paths_ptr[int_var2];\n        *(int *)string_var = int_var2 + 1;\n        char_var3 = analyze_binary_001055f0_001043d0(long_var2);\n        if (char_var3 != '\\0') {\n          int_var2 = *(int *)string_var;\n          while( true ) {\n            if (num_files <= int_var2) goto LAB_00105bdd;\n            long_var2 = file_paths_ptr[int_var2];\n            *(int *)string_var = int_var2 + 1;\n            char_var3 = analyze_binary_001055f0_001043d0(long_var2);\n            if (char_var3 == '\\0') break;\n            int_var2 = *(int *)string_var;\n          }\n        }\n      }\n      return_ptr = (undefined **)(ulong)((int)return_ptr + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)return_ptr);\n  }\nLAB_0010613c:\n  uint_var = analyze_binary_001055f0_001043d0(\"a.out\");\n  return (undefined **)(ulong)((uint_var ^ 1) & 0xff);\n}\n\n",
            "called": [
                "bfd_set_default_target",
                "xexit",
                "printf",
                "getopt_long",
                "exit",
                "memmove",
                "strlen",
                "cplus_demangle_set_style",
                "FUN_001043d0",
                "ferror",
                "bfd_set_error_program_name",
                "ftell",
                "FUN_00104370",
                "bfd_get_error",
                "cplus_demangle_name_to_style",
                "setlocale",
                "dcgettext",
                "bindtextdomain",
                "textdomain",
                "bfd_plugin_set_plugin",
                "xrealloc",
                "FUN_00106400",
                "strcmp",
                "xmalloc_set_program_name",
                "FUN_00106300",
                "FUN_00103ca0",
                "bfd_plugin_set_program_name",
                "fseek",
                "stat",
                "memcpy",
                "xstrdup",
                "bfd_errmsg",
                "fprintf",
                "fread",
                "fclose",
                "free",
                "bfd_init",
                "fopen",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "entry"
            ],
            "imported": false,
            "current_name": "analyze_binary_001055f0"
        },
        "bfd_init": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_init"
        },
        "strerror": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "strerror"
        },
        "ferror": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ferror"
        },
        "entry": {
            "renaming": {},
            "code": "\nvoid processEntry entry(undefined8 param_1,undefined8 param_2)\n\n{\n  undefined auStack_8 [8];\n  \n  __libc_start_main(analyze_binary_001055f0,param_2,&stack0x00000008,0,0,param_1,auStack_8);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "FUN_001055f0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "entry"
        },
        "abort": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "FUN_00102fd2"
            ],
            "imported": false,
            "current_name": "abort"
        },
        "memmove": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "memmove"
        },
        "strstr": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "FUN_00102fd2",
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "strstr"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_if_initialized_0010351b"
            },
            "code": "\nvoid printIfInitialized_0010351b(void)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_if_initialized_0010351b"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_if_debug_enabled_00103b2b",
                "param_1": "module_name",
                "param_2": "debug_message"
            },
            "code": "\nvoid print_if_debug_enabled_00103b2b(undefined8 module_name,undefined8 debug_message)\n\n{\n  if (DAT_0010b818 == 0) {\n    printf(\"%s[%s]:\\n\",module_name,debug_message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_debug_enabled_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "print_formatted_output_00104740",
                "param_1": "formatString",
                "param_2": "paramArray",
                "param_3": "sourceString",
                "param_4": "sourceAddress",
                "puVar1": "pointerVar1",
                "bVar2": "byteVar2",
                "bVar3": "byteVar3",
                "iVar4": "integerVar4",
                "sVar5": "sizeVar5",
                "pcVar6": "pointerCharVar6",
                "puVar7": "pointerVar2",
                "pcVar8": "pointerCharVar8",
                "__ptr": "resultString",
                "uVar9": "unsignedVar9",
                "uVar10": "unsignedVar10",
                "puVar11": "pointerVar3",
                "puVar12": "sourcePointer",
                "__s": "stringVar",
                "__s_00": "resultStringVar",
                "lVar13": "longVar13",
                "uVar14": "unsignedVar14",
                "bVar15": "byteVar15",
                "acStack_39": "stackArray"
            },
            "code": "\n\n\nvoid printFormattedOutput_00104740(char *formatString,long *paramArray,undefined8 *sourceString,long sourceAddress)\n\n{\n  undefined8 *pointerVar1;\n  byte byteVar2;\n  byte byteVar3;\n  int integerVar4;\n  size_t sizeVar5;\n  char *pointerCharVar6;\n  undefined8 *pointerVar2;\n  char *pointerCharVar8;\n  undefined8 *resultString;\n  ulong unsignedVar9;\n  undefined8 unsignedVar10;\n  undefined *pointerVar3;\n  undefined8 *sourcePointer;\n  char *stringVar;\n  undefined8 *resultStringVar;\n  long longVar13;\n  uint unsignedVar14;\n  byte byteVar15;\n  char stackArray [9];\n  \n  byteVar15 = 0;\n  if (sourceString == (undefined8 *)0x0) {\n    sourceString = *(undefined8 **)(*paramArray + 0x10);\n    if (DAT_0010b234 == 0) {\n      print_formatted_output_00102739();\n      return;\n    }\nLAB_00104775:\n    sourcePointer = sourceString;\n    if (DAT_0010b814 == 0) {\n      pointerCharVar6 = (char *)0x0;\n      if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n        sourcePointer = sourceString;\n        resultString = (undefined8 *)0x0;\n      }\n      else {\n        resultString = (undefined8 *)0x0;\n        if (sourceString != (undefined8 *)0x0) goto LAB_0010269d;\n        sourcePointer = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      pointerCharVar6 = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)sourcePointer == '\\0') ||\n         (sourceString = (undefined8 *)bfd_demangle(sourceAddress,sourcePointer,DAT_0010b248),\n         sourceString == (undefined8 *)0x0)) {\n        sourceString = sourcePointer;\n        if (DAT_0010b7e0 != 0) goto LAB_00102698;\n        resultString = (undefined8 *)0x0;\n      }\n      else {\n        sourcePointer = sourceString;\n        resultString = sourceString;\n        if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    sourcePointer = sourceString;\n    if (DAT_0010b234 == 0) {\n      if (*(int *)(*(long *)(sourceAddress + 8) + 8) != 5) goto LAB_00104775;\n      pointerCharVar6 = strchr((char *)sourceString,0x40);\n      if (pointerCharVar6 == (char *)0x0) {\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) {\n            if (paramArray == (long *)0x0) {\n              resultString = (undefined8 *)0x0;\n              printf(formatString,sourceString);\n            }\n            else {\n              if (paramArray[2] != 0) {\n                print_formatted_output_001047d0();\n                return;\n              }\n              resultString = (undefined8 *)0x0;\n              printf(formatString,sourceString);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *pointerCharVar6 = '\\0';\n        if (DAT_0010b814 == 0) {\n          if (DAT_0010b7e0 == 0) goto LAB_00104794;\n          resultString = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    pointerCharVar6 = (char *)0x0;\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) goto LAB_00104794;\nLAB_00102698:\n    sourcePointer = sourceString;\n    resultString = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byteVar2 = *(byte *)sourceString;\n      sourceString = (undefined8 *)((long)sourceString + 1);\n      if (byteVar2 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) && (byteVar2 < 0xc0));\n    sizeVar5 = strlen((char *)sourcePointer);\n    resultStringVar = DAT_0010b790;\n    if (_DAT_0010b798 < sizeVar5 * 9) {\n      free(DAT_0010b790);\n      sizeVar5 = strlen((char *)sourcePointer);\n      _DAT_0010b798 = sizeVar5 * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      resultStringVar = DAT_0010b790;\n    }\n    while( true ) {\n      pointerVar2 = DAT_0010b790;\n      byteVar2 = *(byte *)sourcePointer;\n      pointerVar1 = (undefined8 *)((long)sourcePointer + 1);\n      if (byteVar2 == 0) break;\n      if (((&_sch_istable)[(ulong)byteVar2 * 2] & 2) == 0) {\n        if ((byteVar2 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)resultStringVar = byteVar2;\n          resultStringVar = (undefined8 *)((long)resultStringVar + 1);\n          sourcePointer = pointerVar1;\n        }\n        else {\n          byteVar3 = *(byte *)((long)sourcePointer + 1);\n          if ((byteVar3 & 0xc0) == 0x80) {\n            pointerVar2 = resultStringVar;\n            if ((byteVar2 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                unsignedVar14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar13 = 2;\n                goto LAB_00102917;\n              case 4:\n                integerVar4 = isatty(1);\n                if (integerVar4 == 0) {\n                  byteVar3 = *(byte *)((long)sourcePointer + 1);\n                }\n                else {\n                  *(undefined *)(resultStringVar + 1) = 0;\n                  *resultStringVar = 0x6d37343b31335b1b;\n                  byteVar3 = *(byte *)((long)sourcePointer + 1);\n                  pointerVar2 = resultStringVar + 1;\n                }\n              case 2:\n                unsignedVar14 = 2;\n                sprintf((char *)pointerVar2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)sourcePointer >> 2 & 7),\n                        (ulong)((*(byte *)sourcePointer & 3) << 6 | byteVar3 & 0x3f));\n                pointerVar2 = (undefined8 *)((long)pointerVar2 + 6);\n                goto LAB_00102a27;\n              default:\n                unsignedVar14 = 2;\n              }\n            }\n            else {\n              byteVar3 = *(byte *)((long)sourcePointer + 2);\n              if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVar2 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  unsignedVar14 = 3;\nLAB_00102a62:\n                  for (unsignedVar9 = (ulong)unsignedVar14; unsignedVar9 != 0; unsignedVar9 = unsignedVar9 - 1) {\n                    *(undefined *)pointerVar2 = *(undefined *)sourcePointer;\n                    sourcePointer = (undefined8 *)((long)sourcePointer + (ulong)byteVar15 * -2 + 1);\n                    pointerVar2 = (undefined8 *)((long)pointerVar2 + (ulong)byteVar15 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar13 = 3;\nLAB_00102917:\n                  unsignedVar10 = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    unsignedVar10 = 0x3c;\n                  }\n                  sprintf((char *)resultStringVar,\"%c\",unsignedVar10);\n                  *(undefined *)((long)resultStringVar + 3) = 0;\n                  pointerVar2 = (undefined8 *)(longVar13 + (long)sourcePointer);\n                  *(undefined2 *)((long)resultStringVar + 1) = 0x7830;\n                  pointerCharVar8 = (char *)((long)resultStringVar + 3);\n                  do {\n                    stringVar = pointerCharVar8;\n                    byteVar2 = *(byte *)sourcePointer;\n                    sourcePointer = (undefined8 *)((long)sourcePointer + 1);\n                    sprintf(stringVar,\"%02x\",(ulong)byteVar2);\n                    pointerCharVar8 = stringVar + 2;\n                  } while (sourcePointer != pointerVar2);\n                  unsignedVar10 = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    unsignedVar10 = 0x3e;\n                  }\n                  unsignedVar14 = (uint)longVar13;\n                  sprintf(stringVar + 2,\"%c\",unsignedVar10);\n                  pointerVar2 = (undefined8 *)(stringVar + 3);\n                  break;\n                case 4:\n                  integerVar4 = isatty(1);\n                  if (integerVar4 == 0) {\n                    byteVar3 = *(byte *)((long)sourcePointer + 2);\n                  }\n                  else {\n                    *(undefined *)(resultStringVar + 1) = 0;\n                    *resultStringVar = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)sourcePointer + 2);\n                    pointerVar2 = resultStringVar + 1;\n                  }\n                case 2:\n                  unsignedVar14 = 3;\n                  sprintf((char *)pointerVar2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)sourcePointer & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)sourcePointer + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)sourcePointer + 1) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar2 = (undefined8 *)((long)pointerVar2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (integerVar4 = isatty(1), integerVar4 != 0)) {\n                    *(undefined4 *)pointerVar2 = 0x6d305b1b;\n                    pointerVar2 = (undefined8 *)((long)pointerVar2 + 4);\n                    *(undefined *)pointerVar2 = 0;\n                  }\n                  break;\n                default:\n                  unsignedVar14 = 3;\n                }\n              }\n              else {\n                byteVar3 = *(byte *)((long)sourcePointer + 3);\n                if ((byteVar3 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  unsignedVar14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar13 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  integerVar4 = isatty(1);\n                  if (integerVar4 == 0) {\n                    byteVar3 = *(byte *)((long)sourcePointer + 3);\n                  }\n                  else {\n                    *(undefined *)(resultStringVar + 1) = 0;\n                    *resultStringVar = 0x6d37343b31335b1b;\n                    byteVar3 = *(byte *)((long)sourcePointer + 3);\n                    pointerVar2 = resultStringVar + 1;\n                  }\n                case 2:\n                  unsignedVar14 = 4;\n                  integerVar4 = sprintf((char *)pointerVar2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)sourcePointer & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)sourcePointer + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)sourcePointer + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)sourcePointer + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)sourcePointer + 2) & 3) << 6 | byteVar3 & 0x3f));\n                  pointerVar2 = (undefined8 *)((long)pointerVar2 + (long)integerVar4);\n                  goto LAB_00102a27;\n                default:\n                  unsignedVar14 = 4;\n                }\n              }\n            }\n            unsignedVar9 = (ulong)(uint)((int)pointerVar2 - (int)resultStringVar);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)resultStringVar = byteVar2;\n            unsignedVar14 = 1;\n            unsignedVar9 = 1;\n          }\n          resultStringVar = (undefined8 *)((long)resultStringVar + unsignedVar9);\n          sourcePointer = (undefined8 *)((long)pointerVar1 + (ulong)(unsignedVar14 - 1));\n        }\n      }\n      else {\n        *(undefined *)resultStringVar = 0x5e;\n        *(byte *)((long)resultStringVar + 1) = byteVar2 + 0x40;\n        resultStringVar = (undefined8 *)((long)resultStringVar + 2);\n        sourcePointer = pointerVar1;\n      }\n    }\n    *(undefined *)resultStringVar = 0;\n    sourcePointer = pointerVar2;\n  }\njoined_r0x00104864:\n  if ((((paramArray != (long *)0x0) && (paramArray[2] != 0)) && (DAT_0010b234 != 0)) &&\n     ((pointerCharVar8 = (char *)(**(code **)(*(long *)(sourceAddress + 8) + 0x220))\n                                  (sourceAddress,paramArray[2],0,stackArray), pointerCharVar8 != (char *)0x0 &&\n      (*pointerCharVar8 != '\\0')))) {\n    pointerVar3 = &DAT_001071e0;\n    if ((stackArray[0] == '\\0') && (*(long *)(paramArray[2] + 0x20) != 0x10c2a8)) {\n      pointerVar3 = &DAT_001071df;\n    }\n    resultString = (undefined8 *)reconcat(resultString,sourcePointer,pointerVar3,pointerCharVar8,0);\n    sourcePointer = resultString;\n  }\n  printf(formatString,sourcePointer);\n  if (pointerCharVar6 != (char *)0x0) {\n    *pointerCharVar6 = '@';\n  }\nLAB_001047ba:\n  free(resultString);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "FUN_001064b0",
                "FUN_00103729",
                "FUN_001035a2",
                "FUN_00103b49",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_formatted_output_00104740"
        },
        "bfd_check_format_matches": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_check_format_matches"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "print_error_message_00106400",
                "param_1": "errorCode",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "param_8": "param8",
                "param_9": "errorMessage",
                "param_10": "param10",
                "param_11": "param11",
                "param_12": "param12",
                "param_13": "param13",
                "param_14": "param14",
                "in_AL": "condition",
                "local_d8": "localVariable1",
                "local_d4": "localVariable2",
                "local_d0": "pointer1",
                "local_c8": "pointer2",
                "local_b8": "localMemory",
                "local_b0": "localParam1",
                "local_a8": "localParam2",
                "local_a0": "localParam3",
                "local_98": "localParam4",
                "local_90": "localParam5",
                "local_88": "localVariable3",
                "local_78": "localVariable4",
                "local_68": "localVariable5",
                "local_58": "localVariable6",
                "local_48": "localVariable7",
                "local_38": "localVariable8",
                "local_28": "localVariable9",
                "local_18": "localVariable10"
            },
            "code": "\nvoid printErrorMessage_00106400(undefined4 errorCode,undefined4 param2,undefined4 param3,undefined4 param4,\n                 undefined4 param5,undefined4 param6,undefined4 param7,undefined4 param8,\n                 undefined8 errorMessage,undefined8 param10,undefined8 param11,undefined8 param12,\n                 undefined8 param13,undefined8 param14)\n\n{\n  char condition;\n  undefined4 localVariable1;\n  undefined4 localVariable2;\n  undefined *pointer1;\n  undefined *pointer2;\n  undefined localMemory [8];\n  undefined8 localParam1;\n  undefined8 localParam2;\n  undefined8 localParam3;\n  undefined8 localParam4;\n  undefined8 localParam5;\n  undefined4 localVariable3;\n  undefined4 localVariable4;\n  undefined4 localVariable5;\n  undefined4 localVariable6;\n  undefined4 localVariable7;\n  undefined4 localVariable8;\n  undefined4 localVariable9;\n  undefined4 localVariable10;\n  \n  if (condition != '\\0') {\n    localVariable3 = errorCode;\n    localVariable4 = param2;\n    localVariable5 = param3;\n    localVariable6 = param4;\n    localVariable7 = param5;\n    localVariable8 = param6;\n    localVariable9 = param7;\n    localVariable10 = param8;\n  }\n  pointer1 = &stack0x00000008;\n  localVariable1 = 8;\n  pointer2 = localMemory;\n  localVariable2 = 0x30;\n  localParam1 = param10;\n  localParam2 = param11;\n  localParam3 = param12;\n  localParam4 = param13;\n  localParam5 = param14;\n  print_error_message_001063a0(errorMessage,&localVariable1);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "FUN_0010249f",
                "FUN_001055f0",
                "FUN_00104d5b",
                "FUN_001048e0",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_message_00106400"
        },
        "bfd_get_arch_size": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "FUN_00104670"
            ],
            "imported": false,
            "current_name": "bfd_get_arch_size"
        },
        "ftell": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "ftell"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_execute_00103533",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndExecute_00103533(undefined8 *input1,undefined8 *input2)\n\n{\n  ulong result;\n  \n  if ((ulong)input1[1] < (ulong)input2[1]) {\n    return (ulong)(-(uint)(DAT_0010b7f4 == 0) | 1);\n  }\n  if ((ulong)input2[1] < (ulong)input1[1]) {\n    return (ulong)((-(uint)(DAT_0010b7f4 == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (*(code *)(&PTR_FUN_0010acc0)[DAT_0010b7f4])(*input1,*input2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_execute_00103533"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_symbol_info_0010651a"
            },
            "code": "\nvoid print_symbol_info_0010651a(void)\n\n{\n  print_symbol_info_0010651a_001054d0();\n  return;\n}\n\n",
            "called": [
                "FUN_001054d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "FUN_001064b0",
                "FUN_00103a66"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010651a"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_info_001053c0",
                "param_1": "symbol",
                "param_2": "width",
                "iVar1": "printWidth",
                "cVar2": "isUndefinedSymclass",
                "uVar3": "symbolInfo",
                "lVar4": "symbolAddress"
            },
            "code": "\nvoid printSymbolInfo_001053c0(long *symbol,undefined8 width)\n\n{\n  int printWidth;\n  char isUndefinedSymclass;\n  undefined8 symbolInfo;\n  long symbolAddress;\n  \n  isUndefinedSymclass = bfd_is_undefined_symclass((int)*(char *)(*symbol + 8));\n  printWidth = DAT_0010b7a8;\n  if (isUndefinedSymclass == '\\0') {\n    if (DAT_0010b7f8 == 0) {\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        symbolInfo = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        print_and_exit_00106300(symbolInfo,printWidth);\n        goto LAB_00103623;\n      }\n      symbolInfo = *(undefined8 *)*symbol;\n    }\n    else {\n      if (DAT_0010b7ec == 0) {\n        if (symbol[2] == 0) {\n          symbolAddress = symbol[1];\n        }\n        else {\n          symbolAddress = *(long *)(symbol[2] + 0x38);\n        }\n        print_symbol_info_001054d0(symbolAddress);\n        if (DAT_0010b7ec != 0) {\n          print_symbol_info_001035a2();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      symbolInfo = *(undefined8 *)*symbol;\n      if ((DAT_0010b7a8 - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(DAT_0010b7a0,symbolInfo);\n    if (DAT_0010b7ec != 0) {\n      print_symbol_info_001035a2();\n      return;\n    }\n  }\n  else if (DAT_0010b7a8 == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol + 8));\n  if (*(char *)(*symbol + 8) != '-') {\n    print_formatted_output_00104740(&DAT_0010712c,symbol,0,width);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf(&DAT_0010b238,(ulong)(uint)(int)*(char *)(*symbol + 0x19));\n  putchar(0x20);\n  printf(&DAT_0010b23d,(ulong)(uint)(int)*(short *)(*symbol + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol + 0x20));\n  print_formatted_output_00104740(&DAT_0010712c,symbol,0,width);\n  return;\n}\n\n",
            "called": [
                "printf",
                "FUN_00106300",
                "FUN_001035a2",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "FUN_00105110"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbolPtr",
                "param_2": "info",
                "cVar1": "isUndefinedSymclass",
                "print_formatted_output_00104740": "printFormattedOutput",
                "bfd_is_undefined_symclass": "isUndefinedSymclass",
                "printf": "print",
                "print_symbol_info_001054d0": "printSymbolInfo",
                "putchar": "printCharacter",
                "print_symbol_info_0010651a": "printSymbolInfo2"
            },
            "code": "\nvoid printSymbolInfo_001064b0(long *symbolPtr,undefined8 info)\n\n{\n  char bfd_is_undefined_symclass;\n  \n  printfFormattedOutput(&DAT_00107363,symbolPtr,0,info);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbolPtr + 8));\n  isUndefinedSymclass = isUndefinedSymclass((int)*(char *)(*symbolPtr + 8));\n  if (isUndefinedSymclass != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  printSymbolInfo_001064b0(*(undefined8 *)*symbolPtr);\n  putchar(0x20);\n  if (symbolPtr[2] == 0) {\n    if (symbolPtr[1] != 0) {\n      printSymbolInfo_001064b02();\n      return;\n    }\n  }\n  else if (*(long *)(symbolPtr[2] + 0x38) != 0) {\n    printSymbolInfo_001064b0();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "bfd_is_undefined_symclass",
                "FUN_001054d0",
                "FUN_00103a66",
                "FUN_0010651a",
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "printf": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "FUN_00103573",
                "FUN_00103729",
                "FUN_00102670",
                "FUN_001035a2",
                "FUN_00103abf",
                "FUN_00102f19",
                "FUN_001055f0",
                "FUN_001047d0",
                "FUN_00105110",
                "FUN_001043d0",
                "FUN_00103463",
                "FUN_00103b2b",
                "FUN_001053c0",
                "FUN_001064b0",
                "FUN_0010351b",
                "FUN_001054d0",
                "FUN_00102f7b",
                "FUN_001062d0",
                "FUN_00102739",
                "FUN_001036e0",
                "FUN_001036a7"
            ],
            "imported": false,
            "current_name": "printf"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "format_and_print_output_00103b49",
                "param_1": "data1",
                "param_2": "data2"
            },
            "code": "\nvoid formatAndPrintOutput_00103b49(undefined8 data1,undefined8 data2)\n\n{\n  print_formatted_output_00104740(&DAT_0010712d,data1,0,data2);\n  return;\n}\n\n",
            "called": [
                "FUN_00104740"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "format_and_print_output_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbol_table_00103abf",
                "param_1": "libraryName",
                "param_2": "fileName",
                "pcVar1": "formatString"
            },
            "code": "\nvoid printSymbolTable_00103abf(undefined8 libraryName,undefined8 fileName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (DAT_0010b7e8 == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,libraryName,fileName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (DAT_0010b7a8 != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_table_00103abf"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "compare_and_return_value_00103bf6",
                "in_RAX": "returnValue",
                "iVar1": "stringComparisonResult",
                "auVar2": "returnValueArray"
            },
            "code": "\nundefined  [16] compareAndReturnValue_00103bf6(void)\n\n{\n  int stringComparisonResult;\n  undefined8 returnValue;\n  undefined returnValueArray [16];\n  \n  stringComparisonResult = compare_strings_00104fa0();\n  returnValueArray._0_4_ = -stringComparisonResult;\n  returnValueArray._4_4_ = 0;\n  returnValueArray._8_8_ = returnValue;\n  return returnValueArray;\n}\n\n",
            "called": [
                "FUN_00104fa0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "compare_and_return_value_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_target_list_00102450",
                "unaff_RBX": "outputFile",
                "__ptr": "targetList",
                "plVar3": "currentTarget",
                "lVar1": "target",
                "in_stack_00000008": "bugFlag",
                "pcVar2": "translation",
                "fprintf": "printFormatted",
                "fputc": "printCharacter",
                "dcgettext": "getTranslation",
                "bfd_target_list": "getTargetList",
                "free": "freeMemory",
                "exit": "exitProgram"
            },
            "code": "\nvoid printTargetList_00102450(void)\n\n{\n  long target;\n  char *translation;\n  long *targetList;\n  FILE *outputFile;\n  long *currentTarget;\n  int bugFlag;\n  \n  translation = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,translation);\n  targetList = (long *)bfd_target_list();\n  currentTarget = targetList;\n  while( true ) {\n    target = *currentTarget;\n    currentTarget = currentTarget + 1;\n    if (target == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  freeMemory(targetList);\n  if (bugFlag == 0) {\n    translation = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,translation,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exitProgram(bugFlag);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "FUN_00103ca0"
            ],
            "imported": false,
            "current_name": "print_target_list_00102450"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "process_lto_object_00102c19",
                "pcVar1": "charPtr1",
                "pcVar2": "codePtr",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar",
                "puVar8": "ptrVar1",
                "lVar9": "longVar1",
                "puVar10": "ptrVar2",
                "unaff_RBX": "ptrRBX",
                "__ptr": "ptrVar3",
                "unaff_RBP": "ptrRBP",
                "puVar11": "ptrVar4",
                "puVar12": "ptrVar5",
                "puVar13": "ptrVar6",
                "in_R8": "ptrR8",
                "puVar14": "ptrVar7",
                "in_R9": "ptrR9",
                "puVar15": "ptrVar8",
                "unaff_R12": "ptrR12",
                "unaff_R13": "ptrR13",
                "unaff_R14": "ptrR14",
                "unaff_R15": "ptrR15",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongRetAddr",
                "uVar18": "ulongVar1",
                "in_stack_00000008": "varInStack8",
                "in_stack_00000010": "varInStack10",
                "in_stack_00000018": "varInStack18",
                "in_stack_00000038": "varInStack38",
                "in_stack_00000040": "varInStack40",
                "in_stack_00000048": "varInStack48"
            },
            "code": "\n\n\nvoid processLTOObject_00102c19(void)\n\n{\n  char *charPtr1;\n  code *codePtr;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar;\n  undefined8 *ptrVar1;\n  long longVar1;\n  undefined8 *ptrVar2;\n  undefined8 *ptrRBX;\n  undefined8 *ptrVar3;\n  undefined8 *ptrRBP;\n  undefined8 *ptrVar4;\n  undefined8 *ptrVar5;\n  undefined8 *ptrR8;\n  undefined8 *ptrVar6;\n  undefined8 *ptrR9;\n  undefined8 *ptrVar7;\n  undefined8 *ptrR12;\n  undefined8 *ptrVar8;\n  undefined8 *ptrR13;\n  undefined8 *ptrR14;\n  undefined8 *ptrR15;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongRetAddr;\n  ulong ulongVar1;\n  undefined8 varInStack8;\n  undefined8 *varInStack10;\n  undefined8 *varInStack18;\n  undefined8 varInStack38;\n  void *varInStack40;\n  undefined8 *varInStack48;\n  \n  byteVar = 0;\n  if (_DAT_0010b760 == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (ptrRBX != ptrR13) {\n      if (ptrR14 == (undefined8 *)0x8) {\n        *ptrRBX = *ptrR13;\n        process_binary_001049c0();\n        return;\n      }\n      for (; ptrR14 != (undefined8 *)0x0; ptrR14 = (undefined8 *)((long)ptrR14 + -1)) {\n        *(undefined *)ptrRBX = *(undefined *)ptrR13;\n        ptrR13 = (undefined8 *)((long)ptrR13 + (ulong)byteVar * -2 + 1);\n        ptrRBX = (undefined8 *)((long)ptrRBX + (ulong)byteVar * -2 + 1);\n      }\n      process_binary_001049c0();\n      return;\n    }\n    ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR14);\nLAB_001049c3:\n    do {\n      do {\n        ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n        ptrVar8 = ptrR12;\n        ptrVar5 = ptrRBP;\n        if (ptrR12 <= ptrR13) goto LAB_00104b15;\nLAB_001049cf:\n        ptrVar1 = (undefined8 *)\n                 (**(code **)(ptrRBP[1] + 0x270))\n                           (ptrRBP,ulongRetAddr & 0xffffffff,ptrR13,ptrR15);\n        ptrVar4 = ptrRBP;\n        ptrVar5 = ptrR13;\n        ptrVar8 = ptrR15;\n        if (ptrVar1 == (undefined8 *)0x0) goto LAB_00102eb0;\n        charPtr1 = (char *)ptrVar1[1];\n        if (((charPtr1 == (char *)0x0) || (*charPtr1 != '_')) || (charPtr1[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(ptrVar1[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          ptrR13 = (undefined8 *)((long)ptrR13 + (long)ptrR14);\n          ptrVar8 = ptrR12;\n          ptrVar5 = ptrRBP;\n          if (ptrR12 <= ptrR13) {\nLAB_00104b15:\n            ptrRBX = (undefined8 *)((long)ptrRBX - (long)varInStack18);\n            if (ptrR14 == (undefined8 *)0x8) {\n              longVar1 = ptrVar5[1];\n              ptrVar4 = (undefined8 *)((long)ptrRBX + 7);\n              if (-1 < (long)ptrRBX) {\n                ptrVar4 = ptrRBX;\n              }\n              ptrR8 = (undefined8 *)(ulong)DAT_0010b800;\n              codePtr = *(code **)(longVar1 + 0x208);\n              ptrVar4 = (undefined8 *)((long)ptrVar4 >> 3);\n            }\n            else {\n              ptrVar4 = (undefined8 *)((long)ptrRBX / (long)ptrR14);\n              longVar1 = ptrVar5[1];\n              codePtr = *(code **)(longVar1 + 0x208);\n            }\n            ptrRBP = ptrVar5;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = ptrVar5;\n              DAT_0010b770 = (undefined8 *)(*codePtr)(ptrVar5);\n              DAT_0010b768 = (undefined8 *)(**(code **)(ptrVar5[1] + 0x208))(ptrVar5);\n              ptrRBX = varInStack48;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_00106530(*ptrVar5);\n                ptrVar3 = ptrR15;\n                goto LAB_00102d8e;\n              }\n              ptrR12 = (undefined8 *)(ulong)varInStack38._4_4_;\n              if (DAT_0010b7f8 != 0) {\n                ulongVar1 = (ulong)(DAT_0010b80c != 0);\n                qsort(varInStack48,(size_t)ptrVar4,(size_t)ptrR12,validate_binary_files_00102fd2);\n                ptrVar8 = (undefined8 *)xmalloc((long)ptrVar4 << 4);\n                ptrVar6 = DAT_0010b770;\n                ptrRBP = DAT_0010b768;\n                ptrR14 = (undefined8 *)((long)ptrVar4 * (long)ptrR12 + (long)ptrRBX);\n                ptrVar1 = DAT_0010b770;\n                ptrR9 = DAT_0010b768;\n                if (ptrR14 <= ptrRBX) goto LAB_00102ec2;\n                ptrVar4 = (undefined8 *)\n                          (**(code **)(ptrVar5[1] + 0x270))(ptrVar5,ulongVar1 & 0xffffffff,ptrRBX);\n                ptrVar3 = ptrRBX;\n                ptrR8 = ptrR12;\n                varInStack10 = ptrVar8;\n                if (ptrVar4 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(varInStack48,(size_t)ptrVar4,(size_t)ptrR12,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              longVar1 = ptrVar5[1];\n            }\n            ptrVar3 = (undefined8 *)0x0;\n            do {\n              ptrVar5 = varInStack48;\n              ptrVar1 = (undefined8 *)(ulong)DAT_0010b7f8;\n              ptrR14 = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                ptrVar8 = (undefined8 *)(**(code **)(longVar1 + 0x208))(ptrRBP);\n                if (ptrVar8 == (undefined8 *)0x0) goto LAB_00102ed2;\n                ptrRBX = ptrVar3 + (long)ptrVar4 * 2;\n                ptrVar4 = ptrVar3;\n                do {\n                  if (ptrRBX <= ptrVar4) {\nLAB_00104c75:\n                    if (varInStack40 == (void *)0x0) {\n                      free(varInStack48);\n                      free(ptrVar3);\n                      return;\n                    }\n                    free(varInStack40);\n                    free(varInStack48);\n                    free(ptrVar3);\n                    return;\n                  }\n                  ptrVar1 = ptrVar8;\n                  longVar1 = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,*ptrVar4);\n                  if (longVar1 == 0) {\n                    print_error_00106530(*ptrRBP,0);\nLAB_00102ed2:\n                    ptrVar5 = (undefined8 *)*ptrRBP;\n                    print_error_00106530();\n                    ptrVar6 = ptrR8;\n                    ptrVar7 = ptrR9;\n                    goto LAB_00102edb;\n                  }\n                  ptrVar5 = ptrVar4 + 1;\n                  ptrVar4 = ptrVar4 + 2;\n                  print_info_00105110(ptrRBP,longVar1,*ptrVar5,varInStack8);\n                } while( true );\n              }\n              ptrR12 = (undefined8 *)(ulong)varInStack38._4_4_;\n              ptrR15 = (undefined8 *)(**(code **)(longVar1 + 0x208))(ptrRBP);\n              if (ptrR15 == (undefined8 *)0x0) {\n                print_error_00106530(*ptrRBP);\n                ptrVar5 = ptrR12;\n                if (DAT_0010b80c == 0) {\n                  longVar1 = (**(code **)(ptrRBP[1] + 0x350))(ptrRBP);\n                  ptrVar4 = varInStack48;\n                  ptrVar8 = ptrR12;\n                  if (longVar1 < 1) {\n                    ptrVar1 = (undefined8 *)0x0;\n                    ptrRBX = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    ptrRBX = (undefined8 *)xmalloc();\n                    ptrVar1 = (undefined8 *)(**(code **)(ptrRBP[1] + 0x358))(ptrRBP,ptrRBX);\n                    ptrVar5 = ptrVar8;\n                    if ((long)ptrVar1 < 0) {\n                      ptrVar5 = (undefined8 *)*ptrRBP;\n                      ptrVar4 = (undefined8 *)print_error_00106530(ptrVar5,ptrVar8);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  ptrVar1 = ptrR12;\n                  ptrRBX = varInStack48;\n                  ptrVar4 = (undefined8 *)0x0;\n                  ptrVar8 = (undefined8 *)0x0;\n                }\n                ptrR9 = &stack0x00000040;\n                ptrR8 = ptrRBX;\n                longVar1 = (**(code **)(ptrRBP[1] + 0x360))(ptrRBP,ptrVar8,ptrVar4,ptrVar1);\n                ptrR12 = ptrVar5;\n                if (0 < longVar1) {\n                  ptrR12 = (undefined8 *)((long)ptrVar5 + longVar1);\n                  varInStack48 = (undefined8 *)xrealloc(varInStack48);\n                  longVar = 0;\n                  do {\n                    varInStack48[(long)((long)ptrVar5 + longVar)] =\n                         (void *)(longVar * 0x30 + (long)varInStack40);\n                    longVar = longVar + 1;\n                  } while (longVar1 != longVar);\n                  varInStack48[(long)((long)ptrVar5 + longVar1)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (ptrRBX != (undefined8 *)0x0)) {\n                  free(ptrRBX);\n                }\n                if ((*(byte *)((long)ptrRBP + 0x4a) & 0x10) != 0) {\n                  ptrRBX = (undefined8 *)*ptrRBP;\n                  DAT_0010b230 = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(ulongVar);\n                }\n                ptrR14 = (undefined8 *)(ulong)varInStack38._4_4_;\n                boolVar = DAT_0010b80c != 0;\n                ptrVar4 = (undefined8 *)(ulong)boolVar;\n                ptrVar1 = varInStack48;\n                varInStack18 = varInStack48;\n                ptrR15 = (undefined8 *)(**(code **)(ptrRBP[1] + 0x208))(ptrRBP);\n                if (ptrR15 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                ptrVar4 = (undefined8 *)((long)ptrVar4 * (long)ptrR12 + (long)ptrVar5);\n                ptrRBX = ptrVar5;\n                while( true ) {\n                  if (ptrVar4 <= ptrRBX) goto LAB_00104c75;\n                  ptrVar1 = ptrR15;\n                  longVar1 = (**(code **)(ptrRBP[1] + 0x270))(ptrRBP,ptrR14,ptrRBX);\n                  if (longVar1 == 0) break;\n                  ptrRBX = (undefined8 *)((long)ptrRBX + (long)ptrR12);\n                  print_info_00105110(ptrRBP,longVar1,0,varInStack8);\n                }\n                print_error_00106530(*ptrRBP,0);\n              }\n              print_error_00106530(*ptrRBP);\n              ptrVar5 = ptrRBP;\n              ptrVar8 = ptrR15;\nLAB_00102eb0:\n              print_error_00106530(*ptrVar4);\nLAB_00102eb9:\n              print_error_00106530(*ptrVar5);\nLAB_00102ec2:\n              ptrVar4 = (undefined8 *)0x0;\n              ptrVar3 = ptrRBX;\n              ptrR8 = ptrR12;\n              ptrVar6 = ptrVar1;\n              ptrRBP = ptrR9;\n              varInStack10 = ptrVar8;\nLAB_00104e35:\n              while (ptrR9 = ptrVar6, ptrVar3 < ptrR14) {\n                ptrRBX = (undefined8 *)((long)ptrVar3 + (long)ptrR8);\n                if (ptrRBX < ptrR14) {\n                  ptrVar1 = ptrRBP;\n                  ptrVar6 = ptrR8;\n                  ptrVar7 = ptrR9;\n                  ptrVar2 = (undefined8 *)(**(code **)(ptrVar5[1] + 0x270))();\n                  if (ptrVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    ptrR9 = ptrVar7;\n                    ptrR8 = ptrVar6;\n                    ptrVar5 = (undefined8 *)*ptrVar5;\n                    ptrVar2 = (undefined8 *)print_error_00106530();\n                  }\n                  else {\n                    ptrVar1 = (undefined8 *)ptrVar4[4];\n                    if ((*(uint *)(ptrVar4 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar1 = ptrVar4[2];\nLAB_00102ee7:\n                  if (ptrVar1 == (undefined8 *)ptrVar2[4]) {\n                    longVar1 = ptrVar2[2] - longVar1;\n                    ptrVar6 = ptrRBP;\n                    ptrVar7 = ptrVar3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar1 = ptrVar1[8] - longVar1;\n                  ptrVar6 = ptrRBP;\n                  ptrVar7 = ptrVar3;\n                }\n                else {\n                  ptrVar1 = (undefined8 *)ptrVar4[4];\n                  if ((*(uint *)(ptrVar4 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar1 = ptrVar4[2];\n                    ptrVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  ptrVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptrVar6 = ptrRBP;\n                  ptrVar7 = ptrVar3;\n                  if (*(int *)(ptrVar5[1] + 8) == 5) {\n                    longVar1 = ptrVar4[7];\n                  }\n                  else {\n                    longVar1 = ptrVar4[2];\n                    if ((*(byte *)((long)ptrVar1 + 0x25) & 0x10) == 0) {\n                      if (ptrRBX < ptrR14) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                ptrVar4 = ptrVar2;\n                ptrVar3 = ptrRBX;\n                ptrRBP = ptrR9;\n                if (longVar1 != 0) {\n                  *ptrVar8 = ptrVar7;\n                  ptrVar8[1] = longVar1;\n                  ptrVar8 = ptrVar8 + 2;\n                }\n              }\n              ptrVar4 = (undefined8 *)((long)ptrVar8 - (long)varInStack10 >> 4);\n              qsort(varInStack10,(size_t)ptrVar4,0x10,FUN_00103533);\n              longVar1 = ptrVar5[1];\n              ptrRBX = ptrVar3;\n              ptrRBP = ptrVar5;\n              ptrVar3 = varInStack10;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(charPtr1 + (charPtr1[2] == '_'),\"__gnu_lto_slim\");\n        varInStack10 = ptrVar1;\n        if (intVar == 0) {\n          if (DAT_0010b230 != '\\0') {\n            varInStack10 = (undefined8 *)*ptrRBP;\n            DAT_0010b230 = '\\0';\n            ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_message_00106400(ulongVar,varInStack10);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(ptrVar1 + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(ptrVar1 + 3) & 0x800082) == 0) && (ptrVar1[4] != 0x10c2a8)) &&\n           ((*(byte *)(ptrVar1[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_binary_00104d5b:\n          if ((ptrVar1[4] != 0x10c2a8) && (ptrVar1[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(ptrVar1 + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_binary_00104d5b;\nLAB_00104a53:\n      ptrR9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        charVar = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n        if (charVar != '\\0') {\n          processLTOObject_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (ptrVar1[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(ptrRBP[1] + 0x230))(ptrRBP);\n    if (charVar != '\\0') {\n      processLTOObject_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  ptrVar8 = (undefined8 *)((long)ptrR12 * (long)ptrR14);\n  ptrR12 = (undefined8 *)((long)varInStack18 + (long)ptrVar8);\n  ptrRBX = varInStack18;\n  ptrVar5 = ptrRBP;\n  if (varInStack18 < ptrR12) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongRetAddr = (ulong)boolVar;\n  ptrR13 = varInStack18;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_object_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_00106530",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "cause",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printError_00106530(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  long cause;\n  undefined8 additionalInfo;\n  \n  print_error_00106540();\n  cause = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (cause != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,cause,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "FUN_00106540"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103c00",
                "FUN_00102f9f",
                "FUN_00102fd2",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00102fc3",
                "FUN_001048e0",
                "FUN_001043d0",
                "FUN_00103463"
            ],
            "imported": false,
            "current_name": "print_error_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "_INIT_0"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "qsort": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "qsort"
        },
        "fclose": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "fclose"
        },
        "bfd_errmsg": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "FUN_001055f0",
                "FUN_00106540"
            ],
            "imported": false,
            "current_name": "bfd_errmsg"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "print_encoded_string_0010268b",
                "puVar1": "ptr",
                "bVar2": "byteVal",
                "bVar3": "byteVal2",
                "iVar4": "isTTY",
                "sVar5": "stringLen",
                "puVar6": "destPtr",
                "pcVar7": "strPtr",
                "uVar8": "length",
                "uVar9": "charVal",
                "puVar10": "charPtr",
                "puVar11": "srcPtr",
                "unaff_RBP": "rbpVal",
                "puVar12": "result",
                "unaff_R12": "unaff_r12Val",
                "unaff_R13": "inputStrPtr",
                "lVar13": "strLen",
                "uVar14": "loopVal",
                "unaff_R14": "formatStr",
                "unaff_R15": "unaff_r15Val",
                "bVar15": "loopEnd",
                "__s": "tempStr",
                "in_stack_00000038": "inStackVal"
            },
            "code": "\n\n\nvoid printEncodedString_0010268b(void)\n\n{\n  undefined8 *ptr;\n  byte byteVal;\n  byte byteVal2;\n  int isTTY;\n  size_t stringLen;\n  undefined8 *destPtr;\n  char *strPtr;\n  ulong length;\n  undefined8 charVal;\n  undefined *charPtr;\n  undefined8 *srcPtr;\n  long rbpVal;\n  undefined8 *result;\n  undefined *unaff_r12Val;\n  undefined8 *inputStrPtr;\n  long strLen;\n  uint loopVal;\n  char *formatStr;\n  long unaff_r15Val;\n  byte loopEnd;\n  char *tempStr;\n  undefined8 inStackVal;\n  \n  loopEnd = 0;\n  result = inputStrPtr;\n  if (DAT_0010b7e0 != 0) {\n    do {\n      byteVal = *(byte *)result;\n      if (byteVal == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byteVal * 2] & 2) == 0) &&\n            (result = (undefined8 *)((long)result + 1), byteVal < 0xc0));\n    stringLen = strlen((char *)inputStrPtr);\n    result = DAT_0010b790;\n    srcPtr = inputStrPtr;\n    if (_DAT_0010b798 < stringLen * 9) {\n      free(DAT_0010b790);\n      stringLen = strlen((char *)inputStrPtr);\n      _DAT_0010b798 = stringLen * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      result = DAT_0010b790;\n    }\n    while( true ) {\n      inputStrPtr = DAT_0010b790;\n      byteVal = *(byte *)srcPtr;\n      ptr = (undefined8 *)((long)srcPtr + 1);\n      if (byteVal == 0) break;\n      if (((&_sch_istable)[(ulong)byteVal * 2] & 2) == 0) {\n        if ((byteVal < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)result = byteVal;\n          result = (undefined8 *)((long)result + 1);\n          srcPtr = ptr;\n        }\n        else {\n          byteVal2 = *(byte *)((long)srcPtr + 1);\n          if ((byteVal2 & 0xc0) == 0x80) {\n            destPtr = result;\n            if ((byteVal & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                loopVal = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                strLen = 2;\n                goto LAB_00102917;\n              case 4:\n                isTTY = isatty(1);\n                if (isTTY == 0) {\n                  byteVal2 = *(byte *)((long)srcPtr + 1);\n                }\n                else {\n                  *(undefined *)(result + 1) = 0;\n                  *result = 0x6d37343b31335b1b;\n                  byteVal2 = *(byte *)((long)srcPtr + 1);\n                  destPtr = result + 1;\n                }\n              case 2:\n                loopVal = 2;\n                sprintf((char *)destPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)srcPtr >> 2 & 7),\n                        (ulong)((*(byte *)srcPtr & 3) << 6 | byteVal2 & 0x3f));\n                destPtr = (undefined8 *)((long)destPtr + 6);\n                goto LAB_00102a27;\n              default:\n                loopVal = 2;\n              }\n            }\n            else {\n              byteVal2 = *(byte *)((long)srcPtr + 2);\n              if ((byteVal2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byteVal & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  loopVal = 3;\nLAB_00102a62:\n                  for (length = (ulong)loopVal; length != 0; length = length - 1) {\n                    *(undefined *)destPtr = *(undefined *)srcPtr;\n                    srcPtr = (undefined8 *)((long)srcPtr + (ulong)loopEnd * -2 + 1);\n                    destPtr = (undefined8 *)((long)destPtr + (ulong)loopEnd * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  strLen = 3;\nLAB_00102917:\n                  charVal = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    charVal = 0x3c;\n                  }\n                  sprintf((char *)result,\"%c\",charVal);\n                  *(undefined *)((long)result + 3) = 0;\n                  destPtr = (undefined8 *)(strLen + (long)srcPtr);\n                  *(undefined2 *)((long)result + 1) = 0x7830;\n                  strPtr = (char *)((long)result + 3);\n                  do {\n                    tempStr = strPtr;\n                    byteVal = *(byte *)srcPtr;\n                    srcPtr = (undefined8 *)((long)srcPtr + 1);\n                    sprintf(tempStr,\"%02x\",(ulong)byteVal);\n                    strPtr = tempStr + 2;\n                  } while (srcPtr != destPtr);\n                  charVal = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    charVal = 0x3e;\n                  }\n                  loopVal = (uint)strLen;\n                  sprintf(tempStr + 2,\"%c\",charVal);\n                  destPtr = (undefined8 *)(tempStr + 3);\n                  break;\n                case 4:\n                  isTTY = isatty(1);\n                  if (isTTY == 0) {\n                    byteVal2 = *(byte *)((long)srcPtr + 2);\n                  }\n                  else {\n                    *(undefined *)(result + 1) = 0;\n                    *result = 0x6d37343b31335b1b;\n                    byteVal2 = *(byte *)((long)srcPtr + 2);\n                    destPtr = result + 1;\n                  }\n                case 2:\n                  loopVal = 3;\n                  sprintf((char *)destPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)srcPtr & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)srcPtr + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)srcPtr + 1) & 3) << 6 | byteVal2 & 0x3f));\n                  destPtr = (undefined8 *)((long)destPtr + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (isTTY = isatty(1), isTTY != 0)) {\n                    *(undefined4 *)destPtr = 0x6d305b1b;\n                    destPtr = (undefined8 *)((long)destPtr + 4);\n                    *(undefined *)destPtr = 0;\n                  }\n                  break;\n                default:\n                  loopVal = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)srcPtr + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  loopVal = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  strLen = 4;\n                  goto LAB_00102917;\n                case 4:\n                  isTTY = isatty(1);\n                  if (isTTY != 0) {\n                    *(undefined *)(result + 1) = 0;\n                    *result = 0x6d37343b31335b1b;\n                    destPtr = result + 1;\n                  }\n                case 2:\n                  loopVal = 4;\n                  isTTY = sprintf((char *)destPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)srcPtr & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)srcPtr + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)srcPtr + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)srcPtr + 2) >> 2 & 0xfU));\n                  destPtr = (undefined8 *)((long)destPtr + (long)isTTY);\n                  goto LAB_00102a27;\n                default:\n                  loopVal = 4;\n                }\n              }\n            }\n            length = (ulong)(uint)((int)destPtr - (int)result);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)result = byteVal;\n            loopVal = 1;\n            length = 1;\n          }\n          result = (undefined8 *)((long)result + length);\n          srcPtr = (undefined8 *)((long)ptr + (ulong)(loopVal - 1));\n        }\n      }\n      else {\n        *(undefined *)result = 0x5e;\n        *(byte *)((long)result + 1) = byteVal + 0x40;\n        result = (undefined8 *)((long)result + 2);\n        srcPtr = ptr;\n      }\n    }\n    *(undefined *)result = 0;\n  }\nLAB_0010485e:\n  result = (undefined8 *)0x0;\n  if ((((rbpVal != 0) && (*(long *)(rbpVal + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((strPtr = (char *)(**(code **)(*(long *)(unaff_r15Val + 8) + 0x220))\n                                  (unaff_r15Val,*(long *)(rbpVal + 0x10),0,\n                                   (long)&stack0x00000038 + 7), strPtr != (char *)0x0 &&\n      (*strPtr != '\\0')))) {\n    charPtr = &DAT_001071e0;\n    if ((inStackVal._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(rbpVal + 0x10) + 0x20) != 0x10c2a8)) {\n      charPtr = &DAT_001071df;\n    }\n    result = (undefined8 *)reconcat(0,inputStrPtr,charPtr,strPtr,0);\n    inputStrPtr = result;\n  }\n  printf(formatStr,inputStrPtr);\n  if (unaff_r12Val != (undefined *)0x0) {\n    *unaff_r12Val = 0x40;\n  }\n  free(result);\n  return;\n}\n\n",
            "called": [
                "sprintf",
                "isatty",
                "strlen",
                "free",
                "FUN_001047d0",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "print_encoded_string_0010268b"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "check_file_size_and_content_00103bec",
                "in_RAX": "fileHandle",
                "iVar1": "fileComparisonResult",
                "auVar2": "returnValue"
            },
            "code": "\nundefined  [16] checkFileSizeAndContent_00103bec(void)\n\n{\n  int fileComparisonResult;\n  undefined8 fileHandle;\n  undefined returnValue [16];\n  \n  fileComparisonResult = compare_file_size_and_content_00105050();\n  returnValue._0_4_ = -fileComparisonResult;\n  returnValue._4_4_ = 0;\n  returnValue._8_8_ = fileHandle;\n  return returnValue;\n}\n\n",
            "called": [
                "FUN_00105050"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "check_file_size_and_content_00103bec"
        },
        "bfd_get_next_mapent": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "bfd_get_next_mapent"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "message",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *message,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",DAT_0010b820);\n  vfprintf(standardError,message,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "fflush",
                "putc",
                "vfprintf",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "FUN_00106300",
                "FUN_00106400"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_formatted_output_00102739",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "pcVar6": "strPtr",
                "puVar7": "ptr2",
                "pcVar8": "strPtr2",
                "__ptr": "resultPtr",
                "uVar9": "ulongVar",
                "uVar10": "uVar",
                "puVar11": "ptr3",
                "unaff_RBP": "unaffVar1",
                "puVar12": "ptr4",
                "unaff_R13": "unaffVar2",
                "lVar13": "longVar",
                "uVar14": "uintVar",
                "unaff_R14": "unaffStrPtr",
                "unaff_R15": "unaffVar3",
                "bVar15": "byteVal",
                "__s": "strPtr3",
                "in_stack_00000038": "inStackVar"
            },
            "code": "\n\n\nvoid printFormattedOutput_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  char *strPtr;\n  undefined8 *ptr2;\n  char *strPtr2;\n  undefined8 *resultPtr;\n  ulong ulongVar;\n  undefined8 uVar;\n  undefined *ptr3;\n  long unaffVar1;\n  undefined8 *ptr4;\n  undefined8 *unaffVar2;\n  long longVar;\n  uint uintVar;\n  char *unaffStrPtr;\n  long unaffVar3;\n  byte byteVal;\n  char *strPtr3;\n  undefined8 inStackVar;\n  \n  byteVal = 0;\n  ptr4 = unaffVar2;\n  if (*(int *)(*(long *)(unaffVar3 + 8) + 8) != 5) {\n    if (DAT_0010b814 != 0) {\n      strPtr = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    strPtr = (char *)0x0;\n    if (DAT_0010b7e0 == 0) {\nLAB_00104794:\n      resultPtr = (undefined8 *)0x0;\n    }\n    else {\n      resultPtr = (undefined8 *)0x0;\n      if (unaffVar2 != (undefined8 *)0x0) goto LAB_0010269d;\n      resultPtr = (undefined8 *)0x0;\n      unaffVar2 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  strPtr = strchr((char *)unaffVar2,0x40);\n  if (strPtr == (char *)0x0) {\n    if (DAT_0010b814 != 0) goto LAB_0010482b;\n    if (DAT_0010b7e0 == 0) {\n      if (unaffVar1 == 0) {\n        resultPtr = (undefined8 *)0x0;\n        printf(unaffStrPtr);\n      }\n      else {\n        if (*(long *)(unaffVar1 + 0x10) != 0) {\n          print_formatted_output_001047d0();\n          return;\n        }\n        resultPtr = (undefined8 *)0x0;\n        printf(unaffStrPtr);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr4 = unaffVar2;\n    resultPtr = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr4;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr4 = (undefined8 *)((long)ptr4 + 1), byte1 < 0xc0));\n    size = strlen((char *)unaffVar2);\n    ptr4 = DAT_0010b790;\n    if (_DAT_0010b798 < size * 9) {\n      free(DAT_0010b790);\n      size = strlen((char *)unaffVar2);\n      _DAT_0010b798 = size * 9;\n      DAT_0010b790 = (undefined8 *)xmalloc(_DAT_0010b798 + 1);\n      ptr4 = DAT_0010b790;\n    }\n    while( true ) {\n      ptr2 = DAT_0010b790;\n      byte1 = *(byte *)unaffVar2;\n      ptr1 = (undefined8 *)((long)unaffVar2 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (DAT_0010b7e0 == 0)) {\n          *(byte *)ptr4 = byte1;\n          ptr4 = (undefined8 *)((long)ptr4 + 1);\n          unaffVar2 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)unaffVar2 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr4;\n            if ((byte1 & 0x20) == 0) {\n              switch(DAT_0010b7e0) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)unaffVar2 + 1);\n                }\n                else {\n                  *(undefined *)(ptr4 + 1) = 0;\n                  *ptr4 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)unaffVar2 + 1);\n                  ptr2 = ptr4 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)unaffVar2 >> 2 & 7)\n                        ,(ulong)((*(byte *)unaffVar2 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)unaffVar2 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar = (ulong)uintVar; ulongVar != 0; ulongVar = ulongVar - 1) {\n                    *(undefined *)ptr2 = *(undefined *)unaffVar2;\n                    unaffVar2 = (undefined8 *)((long)unaffVar2 + (ulong)byteVal * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byteVal * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  uVar = 0x7b;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar = 0x3c;\n                  }\n                  sprintf((char *)ptr4,\"%c\",uVar);\n                  *(undefined *)((long)ptr4 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar + (long)unaffVar2);\n                  *(undefined2 *)((long)ptr4 + 1) = 0x7830;\n                  strPtr2 = (char *)((long)ptr4 + 3);\n                  do {\n                    strPtr3 = strPtr2;\n                    byte1 = *(byte *)unaffVar2;\n                    unaffVar2 = (undefined8 *)((long)unaffVar2 + 1);\n                    sprintf(strPtr3,\"%02x\",(ulong)byte1);\n                    strPtr2 = strPtr3 + 2;\n                  } while (unaffVar2 != ptr2);\n                  uVar = 0x7d;\n                  if (DAT_0010b7e0 == 3) {\n                    uVar = 0x3e;\n                  }\n                  uintVar = (uint)longVar;\n                  sprintf(strPtr3 + 2,\"%c\",uVar);\n                  ptr2 = (undefined8 *)(strPtr3 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)unaffVar2 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)unaffVar2 + 2);\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)unaffVar2 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)unaffVar2 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)unaffVar2 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((DAT_0010b7e0 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)unaffVar2 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(DAT_0010b7e0) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(ptr4 + 1) = 0;\n                    *ptr4 = 0x6d37343b31335b1b;\n                    ptr2 = ptr4 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)unaffVar2 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffVar2 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)unaffVar2 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)unaffVar2 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar = (ulong)(uint)((int)ptr2 - (int)ptr4);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr4 = byte1;\n            uintVar = 1;\n            ulongVar = 1;\n          }\n          ptr4 = (undefined8 *)((long)ptr4 + ulongVar);\n          unaffVar2 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr4 = 0x5e;\n        *(byte *)((long)ptr4 + 1) = byte1 + 0x40;\n        ptr4 = (undefined8 *)((long)ptr4 + 2);\n        unaffVar2 = ptr1;\n      }\n    }\n    *(undefined *)ptr4 = 0;\n    unaffVar2 = ptr2;\n  }\n  else {\n    *strPtr = '\\0';\n    if (DAT_0010b814 == 0) {\n      if (DAT_0010b7e0 == 0) goto LAB_00104794;\n      resultPtr = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)unaffVar2 == '\\0') ||\n       (ptr4 = (undefined8 *)bfd_demangle(), ptr4 == (undefined8 *)0x0)) {\n      if (DAT_0010b7e0 != 0) goto LAB_00102698;\n      resultPtr = (undefined8 *)0x0;\n    }\n    else {\n      unaffVar2 = ptr4;\n      resultPtr = ptr4;\n      if (DAT_0010b7e0 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((unaffVar1 != 0) && (*(long *)(unaffVar1 + 0x10) != 0)) && (DAT_0010b234 != 0)) &&\n     ((strPtr2 = (char *)(**(code **)(*(long *)(unaffVar3 + 8) + 0x220))\n                                  (unaffVar3,*(long *)(unaffVar1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), strPtr2 != (char *)0x0 &&\n      (*strPtr2 != '\\0')))) {\n    ptr3 = &DAT_001071e0;\n    if ((inStackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(unaffVar1 + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr3 = &DAT_001071df;\n    }\n    resultPtr = (undefined8 *)reconcat(resultPtr,unaffVar2,ptr3,strPtr2,0);\n    unaffVar2 = resultPtr;\n  }\n  printf(unaffStrPtr,unaffVar2);\n  if (strPtr != (char *)0x0) {\n    *strPtr = '@';\n  }\nLAB_001047ba:\n  free(resultPtr);\n  return;\n}\n\n",
            "called": [
                "printf",
                "bfd_demangle",
                "strchr",
                "FUN_001047d0",
                "FUN_0010268b"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "FUN_00104740"
            ],
            "imported": false,
            "current_name": "print_formatted_output_00102739"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_file_size_and_content_00105050",
                "param_1": "file_path1",
                "param_2": "file_path2",
                "cVar1": "lastChar1",
                "__s": "str1",
                "__s_00": "str2",
                "lVar3": "headerSize1",
                "uVar2": "headerSize2",
                "sVar5": "length1",
                "sVar6": "length2",
                "pcVar7": "compString1",
                "pcVar8": "compString2",
                "lVar9": "file1",
                "lVar10": "file2",
                "uVar11": "result",
                "uVar12": "totalSize1",
                "uVar13": "totalSize2",
                "uVar14": "combinedSize1",
                "uVar15": "currentFileSize",
                "unaff_R13": "errorCode",
                "bVar16": "isEqual"
            },
            "code": "\nulong compareFileSizeAndContent_00105050(undefined8 file_path1,undefined8 file_path2)\n\n{\n  char lastChar1;\n  ulong headerSize2;\n  char *str1;\n  char *str2;\n  long headerSize1;\n  uint uVar4;\n  size_t length1;\n  size_t length2;\n  char *compString1;\n  char *compString2;\n  long file1;\n  long file2;\n  ulong result;\n  ulong totalSize1;\n  ulong totalSize2;\n  ulong combinedSize1;\n  undefined8 currentFileSize;\n  long errorCode;\n  bool isEqual;\n  \n  file1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,file_path1,DAT_0010b770);\n  result = (ulong)DAT_0010b778;\n  file2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,result,file_path2,DAT_0010b768);\n  if ((file1 != 0) && (file2 != 0)) {\n    headerSize1 = *(long *)(file2 + 0x20);\n    if (*(long *)(file1 + 0x20) == 0x10c2a8) {\n      result = 0xffffffff;\n      if (headerSize1 == 0x10c2a8) {\nLAB_001050fa:\n        result = compare_strings_00104fa0(file_path1,file_path2);\n        return result;\n      }\n    }\n    else if (headerSize1 == 0x10c2a8) {\n      result = 1;\n    }\n    else {\n      totalSize2 = *(long *)(file1 + 0x10) + *(long *)(*(long *)(file1 + 0x20) + 0x30);\n      result = *(long *)(file2 + 0x10) + *(long *)(headerSize1 + 0x30);\n      if (totalSize2 == result) goto LAB_001050fa;\n      result = (ulong)(-(uint)(totalSize2 < result) | 1);\n    }\n    return result;\n  }\n  currentFileSize = *DAT_0010b780;\n  print_error_00106530();\n  file1 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,currentFileSize,DAT_0010b770);\n  file2 = (**(code **)(DAT_0010b780[1] + 0x270))(DAT_0010b780,DAT_0010b778,result,DAT_0010b768);\n  if ((file1 == 0) || (errorCode = file2, file2 == 0)) {\n    file2 = print_error_00106530(*DAT_0010b780);\n  }\n  if ((*(long *)(file1 + 0x20) == 0x10c2a8) || (*(long *)(file2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  totalSize2 = *(ulong *)(*(long *)(file1 + 0x20) + 0x30);\n  headerSize2 = *(ulong *)(*(long *)(file2 + 0x20) + 0x30);\n  combinedSize1 = *(long *)(file1 + 0x10) + totalSize2;\n  totalSize1 = *(long *)(errorCode + 0x10) + headerSize2;\n  isEqual = combinedSize1 < totalSize1;\n  if ((combinedSize1 != totalSize1) || (isEqual = totalSize2 < headerSize2, totalSize2 != headerSize2)) {\n    return (ulong)(-(uint)isEqual | 1);\n  }\n  str1 = *(char **)(file1 + 8);\n  str2 = *(char **)(errorCode + 8);\n  length1 = strlen(str1);\n  length2 = strlen(str2);\n  compString1 = strstr(str1,\"gnu_compiled\");\n  if (compString1 == (char *)0x0) {\n    compString2 = strstr(str1,\"gcc2_compiled\");\n    compString1 = strstr(str2,\"gnu_compiled\");\n    if ((compString1 == (char *)0x0) && (compString1 = strstr(str2,\"gcc2_compiled\"), compString1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (compString2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    compString1 = strstr(str2,\"gnu_compiled\");\n    if (compString1 == (char *)0x0) {\n      compString2 = strstr(str2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (compString2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(errorCode + 0x18) & 0x4000;\n  if ((*(byte *)(file1 + 0x19) & 0x40) == 0) {\n    if ((length1 < 3) || (str1[length1 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((length2 < 3) || (str2[length2 - 2] != '.')) goto LAB_00103202;\n      isEqual = false;\n      goto LAB_001031e7;\n    }\n    lastChar1 = str1[length1 - 1];\n    isEqual = lastChar1 == 'o' || lastChar1 == 'a';\n    if (uVar4 == 0) {\n      if ((length2 < 3) || (str2[length2 - 2] != '.')) {\n        if (lastChar1 == 'o' || lastChar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (length2 < 3) {\n      return 0xffffffff;\n    }\n    if (str2[length2 - 2] != '.') {\n      return 0xffffffff;\n    }\n    isEqual = true;\nLAB_001031e7:\n    if ((str2[length2 - 1] != 'o') && (str2[length2 - 1] != 'a')) {\n      if (isEqual) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!isEqual) {\n    return 1;\n  }\nLAB_00103202:\n  result = compare_strings_00104fa0(currentFileSize,result);\n  return result;\n}\n\n",
            "called": [
                "FUN_00104fa0",
                "FUN_00102fc3"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "FUN_00103bec"
            ],
            "imported": false,
            "current_name": "compare_file_size_and_content_00105050"
        },
        "bfd_plugin_set_program_name": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "bfd_plugin_set_program_name"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_binary_001049c0",
                "pcVar1": "fileName",
                "pcVar2": "processCode",
                "cVar3": "character",
                "iVar4": "comparisonResult",
                "uVar5": "flag",
                "uVar6": "result",
                "lVar7": "length",
                "puVar8": "tempPointer",
                "lVar9": "value",
                "puVar10": "tempPointer",
                "puVar11": "currentPointer",
                "puVar12": "basePointer",
                "puVar13": "pointer",
                "puVar14": "pointer2",
                "puVar15": "basePointer2",
                "unaff_RBX": "ptr1",
                "__ptr": "ptr3",
                "unaff_RBP": "ptr3",
                "unaff_R12": "pointerSize",
                "unaff_R13": "iterationPointer",
                "unaff_R14": "stride",
                "unaff_R15": "tempPointer",
                "bVar16": "booleanFlag",
                "bVar17": "byteValue",
                "unaff_retaddr": "returnAddress",
                "uVar18": "value2",
                "in_stack_00000008": "stackVariable1",
                "in_stack_00000010": "stackVariable2",
                "in_stack_00000018": "stackVariable3",
                "in_stack_00000038": "stackVariable4",
                "in_stack_00000038._4_4_": "stackVariable5",
                "in_stack_00000040": "stackVariable6",
                "in_stack_00000048": "stackVariable7"
            },
            "code": "\nvoid processBinary_001049c0(void)\n\n{\n  char *fileName;\n  code *processCode;\n  char character;\n  int comparisonResult;\n  uint flag;\n  undefined8 result;\n  long length;\n  undefined8 *tempPointer;\n  long value;\n  undefined8 *tempPointer;\n  undefined8 *ptr1;\n  undefined8 *ptr3;\n  undefined8 *ptr3;\n  undefined8 *currentPointer;\n  undefined8 *basePointer;\n  undefined8 *in_R8;\n  undefined8 *pointer;\n  undefined8 *in_R9;\n  undefined8 *pointer2;\n  undefined8 *basePointer2;\n  undefined8 *pointerSize;\n  undefined8 *iterationPointer;\n  undefined8 *stride;\n  undefined8 *tempPointer;\n  bool booleanFlag;\n  byte byteValue;\n  ulong returnAddress;\n  ulong value2;\n  undefined8 stackVariable1;\n  undefined8 *stackVariable2;\n  undefined8 *stackVariable3;\n  undefined8 stackVariable4;\n  void *stackVariable6;\n  undefined8 *stackVariable7;\n  \n  byteValue = 0;\n  do {\n    ptr1 = (undefined8 *)((long)ptr1 + (long)stride);\nLAB_001049c3:\n    do {\n      do {\n        iterationPointer = (undefined8 *)((long)iterationPointer + (long)stride);\n        basePointer2 = pointerSize;\n        basePointer = ptr3;\n        if (pointerSize <= iterationPointer) goto LAB_00104b15;\nLAB_001049cf:\n        tempPointer = (undefined8 *)\n                 (**(code **)(ptr3[1] + 0x270))\n                           (ptr3,returnAddress & 0xffffffff,iterationPointer,tempPointer);\n        currentPointer = ptr3;\n        basePointer = iterationPointer;\n        basePointer2 = tempPointer;\n        if (tempPointer == (undefined8 *)0x0) goto LAB_00102eb0;\n        fileName = (char *)tempPointer[1];\n        if (((fileName == (char *)0x0) || (*fileName != '_')) || (fileName[1] != '_')) {\nLAB_00104a03:\n          if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          flag = (uint)(tempPointer[4] == 0x10c2a8);\nLAB_00104af9:\n          if (flag != 0) goto LAB_00104a2d;\n          iterationPointer = (undefined8 *)((long)iterationPointer + (long)stride);\n          basePointer2 = pointerSize;\n          basePointer = ptr3;\n          if (pointerSize <= iterationPointer) {\nLAB_00104b15:\n            ptr1 = (undefined8 *)((long)ptr1 - (long)stackVariable3);\n            if (stride == (undefined8 *)0x8) {\n              value = basePointer[1];\n              currentPointer = (undefined8 *)((long)ptr1 + 7);\n              if (-1 < (long)ptr1) {\n                currentPointer = ptr1;\n              }\n              in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n              processCode = *(code **)(value + 0x208);\n              currentPointer = (undefined8 *)((long)currentPointer >> 3);\n            }\n            else {\n              currentPointer = (undefined8 *)((long)ptr1 / (long)stride);\n              value = basePointer[1];\n              processCode = *(code **)(value + 0x208);\n            }\n            ptr3 = basePointer;\n            if (DAT_0010b800 == 0) {\n              DAT_0010b778 = DAT_0010b80c != 0;\n              DAT_0010b780 = basePointer;\n              DAT_0010b770 = (undefined8 *)(*processCode)(basePointer);\n              DAT_0010b768 = (undefined8 *)(**(code **)(basePointer[1] + 0x208))(basePointer);\n              ptr1 = stackVariable7;\n              if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n                print_error_00106530(*basePointer);\n                ptr3 = tempPointer;\n                goto LAB_00102d8e;\n              }\n              pointerSize = (undefined8 *)(ulong)stackVariable5;\n              if (DAT_0010b7f8 != 0) {\n                value2 = (ulong)(DAT_0010b80c != 0);\n                qsort(stackVariable7,(size_t)currentPointer,(size_t)pointerSize,validate_binary_files_00102fd2);\n                basePointer2 = (undefined8 *)xmalloc((long)currentPointer << 4);\n                pointer = DAT_0010b770;\n                ptr3 = DAT_0010b768;\n                stride = (undefined8 *)((long)currentPointer * (long)pointerSize + (long)ptr1);\n                tempPointer = DAT_0010b770;\n                in_R9 = DAT_0010b768;\n                if (stride <= ptr1) goto LAB_00102ec2;\n                currentPointer = (undefined8 *)\n                          (**(code **)(basePointer[1] + 0x270))(basePointer,value2 & 0xffffffff,ptr1);\n                ptr3 = ptr1;\n                in_R8 = pointerSize;\n                stackVariable2 = basePointer2;\n                if (currentPointer == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(stackVariable7,(size_t)currentPointer,(size_t)pointerSize,\n                    (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2])\n              ;\n              value = basePointer[1];\n            }\n            ptr3 = (undefined8 *)0x0;\n            do {\n              basePointer = stackVariable7;\n              tempPointer = (undefined8 *)(ulong)DAT_0010b7f8;\n              stride = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n              if (DAT_0010b7f8 != 0) {\n                basePointer2 = (undefined8 *)(**(code **)(value + 0x208))(ptr3);\n                if (basePointer2 == (undefined8 *)0x0) goto LAB_00102ed2;\n                ptr1 = ptr3 + (long)currentPointer * 2;\n                currentPointer = ptr3;\n                do {\n                  if (ptr1 <= currentPointer) {\nLAB_00104c75:\n                    if (stackVariable6 == (void *)0x0) {\n                      free(stackVariable7);\n                      free(ptr3);\n                      return;\n                    }\n                    free(stackVariable6);\n                    free(stackVariable7);\n                    free(ptr3);\n                    return;\n                  }\n                  tempPointer = basePointer2;\n                  value = (**(code **)(ptr3[1] + 0x270))(ptr3,stride,*currentPointer);\n                  if (value == 0) {\n                    print_error_00106530(*ptr3,0);\nLAB_00102ed2:\n                    basePointer = (undefined8 *)*ptr3;\n                    print_error_00106530();\n                    pointer = in_R8;\n                    pointer2 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  basePointer = currentPointer + 1;\n                  currentPointer = currentPointer + 2;\n                  print_info_00105110(ptr3,value,*basePointer,stackVariable1);\n                } while( true );\n              }\n              pointerSize = (undefined8 *)(ulong)stackVariable5;\n              tempPointer = (undefined8 *)(**(code **)(value + 0x208))(ptr3);\n              if (tempPointer == (undefined8 *)0x0) {\n                print_error_00106530(*ptr3);\n                basePointer = pointerSize;\n                if (DAT_0010b80c == 0) {\n                  value = (**(code **)(ptr3[1] + 0x350))(ptr3);\n                  currentPointer = stackVariable7;\n                  basePointer2 = pointerSize;\n                  if (value < 1) {\n                    tempPointer = (undefined8 *)0x0;\n                    ptr1 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    ptr1 = (undefined8 *)xmalloc();\n                    tempPointer = (undefined8 *)(**(code **)(ptr3[1] + 0x358))(ptr3,ptr1);\n                    basePointer = basePointer2;\n                    if ((long)tempPointer < 0) {\n                      basePointer = (undefined8 *)*ptr3;\n                      currentPointer = (undefined8 *)print_error_00106530(basePointer,basePointer2);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  tempPointer = pointerSize;\n                  ptr1 = stackVariable7;\n                  currentPointer = (undefined8 *)0x0;\n                  basePointer2 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = ptr1;\n                value = (**(code **)(ptr3[1] + 0x360))(ptr3,basePointer2,currentPointer,tempPointer);\n                pointerSize = basePointer;\n                if (0 < value) {\n                  pointerSize = (undefined8 *)((long)basePointer + value);\n                  stackVariable7 = (undefined8 *)xrealloc(stackVariable7);\n                  length = 0;\n                  do {\n                    stackVariable7[(long)((long)basePointer + length)] =\n                         (void *)(length * 0x30 + (long)stackVariable6);\n                    length = length + 1;\n                  } while (value != length);\n                  stackVariable7[(long)((long)basePointer + value)] = 0;\n                }\n                if ((DAT_0010b80c == 0) && (ptr1 != (undefined8 *)0x0)) {\n                  free(ptr1);\n                }\n                if ((*(byte *)((long)ptr3 + 0x4a) & 0x10) != 0) {\n                  ptr1 = (undefined8 *)*ptr3;\n                  DAT_0010b230 = '\\0';\n                  result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  print_error_message_00106400(result);\n                }\n                stride = (undefined8 *)(ulong)stackVariable5;\n                booleanFlag = DAT_0010b80c != 0;\n                currentPointer = (undefined8 *)(ulong)booleanFlag;\n                tempPointer = stackVariable7;\n                stackVariable3 = stackVariable7;\n                tempPointer = (undefined8 *)(**(code **)(ptr3[1] + 0x208))(ptr3);\n                if (tempPointer != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                currentPointer = (undefined8 *)((long)currentPointer * (long)pointerSize + (long)basePointer);\n                ptr1 = basePointer;\n                while( true ) {\n                  if (currentPointer <= ptr1) goto LAB_00104c75;\n                  tempPointer = tempPointer;\n                  value = (**(code **)(ptr3[1] + 0x270))(ptr3,stride,ptr1);\n                  if (value == 0) break;\n                  ptr1 = (undefined8 *)((long)ptr1 + (long)pointerSize);\n                  print_info_00105110(ptr3,value,0,stackVariable1);\n                }\n                print_error_00106530(*ptr3,0);\n              }\n              print_error_00106530(*ptr3);\n              basePointer = ptr3;\n              basePointer2 = tempPointer;\nLAB_00102eb0:\n              print_error_00106530(*currentPointer);\nLAB_00102eb9:\n              print_error_00106530(*basePointer);\nLAB_00102ec2:\n              currentPointer = (undefined8 *)0x0;\n              ptr3 = ptr1;\n              in_R8 = pointerSize;\n              pointer = tempPointer;\n              ptr3 = in_R9;\n              stackVariable2 = basePointer2;\nLAB_00104e35:\n              while (in_R9 = pointer, ptr3 < stride) {\n                ptr1 = (undefined8 *)((long)ptr3 + (long)in_R8);\n                if (ptr1 < stride) {\n                  tempPointer = ptr3;\n                  pointer = in_R8;\n                  pointer2 = in_R9;\n                  tempPointer = (undefined8 *)(**(code **)(basePointer[1] + 0x270))();\n                  if (tempPointer == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointer2;\n                    in_R8 = pointer;\n                    basePointer = (undefined8 *)*basePointer;\n                    tempPointer = (undefined8 *)print_error_00106530();\n                  }\n                  else {\n                    tempPointer = (undefined8 *)currentPointer[4];\n                    if ((*(uint *)(currentPointer + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  value = currentPointer[2];\nLAB_00102ee7:\n                  if (tempPointer == (undefined8 *)tempPointer[4]) {\n                    value = tempPointer[2] - value;\n                    pointer = ptr3;\n                    pointer2 = ptr3;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  value = tempPointer[8] - value;\n                  pointer = ptr3;\n                  pointer2 = ptr3;\n                }\n                else {\n                  tempPointer = (undefined8 *)currentPointer[4];\n                  if ((*(uint *)(currentPointer + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    value = currentPointer[2];\n                    tempPointer = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  tempPointer = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointer = ptr3;\n                  pointer2 = ptr3;\n                  if (*(int *)(basePointer[1] + 8) == 5) {\n                    value = currentPointer[7];\n                  }\n                  else {\n                    value = currentPointer[2];\n                    if ((*(byte *)((long)tempPointer + 0x25) & 0x10) == 0) {\n                      if (ptr1 < stride) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                currentPointer = tempPointer;\n                ptr3 = ptr1;\n                ptr3 = in_R9;\n                if (value != 0) {\n                  *basePointer2 = pointer2;\n                  basePointer2[1] = value;\n                  basePointer2 = basePointer2 + 2;\n                }\n              }\n              currentPointer = (undefined8 *)((long)basePointer2 - (long)stackVariable2 >> 4);\n              qsort(stackVariable2,(size_t)currentPointer,0x10,FUN_00103533);\n              value = basePointer[1];\n              ptr1 = ptr3;\n              ptr3 = basePointer;\n              ptr3 = stackVariable2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        comparisonResult = strcmp(fileName + (fileName[2] == '_'),\"__gnu_lto_slim\");\n        stackVariable2 = tempPointer;\n        if (comparisonResult == 0) {\n          if (DAT_0010b230 != '\\0') {\n            stackVariable2 = (undefined8 *)*ptr3;\n            DAT_0010b230 = '\\0';\n            result = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            print_error_message_00106400(result,stackVariable2);\n          }\n          goto LAB_00104a03;\n        }\n        if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (DAT_0010b808 == 0) {\n          if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n          flag = (*(uint *)(tempPointer + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(tempPointer + 3) & 0x800082) == 0) && (tempPointer[4] != 0x10c2a8)) &&\n           ((*(byte *)(tempPointer[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (DAT_0010b81c != 0) {\n          if (DAT_0010b7f8 == 0) goto LAB_00104a53;\nprocess_lto_binary_00104d5b:\n          if ((tempPointer[4] != 0x10c2a8) && (tempPointer[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(tempPointer + 3) & 4) != 0);\n      if (DAT_0010b7f8 != 0) goto process_lto_binary_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n      if (DAT_0010b7e4 == 0) {\n        character = (**(code **)(ptr3[1] + 0x230))(ptr3);\n        if (character != '\\0') {\n          FUN_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (tempPointer[4] == 0x10c2a8);\nLAB_00104cba:\n    character = (**(code **)(ptr3[1] + 0x230))(ptr3);\n    if (character != '\\0') {\n      FUN_00102c19();\n      return;\n    }\nLAB_00104a7b:\n    if (ptr1 != iterationPointer) {\n      if (stride == (undefined8 *)0x8) {\n        *ptr1 = *iterationPointer;\n        processBinary_001049c0();\n        return;\n      }\n      for (; stride != (undefined8 *)0x0; stride = (undefined8 *)((long)stride + -1)) {\n        *(undefined *)ptr1 = *(undefined *)iterationPointer;\n        iterationPointer = (undefined8 *)((long)iterationPointer + (ulong)byteValue * -2 + 1);\n        ptr1 = (undefined8 *)((long)ptr1 + (ulong)byteValue * -2 + 1);\n      }\n      processBinary_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  basePointer2 = (undefined8 *)((long)pointerSize * (long)stride);\n  pointerSize = (undefined8 *)((long)stackVariable3 + (long)basePointer2);\n  ptr1 = stackVariable3;\n  basePointer = ptr3;\n  if (stackVariable3 < pointerSize) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  returnAddress = (ulong)booleanFlag;\n  iterationPointer = stackVariable3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_binary_001049c0"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbols_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "supportedTarget",
                "iVar2": "totalLength",
                "iVar3": "totalLength",
                "pcVar4": "message",
                "lVar5": "currentIndex",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "targetPtr",
                "ppcVar8": "demanglerPtr",
                "pcVar9": "demanglerDelimiter",
                "local_3c": "delimiterLength"
            },
            "code": "\nvoid printSymbols_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long supportedTarget;\n  int totalLength;\n  int totalLength;\n  char *message;\n  long currentIndex;\n  size_t stringLength;\n  long *targetList;\n  long *targetPtr;\n  char **demanglerPtr;\n  char *demanglerDelimiter;\n  uint delimiterLength;\n  \n  supportedTarget = DAT_0010b820;\n  message = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  fprintf(outputFile,message,supportedTarget);\n  message = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\" The options are:\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*message == ' ') {\n    supportedTarget = 1;\n    do {\n      currentIndex = supportedTarget;\n      supportedTarget = currentIndex + 1;\n    } while (message[currentIndex] == ' ');\n    delimiterLength = (uint)currentIndex;\n  }\n  else {\n    delimiterLength = 0;\n  }\n  totalLength = fprintf(outputFile,\"%s\",message);\n  demanglerDelimiter = \"\";\n  for (demanglerPtr = (char **)&libiberty_demanglers; *demanglerPtr != (char *)0x0; demanglerPtr = demanglerPtr + 3) {\n    stringLength = strlen(*demanglerPtr);\n    if (0x4a < (long)totalLength + stringLength) {\n      fprintf(outputFile,\"%.1s\\n\",demanglerDelimiter);\n      demanglerDelimiter = \"\";\n      totalLength = fprintf(outputFile,\"%.*s\",(ulong)delimiterLength,message);\n    }\n    totalLength = fprintf(outputFile,\"%s\\\"%s\\\"\",demanglerDelimiter,*demanglerPtr);\n    totalLength = totalLength + totalLength;\n    demanglerDelimiter = \", \";\n  }\n  fputc(10,outputFile);\n  message = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  fprintf(outputFile,message);\n  message = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  fprintf(outputFile,message);\n  supportedTarget = DAT_0010b820;\n  if (DAT_0010b820 == 0) {\n    message = (char *)dcgettext(0,\"Supported targets:\",5);\n    fprintf(outputFile,message);\n  }\n  else {\n    message = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    fprintf(outputFile,message,supportedTarget);\n  }\n  targetList = (long *)bfd_target_list();\n  targetPtr = targetList;\n  while( true ) {\n    supportedTarget = *targetPtr;\n    targetPtr = targetPtr + 1;\n    if (supportedTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    message = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,message,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fseek",
                "bfd_target_list",
                "exit",
                "fprintf",
                "strlen",
                "dcgettext",
                "fputc",
                "free",
                "FUN_00102450"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "FUN_001055f0"
            ],
            "imported": false,
            "current_name": "print_symbols_00103ca0"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_lto_binary_00104d5b",
                "in_RCX": "parameters",
                "unaff_RBP": "base_pointer",
                "unaff_R12": "size",
                "unaff_R13": "current_element",
                "unaff_R14": "element_size",
                "unaff_R15": "tmp_variable",
                "param_7": "argument_7",
                "param_8": "arguments",
                "param_9": "array",
                "param_13": "memory_allocation",
                "param_14": "unsorted_array",
                "lVar8": "loop_counter_8",
                "lVar9": "loop_counter_9",
                "bVar16": "bool_variable_16",
                "bVar17": "bool_variable_17",
                "unaff_retaddr": "return_address",
                "uVar18": "unsigned_variable_18",
                "uVar5": "unsigned_variable_5",
                "uVar6": "unsigned_variable_6",
                "puVar7": "pointer_variable",
                "puVar10": "pointer_variable_10",
                "puVar11": "pointer_variable_11",
                "puVar12": "pointer_variable_12",
                "puVar13": "pointer_variable_13",
                "puVar14": "pointer_variable_14",
                "puVar15": "pointer_variable_15",
                "__ptr": "temporary_pointer"
            },
            "code": "\nvoid process_lto_binary_00104d5b(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint unsigned_variable_5;\n  undefined8 unsigned_variable_6;\n  undefined8 *pointer_variable;\n  long loop_counter_8;\n  long loop_counter_9;\n  undefined8 *pointer_variable_10;\n  undefined8 *parameters;\n  undefined8 *unaff_RBX;\n  undefined8 *temporary_pointer;\n  undefined8 *pointer_variable_11;\n  undefined8 *base_pointer;\n  undefined8 *pointer_variable_12;\n  undefined8 *in_R8;\n  undefined8 *pointer_variable_13;\n  undefined8 *in_R9;\n  undefined8 *pointer_variable_14;\n  undefined8 *pointer_variable_15;\n  undefined8 *size;\n  undefined8 *current_element;\n  undefined8 *element_size;\n  undefined8 *tmp_variable;\n  bool bool_variable_16;\n  byte bool_variable_17;\n  ulong return_address;\n  ulong unsigned_variable_18;\n  undefined8 argument_7;\n  undefined8 *arguments;\n  undefined8 *array;\n  undefined8 in_stack_00000038;\n  void *memory_allocation;\n  undefined8 *unsorted_array;\n  \n  bool_variable_17 = 0;\n  do {\n    if ((parameters[4] != 0x10c2a8) && (parameters[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      current_element = (undefined8 *)((long)current_element + (long)element_size);\n      pointer_variable_15 = size;\n      pointer_variable_12 = base_pointer;\n      if (size <= current_element) goto LAB_00104b15;\nLAB_001049cf:\n      parameters = (undefined8 *)\n               (**(code **)(base_pointer[1] + 0x270))\n                         (base_pointer,return_address & 0xffffffff,current_element,tmp_variable);\n      pointer_variable_11 = base_pointer;\n      pointer_variable_12 = current_element;\n      pointer_variable_15 = tmp_variable;\n      if (parameters == (undefined8 *)0x0) goto LAB_00102eb0;\n      pcVar1 = (char *)parameters[1];\n      if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n        if (DAT_0010b7e8 == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        unsigned_variable_5 = (uint)(parameters[4] == 0x10c2a8);\nLAB_00104af9:\n        if (unsigned_variable_5 != 0) goto LAB_00104a2d;\n        current_element = (undefined8 *)((long)current_element + (long)element_size);\n        pointer_variable_15 = size;\n        pointer_variable_12 = base_pointer;\n        if (size <= current_element) {\nLAB_00104b15:\n          unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)array);\n          if (element_size == (undefined8 *)0x8) {\n            loop_counter_9 = pointer_variable_12[1];\n            pointer_variable_11 = (undefined8 *)((long)unaff_RBX + 7);\n            if (-1 < (long)unaff_RBX) {\n              pointer_variable_11 = unaff_RBX;\n            }\n            in_R8 = (undefined8 *)(ulong)DAT_0010b800;\n            pcVar2 = *(code **)(loop_counter_9 + 0x208);\n            pointer_variable_11 = (undefined8 *)((long)pointer_variable_11 >> 3);\n          }\n          else {\n            pointer_variable_11 = (undefined8 *)((long)unaff_RBX / (long)element_size);\n            loop_counter_9 = pointer_variable_12[1];\n            pcVar2 = *(code **)(loop_counter_9 + 0x208);\n          }\n          base_pointer = pointer_variable_12;\n          if (DAT_0010b800 == 0) {\n            DAT_0010b778 = DAT_0010b80c != 0;\n            DAT_0010b780 = pointer_variable_12;\n            DAT_0010b770 = (undefined8 *)(*pcVar2)(pointer_variable_12);\n            DAT_0010b768 = (undefined8 *)(**(code **)(pointer_variable_12[1] + 0x208))(pointer_variable_12);\n            unaff_RBX = unsorted_array;\n            if ((DAT_0010b770 == (undefined8 *)0x0) || (DAT_0010b768 == (undefined8 *)0x0)) {\n              print_error_00106530(*pointer_variable_12);\n              temporary_pointer = tmp_variable;\n              goto LAB_00102d8e;\n            }\n            size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (DAT_0010b7f8 != 0) {\n              unsigned_variable_18 = (ulong)(DAT_0010b80c != 0);\n              qsort(unsorted_array,(size_t)pointer_variable_11,(size_t)size,validate_binary_files_00102fd2);\n              pointer_variable_15 = (undefined8 *)xmalloc((long)pointer_variable_11 << 4);\n              pointer_variable_13 = DAT_0010b770;\n              base_pointer = DAT_0010b768;\n              element_size = (undefined8 *)((long)pointer_variable_11 * (long)size + (long)unaff_RBX);\n              parameters = DAT_0010b770;\n              in_R9 = DAT_0010b768;\n              if (element_size <= unaff_RBX) goto LAB_00102ec2;\n              pointer_variable_11 = (undefined8 *)\n                        (**(code **)(pointer_variable_12[1] + 0x270))(pointer_variable_12,unsigned_variable_18 & 0xffffffff,unaff_RBX);\n              temporary_pointer = unaff_RBX;\n              in_R8 = size;\n              arguments = pointer_variable_15;\n              if (pointer_variable_11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(unsorted_array,(size_t)pointer_variable_11,(size_t)size,\n                  (__compar_fn_t)(&PTR_FUN_0010acc0)[(long)DAT_0010b7f4 + (long)DAT_0010b7fc * 2]);\n            loop_counter_9 = pointer_variable_12[1];\n          }\n          temporary_pointer = (undefined8 *)0x0;\n          do {\n            pointer_variable_12 = unsorted_array;\n            pointer_variable = (undefined8 *)(ulong)DAT_0010b7f8;\n            element_size = (undefined8 *)(ulong)(DAT_0010b80c != 0);\n            if (DAT_0010b7f8 != 0) {\n              pointer_variable_15 = (undefined8 *)(**(code **)(loop_counter_9 + 0x208))(base_pointer);\n              if (pointer_variable_15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaff_RBX = temporary_pointer + (long)pointer_variable_11 * 2;\n              pointer_variable_11 = temporary_pointer;\n              do {\n                if (unaff_RBX <= pointer_variable_11) {\nLAB_00104c75:\n                  if (memory_allocation != (void *)0x0) {\n                    free(memory_allocation);\n                    free(unsorted_array);\n                    free(temporary_pointer);\n                    return;\n                  }\n                  free(unsorted_array);\n                  free(temporary_pointer);\n                  return;\n                }\n                pointer_variable = pointer_variable_15;\n                loop_counter_9 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,element_size,*pointer_variable_11);\n                if (loop_counter_9 == 0) {\n                  print_error_00106530(*base_pointer,0);\nLAB_00102ed2:\n                  pointer_variable_12 = (undefined8 *)*base_pointer;\n                  print_error_00106530();\n                  pointer_variable_13 = in_R8;\n                  pointer_variable_14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                pointer_variable_12 = pointer_variable_11 + 1;\n                pointer_variable_11 = pointer_variable_11 + 2;\n                print_info_00105110(base_pointer,loop_counter_9,*pointer_variable_12,argument_7);\n              } while( true );\n            }\n            size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            tmp_variable = (undefined8 *)(**(code **)(loop_counter_9 + 0x208))(base_pointer);\n            if (tmp_variable == (undefined8 *)0x0) {\n              print_error_00106530(*base_pointer);\n              pointer_variable_12 = size;\n              if (DAT_0010b80c == 0) {\n                loop_counter_9 = (**(code **)(base_pointer[1] + 0x350))(base_pointer);\n                pointer_variable_11 = unsorted_array;\n                pointer_variable_15 = size;\n                if (loop_counter_9 < 1) {\n                  pointer_variable = (undefined8 *)0x0;\n                  unaff_RBX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaff_RBX = (undefined8 *)xmalloc();\n                  pointer_variable = (undefined8 *)(**(code **)(base_pointer[1] + 0x358))(base_pointer,unaff_RBX);\n                  pointer_variable_12 = pointer_variable_15;\n                  if ((long)pointer_variable < 0) {\n                    pointer_variable_12 = (undefined8 *)*base_pointer;\n                    pointer_variable_11 = (undefined8 *)print_error_00106530(pointer_variable_12,pointer_variable_15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                pointer_variable = size;\n                unaff_RBX = unsorted_array;\n                pointer_variable_11 = (undefined8 *)0x0;\n                pointer_variable_15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = unaff_RBX;\n              loop_counter_9 = (**(code **)(base_pointer[1] + 0x360))(base_pointer,pointer_variable_15,pointer_variable_11,pointer_variable);\n              size = pointer_variable_12;\n              if (0 < loop_counter_9) {\n                size = (undefined8 *)((long)pointer_variable_12 + loop_counter_9);\n                unsorted_array = (undefined8 *)xrealloc(unsorted_array);\n                loop_counter_8 = 0;\n                do {\n                  unsorted_array[(long)pointer_variable_12 + loop_counter_8] = (void *)(loop_counter_8 * 0x30 + (long)memory_allocation);\n                  loop_counter_8 = loop_counter_8 + 1;\n                } while (loop_counter_9 != loop_counter_8);\n                unsorted_array[(long)pointer_variable_12 + loop_counter_9] = 0;\n              }\n              if ((DAT_0010b80c == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                free(unaff_RBX);\n              }\n              if ((*(byte *)((long)base_pointer + 0x4a) & 0x10) != 0) {\n                unaff_RBX = (undefined8 *)*base_pointer;\n                DAT_0010b230 = '\\0';\n                unsigned_variable_6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                print_error_message_00106400(unsigned_variable_6);\n              }\n              element_size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              bool_variable_16 = DAT_0010b80c != 0;\n              pointer_variable_11 = (undefined8 *)(ulong)bool_variable_16;\n              parameters = unsorted_array;\n              array = unsorted_array;\n              tmp_variable = (undefined8 *)(**(code **)(base_pointer[1] + 0x208))(base_pointer);\n              if (tmp_variable != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              pointer_variable_11 = (undefined8 *)((long)pointer_variable_11 * (long)size + (long)pointer_variable_12);\n              unaff_RBX = pointer_variable_12;\n              while( true ) {\n                if (pointer_variable_11 <= unaff_RBX) goto LAB_00104c75;\n                parameters = tmp_variable;\n                loop_counter_9 = (**(code **)(base_pointer[1] + 0x270))(base_pointer,element_size,unaff_RBX);\n                if (loop_counter_9 == 0) break;\n                unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)size);\n                print_info_00105110(base_pointer,loop_counter_9,0,argument_7);\n              }\n              print_error_00106530(*base_pointer,0);\n            }\n            print_error_00106530(*base_pointer);\n            pointer_variable_12 = base_pointer;\n            pointer_variable_15 = tmp_variable;\nLAB_00102eb0:\n            print_error_00106530(*pointer_variable_11);\nLAB_00102eb9:\n            print_error_00106530(*pointer_variable_12);\nLAB_00102ec2:\n            pointer_variable_11 = (undefined8 *)0x0;\n            temporary_pointer = unaff_RBX;\n            in_R8 = size;\n            pointer_variable_13 = parameters;\n            base_pointer = in_R9;\n            arguments = pointer_variable_15;\nLAB_00104e35:\n            while (in_R9 = pointer_variable_13, temporary_pointer < element_size) {\n              unaff_RBX = (undefined8 *)((long)temporary_pointer + (long)in_R8);\n              if (unaff_RBX < element_size) {\n                pointer_variable = base_pointer;\n                pointer_variable_13 = in_R8;\n                pointer_variable_14 = in_R9;\n                pointer_variable_10 = (undefined8 *)(**(code **)(pointer_variable_12[1] + 0x270))();\n                if (pointer_variable_10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = pointer_variable_14;\n                  in_R8 = pointer_variable_13;\n                  pointer_variable_12 = (undefined8 *)*pointer_variable_12;\n                  pointer_variable_10 = (undefined8 *)print_error_00106530();\n                }\n                else {\n                  pointer_variable = (undefined8 *)pointer_variable_11[4];\n                  if ((*(uint *)(pointer_variable_11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                loop_counter_9 = pointer_variable_11[2];\nLAB_00102ee7:\n                if (pointer_variable == (undefined8 *)pointer_variable_10[4]) {\n                  loop_counter_9 = pointer_variable_10[2] - loop_counter_9;\n                  pointer_variable_13 = base_pointer;\n                  pointer_variable_14 = temporary_pointer;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                loop_counter_9 = pointer_variable[8] - loop_counter_9;\n                pointer_variable_13 = base_pointer;\n                pointer_variable_14 = temporary_pointer;\n              }\n              else {\n                pointer_variable = (undefined8 *)pointer_variable_11[4];\n                if ((*(uint *)(pointer_variable_11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  loop_counter_9 = pointer_variable_11[2];\n                  pointer_variable_10 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                pointer_variable_10 = (undefined8 *)0x0;\nLAB_00104e95:\n                pointer_variable_13 = base_pointer;\n                pointer_variable_14 = temporary_pointer;\n                if (*(int *)(pointer_variable_12[1] + 8) == 5) {\n                  loop_counter_9 = pointer_variable_11[7];\n                }\n                else {\n                  loop_counter_9 = pointer_variable_11[2];\n                  if ((*(byte *)((long)pointer_variable + 0x25) & 0x10) == 0) {\n                    if (unaff_RBX < element_size) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              pointer_variable_11 = pointer_variable_10;\n              temporary_pointer = unaff_RBX;\n              base_pointer = in_R9;\n              if (loop_counter_9 != 0) {\n                *pointer_variable_15 = pointer_variable_14;\n                pointer_variable_15[1] = loop_counter_9;\n                pointer_variable_15 = pointer_variable_15 + 2;\n              }\n            }\n            pointer_variable_11 = (undefined8 *)((long)pointer_variable_15 - (long)arguments >> 4);\n            qsort(arguments,(size_t)pointer_variable_11,0x10,compare_and_execute_00103533);\n            loop_counter_9 = pointer_variable_12[1];\n            unaff_RBX = temporary_pointer;\n            base_pointer = pointer_variable_12;\n            temporary_pointer = arguments;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n      arguments = parameters;\n      if (iVar4 == 0) {\n        if (DAT_0010b230 != '\\0') {\n          arguments = (undefined8 *)*base_pointer;\n          DAT_0010b230 = '\\0';\n          unsigned_variable_6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          print_error_message_00106400(unsigned_variable_6,arguments);\n        }\n        goto LAB_00104a03;\n      }\n      if (DAT_0010b7e8 != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (DAT_0010b808 == 0) {\n        if (DAT_0010b7d8 == 0) goto LAB_00104a2d;\n        unsigned_variable_5 = (*(uint *)(parameters + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(parameters + 3) & 0x800082) == 0) && (parameters[4] != 0x10c2a8)) &&\n         ((*(byte *)(parameters[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((DAT_0010b81c == 0) && ((*(byte *)(parameters + 3) & 4) != 0));\n  } while (DAT_0010b7f8 != 0);\n  in_R9 = (undefined8 *)(ulong)DAT_0010b7e4;\n  if (DAT_0010b7e4 == 0) {\n    cVar3 = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (cVar3 != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  }\n  else {\n    if (parameters[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    cVar3 = (**(code **)(base_pointer[1] + 0x230))(base_pointer);\n    if (cVar3 != '\\0') {\n      process_lto_object_00102c19();\n      return;\n    }\n  }\n  if (unaff_RBX != current_element) {\n    if (element_size != (undefined8 *)0x8) {\n      for (; element_size != (undefined8 *)0x0; element_size = (undefined8 *)((long)element_size + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)current_element;\n        current_element = (undefined8 *)((long)current_element + (ulong)bool_variable_17 * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)bool_variable_17 * -2 + 1);\n      }\n      process_binary_001049c0();\n      return;\n    }\n    *unaff_RBX = *current_element;\n    process_binary_001049c0();\n    return;\n  }\n  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)element_size);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  pointer_variable_15 = (undefined8 *)((long)size * (long)element_size);\n  size = (undefined8 *)((long)array + (long)pointer_variable_15);\n  unaff_RBX = array;\n  pointer_variable_12 = base_pointer;\n  if (array < size) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  return_address = (ulong)bool_variable_16;\n  current_element = array;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "strcmp",
                "FUN_00102c19",
                "qsort",
                "FUN_001049c0",
                "FUN_00106530",
                "FUN_00104d5b",
                "FUN_00105110",
                "FUN_00103533",
                "FUN_00102fd2",
                "dcgettext",
                "free",
                "xrealloc",
                "FUN_00106400",
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_lto_binary_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_and_exit_00106300",
                "param_1": "error_msg_ptr",
                "in_AL": "flag",
                "__arg": "arg_ptr",
                "__format": "format_ptr",
                "local_d8": "local_var1",
                "local_d4": "local_var2",
                "local_d0": "local_ptr1",
                "local_c8": "local_ptr2",
                "local_b8": "stack_buffer",
                "local_b0": "local_var3",
                "local_a8": "local_var4",
                "local_a0": "local_var5",
                "local_98": "local_var6",
                "local_90": "local_var7",
                "local_88": "local_var8",
                "local_78": "local_var9",
                "local_68": "local_var10",
                "local_58": "local_var11",
                "local_48": "local_var12",
                "local_38": "local_var13",
                "local_28": "local_var14",
                "local_18": "local_var15"
            },
            "code": "\n\n\nvoid print_and_exit_00106300(undefined4 error_msg_ptr,undefined4 param_2,undefined4 param_3,undefined4 param_4,\n                 undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,\n                 undefined8 param_9,undefined8 error_msg_ptr0,undefined8 error_msg_ptr1,undefined8 error_msg_ptr2,\n                 undefined8 error_msg_ptr3,undefined8 error_msg_ptr4)\n\n{\n  char flag;\n  undefined4 *arg_ptr;\n  char *format_ptr;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined *local_ptr1;\n  undefined *local_ptr2;\n  undefined stack_buffer [8];\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  undefined8 local_var6;\n  undefined8 local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  undefined4 local_var11;\n  undefined4 local_var12;\n  undefined4 local_var13;\n  undefined4 local_var14;\n  undefined4 local_var15;\n  \n  arg_ptr = &local_var1;\n  if (flag != '\\0') {\n    local_var8 = error_msg_ptr;\n    local_var9 = param_2;\n    local_var10 = param_3;\n    local_var11 = param_4;\n    local_var12 = param_5;\n    local_var13 = param_6;\n    local_var14 = param_7;\n    local_var15 = param_8;\n  }\n  local_ptr1 = &stack0x00000008;\n  local_var1 = 8;\n  local_ptr2 = stack_buffer;\n  local_var2 = 0x30;\n  local_var3 = error_msg_ptr0;\n  local_var4 = error_msg_ptr1;\n  local_var5 = error_msg_ptr2;\n  local_var6 = error_msg_ptr3;\n  local_var7 = error_msg_ptr4;\n  print_error_message_001063a0();\n  format_ptr = (char *)0x1;\n  xexit();\n  fflush(_stdout);\n  fprintf(_stderr,\"%s: \",DAT_0010b820);\n  vfprintf(_stderr,format_ptr,arg_ptr);\n  putc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "FUN_001063a0",
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "FUN_001053c0",
                "FUN_00103729",
                "FUN_00104370",
                "FUN_001055f0",
                "FUN_0010370a"
            ],
            "imported": false,
            "current_name": "print_and_exit_00106300"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_if_condition_met_00102f7b",
                "param_1": "message"
            },
            "code": "\n\n\nvoid print_if_condition_met_00102f7b(undefined8 message)\n\n{\n  if ((_DAT_0010b7c4 != 0) && (DAT_0010b818 == 0)) {\n    printf(\"%s:\\n\",message);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_if_condition_met_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_00106540",
                "param_1": "errorDescription",
                "iVar1": "errorStatus",
                "uVar2": "errorMessage",
                "in_R10": "extraInfo"
            },
            "code": "\n\n\nvoid printError_00106540(long errorDescription)\n\n{\n  int errorStatus;\n  undefined8 errorMessage;\n  undefined8 extraInfo;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorDescription != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",DAT_0010b820,errorDescription,errorMessage,extraInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",DAT_0010b820,errorMessage,extraInfo);\n  return;\n}\n\n",
            "called": [
                "FUN_00103a78",
                "fflush",
                "bfd_get_error",
                "bfd_errmsg",
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "FUN_00106530",
                "FUN_001043d0"
            ],
            "imported": false,
            "current_name": "print_error_00106540"
        }
    },
    "used_tokens": 102548,
    "layers": [
        [
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00103573",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00103533",
            "FUN_00103abf",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_0010268b",
            "FUN_001063a0",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00106400",
            "FUN_00106530",
            "FUN_00102739",
            "FUN_00106300"
        ],
        [
            "FUN_00103c00",
            "FUN_00104370",
            "FUN_00102f9f",
            "FUN_00103463",
            "FUN_0010249f",
            "FUN_00104fa0",
            "FUN_00104740"
        ],
        [
            "FUN_00102fc3",
            "FUN_00105110",
            "FUN_00102fd2",
            "FUN_00103b49",
            "FUN_00103bf6",
            "FUN_00105050"
        ],
        [
            "FUN_00103bec",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0"
        ],
        [
            "FUN_001043d0"
        ],
        [
            "FUN_001055f0"
        ],
        [
            "FUN_001054d0"
        ],
        [
            "FUN_0010370a",
            "FUN_00103729",
            "FUN_001035a2",
            "FUN_0010651a"
        ],
        [
            "FUN_00103a66",
            "FUN_001053c0",
            "FUN_001064b0"
        ]
    ],
    "locked_functions": []
}