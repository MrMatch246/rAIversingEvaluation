{
    "functions": {
        "FUN_0010c1a0": {
            "renaming": {},
            "code": "\n\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* asprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a0",
            "calling": [
                "asprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a0"
        },
        "FUN_001055a0": {
            "renaming": {
                "FUN_001055a0": "initialize_program_001055a0",
                "completed_0": "isInitialized",
                "__cxa_finalize": "finalizeCxa",
                "__dso_handle": "dsoHandle",
                "deregister_tm_clones": "deregisterTmClones"
            },
            "code": "\nvoid initializeProgram_001055a0(void)\n\n{\n  if (isInitialized != '\\0') {\n    return;\n  }\n  finalizeCxa(dsoHandle);\n  deregisterTmClones();\n  isInitialized = 1;\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize",
                "deregister_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055a0",
            "calling": [],
            "imported": false,
            "current_name": "initialize_program_001055a0"
        },
        "FUN_001021b0": {
            "renaming": {},
            "code": "\nvoid concat(void)\n\n{\n  concat();\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021b0",
            "calling": [
                "set_print_width.cold",
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_001021b0"
        },
        "FUN_00103c00": {
            "renaming": {
                "FUN_00103c00": "process_relocation_00103c00",
                "param_1": "param",
                "param_2": "relocation",
                "param_3": "results",
                "param_4": "param4",
                "param_5": "param5",
                "puVar1": "ptr1",
                "auVar2": "auxBuffer",
                "lVar3": "length",
                "uVar4": "var4",
                "uVar5": "var5"
            },
            "code": "\nundefined8\nprocessRelocation_00103c00(undefined8 *param,long relocation,undefined (*results) [16],undefined8 param4,\n            undefined8 param5)\n\n{\n  undefined8 *ptr1;\n  undefined auxBuffer [16];\n  long length;\n  undefined8 var4;\n  undefined8 var5;\n  \n  **(long **)*results = relocation;\n  if ((*(byte *)(relocation + 0x24) & 4) == 0) {\n    **(undefined8 **)(*results + 8) = 0;\n    **(undefined8 **)results[1] = 0;\n  }\n  else {\n    length = bfd_get_reloc_upper_bound();\n    if (-1 < length) {\n      ptr1 = *(undefined8 **)(*results + 8);\n      var4 = xmalloc(length);\n      var5 = *(undefined8 *)(results[1] + 8);\n      *ptr1 = var4;\n      ptr1 = *(undefined8 **)results[1];\n      var5 = bfd_canonicalize_reloc(param,relocation,**(undefined8 **)(*results + 8),var5);\n      *ptr1 = var5;\n      if (-1 < **(long **)results[1]) goto LAB_00103c7c;\n    }\n    bfd_fatal(*param);\n  }\nLAB_00103c7c:\n  length = *(long *)(*results + 8) + 8;\n  *(long *)results[1] = *(long *)results[1] + 8;\n  auxBuffer._8_4_ = (int)length;\n  auxBuffer._0_8_ = *(long *)*results + 8;\n  auxBuffer._12_4_ = (int)((ulong)length >> 0x20);\n  *results = auxBuffer;\n  return param5;\n}\n\n",
            "called": [
                "xmalloc",
                "bfd_get_reloc_upper_bound",
                "bfd_fatal",
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103c00",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "process_relocation_00103c00"
        },
        "FUN_001022d0": {
            "renaming": {},
            "code": "\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n  int iVar1;\n  \n  iVar1 = fseek(__stream,__off,__whence);\n  return iVar1;\n}\n\n",
            "called": [
                "fseek"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022d0"
        },
        "FUN_001023f0": {
            "renaming": {},
            "code": "\nvoid bfd_get_reloc_upper_bound(void)\n\n{\n  bfd_get_reloc_upper_bound();\n  return;\n}\n\n",
            "called": [
                "bfd_get_reloc_upper_bound"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023f0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023f0"
        },
        "FUN_00102190": {
            "renaming": {},
            "code": "\n\n\nint printf(char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = printf(__format);\n  return iVar1;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102190",
            "calling": [
                "print_archive_filename_bsd",
                "FUN_00103463",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "print_archive_member_bsd",
                "print_object_filename_sysv",
                "FUN_00102739",
                "main",
                "print_symbol_info_bsd.cold",
                "print_symbol",
                "print_symbol_filename_sysv",
                "print_object_filename_posix",
                "print_symbol_filename_posix.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix",
                "print_symbol_filename_bsd.cold",
                "print_object_filename_bsd",
                "print_value.constprop.0",
                "print_archive_member_posix",
                "display_file",
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102190"
        },
        "FUN_0010370a": {
            "renaming": {
                "FUN_0010370a": "print_symbol_info_0010370a",
                "plVar4": "printWidth",
                "uVar9": "maskedRBX",
                "uVar2": "symClass",
                "cVar1": "isUndefined",
                "pcVar10": "symbolType",
                "iVar3": "asprintfStatus",
                "lVar7": "symbolData",
                "bVar8": "symbolClass"
            },
            "code": "\nvoid printSymbolInfo_0010370a(void)\n\n{\n  char isUndefined;\n  ushort symClass;\n  int asprintfStatus;\n  long *printWidth;\n  int *piVar5;\n  undefined8 uVar6;\n  long symbolData;\n  ulong unaff_RBX;\n  byte symbolClass;\n  ulong maskedRBX;\n  char *symbolType;\n  \n  printWidth = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  maskedRBX = unaff_RBX & 0xffffffff;\n  fatal(printWidth,maskedRBX);\n  print_symname(\"%-20s|\",printWidth,0,maskedRBX);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*printWidth + 8));\n  if (isUndefined == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*printWidth);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*printWidth + 8));\n  if (*(char *)(*printWidth + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*printWidth + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*printWidth + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[3] != 0) {\n      symbolData = *(long *)(printWidth[3] + 0x30);\n      isUndefined = *(char *)(symbolData + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symbolType = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symbolType = \"Block\";\n      }\n      else if (*(ushort *)(symbolData + 0x26) == 0) {\n        symbolType = \"None\";\n      }\n      else {\n        symClass = *(ushort *)(symbolData + 0x26) >> 4 & 3;\n        if (symClass == 2) {\n          symbolType = \"Function\";\n        }\n        else if (symClass == 3) {\n          symbolType = \"Array\";\n        }\n        else {\n          if (symClass != 1) {\n            free(bufp_6);\n            symClass = *(ushort *)(symbolData + 0x26);\n            symbolClass = *(byte *)(symbolData + 0x28);\n            symbolType = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfStatus = asprintf(&bufp_6,symbolType,(ulong)symbolClass,(ulong)symClass);\n            symbolType = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symbolType = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symbolClass = *(byte *)(printWidth[2] + 0x48) & 0xf;\n    switch(symbolClass) {\n    case 0:\n      symbolType = \"NOTYPE\";\n      break;\n    case 1:\n      symbolType = \"OBJECT\";\n      break;\n    case 2:\n      symbolType = \"FUNC\";\n      break;\n    case 3:\n      symbolType = \"SECTION\";\n      break;\n    case 4:\n      symbolType = \"FILE\";\n      break;\n    case 5:\n      symbolType = \"COMMON\";\n      break;\n    case 6:\n      symbolType = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symbolType = \"<processor specific>: %d\";\n      if ((2 < symbolClass - 0xd) && (symbolType = \"<OS specific>: %d\", 2 < symbolClass - 10)) {\n        symbolType = \"<unknown>: %d\";\n      }\n      symbolType = (char *)dcgettext(0,symbolType,5);\n      asprintfStatus = asprintf(&bufp_7,symbolType,(ulong)symbolClass);\n      symbolType = bufp_7;\njoined_r0x00103964:\n      if (asprintfStatus < 0) {\n        piVar5 = __errno_location();\n        uVar6 = xstrerror(*piVar5);\n        fatal(&DAT_0010712d,uVar6);\nLAB_00103983:\n        symbolType = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symbolType);\n  }\n  if (printWidth[2] == 0) {\n    if (printWidth[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(printWidth[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  symbolData = printWidth[2];\n  if ((symbolData != 0) || (symbolData = printWidth[3], symbolData != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(symbolData + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010370a",
            "calling": [
                "print_value.constprop.0"
            ],
            "imported": false,
            "current_name": "print_symbol_info_0010370a"
        },
        "FUN_00104370": {
            "renaming": {
                "FUN_00104370": "select_print_format_00104370",
                "param_1": "inputFormat",
                "param_2": "paramValue",
                "uVar1": "errorMsg",
                "ppuVar2": "result",
                "print_format": "printFormat",
                "format": "currentFormat"
            },
            "code": "\nundefined ** selectPrintFormat_00104370(undefined *inputFormat,undefined8 paramValue)\n\n{\n  undefined8 errorMsg;\n  undefined **result;\n  \n  switch(*inputFormat) {\n  case 0x42:\n  case 0x62:\n    printFormat = 0;\n    currentFormat = (undefined *)&currentFormats;\n    return &currentFormats;\n  default:\n    errorMsg = dcgettext(0,\"%s: invalid output currentFormat\",5);\n    fatal(errorMsg,inputFormat);\n    errorMsg = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n    non_fatal(errorMsg);\n    return (undefined **)0x0;\n  case 0x4a:\n  case 0x6a:\n    result = (undefined **)set_printFormat_00104397(inputFormat,paramValue,3);\n    return result;\n  case 0x50:\n  case 0x70:\n    result = (undefined **)set_printFormat_00104397(inputFormat,paramValue,2);\n    return result;\n  case 0x53:\n  case 0x73:\n    result = (undefined **)set_printFormat_00104397(inputFormat,paramValue,1);\n    return result;\n  }\n}\n\n",
            "called": [
                "FUN_00104397",
                "fatal",
                "set_output_format.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104370",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "select_print_format_00104370"
        },
        "FUN_00102070": {
            "renaming": {},
            "code": "\n\n\nvoid abort(void)\n\n{\n                    \n  abort();\n}\n\n",
            "called": [
                "abort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102070",
            "calling": [
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102070"
        },
        "FUN_0010c058": {
            "renaming": {},
            "code": "\n\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* qsort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c058",
            "calling": [
                "qsort"
            ],
            "imported": false,
            "current_name": "FUN_0010c058"
        },
        "FUN_0010c178": {
            "renaming": {},
            "code": "\n\n\n\nint fflush(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fflush@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c178",
            "calling": [
                "fflush"
            ],
            "imported": false,
            "current_name": "FUN_0010c178"
        },
        "FUN_0010c210": {
            "renaming": {},
            "code": "\n\n\n\nvoid exit(int __status)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* exit@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c210",
            "calling": [
                "exit"
            ],
            "imported": false,
            "current_name": "FUN_0010c210"
        },
        "FUN_00102110": {
            "renaming": {},
            "code": "\nvoid textdomain(void)\n\n{\n  textdomain();\n  return;\n}\n\n",
            "called": [
                "textdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102110",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102110"
        },
        "FUN_00102230": {
            "renaming": {},
            "code": "\nvoid bfd_init(void)\n\n{\n  bfd_init();\n  return;\n}\n\n",
            "called": [
                "bfd_init"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102230",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102230"
        },
        "FUN_00105500": {
            "renaming": {
                "FUN_00105500": "start_main_00105500",
                "param_1": "arg1",
                "param_2": "arg2",
                "auStack_8": "stackBuffer"
            },
            "code": "\nvoid processEntry startMain_00105500(undefined8 arg1,undefined8 arg2)\n\n{\n  undefined stackBuffer [8];\n  \n  __libc_start_main(main,arg2,&stack0x00000008,0,0,arg1,stackBuffer);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "called": [
                "__libc_start_main",
                "main"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105500",
            "calling": [],
            "imported": false,
            "current_name": "start_main_00105500"
        },
        "FUN_00102475": {
            "renaming": {
                "FUN_00102475": "set_print_format_00102475",
                "param_1": "printFormatParam1",
                "param_2": "printFormatParam2"
            },
            "code": "\nvoid setPrintFormat_00102475(undefined8 printFormatParam1,undefined8 printFormatParam2)\n\n{\n  set_print_format_00104397(printFormatParam1,printFormatParam2,3);\n  return;\n}\n\n",
            "called": [
                "FUN_00104397"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102475",
            "calling": [
                "set_output_format"
            ],
            "imported": false,
            "current_name": "set_print_format_00102475"
        },
        "FUN_00103b5d": {
            "renaming": {
                "FUN_00103b5d": "print_matching_formats_00103b5d",
                "param_1": "format_strings",
                "uVar1": "program_name",
                "__format": "format_string",
                "plVar2": "current_format"
            },
            "code": "\n\n\nvoid printMatchingFormats_00103b5d(long *format_strings)\n\n{\n  undefined8 program_name;\n  char *format_string;\n  long *current_format;\n  \n  fflush(_stdout);\n  program_name = program_name;\n  format_string = (char *)dcgettext(0,\"%s: Matching formats:\",5);\n  fprintf(_stderr,format_string,program_name);\n  for (current_format = format_strings; *current_format != 0; current_format = current_format + 1) {\n    fprintf(_stderr,\" %s\");\n  }\n  free(format_strings);\n  fputc(10,_stderr);\n  return;\n}\n\n",
            "called": [
                "fputc",
                "free",
                "fflush",
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b5d",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_matching_formats_00103b5d"
        },
        "FUN_0010c050": {
            "renaming": {},
            "code": "\n\n\n\nint ferror(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ferror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c050",
            "calling": [
                "ferror"
            ],
            "imported": false,
            "current_name": "FUN_0010c050"
        },
        "FUN_001036a7": {
            "renaming": {
                "FUN_001036a7": "print_file_info_001036a7",
                "param_1": "filename",
                "param_2": "symbol"
            },
            "code": "\nvoid printFileInfo_001036a7(undefined8 *filename,undefined8 *symbol,undefined8 param_3,undefined8 param_4)\n\n{\n  if (filename_per_symbol != 0) {\n    if (filename != (undefined8 *)0x0) {\n      printf(\"%s:\",*filename);\n    }\n    printf(\"%s:\",*symbol,param_4);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036a7",
            "calling": [],
            "imported": false,
            "current_name": "print_file_info_001036a7"
        },
        "FUN_00102350": {
            "renaming": {},
            "code": "\nvoid xexit(void)\n\n{\n  xexit();\n  return;\n}\n\n",
            "called": [
                "xexit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102350",
            "calling": [
                "fatal",
                "bfd_fatal",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102350"
        },
        "FUN_00102f19": {
            "renaming": {
                "FUN_00102f19": "print_symbol_info_00102f19",
                "param_1": "filename",
                "pcVar1": "message",
                "undefined_only": "showUndefinedOnly",
                "print_width": "customPrintWidth"
            },
            "code": "\nvoid printSymbolInfo_00102f19(undefined8 filename)\n\n{\n  char *message;\n  \n  message = \"\\n\\nUndefined symbols from %s:\\n\\n\";\n  if (showUndefinedOnly == 0) {\n    message = \"\\n\\nSymbols from %s:\\n\\n\";\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message,filename);\n  message = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (customPrintWidth != 0x20) {\n    message = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  message = (char *)dcgettext(0,message,5);\n  printf(message);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f19",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00102f19"
        },
        "FUN_00102fc3": {
            "renaming": {
                "FUN_00102fc3": "check_compiled_versions_00102fc3",
                "param_1": "sort_bfd",
                "param_2": "sort_dynamic",
                "cVar1": "last_char",
                "__s": "string_1",
                "__s_00": "string_2",
                "uVar10": "offset_1",
                "uVar2": "offset_2",
                "uVar12": "total_offset_1",
                "uVar11": "total_offset_2",
                "uVar13": "sort_bfd_copy",
                "unaff_R13": "lVar5_copy",
                "bVar14": "is_less",
                "lVar4": "lVar4_result",
                "lVar5": "lVar5_result",
                "sVar6": "string_1_len",
                "sVar7": "string_2_len",
                "pcVar8": "pcVar8_1",
                "pcVar9": "pcVar9_1",
                "uVar3": "flag"
            },
            "code": "\nulong check_compiled_versions_00102fc3(undefined8 sort_bfd,undefined8 sort_dynamic)\n\n{\n  char last_char;\n  ulong offset_2;\n  char *string_1;\n  char *string_2;\n  uint flag;\n  long lVar4_result;\n  long lVar5_result;\n  size_t string_1_len;\n  size_t string_2_len;\n  char *pcVar8_1;\n  char *pcVar9_1;\n  ulong offset_1;\n  ulong total_offset_2;\n  ulong total_offset_1;\n  undefined8 sort_bfd_copy;\n  long lVar5_copy;\n  bool is_less;\n  \n  sort_bfd_copy = *sort_bfd;\n  bfd_fatal();\n  lVar4_result = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_bfd_copy,sort_x);\n  lVar5_result = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,sort_dynamic,sort_y);\n  if ((lVar4_result == 0) || (lVar5_copy = lVar5_result, lVar5_result == 0)) {\n    lVar5_result = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(lVar4_result + 0x20) == 0x10c2a8) || (*(long *)(lVar5_result + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  offset_1 = *(ulong *)(*(long *)(lVar4_result + 0x20) + 0x30);\n  offset_2 = *(ulong *)(*(long *)(lVar5_result + 0x20) + 0x30);\n  total_offset_1 = *(long *)(lVar4_result + 0x10) + offset_1;\n  total_offset_2 = *(long *)(lVar5_copy + 0x10) + offset_2;\n  is_less = total_offset_1 < total_offset_2;\n  if ((total_offset_1 != total_offset_2) || (is_less = offset_1 < offset_2, offset_1 != offset_2)) {\n    return (ulong)(-(uint)is_less | 1);\n  }\n  string_1 = *(char **)(lVar4_result + 8);\n  string_2 = *(char **)(lVar5_copy + 8);\n  string_1_len = strlen(string_1);\n  string_2_len = strlen(string_2);\n  pcVar8_1 = strstr(string_1,\"gnu_compiled\");\n  if (pcVar8_1 == (char *)0x0) {\n    pcVar9_1 = strstr(string_1,\"gcc2_compiled\");\n    pcVar8_1 = strstr(string_2,\"gnu_compiled\");\n    if ((pcVar8_1 == (char *)0x0) && (pcVar8_1 = strstr(string_2,\"gcc2_compiled\"), pcVar8_1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pcVar9_1 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pcVar8_1 = strstr(string_2,\"gnu_compiled\");\n    if (pcVar8_1 == (char *)0x0) {\n      pcVar9_1 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pcVar9_1 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(lVar5_copy + 0x18) & 0x4000;\n  if ((*(byte *)(lVar4_result + 0x19) & 0x40) == 0) {\n    if ((string_1_len < 3) || (string_1[string_1_len - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((string_2_len < 3) || (string_2[string_2_len - 2] != '.')) goto LAB_00103202;\n      is_less = false;\n      goto LAB_001031e7;\n    }\n    last_char = string_1[string_1_len - 1];\n    is_less = last_char == 'o' || last_char == 'a';\n    if (flag == 0) {\n      if ((string_2_len < 3) || (string_2[string_2_len - 2] != '.')) {\n        if (last_char == 'o' || last_char == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (string_2_len < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[string_2_len - 2] != '.') {\n      return 0xffffffff;\n    }\n    is_less = true;\nLAB_001031e7:\n    if ((string_2[string_2_len - 1] != 'o') && (string_2[string_2_len - 1] != 'a')) {\n      if (is_less) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!is_less) {\n    return 1;\n  }\nLAB_00103202:\n  offset_1 = non_numeric_forward(sort_bfd_copy,sort_dynamic);\n  return offset_1;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fc3",
            "calling": [
                "numeric_forward"
            ],
            "imported": false,
            "current_name": "check_compiled_versions_00102fc3"
        },
        "FUN_001020a0": {
            "renaming": {},
            "code": "\n\n\nint ferror(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = ferror(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "ferror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020a0"
        },
        "FUN_001021c0": {
            "renaming": {},
            "code": "\nvoid bfd_target_list(void)\n\n{\n  bfd_target_list();\n  return;\n}\n\n",
            "called": [
                "bfd_target_list"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021c0",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001021c0"
        },
        "FUN_001022e0": {
            "renaming": {},
            "code": "\n\n\nint asprintf(char **__ptr,char *__fmt,...)\n\n{\n  int iVar1;\n  \n  iVar1 = asprintf(__ptr,__fmt);\n  return iVar1;\n}\n\n",
            "called": [
                "asprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022e0",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_001022e0"
        },
        "FUN_00103729": {
            "renaming": {
                "FUN_00103729": "print_symbol_info_00103729",
                "param_1": "symbol_info",
                "param_2": "desc_format",
                "cVar1": "is_undefined",
                "uVar2": "sym_class",
                "iVar3": "asprintf_ret",
                "piVar4": "errno_loc",
                "uVar5": "err_str",
                "lVar6": "info_ptr",
                "bVar7": "type_indicator",
                "pcVar8": "type_description",
                "bufp_6": "buf_ptr_1",
                "bufp_7": "buf_ptr_2"
            },
            "code": "\nvoid print_symbol_info_00103729(long *symbol_info,undefined8 desc_format)\n\n{\n  char is_undefined;\n  ushort sym_class;\n  int asprintf_ret;\n  int *errno_loc;\n  undefined8 err_str;\n  long info_ptr;\n  byte type_indicator;\n  char *type_description;\n  \n  print_symname(\"%-20s|\",symbol_info,0,desc_format);\n  is_undefined = bfd_is_undefined_symclass((int)*(char *)(*symbol_info + 8));\n  if (is_undefined == '\\0') {\n    print_value_constprop_0(*(undefined8 *)*symbol_info);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbol_info + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[3] != 0) {\n      info_ptr = *(long *)(symbol_info[3] + 0x30);\n      is_undefined = *(char *)(info_ptr + 0x28);\n      if (is_undefined == 'g') goto LAB_00103983;\n      if (is_undefined == 'h') {\n        type_description = \"Line\";\n      }\n      else if (is_undefined == 'd') {\n        type_description = \"Block\";\n      }\n      else if (*(ushort *)(info_ptr + 0x26) == 0) {\n        type_description = \"None\";\n      }\n      else {\n        sym_class = *(ushort *)(info_ptr + 0x26) >> 4 & 3;\n        if (sym_class == 2) {\n          type_description = \"Function\";\n        }\n        else if (sym_class == 3) {\n          type_description = \"Array\";\n        }\n        else {\n          if (sym_class != 1) {\n            free(buf_ptr_1);\n            sym_class = *(ushort *)(info_ptr + 0x26);\n            type_indicator = *(byte *)(info_ptr + 0x28);\n            type_description = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintf_ret = asprintf(&buf_ptr_1,type_description,(ulong)type_indicator,(ulong)sym_class);\n            type_description = buf_ptr_1;\n            goto joined_r0x00103964;\n          }\n          type_description = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    type_indicator = *(byte *)(symbol_info[2] + 0x48) & 0xf;\n    switch(type_indicator) {\n    case 0:\n      type_description = \"NOTYPE\";\n      break;\n    case 1:\n      type_description = \"OBJECT\";\n      break;\n    case 2:\n      type_description = \"FUNC\";\n      break;\n    case 3:\n      type_description = \"SECTION\";\n      break;\n    case 4:\n      type_description = \"FILE\";\n      break;\n    case 5:\n      type_description = \"COMMON\";\n      break;\n    case 6:\n      type_description = \"TLS\";\n      break;\n    default:\n      free(buf_ptr_2);\n      type_description = \"<processor specific>: %d\";\n      if ((2 < type_indicator - 0xd) && (type_description = \"<OS specific>: %d\", 2 < type_indicator - 10)) {\n        type_description = \"<unknown>: %d\";\n      }\n      type_description = (char *)dcgettext(0,type_description,5);\n      asprintf_ret = asprintf(&buf_ptr_2,type_description,(ulong)type_indicator);\n      type_description = buf_ptr_2;\njoined_r0x00103964:\n      if (asprintf_ret < 0) {\n        errno_loc = __errno_location();\n        err_str = xstrerror(*errno_loc);\n        fatal(&DAT_0010712d,err_str);\nLAB_00103983:\n        type_description = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",type_description);\n  }\n  if (symbol_info[2] == 0) {\n    if (symbol_info[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbol_info[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    print_value_constprop_0();\n  }\n  info_ptr = symbol_info[2];\n  if ((info_ptr != 0) || (info_ptr = symbol_info[3], info_ptr != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(info_ptr + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "fatal",
                "asprintf",
                "free",
                "xstrerror",
                "printf",
                "print_value.constprop.0",
                "__errno_location",
                "print_symname",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103729",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103729"
        },
        "FUN_00102080": {
            "renaming": {},
            "code": "\n\n\nint * __errno_location(void)\n\n{\n  int *piVar1;\n  \n  piVar1 = __errno_location();\n  return piVar1;\n}\n\n",
            "called": [
                "__errno_location"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102080",
            "calling": [
                "display_file",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102080"
        },
        "FUN_0010c188": {
            "renaming": {},
            "code": "\n\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcoll@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c188",
            "calling": [
                "strcoll"
            ],
            "imported": false,
            "current_name": "FUN_0010c188"
        },
        "FUN_00102000": {
            "renaming": {
                "FUN_00102000": "initialize_monitoring_00102000",
                "ctx": "context",
                "iVar1": "monitoringStatus"
            },
            "code": "\nint initializeMonitoring_00102000(EVP_PKEY_CTX *context)\n\n{\n  int monitoringStatus;\n  \n  monitoringStatus = __gmon_start__();\n  return monitoringStatus;\n}\n\n",
            "called": [
                "__gmon_start__"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102000",
            "calling": [],
            "imported": false,
            "current_name": "initialize_monitoring_00102000"
        },
        "FUN_00103573": {
            "renaming": {
                "FUN_00103573": "print_strings_00103573",
                "param_1": "input_string_1",
                "param_2": "input_string_2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2"
            },
            "code": "\nvoid print_strings_00103573(undefined8 *input_string_1,undefined8 *input_string_2,undefined8 unused_param_1,undefined8 unused_param_2)\n\n{\n  if (input_string_1 != (undefined8 *)0x0) {\n    printf(\"%s:\",*input_string_1);\n  }\n  printf(\"%s:\",*input_string_2,unused_param_2);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103573",
            "calling": [
                "print_symbol_filename_bsd"
            ],
            "imported": false,
            "current_name": "print_strings_00103573"
        },
        "FUN_00102120": {
            "renaming": {},
            "code": "\nvoid bfd_openr(void)\n\n{\n  bfd_openr();\n  return;\n}\n\n",
            "called": [
                "bfd_openr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102120",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102120"
        },
        "FUN_00105110": {
            "renaming": {
                "FUN_00105110": "print_file_info_00105110",
                "param_1": "symbolArray",
                "param_2": "bfdStruct",
                "param_4": "filenameArray",
                "__ptr": "ptr",
                "__s1": "str",
                "puVar4": "pointerVar",
                "cVar5": "charVar",
                "iVar6": "intVar",
                "pvVar7": "ptrVar",
                "lVar8": "longVar",
                "uVar9": "uintVar",
                "lVar10": "longVar2",
                "local_b4": "localVar_b4",
                "local_b0": "localVar_b0",
                "local_a8": "localVar_a8",
                "local_a0": "localVar_a0",
                "local_98": "localVar_98",
                "local_90": "localVar_90",
                "local_88": "localVar_88",
                "pvStack_80": "ptrStack_80",
                "pvStack_78": "ptrStack_78",
                "pvStack_70": "ptrStack_70",
                "local_68": "localVar_68",
                "local_60": "localVar_60"
            },
            "code": "\n\n\nvoid printFileInfo_00105110(undefined8 *symbolArray,long *bfdStruct,undefined8 param_3,undefined8 *filenameArray)\n\n{\n  void *ptr;\n  char *str;\n  long **pplVar1;\n  long *plVar2;\n  long lVar3;\n  undefined8 *pointerVar;\n  char charVar;\n  int intVar;\n  void *ptrVar;\n  long longVar;\n  uint uintVar;\n  long longVar2;\n  uint localVar_b4;\n  undefined localVar_b0 [8];\n  undefined *localVar_a8;\n  undefined8 localVar_a0;\n  long *localVar_98;\n  long *localVar_90;\n  void *localVar_88;\n  void *ptrStack_80;\n  void *ptrStack_78;\n  void *ptrStack_70;\n  undefined localVar_68 [8];\n  char localVar_60;\n  \n  if (*(code **)(format + 0x18) == print_symbol_filename_bsd) {\n    if (filename_per_symbol != 0) {\n      if (filenameArray != (undefined8 *)0x0) {\n        printf(\"%s:\",*filenameArray);\n      }\n      printf(\"%s:\",*symbolArray);\n    }\n  }\n  else {\n    (**(code **)(format + 0x18))(filenameArray,symbolArray);\n  }\n  localVar_a8 = localVar_68;\n  (**(code **)(symbolArray[1] + 0x218))(symbolArray,bfdStruct,localVar_a8);\n  uintVar = *(uint *)(bfdStruct + 3);\n  charVar = localVar_60;\n  if (((((localVar_60 == 'i') && ((uintVar & 0x400000) != 0)) && (ifunc_type_chars != (char *)0x0)) &&\n      ((*ifunc_type_chars != '\\0' && (charVar = *ifunc_type_chars, (uintVar & 2) == 0)))) &&\n     (charVar = localVar_60, ifunc_type_chars[1] != '\\0')) {\n    charVar = ifunc_type_chars[1];\n  }\n  localVar_60 = charVar;\n  localVar_a0 = param_3;\n  if ((uintVar & 0x200100) != 0) goto LAB_00103330;\n  longVar = *bfdStruct;\n  intVar = *(int *)(*(long *)(longVar + 8) + 8);\n  if (((uintVar & 0x200000) == 0) && (intVar == 5)) {\n    localVar_98 = bfdStruct;\n    if (*(long *)(longVar + 0x110) == 0) {\n      localVar_98 = (long *)0x0;\n    }\n  }\n  else {\n    localVar_98 = (long *)0x0;\n    if (((intVar - 2U & 0xfffffffd) == 0) && (localVar_90 = bfdStruct, *(long *)(longVar + 0x110) != 0))\n    goto LAB_001051bf;\n  }\n  localVar_90 = (long *)0x0;\nLAB_001051bf:\n  (**(code **)(format + 0x20))(&localVar_a8,symbolArray);\n  do {\n    if (line_numbers == 0) {\nLAB_001051e6:\n      putc(10,_stdout);\n      return;\n    }\n    if (lineno_cache_bfd == symbolArray) {\n      pointerVar = lineno_cache_bfd;\n      if (syms_5 == (void *)0x0) goto LAB_00105359;\nLAB_00105288:\n      lineno_cache_bfd = pointerVar;\n      ptrVar = relocs_3;\n      if (bfdStruct[4] == 0x10c2a8) {\n        if (lineno_cache_rel_bfd == symbolArray) {\n          if (relocs_3 == (void *)0x0) goto LAB_001033d1;\n        }\n        else {\n          uintVar = 0;\n          if (relocs_3 != (void *)0x0) {\n            for (; uintVar < seccount_2; uintVar = uintVar + 1) {\n              ptr = *(void **)((long)ptrVar + (ulong)uintVar * 8);\n              if (ptr != (void *)0x0) {\n                free(ptr);\n              }\n            }\n            free(secs_1);\n            free(ptrVar);\n            free(relcount_0);\n            secs_1 = (void *)0x0;\n            relocs_3 = (void *)0x0;\n            relcount_0 = (void *)0x0;\n          }\nLAB_001033d1:\n          seccount_2 = *(uint *)(symbolArray + 0x14);\n          secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n          relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n          relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n          ptrStack_70 = syms_5;\n          localVar_88 = secs_1;\n          ptrStack_80 = relocs_3;\n          ptrStack_78 = relcount_0;\n          bfd_map_over_sections(symbolArray,get_relocs,&localVar_88);\n          lineno_cache_rel_bfd = symbolArray;\n        }\n        str = (char *)bfdStruct[1];\n        for (uintVar = 0; uintVar < seccount_2; uintVar = uintVar + 1) {\n          longVar = (ulong)uintVar * 8;\n          ptrVar = relcount_0;\n          for (longVar2 = 0;\n              *(long *)((long)ptrVar + longVar) != longVar2 && longVar2 <= *(long *)((long)ptrVar + longVar)\n              ; longVar2 = longVar2 + 1) {\n            pplVar1 = *(long ***)(*(long *)((long)relocs_3 + longVar) + longVar2 * 8);\n            plVar2 = *pplVar1;\n            if ((((plVar2 != (long *)0x0) &&\n                 (lVar3 = *plVar2, *(long *)(lVar3 + 0x20) == bfdStruct[4])) &&\n                (*(long *)(lVar3 + 0x10) == bfdStruct[2])) &&\n               (((intVar = strcmp(str,*(char **)(lVar3 + 8)), intVar == 0 &&\n                 (charVar = (**(code **)(symbolArray[1] + 0x240))\n                                    (symbolArray,syms_5,*(undefined8 *)((long)secs_1 + longVar),pplVar1[1]\n                                     ,&localVar_88,localVar_b0,&localVar_b4,0), ptrVar = relcount_0,\n                 charVar != '\\0')) && (localVar_88 != (void *)0x0)))) {\n              printf(\"\\t%s:%u\",localVar_88,(ulong)localVar_b4);\n              uintVar = seccount_2;\n              break;\n            }\n          }\n        }\n      }\n      else if (*(undefined8 **)(bfdStruct[4] + 0xe0) == symbolArray) {\n        charVar = (**(code **)(symbolArray[1] + 0x250))(symbolArray,syms_5,bfdStruct,&localVar_88,&localVar_b4);\n        if (((charVar != '\\0') ||\n            (charVar = (**(code **)(symbolArray[1] + 0x240))\n                               (symbolArray,syms_5,bfdStruct[4],bfdStruct[2],&localVar_88,localVar_b0,&localVar_b4,0)\n            , charVar != '\\0')) && ((localVar_88 != (void *)0x0 && (localVar_b4 != 0)))) {\n          printf(\"\\t%s:%u\");\n        }\n      }\n      goto LAB_001051e6;\n    }\n    if (syms_5 != (void *)0x0) {\n      free(syms_5);\n      syms_5 = (void *)0x0;\n    }\nLAB_00105359:\n    longVar = (**(code **)(symbolArray[1] + 0x1f8))(symbolArray);\n    if (longVar < 0) {\n      process_relocations_00103463(longVar);\n      return;\n    }\n    syms_5 = (void *)xmalloc();\n    longVar = (**(code **)(symbolArray[1] + 0x200))(symbolArray,syms_5);\n    pointerVar = symbolArray;\n    if (-1 < longVar) goto LAB_00105288;\n    bfd_fatal(*symbolArray);\nLAB_00103330:\n    localVar_98 = (long *)0x0;\n    localVar_90 = (long *)0x0;\n    (**(code **)(format + 0x20))(&localVar_a8,symbolArray);\n  } while( true );\n}\n\n",
            "called": [
                "FUN_00103463",
                "print_symbol_info_bsd",
                "free",
                "xmalloc",
                "printf",
                "bfd_fatal",
                "print_symbol_filename_bsd",
                "print_symbol.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105110",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_file_info_00105110"
        },
        "FUN_0010c060": {
            "renaming": {},
            "code": "\n\n\n\nint isatty(int __fd)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* isatty@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c060",
            "calling": [
                "isatty"
            ],
            "imported": false,
            "current_name": "FUN_0010c060"
        },
        "FUN_00102240": {
            "renaming": {},
            "code": "\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcmp(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcmp"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102240",
            "calling": [
                "FUN_00103463",
                "set_print_width",
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102240"
        },
        "FUN_00102360": {
            "renaming": {},
            "code": "\nvoid bfd_close(void)\n\n{\n  bfd_close();\n  return;\n}\n\n",
            "called": [
                "bfd_close"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102360",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102360"
        },
        "FUN_0010c1a8": {
            "renaming": {},
            "code": "\n\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* setlocale@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1a8",
            "calling": [
                "setlocale"
            ],
            "imported": false,
            "current_name": "FUN_0010c1a8"
        },
        "FUN_00102fd2": {
            "renaming": {
                "FUN_00102fd2": "evaluate_compatibility_00102fd2",
                "param_1": "binaryFile1",
                "param_2": "binaryFile2",
                "__s": "string1",
                "__s_00": "string2",
                "uVar3": "flag",
                "lVar4": "file1Info",
                "lVar5": "file2Info",
                "sVar6": "string1Length",
                "sVar7": "string2Length",
                "pcVar8": "substring1",
                "pcVar9": "substring2",
                "uVar2": "file2Code",
                "uVar10": "result",
                "uVar11": "file2EntryPointOffset",
                "uVar12": "file1EntryPointOffset",
                "unaff_R13": "file2Info"
            },
            "code": "\nulong evaluateCompatibility_00102fd2(undefined8 binaryFile1,undefined8 binaryFile2)\n\n{\n  char cVar1;\n  ulong file2Code;\n  char *string1;\n  char *string2;\n  uint flag;\n  long file1Info;\n  long file2Info;\n  size_t string1Length;\n  size_t string2Length;\n  char *substring1;\n  char *substring2;\n  ulong result;\n  ulong file2EntryPointOffset;\n  ulong file1EntryPointOffset;\n  long file2Info;\n  bool bVar13;\n  \n  file1Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,binaryFile1,sort_x);\n  file2Info = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,binaryFile2,sort_y);\n  if ((file1Info == 0) || (file2Info = file2Info, file2Info == 0)) {\n    file2Info = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(file1Info + 0x20) == 0x10c2a8) || (*(long *)(file2Info + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  result = *(ulong *)(*(long *)(file1Info + 0x20) + 0x30);\n  file2Code = *(ulong *)(*(long *)(file2Info + 0x20) + 0x30);\n  file1EntryPointOffset = *(long *)(file1Info + 0x10) + result;\n  file2EntryPointOffset = *(long *)(file2Info + 0x10) + file2Code;\n  bVar13 = file1EntryPointOffset < file2EntryPointOffset;\n  if ((file1EntryPointOffset != file2EntryPointOffset) || (bVar13 = result < file2Code, result != file2Code)) {\n    return (ulong)(-(uint)bVar13 | 1);\n  }\n  string1 = *(char **)(file1Info + 8);\n  string2 = *(char **)(file2Info + 8);\n  string1Length = strlen(string1);\n  string2Length = strlen(string2);\n  substring1 = strstr(string1,\"gnu_compiled\");\n  if (substring1 == (char *)0x0) {\n    substring2 = strstr(string1,\"gcc2_compiled\");\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if ((substring1 == (char *)0x0) && (substring1 = strstr(string2,\"gcc2_compiled\"), substring1 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (substring2 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    substring1 = strstr(string2,\"gnu_compiled\");\n    if (substring1 == (char *)0x0) {\n      substring2 = strstr(string2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (substring2 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  flag = *(uint *)(file2Info + 0x18) & 0x4000;\n  if ((*(byte *)(file1Info + 0x19) & 0x40) == 0) {\n    if ((string1Length < 3) || (string1[string1Length - 2] != '.')) {\n      if (flag != 0) {\n        return 1;\n      }\n      if ((string2Length < 3) || (string2[string2Length - 2] != '.')) goto LAB_00103202;\n      bVar13 = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string1[string1Length - 1];\n    bVar13 = cVar1 == 'o' || cVar1 == 'a';\n    if (flag == 0) {\n      if ((string2Length < 3) || (string2[string2Length - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (flag != 0) goto LAB_00103202;\n    if (string2Length < 3) {\n      return 0xffffffff;\n    }\n    if (string2[string2Length - 2] != '.') {\n      return 0xffffffff;\n    }\n    bVar13 = true;\nLAB_001031e7:\n    if ((string2[string2Length - 1] != 'o') && (string2[string2Length - 1] != 'a')) {\n      if (bVar13) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!bVar13) {\n    return 1;\n  }\nLAB_00103202:\n  result = non_numeric_forward(binaryFile1,binaryFile2);\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "abort",
                "bfd_fatal",
                "strlen",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102fd2",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "evaluate_compatibility_00102fd2"
        },
        "FUN_00102400": {
            "renaming": {},
            "code": "\nvoid bfd_map_over_sections(void)\n\n{\n  bfd_map_over_sections();\n  return;\n}\n\n",
            "called": [
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102400",
            "calling": [
                "print_symbol.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102400"
        },
        "FUN_00102f9f": {
            "renaming": {
                "FUN_00102f9f": "handle_fatal_error_00102f9f",
                "auVar1": "return_value",
                "unaff_retaddr": "return_address"
            },
            "code": "\nundefined  [16] handle_fatal_error_00102f9f(void)\n\n{\n  undefined return_value [16];\n  undefined8 return_address;\n  \n  bfd_fatal(*sort_bfd);\n  return_value._8_8_ = return_address;\n  return_value._0_8_ = 0xffffffff;\n  return return_value;\n}\n\n",
            "called": [
                "bfd_fatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f9f",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "handle_fatal_error_00102f9f"
        },
        "FUN_00103a66": {
            "renaming": {
                "FUN_00103a66": "check_and_print_constant_value_00103a66",
                "unaff_RBX": "ptrToData",
                "print_constant_value_0010651a": "printConstantValue"
            },
            "code": "\nvoid checkAndPrintConstantValue_00103a66(void)\n\n{\n  long ptrToData;\n  \n  if (*(long *)(ptrToData + 8) != 0) {\n    printConstantValue();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "FUN_0010651a"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a66",
            "calling": [
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "check_and_print_constant_value_00103a66"
        },
        "FUN_001022f0": {
            "renaming": {},
            "code": "\n\n\nchar * setlocale(int __category,char *__locale)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = setlocale(__category,__locale);\n  return pcVar1;\n}\n\n",
            "called": [
                "setlocale"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022f0"
        },
        "FUN_001020b0": {
            "renaming": {},
            "code": "\n\n\nvoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\n\n{\n  qsort(__base,__nmemb,__size,__compar);\n  return;\n}\n\n",
            "called": [
                "qsort"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020b0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "FUN_001020b0"
        },
        "FUN_001021d0": {
            "renaming": {},
            "code": "\nvoid bfd_get_error(void)\n\n{\n  bfd_get_error();\n  return;\n}\n\n",
            "called": [
                "bfd_get_error"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021d0",
            "calling": [
                "display_rel_file",
                "main",
                "bfd_nonfatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001021d0"
        },
        "FUN_0010c118": {
            "renaming": {},
            "code": "\n\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fputc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c118",
            "calling": [
                "fputc"
            ],
            "imported": false,
            "current_name": "FUN_0010c118"
        },
        "FUN_00102090": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_plugin(void)\n\n{\n  bfd_plugin_set_plugin();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_plugin"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102090",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102090"
        },
        "FUN_001035a2": {
            "renaming": {
                "FUN_001035a2": "print_symbol_info_001035a2",
                "unaff_RBX": "symbol_info",
                "lVar1": "symbol_address"
            },
            "code": "\nvoid print_symbol_info_001035a2(void)\n\n{\n  long *symbol_info;\n  long symbol_address;\n  \n  if (symbol_info[2] == 0) {\n    symbol_address = symbol_info[1];\n  }\n  else {\n    symbol_address = *(long *)(symbol_info[2] + 0x38);\n  }\n  if (symbol_address != 0) {\n    putchar(0x20);\n    if (symbol_info[2] == 0) {\n      symbol_address = symbol_info[1];\n    }\n    else {\n      symbol_address = *(long *)(symbol_info[2] + 0x38);\n    }\n    print_value_constprop_0(symbol_address);\n  }\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbol_info + 8));\n  if (*(char *)(*symbol_info + 8) != '-') {\n    print_symname(&DAT_0010712c);\n    return;\n  }\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbol_info + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbol_info + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbol_info + 0x20));\n  print_symname(&DAT_0010712c);\n  return;\n}\n\n",
            "called": [
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001035a2",
            "calling": [
                "print_symbol_info_bsd"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001035a2"
        },
        "FUN_0010c198": {
            "renaming": {},
            "code": "\n\n\n\nint fseek(FILE *__stream,long __off,int __whence)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fseek@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c198",
            "calling": [
                "fseek",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_0010c198"
        },
        "FUN_00103463": {
            "renaming": {
                "FUN_00103463": "process_relocations_00103463",
                "param_8": "count",
                "param_10": "limit",
                "in_stack_00000050": "filename",
                "unaff_R12": "stringToCompare",
                "unaff_R13": "stream",
                "unaff_R15": "baseAddress",
                "seccount_2": "sectionCount",
                "relcount_0": "relocationCount",
                "relocs_3": "relocationTable",
                "lVar2": "currentRelocationAddress",
                "cVar3": "comparisonResult",
                "iVar4": "stringComparison",
                "lVar5": "tempRelocationCount",
                "lVar6": "tempVariable1"
            },
            "code": "\n\n\nvoid processRelocations_00103463(void)\n\n{\n  long *plVar1;\n  long currentRelocationAddress;\n  char comparisonResult;\n  int stringComparison;\n  long tempRelocationCount;\n  char *stringToCompare;\n  undefined8 *stream;\n  long tempVariable1;\n  long baseAddress;\n  undefined8 count;\n  ulong limit;\n  long filename;\n  \n  bfd_fatal(*stream);\n  do {\n    count._4_4_ = count._4_4_ + 1;\n    if (sectionCount <= count._4_4_) {\n      putc(10,_stdout);\n      return;\n    }\n    tempRelocationCount = relocationCount;\n    for (tempVariable1 = 0; plVar1 = (long *)(tempRelocationCount + (ulong)count._4_4_ * 8),\n        *plVar1 != tempVariable1 && tempVariable1 <= *plVar1; tempVariable1 = tempVariable1 + 1) {\n      plVar1 = **(long ***)(*(long *)(relocationTable + (ulong)count._4_4_ * 8) + tempVariable1 * 8);\n      if ((((plVar1 != (long *)0x0) &&\n           (currentRelocationAddress = *plVar1, *(long *)(currentRelocationAddress + 0x20) == *(long *)(baseAddress + 0x20))) &&\n          (*(long *)(currentRelocationAddress + 0x10) == *(long *)(baseAddress + 0x10))) &&\n         (((stringComparison = strcmp(stringToCompare,*(char **)(currentRelocationAddress + 8)), stringComparison == 0 &&\n           (comparisonResult = (**(code **)(stream[1] + 0x240))(), tempRelocationCount = relocationCount, comparisonResult != '\\0')) &&\n          (filename != 0)))) {\n        printf(\"\\t%s:%u\",filename,limit >> 0x20);\n        count._4_4_ = sectionCount;\n        break;\n      }\n    }\n  } while( true );\n}\n\n",
            "called": [
                "printf",
                "bfd_fatal",
                "strcmp",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103463",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_relocations_00103463"
        },
        "FUN_0010c1b8": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memmove@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1b8",
            "calling": [
                "memmove"
            ],
            "imported": false,
            "current_name": "FUN_0010c1b8"
        },
        "FUN_00104397": {
            "renaming": {
                "FUN_00104397": "set_print_format_00104397",
                "param_1": "output_device",
                "param_2": "input_device",
                "param_3": "format_index",
                "print_format": "param_3",
                "format": "selected_format"
            },
            "code": "\nvoid set_print_format_00104397(undefined8 output_device,undefined8 input_device,int format_index)\n\n{\n  param_3 = format_index;\n  selected_format = (undefined *)(&selected_formats + (long)format_index * 5);\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104397",
            "calling": [
                "set_output_format",
                "set_output_format.cold"
            ],
            "imported": false,
            "current_name": "set_print_format_00104397"
        },
        "FUN_00102370": {
            "renaming": {},
            "code": "\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n  int iVar1;\n  \n  iVar1 = vfprintf(__s,__format,__arg);\n  return iVar1;\n}\n\n",
            "called": [
                "vfprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102370",
            "calling": [
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102370"
        },
        "FUN_00104670": {
            "renaming": {
                "FUN_00104670": "determine_print_format_00104670",
                "param_1": "binaryFile",
                "iVar1": "compareResult",
                "pcVar2": "ptr64",
                "puVar3": "printRadixPointer",
                "pcVar4": "fileName",
                "print_width": "archSize",
                "print_format_string": "formatString"
            },
            "code": "\nvoid determinePrintFormat_00104670(long binaryFile)\n\n{\n  int compareResult;\n  char *ptr64;\n  undefined *printRadixPointer;\n  char *fileName;\n  \n  archSize = bfd_get_arch_size();\n  if (archSize == -1) {\n    fileName = **(char ***)(binaryFile + 8);\n    ptr64 = strstr(fileName,\"64\");\n    compareResult = 0x40;\n    if (ptr64 == (char *)0x0) {\n      compareResult = strcmp(fileName,\"mmo\");\n      compareResult = (-(uint)(compareResult == 0) & 0x20) + 0x20;\n    }\n    archSize = compareResult;\n    free(formatString);\n  }\n  else {\n    free(formatString);\n  }\n  if (print_format - 2U < 2) {\n    fileName = \"\";\n  }\n  else if (archSize == 0x20) {\n    fileName = \"08\";\n  }\n  else {\n    fileName = \"016\";\n  }\n  printRadixPointer = &DAT_001071d0;\n  if (print_radix != 0x10) {\n    if (print_radix < 0x11) {\n      if (print_radix == 8) {\n        printRadixPointer = &DAT_001071ca;\n      }\n      else {\n        if (print_radix != 10) {\n          formatString = (void *)concat(&DAT_001071d7,fileName,0,0);\n          return;\n        }\n        printRadixPointer = &DAT_001071cd;\n      }\n    }\n    else {\n      printRadixPointer = (undefined *)0x0;\n    }\n  }\n  formatString = (void *)concat(&DAT_001071d7,fileName,printRadixPointer,0);\n  return;\n}\n\n",
            "called": [
                "set_print_width.cold",
                "free",
                "bfd_get_arch_size",
                "strcmp",
                "concat",
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "determine_print_format_00104670"
        },
        "FUN_00102130": {
            "renaming": {},
            "code": "\n\n\nint fclose(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fclose(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fclose"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102130",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102130"
        },
        "FUN_0010c070": {
            "renaming": {},
            "code": "\n\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fread@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c070",
            "calling": [
                "fread"
            ],
            "imported": false,
            "current_name": "FUN_0010c070"
        },
        "FUN_00102250": {
            "renaming": {},
            "code": "\n\n\nint putc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = putc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102250",
            "calling": [
                "FUN_00103463",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102250"
        },
        "FUN_0010c0b0": {
            "renaming": {},
            "code": "\n\n\nvoid dcgettext(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* dcgettext@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b0",
            "calling": [
                "dcgettext"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b0"
        },
        "FUN_0010c1d0": {
            "renaming": {},
            "code": "\n\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fopen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1d0",
            "calling": [
                "fopen"
            ],
            "imported": false,
            "current_name": "FUN_0010c1d0"
        },
        "FUN_00102410": {
            "renaming": {},
            "code": "\n\n\nchar * strerror(int __errnum)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strerror(__errnum);\n  return pcVar1;\n}\n\n",
            "called": [
                "strerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102410",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102410"
        },
        "FUN_00103a78": {
            "renaming": {
                "FUN_00103a78": "print_error_message_00103a78",
                "uVar1": "errorMessage",
                "unaff_RBX": "errorCode",
                "unaff_retaddr": "returnAddress"
            },
            "code": "\n\n\nvoid printErrorMessage_00103a78(void)\n\n{\n  undefined8 errorMessage;\n  long errorCode;\n  undefined8 returnAddress;\n  \n  errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  fflush(_stdout);\n  if (errorCode != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,returnAddress);\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103a78",
            "calling": [
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "print_error_message_00103a78"
        },
        "FUN_001048e0": {
            "renaming": {
                "FUN_001048e0": "process_symbols_001048e0",
                "param_1": "fileAttributes",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "symbolList",
                "param_6": "symbolList2",
                "bVar1": "byteVar1",
                "pcVar2": "functionPointer",
                "cVar3": "charVar3",
                "iVar4": "intVar4",
                "uVar5": "uintVar5",
                "uVar6": "uintVar6",
                "lVar7": "longVar7",
                "ppuVar8": "symbolPtr1",
                "ppuVar9": "symbolPtr2",
                "lVar10": "longVar10",
                "puVar11": "pointerVar11",
                "bVar19": "boolVar19",
                "bVar20": "byteVar20",
                "ppuStack_78": "stackPtr",
                "local_4c": "localVar4c",
                "local_48": "localVar48",
                "local_40": "localArray",
                "dynamic": "dynamicFlag",
                "report_plugin_err": "reportPluginError",
                "quiet": "quietFlag",
                "undefined_only": "undefinedOnlyFlag",
                "display_rel_file_cold": "displayRelFileCold",
                "print_debug_syms": "printDebugSymbols",
                "sort_by_size": "sortBySizeFlag",
                "defined_only": "definedOnlyFlag",
                "external_only": "externalOnlyFlag",
                "non_weak": "nonWeakFlag",
                "no_sort": "noSortFlag",
                "reverse_sort": "reverseSortFlag",
                "sort_numerically": "sortNumericallyFlag",
                "sort_dynamic": "sortDynamicFlag",
                "sort_bfd": "sortBfd",
                "sort_x": "sortX",
                "sort_y": "sortY"
            },
            "code": "\nvoid processSymbols_001048e0(ulong **fileAttributes,undefined8 param2,undefined8 param3,undefined8 param4,\n                 ulong **symbolList,ulong **symbolList2)\n\n{\n  byte byteVar1;\n  code *functionPointer;\n  char charVar3;\n  int intVar4;\n  uint uintVar5;\n  undefined8 uintVar6;\n  long longVar7;\n  ulong **symbolPtr1;\n  ulong **symbolPtr2;\n  long longVar10;\n  ulong *pointerVar11;\n  ulong **unaff_RBX;\n  ulong **ppuVar12;\n  ulong **ppuVar13;\n  ulong **unaff_RBP;\n  ulong **ppuVar14;\n  ulong **ppuVar15;\n  ulong **ppuVar16;\n  ulong **ppuVar17;\n  ulong **ppuVar18;\n  ulong **unaff_R14;\n  ulong **unaff_R15;\n  bool boolVar19;\n  byte byteVar20;\n  ulong **stackPtr;\n  uint localVar4c;\n  ulong *localVar48;\n  ulong **localArray [2];\n  \n  byteVar20 = 0;\n  localVar48 = (ulong *)0x0;\n  if ((dynamicFlag != 0) || ((*(byte *)((long)fileAttributes + 0x44) & 0x10) != 0)) {\n    symbolPtr2 = (ulong **)&localVar4c;\n    symbolPtr1 = (ulong **)(*(code *)fileAttributes[1][0x4d])(fileAttributes,dynamicFlag != 0,localArray);\n    if ((long)symbolPtr1 < 0) {\n      if ((dynamicFlag != 0) && (intVar4 = bfd_get_error(), intVar4 == 7)) {\n        if (quietFlag != 0) {\n          return;\n        }\n        pointerVar11 = *fileAttributes;\n        uintVar6 = dcgettext(0,\"%s: no symbols\",5);\n        non_fatal(uintVar6,pointerVar11);\n        return;\n      }\n      bfd_fatal(*fileAttributes);\n      goto LAB_00102e9e;\n    }\n    if (symbolPtr1 != (ulong **)0x0) {\n      if (show_synthetic != 0) {\n        if (localVar4c == 8) goto LAB_00102d06;\n        goto LAB_00102cc2;\n      }\n      byteVar1 = *(byte *)((long)fileAttributes + 0x4a);\n      ppuVar13 = fileAttributes;\n      do {\n        if ((byteVar1 & 0x10) != 0) {\n          unaff_RBX = (ulong **)*ppuVar13;\n          reportPluginError = '\\0';\n          uintVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(uintVar6);\n        }\n        ppuVar14 = localArray[0];\n        unaff_R14 = (ulong **)(ulong)localVar4c;\n        boolVar19 = dynamicFlag != 0;\n        symbolPtr2 = localArray[0];\n        unaff_R15 = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = unaff_RBX;\n        unaff_RBP = (ulong **)(ulong)boolVar19;\n        fileAttributes = ppuVar13;\n        if (unaff_R15 == (ulong **)0x0) goto LAB_00102ea7;\n        ppuVar17 = (ulong **)((long)symbolPtr1 * (long)unaff_R14);\n        symbolPtr1 = (ulong **)((long)ppuVar14 + (long)ppuVar17);\n        fileAttributes = ppuVar14;\n        ppuVar12 = ppuVar14;\njoined_r0x001049a4:\n        if (fileAttributes < symbolPtr1) {\n          do {\n            symbolPtr2 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar19,fileAttributes,unaff_R15);\n            ppuVar17 = unaff_R15;\n            if (symbolPtr2 == (ulong **)0x0) goto LAB_00102eb0;\n            pointerVar11 = symbolPtr2[1];\n            ppuVar17 = symbolPtr1;\n            if (((pointerVar11 == (ulong *)0x0) || (*(char *)pointerVar11 != '_')) ||\n               (*(char *)((long)pointerVar11 + 1) != '_')) {\nLAB_00104a03:\n              if (undefinedOnlyFlag == 0) goto LAB_00104a11;\nLAB_00104ae2:\n              uintVar5 = (uint)(symbolPtr2[4] == (ulong *)0x10c2a8);\nLAB_00104af9:\n              if (uintVar5 == 0) goto code_r0x00104b01;\nLAB_00104a2d:\n              if (printDebugSymbols == 0) {\n                if ((*(byte *)(symbolPtr2 + 3) & 4) == 0) {\n                  if (sortBySizeFlag != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n                  symbolList2 = (ulong **)(ulong)definedOnlyFlag;\n                  if (definedOnlyFlag == 0) {\n                    charVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,symbolPtr2);\n                    if (charVar3 != '\\0') {\n                      displayRelFileCold();\n                      return;\n                    }\n                    goto LAB_00104a7b;\n                  }\n                  if (symbolPtr2[4] != (ulong *)0x10c2a8) goto LAB_00104cba;\n                }\n              }\n              else {\n                if (sortBySizeFlag == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n                if ((symbolPtr2[4] == (ulong *)0x10c2a8) || (symbolPtr2[4] == (ulong *)0x10c3c0))\n                goto LAB_001049c3;\nLAB_00104cba:\n                charVar3 = (*(code *)ppuVar13[1][0x46])(ppuVar13,symbolPtr2);\n                if (charVar3 != '\\0') {\n                  displayRelFileCold();\n                  return;\n                }\nLAB_00104a7b:\n                if (ppuVar12 != fileAttributes) {\n                  if (unaff_R14 == (ulong **)0x8) {\n                    *ppuVar12 = *fileAttributes;\n                    process_symbols_001049c0();\n                    return;\n                  }\n                  for (; unaff_R14 != (ulong **)0x0; unaff_R14 = (ulong **)((long)unaff_R14 + -1)) {\n                    *(undefined *)ppuVar12 = *(undefined *)fileAttributes;\n                    fileAttributes = (ulong **)((long)fileAttributes + (ulong)byteVar20 * -2 + 1);\n                    ppuVar12 = (ulong **)((long)ppuVar12 + (ulong)byteVar20 * -2 + 1);\n                  }\n                  process_symbols_001049c0();\n                  return;\n                }\n                ppuVar12 = (ulong **)((long)ppuVar12 + (long)unaff_R14);\n              }\n            }\n            else {\n              intVar4 = strcmp((char *)((long)pointerVar11 + (ulong)(*(char *)((long)pointerVar11 + 2) == '_')),\n                             \"__gnu_lto_slim\");\n              stackPtr = symbolPtr2;\n              if (intVar4 == 0) {\n                if (reportPluginError != '\\0') {\n                  stackPtr = (ulong **)*ppuVar13;\n                  reportPluginError = '\\0';\n                  uintVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(uintVar6,stackPtr);\n                }\n                goto LAB_00104a03;\n              }\n              if (undefinedOnlyFlag != 0) goto LAB_00104ae2;\nLAB_00104a11:\n              if (externalOnlyFlag == 0) {\n                if (nonWeakFlag != 0) {\n                  uintVar5 = (*(uint *)(symbolPtr2 + 3) >> 7 ^ 1) & 1;\n                  goto LAB_00104af9;\n                }\n                goto LAB_00104a2d;\n              }\n              if ((((*(uint *)(symbolPtr2 + 3) & 0x800082) != 0) || (symbolPtr2[4] == (ulong *)0x10c2a8))\n                 || ((*(byte *)((long)symbolPtr2[4] + 0x25) & 0x10) != 0)) goto LAB_00104a2d;\n            }\nLAB_001049c3:\n            fileAttributes = (ulong **)((long)fileAttributes + (long)unaff_R14);\n            if (symbolPtr1 <= fileAttributes) break;\n          } while( true );\n        }\n        ppuVar12 = (ulong **)((long)ppuVar12 - (long)ppuVar14);\n        if (unaff_R14 == (ulong **)0x8) {\n          pointerVar11 = ppuVar13[1];\n          ppuVar14 = (ulong **)((long)ppuVar12 + 7);\n          if (-1 < (long)ppuVar12) {\n            ppuVar14 = ppuVar12;\n          }\n          symbolList = (ulong **)(ulong)noSortFlag;\n          functionPointer = (code *)pointerVar11[0x41];\n          ppuVar14 = (ulong **)((long)ppuVar14 >> 3);\n        }\n        else {\n          ppuVar14 = (ulong **)((long)ppuVar12 / (long)unaff_R14);\n          pointerVar11 = ppuVar13[1];\n          functionPointer = (code *)pointerVar11[0x41];\n        }\n        if (noSortFlag != 0) goto LAB_00104be2;\n        sortDynamicFlag = dynamicFlag != 0;\n        sortBfd = ppuVar13;\n        sortX = (ulong **)(*functionPointer)(ppuVar13);\n        sortY = (ulong **)(*(code *)ppuVar13[1][0x41])(ppuVar13);\n        ppuVar12 = localArray[0];\n        if ((sortX != (ulong **)0x0) && (sortY != (ulong **)0x0)) {\n          symbolPtr1 = (ulong **)(ulong)localVar4c;\n          if (sortBySizeFlag != 0) {\n            boolVar19 = dynamicFlag != 0;\n            qsort(localArray[0],(size_t)ppuVar14,(size_t)symbolPtr1,size_forward1);\n            ppuVar17 = (ulong **)xmalloc((long)ppuVar14 << 4);\n            ppuVar18 = sortX;\n            fileAttributes = sortY;\n            unaff_R14 = (ulong **)((long)ppuVar14 * (long)symbolPtr1 + (long)ppuVar12);\n            symbolPtr2 = sortX;\n            if (unaff_R14 <= ppuVar12) goto LAB_00102ec2;\n            symbolList2 = sortY;\n            ppuVar14 = (ulong **)(*(code *)ppuVar13[1][0x4e])(ppuVar13,boolVar19,ppuVar12);\n            symbolList = symbolPtr1;\n            stackPtr = ppuVar17;\n            if (ppuVar14 == (ulong **)0x0) goto LAB_00102eb9;\n            goto LAB_00104e35;\n          }\n          qsort(localArray[0],(size_t)ppuVar14,(size_t)symbolPtr1,\n                *(__compar_fn_t *)(sorters + ((long)reverseSortFlag + (long)sortNumericallyFlag * 2) * 8))\n          ;\n          pointerVar11 = ppuVar13[1];\nLAB_00104be2:\n          fileAttributes = ppuVar13;\n          ppuVar18 = (ulong **)0x0;\n          goto LAB_00104be5;\n        }\n        bfd_fatal(*ppuVar13);\n        fileAttributes = ppuVar13;\n        ppuVar12 = unaff_R15;\n        while( true ) {\n          unaff_RBX = (ulong **)xmalloc();\n          symbolPtr1 = (ulong **)(*(code *)fileAttributes[1][0x6b])(fileAttributes,unaff_RBX);\n          symbolPtr2 = ppuVar17;\n          if (-1 < (long)symbolPtr1) break;\n          ppuVar13 = (ulong **)*fileAttributes;\n          ppuVar14 = (ulong **)bfd_fatal(ppuVar13,ppuVar17);\nLAB_00102dbe:\n          pointerVar11 = ppuVar14[2];\n          symbolPtr2 = (ulong **)0x0;\nLAB_00102dc4:\n          pointerVar11 = (ulong *)((long)symbolPtr1[8] - (long)pointerVar11);\n          ppuVar18 = fileAttributes;\n          ppuVar15 = ppuVar12;\nLAB_00104ea7:\n          ppuVar14 = symbolPtr2;\n          ppuVar12 = unaff_RBX;\n          fileAttributes = symbolList2;\n          if (pointerVar11 != (ulong *)0x0) {\n            *ppuVar17 = (ulong *)ppuVar15;\n            ppuVar17[1] = pointerVar11;\n            ppuVar17 = ppuVar17 + 2;\n          }\nLAB_00104e35:\n          symbolList2 = ppuVar18;\n          if (ppuVar12 < unaff_R14) goto code_r0x00104e3e;\n          ppuVar14 = (ulong **)((long)ppuVar17 - (long)stackPtr >> 4);\n          qsort(stackPtr,(size_t)ppuVar14,0x10,size_forward2);\n          pointerVar11 = ppuVar13[1];\n          fileAttributes = ppuVar13;\n          ppuVar18 = stackPtr;\nLAB_00104be5:\n          unaff_RBX = localArray[0];\n          symbolPtr1 = (ulong **)(ulong)sortBySizeFlag;\n          unaff_R14 = (ulong **)(ulong)(dynamicFlag != 0);\n          if (sortBySizeFlag != 0) {\n            ppuVar17 = (ulong **)(*(code *)pointerVar11[0x41])(fileAttributes);\n            if (ppuVar17 == (ulong **)0x0) goto LAB_00102ed2;\n            ppuVar12 = ppuVar18 + (long)ppuVar14 * 2;\n            ppuVar14 = ppuVar18;\n            goto LAB_00104ee9;\n          }\n          symbolPtr1 = (ulong **)(ulong)localVar4c;\n          unaff_R15 = (ulong **)(*(code *)pointerVar11[0x41])(fileAttributes);\n          if (unaff_R15 != (ulong **)0x0) {\n            unaff_RBP = (ulong **)((long)ppuVar14 * (long)symbolPtr1 + (long)unaff_RBX);\n            if (unaff_RBX < unaff_RBP) goto LAB_00104c38;\n            goto LAB_00104c75;\n          }\n          bfd_fatal(*fileAttributes);\n          unaff_R15 = ppuVar18;\nLAB_00102d06:\n          symbolPtr2 = symbolPtr1;\n          if (dynamicFlag != 0) {\n            unaff_RBX = localArray[0];\n            ppuVar14 = (ulong **)0x0;\n            ppuVar17 = (ulong **)0x0;\n            break;\n          }\n          longVar10 = (*(code *)fileAttributes[1][0x6a])(fileAttributes);\n          ppuVar14 = localArray[0];\n          ppuVar17 = symbolPtr1;\n          ppuVar12 = unaff_R15;\n          if (longVar10 < 1) {\n            symbolPtr1 = (ulong **)0x0;\n            unaff_RBX = (ulong **)0x0;\n            break;\n          }\n        }\n        symbolList2 = &localVar48;\n        symbolList = unaff_RBX;\n        longVar10 = (*(code *)fileAttributes[1][0x6c])(fileAttributes,ppuVar17,ppuVar14,symbolPtr1);\n        symbolPtr1 = symbolPtr2;\n        if (0 < longVar10) {\n          symbolPtr1 = (ulong **)((long)symbolPtr2 + longVar10);\n          localArray[0] = (ulong **)xrealloc(localArray[0]);\n          longVar7 = 0;\n          do {\n            localArray[0][(long)symbolPtr2 + longVar7] = localVar48 + longVar7 * 6;\n            longVar7 = longVar7 + 1;\n          } while (longVar10 != longVar7);\n          localArray[0][(long)symbolPtr2 + longVar10] = (ulong *)0x0;\n        }\n        if ((dynamicFlag == 0) && (unaff_RBX != (ulong **)0x0)) {\n          free(unaff_RBX);\n        }\nLAB_00102cc2:\n        byteVar1 = *(byte *)((long)fileAttributes + 0x4a);\n        ppuVar13 = fileAttributes;\n      } while( true );\n    }\n  }\n  if (quietFlag == 0) {\n    pointerVar11 = *fileAttributes;\n    uintVar6 = dcgettext(0,\"%s: no symbols\",5);\n    non_fatal(uintVar6,pointerVar11);\n  }\n  return;\ncode_r0x00104b01:\n  fileAttributes = (ulong **)((long)fileAttributes + (long)unaff_R14);\n  goto joined_r0x001049a4;\ncode_r0x00104e3e:\n  unaff_RBX = (ulong **)((long)ppuVar12 + (long)symbolList);\n  if (unaff_R14 <= unaff_RBX) {\n    symbolPtr1 = (ulong **)ppuVar14[4];\n    if ((*(uint *)(ppuVar14 + 3) & 0x200100) != 0) goto LAB_00102dbe;\n    symbolPtr2 = (ulong **)0x0;\nLAB_00104e95:\n    ppuVar18 = fileAttributes;\n    ppuVar15 = ppuVar12;\n    if (*(int *)(ppuVar13[1] + 1) == 5) {\n      pointerVar11 = ppuVar14[7];\n      goto LAB_00104ea7;\n    }\n    pointerVar11 = ppuVar14[2];\n    if ((*(byte *)((long)symbolPtr1 + 0x25) & 0x10) != 0) goto LAB_00104ea7;\n    if (unaff_R14 <= unaff_RBX) goto LAB_00102dc4;\n    goto LAB_00102ee7;\n  }\n  symbolPtr1 = fileAttributes;\n  ppuVar15 = symbolList;\n  ppuVar16 = symbolList2;\n  symbolPtr2 = (ulong **)(*(code *)ppuVar13[1][0x4e])();\n  ppuVar18 = ppuVar12;\n  if (symbolPtr2 == (ulong **)0x0) goto LAB_00102edb;\n  symbolPtr1 = (ulong **)ppuVar14[4];\n  if ((*(uint *)(ppuVar14 + 3) & 0x200100) == 0) goto LAB_00104e95;\n  goto LAB_00102ee3;\nLAB_00104ee9:\n  if (ppuVar12 <= ppuVar14) {\nLAB_00104c75:\n    if (localVar48 == (ulong *)0x0) {\n      free(localArray[0]);\n      free(ppuVar18);\n      return;\n    }\n    free(localVar48);\n    free(localArray[0]);\n    free(ppuVar18);\n    return;\n  }\n  symbolPtr1 = ppuVar17;\n  longVar10 = (*(code *)fileAttributes[1][0x4e])(fileAttributes,unaff_R14,*ppuVar14);\n  if (longVar10 == 0) goto LAB_00102ec9;\n  symbolPtr1 = ppuVar14 + 1;\n  ppuVar14 = ppuVar14 + 2;\n  print_symbol(fileAttributes,longVar10,*symbolPtr1,param2);\n  goto LAB_00104ee9;\nLAB_00102ec9:\n  bfd_fatal(*fileAttributes,0);\nLAB_00102ed2:\n  ppuVar13 = (ulong **)*fileAttributes;\n  bfd_fatal();\n  unaff_RBX = ppuVar12;\n  ppuVar15 = symbolList;\n  ppuVar16 = symbolList2;\nLAB_00102edb:\n  symbolList2 = ppuVar16;\n  symbolList = ppuVar15;\n  ppuVar13 = (ulong **)*ppuVar13;\n  symbolPtr2 = (ulong **)bfd_fatal();\n  ppuVar12 = ppuVar18;\nLAB_00102ee3:\n  pointerVar11 = ppuVar14[2];\nLAB_00102ee7:\n  if (symbolPtr1 != (ulong **)symbolPtr2[4]) goto LAB_00102dc4;\n  pointerVar11 = (ulong *)((long)symbolPtr2[2] - (long)pointerVar11);\n  ppuVar18 = fileAttributes;\n  ppuVar15 = ppuVar12;\n  goto LAB_00104ea7;\nLAB_00104c38:\n  while (symbolPtr2 = unaff_R15, longVar10 = (*(code *)fileAttributes[1][0x4e])(fileAttributes,unaff_R14,unaff_RBX),\n        longVar10 != 0) {\n    unaff_RBX = (ulong **)((long)unaff_RBX + (long)symbolPtr1);\n    print_symbol(fileAttributes,longVar10,0,param2);\n    if (unaff_RBP <= unaff_RBX) goto LAB_00104c75;\n  }\nLAB_00102e9e:\n  bfd_fatal(*fileAttributes);\n  ppuVar12 = unaff_RBX;\nLAB_00102ea7:\n  ppuVar13 = unaff_RBP;\n  bfd_fatal(*fileAttributes);\n  ppuVar17 = unaff_R15;\nLAB_00102eb0:\n  bfd_fatal(*ppuVar13);\n  ppuVar13 = fileAttributes;\nLAB_00102eb9:\n  bfd_fatal(*ppuVar13);\n  fileAttributes = symbolList2;\nLAB_00102ec2:\n  ppuVar14 = (ulong **)0x0;\n  symbolList = symbolPtr1;\n  ppuVar18 = symbolPtr2;\n  stackPtr = ppuVar17;\n  goto LAB_00104e35;\n}\n\n",
            "called": [
                "non_fatal",
                "bfd_fatal",
                "bfd_get_error",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001048e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "process_symbols_001048e0"
        },
        "FUN_0010c248": {
            "renaming": {},
            "code": "\n\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strstr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c248",
            "calling": [
                "strstr"
            ],
            "imported": false,
            "current_name": "FUN_0010c248"
        },
        "FUN_001023a0": {
            "renaming": {},
            "code": "\nvoid bfd_canonicalize_reloc(void)\n\n{\n  bfd_canonicalize_reloc();\n  return;\n}\n\n",
            "called": [
                "bfd_canonicalize_reloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023a0",
            "calling": [
                "get_relocs"
            ],
            "imported": false,
            "current_name": "FUN_001023a0"
        },
        "FUN_001065a0": {
            "renaming": {
                "FUN_001065a0": "FUNC_001065a0"
            },
            "code": "\nvoid FUNC_001065a0(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x001065a0",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_001065a0"
        },
        "FUN_001021e0": {
            "renaming": {},
            "code": "\nvoid xmalloc(void)\n\n{\n  xmalloc();\n  return;\n}\n\n",
            "called": [
                "xmalloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021e0",
            "calling": [
                "get_relocs",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001021e0"
        },
        "FUN_001020c0": {
            "renaming": {},
            "code": "\n\n\nint isatty(int __fd)\n\n{\n  int iVar1;\n  \n  iVar1 = isatty(__fd);\n  return iVar1;\n}\n\n",
            "called": [
                "isatty"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020c0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001020c0"
        },
        "FUN_0010c008": {
            "renaming": {},
            "code": "\n\n\n\nvoid free(void *__ptr)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* free@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c008",
            "calling": [
                "free"
            ],
            "imported": false,
            "current_name": "FUN_0010c008"
        },
        "FUN_0010c240": {
            "renaming": {},
            "code": "\n\n\n\nchar * strerror(int __errnum)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strerror@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c240",
            "calling": [
                "strerror"
            ],
            "imported": false,
            "current_name": "FUN_0010c240"
        },
        "FUN_0010c088": {
            "renaming": {},
            "code": "\n\n\nvoid textdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* textdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c088",
            "calling": [
                "textdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c088"
        },
        "FUN_0010c0a8": {
            "renaming": {},
            "code": "\n\n\nvoid bindtextdomain(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* bindtextdomain@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0a8",
            "calling": [
                "bindtextdomain"
            ],
            "imported": false,
            "current_name": "FUN_0010c0a8"
        },
        "FUN_00102420": {
            "renaming": {},
            "code": "\n\n\nchar * strstr(char *__haystack,char *__needle)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strstr(__haystack,__needle);\n  return pcVar1;\n}\n\n",
            "called": [
                "strstr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102420",
            "calling": [
                "set_print_width",
                "size_forward1"
            ],
            "imported": false,
            "current_name": "FUN_00102420"
        },
        "FUN_00105530": {
            "renaming": {
                "FUN_00105530": "FUNC_00105530"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105543) */\n/* WARNING: Removing unreachable block (ram,0x0010554f) */\n\nvoid FUNC_00105530(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_deregisterTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105530",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUNC_00105530"
        },
        "FUN_00102260": {
            "renaming": {},
            "code": "\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = fprintf(__stream,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "fprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102260",
            "calling": [
                "list_matching_formats",
                "usage.cold",
                "main",
                "bfd_nonfatal",
                "usage",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_00102260"
        },
        "FUN_00102380": {
            "renaming": {},
            "code": "\nvoid bfd_check_format_matches(void)\n\n{\n  bfd_check_format_matches();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format_matches"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102380",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102380"
        },
        "FUN_00102020": {
            "renaming": {
                "FUN_00102020": "execute_indirect_jump_00102020",
                "undefined": "functionPointer"
            },
            "code": "\nvoid executeIndirectJump_00102020(void)\n\n{\n                    /* WARNING: Treating indirect jump as call */\n  (*(code *)(functionPointer *)0x0)();\n  return;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102020",
            "calling": [],
            "imported": false,
            "current_name": "execute_indirect_jump_00102020"
        },
        "FUN_00102140": {
            "renaming": {},
            "code": "\nvoid bindtextdomain(void)\n\n{\n  bindtextdomain();\n  return;\n}\n\n",
            "called": [
                "bindtextdomain"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102140",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102140"
        },
        "FUN_001062d0": {
            "renaming": {
                "FUN_001062d0": "print_file_header_001062d0",
                "param_1": "filename",
                "filename_per_file": "use_filename_per_file",
                "filename_per_symbol": "use_filename_per_symbol"
            },
            "code": "\nvoid print_file_header_001062d0(undefined8 filename)\n\n{\n  if ((use_filename_per_file != 0) && (use_filename_per_symbol == 0)) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001062d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_header_001062d0"
        },
        "FUN_0010c0c0": {
            "renaming": {},
            "code": "\n\n\nvoid getopt_long(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* getopt_long@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c0",
            "calling": [
                "getopt_long"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c0"
        },
        "FUN_00102300": {
            "renaming": {},
            "code": "\nvoid bfd_set_error_program_name(void)\n\n{\n  bfd_set_error_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_set_error_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102300",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102300"
        },
        "FUN_00103238": {
            "renaming": {
                "FUN_00103238": "process_relocations_00103238",
                "__ptr": "ptr",
                "__s1": "s1",
                "plVar1": "ptr1",
                "lVar2": "var2",
                "cVar3": "var3",
                "iVar4": "var4",
                "unaff_RBX": "rbx",
                "pvVar5": "var5",
                "uVar6": "var6",
                "unaff_R13": "r13",
                "lVar7": "var7",
                "param_10": "param10",
                "param_12": "param12"
            },
            "code": "\n\n\nvoid processRelocations_00103238(void)\n\n{\n  long *ptr1;\n  void *ptr;\n  char *s1;\n  long var2;\n  char var3;\n  int var4;\n  long rbx;\n  void *var5;\n  uint var6;\n  long r13;\n  long var7;\n  ulong param10;\n  void *param12;\n  \n  var5 = relocs_3;\n  if (lineno_cache_rel_bfd == r13) {\n    if (relocs_3 != (void *)0x0) goto LAB_00103296;\n  }\n  else {\n    var6 = 0;\n    if (relocs_3 != (void *)0x0) {\n      for (; var6 < seccount_2; var6 = var6 + 1) {\n        ptr = *(void **)((long)var5 + (ulong)var6 * 8);\n        if (ptr != (void *)0x0) {\n          free(ptr);\n        }\n      }\n      free(secs_1);\n      free(var5);\n      free(relcount_0);\n      secs_1 = (void *)0x0;\n      relocs_3 = (void *)0x0;\n      relcount_0 = (void *)0x0;\n    }\n  }\n  seccount_2 = *(uint *)(r13 + 0xa0);\n  secs_1 = (void *)xmalloc((ulong)seccount_2 * 8);\n  relocs_3 = (void *)xmalloc((ulong)seccount_2 << 3);\n  relcount_0 = (void *)xmalloc((ulong)seccount_2 << 3);\n  param12 = secs_1;\n  bfd_map_over_sections();\n  lineno_cache_rel_bfd = r13;\nLAB_00103296:\n  s1 = *(char **)(rbx + 8);\n  var6 = 0;\n  do {\n    if (seccount_2 <= var6) {\n      putc(10,_stdout);\n      return;\n    }\n    var5 = relcount_0;\n    for (var7 = 0; ptr1 = (long *)((long)var5 + (ulong)var6 * 8),\n        *ptr1 != var7 && var7 <= *ptr1; var7 = var7 + 1) {\n      ptr1 = **(long ***)(*(long *)((long)relocs_3 + (ulong)var6 * 8) + var7 * 8);\n      if ((((ptr1 != (long *)0x0) &&\n           (var2 = *ptr1, *(long *)(var2 + 0x20) == *(long *)(rbx + 0x20))) &&\n          (*(long *)(var2 + 0x10) == *(long *)(rbx + 0x10))) &&\n         (((var4 = strcmp(s1,*(char **)(var2 + 8)), var4 == 0 &&\n           (var3 = (**(code **)(*(long *)(r13 + 8) + 0x240))(), var5 = relcount_0,\n           var3 != '\\0')) && (param12 != (void *)0x0)))) {\n        printf(\"\\t%s:%u\",param12,param10 >> 0x20);\n        var6 = seccount_2;\n        break;\n      }\n    }\n    var6 = var6 + 1;\n  } while( true );\n}\n\n",
            "called": [
                "free",
                "get_relocs",
                "xmalloc",
                "bfd_map_over_sections"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103238",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "process_relocations_00103238"
        },
        "FUN_001036e0": {
            "renaming": {
                "FUN_001036e0": "print_formatted_message_001036e0",
                "param_1": "messagePrefix",
                "param_2": "defaultPrefix"
            },
            "code": "\nvoid printFormattedMessage_001036e0(undefined8 *messagePrefix,undefined8 *defaultPrefix)\n\n{\n  if (messagePrefix != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*messagePrefix);\n    return;\n  }\n  printf(\"%s: \",*defaultPrefix);\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001036e0",
            "calling": [
                "print_symbol_filename_posix"
            ],
            "imported": false,
            "current_name": "print_formatted_message_001036e0"
        },
        "FUN_001047d0": {
            "renaming": {
                "FUN_001047d0": "print_formatted_output_001047d0",
                "unaff_RBX": "concatenatedString",
                "unaff_R12": "outputFlag",
                "unaff_R13": "temporaryString",
                "unaff_R14": "formatSpecifier",
                "unaff_R15": "functionPointer"
            },
            "code": "\nvoid printFormattedOutput_001047d0(void)\n\n{\n  char *pcVar1;\n  void *concatenatedString;\n  undefined *outputFlag;\n  void *temporaryString;\n  char *formatSpecifier;\n  long functionPointer;\n  \n  if (((with_symbol_versions != 0) &&\n      (pcVar1 = (char *)(**(code **)(*(long *)(functionPointer + 8) + 0x220))(), pcVar1 != (char *)0x0))\n     && (*pcVar1 != '\\0')) {\n    concatenatedString = (void *)reconcat();\n    temporaryString = concatenatedString;\n  }\n  printf(formatSpecifier,temporaryString);\n  if (outputFlag != (undefined *)0x0) {\n    *outputFlag = 0x40;\n  }\n  free(concatenatedString);\n  return;\n}\n\n",
            "called": [
                "free",
                "printf",
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001047d0",
            "calling": [
                "FUN_00102739",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "print_formatted_output_001047d0"
        },
        "FUN_0010c138": {
            "renaming": {},
            "code": "\n\n\n\nint putc(int __c,FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putc@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c138",
            "calling": [
                "putc"
            ],
            "imported": false,
            "current_name": "FUN_0010c138"
        },
        "FUN_001023b0": {
            "renaming": {},
            "code": "\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n  int iVar1;\n  \n  iVar1 = sprintf(__s,__format);\n  return iVar1;\n}\n\n",
            "called": [
                "sprintf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023b0",
            "calling": [
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_001023b0"
        },
        "FUN_0010249f": {
            "renaming": {
                "FUN_0010249f": "print_file_warning_0010249f",
                "uVar1": "errorMessage"
            },
            "code": "\nundefined8 printFileWarning_0010249f(void)\n\n{\n  undefined8 errorMessage;\n  \n  errorMessage = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n  non_fatal(errorMessage);\n  return 0;\n}\n\n",
            "called": [
                "non_fatal",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010249f",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_file_warning_0010249f"
        },
        "FUN_001020d0": {
            "renaming": {},
            "code": "\nvoid bfd_set_default_target(void)\n\n{\n  bfd_set_default_target();\n  return;\n}\n\n",
            "called": [
                "bfd_set_default_target"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020d0"
        },
        "FUN_001043d0": {
            "renaming": {
                "FUN_001043d0": "check_file_001043d0",
                "param_1": "filename",
                "cVar1": "check_result",
                "iVar2": "status",
                "uVar3": "return_value",
                "piVar4": "errno_ptr",
                "uVar5": "error_message",
                "puVar6": "file_handle",
                "puVar9": "archived_file",
                "puVar10": "current_file",
                "lVar7": "next_map_entry",
                "pcVar8": "error_reason",
                "local_c8": "file_stat_info"
            },
            "code": "\nundefined4 check_file_001043d0(char *filename)\n\n{\n  char check_result;\n  int status;\n  undefined4 return_value;\n  int *errno_ptr;\n  undefined8 error_message;\n  undefined8 *file_handle;\n  long next_map_entry;\n  char *error_reason;\n  undefined8 *archived_file;\n  undefined8 *current_file;\n  stat file_stat_info;\n  \n  if (filename != (char *)0x0) {\n    status = stat(filename,&file_stat_info);\n    if (status < 0) {\nLAB_00102522:\n      errno_ptr = __errno_location();\n      if (*errno_ptr == 2) {\n        error_message = dcgettext(0,\"\\'%s\\': No such file\",5);\n        non_fatal(error_message,filename);\n      }\n      else {\n        error_reason = strerror(*errno_ptr);\n        error_message = dcgettext(0,\"Warning: could not locate \\'%s\\'.  reason: %s\",5);\n        non_fatal(error_message,filename,error_reason);\n      }\n    }\n    else if ((file_stat_info.st_mode & 0xf000) == 0x4000) {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is a directory\",5);\n      non_fatal(error_message,filename);\n    }\n    else if ((file_stat_info.st_mode & 0xf000) == 0x8000) {\n      if (file_stat_info.st_size < 0) {\n        error_message = dcgettext(0,\"Warning: \\'%s\\' has negative size, probably it is too large\",5);\n        non_fatal(error_message,filename);\n      }\n      else if (file_stat_info.st_size != 0) {\n        if (target == 0) {\n          file_handle = (undefined8 *)bfd_openr(filename,\"plugin\");\n        }\n        else {\n          file_handle = (undefined8 *)bfd_openr(filename);\n        }\n        if (file_handle != (undefined8 *)0x0) {\n          if (line_numbers != 0) {\n            *(uint *)((long)file_handle + 0x44) = *(uint *)((long)file_handle + 0x44) | 0x8000;\n          }\n          check_result = bfd_check_format(file_handle,2);\n          if (check_result == '\\0') {\n            return_value = bfd_check_format_matches(file_handle,1,&file_stat_info);\n            if ((char)return_value == '\\0') goto LAB_001025ac;\n            set_print_width(file_handle);\n            (**(code **)format)(filename);\n            display_rel_file(file_handle,0);\n          }\n          else {\n            (**(code **)(format + 8))(*file_handle);\n            if ((print_armap != 0) &&\n               (next_map_entry = bfd_get_next_mapent(file_handle,0xffffffffffffffff,&file_stat_info), next_map_entry != -1)) {\n              error_reason = (char *)dcgettext(0,\"\\nArchive index:\\n\",5);\n              printf(error_reason);\n              do {\n                archived_file = (undefined8 *)(**(code **)(file_handle[1] + 0x1e0))(file_handle,next_map_entry);\n                if (archived_file == (undefined8 *)0x0) goto LAB_00102516;\n                if (*(long *)file_stat_info.st_dev != 0) {\n                  print_symname(&DAT_0010712d,0,*(long *)file_stat_info.st_dev,file_handle);\n                  printf(\" in %s\\n\",*archived_file);\n                }\n                next_map_entry = bfd_get_next_mapent(file_handle,next_map_entry,&file_stat_info);\n              } while (next_map_entry != -1);\n            }\n            archived_file = (undefined8 *)0x0;\n            do {\n              do {\n                current_file = archived_file;\n                archived_file = (undefined8 *)bfd_openr_next_archived_file(file_handle,current_file);\n                if (archived_file == (undefined8 *)0x0) {\n                  status = bfd_get_error();\n                  if (status != 9) {\n                    bfd_fatal(*file_handle);\nLAB_00102516:\n                    bfd_fatal(\"bfd_get_elt_at_index\");\n                    goto LAB_00102522;\n                  }\n                  if (current_file != (undefined8 *)0x0) {\n                    bfd_close(current_file);\n                    lineno_cache_bfd = 0;\n                    lineno_cache_rel_bfd = 0;\n                  }\n                  goto LAB_001044b4;\n                }\n                check_result = bfd_check_format_matches(archived_file,1,&file_stat_info);\n                if (check_result == '\\0') {\n                  bfd_nonfatal(*archived_file);\n                  status = bfd_get_error();\n                  if (status == 0xd) {\n                    list_matching_formats(file_stat_info.st_dev);\n                  }\n                }\n                else {\n                  set_print_width(archived_file);\n                  (**(code **)(format + 0x10))(*file_handle,*archived_file);\n                  display_rel_file(archived_file,file_handle);\n                }\n              } while (current_file == (undefined8 *)0x0);\n              bfd_close(current_file);\n              lineno_cache_bfd = 0;\n              lineno_cache_rel_bfd = 0;\n            } while (current_file != archived_file);\n          }\nLAB_001044b4:\n          return_value = 1;\n          while (check_result = bfd_close(file_handle), check_result == '\\0') {\n            bfd_fatal(filename);\nLAB_001025ac:\n            bfd_nonfatal(filename);\n            status = bfd_get_error();\n            if (status == 0xd) {\n              list_matching_formats(file_stat_info.st_dev);\n            }\n          }\n          lineno_cache_rel_bfd = 0;\n          lineno_cache_bfd = 0;\n          return return_value;\n        }\n        bfd_nonfatal(filename);\n      }\n    }\n    else {\n      error_message = dcgettext(0,\"Warning: \\'%s\\' is not an ordinary file\",5);\n      non_fatal(error_message,filename);\n    }\n  }\n  return 0;\n}\n\n",
            "called": [
                "print_archive_filename_bsd",
                "strerror",
                "non_fatal",
                "set_print_width",
                "print_archive_member_bsd",
                "display_file.cold",
                "list_matching_formats",
                "printf",
                "bfd_nonfatal",
                "bfd_openr_next_archived_file",
                "bfd_check_format",
                "stat",
                "print_symname",
                "bfd_openr",
                "print_object_filename_bsd",
                "bfd_check_format_matches",
                "bfd_get_next_mapent",
                "bfd_get_error",
                "bfd_fatal",
                "display_rel_file",
                "bfd_close",
                "__errno_location",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001043d0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "check_file_001043d0"
        },
        "FUN_001055e0": {
            "renaming": {},
            "code": "\nvoid register_tm_clones(void)\n\n{\n  register_tm_clones();\n  return;\n}\n\n",
            "called": [
                "register_tm_clones"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055e0",
            "calling": [],
            "imported": false,
            "current_name": "FUN_001055e0"
        },
        "FUN_001021f0": {
            "renaming": {},
            "code": "\nvoid xmalloc_set_program_name(void)\n\n{\n  xmalloc_set_program_name();\n  return;\n}\n\n",
            "called": [
                "xmalloc_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021f0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021f0"
        },
        "FUN_0010c010": {
            "renaming": {},
            "code": "\n\n\n\nint putchar(int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* putchar@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c010",
            "calling": [
                "putchar"
            ],
            "imported": false,
            "current_name": "FUN_0010c010"
        },
        "FUN_0010c098": {
            "renaming": {},
            "code": "\n\n\n\nint fclose(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fclose@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c098",
            "calling": [
                "fclose"
            ],
            "imported": false,
            "current_name": "FUN_0010c098"
        },
        "FUN_0010c130": {
            "renaming": {},
            "code": "\n\n\n\nint strcmp(char *__s1,char *__s2)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strcmp@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c130",
            "calling": [
                "strcmp"
            ],
            "imported": false,
            "current_name": "FUN_0010c130"
        },
        "FUN_00102390": {
            "renaming": {},
            "code": "\nvoid bfd_errmsg(void)\n\n{\n  bfd_errmsg();\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102390",
            "calling": [
                "main",
                "bfd_nonfatal"
            ],
            "imported": false,
            "current_name": "FUN_00102390"
        },
        "FUN_001025f5": {
            "renaming": {
                "FUN_001025f5": "concatenate_format_string_001025f5",
                "param_1": "arg1",
                "param_2": "arg2",
                "print_format_string": "result_string"
            },
            "code": "\nvoid concatenate_format_string_001025f5(undefined8 arg1,undefined8 arg2)\n\n{\n  result_string = concat(&DAT_001071d7,arg2,&DAT_001071ca,0);\n  return;\n}\n\n",
            "called": [
                "concat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001025f5",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "concatenate_format_string_001025f5"
        },
        "FUN_00102670": {
            "renaming": {
                "FUN_00102670": "display_filename_00102670",
                "param_1": "filename"
            },
            "code": "\nvoid display_filename_00102670(undefined8 filename)\n\n{\n  if (filename_per_file != 0) {\n    printf(\"\\n%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102670",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "display_filename_00102670"
        },
        "FUN_0010c0b8": {
            "renaming": {},
            "code": "\n\n\n\nsize_t strlen(char *__s)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strlen@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0b8",
            "calling": [
                "strlen"
            ],
            "imported": false,
            "current_name": "FUN_0010c0b8"
        },
        "FUN_00102310": {
            "renaming": {},
            "code": "\n\n\nvoid * memmove(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memmove(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memmove"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102310",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102310"
        },
        "FUN_00102430": {
            "renaming": {},
            "code": "\nvoid bfd_get_next_mapent(void)\n\n{\n  bfd_get_next_mapent();\n  return;\n}\n\n",
            "called": [
                "bfd_get_next_mapent"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102430",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102430"
        },
        "FUN_00102150": {
            "renaming": {},
            "code": "\nvoid dcgettext(void)\n\n{\n  dcgettext();\n  return;\n}\n\n",
            "called": [
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102150",
            "calling": [
                "print_value.constprop.0.cold",
                "print_archive_member_sysv",
                "print_symbol_info_bsd",
                "display_file.cold",
                "list_matching_formats",
                "usage.cold",
                "FUN_00104d5b",
                "print_object_filename_sysv",
                "main",
                "set_output_format",
                "bfd_nonfatal.cold",
                "print_symbol_info_sysv",
                "display_rel_file",
                "display_file",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102150"
        },
        "FUN_00102270": {
            "renaming": {},
            "code": "\n\n\nlong ftell(FILE *__stream)\n\n{\n  long lVar1;\n  \n  lVar1 = ftell(__stream);\n  return lVar1;\n}\n\n",
            "called": [
                "ftell"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102270",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102270"
        },
        "FUN_00102030": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_name_to_style(void)\n\n{\n  cplus_demangle_name_to_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102030",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102030"
        },
        "FUN_00103ab9": {
            "renaming": {
                "FUN_00103ab9": "FUNC_00103ab9"
            },
            "code": "\nvoid FUNC_00103ab9(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103ab9",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103ab9"
        },
        "FUN_0010c0d0": {
            "renaming": {},
            "code": "\n\n\n\nint printf(char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* printf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0d0",
            "calling": [
                "printf"
            ],
            "imported": false,
            "current_name": "FUN_0010c0d0"
        },
        "FUN_00104fa0": {
            "renaming": {
                "FUN_00104fa0": "sort_and_compare_strings_00104fa0",
                "param_1": "string1",
                "param_2": "string2",
                "__s2": "string2_ptr",
                "__s1": "string1_ptr",
                "uVar1": "string_comparison_result",
                "lVar2": "first_string_length",
                "lVar3": "second_string_length"
            },
            "code": "\nuint sort_and_compare_strings_00104fa0(undefined8 string1,undefined8 string2)\n\n{\n  char *string2_ptr;\n  char *string1_ptr;\n  uint string_comparison_result;\n  long first_string_length;\n  long second_string_length;\n  \n  first_string_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string1,sort_x);\n  second_string_length = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,string2,sort_y);\n  if ((first_string_length == 0) || (second_string_length == 0)) {\n    bfd_fatal(*sort_bfd);\n  }\n  else {\n    string2_ptr = *(char **)(second_string_length + 8);\n    string1_ptr = *(char **)(first_string_length + 8);\n    if (string2_ptr == (char *)0x0) {\n      return (uint)(string1_ptr != (char *)0x0);\n    }\n    if (string1_ptr != (char *)0x0) {\n      if (*string2_ptr == '\\0') {\n        return (uint)(*string1_ptr != '\\0');\n      }\n      if (*string1_ptr == '\\0') {\n        return 0xffffffff;\n      }\n      string_comparison_result = strcoll(string1_ptr,string2_ptr);\n      return string_comparison_result;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "called": [
                "non_numeric_forward.cold",
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104fa0",
            "calling": [
                "numeric_forward",
                "size_forward1",
                "non_numeric_reverse"
            ],
            "imported": false,
            "current_name": "sort_and_compare_strings_00104fa0"
        },
        "FUN_001023c0": {
            "renaming": {},
            "code": "\n\n\nvoid exit(int __status)\n\n{\n                    \n  exit(__status);\n}\n\n",
            "called": [
                "exit"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023c0",
            "calling": [
                "main",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_001023c0"
        },
        "FUN_0010c028": {
            "renaming": {},
            "code": "\n\n\n\nvoid abort(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* abort@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c028",
            "calling": [
                "abort"
            ],
            "imported": false,
            "current_name": "FUN_0010c028"
        },
        "FUN_001064a0": {
            "renaming": {
                "FUN_001064a0": "print_symbol_info_001064a0",
                "param_1": "symbolName",
                "param_2": "moduleName",
                "filename_per_symbol": "enableSymbolInfo"
            },
            "code": "\nvoid printSymbolInfo_001064a0(undefined8 *symbolName,undefined8 *moduleName)\n\n{\n  if (enableSymbolInfo == 0) {\n    return;\n  }\n  if (symbolName != (undefined8 *)0x0) {\n    printf(\"%s[%s]: \",*symbolName);\n    return;\n  }\n  printf(\"%s: \",*moduleName);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_posix.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064a0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064a0"
        },
        "FUN_0010c148": {
            "renaming": {},
            "code": "\n\n\n\nint fprintf(FILE *__stream,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* fprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c148",
            "calling": [
                "fprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c148"
        },
        "FUN_001022a0": {
            "renaming": {},
            "code": "\nvoid bfd_plugin_set_program_name(void)\n\n{\n  bfd_plugin_set_program_name();\n  return;\n}\n\n",
            "called": [
                "bfd_plugin_set_program_name"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022a0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001022a0"
        },
        "FUN_001054d0": {
            "renaming": {
                "FUN_001054d0": "print_symbol_info_001054d0",
                "param_1": "symbol",
                "cVar1": "isUndefined",
                "uVar2": "symType",
                "iVar3": "asprintfResult",
                "plVar4": "symbolInfo",
                "piVar5": "errnoLocation",
                "uVar10": "printWidth",
                "pcVar11": "symClass",
                "lVar7": "infoPointer",
                "uVar8": "width",
                "uVar6": "errorString",
                "bVar9": "symCategory"
            },
            "code": "\nvoid printSymbolInfo_001054d0(undefined8 symbol)\n\n{\n  char isUndefined;\n  ushort symType;\n  int asprintfResult;\n  long *symbolInfo;\n  int *errnoLocation;\n  undefined8 errorString;\n  long infoPointer;\n  ulong width;\n  byte symCategory;\n  ulong printWidth;\n  char *symClass;\n  undefined8 in_R8;\n  undefined8 in_R9;\n  \n  width = (ulong)print_width;\n  if ((print_width - 0x20 & 0xffffffdf) == 0) {\n    printf(print_format_string,symbol);\n    return;\n  }\n  symbolInfo = (long *)dcgettext(0,\"Print width has not been initialized (%d)\",5);\n  printWidth = width;\n  fatal(symbolInfo,width);\n  print_symname(\"%-20s|\",symbolInfo,0,printWidth,in_R8,in_R9,width);\n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolInfo + 8));\n  if (isUndefined == '\\0') {\n    printSymbolInfo_001054d0(*(undefined8 *)*symbolInfo);\n  }\n  else if (print_width == 0x20) {\n    printf(\"        \");\n  }\n  else {\n    printf(\"                \");\n  }\n  printf(\"|   %c  |\",(ulong)(uint)(int)*(char *)(*symbolInfo + 8));\n  if (*(char *)(*symbolInfo + 8) == '-') {\n    printf(\"%18s|  \",*(undefined8 *)(*symbolInfo + 0x20));\n    printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolInfo + 0x1a));\n    goto LAB_00103a54;\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[3] != 0) {\n      infoPointer = *(long *)(symbolInfo[3] + 0x30);\n      isUndefined = *(char *)(infoPointer + 0x28);\n      if (isUndefined == 'g') goto LAB_00103983;\n      if (isUndefined == 'h') {\n        symClass = \"Line\";\n      }\n      else if (isUndefined == 'd') {\n        symClass = \"Block\";\n      }\n      else if (*(ushort *)(infoPointer + 0x26) == 0) {\n        symClass = \"None\";\n      }\n      else {\n        symType = *(ushort *)(infoPointer + 0x26) >> 4 & 3;\n        if (symType == 2) {\n          symClass = \"Function\";\n        }\n        else if (symType == 3) {\n          symClass = \"Array\";\n        }\n        else {\n          if (symType != 1) {\n            free(bufp_6);\n            symType = *(ushort *)(infoPointer + 0x26);\n            symCategory = *(byte *)(infoPointer + 0x28);\n            symClass = (char *)dcgettext(0,\"<unknown>: %d/%d\",5);\n            asprintfResult = asprintf(&bufp_6,symClass,(ulong)symCategory,(ulong)symType);\n            symClass = bufp_6;\n            goto joined_r0x00103964;\n          }\n          symClass = \"Pointer\";\n        }\n      }\n      goto LAB_001039c0;\n    }\n    printf(\"                  |\");\n  }\n  else {\n    symCategory = *(byte *)(symbolInfo[2] + 0x48) & 0xf;\n    switch(symCategory) {\n    case 0:\n      symClass = \"NOTYPE\";\n      break;\n    case 1:\n      symClass = \"OBJECT\";\n      break;\n    case 2:\n      symClass = \"FUNC\";\n      break;\n    case 3:\n      symClass = \"SECTION\";\n      break;\n    case 4:\n      symClass = \"FILE\";\n      break;\n    case 5:\n      symClass = \"COMMON\";\n      break;\n    case 6:\n      symClass = \"TLS\";\n      break;\n    default:\n      free(bufp_7);\n      symClass = \"<processor specific>: %d\";\n      if ((2 < symCategory - 0xd) && (symClass = \"<OS specific>: %d\", 2 < symCategory - 10)) {\n        symClass = \"<unknown>: %d\";\n      }\n      symClass = (char *)dcgettext(0,symClass,5);\n      asprintfResult = asprintf(&bufp_7,symClass,(ulong)symCategory);\n      symClass = bufp_7;\njoined_r0x00103964:\n      if (asprintfResult < 0) {\n        errnoLocation = __errno_location();\n        errorString = xstrerror(*errnoLocation);\n        fatal(&DAT_0010712d,errorString);\nLAB_00103983:\n        symClass = \"File\";\n      }\n    }\nLAB_001039c0:\n    printf(\"%18s|\",symClass);\n  }\n  if (symbolInfo[2] == 0) {\n    if (symbolInfo[1] != 0) goto LAB_001039fb;\nLAB_00103a02:\n    if (print_width == 0x20) {\n      printf(\"        \");\n    }\n    else {\n      printf(\"                \");\n    }\n  }\n  else {\n    if (*(long *)(symbolInfo[2] + 0x38) == 0) goto LAB_00103a02;\nLAB_001039fb:\n    printSymbolInfo_001054d0();\n  }\n  infoPointer = symbolInfo[2];\n  if ((infoPointer != 0) || (infoPointer = symbolInfo[3], infoPointer != 0)) {\n    printf(\"|     |%s\",**(undefined8 **)(infoPointer + 0x20));\n    return;\n  }\nLAB_00103a54:\n  printf(\"|     |\");\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0.cold",
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001054d0",
            "calling": [
                "FUN_0010651a",
                "print_symbol_info_bsd",
                "print_symbol_info_bsd.cold",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_symbol_info_001054d0"
        },
        "FUN_001020e0": {
            "renaming": {},
            "code": "\n\n\nsize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\n\n{\n  size_t sVar1;\n  \n  sVar1 = fread(__ptr,__size,__n,__stream);\n  return sVar1;\n}\n\n",
            "called": [
                "fread"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020e0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001020e0"
        },
        "FUN_001053b0": {
            "renaming": {
                "FUN_001053b0": "print_filename_and_symbol_001053b0",
                "param_1": "filename",
                "param_2": "symbol",
                "param_3": "unusedParam",
                "param_4": "unusedParam2"
            },
            "code": "\nvoid printFilenameAndSymbol_001053b0(undefined8 *filename,undefined8 *symbol,undefined8 unusedParam,undefined8 unusedParam2)\n\n{\n  if (filename_per_symbol == 0) {\n    return;\n  }\n  if (filename != (undefined8 *)0x0) {\n    printf(\"%s:\",*filename);\n  }\n  printf(\"%s:\",*symbol,unusedParam2);\n  return;\n}\n\n",
            "called": [
                "print_symbol_filename_bsd.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053b0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_filename_and_symbol_001053b0"
        },
        "FUN_001055f0": {
            "renaming": {
                "FUN_001055f0": "display_files_001055f0",
                "param_1": "argc",
                "param_2": "argv",
                "pbVar1": "ptrByte1",
                "bVar2": "byteVar2",
                "bVar3": "boolVar3",
                "bVar4": "boolVar4",
                "bVar5": "boolVar5",
                "cVar6": "charVar6",
                "bVar7": "byteVar7",
                "cVar8": "charVar8",
                "cVar9": "charVar9",
                "iVar10": "intVar10",
                "uVar11": "uintVar11",
                "iVar12": "intVar12",
                "uVar13": "uintVar13",
                "uVar14": "uintVar14",
                "__stream": "fileStream",
                "__s": "bytePtr",
                "piVar15": "intPtr15",
                "sVar16": "sizeVar16",
                "__ptr": "bytePtr",
                "__src": "longPtr",
                "lVar17": "longVar17",
                "plVar18": "param2",
                "plVar19": "param2Ptr",
                "pcVar22": "strVar",
                "pbVar23": "ptrByte2",
                "unaff_RBP": "ptrUndefined1",
                "lVar24": "longVar24",
                "pbVar25": "ptrByte3",
                "pcVar26": "strVar2",
                "unaff_R12": "ptrInt"
            },
            "code": "\n\n\nundefined1 * display_files_001055f0(int argc,long *argv)\n\n{\n  byte *ptrByte1;\n  byte byteVar2;\n  bool boolVar3;\n  bool boolVar4;\n  bool boolVar5;\n  char charVar6;\n  byte byteVar7;\n  char charVar8;\n  char charVar9;\n  int intVar10;\n  uint uintVar11;\n  int intVar12;\n  undefined4 uintVar13;\n  undefined4 uintVar14;\n  FILE *fileStream;\n  byte *bytePtr;\n  int *intPtr15;\n  size_t sizeVar16;\n  byte *bytePtr;\n  long *longPtr;\n  long longVar17;\n  long *param2;\n  long *param2Ptr;\n  undefined8 uVar20;\n  undefined8 uVar21;\n  char *strVar;\n  byte *ptrByte2;\n  undefined1 *ptrUndefined1;\n  long longVar24;\n  byte *ptrByte3;\n  char *strVar2;\n  int *ptrInt;\n  int *piVar27;\n  int local_110;\n  int local_10c;\n  size_t local_108;\n  stat local_c8;\n  \n  setlocale(5,\"\");\n  setlocale(0,\"\");\n  strVar = \"binutils\";\n  setlocale(3,\"\");\n  bindtextdomain(\"binutils\",\"/usr/share/locale\");\n  textdomain(\"binutils\");\n  program_name = *argv;\n  xmalloc_set_program_name();\n  bfd_set_error_program_name(program_name);\n  bfd_plugin_set_program_name(program_name);\n  param2 = argv;\n  if (1 < argc) {\n    local_10c = 2000;\n    ptrInt = (int *)0x1;\n    local_110 = 0;\n    do {\n      intVar12 = (int)ptrInt;\n      ptrUndefined1 = (undefined1 *)(long)intVar12;\n      piVar27 = (int *)((long)ptrUndefined1 * 8);\n      if (*(char *)param2[(long)ptrUndefined1] != '@') goto LAB_00105a70;\n      local_10c = local_10c + -1;\n      if (local_10c == 0) {\n        longVar24 = *param2;\n        strVar2 = \"%s: error: too many @-files encountered\\n\";\n        goto LAB_00105f1d;\n      }\n      strVar = (char *)param2[(long)ptrUndefined1] + 1;\n      intVar10 = stat(strVar,&local_c8);\n      if (intVar10 < 0) {\nLAB_00105a70:\n        if (argc <= intVar12 + 1) break;\nLAB_00105a7a:\n        uintVar11 = intVar12 + 1;\n        local_110 = intVar12;\n      }\n      else {\n        if ((local_c8.st_mode & 0xf000) == 0x4000) goto LAB_00105f13;\n        fileStream = fopen(strVar,\"r\");\n        if (fileStream == (FILE *)0x0) goto LAB_00105a70;\n        intVar10 = fseek(fileStream,0,2);\n        if (((intVar10 == -1) ||\n            (strVar = (char *)ftell(fileStream), (int *)strVar == (int *)0xffffffffffffffff)) ||\n           (intVar10 = fseek(fileStream,0,0), intVar10 == -1)) {\nLAB_00105ad0:\n          fclose(fileStream);\n          if (intVar12 + 1 < argc) goto LAB_00105a7a;\n          break;\n        }\n        bytePtr = (byte *)xmalloc((char *)((long)strVar + 1));\n        intPtr15 = (int *)fread(bytePtr,1,(size_t)strVar,fileStream);\n        if (((int *)strVar != intPtr15) && (intVar10 = ferror(fileStream), intVar10 != 0)) {\n          free(bytePtr);\n          goto LAB_00105ad0;\n        }\n        bytePtr[(long)intPtr15] = 0;\n        byteVar7 = *bytePtr;\n        ptrByte2 = bytePtr;\n        if (byteVar7 != 0) {\nLAB_001057d0:\n          if (((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) goto LAB_001057c0;\n          sizeVar16 = strlen((char *)bytePtr);\n          bytePtr = (byte *)xmalloc(sizeVar16 + 1);\n          intVar10 = 0;\n          boolVar5 = false;\n          boolVar3 = false;\n          longVar24 = 0;\n          longPtr = (long *)0x0;\n          boolVar4 = false;\n          ptrByte2 = bytePtr;\n          do {\n            while (((&_sch_istable)[(ulong)*ptrByte2 * 2] & 0x40) != 0) {\n              ptrByte2 = ptrByte2 + 1;\n            }\n            if ((intVar10 == 0) || (param2Ptr = longPtr + longVar24, intVar10 + -1 <= (int)longVar24)) {\n              if (longPtr == (long *)0x0) {\n                intVar10 = 8;\n                longPtr = (long *)xmalloc(0x40);\n                param2Ptr = longPtr + longVar24;\n                *param2Ptr = 0;\n              }\n              else {\n                intVar10 = intVar10 * 2;\n                longPtr = (long *)xrealloc(longPtr,(long)intVar10 << 3);\n                param2Ptr = longPtr + longVar24;\n                *param2Ptr = 0;\n              }\n            }\n            byteVar7 = *ptrByte2;\n            ptrByte3 = bytePtr;\n            while (byteVar7 != 0) {\n              while( true ) {\n                if ((((&_sch_istable)[(ulong)byteVar7 * 2] & 0x40) != 0) &&\n                   (!(bool)(boolVar5 | boolVar4 | boolVar3))) {\n                  boolVar4 = false;\n                  boolVar5 = false;\n                  boolVar3 = false;\n                  goto LAB_001058e0;\n                }\n                if (!boolVar4) break;\n                ptrByte2 = ptrByte2 + 1;\n                *ptrByte3 = byteVar7;\n                ptrByte3 = ptrByte3 + 1;\n                boolVar4 = false;\n                byteVar7 = *ptrByte2;\n                if (byteVar7 == 0) goto LAB_001058e0;\n              }\n              if (byteVar7 == 0x5c) {\n                boolVar4 = true;\n              }\n              else if (boolVar3) {\n                if (byteVar7 == 0x27) {\n                  boolVar3 = false;\n                }\n                else {\nLAB_00105a55:\n                  *ptrByte3 = byteVar7;\n                  ptrByte3 = ptrByte3 + 1;\n                }\n              }\n              else if (boolVar5) {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = false;\n              }\n              else if (byteVar7 == 0x27) {\n                boolVar3 = true;\n              }\n              else {\n                if (byteVar7 != 0x22) goto LAB_00105a55;\n                boolVar5 = true;\n              }\n              ptrByte1 = ptrByte2 + 1;\n              ptrByte2 = ptrByte2 + 1;\n              byteVar7 = *ptrByte1;\n            }\nLAB_001058e0:\n            *ptrByte3 = 0;\n            longVar17 = xstrdup(bytePtr);\n            *param2Ptr = longVar17;\n            longPtr[longVar24 + 1] = 0;\n            byteVar7 = *ptrByte2;\n            byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            while ((byteVar2 & 0x40) != 0) {\n              byteVar7 = ptrByte2[1];\n              ptrByte2 = ptrByte2 + 1;\n              byteVar2 = (&_sch_istable)[(ulong)byteVar7 * 2];\n            }\n            longVar24 = longVar24 + 1;\n          } while (byteVar7 != 0);\n          free(bytePtr);\n          param2Ptr = param2;\n          if (argv == param2) goto LAB_00105c79;\n          goto LAB_0010597d;\n        }\nLAB_00105c5c:\n        longPtr = (long *)xmalloc(8);\n        *longPtr = 0;\n        if (argv == param2) {\nLAB_00105c79:\n          if (*param2 == 0) {\n            intVar10 = 0;\n          }\n          else {\n            longVar24 = 1;\n            do {\n              intVar10 = (int)longVar24;\n              param2Ptr = param2 + longVar24;\n              longVar24 = longVar24 + 1;\n            } while (*param2Ptr != 0);\n          }\n          longVar17 = 0;\n          param2Ptr = (long *)xmalloc((long)(intVar10 + 1) << 3);\n          longVar24 = *param2;\n          while (longVar24 != 0) {\n            uVar20 = xstrdup();\n            *(undefined8 *)((long)param2Ptr + longVar17) = uVar20;\n            longVar17 = longVar17 + 8;\n            longVar24 = *(long *)((long)param2 + longVar17);\n          }\n          *(undefined8 *)((long)param2Ptr + longVar17) = 0;\nLAB_0010597d:\n          param2 = param2Ptr;\n          if (*longPtr == 0) goto LAB_00105d50;\n          strVar = (char *)0x0;\n          do {\n            strVar = (char *)((long)strVar + 1);\n          } while (longPtr[(long)strVar] != 0);\n          local_108 = (long)strVar * 8;\n        }\n        else {\nLAB_00105d50:\n          strVar = (char *)0x0;\n          local_108 = 0;\n        }\n        free((void *)param2[(long)ptrUndefined1]);\n        param2 = (long *)xrealloc(param2,(long)((long)strVar + (long)argc + 1) * 8);\n        intVar10 = argc + -1 + (int)strVar;\n        memmove(param2 + (long)(ptrUndefined1 + (long)strVar),param2 + 1 + (long)ptrUndefined1,\n                (long)(argc - intVar12) << 3);\n        memcpy(param2 + (long)ptrUndefined1,longPtr,local_108);\n        free(longPtr);\n        free(bytePtr);\n        fclose(fileStream);\n        uintVar11 = local_110 + 1;\n        ptrUndefined1 = ptrUndefined1 + (long)strVar;\n        ptrInt = piVar27;\n        argc = intVar10;\n        if (intVar10 <= (int)uintVar11) break;\n      }\n      ptrInt = (int *)(ulong)uintVar11;\n    } while( true );\n  }\n  intVar12 = bfd_init();\n  strVar2 = \"fatal error: libbfd ABI mismatch\";\n  if (intVar12 != 0x118) goto LAB_00106085;\n  ptrUndefined1 = long_options;\n  charVar8 = bfd_set_default_target(\"x86_64-pc-linux-gnu\",\"fatal error: libbfd ABI mismatch\",5);\n  strVar = \"aABCDef:gHhjJlnopPrSst:uU:vVvWX:\";\n  ptrInt = (int *)\"x86_64-pc-linux-gnu\";\n  charVar9 = other_format._3_1_;\n  charVar6 = desc_format._3_1_;\n  uintVar14 = print_radix;\n  if (charVar8 != '\\0') {\nswitchD_00105c5a_caseD_0:\n    print_radix = uintVar14;\n    desc_format._3_1_ = charVar6;\n    other_format._3_1_ = charVar9;\n    uintVar13 = getopt_long(argc,param2,strVar);\n    piVar27 = _optarg;\n    intPtr15 = (int *)strVar;\n    charVar9 = other_format._3_1_;\n    charVar6 = desc_format._3_1_;\n    uintVar14 = print_radix;\n    switch(uintVar13) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n    case 7:\n    case 8:\n    case 9:\n    case 10:\n    case 0xb:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x18:\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x21:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x27:\n    case 0x28:\n    case 0x29:\n    case 0x2a:\n    case 0x2b:\n    case 0x2c:\n    case 0x2d:\n    case 0x2e:\n    case 0x2f:\n    case 0x30:\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x45:\n    case 0x46:\n    case 0x47:\n    case 0x49:\n    case 0x4a:\n    case 0x4b:\n    case 0x4c:\n    case 0x4d:\n    case 0x4e:\n    case 0x4f:\n    case 0x51:\n    case 0x52:\n    case 0x54:\n    case 0x59:\n    case 0x5a:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x5e:\n    case 0x5f:\n    case 0x60:\n    case 0x62:\n    case 99:\n    case 100:\n    case 0x69:\n    case 0x6b:\n    case 0x6d:\n    case 0x71:\n    case 0x77:\n    case 0x78:\n    case 0x79:\n    case 0x7a:\n    case 0x7b:\n    case 0x7c:\n    case 0x7d:\n    case 0x7e:\n    case 0x7f:\n    case 0x80:\n    case 0x81:\n    case 0x82:\n    case 0x83:\n    case 0x84:\n    case 0x85:\n    case 0x86:\n    case 0x87:\n    case 0x88:\n    case 0x89:\n    case 0x8a:\n    case 0x8b:\n    case 0x8c:\n    case 0x8d:\n    case 0x8e:\n    case 0x8f:\n    case 0x90:\n    case 0x91:\n    case 0x92:\n    case 0x93:\n    case 0x94:\n    case 0x95:\n    case 0x96:\n    case 0x97:\n    case 0x98:\n    case 0x99:\n    case 0x9a:\n    case 0x9b:\n    case 0x9c:\n    case 0x9d:\n    case 0x9e:\n    case 0x9f:\n    case 0xa0:\n    case 0xa1:\n    case 0xa2:\n    case 0xa3:\n    case 0xa4:\n    case 0xa5:\n    case 0xa6:\n    case 0xa7:\n    case 0xa8:\n    case 0xa9:\n    case 0xaa:\n    case 0xab:\n    case 0xac:\n    case 0xad:\n    case 0xae:\n    case 0xaf:\n    case 0xb0:\n    case 0xb1:\n    case 0xb2:\n    case 0xb3:\n    case 0xb4:\n    case 0xb5:\n    case 0xb6:\n    case 0xb7:\n    case 0xb8:\n    case 0xb9:\n    case 0xba:\n    case 0xbb:\n    case 0xbc:\n    case 0xbd:\n    case 0xbe:\n    case 0xbf:\n    case 0xc0:\n    case 0xc1:\n    case 0xc2:\n    case 0xc3:\n    case 0xc4:\n    case 0xc5:\n    case 0xc6:\n    case 199:\n      usage(_stderr,1);\n      piVar27 = ptrInt;\nLAB_001061d5:\n      intVar12 = strcmp((char *)piVar27,\"l\");\n      if (intVar12 == 0) goto LAB_001061a3;\n      intVar12 = strcmp((char *)piVar27,\"escape\");\n      ptrInt = piVar27;\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)piVar27,\"e\"), intVar12 == 0)) {\n        unicode_display = 2;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)piVar27,\"invalid\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)piVar27,\"i\"), intVar12 == 0)) {\n        unicode_display = 5;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)piVar27,\"hex\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)piVar27,\"x\"), intVar12 == 0)) {\n        unicode_display = 3;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      intVar12 = strcmp((char *)piVar27,\"highlight\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)piVar27,\"h\"), intVar12 == 0)) {\n        unicode_display = 4;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n        goto switchD_00105c5a_caseD_0;\n      }\n      strVar2 = \"invalid argument to -U/--unicode: %s\";\n      break;\n    case 0x41:\n    case 0x6f:\n      filename_per_symbol = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x42:\n      set_output_format(&DAT_00107033);\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x43:\n      goto switchD_00105c5a_caseD_43;\n    case 0x44:\n      dynamic = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x48:\n    case 0x68:\n      usage(_stdout,0);\nswitchD_00105c5a_caseD_43:\n      ptrInt = (int *)&optarg;\n      do_demangle = 1;\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      if (_optarg != (int *)0x0) {\n        intVar12 = cplus_demangle_name_to_style();\n        intPtr15 = _optarg;\n        if (intVar12 == 0) {\n          uVar20 = dcgettext(0,\"unknown demangling style `%s\\'\",5);\n          fatal(uVar20,intPtr15);\nswitchD_00105c5a_caseD_cc:\n          demangle_flags = demangle_flags | 0x40000;\n          strVar = (char *)intPtr15;\n          charVar9 = other_format._3_1_;\n          charVar6 = desc_format._3_1_;\n          uintVar14 = print_radix;\n        }\n        else {\n          cplus_demangle_set_style();\n          charVar9 = other_format._3_1_;\n          charVar6 = desc_format._3_1_;\n          uintVar14 = print_radix;\n        }\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x50:\n      set_output_format(\"posix\");\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x53:\n      print_size = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x55:\n      defined_only = 1;\n      undefined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x56:\n      goto switchD_00105c5a_caseD_56;\n    case 0x57:\n      non_weak = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x58:\n      intVar12 = strcmp((char *)_optarg,\"32_64\");\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      if (intVar12 != 0) {\n        strVar2 = \"Only -X 32_64 is supported\";\nLAB_00106085:\n        uVar20 = dcgettext(0,strVar2,5);\n        fatal(uVar20);\nswitchD_00105c5a_caseD_56:\n        show_version = 1;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0x61:\n      print_debug_syms = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x66:\n      set_output_format(_optarg);\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x67:\n      external_only = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6a:\n      set_output_format(\"just-symbols\");\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6c:\n      line_numbers = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x6e:\n    case 0x76:\n      sort_numerically = 1;\n      no_sort = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x70:\n      no_sort = 1;\n      sort_numerically = 0;\n      sort_by_size = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0x72:\n      reverse_sort = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x73:\n      print_armap = 1;\n      goto switchD_00105c5a_caseD_0;\n    case 0x74:\n      charVar9 = *(char *)_optarg;\n      ptrInt = piVar27;\n      charVar6 = charVar9;\n      uintVar14 = 10;\n      if (charVar9 == 'd') goto switchD_00105c5a_caseD_0;\n      if ('c' < charVar9) {\n        if (charVar9 == 'o') {\n          uintVar14 = 8;\n          goto switchD_00105c5a_caseD_0;\n        }\n        if (charVar9 == 'x') {\n          uintVar14 = 0x10;\n          goto switchD_00105c5a_caseD_0;\n        }\n      }\n      strVar2 = \"%s: invalid radix\";\n      break;\n    case 0x75:\n      undefined_only = 1;\n      defined_only = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 200:\n      target = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xc9:\n      bfd_plugin_set_plugin(_optarg);\n      charVar9 = other_format._3_1_;\n      charVar6 = desc_format._3_1_;\n      uintVar14 = print_radix;\n      goto switchD_00105c5a_caseD_0;\n    case 0xca:\n      sort_by_size = 1;\n      no_sort = 0;\n      sort_numerically = 0;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcb:\n      demangle_flags = demangle_flags & 0xfffbffff;\n      goto switchD_00105c5a_caseD_0;\n    case 0xcc:\n      goto switchD_00105c5a_caseD_cc;\n    case 0xcd:\n      ifunc_type_chars = _optarg;\n      goto switchD_00105c5a_caseD_0;\n    case 0xce:\n      intVar12 = strcmp((char *)_optarg,\"default\");\n      if ((intVar12 == 0) || (intVar12 = strcmp((char *)piVar27,\"d\"), intVar12 == 0)) {\n        unicode_display = 0;\n        ptrInt = piVar27;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n      }\n      else {\n        intVar12 = strcmp((char *)piVar27,\"locale\");\n        if (intVar12 != 0) goto LAB_001061d5;\nLAB_001061a3:\n        unicode_display = 1;\n        ptrInt = piVar27;\n        charVar9 = other_format._3_1_;\n        charVar6 = desc_format._3_1_;\n        uintVar14 = print_radix;\n      }\n      goto switchD_00105c5a_caseD_0;\n    case 0xcf:\n      goto switchD_00105c5a_caseD_cf;\n    default:\n      goto code_r0x00105b40;\n    }\n    uVar20 = dcgettext(0,strVar2,5);\n    fatal(uVar20,piVar27);\nLAB_00105f13:\n    longVar24 = *param2;\n    strVar2 = \"%s: error: @-file refers to a directory\\n\";\nLAB_00105f1d:\n    fprintf(_stderr,strVar2,longVar24);\n    xexit(1);\n    goto LAB_00105f38;\n  }\n  uintVar14 = bfd_get_error();\n  uVar20 = bfd_errmsg(uintVar14);\n  uVar21 = dcgettext(0,\"can\\'t set BFD default target to `%s\\': %s\",5);\n  fatal(uVar21,\"x86_64-pc-linux-gnu\",uVar20);\n  goto LAB_0010613c;\nLAB_001057c0:\n  byteVar7 = ptrByte2[1];\n  ptrByte2 = ptrByte2 + 1;\n  if (byteVar7 == 0) goto LAB_00105c5c;\n  goto LAB_001057d0;\nswitchD_00105c5a_caseD_cf:\n  quiet = 1;\n  goto switchD_00105c5a_caseD_0;\ncode_r0x00105b40:\n  ptrUndefined1 = (undefined1 *)(ulong)show_version;\n  if (show_version != 0) {\n    printf(\"GNU %s %s\\n\",&DAT_001070c6,\"(GNU Binutils for Debian) 2.40\");\n    strVar = (char *)dcgettext(0,\"Copyright (C) 2023 Free Software Foundation, Inc.\\n\",5);\n    printf(strVar);\n    strVar = (char *)dcgettext(0,\n                                \"This program is free software; you may redistribute it under the terms of\\nthe GNU General Public License version 3 or (at your option) any later version.\\nThis program has absolutely no warranty.\\n\"\n                                ,5);\n    printf(strVar);\n                    \n    exit(0);\n  }\n  if ((sort_by_size != 0) && (undefined_only != 0)) {\n    uVar20 = dcgettext(0,\"Using the --size-sort and --undefined-only options together\",5);\n    non_fatal(uVar20);\n    uVar20 = dcgettext(0,\"will produce no output, since undefined symbols have no size.\",5);\n    non_fatal(uVar20);\n    return ptrUndefined1;\n  }\n  strVar = &optind;\n  if (_optind != argc) {\n    if (1 < argc - _optind) {\nLAB_00105f38:\n      filename_per_file = 1;\n    }\n    while( true ) {\n      intVar12 = *(int *)strVar;\n      if (argc <= intVar12) break;\n      longVar24 = param2[intVar12];\n      *(int *)strVar = intVar12 + 1;\n      charVar9 = display_file(longVar24);\n      if (charVar9 != '\\0') {\n        intVar12 = *(int *)strVar;\n        if (argc <= intVar12) break;\n        longVar24 = param2[intVar12];\n        *(int *)strVar = intVar12 + 1;\n        charVar9 = display_file(longVar24);\n        if (charVar9 != '\\0') {\n          intVar12 = *(int *)strVar;\n          while( true ) {\n            if (argc <= intVar12) goto LAB_00105bdd;\n            longVar24 = param2[intVar12];\n            *(int *)strVar = intVar12 + 1;\n            charVar9 = display_file(longVar24);\n            if (charVar9 == '\\0') break;\n            intVar12 = *(int *)strVar;\n          }\n        }\n      }\n      ptrUndefined1 = (undefined1 *)(ulong)((int)ptrUndefined1 + 1);\n    }\nLAB_00105bdd:\n                    \n    exit((int)ptrUndefined1);\n  }\nLAB_0010613c:\n  uintVar11 = display_file(\"a.out\");\n  return (undefined1 *)(ulong)((uintVar11 ^ 1) & 0xff);\n}\n\n",
            "called": [
                "xexit",
                "textdomain",
                "fseek",
                "bfd_init",
                "getopt_long",
                "bfd_plugin_set_plugin",
                "xmalloc_set_program_name",
                "bfd_plugin_set_program_name",
                "set_output_format",
                "cplus_demangle_set_style",
                "ferror",
                "strlen",
                "stat",
                "fatal",
                "fclose",
                "xstrdup",
                "setlocale",
                "xrealloc",
                "exit",
                "bfd_errmsg",
                "bfd_get_error",
                "fopen",
                "ftell",
                "display_file",
                "usage",
                "dcgettext",
                "free",
                "non_fatal",
                "xmalloc",
                "printf",
                "bindtextdomain",
                "memcpy",
                "fprintf",
                "bfd_set_error_program_name",
                "bfd_set_default_target",
                "fread",
                "memmove",
                "strcmp",
                "cplus_demangle_name_to_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001055f0",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "display_files_001055f0"
        },
        "FUN_0010c020": {
            "renaming": {},
            "code": "\n\n\nvoid __libc_start_main(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __libc_start_main@GLIBC_2.34 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c020",
            "calling": [
                "_start"
            ],
            "imported": false,
            "current_name": "FUN_0010c020"
        },
        "FUN_00102280": {
            "renaming": {},
            "code": "\n\n\nint stat(char *__file,stat *__buf)\n\n{\n  int iVar1;\n  \n  iVar1 = stat(__file,__buf);\n  return iVar1;\n}\n\n",
            "called": [
                "stat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102280",
            "calling": [
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_00102280"
        },
        "FUN_0010c260": {
            "renaming": {},
            "code": "\n\n\nvoid __cxa_finalize(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __cxa_finalize@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c260",
            "calling": [
                "__cxa_finalize"
            ],
            "imported": false,
            "current_name": "FUN_0010c260"
        },
        "FUN_0010351b": {
            "renaming": {
                "FUN_0010351b": "print_symbol_filename_0010351b"
            },
            "code": "\nvoid print_symbol_filename_0010351b(void)\n\n{\n  if (filename_per_symbol == 0) {\n    printf(\"\\n%s:\\n\");\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010351b",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "print_symbol_filename_0010351b"
        },
        "FUN_00102440": {
            "renaming": {},
            "code": "\nvoid __cxa_finalize(void)\n\n{\n  __cxa_finalize();\n  return;\n}\n\n",
            "called": [
                "__cxa_finalize"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102440",
            "calling": [
                "__do_global_dtors_aux"
            ],
            "imported": false,
            "current_name": "FUN_00102440"
        },
        "FUN_00103b2b": {
            "renaming": {
                "FUN_00103b2b": "print_symbol_info_00103b2b",
                "param_1": "symbolName",
                "param_2": "symbolDetails"
            },
            "code": "\nvoid printSymbolInfo_00103b2b(undefined8 symbolName,undefined8 symbolDetails)\n\n{\n  if (filename_per_symbol == 0) {\n    printf(\"%s[%s]:\\n\",symbolName,symbolDetails);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b2b",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_00103b2b"
        },
        "FUN_00104740": {
            "renaming": {
                "FUN_00104740": "format_and_print_string_00104740",
                "param_1": "formatString",
                "param_2": "symbolData",
                "param_3": "symbolName",
                "param_4": "binaryData",
                "puVar1": "ptrSymbol",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intValue",
                "sVar5": "size",
                "pcVar6": "atSymbol",
                "puVar7": "outputBuffer",
                "pcVar8": "schTable",
                "__ptr": "demangledSymbol",
                "uVar9": "bufferSize",
                "uVar10": "displayChar",
                "puVar11": "displayOption",
                "puVar12": "demangledResult",
                "__s": "tempString",
                "__s_00": "outputString",
                "lVar13": "loopVar",
                "uVar14": "unicodeOption",
                "bVar15": "loopVarFlag",
                "acStack_39": "tempStackArray"
            },
            "code": "\nvoid formatAndPrintString_00104740(char *formatString,long *symbolData,undefined8 *symbolName,long binaryData)\n\n{\n  undefined8 *ptrSymbol;\n  byte byte1;\n  byte byte2;\n  int intValue;\n  size_t size;\n  char *atSymbol;\n  undefined8 *outputBuffer;\n  char *schTable;\n  undefined8 *demangledSymbol;\n  ulong bufferSize;\n  undefined8 displayChar;\n  undefined *displayOption;\n  undefined8 *demangledResult;\n  char *tempString;\n  undefined8 *outputString;\n  long loopVar;\n  uint unicodeOption;\n  byte loopVarFlag;\n  char tempStackArray [9];\n  \n  loopVarFlag = 0;\n  if (symbolName == (undefined8 *)0x0) {\n    symbolName = *(undefined8 **)(*symbolData + 0x10);\n    if (with_symbol_versions == 0) {\n      print_formatted_string_00102739();\n      return;\n    }\nLAB_00104775:\n    demangledResult = symbolName;\n    if (do_demangle == 0) {\n      atSymbol = (char *)0x0;\n      if (unicode_display == 0) {\nLAB_00104794:\n        demangledResult = symbolName;\n        demangledSymbol = (undefined8 *)0x0;\n      }\n      else {\n        demangledSymbol = (undefined8 *)0x0;\n        if (symbolName != (undefined8 *)0x0) goto LAB_0010269d;\n        demangledResult = (undefined8 *)0x1073a6;\n      }\n    }\n    else {\n      atSymbol = (char *)0x0;\nLAB_0010482b:\n      if ((*(char *)demangledResult == '\\0') ||\n         (symbolName = (undefined8 *)bfd_demangle(binaryData,demangledResult,demangle_flags),\n         symbolName == (undefined8 *)0x0)) {\n        symbolName = demangledResult;\n        if (unicode_display != 0) goto LAB_00102698;\n        demangledSymbol = (undefined8 *)0x0;\n      }\n      else {\n        demangledResult = symbolName;\n        demangledSymbol = symbolName;\n        if (unicode_display != 0) goto LAB_0010269d;\n      }\n    }\n  }\n  else {\n    demangledResult = symbolName;\n    if (with_symbol_versions == 0) {\n      if (*(int *)(*(long *)(binaryData + 8) + 8) != 5) goto LAB_00104775;\n      atSymbol = strchr((char *)symbolName,0x40);\n      if (atSymbol == (char *)0x0) {\n        if (do_demangle == 0) {\n          if (unicode_display == 0) {\n            if (symbolData == (long *)0x0) {\n              demangledSymbol = (undefined8 *)0x0;\n              printf(formatString,symbolName);\n            }\n            else {\n              if (symbolData[2] != 0) {\n                print_formatted_output_001047d0();\n                return;\n              }\n              demangledSymbol = (undefined8 *)0x0;\n              printf(formatString,symbolName);\n            }\n            goto LAB_001047ba;\n          }\n          goto LAB_00102698;\n        }\n      }\n      else {\n        *atSymbol = '\\0';\n        if (do_demangle == 0) {\n          if (unicode_display == 0) goto LAB_00104794;\n          demangledSymbol = (undefined8 *)0x0;\n          goto LAB_0010269d;\n        }\n      }\n      goto LAB_0010482b;\n    }\n    atSymbol = (char *)0x0;\n    if (do_demangle != 0) goto LAB_0010482b;\n    if (unicode_display == 0) goto LAB_00104794;\nLAB_00102698:\n    demangledResult = symbolName;\n    demangledSymbol = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)symbolName;\n      symbolName = (undefined8 *)((long)symbolName + 1);\n      if (byte1 == 0) goto joined_r0x00104864;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) && (byte1 < 0xc0));\n    size = strlen((char *)demangledResult);\n    outputString = buffer_8;\n    if (buffer_len_9 < size * 9) {\n      free(buffer_8);\n      size = strlen((char *)demangledResult);\n      buffer_len_9 = size * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      outputString = buffer_8;\n    }\n    while( true ) {\n      outputBuffer = buffer_8;\n      byte1 = *(byte *)demangledResult;\n      ptrSymbol = (undefined8 *)((long)demangledResult + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)outputString = byte1;\n          outputString = (undefined8 *)((long)outputString + 1);\n          demangledResult = ptrSymbol;\n        }\n        else {\n          byte2 = *(byte *)((long)demangledResult + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            outputBuffer = outputString;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                unicodeOption = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                loopVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intValue = isatty(1);\n                if (intValue == 0) {\n                  byte2 = *(byte *)((long)demangledResult + 1);\n                }\n                else {\n                  *(undefined *)(outputString + 1) = 0;\n                  *outputString = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)demangledResult + 1);\n                  outputBuffer = outputString + 1;\n                }\n              case 2:\n                unicodeOption = 2;\n                sprintf((char *)outputBuffer,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)demangledResult >> 2 & 7),\n                        (ulong)((*(byte *)demangledResult & 3) << 6 | byte2 & 0x3f));\n                outputBuffer = (undefined8 *)((long)outputBuffer + 6);\n                goto LAB_00102a27;\n              default:\n                unicodeOption = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)demangledResult + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  unicodeOption = 3;\nLAB_00102a62:\n                  for (bufferSize = (ulong)unicodeOption; bufferSize != 0; bufferSize = bufferSize - 1) {\n                    *(undefined *)outputBuffer = *(undefined *)demangledResult;\n                    demangledResult = (undefined8 *)((long)demangledResult + (ulong)loopVarFlag * -2 + 1);\n                    outputBuffer = (undefined8 *)((long)outputBuffer + (ulong)loopVarFlag * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  loopVar = 3;\nLAB_00102917:\n                  displayChar = 0x7b;\n                  if (unicode_display == 3) {\n                    displayChar = 0x3c;\n                  }\n                  sprintf((char *)outputString,\"%c\",displayChar);\n                  *(undefined *)((long)outputString + 3) = 0;\n                  outputBuffer = (undefined8 *)(loopVar + (long)demangledResult);\n                  *(undefined2 *)((long)outputString + 1) = 0x7830;\n                  schTable = (char *)((long)outputString + 3);\n                  do {\n                    tempString = schTable;\n                    byte1 = *(byte *)demangledResult;\n                    demangledResult = (undefined8 *)((long)demangledResult + 1);\n                    sprintf(tempString,\"%02x\",(ulong)byte1);\n                    schTable = tempString + 2;\n                  } while (demangledResult != outputBuffer);\n                  displayChar = 0x7d;\n                  if (unicode_display == 3) {\n                    displayChar = 0x3e;\n                  }\n                  unicodeOption = (uint)loopVar;\n                  sprintf(tempString + 2,\"%c\",displayChar);\n                  outputBuffer = (undefined8 *)(tempString + 3);\n                  break;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue == 0) {\n                    byte2 = *(byte *)((long)demangledResult + 2);\n                  }\n                  else {\n                    *(undefined *)(outputString + 1) = 0;\n                    *outputString = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)demangledResult + 2);\n                    outputBuffer = outputString + 1;\n                  }\n                case 2:\n                  unicodeOption = 3;\n                  sprintf((char *)outputBuffer,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)demangledResult & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)demangledResult + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)demangledResult + 1) & 3) << 6 | byte2 & 0x3f));\n                  outputBuffer = (undefined8 *)((long)outputBuffer + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (intValue = isatty(1), intValue != 0)) {\n                    *(undefined4 *)outputBuffer = 0x6d305b1b;\n                    outputBuffer = (undefined8 *)((long)outputBuffer + 4);\n                    *(undefined *)outputBuffer = 0;\n                  }\n                  break;\n                default:\n                  unicodeOption = 3;\n                }\n              }\n              else {\n                byte2 = *(byte *)((long)demangledResult + 3);\n                if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  unicodeOption = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  loopVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intValue = isatty(1);\n                  if (intValue == 0) {\n                    byte2 = *(byte *)((long)demangledResult + 3);\n                  }\n                  else {\n                    *(undefined *)(outputString + 1) = 0;\n                    *outputString = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)demangledResult + 3);\n                    outputBuffer = outputString + 1;\n                  }\n                case 2:\n                  unicodeOption = 4;\n                  intValue = sprintf((char *)outputBuffer,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)demangledResult & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)demangledResult + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)demangledResult + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)demangledResult + 2) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)demangledResult + 2) & 3) << 6 | byte2 & 0x3f));\n                  outputBuffer = (undefined8 *)((long)outputBuffer + (long)intValue);\n                  goto LAB_00102a27;\n                default:\n                  unicodeOption = 4;\n                }\n              }\n            }\n            bufferSize = (ulong)(uint)((int)outputBuffer - (int)outputString);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)outputString = byte1;\n            unicodeOption = 1;\n            bufferSize = 1;\n          }\n          outputString = (undefined8 *)((long)outputString + bufferSize);\n          demangledResult = (undefined8 *)((long)ptrSymbol + (ulong)(unicodeOption - 1));\n        }\n      }\n      else {\n        *(undefined *)outputString = 0x5e;\n        *(byte *)((long)outputString + 1) = byte1 + 0x40;\n        outputString = (undefined8 *)((long)outputString + 2);\n        demangledResult = ptrSymbol;\n      }\n    }\n    *(undefined *)outputString = 0;\n    demangledResult = outputBuffer;\n  }\njoined_r0x00104864:\n  if ((((symbolData != (long *)0x0) && (symbolData[2] != 0)) && (with_symbol_versions != 0)) &&\n     ((schTable = (char *)(**(code **)(*(long *)(binaryData + 8) + 0x220))\n                                  (binaryData,symbolData[2],0,tempStackArray), schTable != (char *)0x0 &&\n      (*schTable != '\\0')))) {\n    displayOption = &DAT_001071e0;\n    if ((tempStackArray[0] == '\\0') && (*(long *)(symbolData[2] + 0x20) != 0x10c2a8)) {\n      displayOption = &DAT_001071df;\n    }\n    demangledSymbol = (undefined8 *)reconcat(demangledSymbol,demangledResult,displayOption,schTable,0);\n    demangledResult = demangledSymbol;\n  }\n  printf(formatString,demangledResult);\n  if (atSymbol != (char *)0x0) {\n    *atSymbol = '@';\n  }\nLAB_001047ba:\n  free(demangledSymbol);\n  return;\n}\n\n",
            "called": [
                "FUN_00102739"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104740",
            "calling": [
                "just_print_symbol_name",
                "print_symbol_info_bsd.cold",
                "display_file",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "format_and_print_string_00104740"
        },
        "FUN_00102200": {
            "renaming": {},
            "code": "\nvoid xstrdup(void)\n\n{\n  xstrdup();\n  return;\n}\n\n",
            "called": [
                "xstrdup"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102200",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102200"
        },
        "FUN_0010c0c8": {
            "renaming": {},
            "code": "\n\n\n\nchar * strchr(char *__s,int __c)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* strchr@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c0c8",
            "calling": [
                "strchr"
            ],
            "imported": false,
            "current_name": "FUN_0010c0c8"
        },
        "FUN_00102320": {
            "renaming": {},
            "code": "\nvoid bfd_demangle(void)\n\n{\n  bfd_demangle();\n  return;\n}\n\n",
            "called": [
                "bfd_demangle"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102320",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102320"
        },
        "FUN_00106400": {
            "renaming": {
                "FUN_00106400": "report_data_00106400",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "param_7": "input7",
                "param_8": "input8",
                "param_9": "reportFunc",
                "param_10": "data1",
                "param_11": "data2",
                "param_12": "data3",
                "param_13": "data4",
                "param_14": "data5",
                "in_AL": "flag",
                "local_d8": "size",
                "local_d4": "val",
                "local_d0": "pointer",
                "local_c8": "localArray",
                "local_b8": "tempArray",
                "local_b0": "data1",
                "local_a8": "data2",
                "local_a0": "data3",
                "local_98": "data4",
                "local_90": "data5",
                "local_88": "output1",
                "local_78": "output2",
                "local_68": "output3",
                "local_58": "output4",
                "local_48": "output5",
                "local_38": "output6",
                "local_28": "output7",
                "local_18": "output8"
            },
            "code": "\nvoid reportData_00106400(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4,\n                 undefined4 input5,undefined4 input6,undefined4 input7,undefined4 input8,\n                 undefined8 reportFunc,undefined8 data1,undefined8 data2,undefined8 data3,\n                 undefined8 data4,undefined8 data5)\n\n{\n  char flag;\n  undefined4 size;\n  undefined4 val;\n  undefined *pointer;\n  undefined *localArray;\n  undefined tempArray [8];\n  undefined8 data1;\n  undefined8 data2;\n  undefined8 data3;\n  undefined8 data4;\n  undefined8 data5;\n  undefined4 output1;\n  undefined4 output2;\n  undefined4 output3;\n  undefined4 output4;\n  undefined4 output5;\n  undefined4 output6;\n  undefined4 output7;\n  undefined4 output8;\n  \n  if (flag != '\\0') {\n    output1 = input1;\n    output2 = input2;\n    output3 = input3;\n    output4 = input4;\n    output5 = input5;\n    output6 = input6;\n    output7 = input7;\n    output8 = input8;\n  }\n  pointer = &stack0x00000008;\n  size = 8;\n  localArray = tempArray;\n  val = 0x30;\n  data1 = data1;\n  data2 = data2;\n  data3 = data3;\n  data4 = data4;\n  data5 = data5;\n  report(reportFunc,&size);\n  return;\n}\n\n",
            "called": [
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106400",
            "calling": [
                "display_file.cold",
                "display_rel_file",
                "FUN_00104d5b",
                "main",
                "display_file"
            ],
            "imported": false,
            "current_name": "report_data_00106400"
        },
        "FUN_0010c1e8": {
            "renaming": {},
            "code": "\n\n\n\nint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* vfprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c1e8",
            "calling": [
                "vfprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c1e8"
        },
        "FUN_00102040": {
            "renaming": {},
            "code": "\n\n\nvoid free(void *__ptr)\n\n{\n  free(__ptr);\n  return;\n}\n\n",
            "called": [
                "free"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102040",
            "calling": [
                "set_print_width",
                "list_matching_formats",
                "FUN_00104d5b",
                "main",
                "print_symbol.cold",
                "print_symbol",
                "usage",
                "FUN_001047d0",
                "print_symname.cold",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102040"
        },
        "FUN_00102160": {
            "renaming": {},
            "code": "\n\n\nsize_t strlen(char *__s)\n\n{\n  size_t sVar1;\n  \n  sVar1 = strlen(__s);\n  return sVar1;\n}\n\n",
            "called": [
                "strlen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102160",
            "calling": [
                "size_forward1",
                "main",
                "usage",
                "print_symname.cold"
            ],
            "imported": false,
            "current_name": "FUN_00102160"
        },
        "FUN_001020f0": {
            "renaming": {},
            "code": "\nvoid bfd_is_undefined_symclass(void)\n\n{\n  bfd_is_undefined_symclass();\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001020f0",
            "calling": [
                "print_symbol_info_bsd",
                "print_symbol_info_sysv",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_001020f0"
        },
        "FUN_00103533": {
            "renaming": {
                "FUN_00103533": "compare_and_sort_00103533",
                "param_1": "array1",
                "param_2": "array2",
                "uVar1": "result"
            },
            "code": "\nulong compareAndSort_00103533(undefined8 *array1,undefined8 *array2)\n\n{\n  ulong result;\n  \n  if ((ulong)array1[1] < (ulong)array2[1]) {\n    return (ulong)(-(uint)(reverse_sort == 0) | 1);\n  }\n  if ((ulong)array2[1] < (ulong)array1[1]) {\n    return (ulong)((-(uint)(reverse_sort == 0) & 2) - 1);\n  }\n                    /* WARNING: Could not recover jumptable at 0x00103571. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  result = (**(code **)(sorters + (long)reverse_sort * 8))(*array1,*array2);\n  return result;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103533",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "compare_and_sort_00103533"
        },
        "FUN_001022b0": {
            "renaming": {},
            "code": "\n\n\nint fflush(FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fflush(__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fflush"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022b0",
            "calling": [
                "list_matching_formats",
                "bfd_nonfatal",
                "report"
            ],
            "imported": false,
            "current_name": "FUN_001022b0"
        },
        "FUN_00103abc": {
            "renaming": {
                "FUN_00103abc": "FUNC_00103abc"
            },
            "code": "\nvoid FUNC_00103abc(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abc",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abc"
        },
        "FUN_0010651a": {
            "renaming": {
                "FUN_0010651a": "print_constant_value_0010651a"
            },
            "code": "\nvoid print_constant_value_0010651a(void)\n\n{\n  print_value_constprop_0();\n  return;\n}\n\n",
            "called": [
                "print_value.constprop.0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010651a",
            "calling": [
                "print_symbol_info_posix.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "print_constant_value_0010651a"
        },
        "FUN_001023d0": {
            "renaming": {},
            "code": "\nvoid bfd_check_format(void)\n\n{\n  bfd_check_format();\n  return;\n}\n\n",
            "called": [
                "bfd_check_format"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023d0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023d0"
        },
        "FUN_00103abd": {
            "renaming": {
                "FUN_00103abd": "FUNC_00103abd"
            },
            "code": "\nvoid FUNC_00103abd(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abd",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abd"
        },
        "FUN_00103aba": {
            "renaming": {
                "FUN_00103aba": "FUNC_00103aba"
            },
            "code": "\nvoid FUNC_00103aba(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103aba",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103aba"
        },
        "FUN_00103abb": {
            "renaming": {
                "FUN_00103abb": "FUNC_00103abb"
            },
            "code": "\nvoid FUNC_00103abb(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abb",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abb"
        },
        "FUN_001053c0": {
            "renaming": {
                "FUN_001053c0": "print_symbol_001053c0",
                "param_1": "symbolPointer",
                "param_2": "param",
                "iVar1": "width",
                "cVar2": "isUndefined",
                "uVar3": "value",
                "lVar4": "symbolValue"
            },
            "code": "\nvoid printSymbol_001053c0(long *symbolPointer,undefined8 param)\n\n{\n  int width;\n  char isUndefined;\n  undefined8 value;\n  long symbolValue;\n  \n  isUndefined = bfd_is_undefined_symclass((int)*(char *)(*symbolPointer + 8));\n  width = print_width;\n  if (isUndefined == '\\0') {\n    if (sort_by_size == 0) {\n      if ((print_width - 0x20U & 0xffffffdf) != 0) {\nLAB_00103603:\n        value = dcgettext(0,\"Print width has not been initialized (%d)\",5);\n        fatal(value,width);\n        goto LAB_00103623;\n      }\n      value = *(undefined8 *)*symbolPointer;\n    }\n    else {\n      if (print_size == 0) {\n        if (symbolPointer[2] == 0) {\n          symbolValue = symbolPointer[1];\n        }\n        else {\n          symbolValue = *(long *)(symbolPointer[2] + 0x38);\n        }\n        print_value_constprop_0(symbolValue);\n        if (print_size != 0) {\n          print_symbol_info_bsd_cold();\n          return;\n        }\n        goto LAB_00105423;\n      }\n      value = *(undefined8 *)*symbolPointer;\n      if ((print_width - 0x20U & 0xffffffdf) != 0) goto LAB_00103603;\n    }\n    printf(print_format_string,value);\n    if (print_size != 0) {\n      print_symbol_info_bsd_cold();\n      return;\n    }\n  }\n  else if (print_width == 0x40) {\n    printf(\"        \");\n    printf(\"        \");\n  }\n  else {\n    printf(\"        \");\n  }\nLAB_00105423:\n  printf(\" %c\",(ulong)(uint)(int)*(char *)(*symbolPointer + 8));\n  if (*(char *)(*symbolPointer + 8) != '-') {\n    print_symname(&DAT_0010712c,symbolPointer,0,param);\n    return;\n  }\nLAB_00103623:\n  putchar(0x20);\n  printf((char *)&other_format,(ulong)(uint)(int)*(char *)(*symbolPointer + 0x19));\n  putchar(0x20);\n  printf((char *)&desc_format,(ulong)(uint)(int)*(short *)(*symbolPointer + 0x1a));\n  printf(\" %5s\",*(undefined8 *)(*symbolPointer + 0x20));\n  print_symname(&DAT_0010712c,symbolPointer,0,param);\n  return;\n}\n\n",
            "called": [
                "fatal",
                "bfd_is_undefined_symclass",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_bsd.cold",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001053c0",
            "calling": [
                "print_symbol"
            ],
            "imported": false,
            "current_name": "print_symbol_001053c0"
        },
        "FUN_001064b0": {
            "renaming": {
                "FUN_001064b0": "print_symbol_info_001064b0",
                "param_1": "symbols",
                "param_2": "info",
                "cVar1": "isUndefined",
                "param_1[2]": "param_1_offset_2",
                "print_symname": "print_symbol_name",
                "bfd_is_undefined_symclass": "is_undefined_symbol_class",
                "print_value_constprop_0": "print_constant_value",
                "putchar": "print_character",
                "print_constant_value_0010651a": "print_default_value"
            },
            "code": "\nvoid print_symbol_info_001064b0(long *symbols,undefined8 info)\n\n{\n  char isUndefined;\n  \n  print_symbol_name(&DAT_00107363,symbols,0,info);\n  printf(\"%c \",(ulong)(uint)(int)*(char *)(*symbols + 8));\n  isUndefined = is_undefined_symbol_class((int)*(char *)(*symbols + 8));\n  if (isUndefined != '\\0') {\n    printf(\"        \");\n    return;\n  }\n  print_constant_value(*(undefined8 *)*symbols);\n  print_character(0x20);\n  if (param_1_offset_2 == 0) {\n    if (symbols[1] != 0) {\n      print_default_value();\n      return;\n    }\n  }\n  else if (*(long *)(param_1_offset_2 + 0x38) != 0) {\n    print_constant_value();\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "bfd_is_undefined_symclass",
                "FUN_0010651a",
                "putchar",
                "printf",
                "print_value.constprop.0",
                "print_symbol_info_posix.cold",
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001064b0",
            "calling": [],
            "imported": false,
            "current_name": "print_symbol_info_001064b0"
        },
        "FUN_00102170": {
            "renaming": {},
            "code": "\nvoid getopt_long(void)\n\n{\n  getopt_long();\n  return;\n}\n\n",
            "called": [
                "getopt_long"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102170",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102170"
        },
        "FUN_0010c030": {
            "renaming": {},
            "code": "\n\n\n\nint * __errno_location(void)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* __errno_location@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c030",
            "calling": [
                "__errno_location"
            ],
            "imported": false,
            "current_name": "FUN_0010c030"
        },
        "FUN_00102290": {
            "renaming": {},
            "code": "\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n  void *pvVar1;\n  \n  pvVar1 = memcpy(__dest,__src,__n);\n  return pvVar1;\n}\n\n",
            "called": [
                "memcpy"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102290",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102290"
        },
        "FUN_0010c150": {
            "renaming": {},
            "code": "\n\n\n\nlong ftell(FILE *__stream)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* ftell@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c150",
            "calling": [
                "ftell"
            ],
            "imported": false,
            "current_name": "FUN_0010c150"
        },
        "FUN_00103b49": {
            "renaming": {
                "FUN_00103b49": "print_symbolic_name_00103b49",
                "param_1": "symbol",
                "param_2": "address"
            },
            "code": "\nvoid print_symbolic_name_00103b49(undefined8 symbol,undefined8 address)\n\n{\n  print_symname(&DAT_0010712d,symbol,0,address);\n  return;\n}\n\n",
            "called": [
                "print_symname"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103b49",
            "calling": [],
            "imported": false,
            "current_name": "print_symbolic_name_00103b49"
        },
        "FUN_00103abe": {
            "renaming": {
                "FUN_00103abe": "FUNC_00103abe"
            },
            "code": "\nvoid FUNC_00103abe(void)\n\n{\n  return;\n}\n\n",
            "called": [],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00103abe",
            "calling": [],
            "imported": false,
            "current_name": "FUNC_00103abe"
        },
        "FUN_00103abf": {
            "renaming": {
                "FUN_00103abf": "print_symbols_00103abf",
                "param_1": "binary",
                "param_2": "moduleName",
                "pcVar1": "formatString",
                "undefined_only": "showUndefinedOnly",
                "print_width": "desiredPrintWidth"
            },
            "code": "\nvoid printSymbols_00103abf(undefined8 binary,undefined8 moduleName)\n\n{\n  char *formatString;\n  \n  formatString = \"\\n\\nUndefined symbols from %s[%s]:\\n\\n\";\n  if (showUndefinedOnly == 0) {\n    formatString = \"\\n\\nSymbols from %s[%s]:\\n\\n\";\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString,binary,moduleName);\n  formatString = \"Name                  Value   Class        Type         Size     Line  Section\\n\\n\";\n  if (desiredPrintWidth != 0x20) {\n    formatString = \n    \"Name                  Value           Class        Type         Size             Line  Section\\n\\n\"\n    ;\n  }\n  formatString = (char *)dcgettext(0,formatString,5);\n  printf(formatString);\n  return;\n}\n\n",
            "called": [
                "printf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103abf",
            "calling": [],
            "imported": false,
            "current_name": "print_symbols_00103abf"
        },
        "FUN_00102330": {
            "renaming": {},
            "code": "\nvoid xstrerror(void)\n\n{\n  xstrerror();\n  return;\n}\n\n",
            "called": [
                "xstrerror"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102330",
            "calling": [
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "FUN_00102330"
        },
        "FUN_00103bf6": {
            "renaming": {
                "FUN_00103bf6": "calculate_forward_difference_00103bf6",
                "in_RAX": "inputData",
                "iVar1": "forwardResult",
                "auVar2": "result"
            },
            "code": "\nundefined  [16] calculateForwardDifference_00103bf6(void)\n\n{\n  int forwardResult;\n  undefined8 inputData;\n  undefined result [16];\n  \n  forwardResult = non_numeric_forward();\n  result._0_4_ = -forwardResult;\n  result._4_4_ = 0;\n  result._8_8_ = inputData;\n  return result;\n}\n\n",
            "called": [
                "non_numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bf6",
            "calling": [],
            "imported": false,
            "current_name": "calculate_forward_difference_00103bf6"
        },
        "FUN_00102450": {
            "renaming": {
                "FUN_00102450": "print_supported_targets_00102450",
                "pcVar2": "targetString",
                "__ptr": "targetList",
                "unaff_RBX": "outputFile",
                "plVar3": "targetPointer",
                "in_stack_00000008": "exitCode",
                "lVar1": "currentTarget"
            },
            "code": "\nvoid printSupportedTargets_00102450(void)\n\n{\n  long currentTarget;\n  char *targetString;\n  long *targetList;\n  FILE *outputFile;\n  long *targetPointer;\n  int exitCode;\n  \n  targetString = (char *)dcgettext(0,\"Supported targets:\",5);\n  fprintf(outputFile,targetString);\n  targetList = (long *)bfd_target_list();\n  targetPointer = targetList;\n  while( true ) {\n    currentTarget = *targetPointer;\n    targetPointer = targetPointer + 1;\n    if (currentTarget == 0) break;\n    fprintf(outputFile,\" %s\");\n  }\n  fputc(10,outputFile);\n  free(targetList);\n  if (exitCode == 0) {\n    targetString = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    fprintf(outputFile,targetString,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exit(exitCode);\n}\n\n",
            "called": [
                "fprintf",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102450",
            "calling": [
                "usage"
            ],
            "imported": false,
            "current_name": "print_supported_targets_00102450"
        },
        "FUN_00102210": {
            "renaming": {},
            "code": "\n\n\nint fputc(int __c,FILE *__stream)\n\n{\n  int iVar1;\n  \n  iVar1 = fputc(__c,__stream);\n  return iVar1;\n}\n\n",
            "called": [
                "fputc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102210",
            "calling": [
                "list_matching_formats",
                "usage"
            ],
            "imported": false,
            "current_name": "FUN_00102210"
        },
        "FUN_00102050": {
            "renaming": {},
            "code": "\n\n\nint putchar(int __c)\n\n{\n  int iVar1;\n  \n  iVar1 = putchar(__c);\n  return iVar1;\n}\n\n",
            "called": [
                "putchar"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102050",
            "calling": [
                "print_symbol_info_bsd.cold",
                "print_symbol_info_posix"
            ],
            "imported": false,
            "current_name": "FUN_00102050"
        },
        "FUN_00102c19": {
            "renaming": {
                "FUN_00102c19": "print_symbols_00102c19",
                "pcVar1": "symbol_name",
                "pcVar2": "sort_function",
                "cVar3": "char_val",
                "iVar4": "cmp_result",
                "uVar5": "bool_val",
                "uVar6": "str",
                "lVar7": "tmp_size",
                "puVar8": "symbol_info",
                "lVar9": "value",
                "puVar10": "tmp_ptr",
                "__ptr": "ptr",
                "puVar11": "x",
                "puVar12": "y",
                "puVar13": "ptr1",
                "puVar14": "ptr2",
                "puVar15": "array_ptr1",
                "unaff_RBP": "base_ptr",
                "unaff_RBX": "result_ptr",
                "unaff_R12": "size_ptr_1",
                "unaff_R13": "ptr_1",
                "unaff_R14": "size_ptr_2",
                "unaff_R15": "ptr_2",
                "bVar16": "bool_var",
                "bVar17": "byte_var",
                "unaff_retaddr": "ret_addr",
                "uVar18": "ulong_var",
                "in_stack_00000008": "first_arg",
                "in_stack_00000010": "array_ptr2",
                "in_stack_00000018": "start_ptr",
                "in_stack_00000038": "8size_var",
                "in_stack_00000040": "10size_var",
                "in_stack_00000048": "array_ptr3"
            },
            "code": "\nvoid print_symbols_00102c19(void)\n\n{\n  char *symbol_name;\n  code *sort_function;\n  char char_val;\n  int cmp_result;\n  uint bool_val;\n  undefined8 str;\n  long tmp_size;\n  undefined8 *symbol_info;\n  long value;\n  undefined8 *tmp_ptr;\n  undefined8 *result_ptr;\n  undefined8 *ptr;\n  undefined8 *base_ptr;\n  undefined8 *x;\n  undefined8 *y;\n  undefined8 *in_R8;\n  undefined8 *ptr1;\n  undefined8 *in_R9;\n  undefined8 *ptr2;\n  undefined8 *size_ptr_1;\n  undefined8 *array_ptr1;\n  undefined8 *ptr_1;\n  undefined8 *size_ptr_2;\n  undefined8 *ptr_2;\n  bool bool_var;\n  byte byte_var;\n  ulong ret_addr;\n  ulong ulong_var;\n  undefined8 first_arg;\n  undefined8 *array_ptr2;\n  undefined8 *start_ptr;\n  undefined8 8size_var;\n  void *10size_var;\n  undefined8 *array_ptr3;\n  \n  byte_var = 0;\n  if (allow_special_symbols == 0) goto LAB_001049c3;\nLAB_00104a7b:\n  do {\n    if (result_ptr != ptr_1) {\n      if (size_ptr_2 == (undefined8 *)0x8) {\n        *result_ptr = *ptr_1;\n        FUN_001049c0();\n        return;\n      }\n      for (; size_ptr_2 != (undefined8 *)0x0; size_ptr_2 = (undefined8 *)((long)size_ptr_2 + -1)) {\n        *(undefined *)result_ptr = *(undefined *)ptr_1;\n        ptr_1 = (undefined8 *)((long)ptr_1 + (ulong)byte_var * -2 + 1);\n        result_ptr = (undefined8 *)((long)result_ptr + (ulong)byte_var * -2 + 1);\n      }\n      FUN_001049c0();\n      return;\n    }\n    result_ptr = (undefined8 *)((long)result_ptr + (long)size_ptr_2);\nLAB_001049c3:\n    do {\n      do {\n        ptr_1 = (undefined8 *)((long)ptr_1 + (long)size_ptr_2);\n        array_ptr1 = size_ptr_1;\n        y = base_ptr;\n        if (size_ptr_1 <= ptr_1) goto LAB_00104b15;\nLAB_001049cf:\n        symbol_info = (undefined8 *)\n                 (**(code **)(base_ptr[1] + 0x270))\n                           (base_ptr,ret_addr & 0xffffffff,ptr_1,ptr_2);\n        x = base_ptr;\n        y = ptr_1;\n        array_ptr1 = ptr_2;\n        if (symbol_info == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbol_name = (char *)symbol_info[1];\n        if (((symbol_name == (char *)0x0) || (*symbol_name != '_')) || (symbol_name[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          bool_val = (uint)(symbol_info[4] == 0x10c2a8);\nLAB_00104af9:\n          if (bool_val != 0) goto LAB_00104a2d;\n          ptr_1 = (undefined8 *)((long)ptr_1 + (long)size_ptr_2);\n          array_ptr1 = size_ptr_1;\n          y = base_ptr;\n          if (size_ptr_1 <= ptr_1) {\nLAB_00104b15:\n            result_ptr = (undefined8 *)((long)result_ptr - (long)start_ptr);\n            if (size_ptr_2 == (undefined8 *)0x8) {\n              value = y[1];\n              x = (undefined8 *)((long)result_ptr + 7);\n              if (-1 < (long)result_ptr) {\n                x = result_ptr;\n              }\n              in_R8 = (undefined8 *)(ulong)no_sort;\n              sort_function = *(code **)(value + 0x208);\n              x = (undefined8 *)((long)x >> 3);\n            }\n            else {\n              x = (undefined8 *)((long)result_ptr / (long)size_ptr_2);\n              value = y[1];\n              sort_function = *(code **)(value + 0x208);\n            }\n            base_ptr = y;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = y;\n              sort_x = (undefined8 *)(*sort_function)(y);\n              sort_y = (undefined8 *)(**(code **)(y[1] + 0x208))(y);\n              result_ptr = array_ptr3;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*y);\n                ptr = ptr_2;\n                goto LAB_00102d8e;\n              }\n              size_ptr_1 = (undefined8 *)(ulong)8size_var._4_4_;\n              if (sort_by_size != 0) {\n                ulong_var = (ulong)(dynamic != 0);\n                qsort(array_ptr3,(size_t)x,(size_t)size_ptr_1,size_forward1);\n                array_ptr1 = (undefined8 *)xmalloc((long)x << 4);\n                ptr1 = sort_x;\n                base_ptr = sort_y;\n                size_ptr_2 = (undefined8 *)((long)x * (long)size_ptr_1 + (long)result_ptr);\n                symbol_info = sort_x;\n                in_R9 = sort_y;\n                if (size_ptr_2 <= result_ptr) goto LAB_00102ec2;\n                x = (undefined8 *)\n                          (**(code **)(y[1] + 0x270))(y,ulong_var & 0xffffffff,result_ptr);\n                ptr = result_ptr;\n                in_R8 = size_ptr_1;\n                array_ptr2 = array_ptr1;\n                if (x == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(array_ptr3,(size_t)x,(size_t)size_ptr_1,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              value = y[1];\n            }\n            ptr = (undefined8 *)0x0;\n            do {\n              y = array_ptr3;\n              symbol_info = (undefined8 *)(ulong)sort_by_size;\n              size_ptr_2 = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                array_ptr1 = (undefined8 *)(**(code **)(value + 0x208))(base_ptr);\n                if (array_ptr1 == (undefined8 *)0x0) goto LAB_00102ed2;\n                result_ptr = ptr + (long)x * 2;\n                x = ptr;\n                do {\n                  if (result_ptr <= x) {\nLAB_00104c75:\n                    if (10size_var == (void *)0x0) {\n                      free(array_ptr3);\n                      free(ptr);\n                      return;\n                    }\n                    free(10size_var);\n                    free(array_ptr3);\n                    free(ptr);\n                    return;\n                  }\n                  symbol_info = array_ptr1;\n                  value = (**(code **)(base_ptr[1] + 0x270))(base_ptr,size_ptr_2,*x);\n                  if (value == 0) {\n                    bfd_fatal(*base_ptr,0);\nLAB_00102ed2:\n                    y = (undefined8 *)*base_ptr;\n                    bfd_fatal();\n                    ptr1 = in_R8;\n                    ptr2 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  y = x + 1;\n                  x = x + 2;\n                  print_symbol(base_ptr,value,*y,first_arg);\n                } while( true );\n              }\n              size_ptr_1 = (undefined8 *)(ulong)8size_var._4_4_;\n              ptr_2 = (undefined8 *)(**(code **)(value + 0x208))(base_ptr);\n              if (ptr_2 == (undefined8 *)0x0) {\n                bfd_fatal(*base_ptr);\n                y = size_ptr_1;\n                if (dynamic == 0) {\n                  value = (**(code **)(base_ptr[1] + 0x350))(base_ptr);\n                  x = array_ptr3;\n                  array_ptr1 = size_ptr_1;\n                  if (value < 1) {\n                    symbol_info = (undefined8 *)0x0;\n                    result_ptr = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    result_ptr = (undefined8 *)xmalloc();\n                    symbol_info = (undefined8 *)(**(code **)(base_ptr[1] + 0x358))(base_ptr,result_ptr);\n                    y = array_ptr1;\n                    if ((long)symbol_info < 0) {\n                      y = (undefined8 *)*base_ptr;\n                      x = (undefined8 *)bfd_fatal(y,array_ptr1);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  symbol_info = size_ptr_1;\n                  result_ptr = array_ptr3;\n                  x = (undefined8 *)0x0;\n                  array_ptr1 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                in_R8 = result_ptr;\n                value = (**(code **)(base_ptr[1] + 0x360))(base_ptr,array_ptr1,x,symbol_info);\n                size_ptr_1 = y;\n                if (0 < value) {\n                  size_ptr_1 = (undefined8 *)((long)y + value);\n                  array_ptr3 = (undefined8 *)xrealloc(array_ptr3);\n                  tmp_size = 0;\n                  do {\n                    array_ptr3[(long)((long)y + tmp_size)] =\n                         (void *)(tmp_size * 0x30 + (long)10size_var);\n                    tmp_size = tmp_size + 1;\n                  } while (value != tmp_size);\n                  array_ptr3[(long)((long)y + value)] = 0;\n                }\n                if ((dynamic == 0) && (result_ptr != (undefined8 *)0x0)) {\n                  free(result_ptr);\n                }\n                if ((*(byte *)((long)base_ptr + 0x4a) & 0x10) != 0) {\n                  result_ptr = (undefined8 *)*base_ptr;\n                  report_plugin_err = '\\0';\n                  str = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(str);\n                }\n                size_ptr_2 = (undefined8 *)(ulong)8size_var._4_4_;\n                bool_var = dynamic != 0;\n                x = (undefined8 *)(ulong)bool_var;\n                symbol_info = array_ptr3;\n                start_ptr = array_ptr3;\n                ptr_2 = (undefined8 *)(**(code **)(base_ptr[1] + 0x208))(base_ptr);\n                if (ptr_2 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                x = (undefined8 *)((long)x * (long)size_ptr_1 + (long)y);\n                result_ptr = y;\n                while( true ) {\n                  if (x <= result_ptr) goto LAB_00104c75;\n                  symbol_info = ptr_2;\n                  value = (**(code **)(base_ptr[1] + 0x270))(base_ptr,size_ptr_2,result_ptr);\n                  if (value == 0) break;\n                  result_ptr = (undefined8 *)((long)result_ptr + (long)size_ptr_1);\n                  print_symbol(base_ptr,value,0,first_arg);\n                }\n                bfd_fatal(*base_ptr,0);\n              }\n              bfd_fatal(*base_ptr);\n              y = base_ptr;\n              array_ptr1 = ptr_2;\nLAB_00102eb0:\n              bfd_fatal(*x);\nLAB_00102eb9:\n              bfd_fatal(*y);\nLAB_00102ec2:\n              x = (undefined8 *)0x0;\n              ptr = result_ptr;\n              in_R8 = size_ptr_1;\n              ptr1 = symbol_info;\n              base_ptr = in_R9;\n              array_ptr2 = array_ptr1;\nLAB_00104e35:\n              while (in_R9 = ptr1, ptr < size_ptr_2) {\n                result_ptr = (undefined8 *)((long)ptr + (long)in_R8);\n                if (result_ptr < size_ptr_2) {\n                  symbol_info = base_ptr;\n                  ptr1 = in_R8;\n                  ptr2 = in_R9;\n                  tmp_ptr = (undefined8 *)(**(code **)(y[1] + 0x270))();\n                  if (tmp_ptr == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = ptr2;\n                    in_R8 = ptr1;\n                    y = (undefined8 *)*y;\n                    tmp_ptr = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    symbol_info = (undefined8 *)x[4];\n                    if ((*(uint *)(x + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  value = x[2];\nLAB_00102ee7:\n                  if (symbol_info == (undefined8 *)tmp_ptr[4]) {\n                    value = tmp_ptr[2] - value;\n                    ptr1 = base_ptr;\n                    ptr2 = ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  value = symbol_info[8] - value;\n                  ptr1 = base_ptr;\n                  ptr2 = ptr;\n                }\n                else {\n                  symbol_info = (undefined8 *)x[4];\n                  if ((*(uint *)(x + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    value = x[2];\n                    tmp_ptr = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  tmp_ptr = (undefined8 *)0x0;\nLAB_00104e95:\n                  ptr1 = base_ptr;\n                  ptr2 = ptr;\n                  if (*(int *)(y[1] + 8) == 5) {\n                    value = x[7];\n                  }\n                  else {\n                    value = x[2];\n                    if ((*(byte *)((long)symbol_info + 0x25) & 0x10) == 0) {\n                      if (result_ptr < size_ptr_2) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                x = tmp_ptr;\n                ptr = result_ptr;\n                base_ptr = in_R9;\n                if (value != 0) {\n                  *array_ptr1 = ptr2;\n                  array_ptr1[1] = value;\n                  array_ptr1 = array_ptr1 + 2;\n                }\n              }\n              x = (undefined8 *)((long)array_ptr1 - (long)array_ptr2 >> 4);\n              qsort(array_ptr2,(size_t)x,0x10,size_forward2);\n              value = y[1];\n              result_ptr = ptr;\n              base_ptr = y;\n              ptr = array_ptr2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        cmp_result = strcmp(symbol_name + (symbol_name[2] == '_'),\"__gnu_lto_slim\");\n        array_ptr2 = symbol_info;\n        if (cmp_result == 0) {\n          if (report_plugin_err != '\\0') {\n            array_ptr2 = (undefined8 *)*base_ptr;\n            report_plugin_err = '\\0';\n            str = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(str,array_ptr2);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          bool_val = (*(uint *)(symbol_info + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(symbol_info + 3) & 0x800082) == 0) && (symbol_info[4] != 0x10c2a8)) &&\n           ((*(byte *)(symbol_info[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n          if ((symbol_info[4] != 0x10c2a8) && (symbol_info[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(symbol_info + 3) & 4) != 0);\n      if (sort_by_size != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        char_val = (**(code **)(base_ptr[1] + 0x230))(base_ptr);\n        if (char_val != '\\0') {\n          print_symbols_00102c19();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (symbol_info[4] == 0x10c2a8);\nLAB_00104cba:\n    char_val = (**(code **)(base_ptr[1] + 0x230))(base_ptr);\n    if (char_val != '\\0') {\n      print_symbols_00102c19();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  array_ptr1 = (undefined8 *)((long)size_ptr_1 * (long)size_ptr_2);\n  size_ptr_1 = (undefined8 *)((long)start_ptr + (long)array_ptr1);\n  result_ptr = start_ptr;\n  y = base_ptr;\n  if (start_ptr < size_ptr_1) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ret_addr = (ulong)bool_var;\n  ptr_1 = start_ptr;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102c19",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "print_symbols_00102c19"
        },
        "FUN_00106530": {
            "renaming": {
                "FUN_00106530": "print_error_message_00106530",
                "iVar1": "error",
                "uVar2": "errorMessage",
                "lVar3": "hasError",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106530(void)\n\n{\n  int error;\n  undefined8 errorMessage;\n  long hasError;\n  undefined8 additionalInfo;\n  \n  bfd_nonfatal();\n  hasError = 1;\n  xexit();\n  error = bfd_get_error();\n  if (error == 0) {\n    errorMessage = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorMessage = bfd_errmsg(error);\n  }\n  fflush(_stdout);\n  if (hasError != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,hasError,errorMessage,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorMessage,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "bfd_nonfatal"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106530",
            "calling": [
                "FUN_00103463",
                "non_numeric_forward.cold",
                "get_relocs",
                "size_forward1",
                "display_rel_file",
                "FUN_00104d5b",
                "print_symbol",
                "display_file",
                "numeric_forward.cold"
            ],
            "imported": false,
            "current_name": "print_error_message_00106530"
        },
        "FUN_00105560": {
            "renaming": {
                "FUN_00105560": "FUNC_00105560"
            },
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00105584) */\n/* WARNING: Removing unreachable block (ram,0x00105590) */\n\nvoid FUNC_00105560(void)\n\n{\n  return;\n}\n\n",
            "called": [
                "_ITM_registerTMCloneTable"
            ],
            "skipped": true,
            "tags": [],
            "improved": false,
            "entrypoint": "0x00105560",
            "calling": [
                "frame_dummy"
            ],
            "imported": false,
            "current_name": "FUNC_00105560"
        },
        "FUN_0010268b": {
            "renaming": {
                "FUN_0010268b": "display_string_0010268b",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "puVar6": "outputPtr",
                "pcVar7": "stringPtr",
                "uVar8": "counter",
                "uVar9": "var9",
                "puVar10": "ptr10",
                "puVar11": "ptr11",
                "unaff_RBP": "rbpValue",
                "puVar12": "bufferPtr",
                "unaff_R12": "unaffR12",
                "unaff_R13": "inputPtr",
                "lVar13": "longVar",
                "uVar14": "var14",
                "unaff_R14": "unaffR14",
                "unaff_R15": "unaffR15",
                "bVar15": "byteVar",
                "__s": "stringPtr2",
                "in_stack_00000038": "stackVar"
            },
            "code": "\nvoid displayString_0010268b(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  undefined8 *outputPtr;\n  char *stringPtr;\n  ulong counter;\n  undefined8 var9;\n  undefined *ptr10;\n  undefined8 *ptr11;\n  long rbpValue;\n  undefined8 *bufferPtr;\n  undefined *unaffR12;\n  undefined8 *inputPtr;\n  long longVar;\n  uint var14;\n  char *unaffR14;\n  long unaffR15;\n  byte byteVar;\n  char *stringPtr2;\n  undefined8 stackVar;\n  \n  byteVar = 0;\n  bufferPtr = inputPtr;\n  if (unicode_display != 0) {\n    do {\n      byte1 = *(byte *)bufferPtr;\n      if (byte1 == 0) goto LAB_0010485e;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (bufferPtr = (undefined8 *)((long)bufferPtr + 1), byte1 < 0xc0));\n    size = strlen((char *)inputPtr);\n    bufferPtr = buffer_8;\n    ptr11 = inputPtr;\n    if (buffer_len_9 < size * 9) {\n      free(buffer_8);\n      size = strlen((char *)inputPtr);\n      buffer_len_9 = size * 9;\n      buffer_8 = (undefined8 *)xmalloc(buffer_len_9 + 1);\n      bufferPtr = buffer_8;\n    }\n    while( true ) {\n      inputPtr = buffer_8;\n      byte1 = *(byte *)ptr11;\n      ptr1 = (undefined8 *)((long)ptr11 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (unicode_display == 0)) {\n          *(byte *)bufferPtr = byte1;\n          bufferPtr = (undefined8 *)((long)bufferPtr + 1);\n          ptr11 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr11 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            outputPtr = bufferPtr;\n            if ((byte1 & 0x20) == 0) {\n              switch(unicode_display) {\n              case 1:\n                var14 = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)ptr11 + 1);\n                }\n                else {\n                  *(undefined *)(bufferPtr + 1) = 0;\n                  *bufferPtr = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr11 + 1);\n                  outputPtr = bufferPtr + 1;\n                }\n              case 2:\n                var14 = 2;\n                sprintf((char *)outputPtr,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr11 >> 2 & 7),\n                        (ulong)((*(byte *)ptr11 & 3) << 6 | byte2 & 0x3f));\n                outputPtr = (undefined8 *)((long)outputPtr + 6);\n                goto LAB_00102a27;\n              default:\n                var14 = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr11 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(unicode_display) {\n                case 1:\n                  var14 = 3;\nLAB_00102a62:\n                  for (counter = (ulong)var14; counter != 0; counter = counter - 1) {\n                    *(undefined *)outputPtr = *(undefined *)ptr11;\n                    ptr11 = (undefined8 *)((long)ptr11 + (ulong)byteVar * -2 + 1);\n                    outputPtr = (undefined8 *)((long)outputPtr + (ulong)byteVar * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar = 3;\nLAB_00102917:\n                  var9 = 0x7b;\n                  if (unicode_display == 3) {\n                    var9 = 0x3c;\n                  }\n                  sprintf((char *)bufferPtr,\"%c\",var9);\n                  *(undefined *)((long)bufferPtr + 3) = 0;\n                  outputPtr = (undefined8 *)(longVar + (long)ptr11);\n                  *(undefined2 *)((long)bufferPtr + 1) = 0x7830;\n                  stringPtr = (char *)((long)bufferPtr + 3);\n                  do {\n                    stringPtr2 = stringPtr;\n                    byte1 = *(byte *)ptr11;\n                    ptr11 = (undefined8 *)((long)ptr11 + 1);\n                    sprintf(stringPtr2,\"%02x\",(ulong)byte1);\n                    stringPtr = stringPtr2 + 2;\n                  } while (ptr11 != outputPtr);\n                  var9 = 0x7d;\n                  if (unicode_display == 3) {\n                    var9 = 0x3e;\n                  }\n                  var14 = (uint)longVar;\n                  sprintf(stringPtr2 + 2,\"%c\",var9);\n                  outputPtr = (undefined8 *)(stringPtr2 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr11 + 2);\n                  }\n                  else {\n                    *(undefined *)(bufferPtr + 1) = 0;\n                    *bufferPtr = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr11 + 2);\n                    outputPtr = bufferPtr + 1;\n                  }\n                case 2:\n                  var14 = 3;\n                  sprintf((char *)outputPtr,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr11 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr11 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr11 + 1) & 3) << 6 | byte2 & 0x3f));\n                  outputPtr = (undefined8 *)((long)outputPtr + 6);\nLAB_00102a27:\n                  if ((unicode_display == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)outputPtr = 0x6d305b1b;\n                    outputPtr = (undefined8 *)((long)outputPtr + 4);\n                    *(undefined *)outputPtr = 0;\n                  }\n                  break;\n                default:\n                  var14 = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr11 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(unicode_display) {\n                case 1:\n                  var14 = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(bufferPtr + 1) = 0;\n                    *bufferPtr = 0x6d37343b31335b1b;\n                    outputPtr = bufferPtr + 1;\n                  }\n                case 2:\n                  var14 = 4;\n                  intVar = sprintf((char *)outputPtr,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr11 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr11 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr11 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr11 + 2) >> 2 & 0xfU));\n                  outputPtr = (undefined8 *)((long)outputPtr + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  var14 = 4;\n                }\n              }\n            }\n            counter = (ulong)(uint)((int)outputPtr - (int)bufferPtr);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)bufferPtr = byte1;\n            var14 = 1;\n            counter = 1;\n          }\n          bufferPtr = (undefined8 *)((long)bufferPtr + counter);\n          ptr11 = (undefined8 *)((long)ptr1 + (ulong)(var14 - 1));\n        }\n      }\n      else {\n        *(undefined *)bufferPtr = 0x5e;\n        *(byte *)((long)bufferPtr + 1) = byte1 + 0x40;\n        bufferPtr = (undefined8 *)((long)bufferPtr + 2);\n        ptr11 = ptr1;\n      }\n    }\n    *(undefined *)bufferPtr = 0;\n  }\nLAB_0010485e:\n  bufferPtr = (undefined8 *)0x0;\n  if ((((rbpValue != 0) && (*(long *)(rbpValue + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((stringPtr = (char *)(**(code **)(*(long *)(unaffR15 + 8) + 0x220))\n                                  (unaffR15,*(long *)(rbpValue + 0x10),0,\n                                   (long)&stack0x00000038 + 7), stringPtr != (char *)0x0 &&\n      (*stringPtr != '\\0')))) {\n    ptr10 = &DAT_001071e0;\n    if ((stackVar._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(rbpValue + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr10 = &DAT_001071df;\n    }\n    bufferPtr = (undefined8 *)reconcat(0,inputPtr,ptr10,stringPtr,0);\n    inputPtr = bufferPtr;\n  }\n  printf(unaffR14,inputPtr);\n  if (unaffR12 != (undefined *)0x0) {\n    *unaffR12 = 0x40;\n  }\n  free(bufferPtr);\n  return;\n}\n\n",
            "called": [
                "free",
                "xmalloc",
                "isatty",
                "sprintf",
                "strlen",
                "FUN_001047d0"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010268b",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "display_string_0010268b"
        },
        "FUN_001021a0": {
            "renaming": {},
            "code": "\nvoid xrealloc(void)\n\n{\n  xrealloc();\n  return;\n}\n\n",
            "called": [
                "xrealloc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001021a0",
            "calling": [
                "FUN_00104d5b",
                "main"
            ],
            "imported": false,
            "current_name": "FUN_001021a0"
        },
        "FUN_001022c0": {
            "renaming": {},
            "code": "\n\n\nint strcoll(char *__s1,char *__s2)\n\n{\n  int iVar1;\n  \n  iVar1 = strcoll(__s1,__s2);\n  return iVar1;\n}\n\n",
            "called": [
                "strcoll"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001022c0",
            "calling": [
                "non_numeric_forward"
            ],
            "imported": false,
            "current_name": "FUN_001022c0"
        },
        "FUN_00103bec": {
            "renaming": {
                "FUN_00103bec": "calculate_negative_sum_00103bec",
                "iVar1": "numeric_result",
                "auVar2": "result_array",
                "in_RAX": "input_data"
            },
            "code": "\nundefined  [16] calculate_negative_sum_00103bec(void)\n\n{\n  int numeric_result;\n  undefined8 input_data;\n  undefined result_array [16];\n  \n  numeric_result = numeric_forward();\n  result_array._0_4_ = -numeric_result;\n  result_array._4_4_ = 0;\n  result_array._8_8_ = input_data;\n  return result_array;\n}\n\n",
            "called": [
                "numeric_forward"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103bec",
            "calling": [],
            "imported": false,
            "current_name": "calculate_negative_sum_00103bec"
        },
        "FUN_001063a0": {
            "renaming": {
                "FUN_001063a0": "print_error_message_001063a0",
                "param_1": "formatString",
                "param_2": "arguments",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName"
            },
            "code": "\n\n\nvoid printErrorMessage_001063a0(char *formatString,__gnuc_va_list arguments)\n\n{\n  fflush(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,formatString,arguments);\n  putc(10,standardError);\n  return;\n}\n\n",
            "called": [
                "vfprintf",
                "fflush",
                "fprintf",
                "putc"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001063a0",
            "calling": [
                "fatal",
                "non_fatal"
            ],
            "imported": false,
            "current_name": "print_error_message_001063a0"
        },
        "FUN_0010c208": {
            "renaming": {},
            "code": "\n\n\n\nint sprintf(char *__s,char *__format,...)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* sprintf@GLIBC_2.2.5 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c208",
            "calling": [
                "sprintf"
            ],
            "imported": false,
            "current_name": "FUN_0010c208"
        },
        "FUN_001023e0": {
            "renaming": {},
            "code": "\nvoid bfd_openr_next_archived_file(void)\n\n{\n  bfd_openr_next_archived_file();\n  return;\n}\n\n",
            "called": [
                "bfd_openr_next_archived_file"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001023e0",
            "calling": [
                "display_file"
            ],
            "imported": false,
            "current_name": "FUN_001023e0"
        },
        "FUN_00102739": {
            "renaming": {
                "FUN_00102739": "print_formatted_string_00102739",
                "puVar1": "ptr1",
                "bVar2": "byte1",
                "bVar3": "byte2",
                "iVar4": "intVar",
                "sVar5": "size",
                "pcVar6": "charPtr1",
                "puVar7": "ptr2",
                "pcVar8": "charPtr2",
                "__ptr": "ptr3",
                "uVar9": "ulongVar1",
                "uVar10": "ulongVar2",
                "puVar11": "ptr4",
                "unaff_RBP": "longVar1",
                "puVar12": "ptr5",
                "unaff_R13": "ptr6",
                "lVar13": "longVar2",
                "uVar14": "uintVar",
                "unaff_R14": "charPtr3",
                "unaff_R15": "longVar3",
                "bVar15": "byte3",
                "__s": "charPtr4",
                "in_stack_00000038": "param1",
                "do_demangle": "bool1",
                "unicode_display": "bool2",
                "buffer_8": "buffer",
                "buffer_len_9": "bufferLen"
            },
            "code": "\nvoid printFormattedString_00102739(void)\n\n{\n  undefined8 *ptr1;\n  byte byte1;\n  byte byte2;\n  int intVar;\n  size_t size;\n  char *charPtr1;\n  undefined8 *ptr2;\n  char *charPtr2;\n  undefined8 *ptr3;\n  ulong ulongVar1;\n  undefined8 ulongVar2;\n  undefined *ptr4;\n  long longVar1;\n  undefined8 *ptr5;\n  undefined8 *ptr6;\n  long longVar2;\n  uint uintVar;\n  char *charPtr3;\n  long longVar3;\n  byte byte3;\n  char *charPtr4;\n  undefined8 param1;\n  \n  byte3 = 0;\n  ptr5 = ptr6;\n  if (*(int *)(*(long *)(longVar3 + 8) + 8) != 5) {\n    if (bool1 != 0) {\n      charPtr1 = (char *)0x0;\n      goto LAB_0010482b;\n    }\n    charPtr1 = (char *)0x0;\n    if (bool2 == 0) {\nLAB_00104794:\n      ptr3 = (undefined8 *)0x0;\n    }\n    else {\n      ptr3 = (undefined8 *)0x0;\n      if (ptr6 != (undefined8 *)0x0) goto LAB_0010269d;\n      ptr3 = (undefined8 *)0x0;\n      ptr6 = (undefined8 *)0x1073a6;\n    }\n    goto joined_r0x00104799;\n  }\n  charPtr1 = strchr((char *)ptr6,0x40);\n  if (charPtr1 == (char *)0x0) {\n    if (bool1 != 0) goto LAB_0010482b;\n    if (bool2 == 0) {\n      if (longVar1 == 0) {\n        ptr3 = (undefined8 *)0x0;\n        printf(charPtr3);\n      }\n      else {\n        if (*(long *)(longVar1 + 0x10) != 0) {\n          print_formatted_output_001047d0();\n          return;\n        }\n        ptr3 = (undefined8 *)0x0;\n        printf(charPtr3);\n      }\n      goto LAB_001047ba;\n    }\nLAB_00102698:\n    ptr5 = ptr6;\n    ptr3 = (undefined8 *)0x0;\nLAB_0010269d:\n    do {\n      byte1 = *(byte *)ptr5;\n      if (byte1 == 0) goto joined_r0x00104799;\n    } while ((((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) &&\n            (ptr5 = (undefined8 *)((long)ptr5 + 1), byte1 < 0xc0));\n    size = strlen((char *)ptr6);\n    ptr5 = buffer;\n    if (bufferLen < size * 9) {\n      free(buffer);\n      size = strlen((char *)ptr6);\n      bufferLen = size * 9;\n      buffer = (undefined8 *)xmalloc(bufferLen + 1);\n      ptr5 = buffer;\n    }\n    while( true ) {\n      ptr2 = buffer;\n      byte1 = *(byte *)ptr6;\n      ptr1 = (undefined8 *)((long)ptr6 + 1);\n      if (byte1 == 0) break;\n      if (((&_sch_istable)[(ulong)byte1 * 2] & 2) == 0) {\n        if ((byte1 < 0xc0) || (bool2 == 0)) {\n          *(byte *)ptr5 = byte1;\n          ptr5 = (undefined8 *)((long)ptr5 + 1);\n          ptr6 = ptr1;\n        }\n        else {\n          byte2 = *(byte *)((long)ptr6 + 1);\n          if ((byte2 & 0xc0) == 0x80) {\n            ptr2 = ptr5;\n            if ((byte1 & 0x20) == 0) {\n              switch(bool2) {\n              case 1:\n                uintVar = 2;\n                goto LAB_00102a62;\n              case 3:\n              case 5:\n                longVar2 = 2;\n                goto LAB_00102917;\n              case 4:\n                intVar = isatty(1);\n                if (intVar == 0) {\n                  byte2 = *(byte *)((long)ptr6 + 1);\n                }\n                else {\n                  *(undefined *)(ptr5 + 1) = 0;\n                  *ptr5 = 0x6d37343b31335b1b;\n                  byte2 = *(byte *)((long)ptr6 + 1);\n                  ptr2 = ptr5 + 1;\n                }\n              case 2:\n                uintVar = 2;\n                sprintf((char *)ptr2,\"\\u%02x%02x\",(ulong)((int)(uint)*(byte *)ptr6 >> 2 & 7)\n                        ,(ulong)((*(byte *)ptr6 & 3) << 6 | byte2 & 0x3f));\n                ptr2 = (undefined8 *)((long)ptr2 + 6);\n                goto LAB_00102a27;\n              default:\n                uintVar = 2;\n              }\n            }\n            else {\n              byte2 = *(byte *)((long)ptr6 + 2);\n              if ((byte2 & 0xc0) != 0x80) goto LAB_0010285d;\n              if ((byte1 & 0x10) == 0) {\n                switch(bool2) {\n                case 1:\n                  uintVar = 3;\nLAB_00102a62:\n                  for (ulongVar1 = (ulong)uintVar; ulongVar1 != 0; ulongVar1 = ulongVar1 - 1) {\n                    *(undefined *)ptr2 = *(undefined *)ptr6;\n                    ptr6 = (undefined8 *)((long)ptr6 + (ulong)byte3 * -2 + 1);\n                    ptr2 = (undefined8 *)((long)ptr2 + (ulong)byte3 * -2 + 1);\n                  }\n                  break;\n                case 3:\n                case 5:\n                  longVar2 = 3;\nLAB_00102917:\n                  ulongVar2 = 0x7b;\n                  if (bool2 == 3) {\n                    ulongVar2 = 0x3c;\n                  }\n                  sprintf((char *)ptr5,\"%c\",ulongVar2);\n                  *(undefined *)((long)ptr5 + 3) = 0;\n                  ptr2 = (undefined8 *)(longVar2 + (long)ptr6);\n                  *(undefined2 *)((long)ptr5 + 1) = 0x7830;\n                  charPtr2 = (char *)((long)ptr5 + 3);\n                  do {\n                    charPtr4 = charPtr2;\n                    byte1 = *(byte *)ptr6;\n                    ptr6 = (undefined8 *)((long)ptr6 + 1);\n                    sprintf(charPtr4,\"%02x\",(ulong)byte1);\n                    charPtr2 = charPtr4 + 2;\n                  } while (ptr6 != ptr2);\n                  ulongVar2 = 0x7d;\n                  if (bool2 == 3) {\n                    ulongVar2 = 0x3e;\n                  }\n                  uintVar = (uint)longVar2;\n                  sprintf(charPtr4 + 2,\"%c\",ulongVar2);\n                  ptr2 = (undefined8 *)(charPtr4 + 3);\n                  break;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar == 0) {\n                    byte2 = *(byte *)((long)ptr6 + 2);\n                  }\n                  else {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    byte2 = *(byte *)((long)ptr6 + 2);\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uintVar = 3;\n                  sprintf((char *)ptr2,\"\\u%02x%02x\",\n                          (ulong)((uint)(((ulong)*(byte *)ptr6 & 0xf) << 4) |\n                                 (int)(uint)*(byte *)((long)ptr6 + 1) >> 2 & 0xfU),\n                          (ulong)((*(byte *)((long)ptr6 + 1) & 3) << 6 | byte2 & 0x3f));\n                  ptr2 = (undefined8 *)((long)ptr2 + 6);\nLAB_00102a27:\n                  if ((bool2 == 4) && (intVar = isatty(1), intVar != 0)) {\n                    *(undefined4 *)ptr2 = 0x6d305b1b;\n                    ptr2 = (undefined8 *)((long)ptr2 + 4);\n                    *(undefined *)ptr2 = 0;\n                  }\n                  break;\n                default:\n                  uintVar = 3;\n                }\n              }\n              else {\n                if ((*(byte *)((long)ptr6 + 3) & 0xc0) != 0x80) goto LAB_0010285d;\n                switch(bool2) {\n                case 1:\n                  uintVar = 4;\n                  goto LAB_00102a62;\n                case 3:\n                case 5:\n                  longVar2 = 4;\n                  goto LAB_00102917;\n                case 4:\n                  intVar = isatty(1);\n                  if (intVar != 0) {\n                    *(undefined *)(ptr5 + 1) = 0;\n                    *ptr5 = 0x6d37343b31335b1b;\n                    ptr2 = ptr5 + 1;\n                  }\n                case 2:\n                  uintVar = 4;\n                  intVar = sprintf((char *)ptr2,\"\\u%02x%02x%02x\",\n                                  (ulong)((*(byte *)ptr6 & 7) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr6 + 1) >> 2 & 0xfU),\n                                  (ulong)((*(byte *)((long)ptr6 + 1) & 3) << 6 |\n                                         (int)(uint)*(byte *)((long)ptr6 + 2) >> 2 & 0xfU));\n                  ptr2 = (undefined8 *)((long)ptr2 + (long)intVar);\n                  goto LAB_00102a27;\n                default:\n                  uintVar = 4;\n                }\n              }\n            }\n            ulongVar1 = (ulong)(uint)((int)ptr2 - (int)ptr5);\n          }\n          else {\nLAB_0010285d:\n            *(byte *)ptr5 = byte1;\n            uintVar = 1;\n            ulongVar1 = 1;\n          }\n          ptr5 = (undefined8 *)((long)ptr5 + ulongVar1);\n          ptr6 = (undefined8 *)((long)ptr1 + (ulong)(uintVar - 1));\n        }\n      }\n      else {\n        *(undefined *)ptr5 = 0x5e;\n        *(byte *)((long)ptr5 + 1) = byte1 + 0x40;\n        ptr5 = (undefined8 *)((long)ptr5 + 2);\n        ptr6 = ptr1;\n      }\n    }\n    *(undefined *)ptr5 = 0;\n    ptr6 = ptr2;\n  }\n  else {\n    *charPtr1 = '\\0';\n    if (bool1 == 0) {\n      if (bool2 == 0) goto LAB_00104794;\n      ptr3 = (undefined8 *)0x0;\n      goto LAB_0010269d;\n    }\nLAB_0010482b:\n    if ((*(char *)ptr6 == '\\0') ||\n       (ptr5 = (undefined8 *)bfd_demangle(), ptr5 == (undefined8 *)0x0)) {\n      if (bool2 != 0) goto LAB_00102698;\n      ptr3 = (undefined8 *)0x0;\n    }\n    else {\n      ptr6 = ptr5;\n      ptr3 = ptr5;\n      if (bool2 != 0) goto LAB_0010269d;\n    }\n  }\njoined_r0x00104799:\n  if ((((longVar1 != 0) && (*(long *)(longVar1 + 0x10) != 0)) && (with_symbol_versions != 0)) &&\n     ((charPtr2 = (char *)(**(code **)(*(long *)(longVar3 + 8) + 0x220))\n                                  (longVar3,*(long *)(longVar1 + 0x10),0,\n                                   (long)&stack0x00000038 + 7), charPtr2 != (char *)0x0 &&\n      (*charPtr2 != '\\0')))) {\n    ptr4 = &DAT_001071e0;\n    if ((param1._7_1_ == '\\0') &&\n       (*(long *)(*(long *)(longVar1 + 0x10) + 0x20) != 0x10c2a8)) {\n      ptr4 = &DAT_001071df;\n    }\n    ptr3 = (undefined8 *)reconcat(ptr3,ptr6,ptr4,charPtr2,0);\n    ptr6 = ptr3;\n  }\n  printf(charPtr3,ptr6);\n  if (charPtr1 != (char *)0x0) {\n    *charPtr1 = '@';\n  }\nLAB_001047ba:\n  free(ptr3);\n  return;\n}\n\n",
            "called": [
                "bfd_demangle",
                "strchr",
                "printf",
                "FUN_001047d0",
                "print_symname.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102739",
            "calling": [
                "print_symname"
            ],
            "imported": false,
            "current_name": "print_formatted_string_00102739"
        },
        "FUN_00102060": {
            "renaming": {},
            "code": "\nvoid reconcat(void)\n\n{\n  reconcat();\n  return;\n}\n\n",
            "called": [
                "reconcat"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102060",
            "calling": [
                "FUN_001047d0"
            ],
            "imported": false,
            "current_name": "FUN_00102060"
        },
        "FUN_00102180": {
            "renaming": {},
            "code": "\n\n\nchar * strchr(char *__s,int __c)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = strchr(__s,__c);\n  return pcVar1;\n}\n\n",
            "called": [
                "strchr"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102180",
            "calling": [
                "FUN_00102739"
            ],
            "imported": false,
            "current_name": "FUN_00102180"
        },
        "FUN_00105050": {
            "renaming": {
                "FUN_00105050": "compare_executable_attributes_00105050",
                "param_1": "executable_path_1",
                "param_2": "executable_path_2",
                "__s": "string_1",
                "__s_00": "string_2",
                "lVar3": "offset_1",
                "lVar10": "offset_2",
                "uVar2": "attribute_1",
                "uVar11": "attribute_2",
                "uVar12": "total_size_1",
                "uVar13": "gnu_compiled_size_1",
                "uVar14": "total_size_2",
                "uVar15": "default_executable_path",
                "unaff_R13": "executable_offset_2",
                "bVar16": "has_different_sizes"
            },
            "code": "\nulong compare_executable_attributes_00105050(undefined8 executable_path_1,undefined8 executable_path_2)\n\n{\n  char cVar1;\n  ulong attribute_1;\n  char *string_1;\n  char *string_2;\n  long offset_1;\n  uint uVar4;\n  size_t sVar5;\n  size_t sVar6;\n  char *pcVar7;\n  char *pcVar8;\n  long lVar9;\n  long offset_2;\n  ulong attribute_2;\n  ulong total_size_1;\n  ulong gnu_compiled_size_1;\n  ulong total_size_2;\n  undefined8 default_executable_path;\n  long executable_offset_2;\n  bool has_different_sizes;\n  \n  lVar9 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,executable_path_1,sort_x);\n  attribute_2 = (ulong)sort_dynamic;\n  offset_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,attribute_2,executable_path_2,sort_y);\n  if ((lVar9 != 0) && (offset_2 != 0)) {\n    offset_1 = *(long *)(offset_2 + 0x20);\n    if (*(long *)(lVar9 + 0x20) == 0x10c2a8) {\n      attribute_2 = 0xffffffff;\n      if (offset_1 == 0x10c2a8) {\nLAB_001050fa:\n        attribute_2 = non_numeric_forward(executable_path_1,executable_path_2);\n        return attribute_2;\n      }\n    }\n    else if (offset_1 == 0x10c2a8) {\n      attribute_2 = 1;\n    }\n    else {\n      gnu_compiled_size_1 = *(long *)(lVar9 + 0x10) + *(long *)(*(long *)(lVar9 + 0x20) + 0x30);\n      attribute_2 = *(long *)(offset_2 + 0x10) + *(long *)(offset_1 + 0x30);\n      if (gnu_compiled_size_1 == attribute_2) goto LAB_001050fa;\n      attribute_2 = (ulong)(-(uint)(gnu_compiled_size_1 < attribute_2) | 1);\n    }\n    return attribute_2;\n  }\n  default_executable_path = *sort_bfd;\n  bfd_fatal();\n  lVar9 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,default_executable_path,sort_x);\n  offset_2 = (**(code **)(sort_bfd[1] + 0x270))(sort_bfd,sort_dynamic,attribute_2,sort_y);\n  if ((lVar9 == 0) || (executable_offset_2 = offset_2, offset_2 == 0)) {\n    offset_2 = bfd_fatal(*sort_bfd);\n  }\n  if ((*(long *)(lVar9 + 0x20) == 0x10c2a8) || (*(long *)(offset_2 + 0x20) == 0x10c2a8)) {\n                    \n    abort();\n  }\n  gnu_compiled_size_1 = *(ulong *)(*(long *)(lVar9 + 0x20) + 0x30);\n  attribute_1 = *(ulong *)(*(long *)(offset_2 + 0x20) + 0x30);\n  total_size_2 = *(long *)(lVar9 + 0x10) + gnu_compiled_size_1;\n  total_size_1 = *(long *)(executable_offset_2 + 0x10) + attribute_1;\n  has_different_sizes = total_size_2 < total_size_1;\n  if ((total_size_2 != total_size_1) || (has_different_sizes = gnu_compiled_size_1 < attribute_1, gnu_compiled_size_1 != attribute_1)) {\n    return (ulong)(-(uint)has_different_sizes | 1);\n  }\n  string_1 = *(char **)(lVar9 + 8);\n  string_2 = *(char **)(executable_offset_2 + 8);\n  sVar5 = strlen(string_1);\n  sVar6 = strlen(string_2);\n  pcVar7 = strstr(string_1,\"gnu_compiled\");\n  if (pcVar7 == (char *)0x0) {\n    pcVar8 = strstr(string_1,\"gcc2_compiled\");\n    pcVar7 = strstr(string_2,\"gnu_compiled\");\n    if ((pcVar7 == (char *)0x0) && (pcVar7 = strstr(string_2,\"gcc2_compiled\"), pcVar7 == (char *)0x0))\n    goto joined_r0x00103157;\n    if (pcVar8 == (char *)0x0) {\n      return 1;\n    }\n  }\n  else {\n    pcVar7 = strstr(string_2,\"gnu_compiled\");\n    if (pcVar7 == (char *)0x0) {\n      pcVar8 = strstr(string_2,\"gcc2_compiled\");\njoined_r0x00103157:\n      if (pcVar8 != (char *)0x0) {\n        return 0xffffffff;\n      }\n    }\n  }\n  uVar4 = *(uint *)(executable_offset_2 + 0x18) & 0x4000;\n  if ((*(byte *)(lVar9 + 0x19) & 0x40) == 0) {\n    if ((sVar5 < 3) || (string_1[sVar5 - 2] != '.')) {\n      if (uVar4 != 0) {\n        return 1;\n      }\n      if ((sVar6 < 3) || (string_2[sVar6 - 2] != '.')) goto LAB_00103202;\n      has_different_sizes = false;\n      goto LAB_001031e7;\n    }\n    cVar1 = string_1[sVar5 - 1];\n    has_different_sizes = cVar1 == 'o' || cVar1 == 'a';\n    if (uVar4 == 0) {\n      if ((sVar6 < 3) || (string_2[sVar6 - 2] != '.')) {\n        if (cVar1 == 'o' || cVar1 == 'a') {\n          return 0xffffffff;\n        }\n        goto LAB_00103202;\n      }\n      goto LAB_001031e7;\n    }\n  }\n  else {\n    if (uVar4 != 0) goto LAB_00103202;\n    if (sVar6 < 3) {\n      return 0xffffffff;\n    }\n    if (string_2[sVar6 - 2] != '.') {\n      return 0xffffffff;\n    }\n    has_different_sizes = true;\nLAB_001031e7:\n    if ((string_2[sVar6 - 1] != 'o') && (string_2[sVar6 - 1] != 'a')) {\n      if (has_different_sizes) {\n        return 0xffffffff;\n      }\n      goto LAB_00103202;\n    }\n  }\n  if (!has_different_sizes) {\n    return 1;\n  }\nLAB_00103202:\n  attribute_2 = non_numeric_forward(default_executable_path,attribute_2);\n  return attribute_2;\n}\n\n",
            "called": [
                "non_numeric_forward",
                "numeric_forward.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00105050",
            "calling": [
                "numeric_reverse"
            ],
            "imported": false,
            "current_name": "compare_executable_attributes_00105050"
        },
        "FUN_0010c168": {
            "renaming": {},
            "code": "\n\n\n\nvoid * memcpy(void *__dest,void *__src,size_t __n)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* memcpy@GLIBC_2.14 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c168",
            "calling": [
                "memcpy"
            ],
            "imported": false,
            "current_name": "FUN_0010c168"
        },
        "FUN_001049c0": {
            "renaming": {
                "FUN_001049c0": "process_symbols_001049c0",
                "pcVar1": "symbolName",
                "pcVar2": "symbolFunction",
                "cVar3": "charVar",
                "iVar4": "intVar",
                "uVar5": "uintVar",
                "uVar6": "ulongVar",
                "lVar7": "longVar2",
                "puVar8": "pointerVar",
                "lVar9": "longVar2",
                "puVar10": "pointerVar2",
                "puVar11": "pointerVar3",
                "puVar12": "pointerVar4",
                "puVar13": "pointerVar5",
                "in_R8": "pointerVar6",
                "puVar14": "pointerVar7",
                "puVar15": "pointerVar8",
                "unaff_RBX": "pointerVar9",
                "unaff_RBP": "pointerVar10",
                "unaff_R12": "pointerVar11",
                "unaff_R13": "pointerVar12",
                "unaff_R14": "pointerVar13",
                "unaff_R15": "pointerVar14",
                "bVar16": "boolVar",
                "bVar17": "byteVar",
                "unaff_retaddr": "ulongVar2",
                "uVar18": "ulongVar3",
                "in_stack_00000008": "varInStack1",
                "in_stack_00000010": "varInStack2",
                "in_stack_00000018": "varInStack3",
                "in_stack_00000038": "varInStack4",
                "in_stack_00000040": "varInStack5",
                "in_stack_00000048": "varInStack6"
            },
            "code": "\nvoid processSymbols_001049c0(void)\n\n{\n  char *symbolName;\n  code *symbolFunction;\n  char charVar;\n  int intVar;\n  uint uintVar;\n  undefined8 ulongVar;\n  long longVar2;\n  undefined8 *pointerVar;\n  long longVar2;\n  undefined8 *pointerVar2;\n  undefined8 *pointerVar9;\n  undefined8 *__ptr;\n  undefined8 *pointerVar10;\n  undefined8 *pointerVar3;\n  undefined8 *pointerVar4;\n  undefined8 *pointerVar6;\n  undefined8 *pointerVar5;\n  undefined8 *in_R9;\n  undefined8 *pointerVar7;\n  undefined8 *pointerVar8;\n  undefined8 *pointerVar11;\n  undefined8 *pointerVar12;\n  undefined8 *pointerVar13;\n  undefined8 *pointerVar14;\n  bool boolVar;\n  byte byteVar;\n  ulong ulongVar2;\n  ulong ulongVar3;\n  undefined8 varInStack1;\n  undefined8 *varInStack2;\n  undefined8 *varInStack3;\n  undefined8 varInStack4;\n  void *varInStack5;\n  undefined8 *varInStack6;\n  \n  byteVar = 0;\n  do {\n    pointerVar9 = (undefined8 *)((long)pointerVar9 + (long)pointerVar13);\nLAB_001049c3:\n    do {\n      do {\n        pointerVar12 = (undefined8 *)((long)pointerVar12 + (long)pointerVar13);\n        pointerVar8 = pointerVar11;\n        pointerVar4 = pointerVar10;\n        if (pointerVar11 <= pointerVar12) goto LAB_00104b15;\nLAB_001049cf:\n        pointerVar = (undefined8 *)\n                 (**(code **)(pointerVar10[1] + 0x270))\n                           (pointerVar10,ulongVar2 & 0xffffffff,pointerVar12,pointerVar14);\n        pointerVar3 = pointerVar10;\n        pointerVar4 = pointerVar12;\n        pointerVar8 = pointerVar14;\n        if (pointerVar == (undefined8 *)0x0) goto LAB_00102eb0;\n        symbolName = (char *)pointerVar[1];\n        if (((symbolName == (char *)0x0) || (*symbolName != '_')) || (symbolName[1] != '_')) {\nLAB_00104a03:\n          if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n          uintVar = (uint)(pointerVar[4] == 0x10c2a8);\nLAB_00104af9:\n          if (uintVar != 0) goto LAB_00104a2d;\n          pointerVar12 = (undefined8 *)((long)pointerVar12 + (long)pointerVar13);\n          pointerVar8 = pointerVar11;\n          pointerVar4 = pointerVar10;\n          if (pointerVar11 <= pointerVar12) {\nLAB_00104b15:\n            pointerVar9 = (undefined8 *)((long)pointerVar9 - (long)varInStack3);\n            if (pointerVar13 == (undefined8 *)0x8) {\n              longVar2 = pointerVar4[1];\n              pointerVar3 = (undefined8 *)((long)pointerVar9 + 7);\n              if (-1 < (long)pointerVar9) {\n                pointerVar3 = pointerVar9;\n              }\n              pointerVar6 = (undefined8 *)(ulong)no_sort;\n              symbolFunction = *(code **)(longVar2 + 0x208);\n              pointerVar3 = (undefined8 *)((long)pointerVar3 >> 3);\n            }\n            else {\n              pointerVar3 = (undefined8 *)((long)pointerVar9 / (long)pointerVar13);\n              longVar2 = pointerVar4[1];\n              symbolFunction = *(code **)(longVar2 + 0x208);\n            }\n            pointerVar10 = pointerVar4;\n            if (no_sort == 0) {\n              sort_dynamic = dynamic != 0;\n              sort_bfd = pointerVar4;\n              sort_x = (undefined8 *)(*symbolFunction)(pointerVar4);\n              sort_y = (undefined8 *)(**(code **)(pointerVar4[1] + 0x208))(pointerVar4);\n              pointerVar9 = varInStack6;\n              if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n                bfd_fatal(*pointerVar4);\n                __ptr = pointerVar14;\n                goto LAB_00102d8e;\n              }\n              pointerVar11 = (undefined8 *)(ulong)varInStack4._4_4_;\n              if (sort_by_size != 0) {\n                ulongVar3 = (ulong)(dynamic != 0);\n                qsort(varInStack6,(size_t)pointerVar3,(size_t)pointerVar11,size_forward1);\n                pointerVar8 = (undefined8 *)xmalloc((long)pointerVar3 << 4);\n                pointerVar5 = sort_x;\n                pointerVar10 = sort_y;\n                pointerVar13 = (undefined8 *)((long)pointerVar3 * (long)pointerVar11 + (long)pointerVar9);\n                pointerVar = sort_x;\n                in_R9 = sort_y;\n                if (pointerVar13 <= pointerVar9) goto LAB_00102ec2;\n                pointerVar3 = (undefined8 *)\n                          (**(code **)(pointerVar4[1] + 0x270))(pointerVar4,ulongVar3 & 0xffffffff,pointerVar9);\n                __ptr = pointerVar9;\n                pointerVar6 = pointerVar11;\n                varInStack2 = pointerVar8;\n                if (pointerVar3 == (undefined8 *)0x0) goto LAB_00102eb9;\n                goto LAB_00104e35;\n              }\n              qsort(varInStack6,(size_t)pointerVar3,(size_t)pointerVar11,\n                    *(__compar_fn_t *)\n                     (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n              longVar2 = pointerVar4[1];\n            }\n            __ptr = (undefined8 *)0x0;\n            do {\n              pointerVar4 = varInStack6;\n              pointerVar = (undefined8 *)(ulong)sort_by_size;\n              pointerVar13 = (undefined8 *)(ulong)(dynamic != 0);\n              if (sort_by_size != 0) {\n                pointerVar8 = (undefined8 *)(**(code **)(longVar2 + 0x208))(pointerVar10);\n                if (pointerVar8 == (undefined8 *)0x0) goto LAB_00102ed2;\n                pointerVar9 = __ptr + (long)pointerVar3 * 2;\n                pointerVar3 = __ptr;\n                do {\n                  if (pointerVar9 <= pointerVar3) {\nLAB_00104c75:\n                    if (varInStack5 == (void *)0x0) {\n                      free(varInStack6);\n                      free(__ptr);\n                      return;\n                    }\n                    free(varInStack5);\n                    free(varInStack6);\n                    free(__ptr);\n                    return;\n                  }\n                  pointerVar = pointerVar8;\n                  longVar2 = (**(code **)(pointerVar10[1] + 0x270))(pointerVar10,pointerVar13,*pointerVar3);\n                  if (longVar2 == 0) {\n                    bfd_fatal(*pointerVar10,0);\nLAB_00102ed2:\n                    pointerVar4 = (undefined8 *)*pointerVar10;\n                    bfd_fatal();\n                    pointerVar5 = pointerVar6;\n                    pointerVar7 = in_R9;\n                    goto LAB_00102edb;\n                  }\n                  pointerVar4 = pointerVar3 + 1;\n                  pointerVar3 = pointerVar3 + 2;\n                  print_symbol(pointerVar10,longVar2,*pointerVar4,varInStack1);\n                } while( true );\n              }\n              pointerVar11 = (undefined8 *)(ulong)varInStack4._4_4_;\n              pointerVar14 = (undefined8 *)(**(code **)(longVar2 + 0x208))(pointerVar10);\n              if (pointerVar14 == (undefined8 *)0x0) {\n                bfd_fatal(*pointerVar10);\n                pointerVar4 = pointerVar11;\n                if (dynamic == 0) {\n                  longVar2 = (**(code **)(pointerVar10[1] + 0x350))(pointerVar10);\n                  pointerVar3 = varInStack6;\n                  pointerVar8 = pointerVar11;\n                  if (longVar2 < 1) {\n                    pointerVar = (undefined8 *)0x0;\n                    pointerVar9 = (undefined8 *)0x0;\n                  }\n                  else {\nLAB_00102d8e:\n                    pointerVar9 = (undefined8 *)xmalloc();\n                    pointerVar = (undefined8 *)(**(code **)(pointerVar10[1] + 0x358))(pointerVar10,pointerVar9);\n                    pointerVar4 = pointerVar8;\n                    if ((long)pointerVar < 0) {\n                      pointerVar4 = (undefined8 *)*pointerVar10;\n                      pointerVar3 = (undefined8 *)bfd_fatal(pointerVar4,pointerVar8);\n                      goto LAB_00102dbe;\n                    }\n                  }\n                }\n                else {\n                  pointerVar = pointerVar11;\n                  pointerVar9 = varInStack6;\n                  pointerVar3 = (undefined8 *)0x0;\n                  pointerVar8 = (undefined8 *)0x0;\n                }\n                in_R9 = &stack0x00000040;\n                pointerVar6 = pointerVar9;\n                longVar2 = (**(code **)(pointerVar10[1] + 0x360))(pointerVar10,pointerVar8,pointerVar3,pointerVar);\n                pointerVar11 = pointerVar4;\n                if (0 < longVar2) {\n                  pointerVar11 = (undefined8 *)((long)pointerVar4 + longVar2);\n                  varInStack6 = (undefined8 *)xrealloc(varInStack6);\n                  longVar2 = 0;\n                  do {\n                    varInStack6[(long)((long)pointerVar4 + longVar2)] =\n                         (void *)(longVar2 * 0x30 + (long)varInStack5);\n                    longVar2 = longVar2 + 1;\n                  } while (longVar2 != longVar2);\n                  varInStack6[(long)((long)pointerVar4 + longVar2)] = 0;\n                }\n                if ((dynamic == 0) && (pointerVar9 != (undefined8 *)0x0)) {\n                  free(pointerVar9);\n                }\n                if ((*(byte *)((long)pointerVar10 + 0x4a) & 0x10) != 0) {\n                  pointerVar9 = (undefined8 *)*pointerVar10;\n                  report_plugin_err = '\\0';\n                  ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                  non_fatal(ulongVar);\n                }\n                pointerVar13 = (undefined8 *)(ulong)varInStack4._4_4_;\n                boolVar = dynamic != 0;\n                pointerVar3 = (undefined8 *)(ulong)boolVar;\n                pointerVar = varInStack6;\n                varInStack3 = varInStack6;\n                pointerVar14 = (undefined8 *)(**(code **)(pointerVar10[1] + 0x208))(pointerVar10);\n                if (pointerVar14 != (undefined8 *)0x0) goto code_r0x00104992;\n              }\n              else {\n                pointerVar3 = (undefined8 *)((long)pointerVar3 * (long)pointerVar11 + (long)pointerVar4);\n                pointerVar9 = pointerVar4;\n                while( true ) {\n                  if (pointerVar3 <= pointerVar9) goto LAB_00104c75;\n                  pointerVar = pointerVar14;\n                  longVar2 = (**(code **)(pointerVar10[1] + 0x270))(pointerVar10,pointerVar13,pointerVar9);\n                  if (longVar2 == 0) break;\n                  pointerVar9 = (undefined8 *)((long)pointerVar9 + (long)pointerVar11);\n                  print_symbol(pointerVar10,longVar2,0,varInStack1);\n                }\n                bfd_fatal(*pointerVar10,0);\n              }\n              bfd_fatal(*pointerVar10);\n              pointerVar4 = pointerVar10;\n              pointerVar8 = pointerVar14;\nLAB_00102eb0:\n              bfd_fatal(*pointerVar3);\nLAB_00102eb9:\n              bfd_fatal(*pointerVar4);\nLAB_00102ec2:\n              pointerVar3 = (undefined8 *)0x0;\n              __ptr = pointerVar9;\n              pointerVar6 = pointerVar11;\n              pointerVar5 = pointerVar;\n              pointerVar10 = in_R9;\n              varInStack2 = pointerVar8;\nLAB_00104e35:\n              while (in_R9 = pointerVar5, __ptr < pointerVar13) {\n                pointerVar9 = (undefined8 *)((long)__ptr + (long)pointerVar6);\n                if (pointerVar9 < pointerVar13) {\n                  pointerVar = pointerVar10;\n                  pointerVar5 = pointerVar6;\n                  pointerVar7 = in_R9;\n                  pointerVar2 = (undefined8 *)(**(code **)(pointerVar4[1] + 0x270))();\n                  if (pointerVar2 == (undefined8 *)0x0) {\nLAB_00102edb:\n                    in_R9 = pointerVar7;\n                    pointerVar6 = pointerVar5;\n                    pointerVar4 = (undefined8 *)*pointerVar4;\n                    pointerVar2 = (undefined8 *)bfd_fatal();\n                  }\n                  else {\n                    pointerVar = (undefined8 *)pointerVar3[4];\n                    if ((*(uint *)(pointerVar3 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                  }\n                  longVar2 = pointerVar3[2];\nLAB_00102ee7:\n                  if (pointerVar == (undefined8 *)pointerVar2[4]) {\n                    longVar2 = pointerVar2[2] - longVar2;\n                    pointerVar5 = pointerVar10;\n                    pointerVar7 = __ptr;\n                    goto LAB_00104ea7;\n                  }\nLAB_00102dc4:\n                  longVar2 = pointerVar[8] - longVar2;\n                  pointerVar5 = pointerVar10;\n                  pointerVar7 = __ptr;\n                }\n                else {\n                  pointerVar = (undefined8 *)pointerVar3[4];\n                  if ((*(uint *)(pointerVar3 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                    longVar2 = pointerVar3[2];\n                    pointerVar2 = (undefined8 *)0x0;\n                    goto LAB_00102dc4;\n                  }\n                  pointerVar2 = (undefined8 *)0x0;\nLAB_00104e95:\n                  pointerVar5 = pointerVar10;\n                  pointerVar7 = __ptr;\n                  if (*(int *)(pointerVar4[1] + 8) == 5) {\n                    longVar2 = pointerVar3[7];\n                  }\n                  else {\n                    longVar2 = pointerVar3[2];\n                    if ((*(byte *)((long)pointerVar + 0x25) & 0x10) == 0) {\n                      if (pointerVar9 < pointerVar13) goto LAB_00102ee7;\n                      goto LAB_00102dc4;\n                    }\n                  }\n                }\nLAB_00104ea7:\n                pointerVar3 = pointerVar2;\n                __ptr = pointerVar9;\n                pointerVar10 = in_R9;\n                if (longVar2 != 0) {\n                  *pointerVar8 = pointerVar7;\n                  pointerVar8[1] = longVar2;\n                  pointerVar8 = pointerVar8 + 2;\n                }\n              }\n              pointerVar3 = (undefined8 *)((long)pointerVar8 - (long)varInStack2 >> 4);\n              qsort(varInStack2,(size_t)pointerVar3,0x10,size_forward2);\n              longVar2 = pointerVar4[1];\n              pointerVar9 = __ptr;\n              pointerVar10 = pointerVar4;\n              __ptr = varInStack2;\n            } while( true );\n          }\n          goto LAB_001049cf;\n        }\n        intVar = strcmp(symbolName + (symbolName[2] == '_'),\"__gnu_lto_slim\");\n        varInStack2 = pointerVar;\n        if (intVar == 0) {\n          if (report_plugin_err != '\\0') {\n            varInStack2 = (undefined8 *)*pointerVar10;\n            report_plugin_err = '\\0';\n            ulongVar = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n            non_fatal(ulongVar,varInStack2);\n          }\n          goto LAB_00104a03;\n        }\n        if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n        if (external_only == 0) {\n          if (non_weak == 0) goto LAB_00104a2d;\n          uintVar = (*(uint *)(pointerVar + 3) >> 7 ^ 1) & 1;\n          goto LAB_00104af9;\n        }\n        if ((((*(uint *)(pointerVar + 3) & 0x800082) == 0) && (pointerVar[4] != 0x10c2a8)) &&\n           ((*(byte *)(pointerVar[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n        if (print_debug_syms != 0) {\n          if (sort_by_size == 0) goto LAB_00104a53;\nprocess_symbols_00104d5b:\n          if ((pointerVar[4] != 0x10c2a8) && (pointerVar[4] != 0x10c3c0)) goto LAB_00104cba;\n          goto LAB_001049c3;\n        }\n      } while ((*(byte *)(pointerVar + 3) & 4) != 0);\n      if (sort_by_size != 0) goto process_symbols_00104d5b;\nLAB_00104a53:\n      in_R9 = (undefined8 *)(ulong)defined_only;\n      if (defined_only == 0) {\n        charVar = (**(code **)(pointerVar10[1] + 0x230))(pointerVar10);\n        if (charVar != '\\0') {\n          display_rel_file_cold();\n          return;\n        }\n        goto LAB_00104a7b;\n      }\n    } while (pointerVar[4] == 0x10c2a8);\nLAB_00104cba:\n    charVar = (**(code **)(pointerVar10[1] + 0x230))(pointerVar10);\n    if (charVar != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\nLAB_00104a7b:\n    if (pointerVar9 != pointerVar12) {\n      if (pointerVar13 == (undefined8 *)0x8) {\n        *pointerVar9 = *pointerVar12;\n        processSymbols_001049c0();\n        return;\n      }\n      for (; pointerVar13 != (undefined8 *)0x0; pointerVar13 = (undefined8 *)((long)pointerVar13 + -1)) {\n        *(undefined *)pointerVar9 = *(undefined *)pointerVar12;\n        pointerVar12 = (undefined8 *)((long)pointerVar12 + (ulong)byteVar * -2 + 1);\n        pointerVar9 = (undefined8 *)((long)pointerVar9 + (ulong)byteVar * -2 + 1);\n      }\n      processSymbols_001049c0();\n      return;\n    }\n  } while( true );\ncode_r0x00104992:\n  pointerVar8 = (undefined8 *)((long)pointerVar11 * (long)pointerVar13);\n  pointerVar11 = (undefined8 *)((long)varInStack3 + (long)pointerVar8);\n  pointerVar9 = varInStack3;\n  pointerVar4 = pointerVar10;\n  if (varInStack3 < pointerVar11) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  ulongVar2 = (ulong)boolVar;\n  pointerVar12 = varInStack3;\n  goto LAB_001049cf;\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x001049c0",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_001049c0"
        },
        "FUN_00102220": {
            "renaming": {},
            "code": "\nvoid bfd_get_arch_size(void)\n\n{\n  bfd_get_arch_size();\n  return;\n}\n\n",
            "called": [
                "bfd_get_arch_size"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102220",
            "calling": [
                "set_print_width"
            ],
            "imported": false,
            "current_name": "FUN_00102220"
        },
        "FUN_00103ca0": {
            "renaming": {
                "FUN_00103ca0": "print_symbol_info_00103ca0",
                "param_1": "outputFile",
                "param_2": "exitCode",
                "lVar1": "programName",
                "iVar2": "totalLength",
                "iVar3": "symbolLength",
                "pcVar4": "text",
                "pcVar9": "separator",
                "lVar5": "tempLength",
                "sVar6": "stringLength",
                "__ptr": "targetList",
                "plVar7": "target",
                "ppcVar8": "demangler",
                "local_3c": "localVar",
                "fprintf": "writeToOutput",
                "fputc": "putCharacter",
                "exit": "exitProgram",
                "bfd_target_list": "getSupportedTargets",
                "free": "releaseMemory"
            },
            "code": "\nvoid printSymbolInfo_00103ca0(FILE *outputFile,int exitCode)\n\n{\n  long programName;\n  int totalLength;\n  int symbolLength;\n  char *text;\n  long tempLength;\n  size_t stringLength;\n  long *targetList;\n  long *target;\n  char **demangler;\n  char *separator;\n  uint localVar;\n  \n  programName = program_name;\n  text = (char *)dcgettext(0,\"Usage: %s [option(s)] [file(s)]\\n\",5);\n  writeToOutput(outputFile,text,programName);\n  text = (char *)dcgettext(0,\" List symbols in [file(s)] (a.out by default).\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\" The options are:\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -a, --debug-syms       Display debugger-only symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -A, --print-file-name  Print name of the input file before every symbol\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -B                     Same as --format=bsd\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -C, --demangle[=STYLE] Decode mangled/processed symbol names\\n\",5)\n  ;\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"                           STYLE can be \",5);\n  if (*text == ' ') {\n    programName = 1;\n    do {\n      tempLength = programName;\n      programName = tempLength + 1;\n    } while (text[tempLength] == ' ');\n    localVar = (uint)tempLength;\n  }\n  else {\n    localVar = 0;\n  }\n  totalLength = writeToOutput(outputFile,\"%s\",text);\n  separator = \"\";\n  for (demangler = (char **)&libiberty_demanglers; *demangler != (char *)0x0; demangler = demangler + 3) {\n    stringLength = strlen(*demangler);\n    if (0x4a < (long)totalLength + stringLength) {\n      writeToOutput(outputFile,\"%.1s\\n\",separator);\n      separator = \"\";\n      totalLength = writeToOutput(outputFile,\"%.*s\",(ulong)localVar,text);\n    }\n    symbolLength = writeToOutput(outputFile,\"%s\\\"%s\\\"\",separator,*demangler);\n    totalLength = totalLength + symbolLength;\n    separator = \", \";\n  }\n  putCharacter(10,outputFile);\n  text = (char *)dcgettext(0,\"      --no-demangle      Do not demangle low-level symbol names\\n\",5\n                            );\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --recurse-limit    Enable a demangling recursion limit.  (default)\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --no-recurse-limit Disable a demangling recursion limit.\\n\",5)\n  ;\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -D, --dynamic          Display dynamic symbols instead of normal symbols\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -e                     (ignored)\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -f, --format=FORMAT    Use the output format FORMAT.  FORMAT can be `bsd\\',\\n                           `sysv\\', `posix\\' or \\'just-symbols\\'.\\n                           The default is `bsd\\'\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -g, --extern-only      Display only external symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"    --ifunc-chars=CHARS  Characters to use when displaying ifunc symbols\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -j, --just-symbols     Same as --format=just-symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -l, --line-numbers     Use debugging information to find a filename and\\n                           line number for each symbol\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -n, --numeric-sort     Sort symbols numerically by address\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -o                     Same as -A\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -p, --no-sort          Do not sort the symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -P, --portability      Same as --format=posix\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -r, --reverse-sort     Reverse the sense of the sort\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --plugin NAME      Load the specified plugin\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -S, --print-size       Print size of defined symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"  -s, --print-armap      Include index for symbols from archive members\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --quiet            Suppress \\\"no symbols\\\" diagnostic\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --size-sort        Sort symbols by size\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --special-syms     Include special symbols in the output\\n\",5)\n  ;\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"      --synthetic        Display synthetic symbols as well\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -t, --radix=RADIX      Use RADIX for printing symbol values\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --target=BFDNAME   Specify the target object format as BFDNAME\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -u, --undefined-only   Display only undefined symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -U, --defined-only     Display only defined symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --unicode={default|show|invalid|hex|escape|highlight}\\n                         Specify how to treat UTF-8 encoded unicode characters\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -W, --no-weak          Ignore weak symbols\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\n                             \"      --with-symbol-versions  Display version strings after symbol names\\n\"\n                             ,5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -X 32_64               (ignored)\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  @FILE                  Read options from FILE\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -h, --help             Display this information\\n\",5);\n  writeToOutput(outputFile,text);\n  text = (char *)dcgettext(0,\"  -V, --version          Display this program\\'s version number\\n\",5\n                            );\n  writeToOutput(outputFile,text);\n  programName = program_name;\n  if (program_name == 0) {\n    text = (char *)dcgettext(0,\"Supported targets:\",5);\n    writeToOutput(outputFile,text);\n  }\n  else {\n    text = (char *)dcgettext(0,\"%s: supported targets:\",5);\n    writeToOutput(outputFile,text,programName);\n  }\n  targetList = (long *)getSupportedTargets();\n  target = targetList;\n  while( true ) {\n    programName = *target;\n    target = target + 1;\n    if (programName == 0) break;\n    writeToOutput(outputFile,\" %s\");\n  }\n  putCharacter(10,outputFile);\n  releaseMemory(targetList);\n  if (exitCode == 0) {\n    text = (char *)dcgettext(0,\"Report bugs to %s.\\n\",5);\n    writeToOutput(outputFile,text,\"<https://sourceware.org/bugzilla/>\");\n  }\n                    \n  exitProgram(exitCode);\n}\n\n",
            "called": [
                "free",
                "fputc",
                "exit",
                "bfd_target_list",
                "fseek",
                "usage.cold",
                "fprintf",
                "strlen",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00103ca0",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "print_symbol_info_00103ca0"
        },
        "FUN_00102340": {
            "renaming": {},
            "code": "\n\n\nFILE * fopen(char *__filename,char *__modes)\n\n{\n  FILE *pFVar1;\n  \n  pFVar1 = fopen(__filename,__modes);\n  return pFVar1;\n}\n\n",
            "called": [
                "fopen"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102340",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102340"
        },
        "FUN_00104d5b": {
            "renaming": {
                "FUN_00104d5b": "process_symbols_00104d5b",
                "in_RCX": "symbol_info",
                "unaff_RBP": "info",
                "unaff_R12": "count",
                "unaff_R13": "symbol_table",
                "unaff_R14": "symbol_size",
                "unaff_R15": "string_table",
                "param_13": "string_table",
                "param_14": "symbol_table",
                "bVar17": "done",
                "uVar18": "dynamic"
            },
            "code": "\nvoid process_symbols_00104d5b(void)\n\n{\n  char *pcVar1;\n  code *pcVar2;\n  char cVar3;\n  int iVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  undefined8 *puVar7;\n  long lVar8;\n  long lVar9;\n  undefined8 *puVar10;\n  undefined8 *symbol_info;\n  undefined8 *unaff_RBX;\n  undefined8 *__ptr;\n  undefined8 *puVar11;\n  undefined8 *info;\n  undefined8 *puVar12;\n  undefined8 *in_R8;\n  undefined8 *puVar13;\n  undefined8 *in_R9;\n  undefined8 *puVar14;\n  undefined8 *puVar15;\n  undefined8 *count;\n  undefined8 *symbol_table;\n  undefined8 *symbol_size;\n  undefined8 *string_table;\n  bool bVar16;\n  byte done;\n  ulong unaff_retaddr;\n  ulong dynamic;\n  undefined8 param_7;\n  undefined8 *param_8;\n  undefined8 *param_9;\n  undefined8 in_stack_00000038;\n  void *string_table;\n  undefined8 *symbol_table;\n  \n  done = 0;\n  do {\n    if ((symbol_info[4] != 0x10c2a8) && (symbol_info[4] != 0x10c3c0)) goto LAB_00104cba;\nLAB_001049c3:\n    do {\n      symbol_table = (undefined8 *)((long)symbol_table + (long)symbol_size);\n      puVar15 = count;\n      puVar12 = info;\n      if (count <= symbol_table) goto LAB_00104b15;\nLAB_001049cf:\n      symbol_info = (undefined8 *)\n               (**(code **)(info[1] + 0x270))\n                         (info,unaff_retaddr & 0xffffffff,symbol_table,string_table);\n      puVar11 = info;\n      puVar12 = symbol_table;\n      puVar15 = string_table;\n      if (symbol_info == (undefined8 *)0x0) goto LAB_00102eb0;\n      pcVar1 = (char *)symbol_info[1];\n      if (((pcVar1 == (char *)0x0) || (*pcVar1 != '_')) || (pcVar1[1] != '_')) {\nLAB_00104a03:\n        if (undefined_only == 0) goto LAB_00104a11;\nLAB_00104ae2:\n        uVar5 = (uint)(symbol_info[4] == 0x10c2a8);\nLAB_00104af9:\n        if (uVar5 != 0) goto LAB_00104a2d;\n        symbol_table = (undefined8 *)((long)symbol_table + (long)symbol_size);\n        puVar15 = count;\n        puVar12 = info;\n        if (count <= symbol_table) {\nLAB_00104b15:\n          unaff_RBX = (undefined8 *)((long)unaff_RBX - (long)param_9);\n          if (symbol_size == (undefined8 *)0x8) {\n            lVar9 = puVar12[1];\n            puVar11 = (undefined8 *)((long)unaff_RBX + 7);\n            if (-1 < (long)unaff_RBX) {\n              puVar11 = unaff_RBX;\n            }\n            in_R8 = (undefined8 *)(ulong)no_sort;\n            pcVar2 = *(code **)(lVar9 + 0x208);\n            puVar11 = (undefined8 *)((long)puVar11 >> 3);\n          }\n          else {\n            puVar11 = (undefined8 *)((long)unaff_RBX / (long)symbol_size);\n            lVar9 = puVar12[1];\n            pcVar2 = *(code **)(lVar9 + 0x208);\n          }\n          info = puVar12;\n          if (no_sort == 0) {\n            sort_dynamic = dynamic != 0;\n            sort_bfd = puVar12;\n            sort_x = (undefined8 *)(*pcVar2)(puVar12);\n            sort_y = (undefined8 *)(**(code **)(puVar12[1] + 0x208))(puVar12);\n            unaff_RBX = symbol_table;\n            if ((sort_x == (undefined8 *)0x0) || (sort_y == (undefined8 *)0x0)) {\n              bfd_fatal(*puVar12);\n              __ptr = string_table;\n              goto LAB_00102d8e;\n            }\n            count = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            if (sort_by_size != 0) {\n              dynamic = (ulong)(dynamic != 0);\n              qsort(symbol_table,(size_t)puVar11,(size_t)count,size_forward1);\n              puVar15 = (undefined8 *)xmalloc((long)puVar11 << 4);\n              puVar13 = sort_x;\n              info = sort_y;\n              symbol_size = (undefined8 *)((long)puVar11 * (long)count + (long)unaff_RBX);\n              symbol_info = sort_x;\n              in_R9 = sort_y;\n              if (symbol_size <= unaff_RBX) goto LAB_00102ec2;\n              puVar11 = (undefined8 *)\n                        (**(code **)(puVar12[1] + 0x270))(puVar12,dynamic & 0xffffffff,unaff_RBX);\n              __ptr = unaff_RBX;\n              in_R8 = count;\n              param_8 = puVar15;\n              if (puVar11 == (undefined8 *)0x0) goto LAB_00102eb9;\n              goto LAB_00104e35;\n            }\n            qsort(symbol_table,(size_t)puVar11,(size_t)count,\n                  *(__compar_fn_t *)\n                   (sorters + ((long)reverse_sort + (long)sort_numerically * 2) * 8));\n            lVar9 = puVar12[1];\n          }\n          __ptr = (undefined8 *)0x0;\n          do {\n            puVar12 = symbol_table;\n            puVar7 = (undefined8 *)(ulong)sort_by_size;\n            symbol_size = (undefined8 *)(ulong)(dynamic != 0);\n            if (sort_by_size != 0) {\n              puVar15 = (undefined8 *)(**(code **)(lVar9 + 0x208))(info);\n              if (puVar15 == (undefined8 *)0x0) goto LAB_00102ed2;\n              unaff_RBX = __ptr + (long)puVar11 * 2;\n              puVar11 = __ptr;\n              do {\n                if (unaff_RBX <= puVar11) {\nLAB_00104c75:\n                  if (string_table != (void *)0x0) {\n                    free(string_table);\n                    free(symbol_table);\n                    free(__ptr);\n                    return;\n                  }\n                  free(symbol_table);\n                  free(__ptr);\n                  return;\n                }\n                puVar7 = puVar15;\n                lVar9 = (**(code **)(info[1] + 0x270))(info,symbol_size,*puVar11);\n                if (lVar9 == 0) {\n                  bfd_fatal(*info,0);\nLAB_00102ed2:\n                  puVar12 = (undefined8 *)*info;\n                  bfd_fatal();\n                  puVar13 = in_R8;\n                  puVar14 = in_R9;\n                  goto LAB_00102edb;\n                }\n                puVar12 = puVar11 + 1;\n                puVar11 = puVar11 + 2;\n                print_symbol(info,lVar9,*puVar12,param_7);\n              } while( true );\n            }\n            count = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n            string_table = (undefined8 *)(**(code **)(lVar9 + 0x208))(info);\n            if (string_table == (undefined8 *)0x0) {\n              bfd_fatal(*info);\n              puVar12 = count;\n              if (dynamic == 0) {\n                lVar9 = (**(code **)(info[1] + 0x350))(info);\n                puVar11 = symbol_table;\n                puVar15 = count;\n                if (lVar9 < 1) {\n                  puVar7 = (undefined8 *)0x0;\n                  unaff_RBX = (undefined8 *)0x0;\n                }\n                else {\nLAB_00102d8e:\n                  unaff_RBX = (undefined8 *)xmalloc();\n                  puVar7 = (undefined8 *)(**(code **)(info[1] + 0x358))(info,unaff_RBX);\n                  puVar12 = puVar15;\n                  if ((long)puVar7 < 0) {\n                    puVar12 = (undefined8 *)*info;\n                    puVar11 = (undefined8 *)bfd_fatal(puVar12,puVar15);\n                    goto LAB_00102dbe;\n                  }\n                }\n              }\n              else {\n                puVar7 = count;\n                unaff_RBX = symbol_table;\n                puVar11 = (undefined8 *)0x0;\n                puVar15 = (undefined8 *)0x0;\n              }\n              in_R9 = &stack0x00000040;\n              in_R8 = unaff_RBX;\n              lVar9 = (**(code **)(info[1] + 0x360))(info,puVar15,puVar11,puVar7);\n              count = puVar12;\n              if (0 < lVar9) {\n                count = (undefined8 *)((long)puVar12 + lVar9);\n                symbol_table = (undefined8 *)xrealloc(symbol_table);\n                lVar8 = 0;\n                do {\n                  symbol_table[(long)puVar12 + lVar8] = (void *)(lVar8 * 0x30 + (long)string_table);\n                  lVar8 = lVar8 + 1;\n                } while (lVar9 != lVar8);\n                symbol_table[(long)puVar12 + lVar9] = 0;\n              }\n              if ((dynamic == 0) && (unaff_RBX != (undefined8 *)0x0)) {\n                free(unaff_RBX);\n              }\n              if ((*(byte *)((long)info + 0x4a) & 0x10) != 0) {\n                unaff_RBX = (undefined8 *)*info;\n                report_plugin_err = '\\0';\n                uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n                non_fatal(uVar6);\n              }\n              symbol_size = (undefined8 *)(ulong)in_stack_00000038._4_4_;\n              bVar16 = dynamic != 0;\n              puVar11 = (undefined8 *)(ulong)bVar16;\n              symbol_info = symbol_table;\n              param_9 = symbol_table;\n              string_table = (undefined8 *)(**(code **)(info[1] + 0x208))(info);\n              if (string_table != (undefined8 *)0x0) goto code_r0x00104992;\n            }\n            else {\n              puVar11 = (undefined8 *)((long)puVar11 * (long)count + (long)puVar12);\n              unaff_RBX = puVar12;\n              while( true ) {\n                if (puVar11 <= unaff_RBX) goto LAB_00104c75;\n                symbol_info = string_table;\n                lVar9 = (**(code **)(info[1] + 0x270))(info,symbol_size,unaff_RBX);\n                if (lVar9 == 0) break;\n                unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)count);\n                print_symbol(info,lVar9,0,param_7);\n              }\n              bfd_fatal(*info,0);\n            }\n            bfd_fatal(*info);\n            puVar12 = info;\n            puVar15 = string_table;\nLAB_00102eb0:\n            bfd_fatal(*puVar11);\nLAB_00102eb9:\n            bfd_fatal(*puVar12);\nLAB_00102ec2:\n            puVar11 = (undefined8 *)0x0;\n            __ptr = unaff_RBX;\n            in_R8 = count;\n            puVar13 = symbol_info;\n            info = in_R9;\n            param_8 = puVar15;\nLAB_00104e35:\n            while (in_R9 = puVar13, __ptr < symbol_size) {\n              unaff_RBX = (undefined8 *)((long)__ptr + (long)in_R8);\n              if (unaff_RBX < symbol_size) {\n                puVar7 = info;\n                puVar13 = in_R8;\n                puVar14 = in_R9;\n                puVar10 = (undefined8 *)(**(code **)(puVar12[1] + 0x270))();\n                if (puVar10 == (undefined8 *)0x0) {\nLAB_00102edb:\n                  in_R9 = puVar14;\n                  in_R8 = puVar13;\n                  puVar12 = (undefined8 *)*puVar12;\n                  puVar10 = (undefined8 *)bfd_fatal();\n                }\n                else {\n                  puVar7 = (undefined8 *)puVar11[4];\n                  if ((*(uint *)(puVar11 + 3) & 0x200100) == 0) goto LAB_00104e95;\n                }\n                lVar9 = puVar11[2];\nLAB_00102ee7:\n                if (puVar7 == (undefined8 *)puVar10[4]) {\n                  lVar9 = puVar10[2] - lVar9;\n                  puVar13 = info;\n                  puVar14 = __ptr;\n                  goto LAB_00104ea7;\n                }\nLAB_00102dc4:\n                lVar9 = puVar7[8] - lVar9;\n                puVar13 = info;\n                puVar14 = __ptr;\n              }\n              else {\n                puVar7 = (undefined8 *)puVar11[4];\n                if ((*(uint *)(puVar11 + 3) & 0x200100) != 0) {\nLAB_00102dbe:\n                  lVar9 = puVar11[2];\n                  puVar10 = (undefined8 *)0x0;\n                  goto LAB_00102dc4;\n                }\n                puVar10 = (undefined8 *)0x0;\nLAB_00104e95:\n                puVar13 = info;\n                puVar14 = __ptr;\n                if (*(int *)(puVar12[1] + 8) == 5) {\n                  lVar9 = puVar11[7];\n                }\n                else {\n                  lVar9 = puVar11[2];\n                  if ((*(byte *)((long)puVar7 + 0x25) & 0x10) == 0) {\n                    if (unaff_RBX < symbol_size) goto LAB_00102ee7;\n                    goto LAB_00102dc4;\n                  }\n                }\n              }\nLAB_00104ea7:\n              puVar11 = puVar10;\n              __ptr = unaff_RBX;\n              info = in_R9;\n              if (lVar9 != 0) {\n                *puVar15 = puVar14;\n                puVar15[1] = lVar9;\n                puVar15 = puVar15 + 2;\n              }\n            }\n            puVar11 = (undefined8 *)((long)puVar15 - (long)param_8 >> 4);\n            qsort(param_8,(size_t)puVar11,0x10,size_forward2);\n            lVar9 = puVar12[1];\n            unaff_RBX = __ptr;\n            info = puVar12;\n            __ptr = param_8;\n          } while( true );\n        }\n        goto LAB_001049cf;\n      }\n      iVar4 = strcmp(pcVar1 + (pcVar1[2] == '_'),\"__gnu_lto_slim\");\n      param_8 = symbol_info;\n      if (iVar4 == 0) {\n        if (report_plugin_err != '\\0') {\n          param_8 = (undefined8 *)*info;\n          report_plugin_err = '\\0';\n          uVar6 = dcgettext(0,\"%s: plugin needed to handle lto object\",5);\n          non_fatal(uVar6,param_8);\n        }\n        goto LAB_00104a03;\n      }\n      if (undefined_only != 0) goto LAB_00104ae2;\nLAB_00104a11:\n      if (external_only == 0) {\n        if (non_weak == 0) goto LAB_00104a2d;\n        uVar5 = (*(uint *)(symbol_info + 3) >> 7 ^ 1) & 1;\n        goto LAB_00104af9;\n      }\n      if ((((*(uint *)(symbol_info + 3) & 0x800082) == 0) && (symbol_info[4] != 0x10c2a8)) &&\n         ((*(byte *)(symbol_info[4] + 0x25) & 0x10) == 0)) goto LAB_001049c3;\nLAB_00104a2d:\n    } while ((print_debug_syms == 0) && ((*(byte *)(symbol_info + 3) & 4) != 0));\n  } while (sort_by_size != 0);\n  in_R9 = (undefined8 *)(ulong)defined_only;\n  if (defined_only == 0) {\n    cVar3 = (**(code **)(info[1] + 0x230))(info);\n    if (cVar3 != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  else {\n    if (symbol_info[4] == 0x10c2a8) goto LAB_001049c3;\nLAB_00104cba:\n    cVar3 = (**(code **)(info[1] + 0x230))(info);\n    if (cVar3 != '\\0') {\n      display_rel_file_cold();\n      return;\n    }\n  }\n  if (unaff_RBX != symbol_table) {\n    if (symbol_size != (undefined8 *)0x8) {\n      for (; symbol_size != (undefined8 *)0x0; symbol_size = (undefined8 *)((long)symbol_size + -1)) {\n        *(undefined *)unaff_RBX = *(undefined *)symbol_table;\n        symbol_table = (undefined8 *)((long)symbol_table + (ulong)done * -2 + 1);\n        unaff_RBX = (undefined8 *)((long)unaff_RBX + (ulong)done * -2 + 1);\n      }\n      process_symbols_00104d5b_001049c0();\n      return;\n    }\n    *unaff_RBX = *symbol_table;\n    process_symbols_00104d5b_001049c0();\n    return;\n  }\n  unaff_RBX = (undefined8 *)((long)unaff_RBX + (long)symbol_size);\n  goto LAB_001049c3;\ncode_r0x00104992:\n  puVar15 = (undefined8 *)((long)count * (long)symbol_size);\n  count = (undefined8 *)((long)param_9 + (long)puVar15);\n  unaff_RBX = param_9;\n  puVar12 = info;\n  if (param_9 < count) goto code_r0x001049aa;\n  goto LAB_00104b15;\ncode_r0x001049aa:\n  unaff_retaddr = (ulong)bVar16;\n  symbol_table = param_9;\n  goto LAB_001049cf;\n}\n\n",
            "called": [
                "qsort",
                "free",
                "non_fatal",
                "xmalloc",
                "FUN_00104d5b",
                "print_symbol",
                "size_forward2",
                "xrealloc",
                "bfd_fatal",
                "size_forward1",
                "FUN_001049c0",
                "display_rel_file.cold",
                "strcmp",
                "dcgettext"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00104d5b",
            "calling": [
                "FUN_00104d5b"
            ],
            "imported": false,
            "current_name": "process_symbols_00104d5b"
        },
        "FUN_00106300": {
            "renaming": {
                "FUN_00106300": "print_error_message_00106300",
                "param_1": "errorCode",
                "param_2": "level",
                "param_3": "flag",
                "param_4": "num1",
                "param_5": "num2",
                "param_6": "num3",
                "param_7": "num4",
                "param_8": "num5",
                "param_9": "val1",
                "param_10": "val2",
                "param_11": "val3",
                "param_12": "val4",
                "param_13": "val5",
                "param_14": "val6",
                "in_AL": "inputFlag",
                "__arg": "args",
                "__format": "formatString",
                "local_d8": "localNum1",
                "local_d4": "localNum2",
                "local_d0": "localPtr1",
                "local_c8": "localPtr2",
                "local_b8": "localBuffer",
                "local_b0": "localVal1",
                "local_a8": "localVal2",
                "local_a0": "localVal3",
                "local_98": "localVal4",
                "local_90": "localVal5",
                "local_88": "localVar1",
                "local_78": "localVar2",
                "local_68": "localVar3",
                "local_58": "localVar4",
                "local_48": "localVar5",
                "local_38": "localVar6",
                "local_28": "localVar7",
                "local_18": "localVar8",
                "stack0x00000008": "localVar9",
                "_stdout": "standardOutput",
                "_stderr": "standardError",
                "program_name": "programName",
                "putc": "writeChar",
                "fflush": "flushBuffer",
                "xexit": "exitProgram"
            },
            "code": "\n\n\nvoid printErrorMessage_00106300(undefined4 errorCode,undefined4 level,undefined4 flag,undefined4 num1,\n                 undefined4 num2,undefined4 num3,undefined4 num4,undefined4 num5,\n                 undefined8 val1,undefined8 val2,undefined8 val3,undefined8 val4,\n                 undefined8 val5,undefined8 val6)\n\n{\n  char inputFlag;\n  undefined4 *args;\n  char *formatString;\n  undefined4 localNum1;\n  undefined4 localNum2;\n  undefined *localPtr1;\n  undefined *localPtr2;\n  undefined localBuffer [8];\n  undefined8 localVal1;\n  undefined8 localVal2;\n  undefined8 localVal3;\n  undefined8 localVal4;\n  undefined8 localVal5;\n  undefined4 localVar1;\n  undefined4 localVar2;\n  undefined4 localVar3;\n  undefined4 localVar4;\n  undefined4 localVar5;\n  undefined4 localVar6;\n  undefined4 localVar7;\n  undefined4 localVar8;\n  \n  args = &localNum1;\n  if (inputFlag != '\\0') {\n    localVar1 = errorCode;\n    localVar2 = level;\n    localVar3 = flag;\n    localVar4 = num1;\n    localVar5 = num2;\n    localVar6 = num3;\n    localVar7 = num4;\n    localVar8 = num5;\n  }\n  localPtr1 = &localVar9;\n  localNum1 = 8;\n  localPtr2 = localBuffer;\n  localNum2 = 0x30;\n  localVal1 = val2;\n  localVal2 = val3;\n  localVal3 = val4;\n  localVal4 = val5;\n  localVal5 = val6;\n  report();\n  formatString = (char *)0x1;\n  exitProgram();\n  flushBuffer(standardOutput);\n  fprintf(standardError,\"%s: \",programName);\n  vfprintf(standardError,formatString,args);\n  writeChar(10,standardError);\n  return;\n}\n\n",
            "called": [
                "xexit",
                "report"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106300",
            "calling": [
                "print_value.constprop.0.cold",
                "print_symbol_info_bsd",
                "main",
                "set_output_format",
                "print_symbol_info_sysv"
            ],
            "imported": false,
            "current_name": "print_error_message_00106300"
        },
        "FUN_00102100": {
            "renaming": {},
            "code": "\nvoid cplus_demangle_set_style(void)\n\n{\n  cplus_demangle_set_style();\n  return;\n}\n\n",
            "called": [
                "cplus_demangle_set_style"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102100",
            "calling": [
                "main"
            ],
            "imported": false,
            "current_name": "FUN_00102100"
        },
        "FUN_00102f7b": {
            "renaming": {
                "FUN_00102f7b": "print_filename_00102f7b",
                "param_1": "filename",
                "filename_per_file": "useFilenamePerFile",
                "filename_per_symbol": "useFilenamePerSymbol"
            },
            "code": "\nvoid print_filename_00102f7b(undefined8 filename)\n\n{\n  if ((useFilenamePerFile != 0) && (useFilenamePerSymbol == 0)) {\n    printf(\"%s:\\n\",filename);\n    return;\n  }\n  return;\n}\n\n",
            "called": [
                "printf"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00102f7b",
            "calling": [],
            "imported": false,
            "current_name": "print_filename_00102f7b"
        },
        "FUN_00106540": {
            "renaming": {
                "FUN_00106540": "print_error_message_00106540",
                "param_1": "errorMessage",
                "iVar1": "errorStatus",
                "uVar2": "errorString",
                "in_R10": "additionalInfo"
            },
            "code": "\n\n\nvoid printErrorMessage_00106540(long errorMessage)\n\n{\n  int errorStatus;\n  undefined8 errorString;\n  undefined8 additionalInfo;\n  \n  errorStatus = bfd_get_error();\n  if (errorStatus == 0) {\n    errorString = dcgettext(0,\"cause of error unknown\",5);\n  }\n  else {\n    errorString = bfd_errmsg(errorStatus);\n  }\n  fflush(_stdout);\n  if (errorMessage != 0) {\n    fprintf(_stderr,\"%s: %s: %s\\n\",program_name,errorMessage,errorString,additionalInfo);\n    return;\n  }\n  fprintf(_stderr,\"%s: %s\\n\",program_name,errorString,additionalInfo);\n  return;\n}\n\n",
            "called": [
                "bfd_errmsg",
                "fflush",
                "bfd_get_error",
                "fprintf",
                "bfd_nonfatal.cold"
            ],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x00106540",
            "calling": [
                "bfd_fatal",
                "display_file"
            ],
            "imported": false,
            "current_name": "print_error_message_00106540"
        },
        "FUN_0010c160": {
            "renaming": {},
            "code": "\n\n\n\nint stat(char *__file,stat *__buf)\n\n{\n                    /* WARNING: Bad instruction - Truncating control flow here */\n                    /* stat@GLIBC_2.33 */\n  halt_baddata();\n}\n\n",
            "called": [],
            "skipped": false,
            "tags": [],
            "improved": true,
            "entrypoint": "0x0010c160",
            "calling": [
                "stat"
            ],
            "imported": false,
            "current_name": "FUN_0010c160"
        }
    },
    "used_tokens": 94344,
    "layers": [
        [
            "FUN_001055a0",
            "FUN_00103c00",
            "FUN_0010370a",
            "FUN_00105500",
            "FUN_00103b5d",
            "FUN_001036a7",
            "FUN_00102f19",
            "FUN_00102fc3",
            "FUN_00103729",
            "FUN_00102000",
            "FUN_00103573",
            "FUN_00102fd2",
            "FUN_00102f9f",
            "FUN_001035a2",
            "FUN_00103463",
            "FUN_00104397",
            "FUN_00104670",
            "FUN_00103a78",
            "FUN_00102020",
            "FUN_001062d0",
            "FUN_00103238",
            "FUN_001036e0",
            "FUN_001047d0",
            "FUN_0010249f",
            "FUN_001043d0",
            "FUN_001025f5",
            "FUN_00102670",
            "FUN_00104fa0",
            "FUN_001064a0",
            "FUN_001053b0",
            "FUN_001055f0",
            "FUN_0010351b",
            "FUN_00103b2b",
            "FUN_00106400",
            "FUN_00103533",
            "FUN_0010651a",
            "FUN_001053c0",
            "FUN_00103b49",
            "FUN_00103abf",
            "FUN_00103bf6",
            "FUN_00102450",
            "FUN_00102c19",
            "FUN_00106530",
            "FUN_0010268b",
            "FUN_00103bec",
            "FUN_001063a0",
            "FUN_00105050",
            "FUN_001049c0",
            "FUN_00103ca0",
            "FUN_00106300",
            "FUN_00102f7b",
            "FUN_00106540"
        ],
        [
            "FUN_00104370",
            "FUN_00102475",
            "FUN_00105110",
            "FUN_00103a66",
            "FUN_001064b0",
            "FUN_00102739",
            "FUN_00104d5b"
        ],
        [
            "FUN_001048e0",
            "FUN_00104740"
        ],
        [
            "FUN_001054d0"
        ]
    ],
    "locked_functions": []
}